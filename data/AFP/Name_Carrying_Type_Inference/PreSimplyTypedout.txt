Loading theory "Draft.Fresh" (required by "Draft.PreSimplyTypedMoreTemplates" via "Draft.PreSimplyTyped")
Loading theory "Draft.Permutation" (required by "Draft.PreSimplyTypedMoreTemplates" via "Draft.PreSimplyTyped")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.PreSimplyTypedMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.PreSimplyTypedMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
class fresh = type +
  fixes fresh_in :: "'a set => 'a"
  assumes "!!S. finite S ==> fresh_in S ~: S"
instantiation
  nat :: fresh
  fresh_in_nat == fresh_in :: nat set => nat
### theory "Draft.Fresh"
### 0.088s elapsed time, 0.379s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.PreSimplyTypedMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.152s elapsed time, 0.615s cpu time, 0.051s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.PreSimplyTypedMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.221s elapsed time, 0.859s cpu time, 0.134s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.PreSimplyTypedMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.362s elapsed time, 1.449s cpu time, 0.134s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.PreSimplyTypedMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Permutation"
### 0.478s elapsed time, 1.913s cpu time, 0.134s GC time
Loading theory "Draft.PreSimplyTyped" (required by "Draft.PreSimplyTypedMoreTemplates")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.981s elapsed time, 3.724s cpu time, 0.807s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.127s elapsed time, 4.119s cpu time, 0.875s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.972s elapsed time, 6.295s cpu time, 1.096s GC time
Loading theory "Draft.Templates" (required by "Draft.PreSimplyTypedMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.071s elapsed time, 0.170s cpu time, 0.061s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.PreSimplyTypedMoreTemplates")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "ptrm_alpha_equiv"
  Proving monotonicity ...
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.735s elapsed time, 1.760s cpu time, 0.671s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.PreSimplyTyped"
### 2.761s elapsed time, 7.233s cpu time, 1.725s GC time
Loading theory "Draft.PreSimplyTypedMoreTemplates"
val templateLemmas =
   [("PreSimplyTyped.ptrm_fvs_finite", "finite (ptrm_fvs ?X)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("PreSimplyTyped.ptrm_alpha_equiv_reflexive", "?M \<approx> ?M",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("PreSimplyTyped.ptrm_prm_apply_id", "\<epsilon> \<bullet> ?X = ?X",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("PreSimplyTyped.ptrm_size_prm", "size ?X = size (?\<pi> \<bullet> ?X)",
     template_equation
      (template_app (template_hole 1, template_var 1),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("PreSimplyTyped.ptrm_alpha_equiv_symmetric",
     "?X \<approx> ?Y ==> ?Y \<approx> ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("PreSimplyTyped.ptrm_prm_fvs",
     "ptrm_fvs (?\<pi> \<bullet> ?X) = ?\<pi> {$} ptrm_fvs ?X",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("PreSimplyTyped.ptrm_size_alpha_equiv",
     "?X \<approx> ?Y ==> size ?X = size ?Y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("PreSimplyTyped.ptrm_alpha_equiv_fvs",
     "?X \<approx> ?Y ==> ptrm_fvs ?X = ptrm_fvs ?Y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("PreSimplyTyped.ptrm_prm_apply_compose",
     "?\<pi> \<bullet> ?\<sigma> \<bullet> ?X =
      (?\<pi> \<diamondop> ?\<sigma>) \<bullet> ?X",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("PreSimplyTyped.ptrm_infer_type_alpha_equiv",
     "?X \<approx> ?Y ==>
      ptrm_infer_type ?\<Gamma> ?X = ptrm_infer_type ?\<Gamma> ?Y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("PreSimplyTyped.ptrm_alpha_equiv_prm",
     "?X \<approx> ?Y ==>
      ?\<pi> \<bullet> ?X \<approx> ?\<pi> \<bullet> ?Y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("PreSimplyTyped.ptrm_alpha_equiv_transitive",
     "[| ?X \<approx> ?Y; ?Y \<approx> ?Z |] ==> ?X \<approx> ?Z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("PreSimplyTyped.unitE",
     "[| PUnit \<approx> ?Y; ?Y = PUnit ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 1, template_hole 1)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("PreSimplyTyped.ptrm_swp_transfer",
     "[?a \<leftrightarrow> ?b] \<bullet> ?X \<approx> ?Y =
      ?X \<approx> [?a \<leftrightarrow> ?b] \<bullet> ?Y",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 0)))),
    ("PreSimplyTyped.varE",
     "[| PVar ?x \<approx> ?Y; ?Y = PVar ?x ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app (template_hole 1, template_var 2))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("PreSimplyTyped.ptrm_prm_unit_inaction",
     "[| ?a ~: ptrm_fvs ?X; ?b ~: ptrm_fvs ?X |]
      ==> [?a \<leftrightarrow> ?b] \<bullet> ?X \<approx> ?X",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app (template_hole 3, template_var 1))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_app (template_hole 3, template_var 1))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0)),
                 template_var 1)),
             template_var 1)
           ))),
    ("PreSimplyTyped.ptrm_alpha_equiv_fvs_transfer",
     "[| ?A \<approx> [?a \<leftrightarrow> ?b] \<bullet> ?B;
         ?a ~: ptrm_fvs ?B |]
      ==> ?b ~: ptrm_fvs ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 1)),
                template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_app (template_hole 0, template_var 0))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app (template_hole 0, template_var 3))
               )
           ))),
    ("PreSimplyTyped.ptrm_prm_agreement_equiv",
     "(!!a. a : ds ?\<pi> ?\<sigma> ==> a ~: ptrm_fvs ?M) ==>
      ?\<pi> \<bullet> ?M \<approx> ?\<sigma> \<bullet> ?M",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("PreSimplyTyped.fstE",
     "[| PFst ?P \<approx> ?Y;
         !!B. [| ?Y = PFst B; ?P \<approx> B |] ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("PreSimplyTyped.sndE",
     "[| PSnd ?P \<approx> ?Y;
         !!B. [| ?Y = PSnd B; ?P \<approx> B |] ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("PreSimplyTyped.ptrm_infer_type_swp",
     "[| ?a ~= ?b; ?b ~: ptrm_fvs ?X |]
      ==> ptrm_infer_type (?\<Gamma>(?a |-> ?\<tau>)) ?X =
          ptrm_infer_type (?\<Gamma>(?b |-> ?\<tau>))
           ([?a \<leftrightarrow> ?b] \<bullet> ?X)",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_var 3)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 3),
                  template_app (template_hole 6, template_var 2))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 4),
               template_app (template_hole 2, template_var 0))),
           template_var 2),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 3),
               template_app (template_hole 2, template_var 0))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3)),
             template_var 2))))),
    ("PreSimplyTyped.appE",
     "[| PApp ?A ?B \<approx> ?Y;
         !!B D.
            [| ?Y = PApp B D; ?A \<approx> B; ?B \<approx> D |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("PreSimplyTyped.pairE",
     "[| PPair ?A ?B \<approx> ?Y;
         !!B D.
            [| ?Y = PPair B D; ?A \<approx> B; ?B \<approx> D |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("PreSimplyTyped.ptrm_infer_type_swp_types",
     "?a ~= ?b ==>
      ptrm_infer_type (?\<Gamma>(?a |-> ?T, ?b |-> ?S)) ?X =
      ptrm_infer_type (?\<Gamma>(?a |-> ?S, ?b |-> ?T))
       ([?a \<leftrightarrow> ?b] \<bullet> ?X)",
     template_implication
      ([template_negation
         (template_equation (template_var 5, template_var 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_app (template_hole 3, template_var 3),
                       template_var 5),
                     template_app (template_hole 2, template_var 2))),
                 template_var 4),
               template_app (template_hole 2, template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_app (template_hole 3, template_var 3),
                       template_var 5),
                     template_app (template_hole 2, template_var 1))),
                 template_var 4),
               template_app (template_hole 2, template_var 2))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 4)),
             template_var 0))))),
    ("PreSimplyTyped.fnE",
     "[| PFn ?x ?T ?A \<approx> ?Y;
         !!B. [| ?Y = PFn ?x ?T B; ?A \<approx> B |] ==> ?P;
         !!b B.
            [| ?Y = PFn b ?T B; ?x ~= b;
               ?A \<approx> [?x \<leftrightarrow> b] \<bullet> B;
               ?x ~: ptrm_fvs B |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_app (template_hole 9, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.PreSimplyTypedMoreTemplates"
### 0.340s elapsed time, 0.501s cpu time, 0.065s GC time
val it = (): unit
