Loading theory "HOL-Library.FuncSet" (required by "Draft.SunflowerMoreTemplates" via "Draft.Sunflower")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SunflowerMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SunflowerMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SunflowerMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.132s elapsed time, 0.549s cpu time, 0.041s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SunflowerMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.217s elapsed time, 0.887s cpu time, 0.041s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SunflowerMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.331s elapsed time, 1.325s cpu time, 0.120s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SunflowerMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.FuncSet"
### 0.417s elapsed time, 1.668s cpu time, 0.120s GC time
Loading theory "Draft.Sunflower" (required by "Draft.SunflowerMoreTemplates")
### theory "Draft.Sunflower"
### 0.108s elapsed time, 0.420s cpu time, 0.086s GC time
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.780s elapsed time, 2.649s cpu time, 0.300s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.019s elapsed time, 3.126s cpu time, 0.779s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.880s elapsed time, 4.636s cpu time, 0.913s GC time
Loading theory "Draft.Templates" (required by "Draft.SunflowerMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.050s elapsed time, 0.065s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SunflowerMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.471s elapsed time, 0.504s cpu time, 0.039s GC time
Loading theory "Draft.SunflowerMoreTemplates"
val templateLemmas =
   [("Sunflower.singleton_sunflower", "sunflower {?A}",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("Sunflower.doubleton_sunflower", "sunflower {?A, ?B}",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)))
         )),
    ("Sunflower.pairwise_disjnt_imp_sunflower",
     "pairwise disjnt ?F ==> sunflower ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Sunflower.sunflower_subset",
     "[| ?F <= ?G; sunflower ?G |] ==> sunflower ?F",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Sunflower.card2_sunflower",
     "[| finite ?S; card ?S <= 2 |] ==> sunflower ?S",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 0),
          template_app
           (template_hole 3,
            template_app (template_hole 2, template_hole 1)))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Sunflower.sunflower_iff_intersect_Uniq",
     "sunflower ?S = (ALL x. x : \<Inter> ?S | (?< A. A : ?S & x : A))",
     template_equation
      (template_app (template_hole 7, template_var 0),
       template_app (template_hole 6, t_empty))),
    ("Sunflower.sunflower_iff_union_intersect_unique",
     "sunflower ?S =
      (ALL x:\<Union> ?S - \<Inter> ?S. EX! A. A : ?S & x : A)",
     template_equation
      (template_app (template_hole 8, template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 0)),
             template_app (template_hole 4, template_var 0))),
         t_empty))),
    ("Sunflower.sunflower_imp_union_intersect_unique",
     "[| sunflower ?S; ?x : \<Union> ?S - \<Inter> ?S |]
      ==> EX! A. A : ?S & ?x : A",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 1)),
                template_app (template_hole 3, template_var 1)))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Sunflower.union_intersect_unique_imp_sunflower",
     "(!!x. x : \<Union> ?S - \<Inter> ?S ==> ?< A. A : ?S & x : A) ==>
      sunflower ?S",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Sunflower.sunflower_card_subset_lift",
     "[| !!G. [| ALL A:G. finite A & card A = ?k; ?c < card G |]
              ==> EX S<=G. sunflower S & card S = ?r;
         ALL A:?F. finite A & card A <= ?k; ?c < card ?F |]
      ==> EX S<=?F. sunflower S & card S = ?r",
     template_implication
      ([template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0), t_empty)
            ),
        template_inequation
         (less_than, template_var 2,
          template_app (template_hole 3, template_var 0))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Sunflower.sunflower_nonempty_core_lift",
     "[| finite ?E;
         !!G. [| ALL A:G. finite A & card A <= ?k; ?c < card G |]
              ==> EX S<=G. sunflower S & card S = ?r;
         ALL A:?F. A <= ?E & card A <= ?k; {} ~: ?F;
         card ?E * ?c < card ?F |]
      ==> EX S<=?F. sunflower S & card S = ?r & \<Inter> S ~= {}",
     template_implication
      ([template_predicate
         (template_app (template_hole 18, template_var 4)),
        template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 0), t_empty)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 0)
                )
            ),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 13, template_var 4)),
            template_var 2),
          template_app (template_hole 11, template_var 0))],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("Sunflower.sunflower_card_core_lift",
     "[| finite ?E;
         !!G. [| ALL A:G. finite A & card A <= ?k; ?c < card G |]
              ==> EX S<=G. sunflower S & card S = ?r;
         ALL A:?F. A <= ?E & ?s <= card A & card A <= ?k;
         (card ?E choose ?s) * ?c < card ?F; ?s ~= 0; ?r ~= 0 |]
      ==> EX S<=?F. sunflower S & card S = ?r & ?s <= card (\<Inter> S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 5)),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 1), t_empty)
            ),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 12, template_var 5)),
                template_var 0)),
            template_var 3),
          template_app (template_hole 10, template_var 1)),
        template_negation
         (template_equation (template_var 0, template_hole 1)),
        template_negation
         (template_equation (template_var 2, template_hole 1))],
       template_predicate (template_app (template_hole 9, t_empty))))]:
   (string * thm * template) list
### theory "Draft.SunflowerMoreTemplates"
### 0.327s elapsed time, 0.473s cpu time, 0.068s GC time
val it = (): unit
