   [("Erdos_Rado_Sunflower.Erdos_Rado_sunflower",
     "[| ALL A:?F. finite A & card A <= ?k;
         (?r - 1) ^ ?k * fact ?k < card ?F |]
      ==> EX S<=?F. sunflower S & card S = ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 2), t_empty)
            ),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 9,
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_var 0),
                    template_hole 6)),
                template_var 1)),
            template_app (template_hole 5, template_var 1)),
          template_app (template_hole 4, template_var 2))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Erdos_Rado_Sunflower.Erdos_Rado_sunflower_same_card",
     "[| ALL A:?F. finite A & card A = ?k;
         (?r - 1) ^ ?k * fact ?k < card ?F |]
      ==> EX S<=?F. sunflower S & card S = ?r & {} ~: S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 2), t_empty)
            ),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 11,
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_var 0),
                    template_hole 8)),
                template_var 1)),
            template_app (template_hole 7, template_var 1)),
          template_app (template_hole 6, template_var 2))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Erdos_Rado_Sunflower.sunflower_remove_element_lift",
     "[| ?S <= {A - {?a} |A. A : ?F & ?a : A}; sunflower ?S |]
      ==> EX Sa.
             sunflower Sa &
             Sa <= ?F & card Sa = card ?S & Sa = insert ?a ` ?S",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 14, t_empty)),
        template_predicate
         (template_app (template_hole 5, template_var 2))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Erdos_Rado_Sunflower.Erdos_Rado_sunflower_nonempty_core",
     "[| finite ?E; ALL A:?F. A <= ?E & card A <= ?k; {} ~: ?F;
         card ?E * (?r - 1) ^ ?k * fact ?k < card ?F |]
      ==> EX S<=?F. sunflower S & card S = ?r & \<Inter> S ~= {}",
     template_implication
      ([template_predicate
         (template_app (template_hole 21, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 20, template_var 2), t_empty)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 14, template_hole 13),
                  template_var 2)
                )
            ),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 11,
              template_app
               (template_app
                 (template_hole 11,
                  template_app (template_hole 16, template_var 3)),
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 0),
                      template_hole 8)),
                  template_var 1))),
            template_app (template_hole 7, template_var 1)),
          template_app (template_hole 6, template_var 2))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Erdos_Rado_Sunflower.sunflower_lower_bound",
     "[| infinite UNIV; ?r ~= 0; ?r = 1 ==> ?k ~= 0 |]
      ==> EX F. card F = (?r - 1) ^ ?k &
                finite F &
                (ALL A:F. finite A & card A = ?k) &
                ~ (EX S<=F. sunflower S & ?r <= card S)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 15, template_hole 14))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 12)),
        template_implication
         ([template_equation (template_var 1, template_hole 11)],
          template_negation
           (template_equation (template_var 0, template_hole 12)))],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("Erdos_Rado_Sunflower.Erdos_Rado_sunflower_card_core",
     "[| finite ?E; ALL A:?F. A <= ?E & ?s <= card A & card A <= ?k;
         (card ?E choose ?s) * (?r - 1) ^ ?k * fact ?k < card ?F; ?s ~= 0;
         ?r ~= 0 |]
      ==> EX S<=?F. sunflower S & card S = ?r & ?s <= card (\<Inter> S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 20, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 3), t_empty)
            ),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 13,
              template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_app
                     (template_hole 12,
                      template_app (template_hole 15, template_var 4)),
                    template_var 2)),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app (template_hole 10, template_var 0),
                      template_hole 9)),
                  template_var 1))),
            template_app (template_hole 8, template_var 1)),
          template_app (template_hole 7, template_var 3)),
        template_negation
         (template_equation (template_var 2, template_hole 4)),
        template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_predicate (template_app (template_hole 3, t_empty))))]
