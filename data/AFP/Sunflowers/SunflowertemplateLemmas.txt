   [("Sunflower.singleton_sunflower", "sunflower {?A}",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("Sunflower.doubleton_sunflower", "sunflower {?A, ?B}",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)))
         )),
    ("Sunflower.pairwise_disjnt_imp_sunflower",
     "pairwise disjnt ?F ==> sunflower ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Sunflower.sunflower_subset",
     "[| ?F <= ?G; sunflower ?G |] ==> sunflower ?F",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Sunflower.card2_sunflower",
     "[| finite ?S; card ?S <= 2 |] ==> sunflower ?S",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 0),
          template_app
           (template_hole 3,
            template_app (template_hole 2, template_hole 1)))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Sunflower.sunflower_iff_intersect_Uniq",
     "sunflower ?S = (ALL x. x : \<Inter> ?S | (?< A. A : ?S & x : A))",
     template_equation
      (template_app (template_hole 7, template_var 0),
       template_app (template_hole 6, t_empty))),
    ("Sunflower.sunflower_iff_union_intersect_unique",
     "sunflower ?S =
      (ALL x:\<Union> ?S - \<Inter> ?S. EX! A. A : ?S & x : A)",
     template_equation
      (template_app (template_hole 8, template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 0)),
             template_app (template_hole 4, template_var 0))),
         t_empty))),
    ("Sunflower.sunflower_imp_union_intersect_unique",
     "[| sunflower ?S; ?x : \<Union> ?S - \<Inter> ?S |]
      ==> EX! A. A : ?S & ?x : A",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 1)),
                template_app (template_hole 3, template_var 1)))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Sunflower.union_intersect_unique_imp_sunflower",
     "(!!x. x : \<Union> ?S - \<Inter> ?S ==> ?< A. A : ?S & x : A) ==>
      sunflower ?S",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Sunflower.sunflower_card_subset_lift",
     "[| !!G. [| ALL A:G. finite A & card A = ?k; ?c < card G |]
              ==> EX S<=G. sunflower S & card S = ?r;
         ALL A:?F. finite A & card A <= ?k; ?c < card ?F |]
      ==> EX S<=?F. sunflower S & card S = ?r",
     template_implication
      ([template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0), t_empty)
            ),
        template_inequation
         (less_than, template_var 2,
          template_app (template_hole 3, template_var 0))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Sunflower.sunflower_nonempty_core_lift",
     "[| finite ?E;
         !!G. [| ALL A:G. finite A & card A <= ?k; ?c < card G |]
              ==> EX S<=G. sunflower S & card S = ?r;
         ALL A:?F. A <= ?E & card A <= ?k; {} ~: ?F;
         card ?E * ?c < card ?F |]
      ==> EX S<=?F. sunflower S & card S = ?r & \<Inter> S ~= {}",
     template_implication
      ([template_predicate
         (template_app (template_hole 18, template_var 4)),
        template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 0), t_empty)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 0)
                )
            ),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 13, template_var 4)),
            template_var 2),
          template_app (template_hole 11, template_var 0))],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("Sunflower.sunflower_card_core_lift",
     "[| finite ?E;
         !!G. [| ALL A:G. finite A & card A <= ?k; ?c < card G |]
              ==> EX S<=G. sunflower S & card S = ?r;
         ALL A:?F. A <= ?E & ?s <= card A & card A <= ?k;
         (card ?E choose ?s) * ?c < card ?F; ?s ~= 0; ?r ~= 0 |]
      ==> EX S<=?F. sunflower S & card S = ?r & ?s <= card (\<Inter> S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 5)),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 1), t_empty)
            ),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 12, template_var 5)),
                template_var 0)),
            template_var 3),
          template_app (template_hole 10, template_var 1)),
        template_negation
         (template_equation (template_var 0, template_hole 1)),
        template_negation
         (template_equation (template_var 2, template_hole 1))],
       template_predicate (template_app (template_hole 9, t_empty))))]
