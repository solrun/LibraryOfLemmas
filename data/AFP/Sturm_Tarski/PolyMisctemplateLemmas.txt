   [("PolyMisc.poly_mod",
     "poly ?q ?x = (0::?'a) ==> poly (?p mod ?q) ?x = poly ?p ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_hole 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_var 1)))),
    ("PolyMisc.coprime_poly_0",
     "coprime ?p ?q ==> poly ?p ?x ~= (0::?'a) | poly ?q ?x ~= (0::?'a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 2),
                       template_var 0)),
                   template_hole 0))),
             template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0)),
                 template_hole 0)))
           ))),
    ("PolyMisc.smult_cancel",
     "[| ?c ~= (0::?'a); smult ?c ?p = smult ?c ?q |] ==> ?p = ?q",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 2)),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 0, template_var 2),
            template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("PolyMisc.poly_power_n_eq",
     "?n ~= 0 ==> (poly ([:- ?a, 1::?'a:] ^ ?n) ?x = (0::?'a)) = (?x = ?a)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 9))],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_var 1)),
                     template_app
                      (template_app (template_hole 4, template_hole 2),
                       template_hole 1))),
                 template_var 2)),
             template_var 0),
           template_hole 0),
         template_equation (template_var 0, template_var 1)))),
    ("PolyMisc.poly_power_n_odd",
     "odd ?n ==> (0 < poly ([:- ?a, 1:] ^ ?n) ?x) = (?a < ?x)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 12,
                    template_app
                     (template_hole 11,
                      template_app (template_hole 10, template_hole 9))),
                  template_var 2)
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 7, template_hole 6),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 1)),
                     template_app
                      (template_app (template_hole 3, template_hole 1),
                       template_hole 0))),
                 template_var 2)),
             template_var 0)),
         template_app
          (template_app (template_hole 7, template_var 1),
           template_var 0)))),
    ("PolyMisc.dvd_monic",
     "[| lead_coeff ?p = (1::?'a); ?p dvd smult ?c ?q; ?c ~= (0::?'a) |]
      ==> ?p dvd ?q",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 2),
            template_app (template_hole 5, template_var 2)),
          template_hole 4),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2), template_var 0)
           ))),
    ("PolyMisc.gcd_coprime_poly",
     "[| ?p ~= 0 | ?q ~= 0; ?p = ?p' * gcd ?p ?q; ?q = ?q' * gcd ?p ?q |]
      ==> coprime ?p' ?q'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_hole 3))),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_hole 3)))
            ),
        template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 2, template_var 1),
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2))),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 2, template_var 0),
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           )))]
