Loading theory "HOL-Library.Cancellation" (required by "Draft.Sturm_TarskiMoreTemplates" via "Draft.Sturm_Tarski" via "Draft.PolyMisc" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial" via "HOL-Computational_Algebra.Factorial_Ring" via "HOL-Library.Multiset")
Loading theory "HOL-Computational_Algebra.Fraction_Field" (required by "Draft.Sturm_TarskiMoreTemplates" via "Draft.Sturm_Tarski" via "Draft.PolyMisc" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Normalized_Fraction")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Sturm_TarskiMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Sturm_TarskiMoreTemplates" via "Draft.Sturm_Tarski" via "Draft.PolyMisc" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.127s elapsed time, 0.524s cpu time, 0.036s GC time
Loading theory "HOL-Library.More_List" (required by "Draft.Sturm_TarskiMoreTemplates" via "Draft.Sturm_Tarski" via "Draft.PolyMisc" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial")
consts
  enumerate :: "'a set => nat => 'a"
### theory "HOL-Library.More_List"
### 0.172s elapsed time, 0.677s cpu time, 0.064s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Sturm_TarskiMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
### theory "HOL-Library.Infinite_Set"
### 0.322s elapsed time, 1.285s cpu time, 0.100s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Sturm_TarskiMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
instantiation
  fract :: (idom) comm_ring_1
  uminus_fract == uminus :: 'a fract => 'a fract
  one_fract == one_class.one :: 'a fract
  times_fract == times :: 'a fract => 'a fract => 'a fract
  zero_fract == zero_class.zero :: 'a fract
  minus_fract == minus :: 'a fract => 'a fract => 'a fract
  plus_fract == plus :: 'a fract => 'a fract => 'a fract
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.417s elapsed time, 1.674s cpu time, 0.100s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Sturm_TarskiMoreTemplates" via "Draft.Sturm_Tarski" via "Draft.PolyMisc" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial" via "HOL-Computational_Algebra.Factorial_Ring")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.211s elapsed time, 0.820s cpu time, 0.072s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Sturm_TarskiMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
### theory "HOL-Library.Nat_Bijection"
### 0.345s elapsed time, 1.351s cpu time, 0.170s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Sturm_TarskiMoreTemplates" via "Draft.ExtrEqs")
instantiation
  fract :: (idom) field
  inverse_fract == inverse :: 'a fract => 'a fract
  divide_fract == divide :: 'a fract => 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) linorder
  less_eq_fract == less_eq :: 'a fract => 'a fract => bool
  less_fract == less :: 'a fract => 'a fract => bool
instantiation
  fract :: (linordered_idom) linordered_field
  sgn_fract == sgn :: 'a fract => 'a fract
  abs_fract == abs :: 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) distrib_lattice
  inf_fract == inf :: 'a fract => 'a fract => 'a fract
  sup_fract == sup :: 'a fract => 'a fract => 'a fract
### theory "HOL-Computational_Algebra.Fraction_Field"
### 1.101s elapsed time, 4.175s cpu time, 0.905s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Sturm_TarskiMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.138s elapsed time, 4.307s cpu time, 0.926s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
### theory "HOL-Library.BigO"
### 0.859s elapsed time, 3.236s cpu time, 0.393s GC time
Found termination order: "size <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "size <*mlex*> {}"
consts
  mset :: "'a list => 'a multiset"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.388s elapsed time, 7.550s cpu time, 1.998s GC time
Loading theory "Draft.Templates" (required by "Draft.Sturm_TarskiMoreTemplates" via "Draft.ExtrEqs")
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.107s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Sturm_TarskiMoreTemplates")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.534s elapsed time, 1.104s cpu time, 0.091s GC time
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.512s elapsed time, 9.577s cpu time, 2.157s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.Sturm_TarskiMoreTemplates" via "Draft.Sturm_Tarski" via "Draft.PolyMisc" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial")
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 4.773s elapsed time, 5.838s cpu time, 1.427s GC time
Loading theory "HOL-Computational_Algebra.Euclidean_Algorithm" (required by "Draft.Sturm_TarskiMoreTemplates" via "Draft.Sturm_Tarski" via "Draft.PolyMisc" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Normalized_Fraction")
Loading theory "HOL-Computational_Algebra.Polynomial" (required by "Draft.Sturm_TarskiMoreTemplates" via "Draft.Sturm_Tarski" via "Draft.PolyMisc" via "HOL-Computational_Algebra.Polynomial_Factorial")
instantiation
  poly :: (zero) zero
  zero_poly == zero_class.zero :: 'a poly
consts
  Poly :: "'a list => 'a poly"
instantiation
  poly :: ({zero,equal}) equal
  equal_poly == equal_class.equal :: 'a poly => 'a poly => bool
instantiation
  poly :: (comm_monoid_add) comm_monoid_add
  plus_poly == plus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_poly == minus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (ab_group_add) ab_group_add
  uminus_poly == uminus :: 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
instantiation
  poly :: (comm_semiring_0) comm_semiring_0
  times_poly == times :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (comm_semiring_1) comm_semiring_1
  one_poly == one_class.one :: 'a poly
instantiation
  poly :: (linordered_idom) linordered_idom
  sgn_poly == sgn :: 'a poly => 'a poly
  abs_poly == abs :: 'a poly => 'a poly
  less_eq_poly == less_eq :: 'a poly => 'a poly => bool
  less_poly == less :: 'a poly => 'a poly => bool
class euclidean_semiring_gcd = normalization_euclidean_semiring + Gcd +
  assumes "gcd_eucl": "normalization_euclidean_semiring_class.gcd = gcd"
    and "lcm_eucl": "normalization_euclidean_semiring_class.lcm = lcm"
  assumes "Gcd_eucl": "normalization_euclidean_semiring_class.Gcd = Gcd"
    and "Lcm_eucl": "normalization_euclidean_semiring_class.Lcm = Lcm"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "algebraic_int"
  Proving monotonicity ...
instantiation
  poly :: (idom_divide) idom_divide
  divide_poly == divide :: 'a poly => 'a poly => 'a poly
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
instantiation
  poly :: ({idom_divide,semidom_divide_unit_factor}) normalization_semidom
  normalize_poly == normalize :: 'a poly => 'a poly
  unit_factor_poly == unit_factor :: 'a poly => 'a poly
class field_unit_factor = field + unit_factor +
  assumes "unit_factor_field": "unit_factor = id"
Proofs for inductive predicate(s) "eucl_rel_poly"
  Proving monotonicity ...
instantiation
  poly :: (field) semidom_modulo
  modulo_poly == modulo :: 'a poly => 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
### theory "HOL-Computational_Algebra.Polynomial"
### 4.668s elapsed time, 9.948s cpu time, 1.245s GC time
### theory "HOL-Computational_Algebra.Euclidean_Algorithm"
### 6.836s elapsed time, 12.346s cpu time, 1.454s GC time
Loading theory "HOL-Computational_Algebra.Normalized_Fraction" (required by "Draft.Sturm_TarskiMoreTemplates" via "Draft.Sturm_Tarski" via "Draft.PolyMisc" via "HOL-Computational_Algebra.Polynomial_Factorial")
Loading theory "HOL-Computational_Algebra.Field_as_Ring" (required by "Draft.Sturm_TarskiMoreTemplates" via "Draft.Sturm_Tarski")
locale fract_as_normalized_quot
### theory "HOL-Computational_Algebra.Normalized_Fraction"
### 0.364s elapsed time, 0.780s cpu time, 0.073s GC time
Loading theory "HOL-Computational_Algebra.Polynomial_Factorial" (required by "Draft.Sturm_TarskiMoreTemplates" via "Draft.Sturm_Tarski" via "Draft.PolyMisc")
class field = division_ring + idom_divide +
  assumes "field_inverse": "!!a. a ~= (0::'a) ==> inverse a * a = (1::'a)"
  assumes "field_divide_inverse": "!!a b. a / b = a * inverse b"
  assumes "field_inverse_zero": "inverse (0::'a) = (0::'a)"
instantiation
  real ::
    {normalization_euclidean_semiring,unique_euclidean_ring,normalization_semidom_multiplicative}
  division_segment_real == division_segment :: real => real
  normalize_real == normalize :: real => real
  unit_factor_real == unit_factor :: real => real
  euclidean_size_real == euclidean_size :: real => nat
  modulo_real == modulo :: real => real => real
instantiation
  real :: euclidean_ring_gcd
  Gcd_real == Gcd :: real set => real
  Lcm_real == Lcm :: real set => real
  gcd_real == gcd :: real => real => real
  lcm_real == lcm :: real => real => real
instantiation
  rat ::
    {normalization_euclidean_semiring,unique_euclidean_ring,normalization_semidom_multiplicative}
  division_segment_rat == division_segment :: rat => rat
  normalize_rat == normalize :: rat => rat
  unit_factor_rat == unit_factor :: rat => rat
  euclidean_size_rat == euclidean_size :: rat => nat
  modulo_rat == modulo :: rat => rat => rat
instantiation
  rat :: euclidean_ring_gcd
  Gcd_rat == Gcd :: rat set => rat
  Lcm_rat == Lcm :: rat set => rat
  gcd_rat == gcd :: rat => rat => rat
  lcm_rat == lcm :: rat => rat => rat
### Cannot skip proof of schematic goal statement
instantiation
  complex ::
    {normalization_euclidean_semiring,unique_euclidean_ring,normalization_semidom_multiplicative}
  division_segment_complex == division_segment :: complex => complex
  normalize_complex == normalize :: complex => complex
  unit_factor_complex == unit_factor :: complex => complex
  euclidean_size_complex == euclidean_size :: complex => nat
  modulo_complex == modulo :: complex => complex => complex
instantiation
  complex :: euclidean_ring_gcd
  Gcd_complex == Gcd :: complex set => complex
  Lcm_complex == Lcm :: complex set => complex
  gcd_complex == gcd :: complex => complex => complex
  lcm_complex == lcm :: complex => complex => complex
### theory "HOL-Computational_Algebra.Field_as_Ring"
### 0.882s elapsed time, 1.907s cpu time, 0.204s GC time
instantiation
  poly :: ({factorial_ring_gcd,semiring_gcd_mult_normalize})
    factorial_ring_gcd
  Gcd_poly == Gcd :: 'a poly set => 'a poly
  Lcm_poly == Lcm :: 'a poly set => 'a poly
  gcd_poly == gcd :: 'a poly => 'a poly => 'a poly
  lcm_poly == lcm :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: ({factorial_ring_gcd,field,semiring_gcd_mult_normalize})
    {normalization_euclidean_semiring,unique_euclidean_ring}
  division_segment_poly == division_segment :: 'a poly => 'a poly
  euclidean_size_poly == euclidean_size :: 'a poly => nat
### theory "HOL-Computational_Algebra.Polynomial_Factorial"
### 0.814s elapsed time, 1.465s cpu time, 0.195s GC time
Loading theory "Draft.PolyMisc" (required by "Draft.Sturm_TarskiMoreTemplates" via "Draft.Sturm_Tarski")
### theory "Draft.PolyMisc"
### 0.056s elapsed time, 0.056s cpu time, 0.000s GC time
Loading theory "Draft.Sturm_Tarski" (required by "Draft.Sturm_TarskiMoreTemplates")
Found termination order: "length <*mlex*> {}"
### theory "Draft.Sturm_Tarski"
### 0.733s elapsed time, 0.898s cpu time, 0.211s GC time
Loading theory "Draft.Sturm_TarskiMoreTemplates"
val templateLemmas =
   [("Sturm_Tarski.sign_r_pos_0", "~ sign_r_pos 0 ?x",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0)
             )
         )),
    ("Sturm_Tarski.changes_R_smods_0", "changes_R_smods 0 ?q = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Sturm_Tarski.changes_R_smods_0", "changes_R_smods ?p 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Sturm_Tarski.changes_poly_at_0", "changes_poly_at [] ?a = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Sturm_Tarski.variation_0", "variation 0 ?y = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Sturm_Tarski.variation_0", "variation ?x 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Sturm_Tarski.smods_0", "smods 0 ?q = []",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Sturm_Tarski.sgn_sign_eq", "sgn ?x = of_int (sign ?x)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Sturm_Tarski.cross_0", "cross 0 ?a ?b = 0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 1),
         template_var 0),
       template_hole 0)),
    ("Sturm_Tarski.jump_poly0", "jump_poly 0 ?p ?x = 0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 1),
         template_var 0),
       template_hole 0)),
    ("Sturm_Tarski.jump_poly0", "jump_poly ?q 0 ?x = 0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_hole 1),
         template_var 0),
       template_hole 0)),
    ("Sturm_Tarski.no_0_in_smods", "0 ~: set (smods ?p ?q)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)))
             )
         )),
    ("Sturm_Tarski.changes_map_sgn_eq",
     "changes ?xs = changes (map sgn ?xs)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Sturm_Tarski.changes_itv_smods_0", "changes_itv_smods ?a ?b 0 ?q = 0",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_hole 1),
         template_var 0),
       template_hole 0)),
    ("Sturm_Tarski.changes_itv_smods_0", "changes_itv_smods ?a ?b ?p 0 = 0",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0),
         template_hole 1),
       template_hole 0)),
    ("Sturm_Tarski.changes_poly_at_0", "changes_poly_at [?p] ?a = 0",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1)),
         template_var 0),
       template_hole 0)),
    ("Sturm_Tarski.cindex_poly_0", "cindex_poly ?a ?b 0 ?p = 0",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_hole 1),
         template_var 0),
       template_hole 0)),
    ("Sturm_Tarski.cindex_poly_0", "cindex_poly ?a ?b ?q 0 = 0",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0),
         template_hole 1),
       template_hole 0)),
    ("Sturm_Tarski.variation_comm", "variation ?x ?y = - variation ?y ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("Sturm_Tarski.smods_nil_eq", "(smods ?p ?q = []) = (?p = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 2),
       template_equation (template_var 1, template_hole 0))),
    ("Sturm_Tarski.sign_simps", "?x = (0::?'a) ==> sign ?x = 0",
     template_implication
      ([template_equation (template_var 0, template_hole 3)],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Sturm_Tarski.sign_simps", "(0::?'a) < ?x ==> sign ?x = 1",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 0)],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Sturm_Tarski.poly_sgn_eventually_at_bot",
     "\<forall>\<^sub>F x in at_bot. sgn (poly ?p x) = sgn_neg_inf ?p",
     template_predicate
      (
         template_app
          (template_app (template_hole 5, t_empty), template_hole 0)
         )),
    ("Sturm_Tarski.poly_sgn_eventually_at_top",
     "\<forall>\<^sub>F x in at_top. sgn (poly ?p x) = sgn_pos_inf ?p",
     template_predicate
      (
         template_app
          (template_app (template_hole 5, t_empty), template_hole 0)
         )),
    ("Sturm_Tarski.poly_tendsto",
     "poly ?p \<midarrow>?x\<rightarrow> poly ?p ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1)),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0))),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("Sturm_Tarski.sign_times", "sign (?x * ?y) = sign ?x * sign ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Sturm_Tarski.sign_r_pos_power", "sign_r_pos ([:- ?a, 1:] ^ ?n) ?a",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 1)),
                   template_app
                    (template_app (template_hole 3, template_hole 1),
                     template_hole 0))),
               template_var 0)),
           template_var 1)
         )),
    ("Sturm_Tarski.sign_simps", "?x < (0::?'a) ==> sign ?x = - 1",
     template_implication
      ([template_inequation (less_than, template_var 0, template_hole 4)],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("Sturm_Tarski.poly_tendsto",
     "(poly ?p \<longlongrightarrow> poly ?p ?x) (at_right ?x)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1)),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0))),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 0)))
         )),
    ("Sturm_Tarski.poly_tendsto",
     "(poly ?p \<longlongrightarrow> poly ?p ?x) (at_left ?x)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1)),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0))),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 0)))
         )),
    ("Sturm_Tarski.jump_poly_mod",
     "jump_poly ?q ?p ?x = jump_poly (?q mod ?p) ?p ?x",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 1),
         template_var 0))),
    ("Sturm_Tarski.smods_0", "smods ?p 0 = (if ?p = 0 then [] else [?p])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 4)),
               template_hole 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_hole 1))
           ))),
    ("Sturm_Tarski.sgn_inf_sym",
     "sgn_pos_inf (?p \<circ>\<^sub>p [:0, - 1:]) = sgn_neg_inf ?p",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 0),
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 3, template_hole 2)),
               template_hole 1)))),
       template_app (template_hole 0, template_var 0))),
    ("Sturm_Tarski.cindex_poly_mod",
     "cindex_poly ?a ?b ?q ?p = cindex_poly ?a ?b (?q mod ?p) ?p",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0))),
    ("Sturm_Tarski.greaterThanLessThan_unfold",
     "{?a<..<?b} = {x. ?a < x & x < ?b}",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Sturm_Tarski.jump_poly_smult_1",
     "jump_poly (smult ?c ?q) ?p ?x = sign ?c * jump_poly ?q ?p ?x",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Sturm_Tarski.sturm_R",
     "int (card {x. poly ?p x = 0}) = changes_R_smods ?p (pderiv ?p)",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_hole 6, template_app (template_hole 5, t_empty))),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Sturm_Tarski.variation_mult_pos",
     "0 < ?c ==> variation ?x (?c * ?y) = variation ?x ?y",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Sturm_Tarski.variation_mult_pos",
     "0 < ?c ==> variation (?c * ?x) ?y = variation ?x ?y",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Sturm_Tarski.jump_poly_not_root",
     "poly ?p ?x ~= 0 ==> jump_poly ?q ?p ?x = 0",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2),
           template_var 1),
         template_hole 0))),
    ("Sturm_Tarski.sign_r_pos_minus",
     "?p ~= 0 ==> sign_r_pos ?p ?x = (~ sign_r_pos (- ?p) ?x)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0))))),
    ("Sturm_Tarski.variation_cases",
     "[| 0 < ?x; 0 < ?y |] ==> variation ?x ?y = 0",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1),
        template_inequation (less_than, template_hole 3, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Sturm_Tarski.variation_cases",
     "[| ?x < 0; 0 < ?y |] ==> variation ?x ?y = 1",
     template_implication
      ([template_inequation (less_than, template_var 1, template_hole 3),
        template_inequation (less_than, template_hole 3, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Sturm_Tarski.variation_cases",
     "[| ?x < 0; ?y < 0 |] ==> variation ?x ?y = 0",
     template_implication
      ([template_inequation (less_than, template_var 1, template_hole 3),
        template_inequation (less_than, template_var 0, template_hole 3)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Sturm_Tarski.cindex_poly_smult_1",
     "cindex_poly ?a ?b (smult ?c ?q) ?p =
      sign ?c * cindex_poly ?a ?b ?q ?p",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 2)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 4),
               template_var 3),
             template_var 1),
           template_var 0)))),
    ("Sturm_Tarski.sturm_tarski_R",
     "taq {x. poly ?p x = 0} ?q = changes_R_smods ?p (pderiv ?p * ?q)",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, t_empty)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Sturm_Tarski.variation_cases",
     "[| 0 < ?x; ?y < 0 |] ==> variation ?x ?y = - 1",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 1),
        template_inequation (less_than, template_var 0, template_hole 4)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("Sturm_Tarski.jump_poly_mult",
     "?p' ~= 0 ==> jump_poly (?p' * ?q) (?p' * ?p) ?x = jump_poly ?q ?p ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 3))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Sturm_Tarski.sign_r_pos_pderiv",
     "[| poly ?p ?x = 0; ?p ~= 0 |] ==> sign_r_pos (pderiv ?p * ?p) ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 1), template_var 0),
          template_hole 6),
        template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1)),
                 template_var 1)),
             template_var 0)
           ))),
    ("Sturm_Tarski.eventually_neg",
     "[| ?F ~= bot; eventually ?P ?F |]
      ==> ~ (\<forall>\<^sub>F x in ?F. ~ ?P x)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, t_empty), template_var 1)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 0, t_empty), template_var 1)
               )
           ))),
    ("Sturm_Tarski.sign_power",
     "sign (?x ^ ?n) =
      (if ?n = 0 then 1
       else if even ?n then \<bar>sign ?x\<bar> else sign ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 10,
              template_app
               (template_app (template_hole 9, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 0),
                   template_hole 6)),
               template_hole 5),
             template_app
              (template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_hole 1))),
                     template_var 0)),
                 template_app
                  (template_hole 0,
                   template_app (template_hole 10, template_var 1))),
               template_app (template_hole 10, template_var 1)))
           ))),
    ("Sturm_Tarski.cindex_poly_mult",
     "?p' ~= 0 ==>
      cindex_poly ?a ?b (?p' * ?q) (?p' * ?p) = cindex_poly ?a ?b ?q ?p",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_hole 3))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 4),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("Sturm_Tarski.smods_singleton",
     "[?x] = smods ?p ?q ==> ?p ~= 0 & ?q = 0 & ?x = ?p",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 2),
            template_hole 5),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 0))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0)),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)))
           ))),
    ("Sturm_Tarski.variation_congr",
     "[| sgn ?x = sgn ?x'; sgn ?y = sgn ?y' |]
      ==> variation ?x ?y = variation ?x' ?y'",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 3),
          template_app (template_hole 2, template_var 2)),
        template_equation
         (template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Sturm_Tarski.variation_mult_neg_1",
     "?c < 0 ==>
      variation (?c * ?x) ?y =
      variation ?x ?y + (if ?y = 0 then 0 else sign ?x)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 8)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_var 1)),
                template_var 0)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_var 0)),
               template_app
                (template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 0),
                       template_hole 8)),
                   template_hole 1),
                 template_app (template_hole 0, template_var 1)))
             )))),
    ("Sturm_Tarski.variation_mult_neg_2",
     "?c < 0 ==>
      variation ?x (?c * ?y) =
      variation ?x ?y + (if ?x = 0 then 0 else - sign ?y)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 9)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 7, template_var 1),
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 0))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 7, template_var 1),
                   template_var 0)),
               template_app
                (template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 1),
                       template_hole 9)),
                   template_hole 2),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0))))
             )))),
    ("Sturm_Tarski.jump_poly_coprime",
     "[| poly ?p ?x = 0; coprime ?p ?q |]
      ==> jump_poly ?q ?p ?x = jump_poly 1 (?q * ?p) ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 2), template_var 1),
          template_hole 5),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 0),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)),
           template_var 1)))),
    ("Sturm_Tarski.cindex_poly_inverse_add",
     "coprime ?p ?q ==>
      cindex_poly ?a ?b ?q ?p + cindex_poly ?a ?b ?p ?q =
      cindex_poly ?a ?b 1 (?q * ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0),
                 template_var 2),
               template_var 3)),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0),
               template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0),
             template_hole 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 3))))),
    ("Sturm_Tarski.poly_pinfty_gt_lc",
     "0 < lead_coeff ?p ==> EX n. ALL x>=n. lead_coeff ?p <= poly ?p x",
     template_implication
      ([template_inequation
         (less_than, template_hole 7,
          template_app
           (template_app (template_hole 6, template_var 0),
            template_app (template_hole 5, template_var 0)))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Sturm_Tarski.sign_r_pos_add",
     "[| poly ?p ?x = 0; poly ?q ?x ~= 0 |]
      ==> sign_r_pos (?p + ?q) ?x = sign_r_pos ?q ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_hole 4),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 5, template_var 0),
                template_var 1),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("Sturm_Tarski.sign_r_pos_mod",
     "[| poly ?p ?x = 0; poly ?q ?x ~= 0 |]
      ==> sign_r_pos (?q mod ?p) ?x = sign_r_pos ?q ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_hole 4),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 5, template_var 0),
                template_var 1),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("Sturm_Tarski.eventually_at_right",
     "eventually ?P (at_right ?x) = (EX b>?x. ALL y>?x. y < b --> ?P y)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1),
         template_app
          (template_app (template_hole 6, template_var 0),
           template_app (template_hole 5, template_var 0))),
       template_app (template_hole 4, t_empty))),
    ("Sturm_Tarski.eventually_at_left",
     "eventually ?P (at_left ?x) = (EX b<?x. ALL y>b. y < ?x --> ?P y)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1),
         template_app
          (template_app (template_hole 6, template_var 0),
           template_app (template_hole 5, template_var 0))),
       template_app (template_hole 4, t_empty))),
    ("Sturm_Tarski.sign_r_pos_rec",
     "?p ~= 0 ==>
      sign_r_pos ?p ?x =
      (if poly ?p ?x = 0 then sign_r_pos (pderiv ?p) ?x
       else 0 < poly ?p ?x)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 8))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 1),
                         template_var 0)),
                     template_hole 2)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app (template_hole 1, template_var 1)),
                   template_var 0)),
               template_app
                (template_app (template_hole 0, template_hole 2),
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 0)))
             )))),
    ("Sturm_Tarski.sign_r_pos_mult",
     "[| ?p ~= 0; ?q ~= 0 |]
      ==> sign_r_pos (?p * ?q) ?x = (sign_r_pos ?p ?x = sign_r_pos ?q ?x)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 3)),
        template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 2),
                    template_var 1)),
                template_var 0)
              )],
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("Sturm_Tarski.jump_poly_sgn",
     "[| ?p ~= 0; poly ?p ?x = 0 |]
      ==> jump_poly (pderiv ?p * ?q) ?p ?x = sign (poly ?q ?x)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 8)),
        template_equation
         (template_app
           (template_app (template_hole 6, template_var 2), template_var 1),
          template_hole 5)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 2)),
                 template_var 0)),
             template_var 2),
           template_var 1),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 6, template_var 0),
             template_var 1))))),
    ("Sturm_Tarski.cindex_poly_taq",
     "taq {x. poly ?p x = 0 & ?a < x & x < ?b} ?q =
      cindex_poly ?a ?b (pderiv ?p * ?q) ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 9, template_app (template_hole 8, t_empty)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 3)),
             template_var 0)),
         template_var 3))),
    ("Sturm_Tarski.sturm_above",
     "poly ?p ?a ~= 0 ==>
      int (card {x. poly ?p x = 0 & ?a < x}) =
      changes_gt_smods ?a ?p (pderiv ?p)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 9, template_var 1),
                template_var 0),
              template_hole 8)
            )],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5, template_app (template_hole 4, t_empty))),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1),
           template_app (template_hole 0, template_var 1))))),
    ("Sturm_Tarski.sturm_below",
     "poly ?p ?b ~= 0 ==>
      int (card {x. poly ?p x = 0 & x < ?b}) =
      changes_le_smods ?b ?p (pderiv ?p)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 9, template_var 1),
                template_var 0),
              template_hole 8)
            )],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5, template_app (template_hole 4, t_empty))),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1),
           template_app (template_hole 0, template_var 1))))),
    ("Sturm_Tarski.sturm_tarski_above",
     "poly ?p ?a ~= 0 ==>
      taq {x. poly ?p x = 0 & ?a < x} ?q =
      changes_gt_smods ?a ?p (pderiv ?p * ?q)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 9, template_var 2),
                template_var 1),
              template_hole 8)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6, template_app (template_hole 5, t_empty)),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_var 2),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0))))),
    ("Sturm_Tarski.sturm_tarski_below",
     "poly ?p ?b ~= 0 ==>
      taq {x. poly ?p x = 0 & x < ?b} ?q =
      changes_le_smods ?b ?p (pderiv ?p * ?q)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 9, template_var 2),
                template_var 1),
              template_hole 8)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6, template_app (template_hole 5, t_empty)),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_var 2),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0))))),
    ("Sturm_Tarski.cross_no_root",
     "[| ?a < ?b; ALL x. ?a < x & x < ?b --> poly ?p x ~= 0 |]
      ==> cross ?p ?a ?b = 0",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2),
           template_var 1),
         template_hole 0))),
    ("Sturm_Tarski.sign_r_pos_smult",
     "[| ?c ~= 0; ?p ~= 0 |]
      ==> sign_r_pos (smult ?c ?p) ?x =
          (if 0 < ?c then sign_r_pos ?p ?x else ~ sign_r_pos ?p ?x)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 7)),
        template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_hole 7),
                 template_var 2)),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)))))),
    ("Sturm_Tarski.sign_cases",
     "[| sign ?x = - 1 ==> ?P; sign ?x = 0 ==> ?P; sign ?x = 1 ==> ?P |]
      ==> ?P",
     template_implication
      ([template_implication
         ([template_equation
            (template_app (template_hole 3, template_var 1),
             template_app (template_hole 2, template_hole 1))],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation
            (template_app (template_hole 3, template_var 1),
             template_hole 0)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation
            (template_app (template_hole 3, template_var 1),
             template_hole 1)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Sturm_Tarski.cindex_poly_cross",
     "[| ?a < ?b; poly ?p ?a ~= 0; poly ?p ?b ~= 0 |]
      ==> cindex_poly ?a ?b 1 ?p = cross ?p ?a ?b",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 5, template_var 0),
                template_var 2),
              template_hole 4)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 5, template_var 0),
                template_var 1),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_hole 1),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2),
           template_var 1)))),
    ("Sturm_Tarski.cindex_poly_changes_itv_mods",
     "[| ?a < ?b; poly ?p ?a ~= 0; poly ?p ?b ~= 0 |]
      ==> cindex_poly ?a ?b ?q ?p = changes_itv_smods ?a ?b ?p ?q",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_var 3),
              template_hole 3)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_var 2),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 0),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("Sturm_Tarski.last_non_root_interval",
     "[| ?p ~= 0;
         !!lb. [| lb < ?ub; ALL z. lb <= z & z < ?ub --> poly ?p z ~= 0 |]
               ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 9)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0))),
    ("Sturm_Tarski.next_non_root_interval",
     "[| ?p ~= 0;
         !!ub. [| ?lb < ub; ALL z. ?lb < z & z <= ub --> poly ?p z ~= 0 |]
               ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 9)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0))),
    ("Sturm_Tarski.root_ub",
     "[| ?p ~= 0;
         !!ub. [| ALL x. poly ?p x = 0 --> x < ub;
                  ALL x>=ub. sgn (poly ?p x) = sgn_pos_inf ?p |]
               ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 10)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_var 0))),
    ("Sturm_Tarski.root_lb",
     "[| ?p ~= 0;
         !!lb. [| ALL x. poly ?p x = 0 --> lb < x;
                  ALL x<=lb. sgn (poly ?p x) = sgn_neg_inf ?p |]
               ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 10)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_var 0))),
    ("Sturm_Tarski.jump_poly_1_mult",
     "poly ?p1.0 ?x ~= 0 | poly ?p2.0 ?x ~= 0 ==>
      jump_poly 1 (?p1.0 * ?p2.0) ?x =
      sign (poly ?p2.0 ?x) * jump_poly 1 ?p1.0 ?x +
      sign (poly ?p1.0 ?x) * jump_poly 1 ?p2.0 ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_hole 10,
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_app (template_hole 8, template_var 2),
                        template_var 1)),
                    template_hole 7))),
              template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 0),
                      template_var 1)),
                  template_hole 7)))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, template_hole 4),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 8, template_var 0),
                     template_var 1))),
               template_app
                (template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_var 2),
                 template_var 1))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 8, template_var 2),
                   template_var 1))),
             template_app
              (template_app
                (template_app (template_hole 5, template_hole 4),
                 template_var 0),
               template_var 1)))))),
    ("Sturm_Tarski.cindex_poly_inverse_add_cross",
     "[| ?a < ?b; poly (?p * ?q) ?a ~= 0; poly (?p * ?q) ?b ~= 0 |]
      ==> cindex_poly ?a ?b ?q ?p + cindex_poly ?a ?b ?p ?q =
          cross (?p * ?q) ?a ?b",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 1),
                    template_var 0)),
                template_var 3),
              template_hole 4)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 1),
                    template_var 0)),
                template_var 2),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_var 0),
               template_var 1)),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 0)),
             template_var 3),
           template_var 2)))),
    ("Sturm_Tarski.sturm_interval",
     "[| ?a < ?b; poly ?p ?a ~= 0; poly ?p ?b ~= 0 |]
      ==> int (card {x. poly ?p x = 0 & ?a < x & x < ?b}) =
          changes_itv_smods ?a ?b ?p (pderiv ?p)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 8, template_var 0),
                template_var 2),
              template_hole 7)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 8, template_var 0),
                template_var 1),
              template_hole 7)
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4, template_app (template_hole 3, t_empty))),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0),
           template_app (template_hole 0, template_var 0))))),
    ("Sturm_Tarski.changes_itv_smods_rec",
     "[| ?a < ?b; poly (?p * ?q) ?a ~= 0; poly (?p * ?q) ?b ~= 0 |]
      ==> changes_itv_smods ?a ?b ?p ?q =
          cross (?p * ?q) ?a ?b +
          changes_itv_smods ?a ?b ?q (- (?p mod ?q))",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_var 1),
                    template_var 0)),
                template_var 3),
              template_hole 6)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_var 1),
                    template_var 0)),
                template_var 2),
              template_hole 6)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 7, template_var 1),
                     template_var 0)),
                 template_var 3),
               template_var 2)),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 2),
               template_var 0),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))))))),
    ("Sturm_Tarski.cindex_poly_rec",
     "[| ?a < ?b; poly (?p * ?q) ?a ~= 0; poly (?p * ?q) ?b ~= 0 |]
      ==> cindex_poly ?a ?b ?q ?p =
          cross (?p * ?q) ?a ?b + cindex_poly ?a ?b (- (?p mod ?q)) ?q",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_var 1),
                    template_var 0)),
                template_var 3),
              template_hole 6)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_var 1),
                    template_var 0)),
                template_var 2),
              template_hole 6)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2),
             template_var 0),
           template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 7, template_var 1),
                     template_var 0)),
                 template_var 3),
               template_var 2)),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 2),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))),
             template_var 0))))),
    ("Sturm_Tarski.sturm_tarski_interval",
     "[| ?a < ?b; poly ?p ?a ~= 0; poly ?p ?b ~= 0 |]
      ==> taq {x. poly ?p x = 0 & ?a < x & x < ?b} ?q =
          changes_itv_smods ?a ?b ?p (pderiv ?p * ?q)",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 8, template_var 1),
                template_var 3),
              template_hole 7)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 8, template_var 1),
                template_var 2),
              template_hole 7)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5, template_app (template_hole 4, t_empty)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0))))),
    ("Sturm_Tarski.not_eq_pos_or_neg_iff_1",
     "(ALL z. ?lb < z & z <= ?ub --> poly ?p z ~= 0) =
      ((ALL z. ?lb < z & z <= ?ub --> 0 < poly ?p z) |
       (ALL z. ?lb < z & z <= ?ub --> poly ?p z < 0))",
     template_equation
      (template_app (template_hole 9, t_empty),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 9, t_empty)),
         template_app (template_hole 9, t_empty)))),
    ("Sturm_Tarski.not_eq_pos_or_neg_iff_2",
     "(ALL z. ?lb <= z & z < ?ub --> poly ?p z ~= 0) =
      ((ALL z. ?lb <= z & z < ?ub --> 0 < poly ?p z) |
       (ALL z. ?lb <= z & z < ?ub --> poly ?p z < 0))",
     template_equation
      (template_app (template_hole 9, t_empty),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 9, t_empty)),
         template_app (template_hole 9, t_empty)))),
    ("Sturm_Tarski.cindex_poly_congr",
     "[| ?a < ?a'; ?a' < ?b'; ?b' < ?b;
         ALL x. ?a < x & x <= ?a' | ?b' <= x & x < ?b --> poly ?p x ~= 0 |]
      ==> cindex_poly ?a ?b ?q ?p = cindex_poly ?a' ?b' ?q ?p",
     template_implication
      ([template_inequation (less_than, template_var 5, template_var 4),
        template_inequation (less_than, template_var 4, template_var 3),
        template_inequation (less_than, template_var 3, template_var 2),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 5),
               template_var 2),
             template_var 0),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3),
             template_var 0),
           template_var 1)))),
    ("Sturm_Tarski.root_list_ub",
     "[| 0 ~: set ?ps;
         !!ub. [| ALL p:set ?ps. ALL x. poly p x = 0 --> x < ub;
                  ALL x>=ub. ALL p:set ?ps. sgn (poly p x) = sgn_pos_inf p;
                  ?a < ub |]
               ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 13, template_hole 12),
                  template_app (template_hole 11, template_var 2))
                )
            ),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate (template_var 0))),
    ("Sturm_Tarski.root_list_lb",
     "[| 0 ~: set ?ps;
         !!lb. [| ALL p:set ?ps. ALL x. poly p x = 0 --> lb < x;
                  ALL x<=lb. ALL p:set ?ps. sgn (poly p x) = sgn_neg_inf p;
                  lb < ?b |]
               ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 13, template_hole 12),
                  template_app (template_hole 11, template_var 2))
                )
            ),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate (template_var 0))),
    ("Sturm_Tarski.changes_smods_congr",
     "[| ?a ~= ?a'; poly ?p ?a ~= 0;
         ALL p:set (smods ?p ?q).
            ALL x.
               ?a < x & x <= ?a' | ?a' <= x & x < ?a --> poly p x ~= 0 |]
      ==> changes_poly_at (smods ?p ?q) ?a =
          changes_poly_at (smods ?p ?q) ?a'",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2)),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 12, template_var 1),
                template_var 3),
              template_hole 11)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 8, template_var 1),
                    template_var 0))),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 8, template_var 1),
               template_var 0)),
           template_var 3),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 8, template_var 1),
               template_var 0)),
           template_var 2)))),
    ("Sturm_Tarski.changes_itv_smods_congr",
     "[| ?a < ?a'; ?a' < ?b'; ?b' < ?b; poly ?p ?a ~= 0; poly ?p ?b ~= 0;
         ALL p:set (smods ?p ?q).
            ALL x.
               ?a < x & x <= ?a' | ?b' <= x & x < ?b --> poly p x ~= 0 |]
      ==> changes_itv_smods ?a ?b ?p ?q = changes_itv_smods ?a' ?b' ?p ?q",
     template_implication
      ([template_inequation (less_than, template_var 5, template_var 4),
        template_inequation (less_than, template_var 4, template_var 3),
        template_inequation (less_than, template_var 3, template_var 2),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 11, template_var 1),
                template_var 5),
              template_hole 10)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 11, template_var 1),
                template_var 2),
              template_hole 10)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_var 1),
                    template_var 0))),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 5),
               template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3),
             template_var 1),
           template_var 0))))]:
   (string * thm * template) list
### theory "Draft.Sturm_TarskiMoreTemplates"
### 0.537s elapsed time, 0.747s cpu time, 0.088s GC time
val it = (): unit
