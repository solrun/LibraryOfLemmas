Loading theory "Bounded_Deducibility_Security.Abstract_BD_Security" (required by "Draft.Independent_SecretsMoreTemplates" via "Draft.Independent_Secrets" via "Bounded_Deducibility_Security.BD_Security_TS")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Independent_SecretsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Independent_SecretsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Independent_SecretsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
locale Abstract_BD_Security
  fixes validSystemTrace :: "'traces => bool"
    and V :: "'traces => 'values"
    and O :: "'traces => 'observations"
    and B :: "'values => 'values => bool"
    and TT :: "'traces => bool"
### theory "HOL-Library.Function_Algebras"
### 0.117s elapsed time, 0.487s cpu time, 0.032s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.Independent_SecretsMoreTemplates" via "Draft.Independent_Secrets" via "Bounded_Deducibility_Security.BD_Security_TS" via "Bounded_Deducibility_Security.Filtermap" via "Bounded_Deducibility_Security.Trivia")
### theory "Bounded_Deducibility_Security.Abstract_BD_Security"
### 0.121s elapsed time, 0.503s cpu time, 0.032s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Independent_SecretsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.304s elapsed time, 1.210s cpu time, 0.138s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Independent_SecretsMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
consts
  prefixes :: "'a list => 'a list list"
### theory "HOL-Library.Nat_Bijection"
### 0.456s elapsed time, 1.824s cpu time, 0.138s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Independent_SecretsMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  suffixes :: "'a list => 'a list list"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Proofs for inductive predicate(s) "list_emb"
  Proving monotonicity ...
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 1.164s elapsed time, 4.422s cpu time, 0.898s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.219s elapsed time, 4.450s cpu time, 0.978s GC time
consts
  sublists :: "'a list => 'a list list"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Sublist"
### 1.665s elapsed time, 6.008s cpu time, 1.084s GC time
Loading theory "Bounded_Deducibility_Security.Trivia" (required by "Draft.Independent_SecretsMoreTemplates" via "Draft.Independent_Secrets" via "Bounded_Deducibility_Security.BD_Security_TS" via "Bounded_Deducibility_Security.Filtermap")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "Bounded_Deducibility_Security.Trivia"
### 0.434s elapsed time, 0.994s cpu time, 0.134s GC time
Loading theory "Bounded_Deducibility_Security.Filtermap" (required by "Draft.Independent_SecretsMoreTemplates" via "Draft.Independent_Secrets" via "Bounded_Deducibility_Security.BD_Security_TS")
Loading theory "Bounded_Deducibility_Security.Transition_System" (required by "Draft.Independent_SecretsMoreTemplates" via "Draft.Independent_Secrets" via "Bounded_Deducibility_Security.BD_Security_TS")
### theory "HOL-Library.Tree"
### 2.140s elapsed time, 7.133s cpu time, 1.218s GC time
Loading theory "Draft.Templates" (required by "Draft.Independent_SecretsMoreTemplates" via "Draft.ExtrEqs")
locale Transition_System
  fixes istate :: "'state"
    and validTrans :: "'trans => bool"
    and srcOf :: "'trans => 'state"
    and tgtOf :: "'trans => 'state"
Found termination order: "{}"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.079s elapsed time, 0.247s cpu time, 0.070s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Independent_SecretsMoreTemplates")
Found termination order: "{}"
Found termination order: "{}"
### theory "Bounded_Deducibility_Security.Filtermap"
### 0.199s elapsed time, 0.601s cpu time, 0.070s GC time
Found termination order: "{}"
Proofs for inductive predicate(s) "valid"
  Proving monotonicity ...
Proofs for inductive predicate(s) "valid2"
  Proving monotonicity ...
Proofs for inductive predicate(s) "reach"
  Proving monotonicity ...
Proofs for inductive predicate(s) "reachFrom"
  Proving monotonicity ...
### theory "Bounded_Deducibility_Security.Transition_System"
### 0.407s elapsed time, 1.054s cpu time, 0.142s GC time
Loading theory "Bounded_Deducibility_Security.BD_Security_TS" (required by "Draft.Independent_SecretsMoreTemplates" via "Draft.Independent_Secrets")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.586s elapsed time, 1.331s cpu time, 0.136s GC time
locale BD_Security_TS
  fixes istate :: "'state"
    and validTrans :: "'trans => bool"
    and srcOf :: "'trans => 'state"
    and tgtOf :: "'trans => 'state"
    and \<phi> :: "'trans => bool"
    and f :: "'trans => 'value"
    and \<gamma> :: "'trans => bool"
    and g :: "'trans => 'obs"
    and T :: "'trans => bool"
    and B :: "'value list => 'value list => bool"
Proofs for inductive predicate(s) "reachNT"
  Proving monotonicity ...
### theory "Bounded_Deducibility_Security.BD_Security_TS"
### 0.455s elapsed time, 0.770s cpu time, 0.063s GC time
Loading theory "Draft.Independent_Secrets" (required by "Draft.Independent_SecretsMoreTemplates")
locale Abstract_BD_Security_Two_Secrets
  fixes validSystemTrace :: "'traces => bool"
    and V1 :: "'traces => 'values1"
    and O1 :: "'traces => 'observations1"
    and B1 :: "'values1 => 'values1 => bool"
    and TT1 :: "'traces => bool"
    and V2 :: "'traces => 'values2"
    and O2 :: "'traces => 'observations2"
    and B2 :: "'values2 => 'values2 => bool"
    and TT2 :: "'traces => bool"
    and O :: "'traces => 'observations"
  assumes
    "Abstract_BD_Security_Two_Secrets validSystemTrace V1 O1 B1 V2 O2 B2 TT2
      O"
locale BD_Security_TS_Two_Secrets
  fixes istate :: "'state"
    and validTrans :: "'trans => bool"
    and srcOf :: "'trans => 'state"
    and tgtOf :: "'trans => 'state"
    and \<phi>1 :: "'trans => bool"
    and f1 :: "'trans => 'val1"
    and \<gamma>1 :: "'trans => bool"
    and g1 :: "'trans => 'obs1"
    and T1 :: "'trans => bool"
    and B1 :: "'val1 list => 'val1 list => bool"
    and \<phi>2 :: "'trans => bool"
    and f2 :: "'trans => 'val2"
    and \<gamma>2 :: "'trans => bool"
    and g2 :: "'trans => 'obs2"
    and T2 :: "'trans => bool"
    and B2 :: "'val2 list => 'val2 list => bool"
    and \<gamma> :: "'trans => bool"
    and g :: "'trans => 'obs"
  assumes
    "BD_Security_TS_Two_Secrets istate validTrans srcOf tgtOf \<phi>1 f1
      \<gamma>1 g1 \<phi>2 f2 \<gamma>2 g2 T2 \<gamma> g"
### theory "Draft.Independent_Secrets"
### 0.260s elapsed time, 0.289s cpu time, 0.041s GC time
Loading theory "Draft.Independent_SecretsMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Independent_SecretsMoreTemplates"
### 0.353s elapsed time, 0.533s cpu time, 0.042s GC time
val it = (): unit
