   [("Formula.X_deX", "X (deX ?a) = ?a",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Formula.vblcase_zeroX",
     "(case zeroX of zeroX => ?a | nextX x => ?b x) = ?a",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_var 1)),
    ("Formula.o_id'", "?f o (%x. x) = ?f",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), t_empty),
       template_var 0)),
    ("Formula.freeVarsF_FNot", "freeVarsF (FNot ?A) = freeVarsF ?A",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Formula.size_instance", "size (instanceF ?v ?A) = size ?A",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Formula.size_subF", "size (subF ?theta ?A) = size ?A",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Formula.nextX", "nextX (X ?n) = X (Suc ?n)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Formula.dualId", "dual id id id ?A = ?A",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_hole 0),
           template_hole 0),
         template_var 0),
       template_var 0)),
    ("Formula.vblcase_nextX",
     "(case nextX ?n of zeroX => ?a | nextX x => ?b x) = ?b ?n",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_var 1, template_var 0))),
    ("Formula.freeVarsDual", "freeVarsF (dual ?p ?q ?r ?A) = freeVarsF ?A",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Formula.nextX_nextX", "(nextX ?x = nextX ?y) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Formula.subFNot", "subF ?theta (FNot ?A) = FNot (subF ?theta ?A)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Formula.freeVarsFL_cons",
     "freeVarsFL (?A # ?Gamma) = freeVarsF ?A Un freeVarsFL ?Gamma",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Formula.X_deX_connection", "(X ?n : ?A) = (?n : deX ` ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Formula.evalF_FNot", "evalF ?M ?phi (FNot ?A) = (~ evalF ?M ?phi ?A)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Formula.comp_vblcase",
     "?f o vblcase ?a ?b = vblcase (?f ?a) (?f o ?b)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 2, template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Formula.dualFNot",
     "dual invSign id id (FNot ?A) = FNot (dual invSign id id ?A)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_hole 1),
           template_hole 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_hole 1),
             template_hole 1),
           template_var 0)))),
    ("Formula.evalF_instance",
     "evalF ?M ?phi (instanceF ?u ?A) =
      evalF ?M (vblcase (?phi ?u) ?phi) ?A",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_var 2, template_var 1)),
             template_var 2)),
         template_var 0))),
    ("Formula.instanceFDual",
     "instanceF ?u (dual ?p ?q ?r ?A) = dual ?p ?q ?r (instanceF ?u ?A)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 4),
           template_var 0)))),
    ("Formula.subFDual",
     "subF ?theta (dual ?p ?q ?r ?A) = dual ?p ?q ?r (subF ?theta ?A)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 4),
           template_var 0)))),
    ("Formula.expand_case_signs",
     "?Q (case ?F of Pos => ?vpos | Neg => ?vneg) =
      ((?F = Pos --> ?Q ?vpos) & (?F = Neg --> ?Q ?vneg))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 3,
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_dunno)),
    ("Formula.evalF_FEx",
     "evalF ?M ?phi (FAll Neg ?A) =
      (EX x:objects ?M. evalF ?M (vblcase x ?phi) ?A)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         t_empty))),
    ("Formula.evalF_FAll",
     "evalF ?M ?phi (FAll Pos ?A) =
      (ALL x:objects ?M. evalF ?M (vblcase x ?phi) ?A)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         t_empty))),
    ("Formula.dualCompose",
     "dual ?p ?q ?r o dual ?P ?Q ?R = dual (?p o ?P) (?q o ?Q) (?r o ?R)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 5),
               template_var 4),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 5),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 4),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 0)))),
    ("Formula.expand_case_formula",
     "?Q (case ?F of FAtom x xa xb => ?fatom x xa xb
          | FConj x xa xb => ?fconj x xa xb | FAll x xa => ?fall x xa) =
      ((ALL z P vs. ?F = FAtom z P vs --> ?Q (?fatom z P vs)) &
       (ALL z A0 A1. ?F = FConj z A0 A1 --> ?Q (?fconj z A0 A1)) &
       (ALL z A. ?F = FAll z A --> ?Q (?fall z A)))",
     template_equation
      (template_app
        (template_var 4,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 10, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 9, template_app (template_hole 8, t_empty)),
         template_app
          (template_app
            (template_hole 9, template_app (template_hole 8, t_empty)),
           template_app (template_hole 8, t_empty)))))]
