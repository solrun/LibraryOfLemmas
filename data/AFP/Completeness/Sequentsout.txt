Loading theory "Draft.PermutationLemmas" (required by "Draft.SequentsTemplates" via "Draft.Sequents" via "Draft.Formula" via "Draft.Base")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SequentsTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SequentsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SequentsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
consts
  count :: "'a => 'a list => nat"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.PermutationLemmas"
### 0.114s elapsed time, 0.476s cpu time, 0.042s GC time
Loading theory "Draft.Base" (required by "Draft.SequentsTemplates" via "Draft.Sequents" via "Draft.Formula")
### theory "HOL-Library.Function_Algebras"
### 0.124s elapsed time, 0.514s cpu time, 0.042s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SequentsTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  summation :: "(nat => nat) => nat => nat"
consts
  exp :: "nat => nat => nat"
consts
  sumList :: "nat list => nat"
### theory "Draft.Base"
### 0.068s elapsed time, 0.272s cpu time, 0.000s GC time
Loading theory "Draft.Formula" (required by "Draft.SequentsTemplates" via "Draft.Sequents")
### theory "HOL-Library.Set_Algebras"
### 0.233s elapsed time, 0.952s cpu time, 0.042s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SequentsTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.354s elapsed time, 1.414s cpu time, 0.135s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SequentsTemplates" via "Draft.ExtrEqs")
consts
  deX :: "vbl => nat"
consts
  nextX :: "vbl => vbl"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sign :: "signs => bool => bool"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  invSign :: "signs => signs"
### theory "HOL-Library.BigO"
### 0.981s elapsed time, 3.676s cpu time, 0.856s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.041s elapsed time, 3.761s cpu time, 0.763s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  FNot :: "formula => formula"
consts
  neg :: "signs => signs"
consts
  dual ::
    "(signs => signs)
     => (signs => signs) => (signs => signs) => formula => formula"
consts
  freeVarsF :: "formula => vbl set"
consts
  subF :: "(vbl => vbl) => formula => formula"
consts
  evalF :: "model => (vbl => object) => formula => bool"
### theory "Draft.Formula"
### 1.720s elapsed time, 5.512s cpu time, 0.977s GC time
Loading theory "Draft.Sequents" (required by "Draft.SequentsTemplates")
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "deductionsp"
  Proving monotonicity ...
### theory "HOL-Library.Tree"
### 1.947s elapsed time, 6.111s cpu time, 1.023s GC time
Loading theory "Draft.Templates" (required by "Draft.SequentsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.056s elapsed time, 0.112s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SequentsTemplates")
### theory "Draft.Sequents"
### 0.258s elapsed time, 0.559s cpu time, 0.096s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.504s elapsed time, 0.588s cpu time, 0.049s GC time
Loading theory "Draft.SequentsTemplates"
val templateLemmas =
   [("Sequents.evalS_nil", "evalS ?M ?phi [] = False",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_hole 0)),
    ("Sequents.Powp_mono", "?A <= ?B ==> Powp ?A <= Powp ?B",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Sequents.mono_deductions",
     "?A <= ?B ==> deductions ?A <= deductions ?B",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Sequents.modelAssignsD",
     "?f : modelAssigns ?M ==> range ?f <= objects ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 2, template_var 1), template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("Sequents.modelAssignsI",
     "range ?f <= objects ?M ==> ?f : modelAssigns ?M",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_var 1),
            template_hole 3),
          template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Sequents.deductionsp_deductions_eq",
     "deductionsp (%x xa. (x, xa) : ?rules) = (%x. x : deductions ?rules)",
     template_equation (template_app (template_hole 4, t_empty), t_empty)),
    ("Sequents.evalS_append",
     "evalS ?M ?phi (?Gamma @ ?Delta) =
      (evalS ?M ?phi ?Gamma | evalS ?M ?phi ?Delta)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_var 0)))),
    ("Sequents.evalS_cons",
     "evalS ?M ?phi (?A # ?Gamma) =
      (evalF ?M ?phi ?A | evalS ?M ?phi ?Gamma)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_var 0)))),
    ("Sequents.evalS_equiv",
     "equalOn (freeVarsFL ?Gamma) ?f ?g ==>
      evalS ?M ?f ?Gamma = evalS ?M ?g ?Gamma",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 3)),
                template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1),
           template_var 3)))),
    ("Sequents.WeakI1",
     "[| ?Gamma : deductions ?A; Weaks <= ?A |]
      ==> ?Delta @ ?Gamma : deductions ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            ),
        template_inequation (less_equals, template_hole 1, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app (template_hole 3, template_var 1))
           ))),
    ("Sequents.WeakI",
     "[| ?Gamma : deductions ?R; Weaks <= ?R |]
      ==> ?A # ?Gamma : deductions ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            ),
        template_inequation (less_equals, template_hole 1, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app (template_hole 3, template_var 1))
           ))),
    ("Sequents.inDed_mono",
     "[| ?x : deductions CutFreePC; set ?x <= set ?y |]
      ==> ?y : deductions CutFreePC",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_hole 2))
            ),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 1),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 0),
             template_app (template_hole 3, template_hole 2))
           ))),
    ("Sequents.inDed_mono'",
     "[| set ?x <= set ?y; ?x : deductions CutFreePC |]
      ==> ?y : deductions CutFreePC",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 1),
          template_app (template_hole 3, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_hole 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app (template_hole 1, template_hole 0))
           ))),
    ("Sequents.AxiomI",
     "Axioms <= ?A ==>
      [FAtom Pos ?p ?vs, FAtom Neg ?p ?vs] : deductions ?A",
     template_implication
      ([template_inequation (less_equals, template_hole 7, template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_app (template_hole 4, template_hole 3),
                       template_var 1),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_app (template_hole 4, template_hole 2),
                         template_var 1),
                       template_var 0)),
                   template_hole 1))),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Sequents.DAxiomsI",
     "DAxioms <= ?A ==>
      [FAtom Neg ?p ?vs, FAtom Pos ?p ?vs] : deductions ?A",
     template_implication
      ([template_inequation (less_equals, template_hole 7, template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_app (template_hole 4, template_hole 3),
                       template_var 1),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_app (template_hole 4, template_hole 2),
                         template_var 1),
                       template_var 0)),
                   template_hole 1))),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Sequents.ContrI",
     "[| ?A # ?A # ?Gamma : deductions ?R; Contrs <= ?R |]
      ==> ?A # ?Gamma : deductions ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 1))),
              template_app (template_hole 2, template_var 0))
            ),
        template_inequation (less_equals, template_hole 0, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1)),
             template_app (template_hole 2, template_var 0))
           ))),
    ("Sequents.WeakI2",
     "[| ?Gamma : deductions ?A; Perms <= ?A; Weaks <= ?A |]
      ==> ?Gamma @ ?Delta : deductions ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_inequation (less_equals, template_hole 2, template_var 1),
        template_inequation (less_equals, template_hole 1, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app (template_hole 4, template_var 1))
           ))),
    ("Sequents.PermI",
     "[| ?Gamma' : deductions ?R; mset ?Gamma = mset ?Gamma'; Perms <= ?R |]
      ==> ?Gamma : deductions ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_equation
         (template_app (template_hole 2, template_var 0),
          template_app (template_hole 2, template_var 2)),
        template_inequation (less_equals, template_hole 0, template_var 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 0),
             template_app (template_hole 4, template_var 1))
           ))),
    ("Sequents.ExI",
     "[| instanceF ?w ?A # ?Gamma : deductions ?R; Exs <= ?R |]
      ==> FAll Neg ?A # ?Gamma : deductions ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 3),
                      template_var 2)),
                  template_var 1)),
              template_app (template_hole 4, template_var 0))
            ),
        template_inequation (less_equals, template_hole 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_var 2)),
                 template_var 1)),
             template_app (template_hole 4, template_var 0))
           ))),
    ("Sequents.mapRuleI",
     "[| ?A = map ?f ?a; ?B = map ?f ` ?b |]
      ==> (?A, ?B) = mapRule ?f (?a, ?b)",
     template_implication
      ([template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 5, template_var 3),
            template_var 2)),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 5, template_var 3)),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 4), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("Sequents.DisjI",
     "[| ?A0.0 # ?A1.0 # ?Gamma : deductions ?A; Disjs <= ?A |]
      ==> FConj Neg ?A0.0 ?A1.0 # ?Gamma : deductions ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_var 1))),
              template_app (template_hole 4, template_var 0))
            ),
        template_inequation (less_equals, template_hole 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_hole 0),
                       template_var 3),
                     template_var 2)),
                 template_var 1)),
             template_app (template_hole 4, template_var 0))
           ))),
    ("Sequents.weaken_append",
     "[| Contrs <= ?R; Perms <= ?R; ?A @ ?Gamma @ ?Gamma : deductions ?R |]
      ==> ?A @ ?Gamma : deductions ?R",
     template_implication
      ([template_inequation (less_equals, template_hole 4, template_var 2),
        template_inequation (less_equals, template_hole 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_app
                   (template_app (template_hole 1, template_var 0),
                    template_var 0))),
              template_app (template_hole 0, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Sequents.ListWeakI",
     "[| Perms <= ?R; Contrs <= ?R; ?x # ?Gamma @ ?Gamma : deductions ?R |]
      ==> ?x # ?Gamma : deductions ?R",
     template_implication
      ([template_inequation (less_equals, template_hole 5, template_var 2),
        template_inequation (less_equals, template_hole 4, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_app
                   (template_app (template_hole 1, template_var 0),
                    template_var 0))),
              template_app (template_hole 0, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Sequents.DisjI1",
     "[| ?A1.0 # ?Gamma : deductions ?A; Disjs <= ?A; Weaks <= ?A |]
      ==> FConj Neg ?A0.0 ?A1.0 # ?Gamma : deductions ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2)),
              template_app (template_hole 5, template_var 1))
            ),
        template_inequation (less_equals, template_hole 3, template_var 1),
        template_inequation (less_equals, template_hole 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_hole 0),
                       template_var 0),
                     template_var 3)),
                 template_var 2)),
             template_app (template_hole 5, template_var 1))
           ))),
    ("Sequents.perm_tmp4",
     "[| Perms <= ?R; ?A @ (?a # ?list) @ ?a # ?list : deductions ?R |]
      ==> (?a # ?a # ?A) @ ?list @ ?list : deductions ?R",
     template_implication
      ([template_inequation (less_equals, template_hole 4, template_var 3),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_app
                   (template_app
                     (template_hole 2,
                      template_app
                       (template_app (template_hole 1, template_var 1),
                        template_var 0)),
                    template_app
                     (template_app (template_hole 1, template_var 1),
                      template_var 0)))),
              template_app (template_hole 0, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_var 2))),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 0))),
             template_app (template_hole 0, template_var 3))
           ))),
    ("Sequents.ConjI",
     "[| ?A0.0 # ?Gamma : deductions ?A; ?A1.0 # ?Delta : deductions ?A;
         Conjs <= ?A |]
      ==> FConj Pos ?A0.0 ?A1.0 # ?Gamma @ ?Delta : deductions ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3)),
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_var 0)),
              template_app (template_hole 5, template_var 2))
            ),
        template_inequation (less_equals, template_hole 3, template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_app (template_hole 2, template_hole 1),
                       template_var 4),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0))),
             template_app (template_hole 5, template_var 2))
           ))),
    ("Sequents.DisjI2",
     "[| ?A0.0 # ?Gamma : deductions ?A; Disjs <= ?A; Weaks <= ?A;
         Perms <= ?A |]
      ==> FConj Neg ?A0.0 ?A1.0 # ?Gamma : deductions ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 2)),
              template_app (template_hole 6, template_var 1))
            ),
        template_inequation (less_equals, template_hole 4, template_var 1),
        template_inequation (less_equals, template_hole 3, template_var 1),
        template_inequation (less_equals, template_hole 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_hole 0),
                       template_var 3),
                     template_var 0)),
                 template_var 2)),
             template_app (template_hole 6, template_var 1))
           ))),
    ("Sequents.AllI",
     "[| instanceF ?w ?A # ?Gamma : deductions ?R;
         ?w ~: freeVarsFL (FAll Pos ?A # ?Gamma); Alls <= ?R |]
      ==> FAll Pos ?A # ?Gamma : deductions ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 3),
                      template_var 2)),
                  template_var 1)),
              template_app (template_hole 7, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_app
                   (template_hole 4,
                    template_app
                     (template_app
                       (template_hole 9,
                        template_app
                         (template_app (template_hole 3, template_hole 2),
                          template_var 2)),
                      template_var 1)))
                )
            ),
        template_inequation (less_equals, template_hole 0, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 3, template_hole 2),
                     template_var 2)),
                 template_var 1)),
             template_app (template_hole 7, template_var 0))
           ))),
    ("Sequents.SATAxiomI",
     "[| Axioms <= ?A; Weaks <= ?A; Perms <= ?A;
         ?forms = [FAtom Pos ?n ?vs, FAtom Neg ?n ?vs] @ ?Gamma |]
      ==> ?forms : deductions ?A",
     template_implication
      ([template_inequation (less_equals, template_hole 11, template_var 4),
        template_inequation (less_equals, template_hole 10, template_var 4),
        template_inequation (less_equals, template_hole 9, template_var 4),
        template_equation
         (template_var 3,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app
                     (template_app (template_hole 5, template_hole 4),
                      template_var 2),
                    template_var 1)),
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app
                       (template_app (template_hole 5, template_hole 3),
                        template_var 2),
                      template_var 1)),
                  template_hole 2))),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app (template_hole 0, template_var 4))
           ))),
    ("Sequents.ConjI'",
     "[| ?A0.0 # ?Gamma : deductions ?A; ?A1.0 # ?Gamma : deductions ?A;
         Contrs <= ?A; Conjs <= ?A; Perms <= ?A |]
      ==> FConj Pos ?A0.0 ?A1.0 # ?Gamma : deductions ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 2)),
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 0),
                  template_var 2)),
              template_app (template_hole 6, template_var 1))
            ),
        template_inequation (less_equals, template_hole 4, template_var 1),
        template_inequation (less_equals, template_hole 3, template_var 1),
        template_inequation (less_equals, template_hole 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_hole 0),
                       template_var 3),
                     template_var 0)),
                 template_var 2)),
             template_app (template_hole 6, template_var 1))
           )))]:
   (string * thm * template) list
### theory "Draft.SequentsTemplates"
### 0.384s elapsed time, 0.510s cpu time, 0.057s GC time
val it = (): unit
