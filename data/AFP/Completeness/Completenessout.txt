Loading theory "Draft.Tree" (required by "Draft.CompletenessTemplates" via "Draft.Completeness")
Loading theory "Draft.PermutationLemmas" (required by "Draft.CompletenessTemplates" via "Draft.Completeness" via "Draft.Sequents" via "Draft.Formula" via "Draft.Base")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.CompletenessTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.CompletenessTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
consts
  count :: "'a => 'a list => nat"
Proofs for inductive predicate(s) "treep"
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
  Proving monotonicity ...
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.PermutationLemmas"
### 0.130s elapsed time, 0.529s cpu time, 0.037s GC time
Loading theory "Draft.Base" (required by "Draft.CompletenessTemplates" via "Draft.Completeness" via "Draft.Sequents" via "Draft.Formula")
consts
  summation :: "(nat => nat) => nat => nat"
### theory "HOL-Library.Function_Algebras"
### 0.159s elapsed time, 0.643s cpu time, 0.037s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.CompletenessTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
consts
  exp :: "nat => nat => nat"
consts
  sumList :: "nat list => nat"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
### theory "Draft.Base"
### 0.073s elapsed time, 0.298s cpu time, 0.000s GC time
Loading theory "Draft.Formula" (required by "Draft.CompletenessTemplates" via "Draft.Completeness" via "Draft.Sequents")
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
consts
  path :: "('a => 'a set) => 'a => ((nat * 'a) set => bool) => nat => 'a"
### theory "HOL-Library.Set_Algebras"
### 0.215s elapsed time, 0.845s cpu time, 0.076s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.CompletenessTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.378s elapsed time, 1.510s cpu time, 0.113s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.CompletenessTemplates" via "Draft.ExtrEqs")
### theory "Draft.Tree"
### 0.412s elapsed time, 1.641s cpu time, 0.113s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.CompletenessTemplates" via "Draft.ExtrEqs")
consts
  deX :: "vbl => nat"
consts
  nextX :: "vbl => vbl"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sign :: "signs => bool => bool"
consts
  invSign :: "signs => signs"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.994s elapsed time, 3.769s cpu time, 0.823s GC time
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.141s elapsed time, 4.264s cpu time, 0.925s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  FNot :: "formula => formula"
Found termination order: "size <*mlex*> {}"
consts
  neg :: "signs => signs"
consts
  dual ::
    "(signs => signs)
     => (signs => signs) => (signs => signs) => formula => formula"
consts
  freeVarsF :: "formula => vbl set"
consts
  subF :: "(vbl => vbl) => formula => formula"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  evalF :: "model => (vbl => object) => formula => bool"
### theory "Draft.Formula"
### 1.847s elapsed time, 6.098s cpu time, 1.139s GC time
Loading theory "Draft.Sequents" (required by "Draft.CompletenessTemplates" via "Draft.Completeness")
Proofs for inductive predicate(s) "deductionsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "Draft.Sequents"
### 0.234s elapsed time, 0.493s cpu time, 0.051s GC time
Loading theory "Draft.Completeness" (required by "Draft.CompletenessTemplates")
### theory "HOL-Library.Tree"
### 1.956s elapsed time, 6.012s cpu time, 1.114s GC time
Loading theory "Draft.Templates" (required by "Draft.CompletenessTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.106s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.CompletenessTemplates")
consts
  counterAssign :: "vbl => object"
### theory "Draft.Completeness"
### 0.801s elapsed time, 1.939s cpu time, 0.843s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.763s elapsed time, 1.838s cpu time, 0.843s GC time
Loading theory "Draft.CompletenessTemplates"
### theory "Draft.CompletenessTemplates"
### 0.002s elapsed time, 0.002s cpu time, 0.000s GC time
*** exception THEORY raised (line 246 of "context.ML"):
*** Duplicate theory name
*** {..., HOL.Filter, HOL.Conditionally_Complete_Lattices, HOL.Binomial, Main, Draft.Tree}
*** {..., HOL.Filter, HOL.Conditionally_Complete_Lattices, HOL.Binomial, Main, HOL-Library.Tree}
*** At command "theory" (line 1 of "~/ResearchIdeas/templateAnalysis/Isabelle/GeneratedThys/DebugAFP/Completeness/CompletenessTemplates.thy")
Exception- TOPLEVEL_ERROR raised
