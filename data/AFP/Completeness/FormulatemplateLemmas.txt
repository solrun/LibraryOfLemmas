   [("Formula.finite_freeVarsF", "finite (freeVarsF ?A)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Formula.finite_freeVarsFL", "finite (freeVarsFL ?gamma)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Formula.objectsNonEmpty", "objects ?M ~= {}",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Formula.zeroX_nextX", "zeroX ~= nextX ?a",
     template_negation
      (
         template_equation
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Formula.nextX_zeroX", "nextX ?a ~= zeroX",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Formula.X_deX", "X (deX ?a) = ?a",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Formula.modelsNonEmptyI", "fst (Rep_model ?M) ~= {}",
     template_negation
      (
         template_equation
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Formula.vblcase_zeroX",
     "(case zeroX of zeroX => ?a | nextX x => ?b x) = ?a",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_var 1)),
    ("Formula.o_id'", "?f o (%x. x) = ?f",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), t_empty),
       template_var 0)),
    ("Formula.freeVarsF_FNot", "freeVarsF (FNot ?A) = freeVarsF ?A",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Formula.s", "FConj ?signs ?formula1.0 ?formula2.0 ~= ?formula1.0",
     template_negation
      (
         template_equation
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0),
           template_var 1)
         )),
    ("Formula.s'", "FConj ?signs ?formula1.0 ?formula2.0 ~= ?formula2.0",
     template_negation
      (
         template_equation
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0),
           template_var 0)
         )),
    ("Formula.size_instance", "size (instanceF ?v ?A) = size ?A",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Formula.size_subF", "size (subF ?theta ?A) = size ?A",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Formula.nextX", "nextX (X ?n) = X (Suc ?n)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Formula.dualId", "dual id id id ?A = ?A",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_hole 0),
           template_hole 0),
         template_var 0),
       template_var 0)),
    ("Formula.sizelemmas", "size ?A < size (FAll ?z ?A)",
     template_inequation
      (less_than, template_app (template_hole 1, template_var 1),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Formula.instanceF_E", "instanceF ?g ?formula ~= FAll ?signs ?formula",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("Formula.vblcase_nextX",
     "(case nextX ?n of zeroX => ?a | nextX x => ?b x) = ?b ?n",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_var 1, template_var 0))),
    ("Formula.sizelemmas", "size ?A < size (FConj ?z ?A ?B)",
     template_inequation
      (less_than, template_app (template_hole 1, template_var 2),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_var 0)))),
    ("Formula.sizelemmas", "size ?B < size (FConj ?z ?A ?B)",
     template_inequation
      (less_than, template_app (template_hole 1, template_var 2),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2)))),
    ("Formula.freeVarsDual", "freeVarsF (dual ?p ?q ?r ?A) = freeVarsF ?A",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Formula.nextX_nextX", "(nextX ?x = nextX ?y) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Formula.subFNot", "subF ?theta (FNot ?A) = FNot (subF ?theta ?A)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Formula.finiteFreshVar", "finite ?A ==> freshVar ?A ~: ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)),
                 template_var 0)
               )
           ))),
    ("Formula.vbl_cases", "?x = zeroX | (EX y. ?x = nextX y)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 2)),
           template_app (template_hole 1, t_empty))
         )),
    ("Formula.freeVarsFL_cons",
     "freeVarsFL (?A # ?Gamma) = freeVarsF ?A Un freeVarsFL ?Gamma",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Formula.X_deX_connection", "(X ?n : ?A) = (?n : deX ` ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Formula.evalF_FNot", "evalF ?M ?phi (FNot ?A) = (~ evalF ?M ?phi ?A)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Formula.comp_vblcase",
     "?f o vblcase ?a ?b = vblcase (?f ?a) (?f o ?b)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 2, template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Formula.sign_arg_cong", "?x = ?y ==> sign ?z ?x = sign ?z ?y",
     template_implication
      ([template_equation (template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Formula.dualFNot",
     "dual invSign id id (FNot ?A) = FNot (dual invSign id id ?A)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_hole 1),
           template_hole 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_hole 1),
             template_hole 1),
           template_var 0)))),
    ("Formula.evalF_instance",
     "evalF ?M ?phi (instanceF ?u ?A) =
      evalF ?M (vblcase (?phi ?u) ?phi) ?A",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_var 2, template_var 1)),
             template_var 2)),
         template_var 0))),
    ("Formula.evalP_arg2_cong",
     "?x = ?y ==> evalP ?M ?p ?x = evalP ?M ?p ?y",
     template_implication
      ([template_equation (template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2)))),
    ("Formula.evalF_arg2_cong",
     "?x = ?y ==> evalF ?M ?p ?x = evalF ?M ?p ?y",
     template_implication
      ([template_equation (template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2)))),
    ("Formula.freshVarI", "[| finite ?A; ?B <= ?A |] ==> freshVar ?A ~: ?B",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1)),
                 template_var 0)
               )
           ))),
    ("Formula.instanceFDual",
     "instanceF ?u (dual ?p ?q ?r ?A) = dual ?p ?q ?r (instanceF ?u ?A)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 4),
           template_var 0)))),
    ("Formula.subFDual",
     "subF ?theta (dual ?p ?q ?r ?A) = dual ?p ?q ?r (subF ?theta ?A)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 4),
           template_var 0)))),
    ("Formula.evalF_equiv",
     "equalOn (freeVarsF ?A) ?f ?g ==> evalF ?M ?f ?A = evalF ?M ?g ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 3)),
                template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1),
           template_var 3)))),
    ("Formula.equalOn_vblcaseI'",
     "equalOn (preImage nextX ?A) ?f ?g ==>
      equalOn ?A (vblcase ?x ?f) (vblcase ?x ?g)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_hole 1),
                    template_var 3)),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Formula.ind'",
     "[| ?P zeroX; ALL v. ?P v --> ?P (nextX v) |] ==> ?P ?v'",
     template_implication
      ([template_predicate (template_app (template_var 1, template_hole 3)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Formula.evalF_subF_eq",
     "ALL phi theta.
         evalF ?M phi (subF theta ?A) = evalF ?M (phi o theta) ?A",
     template_predicate (template_app (template_hole 5, t_empty))),
    ("Formula.ind", "[| ?P zeroX; !!v. ?P v ==> ?P (nextX v) |] ==> ?P ?v'",
     template_implication
      ([template_predicate (template_app (template_var 1, template_hole 2)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Formula.signsE",
     "[| ?signs = Neg ==> ?P; ?signs = Pos ==> ?P |] ==> ?P",
     template_implication
      ([template_implication
         ([template_equation (template_var 1, template_hole 1)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation (template_var 1, template_hole 0)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Formula.freshVarI2",
     "[| finite ?A; ALL x. x ~: ?A --> ?P x |] ==> ?P (freshVar ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0, template_app (template_hole 0, template_var 1))
           ))),
    ("Formula.expand_case_signs",
     "?Q (case ?F of Pos => ?vpos | Neg => ?vneg) =
      ((?F = Pos --> ?Q ?vpos) & (?F = Neg --> ?Q ?vneg))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 3,
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_hole 1)),
                 template_app (template_var 3, template_var 2))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 0)),
               template_app (template_var 3, template_var 1)))
           ))),
    ("Formula.evalF_FEx",
     "evalF ?M ?phi (FAll Neg ?A) =
      (EX x:objects ?M. evalF ?M (vblcase x ?phi) ?A)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         t_empty))),
    ("Formula.evalF_FAll",
     "evalF ?M ?phi (FAll Pos ?A) =
      (ALL x:objects ?M. evalF ?M (vblcase x ?phi) ?A)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         t_empty))),
    ("Formula.strong_formula_induct",
     "ALL A. (ALL B. size B < size A --> ?P B) --> ?P A ==> ?P ?A",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Formula.dualCompose",
     "dual ?p ?q ?r o dual ?P ?Q ?R = dual (?p o ?P) (?q o ?Q) (?r o ?R)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 5),
               template_var 4),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 5),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 4),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 0)))),
    ("Formula.vbl_casesE",
     "[| ?x = zeroX ==> ?P; !!y. ?x = nextX y ==> ?P |] ==> ?P",
     template_implication
      ([template_implication
         ([template_equation (template_var 1, template_hole 2)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Formula.equalOn_vblcaseI",
     "[| zeroX : ?A --> ?x = ?y; equalOn (preImage nextX ?A) ?f ?g |]
      ==> equalOn ?A (vblcase ?x ?f) (vblcase ?y ?g)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 4)),
              template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_hole 1),
                    template_var 4)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 4),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Formula.strong_formula_induct'",
     "ALL A. (ALL B. size B < size A --> ?P B) --> ?P A ==>
      ALL A. size A = ?n --> ?P A",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Formula.expand_case_formula",
     "?Q (case ?F of FAtom x xa xb => ?fatom x xa xb
          | FConj x xa xb => ?fconj x xa xb | FAll x xa => ?fall x xa) =
      ((ALL z P vs. ?F = FAtom z P vs --> ?Q (?fatom z P vs)) &
       (ALL z A0 A1. ?F = FConj z A0 A1 --> ?Q (?fconj z A0 A1)) &
       (ALL z A. ?F = FAll z A --> ?Q (?fall z A)))",
     template_equation
      (template_app
        (template_var 4,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 10, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 9, template_app (template_hole 8, t_empty)),
         template_app
          (template_app
            (template_hole 9, template_app (template_hole 8, t_empty)),
           template_app (template_hole 8, t_empty))))),
    ("Formula.formula_signs_cases",
     "[| !!p vs. ?P (FAtom Pos p vs); !!p vs. ?P (FAtom Neg p vs);
         !!f1 f2. ?P (FConj Pos f1 f2); !!f1 f2. ?P (FConj Neg f1 f2);
         !!f1. ?P (FAll Pos f1); !!f1. ?P (FAll Neg f1) |]
      ==> ?P ?A",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Formula.formula_signs_induct",
     "[| ALL p vs. ?P (FAtom Pos p vs); ALL p vs. ?P (FAtom Neg p vs);
         !!A B. [| ?P A; ?P B |] ==> ?P (FConj Pos A B);
         !!A B. [| ?P A; ?P B |] ==> ?P (FConj Neg A B);
         !!A. ?P A ==> ?P (FAll Pos A); !!A. ?P A ==> ?P (FAll Neg A) |]
      ==> ?P ?A",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (template_app (template_var 1, template_var 0))))]
