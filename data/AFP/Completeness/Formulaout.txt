Loading theory "Draft.PermutationLemmas" (required by "Draft.FormulaTemplates" via "Draft.Formula" via "Draft.Base")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.FormulaTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.FormulaTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.FormulaTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
consts
  count :: "'a => 'a list => nat"
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.PermutationLemmas"
### 0.102s elapsed time, 0.430s cpu time, 0.037s GC time
Loading theory "Draft.Base" (required by "Draft.FormulaTemplates" via "Draft.Formula")
### theory "HOL-Library.Function_Algebras"
### 0.130s elapsed time, 0.538s cpu time, 0.037s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.FormulaTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  summation :: "(nat => nat) => nat => nat"
consts
  exp :: "nat => nat => nat"
consts
  sumList :: "nat list => nat"
### theory "Draft.Base"
### 0.081s elapsed time, 0.323s cpu time, 0.000s GC time
Loading theory "Draft.Formula" (required by "Draft.FormulaTemplates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.230s elapsed time, 0.940s cpu time, 0.037s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.FormulaTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.342s elapsed time, 1.364s cpu time, 0.155s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.FormulaTemplates" via "Draft.ExtrEqs")
consts
  deX :: "vbl => nat"
consts
  nextX :: "vbl => vbl"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  sign :: "signs => bool => bool"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.063s elapsed time, 4.022s cpu time, 1.032s GC time
consts
  invSign :: "signs => signs"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.102s elapsed time, 4.046s cpu time, 0.914s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  FNot :: "formula => formula"
consts
  neg :: "signs => signs"
consts
  dual ::
    "(signs => signs)
     => (signs => signs) => (signs => signs) => formula => formula"
consts
  freeVarsF :: "formula => vbl set"
consts
  subF :: "(vbl => vbl) => formula => formula"
consts
  evalF :: "model => (vbl => object) => formula => bool"
### theory "Draft.Formula"
### 1.813s elapsed time, 5.848s cpu time, 1.177s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.045s elapsed time, 6.295s cpu time, 1.232s GC time
Loading theory "Draft.Templates" (required by "Draft.FormulaTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.049s elapsed time, 0.063s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.FormulaTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.459s elapsed time, 0.520s cpu time, 0.076s GC time
Loading theory "Draft.FormulaTemplates"
val templateLemmas =
   [("Formula.finite_freeVarsF", "finite (freeVarsF ?A)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Formula.finite_freeVarsFL", "finite (freeVarsFL ?gamma)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Formula.objectsNonEmpty", "objects ?M ~= {}",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Formula.zeroX_nextX", "zeroX ~= nextX ?a",
     template_negation
      (
         template_equation
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Formula.nextX_zeroX", "nextX ?a ~= zeroX",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Formula.X_deX", "X (deX ?a) = ?a",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Formula.modelsNonEmptyI", "fst (Rep_model ?M) ~= {}",
     template_negation
      (
         template_equation
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Formula.vblcase_zeroX",
     "(case zeroX of zeroX => ?a | nextX x => ?b x) = ?a",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_var 1)),
    ("Formula.o_id'", "?f o (%x. x) = ?f",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), t_empty),
       template_var 0)),
    ("Formula.freeVarsF_FNot", "freeVarsF (FNot ?A) = freeVarsF ?A",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Formula.s", "FConj ?signs ?formula1.0 ?formula2.0 ~= ?formula1.0",
     template_negation
      (
         template_equation
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0),
           template_var 1)
         )),
    ("Formula.s'", "FConj ?signs ?formula1.0 ?formula2.0 ~= ?formula2.0",
     template_negation
      (
         template_equation
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0),
           template_var 0)
         )),
    ("Formula.size_instance", "size (instanceF ?v ?A) = size ?A",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Formula.size_subF", "size (subF ?theta ?A) = size ?A",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Formula.nextX", "nextX (X ?n) = X (Suc ?n)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Formula.dualId", "dual id id id ?A = ?A",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_hole 0),
           template_hole 0),
         template_var 0),
       template_var 0)),
    ("Formula.sizelemmas", "size ?A < size (FAll ?z ?A)",
     template_inequation
      (less_than, template_app (template_hole 1, template_var 1),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Formula.instanceF_E", "instanceF ?g ?formula ~= FAll ?signs ?formula",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("Formula.vblcase_nextX",
     "(case nextX ?n of zeroX => ?a | nextX x => ?b x) = ?b ?n",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_var 1, template_var 0))),
    ("Formula.sizelemmas", "size ?A < size (FConj ?z ?A ?B)",
     template_inequation
      (less_than, template_app (template_hole 1, template_var 2),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_var 0)))),
    ("Formula.sizelemmas", "size ?B < size (FConj ?z ?A ?B)",
     template_inequation
      (less_than, template_app (template_hole 1, template_var 2),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2)))),
    ("Formula.freeVarsDual", "freeVarsF (dual ?p ?q ?r ?A) = freeVarsF ?A",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Formula.nextX_nextX", "(nextX ?x = nextX ?y) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Formula.subFNot", "subF ?theta (FNot ?A) = FNot (subF ?theta ?A)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Formula.finiteFreshVar", "finite ?A ==> freshVar ?A ~: ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)),
                 template_var 0)
               )
           ))),
    ("Formula.vbl_cases", "?x = zeroX | (EX y. ?x = nextX y)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 2)),
           template_app (template_hole 1, t_empty))
         )),
    ("Formula.freeVarsFL_cons",
     "freeVarsFL (?A # ?Gamma) = freeVarsF ?A Un freeVarsFL ?Gamma",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Formula.X_deX_connection", "(X ?n : ?A) = (?n : deX ` ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Formula.evalF_FNot", "evalF ?M ?phi (FNot ?A) = (~ evalF ?M ?phi ?A)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Formula.comp_vblcase",
     "?f o vblcase ?a ?b = vblcase (?f ?a) (?f o ?b)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 2, template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Formula.sign_arg_cong", "?x = ?y ==> sign ?z ?x = sign ?z ?y",
     template_implication
      ([template_equation (template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Formula.dualFNot",
     "dual invSign id id (FNot ?A) = FNot (dual invSign id id ?A)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_hole 1),
           template_hole 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_hole 1),
             template_hole 1),
           template_var 0)))),
    ("Formula.evalF_instance",
     "evalF ?M ?phi (instanceF ?u ?A) =
      evalF ?M (vblcase (?phi ?u) ?phi) ?A",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_var 2, template_var 1)),
             template_var 2)),
         template_var 0))),
    ("Formula.evalP_arg2_cong",
     "?x = ?y ==> evalP ?M ?p ?x = evalP ?M ?p ?y",
     template_implication
      ([template_equation (template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2)))),
    ("Formula.evalF_arg2_cong",
     "?x = ?y ==> evalF ?M ?p ?x = evalF ?M ?p ?y",
     template_implication
      ([template_equation (template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2)))),
    ("Formula.freshVarI", "[| finite ?A; ?B <= ?A |] ==> freshVar ?A ~: ?B",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1)),
                 template_var 0)
               )
           ))),
    ("Formula.instanceFDual",
     "instanceF ?u (dual ?p ?q ?r ?A) = dual ?p ?q ?r (instanceF ?u ?A)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 4),
           template_var 0)))),
    ("Formula.subFDual",
     "subF ?theta (dual ?p ?q ?r ?A) = dual ?p ?q ?r (subF ?theta ?A)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 4),
           template_var 0)))),
    ("Formula.evalF_equiv",
     "equalOn (freeVarsF ?A) ?f ?g ==> evalF ?M ?f ?A = evalF ?M ?g ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 3)),
                template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1),
           template_var 3)))),
    ("Formula.equalOn_vblcaseI'",
     "equalOn (preImage nextX ?A) ?f ?g ==>
      equalOn ?A (vblcase ?x ?f) (vblcase ?x ?g)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_hole 1),
                    template_var 3)),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Formula.ind'",
     "[| ?P zeroX; ALL v. ?P v --> ?P (nextX v) |] ==> ?P ?v'",
     template_implication
      ([template_predicate (template_app (template_var 1, template_hole 3)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Formula.evalF_subF_eq",
     "ALL phi theta.
         evalF ?M phi (subF theta ?A) = evalF ?M (phi o theta) ?A",
     template_predicate (template_app (template_hole 5, t_empty))),
    ("Formula.ind", "[| ?P zeroX; !!v. ?P v ==> ?P (nextX v) |] ==> ?P ?v'",
     template_implication
      ([template_predicate (template_app (template_var 1, template_hole 2)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Formula.signsE",
     "[| ?signs = Neg ==> ?P; ?signs = Pos ==> ?P |] ==> ?P",
     template_implication
      ([template_implication
         ([template_equation (template_var 1, template_hole 1)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation (template_var 1, template_hole 0)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Formula.freshVarI2",
     "[| finite ?A; ALL x. x ~: ?A --> ?P x |] ==> ?P (freshVar ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0, template_app (template_hole 0, template_var 1))
           ))),
    ("Formula.expand_case_signs",
     "?Q (case ?F of Pos => ?vpos | Neg => ?vneg) =
      ((?F = Pos --> ?Q ?vpos) & (?F = Neg --> ?Q ?vneg))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 3,
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_hole 1)),
                 template_app (template_var 3, template_var 2))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 0)),
               template_app (template_var 3, template_var 1)))
           ))),
    ("Formula.evalF_FEx",
     "evalF ?M ?phi (FAll Neg ?A) =
      (EX x:objects ?M. evalF ?M (vblcase x ?phi) ?A)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         t_empty))),
    ("Formula.evalF_FAll",
     "evalF ?M ?phi (FAll Pos ?A) =
      (ALL x:objects ?M. evalF ?M (vblcase x ?phi) ?A)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         t_empty))),
    ("Formula.strong_formula_induct",
     "ALL A. (ALL B. size B < size A --> ?P B) --> ?P A ==> ?P ?A",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Formula.dualCompose",
     "dual ?p ?q ?r o dual ?P ?Q ?R = dual (?p o ?P) (?q o ?Q) (?r o ?R)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 5),
               template_var 4),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 5),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 4),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 0)))),
    ("Formula.vbl_casesE",
     "[| ?x = zeroX ==> ?P; !!y. ?x = nextX y ==> ?P |] ==> ?P",
     template_implication
      ([template_implication
         ([template_equation (template_var 1, template_hole 2)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Formula.equalOn_vblcaseI",
     "[| zeroX : ?A --> ?x = ?y; equalOn (preImage nextX ?A) ?f ?g |]
      ==> equalOn ?A (vblcase ?x ?f) (vblcase ?y ?g)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 4)),
              template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_hole 1),
                    template_var 4)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 4),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Formula.strong_formula_induct'",
     "ALL A. (ALL B. size B < size A --> ?P B) --> ?P A ==>
      ALL A. size A = ?n --> ?P A",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Formula.expand_case_formula",
     "?Q (case ?F of FAtom x xa xb => ?fatom x xa xb
          | FConj x xa xb => ?fconj x xa xb | FAll x xa => ?fall x xa) =
      ((ALL z P vs. ?F = FAtom z P vs --> ?Q (?fatom z P vs)) &
       (ALL z A0 A1. ?F = FConj z A0 A1 --> ?Q (?fconj z A0 A1)) &
       (ALL z A. ?F = FAll z A --> ?Q (?fall z A)))",
     template_equation
      (template_app
        (template_var 4,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 10, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 9, template_app (template_hole 8, t_empty)),
         template_app
          (template_app
            (template_hole 9, template_app (template_hole 8, t_empty)),
           template_app (template_hole 8, t_empty))))),
    ("Formula.formula_signs_cases",
     "[| !!p vs. ?P (FAtom Pos p vs); !!p vs. ?P (FAtom Neg p vs);
         !!f1 f2. ?P (FConj Pos f1 f2); !!f1 f2. ?P (FConj Neg f1 f2);
         !!f1. ?P (FAll Pos f1); !!f1. ?P (FAll Neg f1) |]
      ==> ?P ?A",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Formula.formula_signs_induct",
     "[| ALL p vs. ?P (FAtom Pos p vs); ALL p vs. ?P (FAtom Neg p vs);
         !!A B. [| ?P A; ?P B |] ==> ?P (FConj Pos A B);
         !!A B. [| ?P A; ?P B |] ==> ?P (FConj Neg A B);
         !!A. ?P A ==> ?P (FAll Pos A); !!A. ?P A ==> ?P (FAll Neg A) |]
      ==> ?P ?A",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (template_app (template_var 1, template_var 0))))]:
   (string * thm * template) list
### theory "Draft.FormulaTemplates"
### 0.380s elapsed time, 0.529s cpu time, 0.064s GC time
val it = (): unit
