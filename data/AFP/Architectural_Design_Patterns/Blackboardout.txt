Loading theory "HOL-Library.Case_Converter" (required by "Draft.BlackboardMoreTemplates" via "Draft.Blackboard" via "Draft.Publisher_Subscriber" via "Draft.Singleton" via "DynamicArchitectures.Dynamic_Architecture_Calculus" via "DynamicArchitectures.Configuration_Traces" via "Coinductive.Coinductive_List" via "HOL-Library.Simps_Case_Conv")
Loading theory "HOL-Library.Complete_Partial_Order2" (required by "Draft.BlackboardMoreTemplates" via "Draft.Blackboard" via "Draft.Publisher_Subscriber" via "Draft.Singleton" via "DynamicArchitectures.Dynamic_Architecture_Calculus" via "DynamicArchitectures.Configuration_Traces" via "Coinductive.Coinductive_List" via "Coinductive.Coinductive_Nat")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.BlackboardMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.BlackboardMoreTemplates" via "Draft.Blackboard" via "Draft.Publisher_Subscriber" via "Draft.Singleton" via "DynamicArchitectures.Dynamic_Architecture_Calculus" via "DynamicArchitectures.Configuration_Traces" via "Coinductive.Coinductive_List")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |]
          ==> x <= \<Squnion> A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> \<Squnion> A <= z"
### theory "HOL-Library.Function_Algebras"
### 0.163s elapsed time, 0.669s cpu time, 0.060s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.BlackboardMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
consts
  enumerate :: "'a set => nat => 'a"
signature CASE_CONVERTER =
  sig
    type elimination_strategy
    val keep_constructor_context: elimination_strategy
    val replace_by_type:
       (Proof.context -> string * string -> bool) -> elimination_strategy
    val to_case:
       Proof.context ->
         elimination_strategy ->
           (string * typ -> int) -> thm list -> thm list option
  end
structure Case_Converter: CASE_CONVERTER
### theory "HOL-Library.Case_Converter"
### 0.292s elapsed time, 1.162s cpu time, 0.118s GC time
Loading theory "HOL-Library.Simps_Case_Conv" (required by "Draft.BlackboardMoreTemplates" via "Draft.Blackboard" via "Draft.Publisher_Subscriber" via "Draft.Singleton" via "DynamicArchitectures.Dynamic_Architecture_Calculus" via "DynamicArchitectures.Configuration_Traces" via "Coinductive.Coinductive_List")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.311s elapsed time, 1.240s cpu time, 0.118s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.BlackboardMoreTemplates" via "Draft.Blackboard" via "Draft.Publisher_Subscriber" via "Draft.Singleton" via "DynamicArchitectures.Dynamic_Architecture_Calculus" via "DynamicArchitectures.Configuration_Traces" via "Coinductive.Coinductive_List" via "Coinductive.Coinductive_Nat" via "HOL-Library.Extended_Nat" via "HOL-Library.Countable")
val cont_intro_tac = fn: Proof.context -> int -> tactic
val cont_intro_simproc = fn: Proof.context -> cterm -> thm option
signature SIMPS_CASE_CONV =
  sig
    val gen_to_simps: Proof.context -> thm list -> thm -> thm list
    val to_case: Proof.context -> thm list -> thm
    val to_simps: Proof.context -> thm -> thm list
  end
structure Simps_Case_Conv: SIMPS_CASE_CONV
### theory "HOL-Library.Simps_Case_Conv"
### 0.060s elapsed time, 0.239s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.BlackboardMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
class preorder = ord +
  assumes "less_le_not_le": "!!x y. (x < y) = (x <= y & ~ y <= x)"
    and "order_refl": "!!x. x <= x"
    and "order_trans": "!!x y z. [| x <= y; y <= z |] ==> x <= z"
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |]
          ==> x <= \<Squnion> A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> \<Squnion> A <= z"
### theory "HOL-Library.Nat_Bijection"
### 0.337s elapsed time, 1.322s cpu time, 0.121s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.BlackboardMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.186s elapsed time, 0.732s cpu time, 0.063s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.BlackboardMoreTemplates" via "Draft.Blackboard" via "Draft.Publisher_Subscriber" via "Draft.Singleton" via "DynamicArchitectures.Dynamic_Architecture_Calculus" via "DynamicArchitectures.Configuration_Traces" via "Coinductive.Coinductive_List")
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.426s elapsed time, 1.663s cpu time, 0.241s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.BlackboardMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |]
          ==> x <= \<Squnion> A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> \<Squnion> A <= z"
consts
  prefixes :: "'a list => 'a list list"
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |]
          ==> x <= \<Squnion> A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> \<Squnion> A <= z"
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
Proofs for inductive predicate(s) "compact"
  Proving monotonicity ...
consts
  shift :: "'a list => 'a stream => 'a stream"
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |]
          ==> x <= \<Squnion> A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> \<Squnion> A <= z"
Proofs for coinductive predicate(s) "streamsp"
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
  Proving monotonicity ...
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |]
          ==> x <= \<Squnion> A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> \<Squnion> A <= z"
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |]
          ==> x <= \<Squnion> A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> \<Squnion> A <= z"
consts
  flat :: "'a list stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
consts
  suffixes :: "'a list => 'a list list"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "list_emb"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
  Proving monotonicity ...
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
class complete_lattice = ccpo + conditionally_complete_lattice +
  bounded_lattice +
  assumes "Inf_lower": "!!x A. x : A ==> \<Sqinter> A <= x"
    and
    "Inf_greatest": "!!A z. (!!x. x : A ==> z <= x) ==> z <= \<Sqinter> A"
    and "Sup_upper": "!!x A. x : A ==> x <= \<Squnion> A"
    and "Sup_least": "!!A z. (!!x. x : A ==> x <= z) ==> \<Squnion> A <= z"
    and "Inf_empty": "\<Sqinter> {} = \<top>"
    and "Sup_empty": "\<Squnion> {} = \<bottom>"
### theory "HOL-Library.Stream"
### 1.200s elapsed time, 4.495s cpu time, 1.041s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.BlackboardMoreTemplates" via "Draft.Blackboard" via "Draft.Publisher_Subscriber" via "Draft.Singleton" via "DynamicArchitectures.Dynamic_Architecture_Calculus" via "DynamicArchitectures.Configuration_Traces" via "Coinductive.Coinductive_List" via "Coinductive.Coinductive_Nat" via "HOL-Library.Extended_Nat")
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
class complete_distrib_lattice = complete_lattice + distrib_lattice +
  assumes
    "Inf_Sup_le":
      "!!A. \<Sqinter> (Sup ` A)
            <= \<Squnion> (Inf ` {f ` A |f. ALL Y:A. f Y : Y})"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class complete_lattice = ccpo + conditionally_complete_lattice +
  bounded_lattice +
  assumes "Inf_lower": "!!x A. x : A ==> \<Sqinter> A <= x"
    and
    "Inf_greatest": "!!A z. (!!x. x : A ==> z <= x) ==> z <= \<Sqinter> A"
    and "Sup_upper": "!!x A. x : A ==> x <= \<Squnion> A"
    and "Sup_least": "!!A z. (!!x. x : A ==> x <= z) ==> \<Squnion> A <= z"
    and "Inf_empty": "\<Sqinter> {} = \<top>"
    and "Sup_empty": "\<Squnion> {} = \<bottom>"
Found termination order: "size <*mlex*> {}"
### Additional type variable(s) in locale specification "countable": 'a
Found termination order: "size <*mlex*> {}"
consts
  sublists :: "'a list => 'a list list"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Sublist"
### 1.733s elapsed time, 6.600s cpu time, 1.269s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.BlackboardMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
### theory "HOL-Library.Complete_Partial_Order2"
### 2.736s elapsed time, 10.546s cpu time, 1.621s GC time
### theory "HOL-Library.Countable"
### 1.179s elapsed time, 4.632s cpu time, 0.446s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.BlackboardMoreTemplates" via "Draft.Blackboard" via "Draft.Publisher_Subscriber" via "Draft.Singleton" via "DynamicArchitectures.Dynamic_Architecture_Calculus" via "DynamicArchitectures.Configuration_Traces" via "Coinductive.Coinductive_List" via "Coinductive.Coinductive_Nat" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.121s elapsed time, 4.070s cpu time, 1.276s GC time
### theory "HOL-Library.Tree"
### 2.682s elapsed time, 9.965s cpu time, 2.366s GC time
Loading theory "Draft.Templates" (required by "Draft.BlackboardMoreTemplates" via "Draft.ExtrEqs")
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.077s elapsed time, 0.188s cpu time, 0.035s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.BlackboardMoreTemplates")
### theory "HOL-Library.Countable_Set"
### 0.734s elapsed time, 2.166s cpu time, 1.093s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.BlackboardMoreTemplates" via "Draft.Blackboard" via "Draft.Publisher_Subscriber" via "Draft.Singleton" via "DynamicArchitectures.Dynamic_Architecture_Calculus" via "DynamicArchitectures.Configuration_Traces" via "Coinductive.Coinductive_List" via "Coinductive.Coinductive_Nat" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.545s elapsed time, 1.124s cpu time, 0.069s GC time
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
### theory "HOL-Library.Countable_Complete_Lattices"
### 1.542s elapsed time, 2.062s cpu time, 0.158s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.BlackboardMoreTemplates" via "Draft.Blackboard" via "Draft.Publisher_Subscriber" via "Draft.Singleton" via "DynamicArchitectures.Dynamic_Architecture_Calculus" via "DynamicArchitectures.Configuration_Traces" via "Coinductive.Coinductive_List" via "Coinductive.Coinductive_Nat" via "HOL-Library.Extended_Nat")
### theory "HOL-Library.Order_Continuity"
### 0.419s elapsed time, 0.502s cpu time, 0.076s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.BlackboardMoreTemplates" via "Draft.Blackboard" via "Draft.Publisher_Subscriber" via "Draft.Singleton" via "DynamicArchitectures.Dynamic_Architecture_Calculus" via "DynamicArchitectures.Configuration_Traces" via "Coinductive.Coinductive_List" via "Coinductive.Coinductive_Nat")
class infinity = type +
  fixes infinity :: "'a"
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### theory "HOL-Library.Extended_Nat"
### 0.750s elapsed time, 1.467s cpu time, 1.005s GC time
Loading theory "Coinductive.Coinductive_Nat" (required by "Draft.BlackboardMoreTemplates" via "Draft.Blackboard" via "Draft.Publisher_Subscriber" via "Draft.Singleton" via "DynamicArchitectures.Dynamic_Architecture_Calculus" via "DynamicArchitectures.Configuration_Traces" via "Coinductive.Coinductive_List")
Proofs for coinductive predicate(s) "enat_setp"
  Proving monotonicity ...
locale co
Proofs for coinductive predicate(s) "Le_enatp"
  Proving monotonicity ...
### theory "Coinductive.Coinductive_Nat"
### 0.560s elapsed time, 0.589s cpu time, 0.041s GC time
Loading theory "Coinductive.Coinductive_List" (required by "Draft.BlackboardMoreTemplates" via "Draft.Blackboard" via "Draft.Publisher_Subscriber" via "Draft.Singleton" via "DynamicArchitectures.Dynamic_Architecture_Calculus" via "DynamicArchitectures.Configuration_Traces")
consts
  unfold_llist ::
    "('a => bool) => ('a => 'b) => ('a => 'a) => 'a => 'b llist"
Proofs for inductive predicate(s) "lsetp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "lfinite"
  Proving monotonicity ...
consts
  lappend :: "'a llist => 'a llist => 'a llist"
### Ignoring duplicate rewrite rule:
### lnull (lappend ?xs1 ?ys1) == lnull ?xs1 & lnull ?ys1
Proofs for coinductive predicate(s) "lprefix"
  Proving monotonicity ...
consts
  lSup :: "'a llist set => 'a llist"
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
consts
  iterates :: "('a => 'a) => 'a => 'a llist"
consts
  llist_of :: "'a list => 'a llist"
consts
  ltake :: "enat => 'a llist => 'a llist"
### Ambiguous input (line 1019 of "$AFP/Coinductive/Coinductive_List.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ldrop)
###       ("_cargs" ("_position" n) ("_position" xs)))
###     ("_case_syntax" ("_position" n)
###       ("_case2"
###         ("_case1" ("\<^const>Groups.zero_class.zero") ("_position" xs))
###         ("_case1" ("_applC" ("_position" eSuc) ("_position" n'))
###           ("_case_syntax" ("_position" xs)
###             ("_case2" ("_case1" ("_position" LNil) ("_position" LNil))
###               ("_case1"
###                 ("_applC" ("_position" LCons)
###                   ("_cargs" ("_position" x) ("_position" xs')))
###                 ("_applC" ("_position" ldrop)
###                   ("_cargs" ("_position" n') ("_position" xs')))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ldrop)
###       ("_cargs" ("_position" n) ("_position" xs)))
###     ("_case_syntax" ("_position" n)
###       ("_case2"
###         ("_case1" ("\<^const>Groups.zero_class.zero") ("_position" xs))
###         ("_case2"
###           ("_case1" ("_applC" ("_position" eSuc) ("_position" n'))
###             ("_case_syntax" ("_position" xs)
###               ("_case1" ("_position" LNil) ("_position" LNil))))
###           ("_case1"
###             ("_applC" ("_position" LCons)
###               ("_cargs" ("_position" x) ("_position" xs')))
###             ("_applC" ("_position" ldrop)
###               ("_cargs" ("_position" n') ("_position" xs')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  ltakeWhile :: "('a => bool) => 'a llist => 'a llist"
consts
  lnth :: "'a llist => nat => 'a"
consts
  lzip :: "'a llist => 'b llist => ('a * 'b) llist"
Proofs for coinductive predicate(s) "ldistinct"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "llexord"
  Proving monotonicity ...
### Ambiguous input (line 1508 of "$AFP/Coinductive/Coinductive_List.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" F)
###   ("_lambda"
###     ("_pttrns" ("_position" ltake)
###       ("_pttrns" ("_position" n) ("_position" xs)))
###     ("_case_syntax" ("_position" xs)
###       ("_case2" ("_case1" ("_position" LNil) ("_position" LNil))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" LCons)
###               ("_cargs" ("_position" x) ("_position" xs)))
###             ("_case_syntax" ("_position" n)
###               ("_case1" ("\<^const>Groups.zero_class.zero")
###                 ("_position" LNil))))
###           ("_case1" ("_applC" ("_position" eSuc) ("_position" n))
###             ("_applC" ("_position" LCons)
###               ("_cargs" ("_position" x)
###                 ("_applC" ("_position" ltake)
###                   ("_cargs" ("_position" n) ("_position" xs)))))))))))
### ("\<^const>Pure.eq" ("_position" F)
###   ("_lambda"
###     ("_pttrns" ("_position" ltake)
###       ("_pttrns" ("_position" n) ("_position" xs)))
###     ("_case_syntax" ("_position" xs)
###       ("_case2" ("_case1" ("_position" LNil) ("_position" LNil))
###         ("_case1"
###           ("_applC" ("_position" LCons)
###             ("_cargs" ("_position" x) ("_position" xs)))
###           ("_case_syntax" ("_position" n)
###             ("_case2"
###               ("_case1" ("\<^const>Groups.zero_class.zero")
###                 ("_position" LNil))
###               ("_case1" ("_applC" ("_position" eSuc) ("_position" n))
###                 ("_applC" ("_position" LCons)
###                   ("_cargs" ("_position" x)
###                     ("_applC" ("_position" ltake)
###                       ("_cargs" ("_position" n) ("_position" xs)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate rewrite rule:
### lnull (lzip ?xs1 ?ys1) == lnull ?xs1 | lnull ?ys1
### Ambiguous input (line 2485 of "$AFP/Coinductive/Coinductive_List.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" F)
###   ("_lambda"
###     ("_pttrns" ("_position" lzip)
###       ("_pattern" ("_position" xs) ("_position" ys)))
###     ("_case_syntax" ("_position" xs)
###       ("_case2" ("_case1" ("_position" LNil) ("_position" LNil))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" LCons)
###               ("_cargs" ("_position" x) ("_position" xs')))
###             ("_case_syntax" ("_position" ys)
###               ("_case1" ("_position" LNil) ("_position" LNil))))
###           ("_case1"
###             ("_applC" ("_position" LCons)
###               ("_cargs" ("_position" y) ("_position" ys')))
###             ("_applC" ("_position" LCons)
###               ("_cargs"
###                 ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y)))
###                 ("_applC" ("_position" curry)
###                   ("_cargs" ("_position" lzip)
###                     ("_cargs" ("_position" xs') ("_position" ys'))))))))))))
### ("\<^const>Pure.eq" ("_position" F)
###   ("_lambda"
###     ("_pttrns" ("_position" lzip)
###       ("_pattern" ("_position" xs) ("_position" ys)))
###     ("_case_syntax" ("_position" xs)
###       ("_case2" ("_case1" ("_position" LNil) ("_position" LNil))
###         ("_case1"
###           ("_applC" ("_position" LCons)
###             ("_cargs" ("_position" x) ("_position" xs')))
###           ("_case_syntax" ("_position" ys)
###             ("_case2" ("_case1" ("_position" LNil) ("_position" LNil))
###               ("_case1"
###                 ("_applC" ("_position" LCons)
###                   ("_cargs" ("_position" y) ("_position" ys')))
###                 ("_applC" ("_position" LCons)
###                   ("_cargs"
###                     ("_tuple" ("_position" x)
###                       ("_tuple_arg" ("_position" y)))
###                     ("_applC" ("_position" curry)
###                       ("_cargs" ("_position" lzip)
###                         ("_cargs" ("_position" xs')
###                           ("_position" ys'))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
Proofs for coinductive predicate(s) "lsorted"
  Proving monotonicity ...
### Partially applied constant "Sublist.list_emb" on left hand side of equation, in theorem:
### subseq_order.lsorted LNil == True
### Partially applied constant "Sublist.list_emb" on left hand side of equation, in theorem:
### subseq_order.lsorted (LCons ?x LNil) == True
### Partially applied constant "Sublist.list_emb" on left hand side of equation, in theorem:
### subseq_order.lsorted (LCons ?x (LCons ?y ?xs)) ==
### subseq ?x ?y & subseq_order.lsorted (LCons ?y ?xs)
### Partially applied constant "Sublist.sublist" on left hand side of equation, in theorem:
### sublist_order.lsorted LNil == True
### Partially applied constant "Sublist.sublist" on left hand side of equation, in theorem:
### sublist_order.lsorted (LCons ?x LNil) == True
### Partially applied constant "Sublist.sublist" on left hand side of equation, in theorem:
### sublist_order.lsorted (LCons ?x (LCons ?y ?xs)) ==
### sublist ?x ?y & sublist_order.lsorted (LCons ?y ?xs)
### Partially applied constant "Sublist.suffix" on left hand side of equation, in theorem:
### suffix_order.lsorted LNil == True
### Partially applied constant "Sublist.suffix" on left hand side of equation, in theorem:
### suffix_order.lsorted (LCons ?x LNil) == True
### Partially applied constant "Sublist.suffix" on left hand side of equation, in theorem:
### suffix_order.lsorted (LCons ?x (LCons ?y ?xs)) ==
### suffix ?x ?y & suffix_order.lsorted (LCons ?y ?xs)
### Partially applied constant "Sublist.prefix" on left hand side of equation, in theorem:
### prefix_order.lsorted LNil == True
### Partially applied constant "Sublist.prefix" on left hand side of equation, in theorem:
### prefix_order.lsorted (LCons ?x LNil) == True
### Partially applied constant "Sublist.prefix" on left hand side of equation, in theorem:
### prefix_order.lsorted (LCons ?x (LCons ?y ?xs)) ==
### prefix ?x ?y & prefix_order.lsorted (LCons ?y ?xs)
class preorder = ord +
  assumes "less_le_not_le": "!!x y. (x < y) = (x <= y & ~ y <= x)"
    and "order_refl": "!!x. x <= x"
    and "order_trans": "!!x y z. [| x <= y; y <= z |] ==> x <= z"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### Introduced fixed type variable(s): 'a in "P__" or "xs__"
### Introduced fixed type variable(s): 'a in "P__" or "xs__"
### Introduced fixed type variable(s): 'a in "P__" or "Q__"
### Introduced fixed type variable(s): 'a in "xs__"
class preorder = ord +
  assumes "less_le_not_le": "!!x y. (x < y) = (x <= y & ~ y <= x)"
    and "order_refl": "!!x. x <= x"
    and "order_trans": "!!x y z. [| x <= y; y <= z |] ==> x <= z"
class monoid_add = semigroup_add + zero +
  assumes "add_0_left": "!!a. (0::'a) + a = a"
    and "add_0_right": "!!a. a + (0::'a) = a"
### theory "Coinductive.Coinductive_List"
### 3.433s elapsed time, 4.814s cpu time, 1.894s GC time
Loading theory "DynamicArchitectures.Configuration_Traces" (required by "Draft.BlackboardMoreTemplates" via "Draft.Blackboard" via "Draft.Publisher_Subscriber" via "Draft.Singleton" via "DynamicArchitectures.Dynamic_Architecture_Calculus")
locale dynamic_component
  fixes
    tCMP :: "'id => cnf => 'cmp"
      (\<open>\<sigma>\<^bsub>_\<^esub>(_)\<close> [0, 110] 60)
    and
    active :: "'id => cnf => bool"
      (\<open>\<parallel>_\<parallel>\<^bsub>_\<^esub>\<close> [0, 110] 60)
### theory "DynamicArchitectures.Configuration_Traces"
### 0.551s elapsed time, 0.705s cpu time, 0.182s GC time
Loading theory "DynamicArchitectures.Dynamic_Architecture_Calculus" (required by "Draft.BlackboardMoreTemplates" via "Draft.Blackboard" via "Draft.Publisher_Subscriber" via "Draft.Singleton")
locale dynamic_component
  fixes
    tCMP :: "'id => cnf => 'cmp"
      (\<open>\<sigma>\<^bsub>_\<^esub>(_)\<close> [0, 110] 60)
    and
    active :: "'id => cnf => bool"
      (\<open>\<parallel>_\<parallel>\<^bsub>_\<^esub>\<close> [0, 110] 60)
### theory "DynamicArchitectures.Dynamic_Architecture_Calculus"
### 0.512s elapsed time, 0.581s cpu time, 0.092s GC time
Loading theory "Draft.Singleton" (required by "Draft.BlackboardMoreTemplates" via "Draft.Blackboard" via "Draft.Publisher_Subscriber")
locale singleton
  fixes
    active :: "'id => cnf => bool"
      (\<open>\<parallel>_\<parallel>\<^bsub>_\<^esub>\<close> [0, 110] 60)
    and
    cmp :: "'id => cnf => 'cmp"
      (\<open>\<sigma>\<^bsub>_\<^esub>(_)\<close> [0, 110] 60)
  assumes "singleton active"
### theory "Draft.Singleton"
### 0.135s elapsed time, 0.135s cpu time, 0.000s GC time
Loading theory "Draft.Publisher_Subscriber" (required by "Draft.BlackboardMoreTemplates" via "Draft.Blackboard")
### Ambiguous input (line 31 of "$AFP/Architectural_Design_Patterns/Publisher_Subscriber.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.all_binder" ("_idts" ("_position" k) ("_position" pid))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>sbactive" ("_position" pid) ("_position" k)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" pbsb)
###           ("\<^fixed>sbcmp" ("_position" pid) ("_position" k)))
###         ("_UNION" ("_position" sid)
###           ("_Coll" ("_position" sid)
###             ("\<^fixed>sbactive" ("_position" sid) ("_position" k)))
###           ("_Finset"
###             ("_applC" ("_position" sbsb)
###               ("\<^fixed>sbcmp" ("_position" sid) ("_position" k)))))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" k) ("_position" pid))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>pbactive" ("_position" pid) ("_position" k)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" pbsb)
###           ("\<^fixed>sbcmp" ("_position" pid) ("_position" k)))
###         ("_UNION" ("_position" sid)
###           ("_Coll" ("_position" sid)
###             ("\<^fixed>sbactive" ("_position" sid) ("_position" k)))
###           ("_Finset"
###             ("_applC" ("_position" sbsb)
###               ("\<^fixed>sbcmp" ("_position" sid) ("_position" k)))))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" k) ("_position" pid))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>sbactive" ("_position" pid) ("_position" k)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" pbsb)
###           ("\<^fixed>pbcmp" ("_position" pid) ("_position" k)))
###         ("_UNION" ("_position" sid)
###           ("_Coll" ("_position" sid)
###             ("\<^fixed>sbactive" ("_position" sid) ("_position" k)))
###           ("_Finset"
###             ("_applC" ("_position" sbsb)
###               ("\<^fixed>sbcmp" ("_position" sid) ("_position" k)))))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" k) ("_position" pid))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>pbactive" ("_position" pid) ("_position" k)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" pbsb)
###           ("\<^fixed>pbcmp" ("_position" pid) ("_position" k)))
###         ("_UNION" ("_position" sid)
###           ("_Coll" ("_position" sid)
###             ("\<^fixed>sbactive" ("_position" sid) ("_position" k)))
###           ("_Finset"
###             ("_applC" ("_position" sbsb)
###               ("\<^fixed>sbcmp" ("_position" sid) ("_position" k)))))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" k) ("_position" pid))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>sbactive" ("_position" pid) ("_position" k)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" pbsb)
###           ("\<^fixed>sbcmp" ("_position" pid) ("_position" k)))
###         ("_UNION" ("_position" sid)
###           ("_Coll" ("_position" sid)
###             ("\<^fixed>pbactive" ("_position" sid) ("_position" k)))
###           ("_Finset"
###             ("_applC" ("_position" sbsb)
###               ("\<^fixed>sbcmp" ("_position" sid) ("_position" k)))))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" k) ("_position" pid))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>pbactive" ("_position" pid) ("_position" k)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" pbsb)
###           ("\<^fixed>sbcmp" ("_position" pid) ("_position" k)))
###         ("_UNION" ("_position" sid)
###           ("_Coll" ("_position" sid)
###             ("\<^fixed>pbactive" ("_position" sid) ("_position" k)))
###           ("_Finset"
###             ("_applC" ("_position" sbsb)
###               ("\<^fixed>sbcmp" ("_position" sid) ("_position" k)))))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" k) ("_position" pid))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>sbactive" ("_position" pid) ("_position" k)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" pbsb)
###           ("\<^fixed>pbcmp" ("_position" pid) ("_position" k)))
###         ("_UNION" ("_position" sid)
###           ("_Coll" ("_position" sid)
###             ("\<^fixed>pbactive" ("_position" sid) ("_position" k)))
###           ("_Finset"
###             ("_applC" ("_position" sbsb)
###               ("\<^fixed>sbcmp" ("_position" sid) ("_position" k)))))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" k) ("_position" pid))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>pbactive" ("_position" pid) ("_position" k)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" pbsb)
###           ("\<^fixed>pbcmp" ("_position" pid) ("_position" k)))
###         ("_UNION" ("_position" sid)
###           ("_Coll" ("_position" sid)
###             ("\<^fixed>pbactive" ("_position" sid) ("_position" k)))
###           ("_Finset"
###             ("_applC" ("_position" sbsb)
###               ("\<^fixed>sbcmp" ("_position" sid) ("_position" k)))))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" k) ("_position" pid))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>sbactive" ("_position" pid) ("_position" k)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" pbsb)
###           ("\<^fixed>sbcmp" ("_position" pid) ("_position" k)))
###         ("_UNION" ("_position" sid)
###           ("_Coll" ("_position" sid)
###             ("\<^fixed>sbactive" ("_position" sid) ("_position" k)))
###           ("_Finset"
###             ("_applC" ("_position" sbsb)
###               ("\<^fixed>pbcmp" ("_position" sid) ("_position" k)))))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" k) ("_position" pid))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>pbactive" ("_position" pid) ("_position" k)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" pbsb)
###           ("\<^fixed>sbcmp" ("_position" pid) ("_position" k)))
###         ("_UNION" ("_position" sid)
###           ("_Coll" ("_position" sid)
###             ("\<^fixed>sbactive" ("_position" sid) ("_position" k)))
###           ("_Finset"
###             ("_applC" ("_position" sbsb)
###               ("\<^fixed>pbcmp" ("_position" sid) ("_position" k)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 33 of "$AFP/Architectural_Design_Patterns/Publisher_Subscriber.thy") produces 512 parse trees (10 displayed):
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" n)
###       ("_idts" ("_position" n'')
###         ("_idts" ("_position" sid)
###           ("_idts" ("_position" pid)
###             ("_idts" ("_position" E)
###               ("_idts" ("_position" e) ("_position" m))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>pbactive" ("_position" pid)
###             ("_applC" ("_position" t) ("_position" n))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>pbactive" ("_position" sid)
###               ("_applC" ("_position" t) ("_position" n))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" sub) ("_position" E))
###                 ("_applC" ("_position" sbsb)
###                   ("\<^fixed>pbcmp" ("_position" sid)
###                     ("_applC" ("_position" t) ("_position" n))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Orderings.ord_class.greater_eq" ("_position" n'')
###                   ("_position" n)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member" ("_position" e) ("_position" E)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("_Not_Ex" ("_idts" ("_position" n') ("_position" E'))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>Orderings.ord_class.greater_eq"
###                           ("_position" n') ("_position" n))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>Orderings.ord_class.less_eq"
###                             ("_position" n') ("_position" n''))
###                           ("\<^const>HOL.conj"
###                             ("\<^fixed>pbactive" ("_position" sid)
###                               ("_applC" ("_position" t) ("_position" n')))
###                             ("\<^const>HOL.conj"
###                               ("\<^const>HOL.eq"
###                                 ("_applC" ("_position" unsub)
###                                   ("_position" E'))
###                                 ("_applC" ("_position" sbsb)
###                                   ("\<^fixed>pbcmp" ("_position" sid)
###                                     ("_applC" ("_position" t)
### ("_position" n')))))
###                               ("\<^const>Set.member" ("_position" e)
###                                 ("_position" E'))))))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq"
###                         ("_tuple" ("_position" e)
###                           ("_tuple_arg" ("_position" m)))
###                         ("_applC" ("_position" pbnt)
###                           ("\<^fixed>pbcmp" ("_position" pid)
###                             ("_applC" ("_position" t) ("_position" n''))))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^fixed>pbactive" ("_position" sid)
###                           ("_applC" ("_position" t)
###                             ("_position" n'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" pbnt)
###           ("\<^fixed>sbcmp" ("_position" pid)
###             ("_applC" ("_position" t) ("_position" n''))))
###         ("_applC" ("_position" sbnt)
###           ("\<^fixed>sbcmp" ("_position" sid)
###             ("_applC" ("_position" t) ("_position" n''))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" n)
###       ("_idts" ("_position" n'')
###         ("_idts" ("_position" sid)
###           ("_idts" ("_position" pid)
###             ("_idts" ("_position" E)
###               ("_idts" ("_position" e) ("_position" m))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>sbactive" ("_position" pid)
###             ("_applC" ("_position" t) ("_position" n))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>pbactive" ("_position" sid)
###               ("_applC" ("_position" t) ("_position" n))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" sub) ("_position" E))
###                 ("_applC" ("_position" sbsb)
###                   ("\<^fixed>pbcmp" ("_position" sid)
###                     ("_applC" ("_position" t) ("_position" n))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Orderings.ord_class.greater_eq" ("_position" n'')
###                   ("_position" n)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member" ("_position" e) ("_position" E)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("_Not_Ex" ("_idts" ("_position" n') ("_position" E'))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>Orderings.ord_class.greater_eq"
###                           ("_position" n') ("_position" n))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>Orderings.ord_class.less_eq"
###                             ("_position" n') ("_position" n''))
###                           ("\<^const>HOL.conj"
###                             ("\<^fixed>pbactive" ("_position" sid)
###                               ("_applC" ("_position" t) ("_position" n')))
###                             ("\<^const>HOL.conj"
###                               ("\<^const>HOL.eq"
###                                 ("_applC" ("_position" unsub)
###                                   ("_position" E'))
###                                 ("_applC" ("_position" sbsb)
###                                   ("\<^fixed>pbcmp" ("_position" sid)
###                                     ("_applC" ("_position" t)
### ("_position" n')))))
###                               ("\<^const>Set.member" ("_position" e)
###                                 ("_position" E'))))))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq"
###                         ("_tuple" ("_position" e)
###                           ("_tuple_arg" ("_position" m)))
###                         ("_applC" ("_position" pbnt)
###                           ("\<^fixed>pbcmp" ("_position" pid)
###                             ("_applC" ("_position" t) ("_position" n''))))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^fixed>pbactive" ("_position" sid)
###                           ("_applC" ("_position" t)
###                             ("_position" n'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" pbnt)
###           ("\<^fixed>sbcmp" ("_position" pid)
###             ("_applC" ("_position" t) ("_position" n''))))
###         ("_applC" ("_position" sbnt)
###           ("\<^fixed>sbcmp" ("_position" sid)
###             ("_applC" ("_position" t) ("_position" n''))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" n)
###       ("_idts" ("_position" n'')
###         ("_idts" ("_position" sid)
###           ("_idts" ("_position" pid)
###             ("_idts" ("_position" E)
###               ("_idts" ("_position" e) ("_position" m))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>pbactive" ("_position" pid)
###             ("_applC" ("_position" t) ("_position" n))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>sbactive" ("_position" sid)
###               ("_applC" ("_position" t) ("_position" n))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" sub) ("_position" E))
###                 ("_applC" ("_position" sbsb)
###                   ("\<^fixed>pbcmp" ("_position" sid)
###                     ("_applC" ("_position" t) ("_position" n))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Orderings.ord_class.greater_eq" ("_position" n'')
###                   ("_position" n)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member" ("_position" e) ("_position" E)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("_Not_Ex" ("_idts" ("_position" n') ("_position" E'))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>Orderings.ord_class.greater_eq"
###                           ("_position" n') ("_position" n))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>Orderings.ord_class.less_eq"
###                             ("_position" n') ("_position" n''))
###                           ("\<^const>HOL.conj"
###                             ("\<^fixed>pbactive" ("_position" sid)
###                               ("_applC" ("_position" t) ("_position" n')))
###                             ("\<^const>HOL.conj"
###                               ("\<^const>HOL.eq"
###                                 ("_applC" ("_position" unsub)
###                                   ("_position" E'))
###                                 ("_applC" ("_position" sbsb)
###                                   ("\<^fixed>pbcmp" ("_position" sid)
###                                     ("_applC" ("_position" t)
### ("_position" n')))))
###                               ("\<^const>Set.member" ("_position" e)
###                                 ("_position" E'))))))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq"
###                         ("_tuple" ("_position" e)
###                           ("_tuple_arg" ("_position" m)))
###                         ("_applC" ("_position" pbnt)
###                           ("\<^fixed>pbcmp" ("_position" pid)
###                             ("_applC" ("_position" t) ("_position" n''))))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^fixed>pbactive" ("_position" sid)
###                           ("_applC" ("_position" t)
###                             ("_position" n'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" pbnt)
###           ("\<^fixed>sbcmp" ("_position" pid)
###             ("_applC" ("_position" t) ("_position" n''))))
###         ("_applC" ("_position" sbnt)
###           ("\<^fixed>sbcmp" ("_position" sid)
###             ("_applC" ("_position" t) ("_position" n''))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" n)
###       ("_idts" ("_position" n'')
###         ("_idts" ("_position" sid)
###           ("_idts" ("_position" pid)
###             ("_idts" ("_position" E)
###               ("_idts" ("_position" e) ("_position" m))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>sbactive" ("_position" pid)
###             ("_applC" ("_position" t) ("_position" n))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>sbactive" ("_position" sid)
###               ("_applC" ("_position" t) ("_position" n))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" sub) ("_position" E))
###                 ("_applC" ("_position" sbsb)
###                   ("\<^fixed>pbcmp" ("_position" sid)
###                     ("_applC" ("_position" t) ("_position" n))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Orderings.ord_class.greater_eq" ("_position" n'')
###                   ("_position" n)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member" ("_position" e) ("_position" E)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("_Not_Ex" ("_idts" ("_position" n') ("_position" E'))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>Orderings.ord_class.greater_eq"
###                           ("_position" n') ("_position" n))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>Orderings.ord_class.less_eq"
###                             ("_position" n') ("_position" n''))
###                           ("\<^const>HOL.conj"
###                             ("\<^fixed>pbactive" ("_position" sid)
###                               ("_applC" ("_position" t) ("_position" n')))
###                             ("\<^const>HOL.conj"
###                               ("\<^const>HOL.eq"
###                                 ("_applC" ("_position" unsub)
###                                   ("_position" E'))
###                                 ("_applC" ("_position" sbsb)
###                                   ("\<^fixed>pbcmp" ("_position" sid)
###                                     ("_applC" ("_position" t)
### ("_position" n')))))
###                               ("\<^const>Set.member" ("_position" e)
###                                 ("_position" E'))))))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq"
###                         ("_tuple" ("_position" e)
###                           ("_tuple_arg" ("_position" m)))
###                         ("_applC" ("_position" pbnt)
###                           ("\<^fixed>pbcmp" ("_position" pid)
###                             ("_applC" ("_position" t) ("_position" n''))))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^fixed>pbactive" ("_position" sid)
###                           ("_applC" ("_position" t)
###                             ("_position" n'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" pbnt)
###           ("\<^fixed>sbcmp" ("_position" pid)
###             ("_applC" ("_position" t) ("_position" n''))))
###         ("_applC" ("_position" sbnt)
###           ("\<^fixed>sbcmp" ("_position" sid)
###             ("_applC" ("_position" t) ("_position" n''))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" n)
###       ("_idts" ("_position" n'')
###         ("_idts" ("_position" sid)
###           ("_idts" ("_position" pid)
###             ("_idts" ("_position" E)
###               ("_idts" ("_position" e) ("_position" m))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>pbactive" ("_position" pid)
###             ("_applC" ("_position" t) ("_position" n))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>pbactive" ("_position" sid)
###               ("_applC" ("_position" t) ("_position" n))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" sub) ("_position" E))
###                 ("_applC" ("_position" sbsb)
###                   ("\<^fixed>sbcmp" ("_position" sid)
###                     ("_applC" ("_position" t) ("_position" n))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Orderings.ord_class.greater_eq" ("_position" n'')
###                   ("_position" n)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member" ("_position" e) ("_position" E)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("_Not_Ex" ("_idts" ("_position" n') ("_position" E'))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>Orderings.ord_class.greater_eq"
###                           ("_position" n') ("_position" n))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>Orderings.ord_class.less_eq"
###                             ("_position" n') ("_position" n''))
###                           ("\<^const>HOL.conj"
###                             ("\<^fixed>pbactive" ("_position" sid)
###                               ("_applC" ("_position" t) ("_position" n')))
###                             ("\<^const>HOL.conj"
###                               ("\<^const>HOL.eq"
###                                 ("_applC" ("_position" unsub)
###                                   ("_position" E'))
###                                 ("_applC" ("_position" sbsb)
###                                   ("\<^fixed>pbcmp" ("_position" sid)
###                                     ("_applC" ("_position" t)
### ("_position" n')))))
###                               ("\<^const>Set.member" ("_position" e)
###                                 ("_position" E'))))))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq"
###                         ("_tuple" ("_position" e)
###                           ("_tuple_arg" ("_position" m)))
###                         ("_applC" ("_position" pbnt)
###                           ("\<^fixed>pbcmp" ("_position" pid)
###                             ("_applC" ("_position" t) ("_position" n''))))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^fixed>pbactive" ("_position" sid)
###                           ("_applC" ("_position" t)
###                             ("_position" n'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" pbnt)
###           ("\<^fixed>sbcmp" ("_position" pid)
###             ("_applC" ("_position" t) ("_position" n''))))
###         ("_applC" ("_position" sbnt)
###           ("\<^fixed>sbcmp" ("_position" sid)
###             ("_applC" ("_position" t) ("_position" n''))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" n)
###       ("_idts" ("_position" n'')
###         ("_idts" ("_position" sid)
###           ("_idts" ("_position" pid)
###             ("_idts" ("_position" E)
###               ("_idts" ("_position" e) ("_position" m))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>sbactive" ("_position" pid)
###             ("_applC" ("_position" t) ("_position" n))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>pbactive" ("_position" sid)
###               ("_applC" ("_position" t) ("_position" n))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" sub) ("_position" E))
###                 ("_applC" ("_position" sbsb)
###                   ("\<^fixed>sbcmp" ("_position" sid)
###                     ("_applC" ("_position" t) ("_position" n))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Orderings.ord_class.greater_eq" ("_position" n'')
###                   ("_position" n)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member" ("_position" e) ("_position" E)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("_Not_Ex" ("_idts" ("_position" n') ("_position" E'))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>Orderings.ord_class.greater_eq"
###                           ("_position" n') ("_position" n))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>Orderings.ord_class.less_eq"
###                             ("_position" n') ("_position" n''))
###                           ("\<^const>HOL.conj"
###                             ("\<^fixed>pbactive" ("_position" sid)
###                               ("_applC" ("_position" t) ("_position" n')))
###                             ("\<^const>HOL.conj"
###                               ("\<^const>HOL.eq"
###                                 ("_applC" ("_position" unsub)
###                                   ("_position" E'))
###                                 ("_applC" ("_position" sbsb)
###                                   ("\<^fixed>pbcmp" ("_position" sid)
###                                     ("_applC" ("_position" t)
### ("_position" n')))))
###                               ("\<^const>Set.member" ("_position" e)
###                                 ("_position" E'))))))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq"
###                         ("_tuple" ("_position" e)
###                           ("_tuple_arg" ("_position" m)))
###                         ("_applC" ("_position" pbnt)
###                           ("\<^fixed>pbcmp" ("_position" pid)
###                             ("_applC" ("_position" t) ("_position" n''))))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^fixed>pbactive" ("_position" sid)
###                           ("_applC" ("_position" t)
###                             ("_position" n'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" pbnt)
###           ("\<^fixed>sbcmp" ("_position" pid)
###             ("_applC" ("_position" t) ("_position" n''))))
###         ("_applC" ("_position" sbnt)
###           ("\<^fixed>sbcmp" ("_position" sid)
###             ("_applC" ("_position" t) ("_position" n''))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" n)
###       ("_idts" ("_position" n'')
###         ("_idts" ("_position" sid)
###           ("_idts" ("_position" pid)
###             ("_idts" ("_position" E)
###               ("_idts" ("_position" e) ("_position" m))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>pbactive" ("_position" pid)
###             ("_applC" ("_position" t) ("_position" n))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>sbactive" ("_position" sid)
###               ("_applC" ("_position" t) ("_position" n))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" sub) ("_position" E))
###                 ("_applC" ("_position" sbsb)
###                   ("\<^fixed>sbcmp" ("_position" sid)
###                     ("_applC" ("_position" t) ("_position" n))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Orderings.ord_class.greater_eq" ("_position" n'')
###                   ("_position" n)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member" ("_position" e) ("_position" E)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("_Not_Ex" ("_idts" ("_position" n') ("_position" E'))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>Orderings.ord_class.greater_eq"
###                           ("_position" n') ("_position" n))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>Orderings.ord_class.less_eq"
###                             ("_position" n') ("_position" n''))
###                           ("\<^const>HOL.conj"
###                             ("\<^fixed>pbactive" ("_position" sid)
###                               ("_applC" ("_position" t) ("_position" n')))
###                             ("\<^const>HOL.conj"
###                               ("\<^const>HOL.eq"
###                                 ("_applC" ("_position" unsub)
###                                   ("_position" E'))
###                                 ("_applC" ("_position" sbsb)
###                                   ("\<^fixed>pbcmp" ("_position" sid)
###                                     ("_applC" ("_position" t)
### ("_position" n')))))
###                               ("\<^const>Set.member" ("_position" e)
###                                 ("_position" E'))))))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq"
###                         ("_tuple" ("_position" e)
###                           ("_tuple_arg" ("_position" m)))
###                         ("_applC" ("_position" pbnt)
###                           ("\<^fixed>pbcmp" ("_position" pid)
###                             ("_applC" ("_position" t) ("_position" n''))))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^fixed>pbactive" ("_position" sid)
###                           ("_applC" ("_position" t)
###                             ("_position" n'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" pbnt)
###           ("\<^fixed>sbcmp" ("_position" pid)
###             ("_applC" ("_position" t) ("_position" n''))))
###         ("_applC" ("_position" sbnt)
###           ("\<^fixed>sbcmp" ("_position" sid)
###             ("_applC" ("_position" t) ("_position" n''))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" n)
###       ("_idts" ("_position" n'')
###         ("_idts" ("_position" sid)
###           ("_idts" ("_position" pid)
###             ("_idts" ("_position" E)
###               ("_idts" ("_position" e) ("_position" m))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>sbactive" ("_position" pid)
###             ("_applC" ("_position" t) ("_position" n))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>sbactive" ("_position" sid)
###               ("_applC" ("_position" t) ("_position" n))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" sub) ("_position" E))
###                 ("_applC" ("_position" sbsb)
###                   ("\<^fixed>sbcmp" ("_position" sid)
###                     ("_applC" ("_position" t) ("_position" n))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Orderings.ord_class.greater_eq" ("_position" n'')
###                   ("_position" n)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member" ("_position" e) ("_position" E)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("_Not_Ex" ("_idts" ("_position" n') ("_position" E'))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>Orderings.ord_class.greater_eq"
###                           ("_position" n') ("_position" n))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>Orderings.ord_class.less_eq"
###                             ("_position" n') ("_position" n''))
###                           ("\<^const>HOL.conj"
###                             ("\<^fixed>pbactive" ("_position" sid)
###                               ("_applC" ("_position" t) ("_position" n')))
###                             ("\<^const>HOL.conj"
###                               ("\<^const>HOL.eq"
###                                 ("_applC" ("_position" unsub)
###                                   ("_position" E'))
###                                 ("_applC" ("_position" sbsb)
###                                   ("\<^fixed>pbcmp" ("_position" sid)
###                                     ("_applC" ("_position" t)
### ("_position" n')))))
###                               ("\<^const>Set.member" ("_position" e)
###                                 ("_position" E'))))))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq"
###                         ("_tuple" ("_position" e)
###                           ("_tuple_arg" ("_position" m)))
###                         ("_applC" ("_position" pbnt)
###                           ("\<^fixed>pbcmp" ("_position" pid)
###                             ("_applC" ("_position" t) ("_position" n''))))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^fixed>pbactive" ("_position" sid)
###                           ("_applC" ("_position" t)
###                             ("_position" n'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" pbnt)
###           ("\<^fixed>sbcmp" ("_position" pid)
###             ("_applC" ("_position" t) ("_position" n''))))
###         ("_applC" ("_position" sbnt)
###           ("\<^fixed>sbcmp" ("_position" sid)
###             ("_applC" ("_position" t) ("_position" n''))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" n)
###       ("_idts" ("_position" n'')
###         ("_idts" ("_position" sid)
###           ("_idts" ("_position" pid)
###             ("_idts" ("_position" E)
###               ("_idts" ("_position" e) ("_position" m))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>pbactive" ("_position" pid)
###             ("_applC" ("_position" t) ("_position" n))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>pbactive" ("_position" sid)
###               ("_applC" ("_position" t) ("_position" n))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" sub) ("_position" E))
###                 ("_applC" ("_position" sbsb)
###                   ("\<^fixed>pbcmp" ("_position" sid)
###                     ("_applC" ("_position" t) ("_position" n))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Orderings.ord_class.greater_eq" ("_position" n'')
###                   ("_position" n)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member" ("_position" e) ("_position" E)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("_Not_Ex" ("_idts" ("_position" n') ("_position" E'))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>Orderings.ord_class.greater_eq"
###                           ("_position" n') ("_position" n))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>Orderings.ord_class.less_eq"
###                             ("_position" n') ("_position" n''))
###                           ("\<^const>HOL.conj"
###                             ("\<^fixed>sbactive" ("_position" sid)
###                               ("_applC" ("_position" t) ("_position" n')))
###                             ("\<^const>HOL.conj"
###                               ("\<^const>HOL.eq"
###                                 ("_applC" ("_position" unsub)
###                                   ("_position" E'))
###                                 ("_applC" ("_position" sbsb)
###                                   ("\<^fixed>pbcmp" ("_position" sid)
###                                     ("_applC" ("_position" t)
### ("_position" n')))))
###                               ("\<^const>Set.member" ("_position" e)
###                                 ("_position" E'))))))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq"
###                         ("_tuple" ("_position" e)
###                           ("_tuple_arg" ("_position" m)))
###                         ("_applC" ("_position" pbnt)
###                           ("\<^fixed>pbcmp" ("_position" pid)
###                             ("_applC" ("_position" t) ("_position" n''))))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^fixed>pbactive" ("_position" sid)
###                           ("_applC" ("_position" t)
###                             ("_position" n'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" pbnt)
###           ("\<^fixed>sbcmp" ("_position" pid)
###             ("_applC" ("_position" t) ("_position" n''))))
###         ("_applC" ("_position" sbnt)
###           ("\<^fixed>sbcmp" ("_position" sid)
###             ("_applC" ("_position" t) ("_position" n''))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" n)
###       ("_idts" ("_position" n'')
###         ("_idts" ("_position" sid)
###           ("_idts" ("_position" pid)
###             ("_idts" ("_position" E)
###               ("_idts" ("_position" e) ("_position" m))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>sbactive" ("_position" pid)
###             ("_applC" ("_position" t) ("_position" n))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>pbactive" ("_position" sid)
###               ("_applC" ("_position" t) ("_position" n))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" sub) ("_position" E))
###                 ("_applC" ("_position" sbsb)
###                   ("\<^fixed>pbcmp" ("_position" sid)
###                     ("_applC" ("_position" t) ("_position" n))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Orderings.ord_class.greater_eq" ("_position" n'')
###                   ("_position" n)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member" ("_position" e) ("_position" E)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("_Not_Ex" ("_idts" ("_position" n') ("_position" E'))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>Orderings.ord_class.greater_eq"
###                           ("_position" n') ("_position" n))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>Orderings.ord_class.less_eq"
###                             ("_position" n') ("_position" n''))
###                           ("\<^const>HOL.conj"
###                             ("\<^fixed>sbactive" ("_position" sid)
###                               ("_applC" ("_position" t) ("_position" n')))
###                             ("\<^const>HOL.conj"
###                               ("\<^const>HOL.eq"
###                                 ("_applC" ("_position" unsub)
###                                   ("_position" E'))
###                                 ("_applC" ("_position" sbsb)
###                                   ("\<^fixed>pbcmp" ("_position" sid)
###                                     ("_applC" ("_position" t)
### ("_position" n')))))
###                               ("\<^const>Set.member" ("_position" e)
###                                 ("_position" E'))))))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq"
###                         ("_tuple" ("_position" e)
###                           ("_tuple_arg" ("_position" m)))
###                         ("_applC" ("_position" pbnt)
###                           ("\<^fixed>pbcmp" ("_position" pid)
###                             ("_applC" ("_position" t) ("_position" n''))))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^fixed>pbactive" ("_position" sid)
###                           ("_applC" ("_position" t)
###                             ("_position" n'')))))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" pbnt)
###           ("\<^fixed>sbcmp" ("_position" pid)
###             ("_applC" ("_position" t) ("_position" n''))))
###         ("_applC" ("_position" sbnt)
###           ("\<^fixed>sbcmp" ("_position" sid)
###             ("_applC" ("_position" t) ("_position" n''))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale publisher_subscriber
  fixes
    pbactive :: "'pid => cnf => bool"
      (\<open>\<parallel>_\<parallel>\<^bsub>_\<^esub>\<close> [0, 110] 60)
    and
    pbcmp :: "'pid => cnf => 'PB"
      (\<open>\<sigma>\<^bsub>_\<^esub>(_)\<close> [0, 110] 60)
    and
    sbactive :: "'sid => cnf => bool"
      (\<open>\<parallel>_\<parallel>\<^bsub>_\<^esub>\<close> [0, 110] 60)
    and
    sbcmp :: "'sid => cnf => 'SB"
      (\<open>\<sigma>\<^bsub>_\<^esub>(_)\<close> [0, 110] 60)
    and pbsb :: "'PB => 'evt set subscription set"
    and pbnt :: "'PB => 'evt * 'msg"
    and sbnt :: "'SB => ('evt * 'msg) set"
    and sbsb :: "'SB => 'evt set subscription"
  assumes
    "publisher_subscriber pbactive pbcmp sbactive sbcmp pbsb pbnt sbnt sbsb"
### Ambiguous input (line 70 of "$AFP/Architectural_Design_Patterns/Publisher_Subscriber.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>sbactive" ("_position" sid)
###     ("_applC" ("_position" t) ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>pbactive" ("_position" sid)
###     ("_applC" ("_position" t) ("_position" n))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 71 of "$AFP/Architectural_Design_Patterns/Publisher_Subscriber.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" sub) ("_position" E))
###     ("_applC" ("_position" sbsb)
###       ("\<^fixed>sbcmp" ("_position" sid)
###         ("_applC" ("_position" t) ("_position" n))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" sub) ("_position" E))
###     ("_applC" ("_position" sbsb)
###       ("\<^fixed>pbcmp" ("_position" sid)
###         ("_applC" ("_position" t) ("_position" n))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 73 of "$AFP/Architectural_Design_Patterns/Publisher_Subscriber.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_Not_Ex" ("_idts" ("_position" n') ("_position" E'))
###     ("\<^const>HOL.conj"
###       ("\<^const>Orderings.ord_class.greater_eq" ("_position" n')
###         ("_position" n))
###       ("\<^const>HOL.conj"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" n')
###           ("_position" n''))
###         ("\<^const>HOL.conj"
###           ("\<^fixed>sbactive" ("_position" sid)
###             ("_applC" ("_position" t) ("_position" n')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" unsub) ("_position" E'))
###               ("_applC" ("_position" sbsb)
###                 ("\<^fixed>sbcmp" ("_position" sid)
###                   ("_applC" ("_position" t) ("_position" n')))))
###             ("\<^const>Set.member" ("_position" e) ("_position" E'))))))))
### ("\<^const>HOL.Trueprop"
###   ("_Not_Ex" ("_idts" ("_position" n') ("_position" E'))
###     ("\<^const>HOL.conj"
###       ("\<^const>Orderings.ord_class.greater_eq" ("_position" n')
###         ("_position" n))
###       ("\<^const>HOL.conj"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" n')
###           ("_position" n''))
###         ("\<^const>HOL.conj"
###           ("\<^fixed>pbactive" ("_position" sid)
###             ("_applC" ("_position" t) ("_position" n')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" unsub) ("_position" E'))
###               ("_applC" ("_position" sbsb)
###                 ("\<^fixed>sbcmp" ("_position" sid)
###                   ("_applC" ("_position" t) ("_position" n')))))
###             ("\<^const>Set.member" ("_position" e) ("_position" E'))))))))
### ("\<^const>HOL.Trueprop"
###   ("_Not_Ex" ("_idts" ("_position" n') ("_position" E'))
###     ("\<^const>HOL.conj"
###       ("\<^const>Orderings.ord_class.greater_eq" ("_position" n')
###         ("_position" n))
###       ("\<^const>HOL.conj"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" n')
###           ("_position" n''))
###         ("\<^const>HOL.conj"
###           ("\<^fixed>sbactive" ("_position" sid)
###             ("_applC" ("_position" t) ("_position" n')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" unsub) ("_position" E'))
###               ("_applC" ("_position" sbsb)
###                 ("\<^fixed>pbcmp" ("_position" sid)
###                   ("_applC" ("_position" t) ("_position" n')))))
###             ("\<^const>Set.member" ("_position" e) ("_position" E'))))))))
### ("\<^const>HOL.Trueprop"
###   ("_Not_Ex" ("_idts" ("_position" n') ("_position" E'))
###     ("\<^const>HOL.conj"
###       ("\<^const>Orderings.ord_class.greater_eq" ("_position" n')
###         ("_position" n))
###       ("\<^const>HOL.conj"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" n')
###           ("_position" n''))
###         ("\<^const>HOL.conj"
###           ("\<^fixed>pbactive" ("_position" sid)
###             ("_applC" ("_position" t) ("_position" n')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" unsub) ("_position" E'))
###               ("_applC" ("_position" sbsb)
###                 ("\<^fixed>pbcmp" ("_position" sid)
###                   ("_applC" ("_position" t) ("_position" n')))))
###             ("\<^const>Set.member" ("_position" e) ("_position" E'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 76 of "$AFP/Architectural_Design_Patterns/Publisher_Subscriber.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_tuple" ("_position" e) ("_tuple_arg" ("_position" m)))
###     ("_applC" ("_position" pbnt)
###       ("\<^fixed>sbcmp" ("_position" the_pb)
###         ("_applC" ("_position" t) ("_position" n''))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_tuple" ("_position" e) ("_tuple_arg" ("_position" m)))
###     ("_applC" ("_position" pbnt)
###       ("\<^fixed>pbcmp" ("_position" the_pb)
###         ("_applC" ("_position" t) ("_position" n''))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 77 of "$AFP/Architectural_Design_Patterns/Publisher_Subscriber.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>sbactive" ("_position" sid)
###     ("_applC" ("_position" t) ("_position" n''))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>pbactive" ("_position" sid)
###     ("_applC" ("_position" t) ("_position" n''))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 78 of "$AFP/Architectural_Design_Patterns/Publisher_Subscriber.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" e) ("_tuple_arg" ("_position" m)))
###     ("_applC" ("_position" sbnt)
###       ("\<^fixed>sbcmp" ("_position" sid)
###         ("_applC" ("_position" t) ("_position" n''))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" e) ("_tuple_arg" ("_position" m)))
###     ("_applC" ("_position" sbnt)
###       ("\<^fixed>pbcmp" ("_position" sid)
###         ("_applC" ("_position" t) ("_position" n''))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 86 of "$AFP/Architectural_Design_Patterns/Publisher_Subscriber.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" pbsb)
###       ("\<^fixed>sbcmp" ("_position" the_pb) ("_position" k)))
###     ("_UNION" ("_position" sid)
###       ("_Coll" ("_position" sid)
###         ("\<^fixed>sbactive" ("_position" sid) ("_position" k)))
###       ("_Finset"
###         ("_applC" ("_position" sbsb)
###           ("\<^fixed>sbcmp" ("_position" sid) ("_position" k)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" pbsb)
###       ("\<^fixed>pbcmp" ("_position" the_pb) ("_position" k)))
###     ("_UNION" ("_position" sid)
###       ("_Coll" ("_position" sid)
###         ("\<^fixed>sbactive" ("_position" sid) ("_position" k)))
###       ("_Finset"
###         ("_applC" ("_position" sbsb)
###           ("\<^fixed>sbcmp" ("_position" sid) ("_position" k)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" pbsb)
###       ("\<^fixed>sbcmp" ("_position" the_pb) ("_position" k)))
###     ("_UNION" ("_position" sid)
###       ("_Coll" ("_position" sid)
###         ("\<^fixed>pbactive" ("_position" sid) ("_position" k)))
###       ("_Finset"
###         ("_applC" ("_position" sbsb)
###           ("\<^fixed>sbcmp" ("_position" sid) ("_position" k)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" pbsb)
###       ("\<^fixed>pbcmp" ("_position" the_pb) ("_position" k)))
###     ("_UNION" ("_position" sid)
###       ("_Coll" ("_position" sid)
###         ("\<^fixed>pbactive" ("_position" sid) ("_position" k)))
###       ("_Finset"
###         ("_applC" ("_position" sbsb)
###           ("\<^fixed>sbcmp" ("_position" sid) ("_position" k)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" pbsb)
###       ("\<^fixed>sbcmp" ("_position" the_pb) ("_position" k)))
###     ("_UNION" ("_position" sid)
###       ("_Coll" ("_position" sid)
###         ("\<^fixed>sbactive" ("_position" sid) ("_position" k)))
###       ("_Finset"
###         ("_applC" ("_position" sbsb)
###           ("\<^fixed>pbcmp" ("_position" sid) ("_position" k)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" pbsb)
###       ("\<^fixed>pbcmp" ("_position" the_pb) ("_position" k)))
###     ("_UNION" ("_position" sid)
###       ("_Coll" ("_position" sid)
###         ("\<^fixed>sbactive" ("_position" sid) ("_position" k)))
###       ("_Finset"
###         ("_applC" ("_position" sbsb)
###           ("\<^fixed>pbcmp" ("_position" sid) ("_position" k)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" pbsb)
###       ("\<^fixed>sbcmp" ("_position" the_pb) ("_position" k)))
###     ("_UNION" ("_position" sid)
###       ("_Coll" ("_position" sid)
###         ("\<^fixed>pbactive" ("_position" sid) ("_position" k)))
###       ("_Finset"
###         ("_applC" ("_position" sbsb)
###           ("\<^fixed>pbcmp" ("_position" sid) ("_position" k)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" pbsb)
###       ("\<^fixed>pbcmp" ("_position" the_pb) ("_position" k)))
###     ("_UNION" ("_position" sid)
###       ("_Coll" ("_position" sid)
###         ("\<^fixed>pbactive" ("_position" sid) ("_position" k)))
###       ("_Finset"
###         ("_applC" ("_position" sbsb)
###           ("\<^fixed>pbcmp" ("_position" sid) ("_position" k)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Publisher_Subscriber"
### 1.272s elapsed time, 2.074s cpu time, 0.413s GC time
Loading theory "Draft.Blackboard" (required by "Draft.BlackboardMoreTemplates")
### Ambiguous input (line 45 of "$AFP/Architectural_Design_Patterns/Blackboard.thy") produces 32 parse trees (10 displayed):
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" bId)
###         ("_idts" ("_position" p) ("_position" s)))))
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pb.eval)
###         ("_cargs" ("_position" bId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.sb.glob"
###                   ("\<^const>local.sb.imp"
###                     ("\<^const>local.sb.ba"
###                       ("_lambda" ("_position" bb)
###                         ("\<^const>Set.member"
###                           ("_tuple" ("_position" p)
###                             ("_tuple_arg" ("_position" s)))
###                           ("_applC" ("_position" bbns) ("_position" bb)))))
###                     ("\<^const>local.sb.evt"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" bb)
###                           ("\<^const>HOL.eq"
###                             ("_tuple" ("_position" p)
###                               ("_tuple_arg" ("_position" s)))
###                             ("_applC" ("_position" bbcs)
###                               ("_position" bb))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" bId)
###         ("_idts" ("_position" p) ("_position" s)))))
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pb.eval)
###         ("_cargs" ("_position" bId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.pb.glob"
###                   ("\<^const>local.sb.imp"
###                     ("\<^const>local.sb.ba"
###                       ("_lambda" ("_position" bb)
###                         ("\<^const>Set.member"
###                           ("_tuple" ("_position" p)
###                             ("_tuple_arg" ("_position" s)))
###                           ("_applC" ("_position" bbns) ("_position" bb)))))
###                     ("\<^const>local.sb.evt"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" bb)
###                           ("\<^const>HOL.eq"
###                             ("_tuple" ("_position" p)
###                               ("_tuple_arg" ("_position" s)))
###                             ("_applC" ("_position" bbcs)
###                               ("_position" bb))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" bId)
###         ("_idts" ("_position" p) ("_position" s)))))
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pb.eval)
###         ("_cargs" ("_position" bId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.sb.glob"
###                   ("\<^const>local.pb.imp"
###                     ("\<^const>local.sb.ba"
###                       ("_lambda" ("_position" bb)
###                         ("\<^const>Set.member"
###                           ("_tuple" ("_position" p)
###                             ("_tuple_arg" ("_position" s)))
###                           ("_applC" ("_position" bbns) ("_position" bb)))))
###                     ("\<^const>local.sb.evt"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" bb)
###                           ("\<^const>HOL.eq"
###                             ("_tuple" ("_position" p)
###                               ("_tuple_arg" ("_position" s)))
###                             ("_applC" ("_position" bbcs)
###                               ("_position" bb))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" bId)
###         ("_idts" ("_position" p) ("_position" s)))))
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pb.eval)
###         ("_cargs" ("_position" bId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.pb.glob"
###                   ("\<^const>local.pb.imp"
###                     ("\<^const>local.sb.ba"
###                       ("_lambda" ("_position" bb)
###                         ("\<^const>Set.member"
###                           ("_tuple" ("_position" p)
###                             ("_tuple_arg" ("_position" s)))
###                           ("_applC" ("_position" bbns) ("_position" bb)))))
###                     ("\<^const>local.sb.evt"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" bb)
###                           ("\<^const>HOL.eq"
###                             ("_tuple" ("_position" p)
###                               ("_tuple_arg" ("_position" s)))
###                             ("_applC" ("_position" bbcs)
###                               ("_position" bb))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" bId)
###         ("_idts" ("_position" p) ("_position" s)))))
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pb.eval)
###         ("_cargs" ("_position" bId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.sb.glob"
###                   ("\<^const>local.sb.imp"
###                     ("\<^const>local.pb.ba"
###                       ("_lambda" ("_position" bb)
###                         ("\<^const>Set.member"
###                           ("_tuple" ("_position" p)
###                             ("_tuple_arg" ("_position" s)))
###                           ("_applC" ("_position" bbns) ("_position" bb)))))
###                     ("\<^const>local.sb.evt"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" bb)
###                           ("\<^const>HOL.eq"
###                             ("_tuple" ("_position" p)
###                               ("_tuple_arg" ("_position" s)))
###                             ("_applC" ("_position" bbcs)
###                               ("_position" bb))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" bId)
###         ("_idts" ("_position" p) ("_position" s)))))
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pb.eval)
###         ("_cargs" ("_position" bId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.pb.glob"
###                   ("\<^const>local.sb.imp"
###                     ("\<^const>local.pb.ba"
###                       ("_lambda" ("_position" bb)
###                         ("\<^const>Set.member"
###                           ("_tuple" ("_position" p)
###                             ("_tuple_arg" ("_position" s)))
###                           ("_applC" ("_position" bbns) ("_position" bb)))))
###                     ("\<^const>local.sb.evt"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" bb)
###                           ("\<^const>HOL.eq"
###                             ("_tuple" ("_position" p)
###                               ("_tuple_arg" ("_position" s)))
###                             ("_applC" ("_position" bbcs)
###                               ("_position" bb))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" bId)
###         ("_idts" ("_position" p) ("_position" s)))))
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pb.eval)
###         ("_cargs" ("_position" bId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.sb.glob"
###                   ("\<^const>local.pb.imp"
###                     ("\<^const>local.pb.ba"
###                       ("_lambda" ("_position" bb)
###                         ("\<^const>Set.member"
###                           ("_tuple" ("_position" p)
###                             ("_tuple_arg" ("_position" s)))
###                           ("_applC" ("_position" bbns) ("_position" bb)))))
###                     ("\<^const>local.sb.evt"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" bb)
###                           ("\<^const>HOL.eq"
###                             ("_tuple" ("_position" p)
###                               ("_tuple_arg" ("_position" s)))
###                             ("_applC" ("_position" bbcs)
###                               ("_position" bb))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" bId)
###         ("_idts" ("_position" p) ("_position" s)))))
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pb.eval)
###         ("_cargs" ("_position" bId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.pb.glob"
###                   ("\<^const>local.pb.imp"
###                     ("\<^const>local.pb.ba"
###                       ("_lambda" ("_position" bb)
###                         ("\<^const>Set.member"
###                           ("_tuple" ("_position" p)
###                             ("_tuple_arg" ("_position" s)))
###                           ("_applC" ("_position" bbns) ("_position" bb)))))
###                     ("\<^const>local.sb.evt"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" bb)
###                           ("\<^const>HOL.eq"
###                             ("_tuple" ("_position" p)
###                               ("_tuple_arg" ("_position" s)))
###                             ("_applC" ("_position" bbcs)
###                               ("_position" bb))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" bId)
###         ("_idts" ("_position" p) ("_position" s)))))
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pb.eval)
###         ("_cargs" ("_position" bId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.sb.glob"
###                   ("\<^const>local.sb.imp"
###                     ("\<^const>local.sb.ba"
###                       ("_lambda" ("_position" bb)
###                         ("\<^const>Set.member"
###                           ("_tuple" ("_position" p)
###                             ("_tuple_arg" ("_position" s)))
###                           ("_applC" ("_position" bbns) ("_position" bb)))))
###                     ("\<^const>local.pb.evt"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" bb)
###                           ("\<^const>HOL.eq"
###                             ("_tuple" ("_position" p)
###                               ("_tuple_arg" ("_position" s)))
###                             ("_applC" ("_position" bbcs)
###                               ("_position" bb))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" bId)
###         ("_idts" ("_position" p) ("_position" s)))))
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pb.eval)
###         ("_cargs" ("_position" bId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.pb.glob"
###                   ("\<^const>local.sb.imp"
###                     ("\<^const>local.sb.ba"
###                       ("_lambda" ("_position" bb)
###                         ("\<^const>Set.member"
###                           ("_tuple" ("_position" p)
###                             ("_tuple_arg" ("_position" s)))
###                           ("_applC" ("_position" bbns) ("_position" bb)))))
###                     ("\<^const>local.pb.evt"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" bb)
###                           ("\<^const>HOL.eq"
###                             ("_tuple" ("_position" p)
###                               ("_tuple_arg" ("_position" s)))
###                             ("_applC" ("_position" bbcs)
###                               ("_position" bb))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 48 of "$AFP/Architectural_Design_Patterns/Blackboard.thy") produces 32 parse trees (10 displayed):
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" bId)
###         ("_idts" ("_position" P) ("_position" q)))))
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pb.eval)
###         ("_cargs" ("_position" bId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.sb.glob"
###                   ("\<^const>local.sb.imp"
###                     ("\<^const>local.sb.ba"
###                       ("_lambda" ("_position" bb)
###                         ("\<^const>HOL.conj"
###                           ("\<^const>Set.member"
###                             ("_applC" ("_position" sub) ("_position" P))
###                             ("_applC" ("_position" bbrp) ("_position" bb)))
###                           ("\<^const>Set.member" ("_position" q)
###                             ("_position" P)))))
###                     ("\<^const>local.sb.evt"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" bb)
###                           ("\<^const>HOL.eq" ("_position" q)
###                             ("_applC" ("_position" bbop)
###                               ("_position" bb))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" bId)
###         ("_idts" ("_position" P) ("_position" q)))))
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pb.eval)
###         ("_cargs" ("_position" bId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.pb.glob"
###                   ("\<^const>local.sb.imp"
###                     ("\<^const>local.sb.ba"
###                       ("_lambda" ("_position" bb)
###                         ("\<^const>HOL.conj"
###                           ("\<^const>Set.member"
###                             ("_applC" ("_position" sub) ("_position" P))
###                             ("_applC" ("_position" bbrp) ("_position" bb)))
###                           ("\<^const>Set.member" ("_position" q)
###                             ("_position" P)))))
###                     ("\<^const>local.sb.evt"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" bb)
###                           ("\<^const>HOL.eq" ("_position" q)
###                             ("_applC" ("_position" bbop)
###                               ("_position" bb))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" bId)
###         ("_idts" ("_position" P) ("_position" q)))))
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pb.eval)
###         ("_cargs" ("_position" bId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.sb.glob"
###                   ("\<^const>local.pb.imp"
###                     ("\<^const>local.sb.ba"
###                       ("_lambda" ("_position" bb)
###                         ("\<^const>HOL.conj"
###                           ("\<^const>Set.member"
###                             ("_applC" ("_position" sub) ("_position" P))
###                             ("_applC" ("_position" bbrp) ("_position" bb)))
###                           ("\<^const>Set.member" ("_position" q)
###                             ("_position" P)))))
###                     ("\<^const>local.sb.evt"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" bb)
###                           ("\<^const>HOL.eq" ("_position" q)
###                             ("_applC" ("_position" bbop)
###                               ("_position" bb))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" bId)
###         ("_idts" ("_position" P) ("_position" q)))))
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pb.eval)
###         ("_cargs" ("_position" bId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.pb.glob"
###                   ("\<^const>local.pb.imp"
###                     ("\<^const>local.sb.ba"
###                       ("_lambda" ("_position" bb)
###                         ("\<^const>HOL.conj"
###                           ("\<^const>Set.member"
###                             ("_applC" ("_position" sub) ("_position" P))
###                             ("_applC" ("_position" bbrp) ("_position" bb)))
###                           ("\<^const>Set.member" ("_position" q)
###                             ("_position" P)))))
###                     ("\<^const>local.sb.evt"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" bb)
###                           ("\<^const>HOL.eq" ("_position" q)
###                             ("_applC" ("_position" bbop)
###                               ("_position" bb))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" bId)
###         ("_idts" ("_position" P) ("_position" q)))))
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pb.eval)
###         ("_cargs" ("_position" bId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.sb.glob"
###                   ("\<^const>local.sb.imp"
###                     ("\<^const>local.pb.ba"
###                       ("_lambda" ("_position" bb)
###                         ("\<^const>HOL.conj"
###                           ("\<^const>Set.member"
###                             ("_applC" ("_position" sub) ("_position" P))
###                             ("_applC" ("_position" bbrp) ("_position" bb)))
###                           ("\<^const>Set.member" ("_position" q)
###                             ("_position" P)))))
###                     ("\<^const>local.sb.evt"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" bb)
###                           ("\<^const>HOL.eq" ("_position" q)
###                             ("_applC" ("_position" bbop)
###                               ("_position" bb))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" bId)
###         ("_idts" ("_position" P) ("_position" q)))))
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pb.eval)
###         ("_cargs" ("_position" bId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.pb.glob"
###                   ("\<^const>local.sb.imp"
###                     ("\<^const>local.pb.ba"
###                       ("_lambda" ("_position" bb)
###                         ("\<^const>HOL.conj"
###                           ("\<^const>Set.member"
###                             ("_applC" ("_position" sub) ("_position" P))
###                             ("_applC" ("_position" bbrp) ("_position" bb)))
###                           ("\<^const>Set.member" ("_position" q)
###                             ("_position" P)))))
###                     ("\<^const>local.sb.evt"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" bb)
###                           ("\<^const>HOL.eq" ("_position" q)
###                             ("_applC" ("_position" bbop)
###                               ("_position" bb))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" bId)
###         ("_idts" ("_position" P) ("_position" q)))))
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pb.eval)
###         ("_cargs" ("_position" bId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.sb.glob"
###                   ("\<^const>local.pb.imp"
###                     ("\<^const>local.pb.ba"
###                       ("_lambda" ("_position" bb)
###                         ("\<^const>HOL.conj"
###                           ("\<^const>Set.member"
###                             ("_applC" ("_position" sub) ("_position" P))
###                             ("_applC" ("_position" bbrp) ("_position" bb)))
###                           ("\<^const>Set.member" ("_position" q)
###                             ("_position" P)))))
###                     ("\<^const>local.sb.evt"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" bb)
###                           ("\<^const>HOL.eq" ("_position" q)
###                             ("_applC" ("_position" bbop)
###                               ("_position" bb))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" bId)
###         ("_idts" ("_position" P) ("_position" q)))))
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pb.eval)
###         ("_cargs" ("_position" bId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.pb.glob"
###                   ("\<^const>local.pb.imp"
###                     ("\<^const>local.pb.ba"
###                       ("_lambda" ("_position" bb)
###                         ("\<^const>HOL.conj"
###                           ("\<^const>Set.member"
###                             ("_applC" ("_position" sub) ("_position" P))
###                             ("_applC" ("_position" bbrp) ("_position" bb)))
###                           ("\<^const>Set.member" ("_position" q)
###                             ("_position" P)))))
###                     ("\<^const>local.sb.evt"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" bb)
###                           ("\<^const>HOL.eq" ("_position" q)
###                             ("_applC" ("_position" bbop)
###                               ("_position" bb))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" bId)
###         ("_idts" ("_position" P) ("_position" q)))))
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pb.eval)
###         ("_cargs" ("_position" bId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.sb.glob"
###                   ("\<^const>local.sb.imp"
###                     ("\<^const>local.sb.ba"
###                       ("_lambda" ("_position" bb)
###                         ("\<^const>HOL.conj"
###                           ("\<^const>Set.member"
###                             ("_applC" ("_position" sub) ("_position" P))
###                             ("_applC" ("_position" bbrp) ("_position" bb)))
###                           ("\<^const>Set.member" ("_position" q)
###                             ("_position" P)))))
###                     ("\<^const>local.pb.evt"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" bb)
###                           ("\<^const>HOL.eq" ("_position" q)
###                             ("_applC" ("_position" bbop)
###                               ("_position" bb))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" bId)
###         ("_idts" ("_position" P) ("_position" q)))))
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pb.eval)
###         ("_cargs" ("_position" bId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.pb.glob"
###                   ("\<^const>local.sb.imp"
###                     ("\<^const>local.sb.ba"
###                       ("_lambda" ("_position" bb)
###                         ("\<^const>HOL.conj"
###                           ("\<^const>Set.member"
###                             ("_applC" ("_position" sub) ("_position" P))
###                             ("_applC" ("_position" bbrp) ("_position" bb)))
###                           ("\<^const>Set.member" ("_position" q)
###                             ("_position" P)))))
###                     ("\<^const>local.pb.evt"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" bb)
###                           ("\<^const>HOL.eq" ("_position" q)
###                             ("_applC" ("_position" bbop)
###                               ("_position" bb))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 51 of "$AFP/Architectural_Design_Patterns/Blackboard.thy") produces 64 parse trees (10 displayed):
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t') ("_idts" ("_position" bId) ("_position" p))))
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pb.eval)
###         ("_cargs" ("_position" bId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.sb.glob"
###                   ("\<^const>local.sb.imp"
###                     ("\<^const>local.sb.ba"
###                       ("_lambda" ("_position" bb)
###                         ("\<^const>HOL.eq" ("_position" p)
###                           ("_applC" ("_position" bbop) ("_position" bb)))))
###                     ("\<^const>local.pb.wuntil"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" bb)
###                           ("\<^const>HOL.eq" ("_position" p)
###                             ("_applC" ("_position" bbop)
###                               ("_position" bb)))))
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" bb)
###                           ("\<^const>HOL.eq"
###                             ("_tuple" ("_position" p)
###                               ("_tuple_arg"
###                                 ("_applC" ("_position" solve)
###                                   ("_position" p))))
###                             ("_applC" ("_position" bbcs)
###                               ("_position" bb))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t') ("_idts" ("_position" bId) ("_position" p))))
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pb.eval)
###         ("_cargs" ("_position" bId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.pb.glob"
###                   ("\<^const>local.sb.imp"
###                     ("\<^const>local.sb.ba"
###                       ("_lambda" ("_position" bb)
###                         ("\<^const>HOL.eq" ("_position" p)
###                           ("_applC" ("_position" bbop) ("_position" bb)))))
###                     ("\<^const>local.pb.wuntil"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" bb)
###                           ("\<^const>HOL.eq" ("_position" p)
###                             ("_applC" ("_position" bbop)
###                               ("_position" bb)))))
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" bb)
###                           ("\<^const>HOL.eq"
###                             ("_tuple" ("_position" p)
###                               ("_tuple_arg"
###                                 ("_applC" ("_position" solve)
###                                   ("_position" p))))
###                             ("_applC" ("_position" bbcs)
###                               ("_position" bb))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t') ("_idts" ("_position" bId) ("_position" p))))
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pb.eval)
###         ("_cargs" ("_position" bId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.sb.glob"
###                   ("\<^const>local.pb.imp"
###                     ("\<^const>local.sb.ba"
###                       ("_lambda" ("_position" bb)
###                         ("\<^const>HOL.eq" ("_position" p)
###                           ("_applC" ("_position" bbop) ("_position" bb)))))
###                     ("\<^const>local.pb.wuntil"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" bb)
###                           ("\<^const>HOL.eq" ("_position" p)
###                             ("_applC" ("_position" bbop)
###                               ("_position" bb)))))
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" bb)
###                           ("\<^const>HOL.eq"
###                             ("_tuple" ("_position" p)
###                               ("_tuple_arg"
###                                 ("_applC" ("_position" solve)
###                                   ("_position" p))))
###                             ("_applC" ("_position" bbcs)
###                               ("_position" bb))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t') ("_idts" ("_position" bId) ("_position" p))))
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pb.eval)
###         ("_cargs" ("_position" bId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.pb.glob"
###                   ("\<^const>local.pb.imp"
###                     ("\<^const>local.sb.ba"
###                       ("_lambda" ("_position" bb)
###                         ("\<^const>HOL.eq" ("_position" p)
###                           ("_applC" ("_position" bbop) ("_position" bb)))))
###                     ("\<^const>local.pb.wuntil"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" bb)
###                           ("\<^const>HOL.eq" ("_position" p)
###                             ("_applC" ("_position" bbop)
###                               ("_position" bb)))))
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" bb)
###                           ("\<^const>HOL.eq"
###                             ("_tuple" ("_position" p)
###                               ("_tuple_arg"
###                                 ("_applC" ("_position" solve)
###                                   ("_position" p))))
###                             ("_applC" ("_position" bbcs)
###                               ("_position" bb))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t') ("_idts" ("_position" bId) ("_position" p))))
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pb.eval)
###         ("_cargs" ("_position" bId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.sb.glob"
###                   ("\<^const>local.sb.imp"
###                     ("\<^const>local.pb.ba"
###                       ("_lambda" ("_position" bb)
###                         ("\<^const>HOL.eq" ("_position" p)
###                           ("_applC" ("_position" bbop) ("_position" bb)))))
###                     ("\<^const>local.pb.wuntil"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" bb)
###                           ("\<^const>HOL.eq" ("_position" p)
###                             ("_applC" ("_position" bbop)
###                               ("_position" bb)))))
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" bb)
###                           ("\<^const>HOL.eq"
###                             ("_tuple" ("_position" p)
###                               ("_tuple_arg"
###                                 ("_applC" ("_position" solve)
###                                   ("_position" p))))
###                             ("_applC" ("_position" bbcs)
###                               ("_position" bb))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t') ("_idts" ("_position" bId) ("_position" p))))
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pb.eval)
###         ("_cargs" ("_position" bId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.pb.glob"
###                   ("\<^const>local.sb.imp"
###                     ("\<^const>local.pb.ba"
###                       ("_lambda" ("_position" bb)
###                         ("\<^const>HOL.eq" ("_position" p)
###                           ("_applC" ("_position" bbop) ("_position" bb)))))
###                     ("\<^const>local.pb.wuntil"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" bb)
###                           ("\<^const>HOL.eq" ("_position" p)
###                             ("_applC" ("_position" bbop)
###                               ("_position" bb)))))
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" bb)
###                           ("\<^const>HOL.eq"
###                             ("_tuple" ("_position" p)
###                               ("_tuple_arg"
###                                 ("_applC" ("_position" solve)
###                                   ("_position" p))))
###                             ("_applC" ("_position" bbcs)
###                               ("_position" bb))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t') ("_idts" ("_position" bId) ("_position" p))))
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pb.eval)
###         ("_cargs" ("_position" bId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.sb.glob"
###                   ("\<^const>local.pb.imp"
###                     ("\<^const>local.pb.ba"
###                       ("_lambda" ("_position" bb)
###                         ("\<^const>HOL.eq" ("_position" p)
###                           ("_applC" ("_position" bbop) ("_position" bb)))))
###                     ("\<^const>local.pb.wuntil"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" bb)
###                           ("\<^const>HOL.eq" ("_position" p)
###                             ("_applC" ("_position" bbop)
###                               ("_position" bb)))))
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" bb)
###                           ("\<^const>HOL.eq"
###                             ("_tuple" ("_position" p)
###                               ("_tuple_arg"
###                                 ("_applC" ("_position" solve)
###                                   ("_position" p))))
###                             ("_applC" ("_position" bbcs)
###                               ("_position" bb))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t') ("_idts" ("_position" bId) ("_position" p))))
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pb.eval)
###         ("_cargs" ("_position" bId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.pb.glob"
###                   ("\<^const>local.pb.imp"
###                     ("\<^const>local.pb.ba"
###                       ("_lambda" ("_position" bb)
###                         ("\<^const>HOL.eq" ("_position" p)
###                           ("_applC" ("_position" bbop) ("_position" bb)))))
###                     ("\<^const>local.pb.wuntil"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" bb)
###                           ("\<^const>HOL.eq" ("_position" p)
###                             ("_applC" ("_position" bbop)
###                               ("_position" bb)))))
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" bb)
###                           ("\<^const>HOL.eq"
###                             ("_tuple" ("_position" p)
###                               ("_tuple_arg"
###                                 ("_applC" ("_position" solve)
###                                   ("_position" p))))
###                             ("_applC" ("_position" bbcs)
###                               ("_position" bb))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t') ("_idts" ("_position" bId) ("_position" p))))
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pb.eval)
###         ("_cargs" ("_position" bId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.sb.glob"
###                   ("\<^const>local.sb.imp"
###                     ("\<^const>local.sb.ba"
###                       ("_lambda" ("_position" bb)
###                         ("\<^const>HOL.eq" ("_position" p)
###                           ("_applC" ("_position" bbop) ("_position" bb)))))
###                     ("\<^const>local.sb.wuntil"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" bb)
###                           ("\<^const>HOL.eq" ("_position" p)
###                             ("_applC" ("_position" bbop)
###                               ("_position" bb)))))
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" bb)
###                           ("\<^const>HOL.eq"
###                             ("_tuple" ("_position" p)
###                               ("_tuple_arg"
###                                 ("_applC" ("_position" solve)
###                                   ("_position" p))))
###                             ("_applC" ("_position" bbcs)
###                               ("_position" bb))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t') ("_idts" ("_position" bId) ("_position" p))))
###   ("_bigimpl"
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pb.eval)
###         ("_cargs" ("_position" bId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.pb.glob"
###                   ("\<^const>local.sb.imp"
###                     ("\<^const>local.sb.ba"
###                       ("_lambda" ("_position" bb)
###                         ("\<^const>HOL.eq" ("_position" p)
###                           ("_applC" ("_position" bbop) ("_position" bb)))))
###                     ("\<^const>local.sb.wuntil"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" bb)
###                           ("\<^const>HOL.eq" ("_position" p)
###                             ("_applC" ("_position" bbop)
###                               ("_position" bb)))))
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" bb)
###                           ("\<^const>HOL.eq"
###                             ("_tuple" ("_position" p)
###                               ("_tuple_arg"
###                                 ("_applC" ("_position" solve)
###                                   ("_position" p))))
###                             ("_applC" ("_position" bbcs)
###                               ("_position" bb))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 54 of "$AFP/Architectural_Design_Patterns/Blackboard.thy") produces 1024 parse trees (10 displayed):
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" kId)
###         ("_idts" ("_position" p) ("_position" P)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" p)
###             ("_applC" ("_position" prob) ("_position" kId))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" sb.eval)
###         ("_cargs" ("_position" kId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.sb.glob"
###                   ("\<^const>local.sb.imp"
###                     ("\<^const>local.sb.conj"
###                       ("\<^const>local.sb.ba"
###                         ("_lambda" ("_position" ks)
###                           ("\<^const>HOL.eq"
###                             ("_applC" ("_position" sub) ("_position" P))
###                             ("_applC" ("_position" ksrp)
###                               ("_position" ks)))))
###                       ("\<^const>local.sb.all_binder" ("_position" q)
###                         ("\<^const>local.sb.imp"
###                           ("_applC" ("_position" sb.pred)
###                             ("\<^const>Set.member" ("_position" q)
###                               ("_position" P)))
###                           ("\<^const>local.sb.evt"
###                             ("\<^const>local.sb.ba"
###                               ("_lambda" ("_position" ks)
###                                 ("\<^const>Set.member"
###                                   ("_tuple" ("_position" q)
###                                     ("_tuple_arg"
### ("_applC" ("_position" solve) ("_position" q))))
###                                   ("_applC" ("_position" kscs)
###                                     ("_position" ks)))))))))
###                     ("\<^const>local.sb.evt"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" ks)
###                           ("\<^const>HOL.eq"
###                             ("_tuple" ("_position" p)
###                               ("_tuple_arg"
###                                 ("_applC" ("_position" solve)
###                                   ("_position" p))))
###                             ("_applC" ("_position" ksns)
###                               ("_position" ks))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" kId)
###         ("_idts" ("_position" p) ("_position" P)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" p)
###             ("_applC" ("_position" prob) ("_position" kId))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" sb.eval)
###         ("_cargs" ("_position" kId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.pb.glob"
###                   ("\<^const>local.sb.imp"
###                     ("\<^const>local.sb.conj"
###                       ("\<^const>local.sb.ba"
###                         ("_lambda" ("_position" ks)
###                           ("\<^const>HOL.eq"
###                             ("_applC" ("_position" sub) ("_position" P))
###                             ("_applC" ("_position" ksrp)
###                               ("_position" ks)))))
###                       ("\<^const>local.sb.all_binder" ("_position" q)
###                         ("\<^const>local.sb.imp"
###                           ("_applC" ("_position" sb.pred)
###                             ("\<^const>Set.member" ("_position" q)
###                               ("_position" P)))
###                           ("\<^const>local.sb.evt"
###                             ("\<^const>local.sb.ba"
###                               ("_lambda" ("_position" ks)
###                                 ("\<^const>Set.member"
###                                   ("_tuple" ("_position" q)
###                                     ("_tuple_arg"
### ("_applC" ("_position" solve) ("_position" q))))
###                                   ("_applC" ("_position" kscs)
###                                     ("_position" ks)))))))))
###                     ("\<^const>local.sb.evt"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" ks)
###                           ("\<^const>HOL.eq"
###                             ("_tuple" ("_position" p)
###                               ("_tuple_arg"
###                                 ("_applC" ("_position" solve)
###                                   ("_position" p))))
###                             ("_applC" ("_position" ksns)
###                               ("_position" ks))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" kId)
###         ("_idts" ("_position" p) ("_position" P)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" p)
###             ("_applC" ("_position" prob) ("_position" kId))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" sb.eval)
###         ("_cargs" ("_position" kId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.sb.glob"
###                   ("\<^const>local.pb.imp"
###                     ("\<^const>local.sb.conj"
###                       ("\<^const>local.sb.ba"
###                         ("_lambda" ("_position" ks)
###                           ("\<^const>HOL.eq"
###                             ("_applC" ("_position" sub) ("_position" P))
###                             ("_applC" ("_position" ksrp)
###                               ("_position" ks)))))
###                       ("\<^const>local.sb.all_binder" ("_position" q)
###                         ("\<^const>local.sb.imp"
###                           ("_applC" ("_position" sb.pred)
###                             ("\<^const>Set.member" ("_position" q)
###                               ("_position" P)))
###                           ("\<^const>local.sb.evt"
###                             ("\<^const>local.sb.ba"
###                               ("_lambda" ("_position" ks)
###                                 ("\<^const>Set.member"
###                                   ("_tuple" ("_position" q)
###                                     ("_tuple_arg"
### ("_applC" ("_position" solve) ("_position" q))))
###                                   ("_applC" ("_position" kscs)
###                                     ("_position" ks)))))))))
###                     ("\<^const>local.sb.evt"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" ks)
###                           ("\<^const>HOL.eq"
###                             ("_tuple" ("_position" p)
###                               ("_tuple_arg"
###                                 ("_applC" ("_position" solve)
###                                   ("_position" p))))
###                             ("_applC" ("_position" ksns)
###                               ("_position" ks))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" kId)
###         ("_idts" ("_position" p) ("_position" P)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" p)
###             ("_applC" ("_position" prob) ("_position" kId))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" sb.eval)
###         ("_cargs" ("_position" kId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.pb.glob"
###                   ("\<^const>local.pb.imp"
###                     ("\<^const>local.sb.conj"
###                       ("\<^const>local.sb.ba"
###                         ("_lambda" ("_position" ks)
###                           ("\<^const>HOL.eq"
###                             ("_applC" ("_position" sub) ("_position" P))
###                             ("_applC" ("_position" ksrp)
###                               ("_position" ks)))))
###                       ("\<^const>local.sb.all_binder" ("_position" q)
###                         ("\<^const>local.sb.imp"
###                           ("_applC" ("_position" sb.pred)
###                             ("\<^const>Set.member" ("_position" q)
###                               ("_position" P)))
###                           ("\<^const>local.sb.evt"
###                             ("\<^const>local.sb.ba"
###                               ("_lambda" ("_position" ks)
###                                 ("\<^const>Set.member"
###                                   ("_tuple" ("_position" q)
###                                     ("_tuple_arg"
### ("_applC" ("_position" solve) ("_position" q))))
###                                   ("_applC" ("_position" kscs)
###                                     ("_position" ks)))))))))
###                     ("\<^const>local.sb.evt"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" ks)
###                           ("\<^const>HOL.eq"
###                             ("_tuple" ("_position" p)
###                               ("_tuple_arg"
###                                 ("_applC" ("_position" solve)
###                                   ("_position" p))))
###                             ("_applC" ("_position" ksns)
###                               ("_position" ks))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" kId)
###         ("_idts" ("_position" p) ("_position" P)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" p)
###             ("_applC" ("_position" prob) ("_position" kId))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" sb.eval)
###         ("_cargs" ("_position" kId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.sb.glob"
###                   ("\<^const>local.sb.imp"
###                     ("\<^const>local.pb.conj"
###                       ("\<^const>local.sb.ba"
###                         ("_lambda" ("_position" ks)
###                           ("\<^const>HOL.eq"
###                             ("_applC" ("_position" sub) ("_position" P))
###                             ("_applC" ("_position" ksrp)
###                               ("_position" ks)))))
###                       ("\<^const>local.sb.all_binder" ("_position" q)
###                         ("\<^const>local.sb.imp"
###                           ("_applC" ("_position" sb.pred)
###                             ("\<^const>Set.member" ("_position" q)
###                               ("_position" P)))
###                           ("\<^const>local.sb.evt"
###                             ("\<^const>local.sb.ba"
###                               ("_lambda" ("_position" ks)
###                                 ("\<^const>Set.member"
###                                   ("_tuple" ("_position" q)
###                                     ("_tuple_arg"
### ("_applC" ("_position" solve) ("_position" q))))
###                                   ("_applC" ("_position" kscs)
###                                     ("_position" ks)))))))))
###                     ("\<^const>local.sb.evt"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" ks)
###                           ("\<^const>HOL.eq"
###                             ("_tuple" ("_position" p)
###                               ("_tuple_arg"
###                                 ("_applC" ("_position" solve)
###                                   ("_position" p))))
###                             ("_applC" ("_position" ksns)
###                               ("_position" ks))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" kId)
###         ("_idts" ("_position" p) ("_position" P)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" p)
###             ("_applC" ("_position" prob) ("_position" kId))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" sb.eval)
###         ("_cargs" ("_position" kId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.pb.glob"
###                   ("\<^const>local.sb.imp"
###                     ("\<^const>local.pb.conj"
###                       ("\<^const>local.sb.ba"
###                         ("_lambda" ("_position" ks)
###                           ("\<^const>HOL.eq"
###                             ("_applC" ("_position" sub) ("_position" P))
###                             ("_applC" ("_position" ksrp)
###                               ("_position" ks)))))
###                       ("\<^const>local.sb.all_binder" ("_position" q)
###                         ("\<^const>local.sb.imp"
###                           ("_applC" ("_position" sb.pred)
###                             ("\<^const>Set.member" ("_position" q)
###                               ("_position" P)))
###                           ("\<^const>local.sb.evt"
###                             ("\<^const>local.sb.ba"
###                               ("_lambda" ("_position" ks)
###                                 ("\<^const>Set.member"
###                                   ("_tuple" ("_position" q)
###                                     ("_tuple_arg"
### ("_applC" ("_position" solve) ("_position" q))))
###                                   ("_applC" ("_position" kscs)
###                                     ("_position" ks)))))))))
###                     ("\<^const>local.sb.evt"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" ks)
###                           ("\<^const>HOL.eq"
###                             ("_tuple" ("_position" p)
###                               ("_tuple_arg"
###                                 ("_applC" ("_position" solve)
###                                   ("_position" p))))
###                             ("_applC" ("_position" ksns)
###                               ("_position" ks))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" kId)
###         ("_idts" ("_position" p) ("_position" P)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" p)
###             ("_applC" ("_position" prob) ("_position" kId))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" sb.eval)
###         ("_cargs" ("_position" kId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.sb.glob"
###                   ("\<^const>local.pb.imp"
###                     ("\<^const>local.pb.conj"
###                       ("\<^const>local.sb.ba"
###                         ("_lambda" ("_position" ks)
###                           ("\<^const>HOL.eq"
###                             ("_applC" ("_position" sub) ("_position" P))
###                             ("_applC" ("_position" ksrp)
###                               ("_position" ks)))))
###                       ("\<^const>local.sb.all_binder" ("_position" q)
###                         ("\<^const>local.sb.imp"
###                           ("_applC" ("_position" sb.pred)
###                             ("\<^const>Set.member" ("_position" q)
###                               ("_position" P)))
###                           ("\<^const>local.sb.evt"
###                             ("\<^const>local.sb.ba"
###                               ("_lambda" ("_position" ks)
###                                 ("\<^const>Set.member"
###                                   ("_tuple" ("_position" q)
###                                     ("_tuple_arg"
### ("_applC" ("_position" solve) ("_position" q))))
###                                   ("_applC" ("_position" kscs)
###                                     ("_position" ks)))))))))
###                     ("\<^const>local.sb.evt"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" ks)
###                           ("\<^const>HOL.eq"
###                             ("_tuple" ("_position" p)
###                               ("_tuple_arg"
###                                 ("_applC" ("_position" solve)
###                                   ("_position" p))))
###                             ("_applC" ("_position" ksns)
###                               ("_position" ks))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" kId)
###         ("_idts" ("_position" p) ("_position" P)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" p)
###             ("_applC" ("_position" prob) ("_position" kId))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" sb.eval)
###         ("_cargs" ("_position" kId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.pb.glob"
###                   ("\<^const>local.pb.imp"
###                     ("\<^const>local.pb.conj"
###                       ("\<^const>local.sb.ba"
###                         ("_lambda" ("_position" ks)
###                           ("\<^const>HOL.eq"
###                             ("_applC" ("_position" sub) ("_position" P))
###                             ("_applC" ("_position" ksrp)
###                               ("_position" ks)))))
###                       ("\<^const>local.sb.all_binder" ("_position" q)
###                         ("\<^const>local.sb.imp"
###                           ("_applC" ("_position" sb.pred)
###                             ("\<^const>Set.member" ("_position" q)
###                               ("_position" P)))
###                           ("\<^const>local.sb.evt"
###                             ("\<^const>local.sb.ba"
###                               ("_lambda" ("_position" ks)
###                                 ("\<^const>Set.member"
###                                   ("_tuple" ("_position" q)
###                                     ("_tuple_arg"
### ("_applC" ("_position" solve) ("_position" q))))
###                                   ("_applC" ("_position" kscs)
###                                     ("_position" ks)))))))))
###                     ("\<^const>local.sb.evt"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" ks)
###                           ("\<^const>HOL.eq"
###                             ("_tuple" ("_position" p)
###                               ("_tuple_arg"
###                                 ("_applC" ("_position" solve)
###                                   ("_position" p))))
###                             ("_applC" ("_position" ksns)
###                               ("_position" ks))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" kId)
###         ("_idts" ("_position" p) ("_position" P)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" p)
###             ("_applC" ("_position" prob) ("_position" kId))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" sb.eval)
###         ("_cargs" ("_position" kId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.sb.glob"
###                   ("\<^const>local.sb.imp"
###                     ("\<^const>local.sb.conj"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" ks)
###                           ("\<^const>HOL.eq"
###                             ("_applC" ("_position" sub) ("_position" P))
###                             ("_applC" ("_position" ksrp)
###                               ("_position" ks)))))
###                       ("\<^const>local.sb.all_binder" ("_position" q)
###                         ("\<^const>local.sb.imp"
###                           ("_applC" ("_position" sb.pred)
###                             ("\<^const>Set.member" ("_position" q)
###                               ("_position" P)))
###                           ("\<^const>local.sb.evt"
###                             ("\<^const>local.sb.ba"
###                               ("_lambda" ("_position" ks)
###                                 ("\<^const>Set.member"
###                                   ("_tuple" ("_position" q)
###                                     ("_tuple_arg"
### ("_applC" ("_position" solve) ("_position" q))))
###                                   ("_applC" ("_position" kscs)
###                                     ("_position" ks)))))))))
###                     ("\<^const>local.sb.evt"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" ks)
###                           ("\<^const>HOL.eq"
###                             ("_tuple" ("_position" p)
###                               ("_tuple_arg"
###                                 ("_applC" ("_position" solve)
###                                   ("_position" p))))
###                             ("_applC" ("_position" ksns)
###                               ("_position" ks))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" kId)
###         ("_idts" ("_position" p) ("_position" P)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" p)
###             ("_applC" ("_position" prob) ("_position" kId))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" sb.eval)
###         ("_cargs" ("_position" kId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.pb.glob"
###                   ("\<^const>local.sb.imp"
###                     ("\<^const>local.sb.conj"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" ks)
###                           ("\<^const>HOL.eq"
###                             ("_applC" ("_position" sub) ("_position" P))
###                             ("_applC" ("_position" ksrp)
###                               ("_position" ks)))))
###                       ("\<^const>local.sb.all_binder" ("_position" q)
###                         ("\<^const>local.sb.imp"
###                           ("_applC" ("_position" sb.pred)
###                             ("\<^const>Set.member" ("_position" q)
###                               ("_position" P)))
###                           ("\<^const>local.sb.evt"
###                             ("\<^const>local.sb.ba"
###                               ("_lambda" ("_position" ks)
###                                 ("\<^const>Set.member"
###                                   ("_tuple" ("_position" q)
###                                     ("_tuple_arg"
### ("_applC" ("_position" solve) ("_position" q))))
###                                   ("_applC" ("_position" kscs)
###                                     ("_position" ks)))))))))
###                     ("\<^const>local.sb.evt"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" ks)
###                           ("\<^const>HOL.eq"
###                             ("_tuple" ("_position" p)
###                               ("_tuple_arg"
###                                 ("_applC" ("_position" solve)
###                                   ("_position" p))))
###                             ("_applC" ("_position" ksns)
###                               ("_position" ks))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 58 of "$AFP/Architectural_Design_Patterns/Blackboard.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" kId)
###         ("_idts" ("_position" p)
###           ("_idts" ("_position" P) ("_position" q))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" p)
###             ("_applC" ("_position" prob) ("_position" kId))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" sb.eval)
###         ("_cargs" ("_position" kId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.sb.glob"
###                   ("\<^const>local.pb.ba"
###                     ("_lambda" ("_position" ks)
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.conj"
###                           ("\<^const>HOL.eq"
###                             ("_applC" ("_position" sub) ("_position" P))
###                             ("_applC" ("_position" ksrp) ("_position" ks)))
###                           ("\<^const>Set.member" ("_position" q)
###                             ("_position" P)))
###                         ("\<^const>Set.member"
###                           ("_tuple" ("_position" q)
###                             ("_tuple_arg" ("_position" p)))
###                           ("_position" sb))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" kId)
###         ("_idts" ("_position" p)
###           ("_idts" ("_position" P) ("_position" q))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" p)
###             ("_applC" ("_position" prob) ("_position" kId))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" sb.eval)
###         ("_cargs" ("_position" kId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.pb.glob"
###                   ("\<^const>local.pb.ba"
###                     ("_lambda" ("_position" ks)
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.conj"
###                           ("\<^const>HOL.eq"
###                             ("_applC" ("_position" sub) ("_position" P))
###                             ("_applC" ("_position" ksrp) ("_position" ks)))
###                           ("\<^const>Set.member" ("_position" q)
###                             ("_position" P)))
###                         ("\<^const>Set.member"
###                           ("_tuple" ("_position" q)
###                             ("_tuple_arg" ("_position" p)))
###                           ("_position" sb))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" kId)
###         ("_idts" ("_position" p)
###           ("_idts" ("_position" P) ("_position" q))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" p)
###             ("_applC" ("_position" prob) ("_position" kId))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" sb.eval)
###         ("_cargs" ("_position" kId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.sb.glob"
###                   ("\<^const>local.sb.ba"
###                     ("_lambda" ("_position" ks)
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.conj"
###                           ("\<^const>HOL.eq"
###                             ("_applC" ("_position" sub) ("_position" P))
###                             ("_applC" ("_position" ksrp) ("_position" ks)))
###                           ("\<^const>Set.member" ("_position" q)
###                             ("_position" P)))
###                         ("\<^const>Set.member"
###                           ("_tuple" ("_position" q)
###                             ("_tuple_arg" ("_position" p)))
###                           ("_position" sb))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" kId)
###         ("_idts" ("_position" p)
###           ("_idts" ("_position" P) ("_position" q))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" p)
###             ("_applC" ("_position" prob) ("_position" kId))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" sb.eval)
###         ("_cargs" ("_position" kId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.pb.glob"
###                   ("\<^const>local.sb.ba"
###                     ("_lambda" ("_position" ks)
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.conj"
###                           ("\<^const>HOL.eq"
###                             ("_applC" ("_position" sub) ("_position" P))
###                             ("_applC" ("_position" ksrp) ("_position" ks)))
###                           ("\<^const>Set.member" ("_position" q)
###                             ("_position" P)))
###                         ("\<^const>Set.member"
###                           ("_tuple" ("_position" q)
###                             ("_tuple_arg" ("_position" p)))
###                           ("_position" sb))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 60 of "$AFP/Architectural_Design_Patterns/Blackboard.thy") produces 32 parse trees (10 displayed):
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t') ("_idts" ("_position" kId) ("_position" p))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" p)
###             ("_applC" ("_position" prob) ("_position" kId))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" sb.eval)
###         ("_cargs" ("_position" kId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.sb.glob"
###                   ("\<^const>local.sb.imp"
###                     ("\<^const>local.sb.ba"
###                       ("_lambda" ("_position" ks)
###                         ("\<^const>Set.member" ("_position" p)
###                           ("_applC" ("_position" ksop) ("_position" ks)))))
###                     ("\<^const>local.sb.evt"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" ks)
###                           ("\<^const>HOL.Ex_binder" ("_position" P)
###                             ("\<^const>HOL.eq"
###                               ("_applC" ("_position" sub) ("_position" P))
###                               ("_applC" ("_position" ksrp)
###                                 ("_position" ks)))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t') ("_idts" ("_position" kId) ("_position" p))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" p)
###             ("_applC" ("_position" prob) ("_position" kId))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" sb.eval)
###         ("_cargs" ("_position" kId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.pb.glob"
###                   ("\<^const>local.sb.imp"
###                     ("\<^const>local.sb.ba"
###                       ("_lambda" ("_position" ks)
###                         ("\<^const>Set.member" ("_position" p)
###                           ("_applC" ("_position" ksop) ("_position" ks)))))
###                     ("\<^const>local.sb.evt"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" ks)
###                           ("\<^const>HOL.Ex_binder" ("_position" P)
###                             ("\<^const>HOL.eq"
###                               ("_applC" ("_position" sub) ("_position" P))
###                               ("_applC" ("_position" ksrp)
###                                 ("_position" ks)))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t') ("_idts" ("_position" kId) ("_position" p))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" p)
###             ("_applC" ("_position" prob) ("_position" kId))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" sb.eval)
###         ("_cargs" ("_position" kId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.sb.glob"
###                   ("\<^const>local.pb.imp"
###                     ("\<^const>local.sb.ba"
###                       ("_lambda" ("_position" ks)
###                         ("\<^const>Set.member" ("_position" p)
###                           ("_applC" ("_position" ksop) ("_position" ks)))))
###                     ("\<^const>local.sb.evt"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" ks)
###                           ("\<^const>HOL.Ex_binder" ("_position" P)
###                             ("\<^const>HOL.eq"
###                               ("_applC" ("_position" sub) ("_position" P))
###                               ("_applC" ("_position" ksrp)
###                                 ("_position" ks)))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t') ("_idts" ("_position" kId) ("_position" p))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" p)
###             ("_applC" ("_position" prob) ("_position" kId))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" sb.eval)
###         ("_cargs" ("_position" kId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.pb.glob"
###                   ("\<^const>local.pb.imp"
###                     ("\<^const>local.sb.ba"
###                       ("_lambda" ("_position" ks)
###                         ("\<^const>Set.member" ("_position" p)
###                           ("_applC" ("_position" ksop) ("_position" ks)))))
###                     ("\<^const>local.sb.evt"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" ks)
###                           ("\<^const>HOL.Ex_binder" ("_position" P)
###                             ("\<^const>HOL.eq"
###                               ("_applC" ("_position" sub) ("_position" P))
###                               ("_applC" ("_position" ksrp)
###                                 ("_position" ks)))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t') ("_idts" ("_position" kId) ("_position" p))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" p)
###             ("_applC" ("_position" prob) ("_position" kId))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" sb.eval)
###         ("_cargs" ("_position" kId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.sb.glob"
###                   ("\<^const>local.sb.imp"
###                     ("\<^const>local.pb.ba"
###                       ("_lambda" ("_position" ks)
###                         ("\<^const>Set.member" ("_position" p)
###                           ("_applC" ("_position" ksop) ("_position" ks)))))
###                     ("\<^const>local.sb.evt"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" ks)
###                           ("\<^const>HOL.Ex_binder" ("_position" P)
###                             ("\<^const>HOL.eq"
###                               ("_applC" ("_position" sub) ("_position" P))
###                               ("_applC" ("_position" ksrp)
###                                 ("_position" ks)))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t') ("_idts" ("_position" kId) ("_position" p))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" p)
###             ("_applC" ("_position" prob) ("_position" kId))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" sb.eval)
###         ("_cargs" ("_position" kId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.pb.glob"
###                   ("\<^const>local.sb.imp"
###                     ("\<^const>local.pb.ba"
###                       ("_lambda" ("_position" ks)
###                         ("\<^const>Set.member" ("_position" p)
###                           ("_applC" ("_position" ksop) ("_position" ks)))))
###                     ("\<^const>local.sb.evt"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" ks)
###                           ("\<^const>HOL.Ex_binder" ("_position" P)
###                             ("\<^const>HOL.eq"
###                               ("_applC" ("_position" sub) ("_position" P))
###                               ("_applC" ("_position" ksrp)
###                                 ("_position" ks)))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t') ("_idts" ("_position" kId) ("_position" p))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" p)
###             ("_applC" ("_position" prob) ("_position" kId))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" sb.eval)
###         ("_cargs" ("_position" kId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.sb.glob"
###                   ("\<^const>local.pb.imp"
###                     ("\<^const>local.pb.ba"
###                       ("_lambda" ("_position" ks)
###                         ("\<^const>Set.member" ("_position" p)
###                           ("_applC" ("_position" ksop) ("_position" ks)))))
###                     ("\<^const>local.sb.evt"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" ks)
###                           ("\<^const>HOL.Ex_binder" ("_position" P)
###                             ("\<^const>HOL.eq"
###                               ("_applC" ("_position" sub) ("_position" P))
###                               ("_applC" ("_position" ksrp)
###                                 ("_position" ks)))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t') ("_idts" ("_position" kId) ("_position" p))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" p)
###             ("_applC" ("_position" prob) ("_position" kId))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" sb.eval)
###         ("_cargs" ("_position" kId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.pb.glob"
###                   ("\<^const>local.pb.imp"
###                     ("\<^const>local.pb.ba"
###                       ("_lambda" ("_position" ks)
###                         ("\<^const>Set.member" ("_position" p)
###                           ("_applC" ("_position" ksop) ("_position" ks)))))
###                     ("\<^const>local.sb.evt"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" ks)
###                           ("\<^const>HOL.Ex_binder" ("_position" P)
###                             ("\<^const>HOL.eq"
###                               ("_applC" ("_position" sub) ("_position" P))
###                               ("_applC" ("_position" ksrp)
###                                 ("_position" ks)))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t') ("_idts" ("_position" kId) ("_position" p))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" p)
###             ("_applC" ("_position" prob) ("_position" kId))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" sb.eval)
###         ("_cargs" ("_position" kId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.sb.glob"
###                   ("\<^const>local.sb.imp"
###                     ("\<^const>local.sb.ba"
###                       ("_lambda" ("_position" ks)
###                         ("\<^const>Set.member" ("_position" p)
###                           ("_applC" ("_position" ksop) ("_position" ks)))))
###                     ("\<^const>local.pb.evt"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" ks)
###                           ("\<^const>HOL.Ex_binder" ("_position" P)
###                             ("\<^const>HOL.eq"
###                               ("_applC" ("_position" sub) ("_position" P))
###                               ("_applC" ("_position" ksrp)
###                                 ("_position" ks)))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t') ("_idts" ("_position" kId) ("_position" p))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" p)
###             ("_applC" ("_position" prob) ("_position" kId))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" sb.eval)
###         ("_cargs" ("_position" kId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.pb.glob"
###                   ("\<^const>local.sb.imp"
###                     ("\<^const>local.sb.ba"
###                       ("_lambda" ("_position" ks)
###                         ("\<^const>Set.member" ("_position" p)
###                           ("_applC" ("_position" ksop) ("_position" ks)))))
###                     ("\<^const>local.pb.evt"
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" ks)
###                           ("\<^const>HOL.Ex_binder" ("_position" P)
###                             ("\<^const>HOL.eq"
###                               ("_applC" ("_position" sub) ("_position" P))
###                               ("_applC" ("_position" ksrp)
###                                 ("_position" ks)))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 62 of "$AFP/Architectural_Design_Patterns/Blackboard.thy") produces 512 parse trees (10 displayed):
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" kId)
###         ("_idts" ("_position" p) ("_position" P)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" p) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" sb.eval)
###         ("_cargs" ("_position" kId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.sb.glob"
###                   ("\<^const>local.sb.imp"
###                     ("\<^const>local.sb.ba"
###                       ("_lambda" ("_position" ks)
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" sub) ("_position" P))
###                           ("_applC" ("_position" ksrp) ("_position" ks)))))
###                     ("\<^const>local.pb.wuntil"
###                       ("\<^const>local.pb.neg"
###                         ("\<^const>local.sb.ex_binder" ("_position" P')
###                           ("\<^const>local.sb.conj"
###                             ("_applC" ("_position" sb.pred)
###                               ("\<^const>Set.member" ("_position" p)
###                                 ("_position" P')))
###                             ("\<^const>local.sb.ba"
###                               ("_lambda" ("_position" ks)
###                                 ("\<^const>HOL.eq"
###                                   ("_applC" ("_position" unsub)
###                                     ("_position" P'))
###                                   ("_applC" ("_position" ksrp)
###                                     ("_position" ks))))))))
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" ks)
###                           ("\<^const>Set.member"
###                             ("_tuple" ("_position" p)
###                               ("_tuple_arg"
###                                 ("_applC" ("_position" solve)
###                                   ("_position" p))))
###                             ("_applC" ("_position" kscs)
###                               ("_position" ks))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" kId)
###         ("_idts" ("_position" p) ("_position" P)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" p) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" sb.eval)
###         ("_cargs" ("_position" kId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.pb.glob"
###                   ("\<^const>local.sb.imp"
###                     ("\<^const>local.sb.ba"
###                       ("_lambda" ("_position" ks)
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" sub) ("_position" P))
###                           ("_applC" ("_position" ksrp) ("_position" ks)))))
###                     ("\<^const>local.pb.wuntil"
###                       ("\<^const>local.pb.neg"
###                         ("\<^const>local.sb.ex_binder" ("_position" P')
###                           ("\<^const>local.sb.conj"
###                             ("_applC" ("_position" sb.pred)
###                               ("\<^const>Set.member" ("_position" p)
###                                 ("_position" P')))
###                             ("\<^const>local.sb.ba"
###                               ("_lambda" ("_position" ks)
###                                 ("\<^const>HOL.eq"
###                                   ("_applC" ("_position" unsub)
###                                     ("_position" P'))
###                                   ("_applC" ("_position" ksrp)
###                                     ("_position" ks))))))))
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" ks)
###                           ("\<^const>Set.member"
###                             ("_tuple" ("_position" p)
###                               ("_tuple_arg"
###                                 ("_applC" ("_position" solve)
###                                   ("_position" p))))
###                             ("_applC" ("_position" kscs)
###                               ("_position" ks))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" kId)
###         ("_idts" ("_position" p) ("_position" P)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" p) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" sb.eval)
###         ("_cargs" ("_position" kId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.sb.glob"
###                   ("\<^const>local.pb.imp"
###                     ("\<^const>local.sb.ba"
###                       ("_lambda" ("_position" ks)
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" sub) ("_position" P))
###                           ("_applC" ("_position" ksrp) ("_position" ks)))))
###                     ("\<^const>local.pb.wuntil"
###                       ("\<^const>local.pb.neg"
###                         ("\<^const>local.sb.ex_binder" ("_position" P')
###                           ("\<^const>local.sb.conj"
###                             ("_applC" ("_position" sb.pred)
###                               ("\<^const>Set.member" ("_position" p)
###                                 ("_position" P')))
###                             ("\<^const>local.sb.ba"
###                               ("_lambda" ("_position" ks)
###                                 ("\<^const>HOL.eq"
###                                   ("_applC" ("_position" unsub)
###                                     ("_position" P'))
###                                   ("_applC" ("_position" ksrp)
###                                     ("_position" ks))))))))
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" ks)
###                           ("\<^const>Set.member"
###                             ("_tuple" ("_position" p)
###                               ("_tuple_arg"
###                                 ("_applC" ("_position" solve)
###                                   ("_position" p))))
###                             ("_applC" ("_position" kscs)
###                               ("_position" ks))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" kId)
###         ("_idts" ("_position" p) ("_position" P)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" p) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" sb.eval)
###         ("_cargs" ("_position" kId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.pb.glob"
###                   ("\<^const>local.pb.imp"
###                     ("\<^const>local.sb.ba"
###                       ("_lambda" ("_position" ks)
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" sub) ("_position" P))
###                           ("_applC" ("_position" ksrp) ("_position" ks)))))
###                     ("\<^const>local.pb.wuntil"
###                       ("\<^const>local.pb.neg"
###                         ("\<^const>local.sb.ex_binder" ("_position" P')
###                           ("\<^const>local.sb.conj"
###                             ("_applC" ("_position" sb.pred)
###                               ("\<^const>Set.member" ("_position" p)
###                                 ("_position" P')))
###                             ("\<^const>local.sb.ba"
###                               ("_lambda" ("_position" ks)
###                                 ("\<^const>HOL.eq"
###                                   ("_applC" ("_position" unsub)
###                                     ("_position" P'))
###                                   ("_applC" ("_position" ksrp)
###                                     ("_position" ks))))))))
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" ks)
###                           ("\<^const>Set.member"
###                             ("_tuple" ("_position" p)
###                               ("_tuple_arg"
###                                 ("_applC" ("_position" solve)
###                                   ("_position" p))))
###                             ("_applC" ("_position" kscs)
###                               ("_position" ks))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" kId)
###         ("_idts" ("_position" p) ("_position" P)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" p) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" sb.eval)
###         ("_cargs" ("_position" kId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.sb.glob"
###                   ("\<^const>local.sb.imp"
###                     ("\<^const>local.pb.ba"
###                       ("_lambda" ("_position" ks)
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" sub) ("_position" P))
###                           ("_applC" ("_position" ksrp) ("_position" ks)))))
###                     ("\<^const>local.pb.wuntil"
###                       ("\<^const>local.pb.neg"
###                         ("\<^const>local.sb.ex_binder" ("_position" P')
###                           ("\<^const>local.sb.conj"
###                             ("_applC" ("_position" sb.pred)
###                               ("\<^const>Set.member" ("_position" p)
###                                 ("_position" P')))
###                             ("\<^const>local.sb.ba"
###                               ("_lambda" ("_position" ks)
###                                 ("\<^const>HOL.eq"
###                                   ("_applC" ("_position" unsub)
###                                     ("_position" P'))
###                                   ("_applC" ("_position" ksrp)
###                                     ("_position" ks))))))))
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" ks)
###                           ("\<^const>Set.member"
###                             ("_tuple" ("_position" p)
###                               ("_tuple_arg"
###                                 ("_applC" ("_position" solve)
###                                   ("_position" p))))
###                             ("_applC" ("_position" kscs)
###                               ("_position" ks))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" kId)
###         ("_idts" ("_position" p) ("_position" P)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" p) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" sb.eval)
###         ("_cargs" ("_position" kId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.pb.glob"
###                   ("\<^const>local.sb.imp"
###                     ("\<^const>local.pb.ba"
###                       ("_lambda" ("_position" ks)
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" sub) ("_position" P))
###                           ("_applC" ("_position" ksrp) ("_position" ks)))))
###                     ("\<^const>local.pb.wuntil"
###                       ("\<^const>local.pb.neg"
###                         ("\<^const>local.sb.ex_binder" ("_position" P')
###                           ("\<^const>local.sb.conj"
###                             ("_applC" ("_position" sb.pred)
###                               ("\<^const>Set.member" ("_position" p)
###                                 ("_position" P')))
###                             ("\<^const>local.sb.ba"
###                               ("_lambda" ("_position" ks)
###                                 ("\<^const>HOL.eq"
###                                   ("_applC" ("_position" unsub)
###                                     ("_position" P'))
###                                   ("_applC" ("_position" ksrp)
###                                     ("_position" ks))))))))
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" ks)
###                           ("\<^const>Set.member"
###                             ("_tuple" ("_position" p)
###                               ("_tuple_arg"
###                                 ("_applC" ("_position" solve)
###                                   ("_position" p))))
###                             ("_applC" ("_position" kscs)
###                               ("_position" ks))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" kId)
###         ("_idts" ("_position" p) ("_position" P)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" p) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" sb.eval)
###         ("_cargs" ("_position" kId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.sb.glob"
###                   ("\<^const>local.pb.imp"
###                     ("\<^const>local.pb.ba"
###                       ("_lambda" ("_position" ks)
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" sub) ("_position" P))
###                           ("_applC" ("_position" ksrp) ("_position" ks)))))
###                     ("\<^const>local.pb.wuntil"
###                       ("\<^const>local.pb.neg"
###                         ("\<^const>local.sb.ex_binder" ("_position" P')
###                           ("\<^const>local.sb.conj"
###                             ("_applC" ("_position" sb.pred)
###                               ("\<^const>Set.member" ("_position" p)
###                                 ("_position" P')))
###                             ("\<^const>local.sb.ba"
###                               ("_lambda" ("_position" ks)
###                                 ("\<^const>HOL.eq"
###                                   ("_applC" ("_position" unsub)
###                                     ("_position" P'))
###                                   ("_applC" ("_position" ksrp)
###                                     ("_position" ks))))))))
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" ks)
###                           ("\<^const>Set.member"
###                             ("_tuple" ("_position" p)
###                               ("_tuple_arg"
###                                 ("_applC" ("_position" solve)
###                                   ("_position" p))))
###                             ("_applC" ("_position" kscs)
###                               ("_position" ks))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" kId)
###         ("_idts" ("_position" p) ("_position" P)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" p) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" sb.eval)
###         ("_cargs" ("_position" kId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.pb.glob"
###                   ("\<^const>local.pb.imp"
###                     ("\<^const>local.pb.ba"
###                       ("_lambda" ("_position" ks)
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" sub) ("_position" P))
###                           ("_applC" ("_position" ksrp) ("_position" ks)))))
###                     ("\<^const>local.pb.wuntil"
###                       ("\<^const>local.pb.neg"
###                         ("\<^const>local.sb.ex_binder" ("_position" P')
###                           ("\<^const>local.sb.conj"
###                             ("_applC" ("_position" sb.pred)
###                               ("\<^const>Set.member" ("_position" p)
###                                 ("_position" P')))
###                             ("\<^const>local.sb.ba"
###                               ("_lambda" ("_position" ks)
###                                 ("\<^const>HOL.eq"
###                                   ("_applC" ("_position" unsub)
###                                     ("_position" P'))
###                                   ("_applC" ("_position" ksrp)
###                                     ("_position" ks))))))))
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" ks)
###                           ("\<^const>Set.member"
###                             ("_tuple" ("_position" p)
###                               ("_tuple_arg"
###                                 ("_applC" ("_position" solve)
###                                   ("_position" p))))
###                             ("_applC" ("_position" kscs)
###                               ("_position" ks))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" kId)
###         ("_idts" ("_position" p) ("_position" P)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" p) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" sb.eval)
###         ("_cargs" ("_position" kId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.sb.glob"
###                   ("\<^const>local.sb.imp"
###                     ("\<^const>local.sb.ba"
###                       ("_lambda" ("_position" ks)
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" sub) ("_position" P))
###                           ("_applC" ("_position" ksrp) ("_position" ks)))))
###                     ("\<^const>local.sb.wuntil"
###                       ("\<^const>local.pb.neg"
###                         ("\<^const>local.sb.ex_binder" ("_position" P')
###                           ("\<^const>local.sb.conj"
###                             ("_applC" ("_position" sb.pred)
###                               ("\<^const>Set.member" ("_position" p)
###                                 ("_position" P')))
###                             ("\<^const>local.sb.ba"
###                               ("_lambda" ("_position" ks)
###                                 ("\<^const>HOL.eq"
###                                   ("_applC" ("_position" unsub)
###                                     ("_position" P'))
###                                   ("_applC" ("_position" ksrp)
###                                     ("_position" ks))))))))
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" ks)
###                           ("\<^const>Set.member"
###                             ("_tuple" ("_position" p)
###                               ("_tuple_arg"
###                                 ("_applC" ("_position" solve)
###                                   ("_position" p))))
###                             ("_applC" ("_position" kscs)
###                               ("_position" ks))))))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" t')
###       ("_idts" ("_position" kId)
###         ("_idts" ("_position" p) ("_position" P)))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" p) ("_position" P)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" sb.eval)
###         ("_cargs" ("_position" kId)
###           ("_cargs" ("_position" t)
###             ("_cargs" ("_position" t')
###               ("_cargs" ("\<^const>Groups.zero_class.zero")
###                 ("\<^const>local.pb.glob"
###                   ("\<^const>local.sb.imp"
###                     ("\<^const>local.sb.ba"
###                       ("_lambda" ("_position" ks)
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" sub) ("_position" P))
###                           ("_applC" ("_position" ksrp) ("_position" ks)))))
###                     ("\<^const>local.sb.wuntil"
###                       ("\<^const>local.pb.neg"
###                         ("\<^const>local.sb.ex_binder" ("_position" P')
###                           ("\<^const>local.sb.conj"
###                             ("_applC" ("_position" sb.pred)
###                               ("\<^const>Set.member" ("_position" p)
###                                 ("_position" P')))
###                             ("\<^const>local.sb.ba"
###                               ("_lambda" ("_position" ks)
###                                 ("\<^const>HOL.eq"
###                                   ("_applC" ("_position" unsub)
###                                     ("_position" P'))
###                                   ("_applC" ("_position" ksrp)
###                                     ("_position" ks))))))))
###                       ("\<^const>local.pb.ba"
###                         ("_lambda" ("_position" ks)
###                           ("\<^const>Set.member"
###                             ("_tuple" ("_position" p)
###                               ("_tuple_arg"
###                                 ("_applC" ("_position" solve)
###                                   ("_position" p))))
###                             ("_applC" ("_position" kscs)
###                               ("_position" ks))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 69 of "$AFP/Architectural_Design_Patterns/Blackboard.thy") produces 128 parse trees (10 displayed):
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" n) ("_idts" ("_position" kid) ("_position" p))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>bbactive" ("_position" kid)
###             ("_applC" ("_position" t) ("_position" n))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" p)
###               ("_applC" ("_position" prob) ("_position" kid))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" p)
###                 ("_applC" ("_position" ksop)
###                   ("\<^fixed>bbcmp" ("_position" kid)
###                     ("_applC" ("_position" t) ("_position" n))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.disj"
###         ("_Ex_greater_eq" ("_position" n') ("_position" n)
###           ("\<^const>HOL.conj"
###             ("\<^fixed>bbactive" ("_position" kid)
###               ("_applC" ("_position" t) ("_position" n')))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" p)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" solve) ("_position" p))))
###                 ("_applC" ("_position" ksns)
###                   ("\<^fixed>bbcmp" ("_position" kid)
###                     ("_applC" ("_position" t) ("_position" n')))))
###               ("_All_greater_eq" ("_position" n'') ("_position" n)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Orderings.ord_class.less" ("_position" n'')
###                     ("_position" n'))
###                   ("\<^fixed>ksactive" ("_position" kid)
###                     ("_applC" ("_position" t) ("_position" n''))))))))
###         ("_All_greater_eq" ("_position" n') ("_position" n)
###           ("\<^const>HOL.conj"
###             ("\<^fixed>ksactive" ("_position" kid)
###               ("_applC" ("_position" t) ("_position" n')))
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" p)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" solve) ("_position" p))))
###                 ("_applC" ("_position" ksns)
###                   ("\<^fixed>bbcmp" ("_position" kid)
###                     ("_applC" ("_position" t) ("_position" n'))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" n) ("_idts" ("_position" kid) ("_position" p))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>ksactive" ("_position" kid)
###             ("_applC" ("_position" t) ("_position" n))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" p)
###               ("_applC" ("_position" prob) ("_position" kid))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" p)
###                 ("_applC" ("_position" ksop)
###                   ("\<^fixed>bbcmp" ("_position" kid)
###                     ("_applC" ("_position" t) ("_position" n))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.disj"
###         ("_Ex_greater_eq" ("_position" n') ("_position" n)
###           ("\<^const>HOL.conj"
###             ("\<^fixed>bbactive" ("_position" kid)
###               ("_applC" ("_position" t) ("_position" n')))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" p)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" solve) ("_position" p))))
###                 ("_applC" ("_position" ksns)
###                   ("\<^fixed>bbcmp" ("_position" kid)
###                     ("_applC" ("_position" t) ("_position" n')))))
###               ("_All_greater_eq" ("_position" n'') ("_position" n)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Orderings.ord_class.less" ("_position" n'')
###                     ("_position" n'))
###                   ("\<^fixed>ksactive" ("_position" kid)
###                     ("_applC" ("_position" t) ("_position" n''))))))))
###         ("_All_greater_eq" ("_position" n') ("_position" n)
###           ("\<^const>HOL.conj"
###             ("\<^fixed>ksactive" ("_position" kid)
###               ("_applC" ("_position" t) ("_position" n')))
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" p)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" solve) ("_position" p))))
###                 ("_applC" ("_position" ksns)
###                   ("\<^fixed>bbcmp" ("_position" kid)
###                     ("_applC" ("_position" t) ("_position" n'))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" n) ("_idts" ("_position" kid) ("_position" p))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>bbactive" ("_position" kid)
###             ("_applC" ("_position" t) ("_position" n))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" p)
###               ("_applC" ("_position" prob) ("_position" kid))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" p)
###                 ("_applC" ("_position" ksop)
###                   ("\<^fixed>kscmp" ("_position" kid)
###                     ("_applC" ("_position" t) ("_position" n))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.disj"
###         ("_Ex_greater_eq" ("_position" n') ("_position" n)
###           ("\<^const>HOL.conj"
###             ("\<^fixed>bbactive" ("_position" kid)
###               ("_applC" ("_position" t) ("_position" n')))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" p)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" solve) ("_position" p))))
###                 ("_applC" ("_position" ksns)
###                   ("\<^fixed>bbcmp" ("_position" kid)
###                     ("_applC" ("_position" t) ("_position" n')))))
###               ("_All_greater_eq" ("_position" n'') ("_position" n)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Orderings.ord_class.less" ("_position" n'')
###                     ("_position" n'))
###                   ("\<^fixed>ksactive" ("_position" kid)
###                     ("_applC" ("_position" t) ("_position" n''))))))))
###         ("_All_greater_eq" ("_position" n') ("_position" n)
###           ("\<^const>HOL.conj"
###             ("\<^fixed>ksactive" ("_position" kid)
###               ("_applC" ("_position" t) ("_position" n')))
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" p)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" solve) ("_position" p))))
###                 ("_applC" ("_position" ksns)
###                   ("\<^fixed>bbcmp" ("_position" kid)
###                     ("_applC" ("_position" t) ("_position" n'))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" n) ("_idts" ("_position" kid) ("_position" p))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>ksactive" ("_position" kid)
###             ("_applC" ("_position" t) ("_position" n))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" p)
###               ("_applC" ("_position" prob) ("_position" kid))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" p)
###                 ("_applC" ("_position" ksop)
###                   ("\<^fixed>kscmp" ("_position" kid)
###                     ("_applC" ("_position" t) ("_position" n))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.disj"
###         ("_Ex_greater_eq" ("_position" n') ("_position" n)
###           ("\<^const>HOL.conj"
###             ("\<^fixed>bbactive" ("_position" kid)
###               ("_applC" ("_position" t) ("_position" n')))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" p)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" solve) ("_position" p))))
###                 ("_applC" ("_position" ksns)
###                   ("\<^fixed>bbcmp" ("_position" kid)
###                     ("_applC" ("_position" t) ("_position" n')))))
###               ("_All_greater_eq" ("_position" n'') ("_position" n)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Orderings.ord_class.less" ("_position" n'')
###                     ("_position" n'))
###                   ("\<^fixed>ksactive" ("_position" kid)
###                     ("_applC" ("_position" t) ("_position" n''))))))))
###         ("_All_greater_eq" ("_position" n') ("_position" n)
###           ("\<^const>HOL.conj"
###             ("\<^fixed>ksactive" ("_position" kid)
###               ("_applC" ("_position" t) ("_position" n')))
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" p)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" solve) ("_position" p))))
###                 ("_applC" ("_position" ksns)
###                   ("\<^fixed>bbcmp" ("_position" kid)
###                     ("_applC" ("_position" t) ("_position" n'))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" n) ("_idts" ("_position" kid) ("_position" p))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>bbactive" ("_position" kid)
###             ("_applC" ("_position" t) ("_position" n))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" p)
###               ("_applC" ("_position" prob) ("_position" kid))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" p)
###                 ("_applC" ("_position" ksop)
###                   ("\<^fixed>bbcmp" ("_position" kid)
###                     ("_applC" ("_position" t) ("_position" n))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.disj"
###         ("_Ex_greater_eq" ("_position" n') ("_position" n)
###           ("\<^const>HOL.conj"
###             ("\<^fixed>ksactive" ("_position" kid)
###               ("_applC" ("_position" t) ("_position" n')))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" p)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" solve) ("_position" p))))
###                 ("_applC" ("_position" ksns)
###                   ("\<^fixed>bbcmp" ("_position" kid)
###                     ("_applC" ("_position" t) ("_position" n')))))
###               ("_All_greater_eq" ("_position" n'') ("_position" n)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Orderings.ord_class.less" ("_position" n'')
###                     ("_position" n'))
###                   ("\<^fixed>ksactive" ("_position" kid)
###                     ("_applC" ("_position" t) ("_position" n''))))))))
###         ("_All_greater_eq" ("_position" n') ("_position" n)
###           ("\<^const>HOL.conj"
###             ("\<^fixed>ksactive" ("_position" kid)
###               ("_applC" ("_position" t) ("_position" n')))
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" p)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" solve) ("_position" p))))
###                 ("_applC" ("_position" ksns)
###                   ("\<^fixed>bbcmp" ("_position" kid)
###                     ("_applC" ("_position" t) ("_position" n'))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" n) ("_idts" ("_position" kid) ("_position" p))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>ksactive" ("_position" kid)
###             ("_applC" ("_position" t) ("_position" n))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" p)
###               ("_applC" ("_position" prob) ("_position" kid))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" p)
###                 ("_applC" ("_position" ksop)
###                   ("\<^fixed>bbcmp" ("_position" kid)
###                     ("_applC" ("_position" t) ("_position" n))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.disj"
###         ("_Ex_greater_eq" ("_position" n') ("_position" n)
###           ("\<^const>HOL.conj"
###             ("\<^fixed>ksactive" ("_position" kid)
###               ("_applC" ("_position" t) ("_position" n')))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" p)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" solve) ("_position" p))))
###                 ("_applC" ("_position" ksns)
###                   ("\<^fixed>bbcmp" ("_position" kid)
###                     ("_applC" ("_position" t) ("_position" n')))))
###               ("_All_greater_eq" ("_position" n'') ("_position" n)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Orderings.ord_class.less" ("_position" n'')
###                     ("_position" n'))
###                   ("\<^fixed>ksactive" ("_position" kid)
###                     ("_applC" ("_position" t) ("_position" n''))))))))
###         ("_All_greater_eq" ("_position" n') ("_position" n)
###           ("\<^const>HOL.conj"
###             ("\<^fixed>ksactive" ("_position" kid)
###               ("_applC" ("_position" t) ("_position" n')))
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" p)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" solve) ("_position" p))))
###                 ("_applC" ("_position" ksns)
###                   ("\<^fixed>bbcmp" ("_position" kid)
###                     ("_applC" ("_position" t) ("_position" n'))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" n) ("_idts" ("_position" kid) ("_position" p))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>bbactive" ("_position" kid)
###             ("_applC" ("_position" t) ("_position" n))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" p)
###               ("_applC" ("_position" prob) ("_position" kid))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" p)
###                 ("_applC" ("_position" ksop)
###                   ("\<^fixed>kscmp" ("_position" kid)
###                     ("_applC" ("_position" t) ("_position" n))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.disj"
###         ("_Ex_greater_eq" ("_position" n') ("_position" n)
###           ("\<^const>HOL.conj"
###             ("\<^fixed>ksactive" ("_position" kid)
###               ("_applC" ("_position" t) ("_position" n')))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" p)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" solve) ("_position" p))))
###                 ("_applC" ("_position" ksns)
###                   ("\<^fixed>bbcmp" ("_position" kid)
###                     ("_applC" ("_position" t) ("_position" n')))))
###               ("_All_greater_eq" ("_position" n'') ("_position" n)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Orderings.ord_class.less" ("_position" n'')
###                     ("_position" n'))
###                   ("\<^fixed>ksactive" ("_position" kid)
###                     ("_applC" ("_position" t) ("_position" n''))))))))
###         ("_All_greater_eq" ("_position" n') ("_position" n)
###           ("\<^const>HOL.conj"
###             ("\<^fixed>ksactive" ("_position" kid)
###               ("_applC" ("_position" t) ("_position" n')))
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" p)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" solve) ("_position" p))))
###                 ("_applC" ("_position" ksns)
###                   ("\<^fixed>bbcmp" ("_position" kid)
###                     ("_applC" ("_position" t) ("_position" n'))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" n) ("_idts" ("_position" kid) ("_position" p))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>ksactive" ("_position" kid)
###             ("_applC" ("_position" t) ("_position" n))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" p)
###               ("_applC" ("_position" prob) ("_position" kid))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" p)
###                 ("_applC" ("_position" ksop)
###                   ("\<^fixed>kscmp" ("_position" kid)
###                     ("_applC" ("_position" t) ("_position" n))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.disj"
###         ("_Ex_greater_eq" ("_position" n') ("_position" n)
###           ("\<^const>HOL.conj"
###             ("\<^fixed>ksactive" ("_position" kid)
###               ("_applC" ("_position" t) ("_position" n')))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" p)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" solve) ("_position" p))))
###                 ("_applC" ("_position" ksns)
###                   ("\<^fixed>bbcmp" ("_position" kid)
###                     ("_applC" ("_position" t) ("_position" n')))))
###               ("_All_greater_eq" ("_position" n'') ("_position" n)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Orderings.ord_class.less" ("_position" n'')
###                     ("_position" n'))
###                   ("\<^fixed>ksactive" ("_position" kid)
###                     ("_applC" ("_position" t) ("_position" n''))))))))
###         ("_All_greater_eq" ("_position" n') ("_position" n)
###           ("\<^const>HOL.conj"
###             ("\<^fixed>ksactive" ("_position" kid)
###               ("_applC" ("_position" t) ("_position" n')))
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" p)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" solve) ("_position" p))))
###                 ("_applC" ("_position" ksns)
###                   ("\<^fixed>bbcmp" ("_position" kid)
###                     ("_applC" ("_position" t) ("_position" n'))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" n) ("_idts" ("_position" kid) ("_position" p))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>bbactive" ("_position" kid)
###             ("_applC" ("_position" t) ("_position" n))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" p)
###               ("_applC" ("_position" prob) ("_position" kid))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" p)
###                 ("_applC" ("_position" ksop)
###                   ("\<^fixed>bbcmp" ("_position" kid)
###                     ("_applC" ("_position" t) ("_position" n))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.disj"
###         ("_Ex_greater_eq" ("_position" n') ("_position" n)
###           ("\<^const>HOL.conj"
###             ("\<^fixed>bbactive" ("_position" kid)
###               ("_applC" ("_position" t) ("_position" n')))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" p)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" solve) ("_position" p))))
###                 ("_applC" ("_position" ksns)
###                   ("\<^fixed>kscmp" ("_position" kid)
###                     ("_applC" ("_position" t) ("_position" n')))))
###               ("_All_greater_eq" ("_position" n'') ("_position" n)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Orderings.ord_class.less" ("_position" n'')
###                     ("_position" n'))
###                   ("\<^fixed>ksactive" ("_position" kid)
###                     ("_applC" ("_position" t) ("_position" n''))))))))
###         ("_All_greater_eq" ("_position" n') ("_position" n)
###           ("\<^const>HOL.conj"
###             ("\<^fixed>ksactive" ("_position" kid)
###               ("_applC" ("_position" t) ("_position" n')))
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" p)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" solve) ("_position" p))))
###                 ("_applC" ("_position" ksns)
###                   ("\<^fixed>bbcmp" ("_position" kid)
###                     ("_applC" ("_position" t) ("_position" n'))))))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" t)
###     ("_idts" ("_position" n) ("_idts" ("_position" kid) ("_position" p))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" t) ("_position" arch)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>ksactive" ("_position" kid)
###             ("_applC" ("_position" t) ("_position" n))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" p)
###               ("_applC" ("_position" prob) ("_position" kid))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" p)
###                 ("_applC" ("_position" ksop)
###                   ("\<^fixed>bbcmp" ("_position" kid)
###                     ("_applC" ("_position" t) ("_position" n))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.disj"
###         ("_Ex_greater_eq" ("_position" n') ("_position" n)
###           ("\<^const>HOL.conj"
###             ("\<^fixed>bbactive" ("_position" kid)
###               ("_applC" ("_position" t) ("_position" n')))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" p)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" solve) ("_position" p))))
###                 ("_applC" ("_position" ksns)
###                   ("\<^fixed>kscmp" ("_position" kid)
###                     ("_applC" ("_position" t) ("_position" n')))))
###               ("_All_greater_eq" ("_position" n'') ("_position" n)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Orderings.ord_class.less" ("_position" n'')
###                     ("_position" n'))
###                   ("\<^fixed>ksactive" ("_position" kid)
###                     ("_applC" ("_position" t) ("_position" n''))))))))
###         ("_All_greater_eq" ("_position" n') ("_position" n)
###           ("\<^const>HOL.conj"
###             ("\<^fixed>ksactive" ("_position" kid)
###               ("_applC" ("_position" t) ("_position" n')))
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.eq"
###                 ("_tuple" ("_position" p)
###                   ("_tuple_arg"
###                     ("_applC" ("_position" solve) ("_position" p))))
###                 ("_applC" ("_position" ksns)
###                   ("\<^fixed>bbcmp" ("_position" kid)
###                     ("_applC" ("_position" t) ("_position" n'))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 75 of "$AFP/Architectural_Design_Patterns/Blackboard.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.all_binder" ("_idts" ("_position" k) ("_position" bid))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>ksactive" ("_position" bid) ("_position" k)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" bbns)
###           ("\<^fixed>kscmp" ("_position" bid) ("_position" k)))
###         ("_UNION" ("_position" kid)
###           ("_Coll" ("_position" kid)
###             ("\<^fixed>ksactive" ("_position" kid) ("_position" k)))
###           ("_Finset"
###             ("_applC" ("_position" ksns)
###               ("\<^fixed>kscmp" ("_position" kid) ("_position" k)))))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" k) ("_position" bid))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>bbactive" ("_position" bid) ("_position" k)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" bbns)
###           ("\<^fixed>kscmp" ("_position" bid) ("_position" k)))
###         ("_UNION" ("_position" kid)
###           ("_Coll" ("_position" kid)
###             ("\<^fixed>ksactive" ("_position" kid) ("_position" k)))
###           ("_Finset"
###             ("_applC" ("_position" ksns)
###               ("\<^fixed>kscmp" ("_position" kid) ("_position" k)))))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" k) ("_position" bid))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>ksactive" ("_position" bid) ("_position" k)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" bbns)
###           ("\<^fixed>bbcmp" ("_position" bid) ("_position" k)))
###         ("_UNION" ("_position" kid)
###           ("_Coll" ("_position" kid)
###             ("\<^fixed>ksactive" ("_position" kid) ("_position" k)))
###           ("_Finset"
###             ("_applC" ("_position" ksns)
###               ("\<^fixed>kscmp" ("_position" kid) ("_position" k)))))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" k) ("_position" bid))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>bbactive" ("_position" bid) ("_position" k)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" bbns)
###           ("\<^fixed>bbcmp" ("_position" bid) ("_position" k)))
###         ("_UNION" ("_position" kid)
###           ("_Coll" ("_position" kid)
###             ("\<^fixed>ksactive" ("_position" kid) ("_position" k)))
###           ("_Finset"
###             ("_applC" ("_position" ksns)
###               ("\<^fixed>kscmp" ("_position" kid) ("_position" k)))))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" k) ("_position" bid))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>ksactive" ("_position" bid) ("_position" k)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" bbns)
###           ("\<^fixed>kscmp" ("_position" bid) ("_position" k)))
###         ("_UNION" ("_position" kid)
###           ("_Coll" ("_position" kid)
###             ("\<^fixed>bbactive" ("_position" kid) ("_position" k)))
###           ("_Finset"
###             ("_applC" ("_position" ksns)
###               ("\<^fixed>kscmp" ("_position" kid) ("_position" k)))))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" k) ("_position" bid))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>bbactive" ("_position" bid) ("_position" k)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" bbns)
###           ("\<^fixed>kscmp" ("_position" bid) ("_position" k)))
###         ("_UNION" ("_position" kid)
###           ("_Coll" ("_position" kid)
###             ("\<^fixed>bbactive" ("_position" kid) ("_position" k)))
###           ("_Finset"
###             ("_applC" ("_position" ksns)
###               ("\<^fixed>kscmp" ("_position" kid) ("_position" k)))))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" k) ("_position" bid))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>ksactive" ("_position" bid) ("_position" k)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" bbns)
###           ("\<^fixed>bbcmp" ("_position" bid) ("_position" k)))
###         ("_UNION" ("_position" kid)
###           ("_Coll" ("_position" kid)
###             ("\<^fixed>bbactive" ("_position" kid) ("_position" k)))
###           ("_Finset"
###             ("_applC" ("_position" ksns)
###               ("\<^fixed>kscmp" ("_position" kid) ("_position" k)))))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" k) ("_position" bid))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>bbactive" ("_position" bid) ("_position" k)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" bbns)
###           ("\<^fixed>bbcmp" ("_position" bid) ("_position" k)))
###         ("_UNION" ("_position" kid)
###           ("_Coll" ("_position" kid)
###             ("\<^fixed>bbactive" ("_position" kid) ("_position" k)))
###           ("_Finset"
###             ("_applC" ("_position" ksns)
###               ("\<^fixed>kscmp" ("_position" kid) ("_position" k)))))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" k) ("_position" bid))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>ksactive" ("_position" bid) ("_position" k)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" bbns)
###           ("\<^fixed>kscmp" ("_position" bid) ("_position" k)))
###         ("_UNION" ("_position" kid)
###           ("_Coll" ("_position" kid)
###             ("\<^fixed>ksactive" ("_position" kid) ("_position" k)))
###           ("_Finset"
###             ("_applC" ("_position" ksns)
###               ("\<^fixed>bbcmp" ("_position" kid) ("_position" k)))))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" k) ("_position" bid))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>bbactive" ("_position" bid) ("_position" k)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" bbns)
###           ("\<^fixed>kscmp" ("_position" bid) ("_position" k)))
###         ("_UNION" ("_position" kid)
###           ("_Coll" ("_position" kid)
###             ("\<^fixed>ksactive" ("_position" kid) ("_position" k)))
###           ("_Finset"
###             ("_applC" ("_position" ksns)
###               ("\<^fixed>bbcmp" ("_position" kid) ("_position" k)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 77 of "$AFP/Architectural_Design_Patterns/Blackboard.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.all_binder" ("_idts" ("_position" k) ("_position" kid))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>ksactive" ("_position" kid) ("_position" k)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" ksop)
###           ("\<^fixed>kscmp" ("_position" kid) ("_position" k)))
###         ("_UNION" ("_position" bid)
###           ("_Coll" ("_position" bid)
###             ("\<^fixed>ksactive" ("_position" bid) ("_position" k)))
###           ("_Finset"
###             ("_applC" ("_position" bbop)
###               ("\<^fixed>kscmp" ("_position" bid) ("_position" k)))))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" k) ("_position" kid))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>bbactive" ("_position" kid) ("_position" k)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" ksop)
###           ("\<^fixed>kscmp" ("_position" kid) ("_position" k)))
###         ("_UNION" ("_position" bid)
###           ("_Coll" ("_position" bid)
###             ("\<^fixed>ksactive" ("_position" bid) ("_position" k)))
###           ("_Finset"
###             ("_applC" ("_position" bbop)
###               ("\<^fixed>kscmp" ("_position" bid) ("_position" k)))))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" k) ("_position" kid))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>ksactive" ("_position" kid) ("_position" k)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" ksop)
###           ("\<^fixed>bbcmp" ("_position" kid) ("_position" k)))
###         ("_UNION" ("_position" bid)
###           ("_Coll" ("_position" bid)
###             ("\<^fixed>ksactive" ("_position" bid) ("_position" k)))
###           ("_Finset"
###             ("_applC" ("_position" bbop)
###               ("\<^fixed>kscmp" ("_position" bid) ("_position" k)))))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" k) ("_position" kid))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>bbactive" ("_position" kid) ("_position" k)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" ksop)
###           ("\<^fixed>bbcmp" ("_position" kid) ("_position" k)))
###         ("_UNION" ("_position" bid)
###           ("_Coll" ("_position" bid)
###             ("\<^fixed>ksactive" ("_position" bid) ("_position" k)))
###           ("_Finset"
###             ("_applC" ("_position" bbop)
###               ("\<^fixed>kscmp" ("_position" bid) ("_position" k)))))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" k) ("_position" kid))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>ksactive" ("_position" kid) ("_position" k)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" ksop)
###           ("\<^fixed>kscmp" ("_position" kid) ("_position" k)))
###         ("_UNION" ("_position" bid)
###           ("_Coll" ("_position" bid)
###             ("\<^fixed>bbactive" ("_position" bid) ("_position" k)))
###           ("_Finset"
###             ("_applC" ("_position" bbop)
###               ("\<^fixed>kscmp" ("_position" bid) ("_position" k)))))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" k) ("_position" kid))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>bbactive" ("_position" kid) ("_position" k)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" ksop)
###           ("\<^fixed>kscmp" ("_position" kid) ("_position" k)))
###         ("_UNION" ("_position" bid)
###           ("_Coll" ("_position" bid)
###             ("\<^fixed>bbactive" ("_position" bid) ("_position" k)))
###           ("_Finset"
###             ("_applC" ("_position" bbop)
###               ("\<^fixed>kscmp" ("_position" bid) ("_position" k)))))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" k) ("_position" kid))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>ksactive" ("_position" kid) ("_position" k)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" ksop)
###           ("\<^fixed>bbcmp" ("_position" kid) ("_position" k)))
###         ("_UNION" ("_position" bid)
###           ("_Coll" ("_position" bid)
###             ("\<^fixed>bbactive" ("_position" bid) ("_position" k)))
###           ("_Finset"
###             ("_applC" ("_position" bbop)
###               ("\<^fixed>kscmp" ("_position" bid) ("_position" k)))))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" k) ("_position" kid))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>bbactive" ("_position" kid) ("_position" k)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" ksop)
###           ("\<^fixed>bbcmp" ("_position" kid) ("_position" k)))
###         ("_UNION" ("_position" bid)
###           ("_Coll" ("_position" bid)
###             ("\<^fixed>bbactive" ("_position" bid) ("_position" k)))
###           ("_Finset"
###             ("_applC" ("_position" bbop)
###               ("\<^fixed>kscmp" ("_position" bid) ("_position" k)))))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" k) ("_position" kid))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>ksactive" ("_position" kid) ("_position" k)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" ksop)
###           ("\<^fixed>kscmp" ("_position" kid) ("_position" k)))
###         ("_UNION" ("_position" bid)
###           ("_Coll" ("_position" bid)
###             ("\<^fixed>ksactive" ("_position" bid) ("_position" k)))
###           ("_Finset"
###             ("_applC" ("_position" bbop)
###               ("\<^fixed>bbcmp" ("_position" bid) ("_position" k)))))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" k) ("_position" kid))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>bbactive" ("_position" kid) ("_position" k)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" ksop)
###           ("\<^fixed>kscmp" ("_position" kid) ("_position" k)))
###         ("_UNION" ("_position" bid)
###           ("_Coll" ("_position" bid)
###             ("\<^fixed>ksactive" ("_position" bid) ("_position" k)))
###           ("_Finset"
###             ("_applC" ("_position" bbop)
###               ("\<^fixed>bbcmp" ("_position" bid) ("_position" k)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale blackboard
  fixes
    bbactive :: "'bid => cnf => bool"
      (\<open>\<parallel>_\<parallel>\<^bsub>_\<^esub>\<close> [0, 110] 60)
    and
    bbcmp :: "'bid => cnf => 'BB"
      (\<open>\<sigma>\<^bsub>_\<^esub>(_)\<close> [0, 110] 60)
    and
    ksactive :: "'kid => cnf => bool"
      (\<open>\<parallel>_\<parallel>\<^bsub>_\<^esub>\<close> [0, 110] 60)
    and
    kscmp :: "'kid => cnf => 'KS"
      (\<open>\<sigma>\<^bsub>_\<^esub>(_)\<close> [0, 110] 60)
    and bbrp :: "'BB => PROB set subscription set"
    and bbcs :: "'BB => PROB * SOL"
    and kscs :: "'KS => (PROB * SOL) set"
    and ksrp :: "'KS => PROB set subscription"
    and bbns :: "'BB => (PROB * SOL) set"
    and ksns :: "'KS => PROB * SOL"
    and bbop :: "'BB => PROB"
    and ksop :: "'KS => PROB set"
    and prob :: "'kid => PROB"
  assumes
    "blackboard bbactive bbcmp ksactive kscmp bbrp bbcs kscs ksrp bbns ksns
      bbop ksop prob"
### Ambiguous input (line 112 of "$AFP/Architectural_Design_Patterns/Blackboard.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>ksactive" ("_position" kid) ("_position" k)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>bbactive" ("_position" kid) ("_position" k)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 113 of "$AFP/Architectural_Design_Patterns/Blackboard.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_applC" ("_position" bbop)
###       ("\<^fixed>kscmp" ("_position" the_bb) ("_position" k)))
###     ("_applC" ("_position" ksop)
###       ("\<^fixed>kscmp" ("_position" kid) ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_applC" ("_position" bbop)
###       ("\<^fixed>bbcmp" ("_position" the_bb) ("_position" k)))
###     ("_applC" ("_position" ksop)
###       ("\<^fixed>kscmp" ("_position" kid) ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_applC" ("_position" bbop)
###       ("\<^fixed>kscmp" ("_position" the_bb) ("_position" k)))
###     ("_applC" ("_position" ksop)
###       ("\<^fixed>bbcmp" ("_position" kid) ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_applC" ("_position" bbop)
###       ("\<^fixed>bbcmp" ("_position" the_bb) ("_position" k)))
###     ("_applC" ("_position" ksop)
###       ("\<^fixed>bbcmp" ("_position" kid) ("_position" k)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 140 of "$AFP/Architectural_Design_Patterns/Blackboard.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("_Ex_greater_eq" ("_position" n') ("_position" n)
###       ("\<^fixed>bbactive"
###         ("_applC" ("_position" sKs)
###           ("_applC" ("_position" bbop)
###             ("\<^fixed>bbcmp" ("_position" the_bb)
###               ("_applC" ("_position" t) ("_position" n)))))
###         ("_applC" ("_position" t) ("_position" n'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("_Ex_greater_eq" ("_position" n') ("_position" n)
###       ("\<^fixed>ksactive"
###         ("_applC" ("_position" sKs)
###           ("_applC" ("_position" bbop)
###             ("\<^fixed>bbcmp" ("_position" the_bb)
###               ("_applC" ("_position" t) ("_position" n)))))
###         ("_applC" ("_position" t) ("_position" n'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("_Ex_greater_eq" ("_position" n') ("_position" n)
###       ("\<^fixed>bbactive"
###         ("_applC" ("_position" sKs)
###           ("_applC" ("_position" bbop)
###             ("\<^fixed>kscmp" ("_position" the_bb)
###               ("_applC" ("_position" t) ("_position" n)))))
###         ("_applC" ("_position" t) ("_position" n'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("_Ex_greater_eq" ("_position" n') ("_position" n)
###       ("\<^fixed>ksactive"
###         ("_applC" ("_position" sKs)
###           ("_applC" ("_position" bbop)
###             ("\<^fixed>kscmp" ("_position" the_bb)
###               ("_applC" ("_position" t) ("_position" n)))))
###         ("_applC" ("_position" t) ("_position" n'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 142 of "$AFP/Architectural_Design_Patterns/Blackboard.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.Ex_binder" ("_position" P)
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" sub) ("_position" P))
###             ("_applC" ("_position" bbrp)
###               ("\<^fixed>bbcmp" ("_position" the_bb)
###                 ("_applC" ("_position" t) ("_position" n)))))
###           ("\<^const>Set.member" ("_position" p) ("_position" P))))
###       ("_Ex_greater_eq" ("_position" m) ("_position" n)
###         ("\<^const>HOL.eq"
###           ("_tuple" ("_position" p)
###             ("_tuple_arg" ("_applC" ("_position" solve) ("_position" p))))
###           ("_applC" ("_position" bbcs)
###             ("\<^fixed>bbcmp" ("_position" the_bb)
###               ("_applC" ("_position" t) ("_position" m)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.Ex_binder" ("_position" P)
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" sub) ("_position" P))
###             ("_applC" ("_position" bbrp)
###               ("\<^fixed>kscmp" ("_position" the_bb)
###                 ("_applC" ("_position" t) ("_position" n)))))
###           ("\<^const>Set.member" ("_position" p) ("_position" P))))
###       ("_Ex_greater_eq" ("_position" m) ("_position" n)
###         ("\<^const>HOL.eq"
###           ("_tuple" ("_position" p)
###             ("_tuple_arg" ("_applC" ("_position" solve) ("_position" p))))
###           ("_applC" ("_position" bbcs)
###             ("\<^fixed>bbcmp" ("_position" the_bb)
###               ("_applC" ("_position" t) ("_position" m)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.Ex_binder" ("_position" P)
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" sub) ("_position" P))
###             ("_applC" ("_position" bbrp)
###               ("\<^fixed>bbcmp" ("_position" the_bb)
###                 ("_applC" ("_position" t) ("_position" n)))))
###           ("\<^const>Set.member" ("_position" p) ("_position" P))))
###       ("_Ex_greater_eq" ("_position" m) ("_position" n)
###         ("\<^const>HOL.eq"
###           ("_tuple" ("_position" p)
###             ("_tuple_arg" ("_applC" ("_position" solve) ("_position" p))))
###           ("_applC" ("_position" bbcs)
###             ("\<^fixed>kscmp" ("_position" the_bb)
###               ("_applC" ("_position" t) ("_position" m)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.Ex_binder" ("_position" P)
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" sub) ("_position" P))
###             ("_applC" ("_position" bbrp)
###               ("\<^fixed>kscmp" ("_position" the_bb)
###                 ("_applC" ("_position" t) ("_position" n)))))
###           ("\<^const>Set.member" ("_position" p) ("_position" P))))
###       ("_Ex_greater_eq" ("_position" m) ("_position" n)
###         ("\<^const>HOL.eq"
###           ("_tuple" ("_position" p)
###             ("_tuple_arg" ("_applC" ("_position" solve) ("_position" p))))
###           ("_applC" ("_position" bbcs)
###             ("\<^fixed>kscmp" ("_position" the_bb)
###               ("_applC" ("_position" t) ("_position" m)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 540 of "$AFP/Architectural_Design_Patterns/Blackboard.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("_Ex_greater_eq" ("_position" n') ("_position" n)
###       ("\<^fixed>bbactive"
###         ("_applC" ("_position" sKs)
###           ("_applC" ("_position" bbop)
###             ("\<^fixed>bbcmp" ("_position" the_bb)
###               ("_applC" ("_position" t) ("_position" n)))))
###         ("_applC" ("_position" t) ("_position" n'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("_Ex_greater_eq" ("_position" n') ("_position" n)
###       ("\<^fixed>ksactive"
###         ("_applC" ("_position" sKs)
###           ("_applC" ("_position" bbop)
###             ("\<^fixed>bbcmp" ("_position" the_bb)
###               ("_applC" ("_position" t) ("_position" n)))))
###         ("_applC" ("_position" t) ("_position" n'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("_Ex_greater_eq" ("_position" n') ("_position" n)
###       ("\<^fixed>bbactive"
###         ("_applC" ("_position" sKs)
###           ("_applC" ("_position" bbop)
###             ("\<^fixed>kscmp" ("_position" the_bb)
###               ("_applC" ("_position" t) ("_position" n)))))
###         ("_applC" ("_position" t) ("_position" n'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("_Ex_greater_eq" ("_position" n') ("_position" n)
###       ("\<^fixed>ksactive"
###         ("_applC" ("_position" sKs)
###           ("_applC" ("_position" bbop)
###             ("\<^fixed>kscmp" ("_position" the_bb)
###               ("_applC" ("_position" t) ("_position" n)))))
###         ("_applC" ("_position" t) ("_position" n'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 542 of "$AFP/Architectural_Design_Patterns/Blackboard.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.All_binder" ("_position" P)
###       ("\<^const>HOL.implies"
###         ("\<^const>Set.member" ("_applC" ("_position" sub) ("_position" P))
###           ("_applC" ("_position" bbrp)
###             ("\<^fixed>kscmp" ("_position" the_bb)
###               ("_applC" ("_position" t) ("_position" n)))))
###         ("_Ball" ("_position" p) ("_position" P)
###           ("_Ex_greater_eq" ("_position" m) ("_position" n)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" p)
###                 ("_tuple_arg"
###                   ("_applC" ("_position" solve) ("_position" p))))
###               ("_applC" ("_position" bbcs)
###                 ("\<^fixed>kscmp" ("_position" the_bb)
###                   ("_applC" ("_position" t) ("_position" m)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.All_binder" ("_position" P)
###       ("\<^const>HOL.implies"
###         ("\<^const>Set.member" ("_applC" ("_position" sub) ("_position" P))
###           ("_applC" ("_position" bbrp)
###             ("\<^fixed>bbcmp" ("_position" the_bb)
###               ("_applC" ("_position" t) ("_position" n)))))
###         ("_Ball" ("_position" p) ("_position" P)
###           ("_Ex_greater_eq" ("_position" m) ("_position" n)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" p)
###                 ("_tuple_arg"
###                   ("_applC" ("_position" solve) ("_position" p))))
###               ("_applC" ("_position" bbcs)
###                 ("\<^fixed>kscmp" ("_position" the_bb)
###                   ("_applC" ("_position" t) ("_position" m)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.All_binder" ("_position" P)
###       ("\<^const>HOL.implies"
###         ("\<^const>Set.member" ("_applC" ("_position" sub) ("_position" P))
###           ("_applC" ("_position" bbrp)
###             ("\<^fixed>kscmp" ("_position" the_bb)
###               ("_applC" ("_position" t) ("_position" n)))))
###         ("_Ball" ("_position" p) ("_position" P)
###           ("_Ex_greater_eq" ("_position" m) ("_position" n)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" p)
###                 ("_tuple_arg"
###                   ("_applC" ("_position" solve) ("_position" p))))
###               ("_applC" ("_position" bbcs)
###                 ("\<^fixed>bbcmp" ("_position" the_bb)
###                   ("_applC" ("_position" t) ("_position" m)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n)
###     ("\<^const>HOL.All_binder" ("_position" P)
###       ("\<^const>HOL.implies"
###         ("\<^const>Set.member" ("_applC" ("_position" sub) ("_position" P))
###           ("_applC" ("_position" bbrp)
###             ("\<^fixed>bbcmp" ("_position" the_bb)
###               ("_applC" ("_position" t) ("_position" n)))))
###         ("_Ball" ("_position" p) ("_position" P)
###           ("_Ex_greater_eq" ("_position" m) ("_position" n)
###             ("\<^const>HOL.eq"
###               ("_tuple" ("_position" p)
###                 ("_tuple_arg"
###                   ("_applC" ("_position" solve) ("_position" p))))
###               ("_applC" ("_position" bbcs)
###                 ("\<^fixed>bbcmp" ("_position" the_bb)
###                   ("_applC" ("_position" t) ("_position" m)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Blackboard"
### 1.814s elapsed time, 3.536s cpu time, 0.610s GC time
Loading theory "Draft.BlackboardMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.BlackboardMoreTemplates"
### 0.438s elapsed time, 0.651s cpu time, 0.061s GC time
val it = (): unit
