Loading theory "Draft.Lang" (required by "Draft.TermiMoreTemplates" via "Draft.Termi")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.TermiMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.TermiMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.TermiMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.148s elapsed time, 0.608s cpu time, 0.041s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.TermiMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.208s elapsed time, 0.845s cpu time, 0.041s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.TermiMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.347s elapsed time, 1.391s cpu time, 0.136s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.TermiMoreTemplates" via "Draft.ExtrEqs")
Proofs for inductive predicate(s) "exec"
  Proving monotonicity ...
### Ambiguous input (line 104 of "$AFP/Abstract-Hoare-Logics/While/Lang.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lang.exec" ("_position" s) ("_position" w) ("_position" t)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" b) ("_position" c))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" w)
###             ("\<^const>Lang.com.While" ("_position" b)
###               ("\<^const>HOL.conj" ("_position" c)
###                 ("_applC" ("_position" P) ("_position" s)))))
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" s) ("_position" s'))
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" P) ("_position" s))
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" b) ("_position" s))
###                   ("\<^const>Lang.exec" ("_position" s) ("_position" c)
###                     ("_position" s'))))
###               ("_applC" ("_position" P) ("_position" s')))))
###         ("\<^const>HOL.conj" ("_applC" ("_position" P) ("_position" t))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" b) ("_position" t))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lang.exec" ("_position" s) ("_position" w) ("_position" t)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" b) ("_position" c))
###       ("\<^const>HOL.eq" ("_position" w)
###         ("\<^const>Lang.com.While" ("_position" b)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.conj" ("_position" c)
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" P) ("_position" s))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s) ("_position" s'))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.conj"
###                       ("_applC" ("_position" P) ("_position" s))
###                       ("\<^const>HOL.conj"
###                         ("_applC" ("_position" b) ("_position" s))
###                         ("\<^const>Lang.exec" ("_position" s)
###                           ("_position" c) ("_position" s'))))
###                     ("_applC" ("_position" P) ("_position" s'))))))
###             ("\<^const>HOL.conj" ("_applC" ("_position" P) ("_position" t))
###               ("\<^const>HOL.Not"
###                 ("_applC" ("_position" b) ("_position" t))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lang.exec" ("_position" s) ("_position" w) ("_position" t)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" b) ("_position" c))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" w)
###           ("\<^const>Lang.com.While" ("_position" b)
###             ("\<^const>HOL.conj" ("_position" c)
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" P) ("_position" s))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s) ("_position" s'))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.conj"
###                       ("_applC" ("_position" P) ("_position" s))
###                       ("\<^const>HOL.conj"
###                         ("_applC" ("_position" b) ("_position" s))
###                         ("\<^const>Lang.exec" ("_position" s)
###                           ("_position" c) ("_position" s'))))
###                     ("_applC" ("_position" P) ("_position" s'))))))))
###         ("\<^const>HOL.conj" ("_applC" ("_position" P) ("_position" t))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" b) ("_position" t))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lang.exec" ("_position" s) ("_position" w) ("_position" t)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" b) ("_position" c))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" w)
###             ("\<^const>Lang.com.While" ("_position" b) ("_position" c)))
###           ("\<^const>HOL.conj" ("_applC" ("_position" P) ("_position" s))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s) ("_position" s'))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" P) ("_position" s))
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" b) ("_position" s))
###                     ("\<^const>Lang.exec" ("_position" s) ("_position" c)
###                       ("_position" s'))))
###                 ("_applC" ("_position" P) ("_position" s'))))))
###         ("\<^const>HOL.conj" ("_applC" ("_position" P) ("_position" t))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" b) ("_position" t))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lang.exec" ("_position" s) ("_position" w) ("_position" t)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" b) ("_position" c))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" w)
###           ("\<^const>Lang.com.While" ("_position" b)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj" ("_position" c)
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" P) ("_position" s))
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" s) ("_position" s'))
###                     ("\<^const>HOL.implies"
###                       ("\<^const>HOL.conj"
###                         ("_applC" ("_position" P) ("_position" s))
###                         ("\<^const>HOL.conj"
###                           ("_applC" ("_position" b) ("_position" s))
###                           ("\<^const>Lang.exec" ("_position" s)
###                             ("_position" c) ("_position" s'))))
###                       ("_applC" ("_position" P) ("_position" s'))))))
###               ("_applC" ("_position" P) ("_position" t)))))
###         ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" t)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Lang"
### 0.613s elapsed time, 2.439s cpu time, 0.225s GC time
Loading theory "Draft.Termi" (required by "Draft.TermiMoreTemplates")
### Ambiguous input (line 26 of "$AFP/Abstract-Hoare-Logics/While/Termi.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" b) ("_position" s)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>termi" ("_position" c\<^sub>1) ("_position" s)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>termi"
###       ("\<^const>Lang.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" b) ("_position" s)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>termi" ("_position" c\<^sub>1) ("_position" s)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lang.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^fixed>termi" ("_position" c\<^sub>2) ("_position" s)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 27 of "$AFP/Abstract-Hoare-Logics/While/Termi.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" s))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>termi" ("_position" c\<^sub>2) ("_position" s)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>termi"
###       ("\<^const>Lang.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" s))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>termi" ("_position" c\<^sub>2) ("_position" s)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lang.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^fixed>termi" ("_position" c\<^sub>2) ("_position" s)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 29 of "$AFP/Abstract-Hoare-Logics/While/Termi.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" s))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>termi"
###       ("\<^const>Lang.com.While" ("_position" b) ("_position" c))
###       ("_position" s))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" s))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lang.com.While" ("_position" b)
###       ("\<^fixed>termi" ("_position" c) ("_position" s)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 30 of "$AFP/Abstract-Hoare-Logics/While/Termi.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" b) ("_position" s)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>termi" ("_position" c) ("_position" s)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" t)
###             ("\<^const>HOL.implies"
###               ("\<^const>Lang.exec" ("_position" s) ("_position" c)
###                 ("_position" t))
###               ("\<^fixed>termi"
###                 ("\<^const>Lang.com.While" ("_position" b) ("_position" c))
###                 ("_position" t))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>termi"
###       ("\<^const>Lang.com.While" ("_position" b) ("_position" c))
###       ("_position" s))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" b) ("_position" s)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>termi" ("_position" c) ("_position" s)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" t)
###             ("\<^const>HOL.implies"
###               ("\<^const>Lang.exec" ("_position" s) ("_position" c)
###                 ("_position" t))
###               ("\<^const>Lang.com.While" ("_position" b)
###                 ("\<^fixed>termi" ("_position" c) ("_position" t)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>termi"
###       ("\<^const>Lang.com.While" ("_position" b) ("_position" c))
###       ("_position" s))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" b) ("_position" s)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>termi" ("_position" c) ("_position" s)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" t)
###             ("\<^const>HOL.implies"
###               ("\<^const>Lang.exec" ("_position" s) ("_position" c)
###                 ("_position" t))
###               ("\<^fixed>termi"
###                 ("\<^const>Lang.com.While" ("_position" b) ("_position" c))
###                 ("_position" t))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lang.com.While" ("_position" b)
###       ("\<^fixed>termi" ("_position" c) ("_position" s)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" b) ("_position" s)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>termi" ("_position" c) ("_position" s)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" t)
###             ("\<^const>HOL.implies"
###               ("\<^const>Lang.exec" ("_position" s) ("_position" c)
###                 ("_position" t))
###               ("\<^const>Lang.com.While" ("_position" b)
###                 ("\<^fixed>termi" ("_position" c) ("_position" t)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lang.com.While" ("_position" b)
###       ("\<^fixed>termi" ("_position" c) ("_position" s)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "termi"
  Proving monotonicity ...
### Rule already declared as introduction (intro)
### ?f ?s ~= {} ==> Do ?f \<down> ?s
### Rule already declared as introduction (intro)
### ?f ?s ~= {} ==> Do ?f \<down> ?s
### Ambiguous input (line 51 of "$AFP/Abstract-Hoare-Logics/While/Termi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Termi.termi"
###       ("\<^const>Lang.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s))
###     ("\<^const>Termi.termi"
###       ("\<^const>HOL.If" ("_applC" ("_position" b) ("_position" s))
###         ("_position" c\<^sub>1) ("_position" c\<^sub>2))
###       ("_position" s))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Lang.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^const>Termi.termi" ("_position" c\<^sub>2) ("_position" s)))
###     ("\<^const>Termi.termi"
###       ("\<^const>HOL.If" ("_applC" ("_position" b) ("_position" s))
###         ("_position" c\<^sub>1) ("_position" c\<^sub>2))
###       ("_position" s))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 73 of "$AFP/Abstract-Hoare-Logics/While/Termi.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Termi.termi" ("_position" w) ("_position" fk)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" k) ("_idts" ("_position" b) ("_position" c)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" fk)
###             ("_applC" ("_position" f) ("_position" k)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" w)
###               ("\<^const>Lang.com.While" ("_position" b) ("_position" c)))
###             ("\<^const>HOL.All_binder" ("_position" i)
###               ("\<^const>Lang.exec"
###                 ("_applC" ("_position" f) ("_position" i)) ("_position" c)
###                 ("_applC" ("_position" f)
###                   ("_applC" ("_position" Suc) ("_position" i)))))))
###         ("\<^const>HOL.Ex_binder" ("_position" i)
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" b)
###               ("_applC" ("_position" f) ("_position" i)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Termi.termi" ("_position" w) ("_position" fk)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" k) ("_idts" ("_position" b) ("_position" c)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" fk)
###             ("_applC" ("_position" f) ("_position" k)))
###           ("\<^const>HOL.eq" ("_position" w)
###             ("\<^const>Lang.com.While" ("_position" b)
###               ("\<^const>HOL.conj" ("_position" c)
###                 ("\<^const>HOL.All_binder" ("_position" i)
###                   ("\<^const>Lang.exec"
###                     ("_applC" ("_position" f) ("_position" i))
###                     ("_position" c)
###                     ("_applC" ("_position" f)
###                       ("_applC" ("_position" Suc) ("_position" i)))))))))
###         ("\<^const>HOL.Ex_binder" ("_position" i)
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" b)
###               ("_applC" ("_position" f) ("_position" i)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Termi.termi" ("_position" w) ("_position" fk)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" k) ("_idts" ("_position" b) ("_position" c)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" fk)
###           ("_applC" ("_position" f) ("_position" k)))
###         ("\<^const>HOL.eq" ("_position" w)
###           ("\<^const>Lang.com.While" ("_position" b)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj" ("_position" c)
###                 ("\<^const>HOL.All_binder" ("_position" i)
###                   ("\<^const>Lang.exec"
###                     ("_applC" ("_position" f) ("_position" i))
###                     ("_position" c)
###                     ("_applC" ("_position" f)
###                       ("_applC" ("_position" Suc) ("_position" i))))))
###               ("\<^const>HOL.Ex_binder" ("_position" i)
###                 ("\<^const>HOL.Not"
###                   ("_applC" ("_position" b)
###                     ("_applC" ("_position" f) ("_position" i))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 86 of "$AFP/Abstract-Hoare-Logics/While/Termi.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wf)
###     ("_Coll" ("_pattern" ("_position" t) ("_position" s))
###       ("\<^const>Lang.exec"
###         ("\<^const>Lang.com.While" ("_position" b)
###           ("\<^const>HOL.conj"
###             ("\<^const>Termi.termi" ("_position" c) ("_position" s))
###             ("\<^const>HOL.conj" ("_applC" ("_position" b) ("_position" s))
###               ("_position" s))))
###         ("_position" c) ("_position" t)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wf)
###     ("_Coll" ("_pattern" ("_position" t) ("_position" s))
###       ("\<^const>HOL.conj"
###         ("\<^const>Termi.termi"
###           ("\<^const>Lang.com.While" ("_position" b) ("_position" c))
###           ("_position" s))
###         ("\<^const>HOL.conj" ("_applC" ("_position" b) ("_position" s))
###           ("\<^const>Lang.exec" ("_position" s) ("_position" c)
###             ("_position" t)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wf)
###     ("_Coll" ("_pattern" ("_position" t) ("_position" s))
###       ("\<^const>HOL.conj"
###         ("\<^const>Lang.com.While" ("_position" b)
###           ("\<^const>Termi.termi" ("_position" c) ("_position" s)))
###         ("\<^const>HOL.conj" ("_applC" ("_position" b) ("_position" s))
###           ("\<^const>Lang.exec" ("_position" s) ("_position" c)
###             ("_position" t)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wf)
###     ("_Coll" ("_pattern" ("_position" t) ("_position" s))
###       ("\<^const>Lang.com.While" ("_position" b)
###         ("\<^const>HOL.conj"
###           ("\<^const>Termi.termi" ("_position" c) ("_position" s))
###           ("\<^const>HOL.conj" ("_applC" ("_position" b) ("_position" s))
###             ("\<^const>Lang.exec" ("_position" s) ("_position" c)
###               ("_position" t))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wf)
###     ("_Coll" ("_pattern" ("_position" t) ("_position" s))
###       ("\<^const>HOL.conj"
###         ("\<^const>Lang.com.While" ("_position" b)
###           ("\<^const>HOL.conj"
###             ("\<^const>Termi.termi" ("_position" c) ("_position" s))
###             ("_applC" ("_position" b) ("_position" s))))
###         ("\<^const>Lang.exec" ("_position" s) ("_position" c)
###           ("_position" t))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Termi"
### 0.132s elapsed time, 0.518s cpu time, 0.066s GC time
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.104s elapsed time, 3.841s cpu time, 0.894s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.125s elapsed time, 3.655s cpu time, 0.842s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.954s elapsed time, 5.139s cpu time, 1.003s GC time
Loading theory "Draft.Templates" (required by "Draft.TermiMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.047s elapsed time, 0.062s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.TermiMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.444s elapsed time, 0.482s cpu time, 0.046s GC time
Loading theory "Draft.TermiMoreTemplates"
val templateLemmas =
   [("Termi.wf_termi",
     "wf {(t, s). WHILE ?b DO ?c \<down> s & ?b s & s -?c\<rightarrow> t}",
     template_predicate
      (
         template_app
          (template_hole 6,
           template_app
            (template_hole 5, template_app (template_hole 4, t_empty)))
         )),
    ("Termi.termi_while",
     "[| WHILE ?b DO ?c \<down> ?f ?k;
         ALL i. ?f i -?c\<rightarrow> ?f (Suc i) |]
      ==> EX i. ~ ?b (?f i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_app (template_var 1, template_var 0))
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Termi.termi_while_lemma",
     "[| ?w \<down> ?fk;
         ?fk = ?f ?k &
         ?w = WHILE ?b DO ?c & (ALL i. ?f i -?c\<rightarrow> ?f (Suc i)) |]
      ==> EX i. ~ ?b (?f i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_app (template_var 3, template_var 2))),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 6, template_var 5),
                    template_app
                     (template_app (template_hole 5, template_var 1),
                      template_var 0))),
                template_app (template_hole 4, t_empty)))
            )],
       template_predicate (template_app (template_hole 1, t_empty))))]:
   (string * thm * template) list
### theory "Draft.TermiMoreTemplates"
### 0.327s elapsed time, 0.486s cpu time, 0.076s GC time
val it = (): unit
