Loading theory "Draft.PLang" (required by "Draft.PHoareTotalMoreTemplates" via "Draft.PHoareTotal" via "Draft.PHoare")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.PHoareTotalMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.PHoareTotalMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.PHoareTotalMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.125s elapsed time, 0.515s cpu time, 0.043s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.PHoareTotalMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.258s elapsed time, 1.042s cpu time, 0.043s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.PHoareTotalMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.335s elapsed time, 1.338s cpu time, 0.143s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.PHoareTotalMoreTemplates" via "Draft.ExtrEqs")
Proofs for inductive predicate(s) "exec"
  Proving monotonicity ...
### Ambiguous input (line 99 of "$AFP/Abstract-Hoare-Logics/Proc/PLang.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" t)
###       ("_applC" ("_position" f) ("_position" s))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>execn" ("_position" s)
###       ("_applC" ("_position" Do) ("_position" f)) ("_position" n)
###       ("_position" t))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" t)
###       ("_applC" ("_position" f) ("_position" s))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec"
###       ("\<^const>Groups.minus_class.minus" ("_position" s)
###         ("_applC" ("_position" Do) ("_position" f)))
###       ("_position" n) ("_position" t))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" t)
###       ("_applC" ("_position" f) ("_position" s))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" Do) ("_position" f)) ("_position" n))
###       ("_position" t))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 101 of "$AFP/Abstract-Hoare-Logics/Proc/PLang.thy") produces 18 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PLang.exec" ("_position" s0)
###         ("\<^const>Groups.minus_class.minus" ("_position" c1)
###           ("_position" n))
###         ("_position" s1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>PLang.exec" ("_position" s1)
###           ("\<^const>Groups.minus_class.minus" ("_position" c2)
###             ("_position" n))
###           ("_position" s2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>execn" ("_position" s0)
###       ("\<^const>PLang.com.Semi" ("_position" c1) ("_position" c2))
###       ("_position" n) ("_position" s2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>execn" ("_position" s0) ("_position" c1) ("_position" n)
###         ("_position" s1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>PLang.exec" ("_position" s1)
###           ("\<^const>Groups.minus_class.minus" ("_position" c2)
###             ("_position" n))
###           ("_position" s2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>execn" ("_position" s0)
###       ("\<^const>PLang.com.Semi" ("_position" c1) ("_position" c2))
###       ("_position" n) ("_position" s2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PLang.exec"
###         ("\<^const>Groups.minus_class.minus" ("_position" s0)
###           ("_position" c1))
###         ("_position" n) ("_position" s1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>PLang.exec" ("_position" s1)
###           ("\<^const>Groups.minus_class.minus" ("_position" c2)
###             ("_position" n))
###           ("_position" s2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>execn" ("_position" s0)
###       ("\<^const>PLang.com.Semi" ("_position" c1) ("_position" c2))
###       ("_position" n) ("_position" s2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PLang.exec" ("_position" s0)
###         ("\<^const>Groups.minus_class.minus" ("_position" c1)
###           ("_position" n))
###         ("_position" s1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>execn" ("_position" s1) ("_position" c2) ("_position" n)
###           ("_position" s2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>execn" ("_position" s0)
###       ("\<^const>PLang.com.Semi" ("_position" c1) ("_position" c2))
###       ("_position" n) ("_position" s2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>execn" ("_position" s0) ("_position" c1) ("_position" n)
###         ("_position" s1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>execn" ("_position" s1) ("_position" c2) ("_position" n)
###           ("_position" s2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>execn" ("_position" s0)
###       ("\<^const>PLang.com.Semi" ("_position" c1) ("_position" c2))
###       ("_position" n) ("_position" s2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PLang.exec"
###         ("\<^const>Groups.minus_class.minus" ("_position" s0)
###           ("_position" c1))
###         ("_position" n) ("_position" s1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>execn" ("_position" s1) ("_position" c2) ("_position" n)
###           ("_position" s2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>execn" ("_position" s0)
###       ("\<^const>PLang.com.Semi" ("_position" c1) ("_position" c2))
###       ("_position" n) ("_position" s2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PLang.exec" ("_position" s0)
###         ("\<^const>Groups.minus_class.minus" ("_position" c1)
###           ("_position" n))
###         ("_position" s1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>PLang.exec"
###           ("\<^const>Groups.minus_class.minus" ("_position" s1)
###             ("_position" c2))
###           ("_position" n) ("_position" s2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>execn" ("_position" s0)
###       ("\<^const>PLang.com.Semi" ("_position" c1) ("_position" c2))
###       ("_position" n) ("_position" s2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>execn" ("_position" s0) ("_position" c1) ("_position" n)
###         ("_position" s1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>PLang.exec"
###           ("\<^const>Groups.minus_class.minus" ("_position" s1)
###             ("_position" c2))
###           ("_position" n) ("_position" s2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>execn" ("_position" s0)
###       ("\<^const>PLang.com.Semi" ("_position" c1) ("_position" c2))
###       ("_position" n) ("_position" s2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PLang.exec"
###         ("\<^const>Groups.minus_class.minus" ("_position" s0)
###           ("_position" c1))
###         ("_position" n) ("_position" s1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>PLang.exec"
###           ("\<^const>Groups.minus_class.minus" ("_position" s1)
###             ("_position" c2))
###           ("_position" n) ("_position" s2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>execn" ("_position" s0)
###       ("\<^const>PLang.com.Semi" ("_position" c1) ("_position" c2))
###       ("_position" n) ("_position" s2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PLang.exec" ("_position" s0)
###         ("\<^const>Groups.minus_class.minus" ("_position" c1)
###           ("_position" n))
###         ("_position" s1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>PLang.exec" ("_position" s1)
###           ("\<^const>Groups.minus_class.minus" ("_position" c2)
###             ("_position" n))
###           ("_position" s2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec" ("_position" s0)
###       ("\<^const>PLang.com.Semi" ("_position" c1)
###         ("\<^const>Groups.minus_class.minus" ("_position" c2)
###           ("_position" n)))
###       ("_position" s2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 103 of "$AFP/Abstract-Hoare-Logics/Proc/PLang.thy") produces 6 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" b) ("_position" s)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>PLang.exec" ("_position" s)
###           ("\<^const>Groups.minus_class.minus" ("_position" c1)
###             ("_position" n))
###           ("_position" t)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>execn" ("_position" s)
###       ("\<^const>PLang.com.Cond" ("_position" b) ("_position" c1)
###         ("_position" c2))
###       ("_position" n) ("_position" t))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" b) ("_position" s)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>PLang.exec"
###           ("\<^const>Groups.minus_class.minus" ("_position" s)
###             ("_position" c1))
###           ("_position" n) ("_position" t)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>execn" ("_position" s)
###       ("\<^const>PLang.com.Cond" ("_position" b) ("_position" c1)
###         ("_position" c2))
###       ("_position" n) ("_position" t))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" b) ("_position" s)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>execn" ("_position" s) ("_position" c1) ("_position" n)
###           ("_position" t)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>execn" ("_position" s)
###       ("\<^const>PLang.com.Cond" ("_position" b) ("_position" c1)
###         ("_position" c2))
###       ("_position" n) ("_position" t))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" b) ("_position" s)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>PLang.exec" ("_position" s)
###           ("\<^const>Groups.minus_class.minus" ("_position" c1)
###             ("_position" n))
###           ("_position" t)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>PLang.com.Cond" ("_position" b) ("_position" c1)
###         ("\<^const>Groups.minus_class.minus" ("_position" c2)
###           ("_position" n)))
###       ("_position" t))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" b) ("_position" s)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>PLang.exec"
###           ("\<^const>Groups.minus_class.minus" ("_position" s)
###             ("_position" c1))
###           ("_position" n) ("_position" t)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>PLang.com.Cond" ("_position" b) ("_position" c1)
###         ("\<^const>Groups.minus_class.minus" ("_position" c2)
###           ("_position" n)))
###       ("_position" t))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" b) ("_position" s)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>execn" ("_position" s) ("_position" c1) ("_position" n)
###           ("_position" t)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>PLang.com.Cond" ("_position" b) ("_position" c1)
###         ("\<^const>Groups.minus_class.minus" ("_position" c2)
###           ("_position" n)))
###       ("_position" t))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 104 of "$AFP/Abstract-Hoare-Logics/Proc/PLang.thy") produces 6 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" s))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>PLang.exec" ("_position" s)
###           ("\<^const>Groups.minus_class.minus" ("_position" c2)
###             ("_position" n))
###           ("_position" t)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>execn" ("_position" s)
###       ("\<^const>PLang.com.Cond" ("_position" b) ("_position" c1)
###         ("_position" c2))
###       ("_position" n) ("_position" t))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" s))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>execn" ("_position" s) ("_position" c2) ("_position" n)
###           ("_position" t)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>execn" ("_position" s)
###       ("\<^const>PLang.com.Cond" ("_position" b) ("_position" c1)
###         ("_position" c2))
###       ("_position" n) ("_position" t))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" s))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>PLang.exec"
###           ("\<^const>Groups.minus_class.minus" ("_position" s)
###             ("_position" c2))
###           ("_position" n) ("_position" t)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>execn" ("_position" s)
###       ("\<^const>PLang.com.Cond" ("_position" b) ("_position" c1)
###         ("_position" c2))
###       ("_position" n) ("_position" t))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" s))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>PLang.exec" ("_position" s)
###           ("\<^const>Groups.minus_class.minus" ("_position" c2)
###             ("_position" n))
###           ("_position" t)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>PLang.com.Cond" ("_position" b) ("_position" c1)
###         ("\<^const>Groups.minus_class.minus" ("_position" c2)
###           ("_position" n)))
###       ("_position" t))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" s))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>execn" ("_position" s) ("_position" c2) ("_position" n)
###           ("_position" t)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>PLang.com.Cond" ("_position" b) ("_position" c1)
###         ("\<^const>Groups.minus_class.minus" ("_position" c2)
###           ("_position" n)))
###       ("_position" t))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" s))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>PLang.exec"
###           ("\<^const>Groups.minus_class.minus" ("_position" s)
###             ("_position" c2))
###           ("_position" n) ("_position" t)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>PLang.com.Cond" ("_position" b) ("_position" c1)
###         ("\<^const>Groups.minus_class.minus" ("_position" c2)
###           ("_position" n)))
###       ("_position" t))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 106 of "$AFP/Abstract-Hoare-Logics/Proc/PLang.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" s))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>execn" ("_position" s)
###       ("\<^const>PLang.com.While" ("_position" b) ("_position" c))
###       ("_position" n) ("_position" s))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" s))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>PLang.com.While" ("_position" b)
###         ("\<^const>Groups.minus_class.minus" ("_position" c)
###           ("_position" n)))
###       ("_position" s))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 107 of "$AFP/Abstract-Hoare-Logics/Proc/PLang.thy") produces 12 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" b) ("_position" s)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>PLang.exec" ("_position" s)
###           ("\<^const>Groups.minus_class.minus" ("_position" c)
###             ("_position" n))
###           ("_position" t)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>PLang.exec" ("_position" t)
###             ("\<^const>PLang.com.While" ("_position" b)
###               ("\<^const>Groups.minus_class.minus" ("_position" c)
###                 ("_position" n)))
###             ("_position" u))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>execn" ("_position" s)
###       ("\<^const>PLang.com.While" ("_position" b) ("_position" c))
###       ("_position" n) ("_position" u))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" b) ("_position" s)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>PLang.exec"
###           ("\<^const>Groups.minus_class.minus" ("_position" s)
###             ("_position" c))
###           ("_position" n) ("_position" t)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>PLang.exec" ("_position" t)
###             ("\<^const>PLang.com.While" ("_position" b)
###               ("\<^const>Groups.minus_class.minus" ("_position" c)
###                 ("_position" n)))
###             ("_position" u))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>execn" ("_position" s)
###       ("\<^const>PLang.com.While" ("_position" b) ("_position" c))
###       ("_position" n) ("_position" u))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" b) ("_position" s)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>execn" ("_position" s) ("_position" c) ("_position" n)
###           ("_position" t)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>PLang.exec" ("_position" t)
###             ("\<^const>PLang.com.While" ("_position" b)
###               ("\<^const>Groups.minus_class.minus" ("_position" c)
###                 ("_position" n)))
###             ("_position" u))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>execn" ("_position" s)
###       ("\<^const>PLang.com.While" ("_position" b) ("_position" c))
###       ("_position" n) ("_position" u))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" b) ("_position" s)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>PLang.exec" ("_position" s)
###           ("\<^const>Groups.minus_class.minus" ("_position" c)
###             ("_position" n))
###           ("_position" t)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>execn" ("_position" t)
###             ("\<^const>PLang.com.While" ("_position" b) ("_position" c))
###             ("_position" n) ("_position" u))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>execn" ("_position" s)
###       ("\<^const>PLang.com.While" ("_position" b) ("_position" c))
###       ("_position" n) ("_position" u))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" b) ("_position" s)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>PLang.exec"
###           ("\<^const>Groups.minus_class.minus" ("_position" s)
###             ("_position" c))
###           ("_position" n) ("_position" t)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>execn" ("_position" t)
###             ("\<^const>PLang.com.While" ("_position" b) ("_position" c))
###             ("_position" n) ("_position" u))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>execn" ("_position" s)
###       ("\<^const>PLang.com.While" ("_position" b) ("_position" c))
###       ("_position" n) ("_position" u))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" b) ("_position" s)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>execn" ("_position" s) ("_position" c) ("_position" n)
###           ("_position" t)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>execn" ("_position" t)
###             ("\<^const>PLang.com.While" ("_position" b) ("_position" c))
###             ("_position" n) ("_position" u))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>execn" ("_position" s)
###       ("\<^const>PLang.com.While" ("_position" b) ("_position" c))
###       ("_position" n) ("_position" u))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" b) ("_position" s)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>PLang.exec" ("_position" s)
###           ("\<^const>Groups.minus_class.minus" ("_position" c)
###             ("_position" n))
###           ("_position" t)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>PLang.exec" ("_position" t)
###             ("\<^const>PLang.com.While" ("_position" b)
###               ("\<^const>Groups.minus_class.minus" ("_position" c)
###                 ("_position" n)))
###             ("_position" u))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>PLang.com.While" ("_position" b)
###         ("\<^const>Groups.minus_class.minus" ("_position" c)
###           ("_position" n)))
###       ("_position" u))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" b) ("_position" s)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>PLang.exec"
###           ("\<^const>Groups.minus_class.minus" ("_position" s)
###             ("_position" c))
###           ("_position" n) ("_position" t)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>PLang.exec" ("_position" t)
###             ("\<^const>PLang.com.While" ("_position" b)
###               ("\<^const>Groups.minus_class.minus" ("_position" c)
###                 ("_position" n)))
###             ("_position" u))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>PLang.com.While" ("_position" b)
###         ("\<^const>Groups.minus_class.minus" ("_position" c)
###           ("_position" n)))
###       ("_position" u))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" b) ("_position" s)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>execn" ("_position" s) ("_position" c) ("_position" n)
###           ("_position" t)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>PLang.exec" ("_position" t)
###             ("\<^const>PLang.com.While" ("_position" b)
###               ("\<^const>Groups.minus_class.minus" ("_position" c)
###                 ("_position" n)))
###             ("_position" u))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>PLang.com.While" ("_position" b)
###         ("\<^const>Groups.minus_class.minus" ("_position" c)
###           ("_position" n)))
###       ("_position" u))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" b) ("_position" s)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>PLang.exec" ("_position" s)
###           ("\<^const>Groups.minus_class.minus" ("_position" c)
###             ("_position" n))
###           ("_position" t)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>execn" ("_position" t)
###             ("\<^const>PLang.com.While" ("_position" b) ("_position" c))
###             ("_position" n) ("_position" u))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>PLang.com.While" ("_position" b)
###         ("\<^const>Groups.minus_class.minus" ("_position" c)
###           ("_position" n)))
###       ("_position" u))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  left :: "'a tree => 'a tree"
### Ambiguous input (line 109 of "$AFP/Abstract-Hoare-Logics/Proc/PLang.thy") produces 9 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec"
###       ("\<^const>Groups.minus_class.minus" ("_position" s)
###         ("_position" body))
###       ("_position" n) ("_position" t)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>Groups.minus_class.minus" ("_position" CALL)
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("_position" t))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>execn" ("_position" s) ("_position" body) ("_position" n)
###       ("_position" t)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>Groups.minus_class.minus" ("_position" CALL)
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("_position" t))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>Groups.minus_class.minus" ("_position" body)
###         ("_position" n))
###       ("_position" t)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>Groups.minus_class.minus" ("_position" CALL)
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("_position" t))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec"
###       ("\<^const>Groups.minus_class.minus" ("_position" s)
###         ("_position" body))
###       ("_position" n) ("_position" t)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec"
###       ("\<^const>Groups.minus_class.minus" ("_position" s)
###         ("_position" CALL))
###       ("_applC" ("_position" Suc) ("_position" n)) ("_position" t))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>execn" ("_position" s) ("_position" body) ("_position" n)
###       ("_position" t)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec"
###       ("\<^const>Groups.minus_class.minus" ("_position" s)
###         ("_position" CALL))
###       ("_applC" ("_position" Suc) ("_position" n)) ("_position" t))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>Groups.minus_class.minus" ("_position" body)
###         ("_position" n))
###       ("_position" t)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec"
###       ("\<^const>Groups.minus_class.minus" ("_position" s)
###         ("_position" CALL))
###       ("_applC" ("_position" Suc) ("_position" n)) ("_position" t))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec"
###       ("\<^const>Groups.minus_class.minus" ("_position" s)
###         ("_position" body))
###       ("_position" n) ("_position" t)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>execn" ("_position" s) ("_position" CALL)
###       ("_applC" ("_position" Suc) ("_position" n)) ("_position" t))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>execn" ("_position" s) ("_position" body) ("_position" n)
###       ("_position" t)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>execn" ("_position" s) ("_position" CALL)
###       ("_applC" ("_position" Suc) ("_position" n)) ("_position" t))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>Groups.minus_class.minus" ("_position" body)
###         ("_position" n))
###       ("_position" t)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>execn" ("_position" s) ("_position" CALL)
###       ("_applC" ("_position" Suc) ("_position" n)) ("_position" t))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  right :: "'a tree => 'a tree"
### Ambiguous input (line 111 of "$AFP/Abstract-Hoare-Logics/Proc/PLang.thy") produces 6 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" f) ("_position" s)) ("_position" c))
###       ("_position" n) ("_position" t)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>execn" ("_position" s)
###       ("\<^const>PLang.com.Local" ("_position" f) ("_position" c)
###         ("_position" g))
###       ("_position" n)
###       ("_applC" ("_position" g)
###         ("_cargs" ("_position" s) ("_position" t))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>execn" ("_applC" ("_position" f) ("_position" s))
###       ("_position" c) ("_position" n) ("_position" t)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>execn" ("_position" s)
###       ("\<^const>PLang.com.Local" ("_position" f) ("_position" c)
###         ("_position" g))
###       ("_position" n)
###       ("_applC" ("_position" g)
###         ("_cargs" ("_position" s) ("_position" t))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec" ("_applC" ("_position" f) ("_position" s))
###       ("\<^const>Groups.minus_class.minus" ("_position" c) ("_position" n))
###       ("_position" t)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>execn" ("_position" s)
###       ("\<^const>PLang.com.Local" ("_position" f) ("_position" c)
###         ("_position" g))
###       ("_position" n)
###       ("_applC" ("_position" g)
###         ("_cargs" ("_position" s) ("_position" t))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec"
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" f) ("_position" s)) ("_position" c))
###       ("_position" n) ("_position" t)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>PLang.com.Local" ("_position" f) ("_position" c)
###         ("\<^const>Groups.minus_class.minus" ("_position" g)
###           ("_position" n)))
###       ("_applC" ("_position" g)
###         ("_cargs" ("_position" s) ("_position" t))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>execn" ("_applC" ("_position" f) ("_position" s))
###       ("_position" c) ("_position" n) ("_position" t)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>PLang.com.Local" ("_position" f) ("_position" c)
###         ("\<^const>Groups.minus_class.minus" ("_position" g)
###           ("_position" n)))
###       ("_applC" ("_position" g)
###         ("_cargs" ("_position" s) ("_position" t))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec" ("_applC" ("_position" f) ("_position" s))
###       ("\<^const>Groups.minus_class.minus" ("_position" c) ("_position" n))
###       ("_position" t)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>PLang.com.Local" ("_position" f) ("_position" c)
###         ("\<^const>Groups.minus_class.minus" ("_position" g)
###           ("_position" n)))
###       ("_applC" ("_position" g)
###         ("_cargs" ("_position" s) ("_position" t))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "execn"
  Proving monotonicity ...
consts
  shift :: "'a list => 'a stream => 'a stream"
### Ambiguous input (line 114 of "$AFP/Abstract-Hoare-Logics/Proc/PLang.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>PLang.execn" ("_position" s)
###       ("_applC" ("_position" Do) ("_position" f)) ("_position" n)
###       ("_position" t))
###     ("\<^const>Set.member" ("_position" t)
###       ("_applC" ("_position" f) ("_position" s)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>PLang.exec"
###       ("\<^const>Groups.minus_class.minus" ("_position" s)
###         ("_applC" ("_position" Do) ("_position" f)))
###       ("_position" n) ("_position" t))
###     ("\<^const>Set.member" ("_position" t)
###       ("_applC" ("_position" f) ("_position" s)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" Do) ("_position" f)) ("_position" n))
###       ("_position" t))
###     ("\<^const>Set.member" ("_position" t)
###       ("_applC" ("_position" f) ("_position" s)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
### Ambiguous input (line 117 of "$AFP/Abstract-Hoare-Logics/Proc/PLang.thy") produces 24 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>PLang.com.Semi" ("_position" c1)
###         ("\<^const>Groups.minus_class.minus" ("_position" c2)
###           ("_position" n)))
###       ("_position" u))
###     ("\<^const>HOL.Ex_binder" ("_position" t)
###       ("\<^const>PLang.exec" ("_position" s)
###         ("\<^const>HOL.conj"
###           ("\<^const>PLang.exec" ("_position" c1) ("_position" n)
###             ("_position" t))
###           ("\<^const>Groups.minus_class.minus"
###             ("\<^const>Groups.minus_class.minus" ("_position" t)
###               ("_position" c2))
###             ("_position" n)))
###         ("_position" u)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>PLang.execn" ("_position" s)
###       ("\<^const>PLang.com.Semi" ("_position" c1) ("_position" c2))
###       ("_position" n) ("_position" u))
###     ("\<^const>HOL.Ex_binder" ("_position" t)
###       ("\<^const>PLang.exec" ("_position" s)
###         ("\<^const>HOL.conj"
###           ("\<^const>PLang.exec" ("_position" c1) ("_position" n)
###             ("_position" t))
###           ("\<^const>Groups.minus_class.minus"
###             ("\<^const>Groups.minus_class.minus" ("_position" t)
###               ("_position" c2))
###             ("_position" n)))
###         ("_position" u)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>PLang.com.Semi" ("_position" c1)
###         ("\<^const>Groups.minus_class.minus" ("_position" c2)
###           ("_position" n)))
###       ("_position" u))
###     ("\<^const>HOL.Ex_binder" ("_position" t)
###       ("\<^const>HOL.conj"
###         ("\<^const>PLang.exec" ("_position" s)
###           ("\<^const>Groups.minus_class.minus" ("_position" c1)
###             ("_position" n))
###           ("_position" t))
###         ("\<^const>PLang.exec" ("_position" t)
###           ("\<^const>Groups.minus_class.minus" ("_position" c2)
###             ("_position" n))
###           ("_position" u))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>PLang.execn" ("_position" s)
###       ("\<^const>PLang.com.Semi" ("_position" c1) ("_position" c2))
###       ("_position" n) ("_position" u))
###     ("\<^const>HOL.Ex_binder" ("_position" t)
###       ("\<^const>HOL.conj"
###         ("\<^const>PLang.exec" ("_position" s)
###           ("\<^const>Groups.minus_class.minus" ("_position" c1)
###             ("_position" n))
###           ("_position" t))
###         ("\<^const>PLang.exec" ("_position" t)
###           ("\<^const>Groups.minus_class.minus" ("_position" c2)
###             ("_position" n))
###           ("_position" u))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>PLang.com.Semi" ("_position" c1)
###         ("\<^const>Groups.minus_class.minus" ("_position" c2)
###           ("_position" n)))
###       ("_position" u))
###     ("\<^const>HOL.Ex_binder" ("_position" t)
###       ("\<^const>HOL.conj"
###         ("\<^const>PLang.exec"
###           ("\<^const>Groups.minus_class.minus" ("_position" s)
###             ("_position" c1))
###           ("_position" n) ("_position" t))
###         ("\<^const>PLang.exec" ("_position" t)
###           ("\<^const>Groups.minus_class.minus" ("_position" c2)
###             ("_position" n))
###           ("_position" u))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>PLang.execn" ("_position" s)
###       ("\<^const>PLang.com.Semi" ("_position" c1) ("_position" c2))
###       ("_position" n) ("_position" u))
###     ("\<^const>HOL.Ex_binder" ("_position" t)
###       ("\<^const>HOL.conj"
###         ("\<^const>PLang.exec"
###           ("\<^const>Groups.minus_class.minus" ("_position" s)
###             ("_position" c1))
###           ("_position" n) ("_position" t))
###         ("\<^const>PLang.exec" ("_position" t)
###           ("\<^const>Groups.minus_class.minus" ("_position" c2)
###             ("_position" n))
###           ("_position" u))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>PLang.com.Semi" ("_position" c1)
###         ("\<^const>Groups.minus_class.minus" ("_position" c2)
###           ("_position" n)))
###       ("_position" u))
###     ("\<^const>HOL.Ex_binder" ("_position" t)
###       ("\<^const>HOL.conj"
###         ("\<^const>PLang.execn" ("_position" s) ("_position" c1)
###           ("_position" n) ("_position" t))
###         ("\<^const>PLang.exec" ("_position" t)
###           ("\<^const>Groups.minus_class.minus" ("_position" c2)
###             ("_position" n))
###           ("_position" u))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>PLang.execn" ("_position" s)
###       ("\<^const>PLang.com.Semi" ("_position" c1) ("_position" c2))
###       ("_position" n) ("_position" u))
###     ("\<^const>HOL.Ex_binder" ("_position" t)
###       ("\<^const>HOL.conj"
###         ("\<^const>PLang.execn" ("_position" s) ("_position" c1)
###           ("_position" n) ("_position" t))
###         ("\<^const>PLang.exec" ("_position" t)
###           ("\<^const>Groups.minus_class.minus" ("_position" c2)
###             ("_position" n))
###           ("_position" u))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>PLang.com.Semi" ("_position" c1)
###         ("\<^const>Groups.minus_class.minus" ("_position" c2)
###           ("_position" n)))
###       ("_position" u))
###     ("\<^const>HOL.Ex_binder" ("_position" t)
###       ("\<^const>PLang.execn" ("_position" s)
###         ("\<^const>HOL.conj"
###           ("\<^const>PLang.exec" ("_position" c1) ("_position" n)
###             ("_position" t))
###           ("_position" t))
###         ("\<^const>Groups.minus_class.minus" ("_position" c2)
###           ("_position" n))
###         ("_position" u)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>PLang.execn" ("_position" s)
###       ("\<^const>PLang.com.Semi" ("_position" c1) ("_position" c2))
###       ("_position" n) ("_position" u))
###     ("\<^const>HOL.Ex_binder" ("_position" t)
###       ("\<^const>PLang.execn" ("_position" s)
###         ("\<^const>HOL.conj"
###           ("\<^const>PLang.exec" ("_position" c1) ("_position" n)
###             ("_position" t))
###           ("_position" t))
###         ("\<^const>Groups.minus_class.minus" ("_position" c2)
###           ("_position" n))
###         ("_position" u)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
  Proving monotonicity ...
### Ambiguous input (line 120 of "$AFP/Abstract-Hoare-Logics/Proc/PLang.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>PLang.com.Cond" ("_position" b) ("_position" c)
###         ("\<^const>Groups.minus_class.minus" ("_position" d)
###           ("_position" n)))
###       ("_position" t))
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>HOL.If" ("_applC" ("_position" b) ("_position" s))
###         ("_position" c)
###         ("\<^const>Groups.minus_class.minus" ("_position" d)
###           ("_position" n)))
###       ("_position" t))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>PLang.execn" ("_position" s)
###       ("\<^const>PLang.com.Cond" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("_position" n) ("_position" t))
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>HOL.If" ("_applC" ("_position" b) ("_position" s))
###         ("_position" c)
###         ("\<^const>Groups.minus_class.minus" ("_position" d)
###           ("_position" n)))
###       ("_position" t))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>PLang.com.Cond" ("_position" b) ("_position" c)
###         ("\<^const>Groups.minus_class.minus" ("_position" d)
###           ("_position" n)))
###       ("_position" t))
###     ("\<^const>PLang.execn" ("_position" s)
###       ("\<^const>HOL.If" ("_applC" ("_position" b) ("_position" s))
###         ("_position" c) ("_position" d))
###       ("_position" n) ("_position" t))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>PLang.execn" ("_position" s)
###       ("\<^const>PLang.com.Cond" ("_position" b) ("_position" c)
###         ("_position" d))
###       ("_position" n) ("_position" t))
###     ("\<^const>PLang.execn" ("_position" s)
###       ("\<^const>HOL.If" ("_applC" ("_position" b) ("_position" s))
###         ("_position" c) ("_position" d))
###       ("_position" n) ("_position" t))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 126 of "$AFP/Abstract-Hoare-Logics/Proc/PLang.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>Groups.minus_class.minus" ("_position" CALL)
###         ("\<^const>Groups.zero_class.zero"))
###       ("_position" t))
###     ("_position" False)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>PLang.exec"
###       ("\<^const>Groups.minus_class.minus" ("_position" s)
###         ("_position" CALL))
###       ("\<^const>Groups.zero_class.zero") ("_position" t))
###     ("_position" False)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>PLang.execn" ("_position" s) ("_position" CALL)
###       ("\<^const>Groups.zero_class.zero") ("_position" t))
###     ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 129 of "$AFP/Abstract-Hoare-Logics/Proc/PLang.thy") produces 9 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>PLang.exec"
###       ("\<^const>Groups.minus_class.minus" ("_position" s)
###         ("_position" CALL))
###       ("_applC" ("_position" Suc) ("_position" n)) ("_position" t))
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>Groups.minus_class.minus" ("_position" body)
###         ("_position" n))
###       ("_position" t))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>PLang.execn" ("_position" s) ("_position" CALL)
###       ("_applC" ("_position" Suc) ("_position" n)) ("_position" t))
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>Groups.minus_class.minus" ("_position" body)
###         ("_position" n))
###       ("_position" t))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>Groups.minus_class.minus" ("_position" CALL)
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("_position" t))
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>Groups.minus_class.minus" ("_position" body)
###         ("_position" n))
###       ("_position" t))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>PLang.exec"
###       ("\<^const>Groups.minus_class.minus" ("_position" s)
###         ("_position" CALL))
###       ("_applC" ("_position" Suc) ("_position" n)) ("_position" t))
###     ("\<^const>PLang.exec"
###       ("\<^const>Groups.minus_class.minus" ("_position" s)
###         ("_position" body))
###       ("_position" n) ("_position" t))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>PLang.execn" ("_position" s) ("_position" CALL)
###       ("_applC" ("_position" Suc) ("_position" n)) ("_position" t))
###     ("\<^const>PLang.exec"
###       ("\<^const>Groups.minus_class.minus" ("_position" s)
###         ("_position" body))
###       ("_position" n) ("_position" t))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>Groups.minus_class.minus" ("_position" CALL)
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("_position" t))
###     ("\<^const>PLang.exec"
###       ("\<^const>Groups.minus_class.minus" ("_position" s)
###         ("_position" body))
###       ("_position" n) ("_position" t))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>PLang.exec"
###       ("\<^const>Groups.minus_class.minus" ("_position" s)
###         ("_position" CALL))
###       ("_applC" ("_position" Suc) ("_position" n)) ("_position" t))
###     ("\<^const>PLang.execn" ("_position" s) ("_position" body)
###       ("_position" n) ("_position" t))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>PLang.execn" ("_position" s) ("_position" CALL)
###       ("_applC" ("_position" Suc) ("_position" n)) ("_position" t))
###     ("\<^const>PLang.execn" ("_position" s) ("_position" body)
###       ("_position" n) ("_position" t))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>Groups.minus_class.minus" ("_position" CALL)
###         ("_applC" ("_position" Suc) ("_position" n)))
###       ("_position" t))
###     ("\<^const>PLang.execn" ("_position" s) ("_position" body)
###       ("_position" n) ("_position" t))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 133 of "$AFP/Abstract-Hoare-Logics/Proc/PLang.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>PLang.com.Local" ("_position" f) ("_position" c)
###         ("\<^const>Groups.minus_class.minus" ("_position" g)
###           ("_position" n)))
###       ("_position" u))
###     ("\<^const>HOL.Ex_binder" ("_position" t)
###       ("\<^const>HOL.conj"
###         ("\<^const>PLang.execn" ("_applC" ("_position" f) ("_position" s))
###           ("_position" c) ("_position" n) ("_position" t))
###         ("\<^const>HOL.eq" ("_position" u)
###           ("_applC" ("_position" g)
###             ("_cargs" ("_position" s) ("_position" t))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>PLang.execn" ("_position" s)
###       ("\<^const>PLang.com.Local" ("_position" f) ("_position" c)
###         ("_position" g))
###       ("_position" n) ("_position" u))
###     ("\<^const>HOL.Ex_binder" ("_position" t)
###       ("\<^const>HOL.conj"
###         ("\<^const>PLang.execn" ("_applC" ("_position" f) ("_position" s))
###           ("_position" c) ("_position" n) ("_position" t))
###         ("\<^const>HOL.eq" ("_position" u)
###           ("_applC" ("_position" g)
###             ("_cargs" ("_position" s) ("_position" t))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>PLang.com.Local" ("_position" f) ("_position" c)
###         ("\<^const>Groups.minus_class.minus" ("_position" g)
###           ("_position" n)))
###       ("_position" u))
###     ("\<^const>HOL.Ex_binder" ("_position" t)
###       ("\<^const>HOL.conj"
###         ("\<^const>PLang.exec"
###           ("\<^const>Groups.minus_class.minus"
###             ("_applC" ("_position" f) ("_position" s)) ("_position" c))
###           ("_position" n) ("_position" t))
###         ("\<^const>HOL.eq" ("_position" u)
###           ("_applC" ("_position" g)
###             ("_cargs" ("_position" s) ("_position" t))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>PLang.execn" ("_position" s)
###       ("\<^const>PLang.com.Local" ("_position" f) ("_position" c)
###         ("_position" g))
###       ("_position" n) ("_position" u))
###     ("\<^const>HOL.Ex_binder" ("_position" t)
###       ("\<^const>HOL.conj"
###         ("\<^const>PLang.exec"
###           ("\<^const>Groups.minus_class.minus"
###             ("_applC" ("_position" f) ("_position" s)) ("_position" c))
###           ("_position" n) ("_position" t))
###         ("\<^const>HOL.eq" ("_position" u)
###           ("_applC" ("_position" g)
###             ("_cargs" ("_position" s) ("_position" t))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>PLang.com.Local" ("_position" f) ("_position" c)
###         ("\<^const>Groups.minus_class.minus" ("_position" g)
###           ("_position" n)))
###       ("_position" u))
###     ("\<^const>HOL.Ex_binder" ("_position" t)
###       ("\<^const>HOL.conj"
###         ("\<^const>PLang.exec" ("_applC" ("_position" f) ("_position" s))
###           ("\<^const>Groups.minus_class.minus" ("_position" c)
###             ("_position" n))
###           ("_position" t))
###         ("\<^const>HOL.eq" ("_position" u)
###           ("_applC" ("_position" g)
###             ("_cargs" ("_position" s) ("_position" t))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>PLang.execn" ("_position" s)
###       ("\<^const>PLang.com.Local" ("_position" f) ("_position" c)
###         ("_position" g))
###       ("_position" n) ("_position" u))
###     ("\<^const>HOL.Ex_binder" ("_position" t)
###       ("\<^const>HOL.conj"
###         ("\<^const>PLang.exec" ("_applC" ("_position" f) ("_position" s))
###           ("\<^const>Groups.minus_class.minus" ("_position" c)
###             ("_position" n))
###           ("_position" t))
###         ("\<^const>HOL.eq" ("_position" u)
###           ("_applC" ("_position" g)
###             ("_cargs" ("_position" s) ("_position" t))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 137 of "$AFP/Abstract-Hoare-Logics/Proc/PLang.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>PLang.exec"
###     ("\<^const>Groups.minus_class.minus" ("_position" s) ("_position" c))
###     ("_position" m) ("_position" t)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>PLang.execn" ("_position" s) ("_position" c) ("_position" m)
###     ("_position" t)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>PLang.exec" ("_position" s)
###     ("\<^const>Groups.minus_class.minus" ("_position" c) ("_position" m))
###     ("_position" t)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 140 of "$AFP/Abstract-Hoare-Logics/Proc/PLang.thy") produces 9 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec"
###       ("\<^const>Groups.minus_class.minus" ("_position" s) ("_position" c))
###       ("_position" m) ("_position" t)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" n)
###       ("\<^const>HOL.implies"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" m)
###           ("_position" n))
###         ("\<^const>PLang.execn" ("_position" s) ("_position" c)
###           ("_position" n) ("_position" t))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.execn" ("_position" s) ("_position" c) ("_position" m)
###       ("_position" t)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" n)
###       ("\<^const>HOL.implies"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" m)
###           ("_position" n))
###         ("\<^const>PLang.execn" ("_position" s) ("_position" c)
###           ("_position" n) ("_position" t))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>Groups.minus_class.minus" ("_position" c) ("_position" m))
###       ("_position" t)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" n)
###       ("\<^const>HOL.implies"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" m)
###           ("_position" n))
###         ("\<^const>PLang.execn" ("_position" s) ("_position" c)
###           ("_position" n) ("_position" t))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec"
###       ("\<^const>Groups.minus_class.minus" ("_position" s) ("_position" c))
###       ("_position" m) ("_position" t)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" n)
###       ("\<^const>HOL.implies"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" m)
###           ("_position" n))
###         ("\<^const>PLang.exec"
###           ("\<^const>Groups.minus_class.minus" ("_position" s)
###             ("_position" c))
###           ("_position" n) ("_position" t))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.execn" ("_position" s) ("_position" c) ("_position" m)
###       ("_position" t)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" n)
###       ("\<^const>HOL.implies"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" m)
###           ("_position" n))
###         ("\<^const>PLang.exec"
###           ("\<^const>Groups.minus_class.minus" ("_position" s)
###             ("_position" c))
###           ("_position" n) ("_position" t))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>Groups.minus_class.minus" ("_position" c) ("_position" m))
###       ("_position" t)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" n)
###       ("\<^const>HOL.implies"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" m)
###           ("_position" n))
###         ("\<^const>PLang.exec"
###           ("\<^const>Groups.minus_class.minus" ("_position" s)
###             ("_position" c))
###           ("_position" n) ("_position" t))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec"
###       ("\<^const>Groups.minus_class.minus" ("_position" s) ("_position" c))
###       ("_position" m) ("_position" t)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" n)
###       ("\<^const>HOL.implies"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" m)
###           ("_position" n))
###         ("\<^const>PLang.exec" ("_position" s)
###           ("\<^const>Groups.minus_class.minus" ("_position" c)
###             ("_position" n))
###           ("_position" t))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.execn" ("_position" s) ("_position" c) ("_position" m)
###       ("_position" t)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" n)
###       ("\<^const>HOL.implies"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" m)
###           ("_position" n))
###         ("\<^const>PLang.exec" ("_position" s)
###           ("\<^const>Groups.minus_class.minus" ("_position" c)
###             ("_position" n))
###           ("_position" t))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>Groups.minus_class.minus" ("_position" c) ("_position" m))
###       ("_position" t)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" n)
###       ("\<^const>HOL.implies"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" m)
###           ("_position" n))
###         ("\<^const>PLang.exec" ("_position" s)
###           ("\<^const>Groups.minus_class.minus" ("_position" c)
###             ("_position" n))
###           ("_position" t))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 159 of "$AFP/Abstract-Hoare-Logics/Proc/PLang.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>PLang.exec" ("_position" s) ("_position" c) ("_position" t))
###     ("\<^const>HOL.Ex_binder" ("_position" n)
###       ("\<^const>PLang.exec" ("_position" s)
###         ("\<^const>Groups.minus_class.minus" ("_position" c)
###           ("_position" n))
###         ("_position" t)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>PLang.exec" ("_position" s) ("_position" c) ("_position" t))
###     ("\<^const>HOL.Ex_binder" ("_position" n)
###       ("\<^const>PLang.exec"
###         ("\<^const>Groups.minus_class.minus" ("_position" s)
###           ("_position" c))
###         ("_position" n) ("_position" t)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>PLang.exec" ("_position" s) ("_position" c) ("_position" t))
###     ("\<^const>HOL.Ex_binder" ("_position" n)
###       ("\<^const>PLang.execn" ("_position" s) ("_position" c)
###         ("_position" n) ("_position" t)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### Ambiguous input (line 189 of "$AFP/Abstract-Hoare-Logics/Proc/PLang.thy") produces 45 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec"
###       ("\<^const>Groups.minus_class.minus" ("_position" s) ("_position" w))
###       ("_position" n) ("_position" t)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" b) ("_position" c))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" w)
###             ("\<^const>PLang.com.While" ("_position" b)
###               ("\<^const>HOL.conj" ("_position" c)
###                 ("_applC" ("_position" P) ("_position" s)))))
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" s) ("_position" s'))
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" P) ("_position" s))
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" b) ("_position" s))
###                   ("\<^const>PLang.exec" ("_position" s)
###                     ("\<^const>Groups.minus_class.minus" ("_position" c)
###                       ("_position" n))
###                     ("_position" s'))))
###               ("_applC" ("_position" P) ("_position" s')))))
###         ("\<^const>HOL.conj" ("_applC" ("_position" P) ("_position" t))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" b) ("_position" t))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.execn" ("_position" s) ("_position" w) ("_position" n)
###       ("_position" t)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" b) ("_position" c))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" w)
###             ("\<^const>PLang.com.While" ("_position" b)
###               ("\<^const>HOL.conj" ("_position" c)
###                 ("_applC" ("_position" P) ("_position" s)))))
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" s) ("_position" s'))
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" P) ("_position" s))
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" b) ("_position" s))
###                   ("\<^const>PLang.exec" ("_position" s)
###                     ("\<^const>Groups.minus_class.minus" ("_position" c)
###                       ("_position" n))
###                     ("_position" s'))))
###               ("_applC" ("_position" P) ("_position" s')))))
###         ("\<^const>HOL.conj" ("_applC" ("_position" P) ("_position" t))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" b) ("_position" t))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>Groups.minus_class.minus" ("_position" w) ("_position" n))
###       ("_position" t)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" b) ("_position" c))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" w)
###             ("\<^const>PLang.com.While" ("_position" b)
###               ("\<^const>HOL.conj" ("_position" c)
###                 ("_applC" ("_position" P) ("_position" s)))))
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" s) ("_position" s'))
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" P) ("_position" s))
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" b) ("_position" s))
###                   ("\<^const>PLang.exec" ("_position" s)
###                     ("\<^const>Groups.minus_class.minus" ("_position" c)
###                       ("_position" n))
###                     ("_position" s'))))
###               ("_applC" ("_position" P) ("_position" s')))))
###         ("\<^const>HOL.conj" ("_applC" ("_position" P) ("_position" t))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" b) ("_position" t))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec"
###       ("\<^const>Groups.minus_class.minus" ("_position" s) ("_position" w))
###       ("_position" n) ("_position" t)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" b) ("_position" c))
###       ("\<^const>HOL.eq" ("_position" w)
###         ("\<^const>PLang.com.While" ("_position" b)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.conj" ("_position" c)
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" P) ("_position" s))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s) ("_position" s'))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.conj"
###                       ("_applC" ("_position" P) ("_position" s))
###                       ("\<^const>HOL.conj"
###                         ("_applC" ("_position" b) ("_position" s))
###                         ("\<^const>PLang.exec" ("_position" s)
###                           ("\<^const>Groups.minus_class.minus"
###                             ("_position" c) ("_position" n))
###                           ("_position" s'))))
###                     ("_applC" ("_position" P) ("_position" s'))))))
###             ("\<^const>HOL.conj" ("_applC" ("_position" P) ("_position" t))
###               ("\<^const>HOL.Not"
###                 ("_applC" ("_position" b) ("_position" t))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.execn" ("_position" s) ("_position" w) ("_position" n)
###       ("_position" t)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" b) ("_position" c))
###       ("\<^const>HOL.eq" ("_position" w)
###         ("\<^const>PLang.com.While" ("_position" b)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.conj" ("_position" c)
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" P) ("_position" s))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s) ("_position" s'))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.conj"
###                       ("_applC" ("_position" P) ("_position" s))
###                       ("\<^const>HOL.conj"
###                         ("_applC" ("_position" b) ("_position" s))
###                         ("\<^const>PLang.exec" ("_position" s)
###                           ("\<^const>Groups.minus_class.minus"
###                             ("_position" c) ("_position" n))
###                           ("_position" s'))))
###                     ("_applC" ("_position" P) ("_position" s'))))))
###             ("\<^const>HOL.conj" ("_applC" ("_position" P) ("_position" t))
###               ("\<^const>HOL.Not"
###                 ("_applC" ("_position" b) ("_position" t))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>Groups.minus_class.minus" ("_position" w) ("_position" n))
###       ("_position" t)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" b) ("_position" c))
###       ("\<^const>HOL.eq" ("_position" w)
###         ("\<^const>PLang.com.While" ("_position" b)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.conj" ("_position" c)
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" P) ("_position" s))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s) ("_position" s'))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.conj"
###                       ("_applC" ("_position" P) ("_position" s))
###                       ("\<^const>HOL.conj"
###                         ("_applC" ("_position" b) ("_position" s))
###                         ("\<^const>PLang.exec" ("_position" s)
###                           ("\<^const>Groups.minus_class.minus"
###                             ("_position" c) ("_position" n))
###                           ("_position" s'))))
###                     ("_applC" ("_position" P) ("_position" s'))))))
###             ("\<^const>HOL.conj" ("_applC" ("_position" P) ("_position" t))
###               ("\<^const>HOL.Not"
###                 ("_applC" ("_position" b) ("_position" t))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec"
###       ("\<^const>Groups.minus_class.minus" ("_position" s) ("_position" w))
###       ("_position" n) ("_position" t)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" b) ("_position" c))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" w)
###           ("\<^const>PLang.com.While" ("_position" b)
###             ("\<^const>HOL.conj" ("_position" c)
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" P) ("_position" s))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s) ("_position" s'))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.conj"
###                       ("_applC" ("_position" P) ("_position" s))
###                       ("\<^const>HOL.conj"
###                         ("_applC" ("_position" b) ("_position" s))
###                         ("\<^const>PLang.exec" ("_position" s)
###                           ("\<^const>Groups.minus_class.minus"
###                             ("_position" c) ("_position" n))
###                           ("_position" s'))))
###                     ("_applC" ("_position" P) ("_position" s'))))))))
###         ("\<^const>HOL.conj" ("_applC" ("_position" P) ("_position" t))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" b) ("_position" t))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.execn" ("_position" s) ("_position" w) ("_position" n)
###       ("_position" t)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" b) ("_position" c))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" w)
###           ("\<^const>PLang.com.While" ("_position" b)
###             ("\<^const>HOL.conj" ("_position" c)
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" P) ("_position" s))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s) ("_position" s'))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.conj"
###                       ("_applC" ("_position" P) ("_position" s))
###                       ("\<^const>HOL.conj"
###                         ("_applC" ("_position" b) ("_position" s))
###                         ("\<^const>PLang.exec" ("_position" s)
###                           ("\<^const>Groups.minus_class.minus"
###                             ("_position" c) ("_position" n))
###                           ("_position" s'))))
###                     ("_applC" ("_position" P) ("_position" s'))))))))
###         ("\<^const>HOL.conj" ("_applC" ("_position" P) ("_position" t))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" b) ("_position" t))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec" ("_position" s)
###       ("\<^const>Groups.minus_class.minus" ("_position" w) ("_position" n))
###       ("_position" t)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" b) ("_position" c))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" w)
###           ("\<^const>PLang.com.While" ("_position" b)
###             ("\<^const>HOL.conj" ("_position" c)
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" P) ("_position" s))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" s) ("_position" s'))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.conj"
###                       ("_applC" ("_position" P) ("_position" s))
###                       ("\<^const>HOL.conj"
###                         ("_applC" ("_position" b) ("_position" s))
###                         ("\<^const>PLang.exec" ("_position" s)
###                           ("\<^const>Groups.minus_class.minus"
###                             ("_position" c) ("_position" n))
###                           ("_position" s'))))
###                     ("_applC" ("_position" P) ("_position" s'))))))))
###         ("\<^const>HOL.conj" ("_applC" ("_position" P) ("_position" t))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" b) ("_position" t))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec"
###       ("\<^const>Groups.minus_class.minus" ("_position" s) ("_position" w))
###       ("_position" n) ("_position" t)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" b) ("_position" c))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" w)
###             ("\<^const>PLang.com.While" ("_position" b) ("_position" c)))
###           ("\<^const>HOL.conj" ("_applC" ("_position" P) ("_position" s))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" s) ("_position" s'))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" P) ("_position" s))
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" b) ("_position" s))
###                     ("\<^const>PLang.exec" ("_position" s)
###                       ("\<^const>Groups.minus_class.minus" ("_position" c)
###                         ("_position" n))
###                       ("_position" s'))))
###                 ("_applC" ("_position" P) ("_position" s'))))))
###         ("\<^const>HOL.conj" ("_applC" ("_position" P) ("_position" t))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" b) ("_position" t))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 201 of "$AFP/Abstract-Hoare-Logics/Proc/PLang.thy") produces 12 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PLang.exec" ("_position" s)
###         ("\<^const>PLang.com.While" ("_position" b)
###           ("\<^const>Groups.minus_class.minus" ("_position" c)
###             ("_position" n)))
###         ("_position" t)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" s)))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" s) ("_position" s'))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>PLang.com.Semi"
###                   ("_applC" ("_position" P) ("_position" s))
###                   ("_applC" ("_position" b) ("_position" s))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>PLang.exec"
###                     ("\<^const>Groups.minus_class.minus" ("_position" s)
###                       ("_position" c))
###                     ("_position" n) ("_position" s')))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P) ("_position" s'))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj" ("_applC" ("_position" P) ("_position" t))
###       ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" t))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PLang.execn" ("_position" s)
###         ("\<^const>PLang.com.While" ("_position" b) ("_position" c))
###         ("_position" n) ("_position" t)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" s)))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" s) ("_position" s'))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>PLang.com.Semi"
###                   ("_applC" ("_position" P) ("_position" s))
###                   ("_applC" ("_position" b) ("_position" s))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>PLang.exec"
###                     ("\<^const>Groups.minus_class.minus" ("_position" s)
###                       ("_position" c))
###                     ("_position" n) ("_position" s')))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P) ("_position" s'))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj" ("_applC" ("_position" P) ("_position" t))
###       ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" t))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PLang.exec" ("_position" s)
###         ("\<^const>PLang.com.While" ("_position" b)
###           ("\<^const>Groups.minus_class.minus" ("_position" c)
###             ("_position" n)))
###         ("_position" t)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" s)))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" s) ("_position" s'))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" P) ("_position" s)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" b) ("_position" s)))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>PLang.exec"
###                       ("\<^const>Groups.minus_class.minus" ("_position" s)
###                         ("_position" c))
###                       ("_position" n) ("_position" s'))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P) ("_position" s'))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj" ("_applC" ("_position" P) ("_position" t))
###       ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" t))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PLang.execn" ("_position" s)
###         ("\<^const>PLang.com.While" ("_position" b) ("_position" c))
###         ("_position" n) ("_position" t)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" s)))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" s) ("_position" s'))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" P) ("_position" s)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" b) ("_position" s)))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>PLang.exec"
###                       ("\<^const>Groups.minus_class.minus" ("_position" s)
###                         ("_position" c))
###                       ("_position" n) ("_position" s'))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P) ("_position" s'))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj" ("_applC" ("_position" P) ("_position" t))
###       ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" t))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PLang.exec" ("_position" s)
###         ("\<^const>PLang.com.While" ("_position" b)
###           ("\<^const>Groups.minus_class.minus" ("_position" c)
###             ("_position" n)))
###         ("_position" t)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" s)))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" s) ("_position" s'))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>PLang.com.Semi"
###                   ("_applC" ("_position" P) ("_position" s))
###                   ("_applC" ("_position" b) ("_position" s))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>PLang.execn" ("_position" s) ("_position" c)
###                     ("_position" n) ("_position" s')))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P) ("_position" s'))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj" ("_applC" ("_position" P) ("_position" t))
###       ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" t))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PLang.execn" ("_position" s)
###         ("\<^const>PLang.com.While" ("_position" b) ("_position" c))
###         ("_position" n) ("_position" t)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" s)))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" s) ("_position" s'))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>PLang.com.Semi"
###                   ("_applC" ("_position" P) ("_position" s))
###                   ("_applC" ("_position" b) ("_position" s))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>PLang.execn" ("_position" s) ("_position" c)
###                     ("_position" n) ("_position" s')))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P) ("_position" s'))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj" ("_applC" ("_position" P) ("_position" t))
###       ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" t))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PLang.exec" ("_position" s)
###         ("\<^const>PLang.com.While" ("_position" b)
###           ("\<^const>Groups.minus_class.minus" ("_position" c)
###             ("_position" n)))
###         ("_position" t)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" s)))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" s) ("_position" s'))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" P) ("_position" s)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" b) ("_position" s)))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>PLang.execn" ("_position" s) ("_position" c)
###                       ("_position" n) ("_position" s'))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P) ("_position" s'))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj" ("_applC" ("_position" P) ("_position" t))
###       ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" t))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PLang.execn" ("_position" s)
###         ("\<^const>PLang.com.While" ("_position" b) ("_position" c))
###         ("_position" n) ("_position" t)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" s)))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" s) ("_position" s'))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" P) ("_position" s)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" b) ("_position" s)))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>PLang.execn" ("_position" s) ("_position" c)
###                       ("_position" n) ("_position" s'))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P) ("_position" s'))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj" ("_applC" ("_position" P) ("_position" t))
###       ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" t))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PLang.exec" ("_position" s)
###         ("\<^const>PLang.com.While" ("_position" b)
###           ("\<^const>Groups.minus_class.minus" ("_position" c)
###             ("_position" n)))
###         ("_position" t)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" s)))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" s) ("_position" s'))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>PLang.com.Semi"
###                   ("_applC" ("_position" P) ("_position" s))
###                   ("_applC" ("_position" b) ("_position" s))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>PLang.exec" ("_position" s)
###                     ("\<^const>Groups.minus_class.minus" ("_position" c)
###                       ("_position" n))
###                     ("_position" s')))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P) ("_position" s'))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj" ("_applC" ("_position" P) ("_position" t))
###       ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" t))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PLang.execn" ("_position" s)
###         ("\<^const>PLang.com.While" ("_position" b) ("_position" c))
###         ("_position" n) ("_position" t)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" s)))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" s) ("_position" s'))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>PLang.com.Semi"
###                   ("_applC" ("_position" P) ("_position" s))
###                   ("_applC" ("_position" b) ("_position" s))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>PLang.exec" ("_position" s)
###                     ("\<^const>Groups.minus_class.minus" ("_position" c)
###                       ("_position" n))
###                     ("_position" s')))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P) ("_position" s'))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj" ("_applC" ("_position" P) ("_position" t))
###       ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" t))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.PLang"
### 0.988s elapsed time, 3.913s cpu time, 0.355s GC time
Loading theory "Draft.PHoare" (required by "Draft.PHoareTotalMoreTemplates" via "Draft.PHoareTotal")
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  cycle :: "'a list => 'a stream"
### Ambiguous input (line 50 of "$AFP/Abstract-Hoare-Logics/Proc/PHoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^fixed>cvalid" ("_position" C) ("_position" P) ("_position" c)
###       ("_position" Q))
###     ("\<^const>PHoare.valids"
###       ("\<^const>HOL.implies" ("_position" C)
###         ("\<^const>PHoare.valid" ("_position" P) ("_position" c)
###           ("_position" Q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^fixed>cvalid" ("_position" C) ("_position" P) ("_position" c)
###       ("_position" Q))
###     ("\<^const>HOL.implies" ("\<^const>PHoare.valids" ("_position" C))
###       ("\<^const>PHoare.valid" ("_position" P) ("_position" c)
###         ("_position" Q)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 61 of "$AFP/Abstract-Hoare-Logics/Proc/PHoare.thy") produces 3 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>nvalid" ("_position" n) ("_position" P) ("_position" c)
###     ("_position" Q))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" s) ("_position" t))
###     ("\<^const>HOL.implies"
###       ("\<^const>PLang.exec" ("_position" s)
###         ("\<^const>Groups.minus_class.minus" ("_position" c)
###           ("_position" n))
###         ("_position" t))
###       ("\<^const>HOL.All_binder" ("_position" z)
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" P)
###             ("_cargs" ("_position" z) ("_position" s)))
###           ("_applC" ("_position" Q)
###             ("_cargs" ("_position" z) ("_position" t))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>nvalid" ("_position" n) ("_position" P) ("_position" c)
###     ("_position" Q))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" s) ("_position" t))
###     ("\<^const>HOL.implies"
###       ("\<^const>PLang.exec"
###         ("\<^const>Groups.minus_class.minus" ("_position" s)
###           ("_position" c))
###         ("_position" n) ("_position" t))
###       ("\<^const>HOL.All_binder" ("_position" z)
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" P)
###             ("_cargs" ("_position" z) ("_position" s)))
###           ("_applC" ("_position" Q)
###             ("_cargs" ("_position" z) ("_position" t))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>nvalid" ("_position" n) ("_position" P) ("_position" c)
###     ("_position" Q))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" s) ("_position" t))
###     ("\<^const>HOL.implies"
###       ("\<^const>PLang.execn" ("_position" s) ("_position" c)
###         ("_position" n) ("_position" t))
###       ("\<^const>HOL.All_binder" ("_position" z)
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" P)
###             ("_cargs" ("_position" z) ("_position" s)))
###           ("_applC" ("_position" Q)
###             ("_cargs" ("_position" z) ("_position" t))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### Ambiguous input (line 69 of "$AFP/Abstract-Hoare-Logics/Proc/PHoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^fixed>cnvalid" ("_position" C) ("_position" n) ("_position" P)
###       ("_position" c) ("_position" Q))
###     ("\<^const>HOL.implies"
###       ("\<^const>PHoare.nvalids" ("_position" n) ("_position" C))
###       ("\<^const>PHoare.nvalid" ("_position" n) ("_position" P)
###         ("_position" c) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^fixed>cnvalid" ("_position" C) ("_position" n) ("_position" P)
###       ("_position" c) ("_position" Q))
###     ("\<^const>PHoare.nvalids" ("_position" n)
###       ("\<^const>HOL.implies" ("_position" C)
###         ("\<^const>PHoare.nvalid" ("_position" n) ("_position" P)
###           ("_position" c) ("_position" Q))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 92 of "$AFP/Abstract-Hoare-Logics/Proc/PHoare.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_position" s')
###         ("\<^fixed>hoare" ("_position" C)
###           ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" z) ("_position" s')))
###               ("\<^const>HOL.eq" ("_position" s)
###                 ("_applC" ("_position" f) ("_position" s')))))
###           ("_position" c)
###           ("_lambda" ("_pttrns" ("_position" z) ("_position" t))
###             ("_applC" ("_position" Q)
###               ("_cargs" ("_position" z)
###                 ("_applC" ("_position" g)
###                   ("_cargs" ("_position" s') ("_position" t))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>hoare" ("_position" C) ("_position" P)
###       ("\<^const>PLang.com.Local" ("_position" f) ("_position" c)
###         ("_position" g))
###       ("_position" Q))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>hoare"
###         ("\<^const>HOL.All_binder" ("_position" s') ("_position" C))
###         ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" P)
###               ("_cargs" ("_position" z) ("_position" s')))
###             ("\<^const>HOL.eq" ("_position" s)
###               ("_applC" ("_position" f) ("_position" s')))))
###         ("_position" c)
###         ("_lambda" ("_pttrns" ("_position" z) ("_position" t))
###           ("_applC" ("_position" Q)
###             ("_cargs" ("_position" z)
###               ("_applC" ("_position" g)
###                 ("_cargs" ("_position" s') ("_position" t)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>hoare" ("_position" C) ("_position" P)
###       ("\<^const>PLang.com.Local" ("_position" f) ("_position" c)
###         ("_position" g))
###       ("_position" Q))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  flat :: "'a list stream => 'a stream"
Proofs for inductive predicate(s) "hoare"
  Proving monotonicity ...
### theory "HOL-Library.BigO"
### 1.083s elapsed time, 4.136s cpu time, 0.890s GC time
Loading theory "Draft.PTermi" (required by "Draft.PHoareTotalMoreTemplates" via "Draft.PHoareTotal")
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### Ambiguous input (line 16 of "$AFP/Abstract-Hoare-Logics/Proc/PTermi.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" b) ("_position" s)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>termi" ("_position" c1) ("_position" s)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>termi"
###       ("\<^const>PLang.com.Cond" ("_position" b) ("_position" c1)
###         ("_position" c2))
###       ("_position" s))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" b) ("_position" s)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>termi" ("_position" c1) ("_position" s)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.com.Cond" ("_position" b) ("_position" c1)
###       ("\<^fixed>termi" ("_position" c2) ("_position" s)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 17 of "$AFP/Abstract-Hoare-Logics/Proc/PTermi.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" s))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>termi" ("_position" c2) ("_position" s)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>termi"
###       ("\<^const>PLang.com.Cond" ("_position" b) ("_position" c1)
###         ("_position" c2))
###       ("_position" s))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" s))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>termi" ("_position" c2) ("_position" s)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.com.Cond" ("_position" b) ("_position" c1)
###       ("\<^fixed>termi" ("_position" c2) ("_position" s)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 19 of "$AFP/Abstract-Hoare-Logics/Proc/PTermi.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" s))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>termi"
###       ("\<^const>PLang.com.While" ("_position" b) ("_position" c))
###       ("_position" s))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" s))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.com.While" ("_position" b)
###       ("\<^fixed>termi" ("_position" c) ("_position" s)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 21 of "$AFP/Abstract-Hoare-Logics/Proc/PTermi.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" b) ("_position" s)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>termi" ("_position" c) ("_position" s)))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" t)
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>PLang.exec" ("_position" s) ("_position" c)
###                 ("_position" t)))
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>PLang.com.While" ("_position" b)
###                 ("\<^fixed>termi" ("_position" c) ("_position" t)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>termi"
###       ("\<^const>PLang.com.While" ("_position" b) ("_position" c))
###       ("_position" s))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" b) ("_position" s)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>termi" ("_position" c) ("_position" s)))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" t)
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>PLang.exec" ("_position" s) ("_position" c)
###                 ("_position" t)))
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>termi"
###                 ("\<^const>PLang.com.While" ("_position" b) ("_position" c))
###                 ("_position" t))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>termi"
###       ("\<^const>PLang.com.While" ("_position" b) ("_position" c))
###       ("_position" s))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" b) ("_position" s)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>termi" ("_position" c) ("_position" s)))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" t)
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>PLang.exec" ("_position" s) ("_position" c)
###                 ("_position" t)))
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>PLang.com.While" ("_position" b)
###                 ("\<^fixed>termi" ("_position" c) ("_position" t)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.com.While" ("_position" b)
###       ("\<^fixed>termi" ("_position" c) ("_position" s)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" b) ("_position" s)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>termi" ("_position" c) ("_position" s)))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" t)
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>PLang.exec" ("_position" s) ("_position" c)
###                 ("_position" t)))
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>termi"
###                 ("\<^const>PLang.com.While" ("_position" b) ("_position" c))
###                 ("_position" t))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.com.While" ("_position" b)
###       ("\<^fixed>termi" ("_position" c) ("_position" s)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 96 of "$AFP/Abstract-Hoare-Logics/Proc/PHoare.thy") produces 5 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>hoare1" ("_position" C) ("_position" x))
###   ("\<^const>PHoare.hoare" ("_position" C)
###     ("_applC" ("_position" fst) ("_position" x))
###     ("_applC" ("_position" fst)
###       ("_applC" ("_position" snd) ("_position" x)))
###     ("_applC" ("_position" snd)
###       ("_applC" ("_position" snd) ("_position" x)))))
### ("\<^const>Pure.eq" ("\<^fixed>hoare1" ("_position" C) ("_position" x))
###   ("\<^fixed>hoare1" ("_position" C)
###     ("_applC" ("_Finset" ("_applC" ("_position" fst) ("_position" x)))
###       ("_cargs" ("_position" fst)
###         ("_cargs" ("_applC" ("_position" snd) ("_position" x))
###           ("_Finset"
###             ("_applC" ("_position" snd)
###               ("_applC" ("_position" snd) ("_position" x)))))))))
### ("\<^const>Pure.eq" ("\<^fixed>hoare1" ("_position" C) ("_position" x))
###   ("_applC"
###     ("\<^fixed>hoare1" ("_position" C)
###       ("_Finset" ("_applC" ("_position" fst) ("_position" x))))
###     ("_cargs" ("_position" fst)
###       ("_cargs" ("_applC" ("_position" snd) ("_position" x))
###         ("_Finset"
###           ("_applC" ("_position" snd)
###             ("_applC" ("_position" snd) ("_position" x))))))))
### ("\<^const>Pure.eq" ("\<^fixed>hoare1" ("_position" C) ("_position" x))
###   ("_applC"
###     ("\<^fixed>hoare1" ("_position" C)
###       ("_applC" ("_Finset" ("_applC" ("_position" fst) ("_position" x)))
###         ("_position" fst)))
###     ("_cargs" ("_applC" ("_position" snd) ("_position" x))
###       ("_Finset"
###         ("_applC" ("_position" snd)
###           ("_applC" ("_position" snd) ("_position" x)))))))
### ("\<^const>Pure.eq" ("\<^fixed>hoare1" ("_position" C) ("_position" x))
###   ("_applC"
###     ("\<^fixed>hoare1" ("_position" C)
###       ("_applC" ("_Finset" ("_applC" ("_position" fst) ("_position" x)))
###         ("_cargs" ("_position" fst)
###           ("_applC" ("_position" snd) ("_position" x)))))
###     ("_Finset"
###       ("_applC" ("_position" snd)
###         ("_applC" ("_position" snd) ("_position" x))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Proofs for inductive predicate(s) "termi"
  Proving monotonicity ...
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### Rule already declared as introduction (intro)
### ?f ?s ~= {} ==> Do ?f \<down> ?s
### Rule already declared as introduction (intro)
### ?f ?s ~= {} ==> Do ?f \<down> ?s
### Ambiguous input (line 43 of "$AFP/Abstract-Hoare-Logics/Proc/PTermi.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>PTermi.termi"
###       ("\<^const>PLang.com.Cond" ("_position" b) ("_position" c1)
###         ("_position" c2))
###       ("_position" s))
###     ("\<^const>PTermi.termi"
###       ("\<^const>HOL.If" ("_applC" ("_position" b) ("_position" s))
###         ("_position" c1) ("_position" c2))
###       ("_position" s))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>PLang.com.Cond" ("_position" b) ("_position" c1)
###       ("\<^const>PTermi.termi" ("_position" c2) ("_position" s)))
###     ("\<^const>PTermi.termi"
###       ("\<^const>HOL.If" ("_applC" ("_position" b) ("_position" s))
###         ("_position" c1) ("_position" c2))
###       ("_position" s))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 109 of "$AFP/Abstract-Hoare-Logics/Proc/PHoare.thy") produces 56 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" z) ("_position" s))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" P')
###             ("_cargs" ("_position" z) ("_position" s)))
###           ("\<^const>PHoare.hoare"
###             ("\<^const>PLang.com.Semi"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" z) ("_position" s)))
###               ("_position" C))
###             ("_position" P) ("_position" c) ("_position" Q))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoare.hoare1" ("_position" C)
###         ("_applC" ("_Finset" ("_position" P')) ("_position" c)))
###       ("_Finset" ("_position" Q)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" z) ("_position" s))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" P')
###             ("_cargs" ("_position" z) ("_position" s)))
###           ("_applC" ("_position" P)
###             ("_cargs" ("_position" z) ("_position" s))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>PHoare.hoare" ("_position" C) ("_position" P)
###           ("_position" c) ("_position" Q)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoare.hoare1" ("_position" C)
###         ("_applC" ("_Finset" ("_position" P')) ("_position" c)))
###       ("_Finset" ("_position" Q)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" z) ("_position" s))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" P')
###             ("_cargs" ("_position" z) ("_position" s)))
###           ("_applC" ("_position" P)
###             ("_cargs" ("_position" z) ("_position" s))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC"
###           ("\<^const>PHoare.hoare1" ("_position" C)
###             ("_Finset" ("_position" P)))
###           ("_cargs" ("_position" c) ("_Finset" ("_position" Q)))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoare.hoare1" ("_position" C)
###         ("_applC" ("_Finset" ("_position" P')) ("_position" c)))
###       ("_Finset" ("_position" Q)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" z) ("_position" s))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" P')
###             ("_cargs" ("_position" z) ("_position" s)))
###           ("_applC" ("_position" P)
###             ("_cargs" ("_position" z)
###               ("\<^const>PHoare.hoare1"
###                 ("\<^const>PLang.com.Semi" ("_position" s) ("_position" C))
###                 ("_applC" ("_Finset" ("_position" P))
###                   ("_cargs" ("_position" c)
###                     ("_Finset" ("_position" Q)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoare.hoare1" ("_position" C)
###         ("_applC" ("_Finset" ("_position" P')) ("_position" c)))
###       ("_Finset" ("_position" Q)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" z) ("_position" s))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" P')
###             ("_cargs" ("_position" z) ("_position" s)))
###           ("_applC" ("_position" P)
###             ("\<^const>PHoare.hoare1"
###               ("\<^const>PLang.com.Semi"
###                 ("_applC" ("_position" z) ("_position" s)) ("_position" C))
###               ("_applC" ("_Finset" ("_position" P))
###                 ("_cargs" ("_position" c)
###                   ("_Finset" ("_position" Q))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoare.hoare1" ("_position" C)
###         ("_applC" ("_Finset" ("_position" P')) ("_position" c)))
###       ("_Finset" ("_position" Q)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" z) ("_position" s))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" P')
###             ("_cargs" ("_position" z) ("_position" s)))
###           ("\<^const>PHoare.hoare1"
###             ("\<^const>PLang.com.Semi"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" z) ("_position" s)))
###               ("_position" C))
###             ("_applC" ("_Finset" ("_position" P))
###               ("_cargs" ("_position" c) ("_Finset" ("_position" Q)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoare.hoare1" ("_position" C)
###         ("_applC" ("_Finset" ("_position" P')) ("_position" c)))
###       ("_Finset" ("_position" Q)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" z) ("_position" s))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" P')
###             ("_cargs" ("_position" z) ("_position" s)))
###           ("_applC" ("_position" P)
###             ("_cargs" ("_position" z) ("_position" s))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>PHoare.hoare1" ("_position" C)
###           ("_applC" ("_Finset" ("_position" P))
###             ("_cargs" ("_position" c) ("_Finset" ("_position" Q))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoare.hoare1" ("_position" C)
###         ("_applC" ("_Finset" ("_position" P')) ("_position" c)))
###       ("_Finset" ("_position" Q)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" z) ("_position" s))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" P')
###             ("_cargs" ("_position" z) ("_position" s)))
###           ("_applC"
###             ("\<^const>PHoare.hoare1"
###               ("\<^const>PLang.com.Semi"
###                 ("_applC" ("_position" P)
###                   ("_cargs" ("_position" z) ("_position" s)))
###                 ("_position" C))
###               ("_Finset" ("_position" P)))
###             ("_cargs" ("_position" c) ("_Finset" ("_position" Q))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoare.hoare1" ("_position" C)
###         ("_applC" ("_Finset" ("_position" P')) ("_position" c)))
###       ("_Finset" ("_position" Q)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" z) ("_position" s))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" P')
###             ("_cargs" ("_position" z) ("_position" s)))
###           ("_applC" ("_position" P)
###             ("_cargs"
###               ("\<^const>PHoare.hoare1"
###                 ("\<^const>PLang.com.Semi"
###                   ("_applC" ("_position" z) ("_position" s))
###                   ("_position" C))
###                 ("_Finset" ("_position" P)))
###               ("_cargs" ("_position" c) ("_Finset" ("_position" Q)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoare.hoare1" ("_position" C)
###         ("_applC" ("_Finset" ("_position" P')) ("_position" c)))
###       ("_Finset" ("_position" Q)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" z) ("_position" s))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" P')
###             ("_cargs" ("_position" z) ("_position" s)))
###           ("_applC" ("_position" P)
###             ("_cargs" ("_position" z)
###               ("_cargs"
###                 ("\<^const>PHoare.hoare1"
###                   ("\<^const>PLang.com.Semi" ("_position" s)
###                     ("_position" C))
###                   ("_Finset" ("_position" P)))
###                 ("_cargs" ("_position" c)
###                   ("_Finset" ("_position" Q))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoare.hoare1" ("_position" C)
###         ("_applC" ("_Finset" ("_position" P')) ("_position" c)))
###       ("_Finset" ("_position" Q)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 68 of "$AFP/Abstract-Hoare-Logics/Proc/PTermi.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PTermi.termi" ("_position" w) ("_position" fk)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" k) ("_idts" ("_position" b) ("_position" c)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" fk)
###             ("_applC" ("_position" f) ("_position" k)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" w)
###               ("\<^const>PLang.com.While" ("_position" b) ("_position" c)))
###             ("\<^const>HOL.All_binder" ("_position" i)
###               ("\<^const>PLang.exec"
###                 ("_applC" ("_position" f) ("_position" i)) ("_position" c)
###                 ("_applC" ("_position" f)
###                   ("_applC" ("_position" Suc) ("_position" i)))))))
###         ("\<^const>HOL.Ex_binder" ("_position" i)
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" b)
###               ("_applC" ("_position" f) ("_position" i)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PTermi.termi" ("_position" w) ("_position" fk)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" k) ("_idts" ("_position" b) ("_position" c)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" fk)
###             ("_applC" ("_position" f) ("_position" k)))
###           ("\<^const>HOL.eq" ("_position" w)
###             ("\<^const>PLang.com.While" ("_position" b)
###               ("\<^const>HOL.conj" ("_position" c)
###                 ("\<^const>HOL.All_binder" ("_position" i)
###                   ("\<^const>PLang.exec"
###                     ("_applC" ("_position" f) ("_position" i))
###                     ("_position" c)
###                     ("_applC" ("_position" f)
###                       ("_applC" ("_position" Suc) ("_position" i)))))))))
###         ("\<^const>HOL.Ex_binder" ("_position" i)
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" b)
###               ("_applC" ("_position" f) ("_position" i)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PTermi.termi" ("_position" w) ("_position" fk)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" k) ("_idts" ("_position" b) ("_position" c)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" fk)
###           ("_applC" ("_position" f) ("_position" k)))
###         ("\<^const>HOL.eq" ("_position" w)
###           ("\<^const>PLang.com.While" ("_position" b)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj" ("_position" c)
###                 ("\<^const>HOL.All_binder" ("_position" i)
###                   ("\<^const>PLang.exec"
###                     ("_applC" ("_position" f) ("_position" i))
###                     ("_position" c)
###                     ("_applC" ("_position" f)
###                       ("_applC" ("_position" Suc) ("_position" i))))))
###               ("\<^const>HOL.Ex_binder" ("_position" i)
###                 ("\<^const>HOL.Not"
###                   ("_applC" ("_position" b)
###                     ("_applC" ("_position" f) ("_position" i))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 115 of "$AFP/Abstract-Hoare-Logics/Proc/PHoare.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoare.hoare1" ("_position" C)
###         ("_applC" ("_Finset" ("_position" P)) ("_position" c)))
###       ("_Finset" ("_position" Q))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoare.cvalid" ("_position" C) ("_position" P)
###       ("_position" c) ("_position" Q))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoare.hoare1" ("_position" C)
###       ("_applC" ("_Finset" ("_position" P))
###         ("_cargs" ("_position" c) ("_Finset" ("_position" Q))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoare.cvalid" ("_position" C) ("_position" P)
###       ("_position" c) ("_position" Q))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoare.hoare1" ("_position" C) ("_Finset" ("_position" P)))
###       ("_cargs" ("_position" c) ("_Finset" ("_position" Q)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoare.cvalid" ("_position" C) ("_position" P)
###       ("_position" c) ("_position" Q))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoare.hoare" ("_position" C) ("_position" P) ("_position" c)
###       ("_position" Q)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoare.cvalid" ("_position" C) ("_position" P)
###       ("_position" c) ("_position" Q))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOL-Library.Stream"
### 1.135s elapsed time, 4.366s cpu time, 0.791s GC time
### Ambiguous input (line 81 of "$AFP/Abstract-Hoare-Logics/Proc/PTermi.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wf)
###     ("_Coll" ("_pattern" ("_position" t) ("_position" s))
###       ("\<^const>PLang.exec"
###         ("\<^const>PLang.com.While" ("_position" b)
###           ("\<^const>HOL.conj"
###             ("\<^const>PTermi.termi" ("_position" c) ("_position" s))
###             ("\<^const>HOL.conj" ("_applC" ("_position" b) ("_position" s))
###               ("_position" s))))
###         ("_position" c) ("_position" t)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wf)
###     ("_Coll" ("_pattern" ("_position" t) ("_position" s))
###       ("\<^const>HOL.conj"
###         ("\<^const>PTermi.termi"
###           ("\<^const>PLang.com.While" ("_position" b) ("_position" c))
###           ("_position" s))
###         ("\<^const>HOL.conj" ("_applC" ("_position" b) ("_position" s))
###           ("\<^const>PLang.exec" ("_position" s) ("_position" c)
###             ("_position" t)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wf)
###     ("_Coll" ("_pattern" ("_position" t) ("_position" s))
###       ("\<^const>HOL.conj"
###         ("\<^const>PLang.com.While" ("_position" b)
###           ("\<^const>PTermi.termi" ("_position" c) ("_position" s)))
###         ("\<^const>HOL.conj" ("_applC" ("_position" b) ("_position" s))
###           ("\<^const>PLang.exec" ("_position" s) ("_position" c)
###             ("_position" t)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wf)
###     ("_Coll" ("_pattern" ("_position" t) ("_position" s))
###       ("\<^const>PLang.com.While" ("_position" b)
###         ("\<^const>HOL.conj"
###           ("\<^const>PTermi.termi" ("_position" c) ("_position" s))
###           ("\<^const>HOL.conj" ("_applC" ("_position" b) ("_position" s))
###             ("\<^const>PLang.exec" ("_position" s) ("_position" c)
###               ("_position" t))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wf)
###     ("_Coll" ("_pattern" ("_position" t) ("_position" s))
###       ("\<^const>HOL.conj"
###         ("\<^const>PLang.com.While" ("_position" b)
###           ("\<^const>HOL.conj"
###             ("\<^const>PTermi.termi" ("_position" c) ("_position" s))
###             ("_applC" ("_position" b) ("_position" s))))
###         ("\<^const>PLang.exec" ("_position" s) ("_position" c)
###           ("_position" t))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 165 of "$AFP/Abstract-Hoare-Logics/Proc/PHoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>PHoare.hoare1" ("\<^const>Set.empty")
###     ("_applC" ("_position" MGT) ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>PHoare.hoare1" ("\<^const>Set.empty") ("_position" MGT))
###     ("_position" c)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.PTermi"
### 0.158s elapsed time, 0.617s cpu time, 0.065s GC time
### Ambiguous input (line 168 of "$AFP/Abstract-Hoare-Logics/Proc/PHoare.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoare.hoare1" ("\<^const>Set.empty")
###       ("_applC" ("_position" MGT) ("_position" c))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PHoare.cvalid" ("\<^const>Set.empty") ("_position" P)
###         ("_position" c) ("_position" Q)))
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>PHoare.hoare1" ("\<^const>Set.empty")
###           ("_applC" ("_Finset" ("_position" P)) ("_position" c)))
###         ("_Finset"
###           ("_constrain" ("_position" Q)
###             ("_tapp" ("_type_name" state) ("_type_name" assn))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoare.hoare1" ("\<^const>Set.empty") ("_position" MGT))
###       ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PHoare.cvalid" ("\<^const>Set.empty") ("_position" P)
###         ("_position" c) ("_position" Q)))
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>PHoare.hoare1" ("\<^const>Set.empty")
###           ("_applC" ("_Finset" ("_position" P)) ("_position" c)))
###         ("_Finset"
###           ("_constrain" ("_position" Q)
###             ("_tapp" ("_type_name" state) ("_type_name" assn))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoare.hoare1" ("\<^const>Set.empty")
###       ("_applC" ("_position" MGT) ("_position" c))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PHoare.cvalid" ("\<^const>Set.empty") ("_position" P)
###         ("_position" c) ("_position" Q)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PHoare.hoare1" ("\<^const>Set.empty")
###         ("_applC" ("_Finset" ("_position" P))
###           ("_cargs" ("_position" c)
###             ("_Finset"
###               ("_constrain" ("_position" Q)
###                 ("_tapp" ("_type_name" state) ("_type_name" assn))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoare.hoare1" ("\<^const>Set.empty") ("_position" MGT))
###       ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PHoare.cvalid" ("\<^const>Set.empty") ("_position" P)
###         ("_position" c) ("_position" Q)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PHoare.hoare1" ("\<^const>Set.empty")
###         ("_applC" ("_Finset" ("_position" P))
###           ("_cargs" ("_position" c)
###             ("_Finset"
###               ("_constrain" ("_position" Q)
###                 ("_tapp" ("_type_name" state) ("_type_name" assn))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoare.hoare1" ("\<^const>Set.empty")
###       ("_applC" ("_position" MGT) ("_position" c))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PHoare.cvalid" ("\<^const>Set.empty") ("_position" P)
###         ("_position" c) ("_position" Q)))
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>PHoare.hoare1" ("\<^const>Set.empty")
###           ("_Finset" ("_position" P)))
###         ("_cargs" ("_position" c)
###           ("_Finset"
###             ("_constrain" ("_position" Q)
###               ("_tapp" ("_type_name" state) ("_type_name" assn)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoare.hoare1" ("\<^const>Set.empty") ("_position" MGT))
###       ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PHoare.cvalid" ("\<^const>Set.empty") ("_position" P)
###         ("_position" c) ("_position" Q)))
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>PHoare.hoare1" ("\<^const>Set.empty")
###           ("_Finset" ("_position" P)))
###         ("_cargs" ("_position" c)
###           ("_Finset"
###             ("_constrain" ("_position" Q)
###               ("_tapp" ("_type_name" state) ("_type_name" assn)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoare.hoare1" ("\<^const>Set.empty")
###       ("_applC" ("_position" MGT) ("_position" c))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PHoare.cvalid" ("\<^const>Set.empty") ("_position" P)
###         ("_position" c) ("_position" Q)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PHoare.hoare" ("\<^const>Set.empty") ("_position" P)
###         ("_position" c)
###         ("_constrain" ("_position" Q)
###           ("_tapp" ("_type_name" state) ("_type_name" assn)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoare.hoare1" ("\<^const>Set.empty") ("_position" MGT))
###       ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PHoare.cvalid" ("\<^const>Set.empty") ("_position" P)
###         ("_position" c) ("_position" Q)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PHoare.hoare" ("\<^const>Set.empty") ("_position" P)
###         ("_position" c)
###         ("_constrain" ("_position" Q)
###           ("_tapp" ("_type_name" state) ("_type_name" assn)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 174 of "$AFP/Abstract-Hoare-Logics/Proc/PHoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>PHoare.hoare1" ("\<^const>Set.empty")
###     ("_applC" ("_position" MGT) ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>PHoare.hoare1" ("\<^const>Set.empty") ("_position" MGT))
###     ("_position" c)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 176 of "$AFP/Abstract-Hoare-Logics/Proc/PHoare.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoare.hoare1" ("_position" C)
###       ("_applC" ("_position" MGT) ("_position" CALL))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoare.hoare1" ("_position" C)
###       ("_applC" ("_position" MGT) ("_position" c)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>PHoare.hoare1" ("_position" C) ("_position" MGT))
###       ("_position" CALL)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoare.hoare1" ("_position" C)
###       ("_applC" ("_position" MGT) ("_position" c)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoare.hoare1" ("_position" C)
###       ("_applC" ("_position" MGT) ("_position" CALL))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>PHoare.hoare1" ("_position" C) ("_position" MGT))
###       ("_position" c))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>PHoare.hoare1" ("_position" C) ("_position" MGT))
###       ("_position" CALL)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>PHoare.hoare1" ("_position" C) ("_position" MGT))
###       ("_position" c))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 216 of "$AFP/Abstract-Hoare-Logics/Proc/PHoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>PHoare.hoare1" ("\<^const>Set.empty")
###     ("_applC" ("_position" MGT) ("_position" CALL))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>PHoare.hoare1" ("\<^const>Set.empty") ("_position" MGT))
###     ("_position" CALL)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 224 of "$AFP/Abstract-Hoare-Logics/Proc/PHoare.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>PHoare.hoare1" ("\<^const>Set.empty")
###     ("_applC" ("_position" MGT) ("_position" c))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>PHoare.hoare1" ("\<^const>Set.empty") ("_position" MGT))
###     ("_position" c)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 227 of "$AFP/Abstract-Hoare-Logics/Proc/PHoare.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoare.cvalid" ("\<^const>Set.empty") ("_position" P)
###       ("_position" c) ("_position" Q)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoare.hoare1" ("\<^const>Set.empty")
###         ("_applC" ("_Finset" ("_position" P)) ("_position" c)))
###       ("_Finset"
###         ("_constrain" ("_position" Q)
###           ("_tapp" ("_type_name" state) ("_type_name" assn)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoare.cvalid" ("\<^const>Set.empty") ("_position" P)
###       ("_position" c) ("_position" Q)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoare.hoare1" ("\<^const>Set.empty")
###       ("_applC" ("_Finset" ("_position" P))
###         ("_cargs" ("_position" c)
###           ("_Finset"
###             ("_constrain" ("_position" Q)
###               ("_tapp" ("_type_name" state) ("_type_name" assn)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoare.cvalid" ("\<^const>Set.empty") ("_position" P)
###       ("_position" c) ("_position" Q)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoare.hoare1" ("\<^const>Set.empty")
###         ("_Finset" ("_position" P)))
###       ("_cargs" ("_position" c)
###         ("_Finset"
###           ("_constrain" ("_position" Q)
###             ("_tapp" ("_type_name" state) ("_type_name" assn))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoare.cvalid" ("\<^const>Set.empty") ("_position" P)
###       ("_position" c) ("_position" Q)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoare.hoare" ("\<^const>Set.empty") ("_position" P)
###       ("_position" c)
###       ("_constrain" ("_position" Q)
###         ("_tapp" ("_type_name" state) ("_type_name" assn))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.PHoare"
### 0.564s elapsed time, 2.018s cpu time, 0.644s GC time
Loading theory "Draft.PHoareTotal" (required by "Draft.PHoareTotalMoreTemplates")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "thoare"
  Proving monotonicity ...
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Ambiguous input (line 51 of "$AFP/Abstract-Hoare-Logics/Proc/PHoareTotal.thy") produces 5 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>hoare1" ("_position" C) ("_position" x))
###   ("\<^const>PHoareTotal.thoare" ("_position" C)
###     ("_applC" ("_position" fst) ("_position" x))
###     ("_applC" ("_position" fst)
###       ("_applC" ("_position" snd) ("_position" x)))
###     ("_applC" ("_position" snd)
###       ("_applC" ("_position" snd) ("_position" x)))))
### ("\<^const>Pure.eq" ("\<^fixed>hoare1" ("_position" C) ("_position" x))
###   ("\<^fixed>hoare1" ("_position" C)
###     ("_applC" ("_Finset" ("_applC" ("_position" fst) ("_position" x)))
###       ("_cargs" ("_position" fst)
###         ("_cargs" ("_applC" ("_position" snd) ("_position" x))
###           ("_Finset"
###             ("_applC" ("_position" snd)
###               ("_applC" ("_position" snd) ("_position" x)))))))))
### ("\<^const>Pure.eq" ("\<^fixed>hoare1" ("_position" C) ("_position" x))
###   ("_applC"
###     ("\<^fixed>hoare1" ("_position" C)
###       ("_Finset" ("_applC" ("_position" fst) ("_position" x))))
###     ("_cargs" ("_position" fst)
###       ("_cargs" ("_applC" ("_position" snd) ("_position" x))
###         ("_Finset"
###           ("_applC" ("_position" snd)
###             ("_applC" ("_position" snd) ("_position" x))))))))
### ("\<^const>Pure.eq" ("\<^fixed>hoare1" ("_position" C) ("_position" x))
###   ("_applC"
###     ("\<^fixed>hoare1" ("_position" C)
###       ("_applC" ("_Finset" ("_applC" ("_position" fst) ("_position" x)))
###         ("_position" fst)))
###     ("_cargs" ("_applC" ("_position" snd) ("_position" x))
###       ("_Finset"
###         ("_applC" ("_position" snd)
###           ("_applC" ("_position" snd) ("_position" x)))))))
### ("\<^const>Pure.eq" ("\<^fixed>hoare1" ("_position" C) ("_position" x))
###   ("_applC"
###     ("\<^fixed>hoare1" ("_position" C)
###       ("_applC" ("_Finset" ("_applC" ("_position" fst) ("_position" x)))
###         ("_cargs" ("_position" fst)
###           ("_applC" ("_position" snd) ("_position" x)))))
###     ("_Finset"
###       ("_applC" ("_position" snd)
###         ("_applC" ("_position" snd) ("_position" x))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 69 of "$AFP/Abstract-Hoare-Logics/Proc/PHoareTotal.thy") produces 52 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" z) ("_position" s))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" P')
###             ("_cargs" ("_position" z) ("_position" s)))
###           ("_applC" ("_position" P)
###             ("_cargs" ("_position" z) ("_position" s))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>PHoareTotal.thoare" ("_position" C) ("_position" P)
###           ("_position" c) ("_position" Q)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoareTotal.hoare1" ("_position" C)
###         ("_applC" ("_Finset" ("_position" P')) ("_position" c)))
###       ("_Finset" ("_position" Q)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" z) ("_position" s))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" P')
###             ("_cargs" ("_position" z) ("_position" s)))
###           ("_applC" ("_position" P)
###             ("_cargs" ("_position" z) ("_position" s))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC"
###           ("\<^const>PHoareTotal.hoare1" ("_position" C)
###             ("_Finset" ("_position" P)))
###           ("_cargs" ("_position" c) ("_Finset" ("_position" Q)))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoareTotal.hoare1" ("_position" C)
###         ("_applC" ("_Finset" ("_position" P')) ("_position" c)))
###       ("_Finset" ("_position" Q)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" z) ("_position" s))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" P')
###             ("_cargs" ("_position" z) ("_position" s)))
###           ("_applC" ("_position" P)
###             ("_cargs" ("_position" z)
###               ("\<^const>PHoareTotal.hoare1"
###                 ("\<^const>PLang.com.Semi" ("_position" s) ("_position" C))
###                 ("_applC" ("_Finset" ("_position" P))
###                   ("_cargs" ("_position" c)
###                     ("_Finset" ("_position" Q)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoareTotal.hoare1" ("_position" C)
###         ("_applC" ("_Finset" ("_position" P')) ("_position" c)))
###       ("_Finset" ("_position" Q)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" z) ("_position" s))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" P')
###             ("_cargs" ("_position" z) ("_position" s)))
###           ("_applC" ("_position" P)
###             ("\<^const>PHoareTotal.hoare1"
###               ("\<^const>PLang.com.Semi"
###                 ("_applC" ("_position" z) ("_position" s)) ("_position" C))
###               ("_applC" ("_Finset" ("_position" P))
###                 ("_cargs" ("_position" c)
###                   ("_Finset" ("_position" Q))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoareTotal.hoare1" ("_position" C)
###         ("_applC" ("_Finset" ("_position" P')) ("_position" c)))
###       ("_Finset" ("_position" Q)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" z) ("_position" s))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" P')
###             ("_cargs" ("_position" z) ("_position" s)))
###           ("\<^const>PHoareTotal.hoare1"
###             ("\<^const>PLang.com.Semi"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" z) ("_position" s)))
###               ("_position" C))
###             ("_applC" ("_Finset" ("_position" P))
###               ("_cargs" ("_position" c) ("_Finset" ("_position" Q)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoareTotal.hoare1" ("_position" C)
###         ("_applC" ("_Finset" ("_position" P')) ("_position" c)))
###       ("_Finset" ("_position" Q)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" z) ("_position" s))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" P')
###             ("_cargs" ("_position" z) ("_position" s)))
###           ("_applC" ("_position" P)
###             ("_cargs" ("_position" z) ("_position" s))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>PHoareTotal.hoare1" ("_position" C)
###           ("_applC" ("_Finset" ("_position" P))
###             ("_cargs" ("_position" c) ("_Finset" ("_position" Q))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoareTotal.hoare1" ("_position" C)
###         ("_applC" ("_Finset" ("_position" P')) ("_position" c)))
###       ("_Finset" ("_position" Q)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" z) ("_position" s))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" P')
###             ("_cargs" ("_position" z) ("_position" s)))
###           ("_applC"
###             ("\<^const>PHoareTotal.hoare1"
###               ("\<^const>PLang.com.Semi"
###                 ("_applC" ("_position" P)
###                   ("_cargs" ("_position" z) ("_position" s)))
###                 ("_position" C))
###               ("_Finset" ("_position" P)))
###             ("_cargs" ("_position" c) ("_Finset" ("_position" Q))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoareTotal.hoare1" ("_position" C)
###         ("_applC" ("_Finset" ("_position" P')) ("_position" c)))
###       ("_Finset" ("_position" Q)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" z) ("_position" s))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" P')
###             ("_cargs" ("_position" z) ("_position" s)))
###           ("_applC" ("_position" P)
###             ("_cargs"
###               ("\<^const>PHoareTotal.hoare1"
###                 ("\<^const>PLang.com.Semi"
###                   ("_applC" ("_position" z) ("_position" s))
###                   ("_position" C))
###                 ("_Finset" ("_position" P)))
###               ("_cargs" ("_position" c) ("_Finset" ("_position" Q)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoareTotal.hoare1" ("_position" C)
###         ("_applC" ("_Finset" ("_position" P')) ("_position" c)))
###       ("_Finset" ("_position" Q)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" z) ("_position" s))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" P')
###             ("_cargs" ("_position" z) ("_position" s)))
###           ("_applC" ("_position" P)
###             ("_cargs" ("_position" z)
###               ("_cargs"
###                 ("\<^const>PHoareTotal.hoare1"
###                   ("\<^const>PLang.com.Semi" ("_position" s)
###                     ("_position" C))
###                   ("_Finset" ("_position" P)))
###                 ("_cargs" ("_position" c)
###                   ("_Finset" ("_position" Q))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoareTotal.hoare1" ("_position" C)
###         ("_applC" ("_Finset" ("_position" P')) ("_position" c)))
###       ("_Finset" ("_position" Q)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" z) ("_position" s))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" P')
###             ("_cargs" ("_position" z) ("_position" s)))
###           ("_applC" ("_position" P)
###             ("_cargs" ("_position" z) ("_position" s))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC"
###           ("\<^const>PHoareTotal.hoare1" ("_position" C)
###             ("_applC" ("_Finset" ("_position" P)) ("_position" c)))
###           ("_Finset" ("_position" Q))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoareTotal.hoare1" ("_position" C)
###         ("_applC" ("_Finset" ("_position" P')) ("_position" c)))
###       ("_Finset" ("_position" Q)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 73 of "$AFP/Abstract-Hoare-Logics/Proc/PHoareTotal.thy") produces 16 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PHoareTotal.thoare" ("_position" C) ("_position" P)
###         ("_position" c) ("_position" Q)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder" ("_idts" ("_position" z) ("_position" s))
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" Q)
###               ("_cargs" ("_position" z) ("_position" s)))
###             ("_applC" ("_position" Q')
###               ("_cargs" ("_position" z) ("_position" s))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoareTotal.hoare1" ("_position" C)
###         ("_applC" ("_Finset" ("_position" P)) ("_position" c)))
###       ("_Finset" ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>PHoareTotal.hoare1" ("_position" C)
###           ("_Finset" ("_position" P)))
###         ("_cargs" ("_position" c) ("_Finset" ("_position" Q)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder" ("_idts" ("_position" z) ("_position" s))
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" Q)
###               ("_cargs" ("_position" z) ("_position" s)))
###             ("_applC" ("_position" Q')
###               ("_cargs" ("_position" z) ("_position" s))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoareTotal.hoare1" ("_position" C)
###         ("_applC" ("_Finset" ("_position" P)) ("_position" c)))
###       ("_Finset" ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PHoareTotal.hoare1" ("_position" C)
###         ("_applC" ("_Finset" ("_position" P))
###           ("_cargs" ("_position" c) ("_Finset" ("_position" Q))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder" ("_idts" ("_position" z) ("_position" s))
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" Q)
###               ("_cargs" ("_position" z) ("_position" s)))
###             ("_applC" ("_position" Q')
###               ("_cargs" ("_position" z) ("_position" s))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoareTotal.hoare1" ("_position" C)
###         ("_applC" ("_Finset" ("_position" P)) ("_position" c)))
###       ("_Finset" ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>PHoareTotal.hoare1" ("_position" C)
###           ("_applC" ("_Finset" ("_position" P)) ("_position" c)))
###         ("_Finset" ("_position" Q))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder" ("_idts" ("_position" z) ("_position" s))
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" Q)
###               ("_cargs" ("_position" z) ("_position" s)))
###             ("_applC" ("_position" Q')
###               ("_cargs" ("_position" z) ("_position" s))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoareTotal.hoare1" ("_position" C)
###         ("_applC" ("_Finset" ("_position" P)) ("_position" c)))
###       ("_Finset" ("_position" Q')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PHoareTotal.thoare" ("_position" C) ("_position" P)
###         ("_position" c) ("_position" Q)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder" ("_idts" ("_position" z) ("_position" s))
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" Q)
###               ("_cargs" ("_position" z) ("_position" s)))
###             ("_applC" ("_position" Q')
###               ("_cargs" ("_position" z) ("_position" s))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoareTotal.hoare1" ("_position" C)
###       ("_applC" ("_Finset" ("_position" P))
###         ("_cargs" ("_position" c) ("_Finset" ("_position" Q')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>PHoareTotal.hoare1" ("_position" C)
###           ("_Finset" ("_position" P)))
###         ("_cargs" ("_position" c) ("_Finset" ("_position" Q)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder" ("_idts" ("_position" z) ("_position" s))
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" Q)
###               ("_cargs" ("_position" z) ("_position" s)))
###             ("_applC" ("_position" Q')
###               ("_cargs" ("_position" z) ("_position" s))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoareTotal.hoare1" ("_position" C)
###       ("_applC" ("_Finset" ("_position" P))
###         ("_cargs" ("_position" c) ("_Finset" ("_position" Q')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PHoareTotal.hoare1" ("_position" C)
###         ("_applC" ("_Finset" ("_position" P))
###           ("_cargs" ("_position" c) ("_Finset" ("_position" Q))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder" ("_idts" ("_position" z) ("_position" s))
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" Q)
###               ("_cargs" ("_position" z) ("_position" s)))
###             ("_applC" ("_position" Q')
###               ("_cargs" ("_position" z) ("_position" s))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoareTotal.hoare1" ("_position" C)
###       ("_applC" ("_Finset" ("_position" P))
###         ("_cargs" ("_position" c) ("_Finset" ("_position" Q')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>PHoareTotal.hoare1" ("_position" C)
###           ("_applC" ("_Finset" ("_position" P)) ("_position" c)))
###         ("_Finset" ("_position" Q))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder" ("_idts" ("_position" z) ("_position" s))
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" Q)
###               ("_cargs" ("_position" z) ("_position" s)))
###             ("_applC" ("_position" Q')
###               ("_cargs" ("_position" z) ("_position" s))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoareTotal.hoare1" ("_position" C)
###       ("_applC" ("_Finset" ("_position" P))
###         ("_cargs" ("_position" c) ("_Finset" ("_position" Q')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PHoareTotal.thoare" ("_position" C) ("_position" P)
###         ("_position" c) ("_position" Q)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder" ("_idts" ("_position" z) ("_position" s))
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" Q)
###               ("_cargs" ("_position" z) ("_position" s)))
###             ("_applC" ("_position" Q')
###               ("_cargs" ("_position" z) ("_position" s))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoareTotal.hoare1" ("_position" C)
###         ("_Finset" ("_position" P)))
###       ("_cargs" ("_position" c) ("_Finset" ("_position" Q'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>PHoareTotal.hoare1" ("_position" C)
###           ("_Finset" ("_position" P)))
###         ("_cargs" ("_position" c) ("_Finset" ("_position" Q)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder" ("_idts" ("_position" z) ("_position" s))
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" Q)
###               ("_cargs" ("_position" z) ("_position" s)))
###             ("_applC" ("_position" Q')
###               ("_cargs" ("_position" z) ("_position" s))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoareTotal.hoare1" ("_position" C)
###         ("_Finset" ("_position" P)))
###       ("_cargs" ("_position" c) ("_Finset" ("_position" Q'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 96 of "$AFP/Abstract-Hoare-Logics/Proc/PHoareTotal.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoareTotal.hoare1" ("_position" C)
###         ("_applC" ("_Finset" ("_position" P)) ("_position" c)))
###       ("_Finset" ("_position" Q))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoareTotal.ctvalid" ("_position" C) ("_position" P)
###       ("_position" c) ("_position" Q))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoareTotal.hoare1" ("_position" C)
###       ("_applC" ("_Finset" ("_position" P))
###         ("_cargs" ("_position" c) ("_Finset" ("_position" Q))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoareTotal.ctvalid" ("_position" C) ("_position" P)
###       ("_position" c) ("_position" Q))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoareTotal.hoare1" ("_position" C)
###         ("_Finset" ("_position" P)))
###       ("_cargs" ("_position" c) ("_Finset" ("_position" Q)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoareTotal.ctvalid" ("_position" C) ("_position" P)
###       ("_position" c) ("_position" Q))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoareTotal.thoare" ("_position" C) ("_position" P)
###       ("_position" c) ("_position" Q)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoareTotal.ctvalid" ("_position" C) ("_position" P)
###       ("_position" c) ("_position" Q))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 144 of "$AFP/Abstract-Hoare-Logics/Proc/PHoareTotal.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoareTotal.hoare1" ("\<^const>Set.empty")
###       ("_applC" ("_position" MGT\<^sub>t) ("_position" c))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PHoareTotal.ctvalid" ("\<^const>Set.empty") ("_position" P)
###         ("_position" c) ("_position" Q)))
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>PHoareTotal.hoare1" ("\<^const>Set.empty")
###           ("_applC" ("_Finset" ("_position" P)) ("_position" c)))
###         ("_Finset"
###           ("_constrain" ("_position" Q)
###             ("_tapp" ("_type_name" state) ("_type_name" assn))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoareTotal.hoare1" ("\<^const>Set.empty")
###         ("_position" MGT\<^sub>t))
###       ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PHoareTotal.ctvalid" ("\<^const>Set.empty") ("_position" P)
###         ("_position" c) ("_position" Q)))
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>PHoareTotal.hoare1" ("\<^const>Set.empty")
###           ("_applC" ("_Finset" ("_position" P)) ("_position" c)))
###         ("_Finset"
###           ("_constrain" ("_position" Q)
###             ("_tapp" ("_type_name" state) ("_type_name" assn))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoareTotal.hoare1" ("\<^const>Set.empty")
###       ("_applC" ("_position" MGT\<^sub>t) ("_position" c))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PHoareTotal.ctvalid" ("\<^const>Set.empty") ("_position" P)
###         ("_position" c) ("_position" Q)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PHoareTotal.hoare1" ("\<^const>Set.empty")
###         ("_applC" ("_Finset" ("_position" P))
###           ("_cargs" ("_position" c)
###             ("_Finset"
###               ("_constrain" ("_position" Q)
###                 ("_tapp" ("_type_name" state) ("_type_name" assn))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoareTotal.hoare1" ("\<^const>Set.empty")
###         ("_position" MGT\<^sub>t))
###       ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PHoareTotal.ctvalid" ("\<^const>Set.empty") ("_position" P)
###         ("_position" c) ("_position" Q)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PHoareTotal.hoare1" ("\<^const>Set.empty")
###         ("_applC" ("_Finset" ("_position" P))
###           ("_cargs" ("_position" c)
###             ("_Finset"
###               ("_constrain" ("_position" Q)
###                 ("_tapp" ("_type_name" state) ("_type_name" assn))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoareTotal.hoare1" ("\<^const>Set.empty")
###       ("_applC" ("_position" MGT\<^sub>t) ("_position" c))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PHoareTotal.ctvalid" ("\<^const>Set.empty") ("_position" P)
###         ("_position" c) ("_position" Q)))
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>PHoareTotal.hoare1" ("\<^const>Set.empty")
###           ("_Finset" ("_position" P)))
###         ("_cargs" ("_position" c)
###           ("_Finset"
###             ("_constrain" ("_position" Q)
###               ("_tapp" ("_type_name" state) ("_type_name" assn)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoareTotal.hoare1" ("\<^const>Set.empty")
###         ("_position" MGT\<^sub>t))
###       ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PHoareTotal.ctvalid" ("\<^const>Set.empty") ("_position" P)
###         ("_position" c) ("_position" Q)))
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>PHoareTotal.hoare1" ("\<^const>Set.empty")
###           ("_Finset" ("_position" P)))
###         ("_cargs" ("_position" c)
###           ("_Finset"
###             ("_constrain" ("_position" Q)
###               ("_tapp" ("_type_name" state) ("_type_name" assn)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoareTotal.hoare1" ("\<^const>Set.empty")
###       ("_applC" ("_position" MGT\<^sub>t) ("_position" c))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PHoareTotal.ctvalid" ("\<^const>Set.empty") ("_position" P)
###         ("_position" c) ("_position" Q)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PHoareTotal.thoare" ("\<^const>Set.empty") ("_position" P)
###         ("_position" c)
###         ("_constrain" ("_position" Q)
###           ("_tapp" ("_type_name" state) ("_type_name" assn)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoareTotal.hoare1" ("\<^const>Set.empty")
###         ("_position" MGT\<^sub>t))
###       ("_position" c)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PHoareTotal.ctvalid" ("\<^const>Set.empty") ("_position" P)
###         ("_position" c) ("_position" Q)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PHoareTotal.thoare" ("\<^const>Set.empty") ("_position" P)
###         ("_position" c)
###         ("_constrain" ("_position" Q)
###           ("_tapp" ("_type_name" state) ("_type_name" assn)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 151 of "$AFP/Abstract-Hoare-Logics/Proc/PHoareTotal.thy") produces 3 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PLang.com.Semi"
###         ("\<^const>PLang.com.While" ("_position" b)
###           ("\<^const>PTermi.termi" ("_position" c) ("_position" s)))
###         ("_applC" ("_position" b) ("_position" s)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PTermi.termi" ("_position" c) ("_position" s))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PLang.com.While" ("_position" b)
###         ("\<^const>PTermi.termi" ("_position" c) ("_position" s))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" b) ("_position" s)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PTermi.termi" ("_position" c) ("_position" s))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PTermi.termi"
###         ("\<^const>PLang.com.While" ("_position" b) ("_position" c))
###         ("_position" s)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" b) ("_position" s)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PTermi.termi" ("_position" c) ("_position" s))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 155 of "$AFP/Abstract-Hoare-Logics/Proc/PHoareTotal.thy") produces 6 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PLang.com.Semi"
###         ("\<^const>PLang.com.While" ("_position" b)
###           ("\<^const>PTermi.termi" ("_position" c) ("_position" s)))
###         ("_applC" ("_position" b) ("_position" s))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>PLang.exec" ("_position" s) ("_position" c)
###           ("_position" t)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PTermi.termi"
###       ("\<^const>PLang.com.While" ("_position" b) ("_position" c))
###       ("_position" t))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PLang.com.While" ("_position" b)
###         ("\<^const>PTermi.termi" ("_position" c) ("_position" s))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" b) ("_position" s)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>PLang.exec" ("_position" s) ("_position" c)
###             ("_position" t))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PTermi.termi"
###       ("\<^const>PLang.com.While" ("_position" b) ("_position" c))
###       ("_position" t))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PTermi.termi"
###         ("\<^const>PLang.com.While" ("_position" b) ("_position" c))
###         ("_position" s)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" b) ("_position" s)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>PLang.exec" ("_position" s) ("_position" c)
###             ("_position" t))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PTermi.termi"
###       ("\<^const>PLang.com.While" ("_position" b) ("_position" c))
###       ("_position" t))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PLang.com.Semi"
###         ("\<^const>PLang.com.While" ("_position" b)
###           ("\<^const>PTermi.termi" ("_position" c) ("_position" s)))
###         ("_applC" ("_position" b) ("_position" s))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>PLang.exec" ("_position" s) ("_position" c)
###           ("_position" t)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.com.While" ("_position" b)
###       ("\<^const>PTermi.termi" ("_position" c) ("_position" t)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PLang.com.While" ("_position" b)
###         ("\<^const>PTermi.termi" ("_position" c) ("_position" s))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" b) ("_position" s)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>PLang.exec" ("_position" s) ("_position" c)
###             ("_position" t))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.com.While" ("_position" b)
###       ("\<^const>PTermi.termi" ("_position" c) ("_position" t)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PTermi.termi"
###         ("\<^const>PLang.com.While" ("_position" b) ("_position" c))
###         ("_position" s)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" b) ("_position" s)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>PLang.exec" ("_position" s) ("_position" c)
###             ("_position" t))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.com.While" ("_position" b)
###       ("\<^const>PTermi.termi" ("_position" c) ("_position" t)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 158 of "$AFP/Abstract-Hoare-Logics/Proc/PHoareTotal.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoareTotal.hoare1" ("_position" C)
###       ("_applC" ("_position" MGT\<^sub>t) ("_position" CALL))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoareTotal.hoare1" ("_position" C)
###       ("_applC" ("_position" MGT\<^sub>t) ("_position" c)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoareTotal.hoare1" ("_position" C)
###         ("_position" MGT\<^sub>t))
###       ("_position" CALL)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoareTotal.hoare1" ("_position" C)
###       ("_applC" ("_position" MGT\<^sub>t) ("_position" c)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoareTotal.hoare1" ("_position" C)
###       ("_applC" ("_position" MGT\<^sub>t) ("_position" CALL))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoareTotal.hoare1" ("_position" C)
###         ("_position" MGT\<^sub>t))
###       ("_position" c))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoareTotal.hoare1" ("_position" C)
###         ("_position" MGT\<^sub>t))
###       ("_position" CALL)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoareTotal.hoare1" ("_position" C)
###         ("_position" MGT\<^sub>t))
###       ("_position" c))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "exec1p"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 244 of "$AFP/Abstract-Hoare-Logics/Proc/PHoareTotal.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Groups.minus_class.minus" ("_position" s)
###       ("\<^const>PHoareTotal.exec1'" ("_position" c) ("_position" s'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" cs)
###       ("\<^const>PHoareTotal.exectr"
###         ("_tuple"
###           ("\<^const>List.list.Cons" ("_position" c) ("_position" cs))
###           ("_tuple_arg" ("_position" s)))
###         ("_tuple" ("_position" cs) ("_tuple_arg" ("_position" s')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec" ("_position" s) ("_position" c)
###       ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" cs)
###       ("\<^const>PHoareTotal.exectr"
###         ("_tuple"
###           ("\<^const>List.list.Cons" ("_position" c) ("_position" cs))
###           ("_tuple_arg" ("_position" s)))
###         ("_tuple" ("_position" cs) ("_tuple_arg" ("_position" s')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 260 of "$AFP/Abstract-Hoare-Logics/Proc/PHoareTotal.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Groups.minus_class.minus" ("_position" s)
###       ("\<^const>PHoareTotal.exec1'" ("_position" c) ("_position" t))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>execs" ("_position" t) ("_position" cs) ("_position" u)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>execs" ("_position" s)
###         ("\<^const>List.list.Cons" ("_position" c) ("_position" cs))
###         ("_position" u)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec" ("_position" s) ("_position" c) ("_position" t)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>execs" ("_position" t) ("_position" cs) ("_position" u)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>execs" ("_position" s)
###         ("\<^const>List.list.Cons" ("_position" c) ("_position" cs))
###         ("_position" u)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "execs"
  Proving monotonicity ...
### Ambiguous input (line 281 of "$AFP/Abstract-Hoare-Logics/Proc/PHoareTotal.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoareTotal.exectr"
###       ("_tuple" ("_list" ("_position" c)) ("_tuple_arg" ("_position" s)))
###       ("_tuple" ("\<^const>List.list.Nil") ("_tuple_arg" ("_position" t)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Groups.minus_class.minus" ("_position" s)
###       ("\<^const>PHoareTotal.exec1'" ("_position" c) ("_position" t)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoareTotal.exectr"
###       ("_tuple" ("_list" ("_position" c)) ("_tuple_arg" ("_position" s)))
###       ("_tuple" ("\<^const>List.list.Nil") ("_tuple_arg" ("_position" t)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PLang.exec" ("_position" s) ("_position" c)
###       ("_position" t))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 286 of "$AFP/Abstract-Hoare-Logics/Proc/PHoareTotal.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>termis"
###       ("\<^const>List.list.Cons" ("_position" c) ("_position" cs))
###       ("_position" s))
###     ("\<^const>HOL.conj"
###       ("\<^const>PTermi.termi" ("_position" c) ("_position" s))
###       ("\<^const>HOL.All_binder" ("_position" t)
###         ("\<^const>HOL.implies"
###           ("\<^const>Groups.minus_class.minus" ("_position" s)
###             ("\<^const>PHoareTotal.exec1'" ("_position" c) ("_position" t)))
###           ("\<^fixed>termis" ("_position" cs) ("_position" t)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>termis"
###       ("\<^const>List.list.Cons" ("_position" c) ("_position" cs))
###       ("_position" s))
###     ("\<^const>HOL.conj"
###       ("\<^const>PTermi.termi" ("_position" c) ("_position" s))
###       ("\<^const>HOL.All_binder" ("_position" t)
###         ("\<^const>HOL.implies"
###           ("\<^const>PLang.exec" ("_position" s) ("_position" c)
###             ("_position" t))
###           ("\<^fixed>termis" ("_position" cs) ("_position" t)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  termis :: "com list => state => bool"
### theory "HOL-Library.Tree"
### 2.163s elapsed time, 6.961s cpu time, 1.071s GC time
Loading theory "Draft.Templates" (required by "Draft.PHoareTotalMoreTemplates" via "Draft.ExtrEqs")
### Ambiguous input (line 555 of "$AFP/Abstract-Hoare-Logics/Proc/PHoareTotal.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" inf)
###       ("_cargs" ("\<^const>List.list.Cons" ("_position" c) ("_position" cs))
###         ("_position" s))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" inf)
###         ("_cargs" ("_list" ("_position" c)) ("_position" s)))
###       ("\<^const>HOL.Ex_binder" ("_position" t)
###         ("\<^const>HOL.conj"
###           ("\<^const>PLang.exec" ("_position" s) ("_position" c)
###             ("_position" t))
###           ("_applC" ("_position" inf)
###             ("_cargs" ("_position" cs) ("_position" t))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" inf)
###       ("_cargs" ("\<^const>List.list.Cons" ("_position" c) ("_position" cs))
###         ("_position" s))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" inf)
###         ("_cargs" ("_list" ("_position" c)) ("_position" s)))
###       ("\<^const>HOL.Ex_binder" ("_position" t)
###         ("\<^const>HOL.conj"
###           ("\<^const>Groups.minus_class.minus" ("_position" s)
###             ("\<^const>PHoareTotal.exec1'" ("_position" c) ("_position" t)))
###           ("_applC" ("_position" inf)
###             ("_cargs" ("_position" cs) ("_position" t))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  cseq :: "(nat => state) => nat => com list"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.109s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.PHoareTotalMoreTemplates")
### Ambiguous input (line 678 of "$AFP/Abstract-Hoare-Logics/Proc/PHoareTotal.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>PHoareTotal.thoare"
###     ("_Finset"
###       ("_tuple"
###         ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" z) ("_position" s))
###               ("\<^const>PTermi.termi" ("_position" body) ("_position" s)))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" s) ("_tuple_arg" ("_position" t)))
###               ("_position" termi_call_steps))))
###         ("_tuple_args" ("_position" CALL)
###           ("_tuple_arg"
###             ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###               ("\<^const>Groups.minus_class.minus" ("_position" z)
###                 ("\<^const>PHoareTotal.exec1'" ("_position" body)
###                   ("_position" s))))))))
###     ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s))
###           ("\<^const>PTermi.termi" ("_position" body) ("_position" t)))
###         ("\<^const>HOL.Ex_binder" ("_position" cs)
###           ("\<^const>PHoareTotal.exectr"
###             ("_tuple" ("_list" ("_position" body))
###               ("_tuple_arg" ("_position" t)))
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" c) ("_position" cs))
###               ("_tuple_arg" ("_position" s)))))))
###     ("_position" c)
###     ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###       ("\<^const>PLang.exec" ("_position" z) ("_position" c)
###         ("_position" s)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>PHoareTotal.thoare"
###     ("_Finset"
###       ("_tuple"
###         ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" z) ("_position" s))
###               ("\<^const>PTermi.termi" ("_position" body) ("_position" s)))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" s) ("_tuple_arg" ("_position" t)))
###               ("_position" termi_call_steps))))
###         ("_tuple_args" ("_position" CALL)
###           ("_tuple_arg"
###             ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###               ("\<^const>PLang.exec" ("_position" z) ("_position" body)
###                 ("_position" s)))))))
###     ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s))
###           ("\<^const>PTermi.termi" ("_position" body) ("_position" t)))
###         ("\<^const>HOL.Ex_binder" ("_position" cs)
###           ("\<^const>PHoareTotal.exectr"
###             ("_tuple" ("_list" ("_position" body))
###               ("_tuple_arg" ("_position" t)))
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" c) ("_position" cs))
###               ("_tuple_arg" ("_position" s)))))))
###     ("_position" c)
###     ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###       ("\<^const>PLang.exec" ("_position" z) ("_position" c)
###         ("_position" s)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>PHoareTotal.hoare1"
###       ("_Finset"
###         ("_tuple"
###           ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" z) ("_position" s))
###                 ("\<^const>PTermi.termi" ("_position" body)
###                   ("_position" s)))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" s) ("_tuple_arg" ("_position" t)))
###                 ("_position" termi_call_steps))))
###           ("_tuple_args" ("_position" CALL)
###             ("_tuple_arg"
###               ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###                 ("\<^const>PLang.exec" ("_position" z) ("_position" body)
###                   ("_position" s)))))))
###       ("_Finset"
###         ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" z) ("_position" s))
###               ("\<^const>PTermi.termi" ("_position" body) ("_position" t)))
###             ("\<^const>HOL.Ex_binder" ("_position" cs)
###               ("\<^const>PHoareTotal.exectr"
###                 ("_tuple" ("_list" ("_position" body))
###                   ("_tuple_arg" ("_position" t)))
###                 ("_tuple"
###                   ("\<^const>List.list.Cons" ("_position" c)
###                     ("_position" cs))
###                   ("_tuple_arg" ("_position" s)))))))))
###     ("_cargs" ("_position" c)
###       ("_Finset"
###         ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###           ("\<^const>PLang.exec" ("_position" z) ("_position" c)
###             ("_position" s)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>PHoareTotal.hoare1"
###     ("_Finset"
###       ("_tuple"
###         ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" z) ("_position" s))
###               ("\<^const>PTermi.termi" ("_position" body) ("_position" s)))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" s) ("_tuple_arg" ("_position" t)))
###               ("_position" termi_call_steps))))
###         ("_tuple_args" ("_position" CALL)
###           ("_tuple_arg"
###             ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###               ("\<^const>Groups.minus_class.minus" ("_position" z)
###                 ("\<^const>PHoareTotal.exec1'" ("_position" body)
###                   ("_position" s))))))))
###     ("_applC"
###       ("_Finset"
###         ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" z) ("_position" s))
###               ("\<^const>PTermi.termi" ("_position" body) ("_position" t)))
###             ("\<^const>HOL.Ex_binder" ("_position" cs)
###               ("\<^const>PHoareTotal.exectr"
###                 ("_tuple" ("_list" ("_position" body))
###                   ("_tuple_arg" ("_position" t)))
###                 ("_tuple"
###                   ("\<^const>List.list.Cons" ("_position" c)
###                     ("_position" cs))
###                   ("_tuple_arg" ("_position" s))))))))
###       ("_cargs" ("_position" c)
###         ("_Finset"
###           ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###             ("\<^const>PLang.exec" ("_position" z) ("_position" c)
###               ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>PHoareTotal.hoare1"
###     ("_Finset"
###       ("_tuple"
###         ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" z) ("_position" s))
###               ("\<^const>PTermi.termi" ("_position" body) ("_position" s)))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" s) ("_tuple_arg" ("_position" t)))
###               ("_position" termi_call_steps))))
###         ("_tuple_args" ("_position" CALL)
###           ("_tuple_arg"
###             ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###               ("\<^const>PLang.exec" ("_position" z) ("_position" body)
###                 ("_position" s)))))))
###     ("_applC"
###       ("_Finset"
###         ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" z) ("_position" s))
###               ("\<^const>PTermi.termi" ("_position" body) ("_position" t)))
###             ("\<^const>HOL.Ex_binder" ("_position" cs)
###               ("\<^const>PHoareTotal.exectr"
###                 ("_tuple" ("_list" ("_position" body))
###                   ("_tuple_arg" ("_position" t)))
###                 ("_tuple"
###                   ("\<^const>List.list.Cons" ("_position" c)
###                     ("_position" cs))
###                   ("_tuple_arg" ("_position" s))))))))
###       ("_cargs" ("_position" c)
###         ("_Finset"
###           ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###             ("\<^const>PLang.exec" ("_position" z) ("_position" c)
###               ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>PHoareTotal.hoare1"
###       ("_Finset"
###         ("_tuple"
###           ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" z) ("_position" s))
###                 ("\<^const>PTermi.termi" ("_position" body)
###                   ("_position" s)))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" s) ("_tuple_arg" ("_position" t)))
###                 ("_position" termi_call_steps))))
###           ("_tuple_args" ("_position" CALL)
###             ("_tuple_arg"
###               ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###                 ("\<^const>Groups.minus_class.minus" ("_position" z)
###                   ("\<^const>PHoareTotal.exec1'" ("_position" body)
###                     ("_position" s))))))))
###       ("_Finset"
###         ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" z) ("_position" s))
###               ("\<^const>PTermi.termi" ("_position" body) ("_position" t)))
###             ("\<^const>HOL.Ex_binder" ("_position" cs)
###               ("\<^const>PHoareTotal.exectr"
###                 ("_tuple" ("_list" ("_position" body))
###                   ("_tuple_arg" ("_position" t)))
###                 ("_tuple"
###                   ("\<^const>List.list.Cons" ("_position" c)
###                     ("_position" cs))
###                   ("_tuple_arg" ("_position" s)))))))))
###     ("_cargs" ("_position" c)
###       ("_Finset"
###         ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###           ("\<^const>PLang.exec" ("_position" z) ("_position" c)
###             ("_position" s)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>PHoareTotal.hoare1"
###       ("_Finset"
###         ("_tuple"
###           ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" z) ("_position" s))
###                 ("\<^const>PTermi.termi" ("_position" body)
###                   ("_position" s)))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" s) ("_tuple_arg" ("_position" t)))
###                 ("_position" termi_call_steps))))
###           ("_tuple_args" ("_position" CALL)
###             ("_tuple_arg"
###               ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###                 ("\<^const>PLang.exec" ("_position" z) ("_position" body)
###                   ("_position" s)))))))
###       ("_applC"
###         ("_Finset"
###           ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" z) ("_position" s))
###                 ("\<^const>PTermi.termi" ("_position" body)
###                   ("_position" t)))
###               ("\<^const>HOL.Ex_binder" ("_position" cs)
###                 ("\<^const>PHoareTotal.exectr"
###                   ("_tuple" ("_list" ("_position" body))
###                     ("_tuple_arg" ("_position" t)))
###                   ("_tuple"
###                     ("\<^const>List.list.Cons" ("_position" c)
###                       ("_position" cs))
###                     ("_tuple_arg" ("_position" s))))))))
###         ("_position" c)))
###     ("_Finset"
###       ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###         ("\<^const>PLang.exec" ("_position" z) ("_position" c)
###           ("_position" s))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>PHoareTotal.hoare1"
###       ("_Finset"
###         ("_tuple"
###           ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" z) ("_position" s))
###                 ("\<^const>PTermi.termi" ("_position" body)
###                   ("_position" s)))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" s) ("_tuple_arg" ("_position" t)))
###                 ("_position" termi_call_steps))))
###           ("_tuple_args" ("_position" CALL)
###             ("_tuple_arg"
###               ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###                 ("\<^const>Groups.minus_class.minus" ("_position" z)
###                   ("\<^const>PHoareTotal.exec1'" ("_position" body)
###                     ("_position" s))))))))
###       ("_applC"
###         ("_Finset"
###           ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" z) ("_position" s))
###                 ("\<^const>PTermi.termi" ("_position" body)
###                   ("_position" t)))
###               ("\<^const>HOL.Ex_binder" ("_position" cs)
###                 ("\<^const>PHoareTotal.exectr"
###                   ("_tuple" ("_list" ("_position" body))
###                     ("_tuple_arg" ("_position" t)))
###                   ("_tuple"
###                     ("\<^const>List.list.Cons" ("_position" c)
###                       ("_position" cs))
###                     ("_tuple_arg" ("_position" s))))))))
###         ("_position" c)))
###     ("_Finset"
###       ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###         ("\<^const>PLang.exec" ("_position" z) ("_position" c)
###           ("_position" s))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>PHoareTotal.thoare"
###     ("_Finset"
###       ("_tuple"
###         ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" z) ("_position" s))
###               ("\<^const>PTermi.termi" ("_position" body) ("_position" s)))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" s) ("_tuple_arg" ("_position" t)))
###               ("_position" termi_call_steps))))
###         ("_tuple_args" ("_position" CALL)
###           ("_tuple_arg"
###             ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###               ("\<^const>Groups.minus_class.minus" ("_position" z)
###                 ("\<^const>PHoareTotal.exec1'" ("_position" body)
###                   ("_position" s))))))))
###     ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s))
###           ("\<^const>PTermi.termi" ("_position" body) ("_position" t)))
###         ("\<^const>HOL.Ex_binder" ("_position" cs)
###           ("\<^const>PHoareTotal.exectr"
###             ("_tuple" ("_list" ("_position" body))
###               ("_tuple_arg" ("_position" t)))
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" c) ("_position" cs))
###               ("_tuple_arg" ("_position" s)))))))
###     ("_position" c)
###     ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###       ("\<^const>Groups.minus_class.minus" ("_position" z)
###         ("\<^const>PHoareTotal.exec1'" ("_position" c) ("_position" s))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>PHoareTotal.thoare"
###     ("_Finset"
###       ("_tuple"
###         ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" z) ("_position" s))
###               ("\<^const>PTermi.termi" ("_position" body) ("_position" s)))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" s) ("_tuple_arg" ("_position" t)))
###               ("_position" termi_call_steps))))
###         ("_tuple_args" ("_position" CALL)
###           ("_tuple_arg"
###             ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###               ("\<^const>PLang.exec" ("_position" z) ("_position" body)
###                 ("_position" s)))))))
###     ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s))
###           ("\<^const>PTermi.termi" ("_position" body) ("_position" t)))
###         ("\<^const>HOL.Ex_binder" ("_position" cs)
###           ("\<^const>PHoareTotal.exectr"
###             ("_tuple" ("_list" ("_position" body))
###               ("_tuple_arg" ("_position" t)))
###             ("_tuple"
###               ("\<^const>List.list.Cons" ("_position" c) ("_position" cs))
###               ("_tuple_arg" ("_position" s)))))))
###     ("_position" c)
###     ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###       ("\<^const>Groups.minus_class.minus" ("_position" z)
###         ("\<^const>PHoareTotal.exec1'" ("_position" c) ("_position" s))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 762 of "$AFP/Abstract-Hoare-Logics/Proc/PHoareTotal.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>PHoareTotal.thoare"
###     ("_Finset"
###       ("_tuple"
###         ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" z) ("_position" s))
###               ("\<^const>PTermi.termi" ("_position" body) ("_position" s)))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" s) ("_tuple_arg" ("_position" t)))
###               ("_position" termi_call_steps))))
###         ("_tuple_args" ("_position" CALL)
###           ("_tuple_arg"
###             ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###               ("\<^const>Groups.minus_class.minus" ("_position" z)
###                 ("\<^const>PHoareTotal.exec1'" ("_position" body)
###                   ("_position" s))))))))
###     ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s))
###           ("\<^const>PTermi.termi" ("_position" body) ("_position" s)))
###         ("\<^const>HOL.eq" ("_position" s) ("_position" t))))
###     ("_position" body)
###     ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###       ("\<^const>PLang.exec" ("_position" z) ("_position" body)
###         ("_position" s)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>PHoareTotal.thoare"
###     ("_Finset"
###       ("_tuple"
###         ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" z) ("_position" s))
###               ("\<^const>PTermi.termi" ("_position" body) ("_position" s)))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" s) ("_tuple_arg" ("_position" t)))
###               ("_position" termi_call_steps))))
###         ("_tuple_args" ("_position" CALL)
###           ("_tuple_arg"
###             ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###               ("\<^const>PLang.exec" ("_position" z) ("_position" body)
###                 ("_position" s)))))))
###     ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s))
###           ("\<^const>PTermi.termi" ("_position" body) ("_position" s)))
###         ("\<^const>HOL.eq" ("_position" s) ("_position" t))))
###     ("_position" body)
###     ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###       ("\<^const>PLang.exec" ("_position" z) ("_position" body)
###         ("_position" s)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>PHoareTotal.hoare1"
###       ("_Finset"
###         ("_tuple"
###           ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" z) ("_position" s))
###                 ("\<^const>PTermi.termi" ("_position" body)
###                   ("_position" s)))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" s) ("_tuple_arg" ("_position" t)))
###                 ("_position" termi_call_steps))))
###           ("_tuple_args" ("_position" CALL)
###             ("_tuple_arg"
###               ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###                 ("\<^const>PLang.exec" ("_position" z) ("_position" body)
###                   ("_position" s)))))))
###       ("_Finset"
###         ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" z) ("_position" s))
###               ("\<^const>PTermi.termi" ("_position" body) ("_position" s)))
###             ("\<^const>HOL.eq" ("_position" s) ("_position" t))))))
###     ("_cargs" ("_position" body)
###       ("_Finset"
###         ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###           ("\<^const>PLang.exec" ("_position" z) ("_position" body)
###             ("_position" s)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>PHoareTotal.hoare1"
###     ("_Finset"
###       ("_tuple"
###         ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" z) ("_position" s))
###               ("\<^const>PTermi.termi" ("_position" body) ("_position" s)))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" s) ("_tuple_arg" ("_position" t)))
###               ("_position" termi_call_steps))))
###         ("_tuple_args" ("_position" CALL)
###           ("_tuple_arg"
###             ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###               ("\<^const>Groups.minus_class.minus" ("_position" z)
###                 ("\<^const>PHoareTotal.exec1'" ("_position" body)
###                   ("_position" s))))))))
###     ("_applC"
###       ("_Finset"
###         ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" z) ("_position" s))
###               ("\<^const>PTermi.termi" ("_position" body) ("_position" s)))
###             ("\<^const>HOL.eq" ("_position" s) ("_position" t)))))
###       ("_cargs" ("_position" body)
###         ("_Finset"
###           ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###             ("\<^const>PLang.exec" ("_position" z) ("_position" body)
###               ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>PHoareTotal.hoare1"
###     ("_Finset"
###       ("_tuple"
###         ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" z) ("_position" s))
###               ("\<^const>PTermi.termi" ("_position" body) ("_position" s)))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" s) ("_tuple_arg" ("_position" t)))
###               ("_position" termi_call_steps))))
###         ("_tuple_args" ("_position" CALL)
###           ("_tuple_arg"
###             ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###               ("\<^const>PLang.exec" ("_position" z) ("_position" body)
###                 ("_position" s)))))))
###     ("_applC"
###       ("_Finset"
###         ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" z) ("_position" s))
###               ("\<^const>PTermi.termi" ("_position" body) ("_position" s)))
###             ("\<^const>HOL.eq" ("_position" s) ("_position" t)))))
###       ("_cargs" ("_position" body)
###         ("_Finset"
###           ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###             ("\<^const>PLang.exec" ("_position" z) ("_position" body)
###               ("_position" s))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>PHoareTotal.hoare1"
###       ("_Finset"
###         ("_tuple"
###           ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" z) ("_position" s))
###                 ("\<^const>PTermi.termi" ("_position" body)
###                   ("_position" s)))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" s) ("_tuple_arg" ("_position" t)))
###                 ("_position" termi_call_steps))))
###           ("_tuple_args" ("_position" CALL)
###             ("_tuple_arg"
###               ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###                 ("\<^const>Groups.minus_class.minus" ("_position" z)
###                   ("\<^const>PHoareTotal.exec1'" ("_position" body)
###                     ("_position" s))))))))
###       ("_Finset"
###         ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" z) ("_position" s))
###               ("\<^const>PTermi.termi" ("_position" body) ("_position" s)))
###             ("\<^const>HOL.eq" ("_position" s) ("_position" t))))))
###     ("_cargs" ("_position" body)
###       ("_Finset"
###         ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###           ("\<^const>PLang.exec" ("_position" z) ("_position" body)
###             ("_position" s)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>PHoareTotal.hoare1"
###       ("_Finset"
###         ("_tuple"
###           ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" z) ("_position" s))
###                 ("\<^const>PTermi.termi" ("_position" body)
###                   ("_position" s)))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" s) ("_tuple_arg" ("_position" t)))
###                 ("_position" termi_call_steps))))
###           ("_tuple_args" ("_position" CALL)
###             ("_tuple_arg"
###               ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###                 ("\<^const>PLang.exec" ("_position" z) ("_position" body)
###                   ("_position" s)))))))
###       ("_applC"
###         ("_Finset"
###           ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" z) ("_position" s))
###                 ("\<^const>PTermi.termi" ("_position" body)
###                   ("_position" s)))
###               ("\<^const>HOL.eq" ("_position" s) ("_position" t)))))
###         ("_position" body)))
###     ("_Finset"
###       ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###         ("\<^const>PLang.exec" ("_position" z) ("_position" body)
###           ("_position" s))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>PHoareTotal.hoare1"
###       ("_Finset"
###         ("_tuple"
###           ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" z) ("_position" s))
###                 ("\<^const>PTermi.termi" ("_position" body)
###                   ("_position" s)))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" s) ("_tuple_arg" ("_position" t)))
###                 ("_position" termi_call_steps))))
###           ("_tuple_args" ("_position" CALL)
###             ("_tuple_arg"
###               ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###                 ("\<^const>Groups.minus_class.minus" ("_position" z)
###                   ("\<^const>PHoareTotal.exec1'" ("_position" body)
###                     ("_position" s))))))))
###       ("_applC"
###         ("_Finset"
###           ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" z) ("_position" s))
###                 ("\<^const>PTermi.termi" ("_position" body)
###                   ("_position" s)))
###               ("\<^const>HOL.eq" ("_position" s) ("_position" t)))))
###         ("_position" body)))
###     ("_Finset"
###       ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###         ("\<^const>PLang.exec" ("_position" z) ("_position" body)
###           ("_position" s))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>PHoareTotal.thoare"
###     ("_Finset"
###       ("_tuple"
###         ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" z) ("_position" s))
###               ("\<^const>PTermi.termi" ("_position" body) ("_position" s)))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" s) ("_tuple_arg" ("_position" t)))
###               ("_position" termi_call_steps))))
###         ("_tuple_args" ("_position" CALL)
###           ("_tuple_arg"
###             ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###               ("\<^const>Groups.minus_class.minus" ("_position" z)
###                 ("\<^const>PHoareTotal.exec1'" ("_position" body)
###                   ("_position" s))))))))
###     ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s))
###           ("\<^const>PTermi.termi" ("_position" body) ("_position" s)))
###         ("\<^const>HOL.eq" ("_position" s) ("_position" t))))
###     ("_position" body)
###     ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###       ("\<^const>Groups.minus_class.minus" ("_position" z)
###         ("\<^const>PHoareTotal.exec1'" ("_position" body)
###           ("_position" s))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>PHoareTotal.thoare"
###     ("_Finset"
###       ("_tuple"
###         ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" z) ("_position" s))
###               ("\<^const>PTermi.termi" ("_position" body) ("_position" s)))
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" s) ("_tuple_arg" ("_position" t)))
###               ("_position" termi_call_steps))))
###         ("_tuple_args" ("_position" CALL)
###           ("_tuple_arg"
###             ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###               ("\<^const>PLang.exec" ("_position" z) ("_position" body)
###                 ("_position" s)))))))
###     ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" z) ("_position" s))
###           ("\<^const>PTermi.termi" ("_position" body) ("_position" s)))
###         ("\<^const>HOL.eq" ("_position" s) ("_position" t))))
###     ("_position" body)
###     ("_lambda" ("_pttrns" ("_position" z) ("_position" s))
###       ("\<^const>Groups.minus_class.minus" ("_position" z)
###         ("\<^const>PHoareTotal.exec1'" ("_position" body)
###           ("_position" s))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 768 of "$AFP/Abstract-Hoare-Logics/Proc/PHoareTotal.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>PHoareTotal.hoare1" ("\<^const>Set.empty")
###     ("_applC" ("_position" MGT\<^sub>t) ("_position" CALL))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>PHoareTotal.hoare1" ("\<^const>Set.empty")
###       ("_position" MGT\<^sub>t))
###     ("_position" CALL)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 774 of "$AFP/Abstract-Hoare-Logics/Proc/PHoareTotal.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoareTotal.ctvalid" ("\<^const>Set.empty") ("_position" P)
###       ("_position" c) ("_position" Q)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoareTotal.hoare1" ("\<^const>Set.empty")
###         ("_applC" ("_Finset" ("_position" P)) ("_position" c)))
###       ("_Finset"
###         ("_constrain" ("_position" Q)
###           ("_tapp" ("_type_name" state) ("_type_name" assn)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoareTotal.ctvalid" ("\<^const>Set.empty") ("_position" P)
###       ("_position" c) ("_position" Q)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoareTotal.hoare1" ("\<^const>Set.empty")
###       ("_applC" ("_Finset" ("_position" P))
###         ("_cargs" ("_position" c)
###           ("_Finset"
###             ("_constrain" ("_position" Q)
###               ("_tapp" ("_type_name" state) ("_type_name" assn)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoareTotal.ctvalid" ("\<^const>Set.empty") ("_position" P)
###       ("_position" c) ("_position" Q)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PHoareTotal.hoare1" ("\<^const>Set.empty")
###         ("_Finset" ("_position" P)))
###       ("_cargs" ("_position" c)
###         ("_Finset"
###           ("_constrain" ("_position" Q)
###             ("_tapp" ("_type_name" state) ("_type_name" assn))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoareTotal.ctvalid" ("\<^const>Set.empty") ("_position" P)
###       ("_position" c) ("_position" Q)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PHoareTotal.thoare" ("\<^const>Set.empty") ("_position" P)
###       ("_position" c)
###       ("_constrain" ("_position" Q)
###         ("_tapp" ("_type_name" state) ("_type_name" assn))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.PHoareTotal"
### 0.860s elapsed time, 1.843s cpu time, 0.193s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.499s elapsed time, 0.651s cpu time, 0.077s GC time
Loading theory "Draft.PHoareTotalMoreTemplates"
val templateLemmas =
   [("PHoareTotal.termi_impl_not_inf",
     "?c \<down> ?s ==> ~ PHoareTotal.inf [?c] ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_hole 0)),
                 template_var 0)
               )
           ))),
    ("PHoareTotal.exec1E", "([], ?s) \<rightarrow> (?cs', ?s') ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_hole 1),
                      template_var 3)),
                  template_app
                   (template_app (template_hole 2, template_var 2),
                    template_var 1))),
              template_hole 0)
            )],
       template_predicate (template_var 0))),
    ("PHoareTotal.while_termiE",
     "[| WHILE ?b DO ?c \<down> ?s; ?b ?s |] ==> ?c \<down> ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_predicate (template_app (template_var 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), template_var 0)
           ))),
    ("PHoareTotal.exec1s_impl_execs",
     "(?cs, ?s) \<rightarrow>\<^sup>* ([], ?t) ==> ?s =?cs\<Rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 2),
                      template_var 1)),
                  template_app
                   (template_app (template_hole 4, template_hole 3),
                    template_var 0))),
              template_app (template_hole 2, template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 0)
           ))),
    ("PHoareTotal.skolemize2",
     "ALL x. EX y. ?P x y ==> EX f. ALL x. ?P x (f x)",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("PHoareTotal.exec_impl_execs",
     "?s -?c\<rightarrow> ?s' ==>
      (?c # ?cs, ?s) \<rightarrow>\<^sup>* (?cs, ?s')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 2),
                         template_var 0)),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_var 1))),
             template_app (template_hole 1, template_hole 0))
           ))),
    ("PHoareTotal.exec1_pres_termis",
     "(?cs, ?s) \<rightarrow> (?cs', ?s') ==>
      ?cs \<Down> ?s --> ?cs' \<Down> ?s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 3),
                      template_var 2)),
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_var 0))),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("PHoareTotal.exec1s_impl_exec",
     "([?c], ?s) \<rightarrow>\<^sup>* ([], ?t) ==> ?s -?c\<rightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app
                         (template_app (template_hole 4, template_var 2),
                          template_hole 3)),
                      template_var 1)),
                  template_app
                   (template_app (template_hole 5, template_hole 3),
                    template_var 0))),
              template_app (template_hole 2, template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 0)
           ))),
    ("PHoareTotal.execs_pres_termis",
     "(?cs, ?s) \<rightarrow>\<^sup>* (?cs', ?s') ==>
      ?cs \<Down> ?s --> ?cs' \<Down> ?s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 3),
                      template_var 2)),
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_var 0))),
              template_app (template_hole 3, template_hole 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("PHoareTotal.exec1_only1",
     "(?c # ?cs, ?s) \<rightarrow> (?cs', ?t) ==> EX cs1. ?cs' = cs1 @ ?cs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app
                         (template_app (template_hole 4, template_var 4),
                          template_var 3)),
                      template_var 2)),
                  template_app
                   (template_app (template_hole 5, template_var 1),
                    template_var 0))),
              template_hole 3)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("PHoareTotal.while_termiE2",
     "[| WHILE ?b DO ?c \<down> ?s; ?b ?s; ?s -?c\<rightarrow> ?t |]
      ==> WHILE ?b DO ?c \<down> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_var 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 1),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_var 0)
           ))),
    ("PHoareTotal.inf_cases",
     "PHoareTotal.inf (?c # ?cs) ?s ==>
      PHoareTotal.inf [?c] ?s |
      (EX t. ?s -?c\<rightarrow> t & PHoareTotal.inf ?cs t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 2),
                     template_hole 3)),
                 template_var 0)),
             template_app (template_hole 2, t_empty))
           ))),
    ("PHoareTotal.skolemize1",
     "ALL x. ?P x --> (EX y. ?Q x y) ==> EX f. ALL x. ?P x --> ?Q x (f x)",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("PHoareTotal.app_exec",
     "(?cs, ?s) \<rightarrow> (?cs', ?s') ==>
      (?cs @ ?cs2.0, ?s) \<rightarrow> (?cs' @ ?cs2.0, ?s')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 4),
                      template_var 3)),
                  template_app
                   (template_app (template_hole 2, template_var 2),
                    template_var 1))),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 0)),
                     template_var 3)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 0)),
                   template_var 1))),
             template_hole 1)
           ))),
    ("PHoareTotal.execs_pres_termi",
     "[| ([?c], ?s) \<rightarrow>\<^sup>* (?c' # ?cs', ?s');
         ?c \<down> ?s |]
      ==> ?c' \<down> ?s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app
                         (template_app (template_hole 4, template_var 4),
                          template_hole 3)),
                      template_var 3)),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_app (template_hole 4, template_var 2),
                        template_var 1)),
                    template_var 0))),
              template_app (template_hole 2, template_hole 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 4),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("PHoareTotal.weaken_post",
     "[| ?C \<turnstile>\<^sub>t {?P} ?c {?Q};
         ALL z s. ?Q z s --> ?Q' z s |]
      ==> ?C \<turnstile>\<^sub>t {?P} ?c {?Q'}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("PHoareTotal.strengthen_pre",
     "[| ALL z s. ?P' z s --> ?P z s;
         ?C \<turnstile>\<^sub>t {?P} ?c {?Q} |]
      ==> ?C \<turnstile>\<^sub>t {?P'} ?c {?Q}",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 4),
               template_var 1),
             template_var 0)
           ))),
    ("PHoareTotal.app_execs",
     "(?cs, ?s) \<rightarrow>\<^sup>* (?cs', ?s') ==>
      (?cs @ ?cs2.0, ?s) \<rightarrow>\<^sup>* (?cs' @ ?cs2.0, ?s')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 4),
                      template_var 3)),
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 1))),
              template_app (template_hole 2, template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 0)),
                     template_var 3)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 0)),
                   template_var 1))),
             template_app (template_hole 2, template_hole 1))
           ))),
    ("PHoareTotal.MGT_implies_complete",
     "[| {} \<turnstile>\<^sub>t MGT\<^sub>t ?c;
         {} \<Turnstile>\<^sub>t {?P} ?c {?Q} |]
      ==> {} \<turnstile>\<^sub>t {?P} ?c {?Q}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 2))),
                template_app
                 (template_hole 3,
                  template_app
                   (template_hole 2,
                    template_app (template_hole 4, template_var 2)))),
              template_app
               (template_hole 1,
                template_app
                 (template_hole 2,
                  template_app (template_hole 4, template_var 2))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_hole 6),
                  template_var 1),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_hole 6),
                 template_var 1),
               template_var 2),
             template_var 0)
           ))),
    ("PHoareTotal.exec1_only1_aux",
     "(?ccs, ?s) \<rightarrow> (?cs', ?t) ==>
      ALL c cs. ?ccs = c # cs --> (EX cs1. ?cs' = cs1 @ cs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 3),
                      template_var 2)),
                  template_app
                   (template_app (template_hole 8, template_var 1),
                    template_var 0))),
              template_hole 7)
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("PHoareTotal.MGT_lemma",
     "?C \<turnstile>\<^sub>t MGT\<^sub>t CALL ==>
      ?C \<turnstile>\<^sub>t MGT\<^sub>t ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 1),
                  template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_hole 3))),
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 1,
                    template_app (template_hole 4, template_hole 3)))),
              template_app
               (template_hole 0,
                template_app
                 (template_hole 1,
                  template_app (template_hole 4, template_hole 3))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 6, template_var 1),
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 0))),
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 4, template_var 0)))),
             template_app
              (template_hole 0,
               template_app
                (template_hole 1,
                 template_app (template_hole 4, template_var 0))))
           ))),
    ("PHoareTotal.termi_impl_no_inf_chain",
     "?c \<down> ?s ==>
      \<nexists>f. f 0 = ([?c], ?s) & (ALL i. (f i, f (i + 1)) : exec1^+)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 1),
              template_var 0)
            )],
       template_negation
        (template_predicate (template_app (template_hole 13, t_empty))))),
    ("PHoareTotal.exec1E",
     "[| (CALL # ?cs, ?s) \<rightarrow> (?cs', ?s');
         [| ?cs' = body # ?cs; ?s' = ?s |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app
                       (template_hole 6,
                        template_app
                         (template_app (template_hole 5, template_hole 4),
                          template_var 4)),
                      template_var 3)),
                  template_app
                   (template_app (template_hole 6, template_var 2),
                    template_var 1))),
              template_hole 3)
            ),
        template_implication
         ([template_equation
            (template_var 2,
             template_app
              (template_app (template_hole 5, template_hole 1),
               template_var 4))],
          template_implication
           ([template_equation (template_var 1, template_var 3)],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("PHoareTotal.exec1E",
     "[| (Do ?f # ?cs, ?s) \<rightarrow> (?cs', ?s');
         [| ?cs' = ?cs; ?s' : ?f ?s |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app
                         (template_app
                           (template_hole 4,
                            template_app (template_hole 3, template_var 5)),
                          template_var 4)),
                      template_var 3)),
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_var 1))),
              template_hole 2)
            ),
        template_implication
         ([template_equation (template_var 2, template_var 4)],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_app (template_var 5, template_var 3))
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("PHoareTotal.exec1_drop_suffix",
     "[| (?cs1.0 @ ?cs2.0, ?s) \<rightarrow> (?cs1' @ ?cs2.0, ?s');
         ?cs1.0 ~= [] |]
      ==> (?cs1.0, ?s) \<rightarrow> (?cs1', ?s')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app
                         (template_app (template_hole 4, template_var 4),
                          template_var 3)),
                      template_var 2)),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_app (template_hole 4, template_var 1),
                        template_var 3)),
                    template_var 0))),
              template_hole 3)
            ),
        template_negation
         (template_equation (template_var 4, template_hole 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 4),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 0))),
             template_hole 3)
           ))),
    ("PHoareTotal.exec1E",
     "[| ((?c1.0; ?c2.0) # ?cs, ?s) \<rightarrow> (?cs', ?s');
         [| ?cs' = ?c1.0 # ?c2.0 # ?cs; ?s' = ?s |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app
                         (template_app
                           (template_hole 4,
                            template_app
                             (template_app
                               (template_hole 3, template_var 6),
                              template_var 5)),
                          template_var 4)),
                      template_var 3)),
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_var 1))),
              template_hole 2)
            ),
        template_implication
         ([template_equation
            (template_var 2,
             template_app
              (template_app (template_hole 4, template_var 6),
               template_app
                (template_app (template_hole 4, template_var 5),
                 template_var 4)))],
          template_implication
           ([template_equation (template_var 1, template_var 3)],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("PHoareTotal.renumber",
     "ALL i. (?a, ?f i) : ?r^* & (?f i, ?f (Suc i)) : ?r ==>
      EX f. f 0 = ?a & (ALL i. (f i, f (Suc i)) : ?r)",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("PHoareTotal.exec1E",
     "[| ((LOCAL ?f; ?c; ?g) # ?cs, ?s) \<rightarrow> (?cs', ?s');
         [| ?cs' = ?c # Do (%t. {?g ?s t}) # ?cs; ?s' = ?f ?s |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app
                       (template_hole 8,
                        template_app
                         (template_app
                           (template_hole 7,
                            template_app
                             (template_app
                               (template_app
                                 (template_hole 6, template_var 7),
                                template_var 6),
                              template_var 5)),
                          template_var 4)),
                      template_var 3)),
                  template_app
                   (template_app (template_hole 8, template_var 2),
                    template_var 1))),
              template_hole 5)
            ),
        template_implication
         ([template_equation
            (template_var 2,
             template_app
              (template_app (template_hole 7, template_var 6),
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 3, t_empty)),
                 template_var 4)))],
          template_implication
           ([template_equation
              (template_var 1,
               template_app (template_var 7, template_var 3))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("PHoareTotal.exec1_drop_suffix_aux",
     "(?cs12.0, ?s) \<rightarrow> (?cs1'2.0, ?s') ==>
      ALL cs1 cs2 cs1'.
         ?cs12.0 = cs1 @ cs2 & ?cs1'2.0 = cs1' @ cs2 & cs1 ~= [] -->
         (cs1, ?s) \<rightarrow> (cs1', ?s')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 3),
                      template_var 2)),
                  template_app
                   (template_app (template_hole 8, template_var 1),
                    template_var 0))),
              template_hole 7)
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("PHoareTotal.CALL_cor",
     "{(%z s. (z = s & body \<down> s) & (s, ?t) : termi_call_steps, CALL,
        %z. exec z body)} \<turnstile>\<^sub>t
      {%z s. (z = s & body \<down> s) & s = ?t} body {%z. exec z body}",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_app
                    (template_hole 12,
                     template_app
                      (template_app (template_hole 11, t_empty),
                       template_app
                        (template_app (template_hole 3, template_hole 2),
                         t_empty))),
                   template_hole 0)),
               t_empty),
             template_hole 7),
           t_empty)
         )),
    ("PHoareTotal.renumber_aux",
     "[| ALL i. (?a, ?f i) : ?r^* & (?f i, ?f (Suc i)) : ?r;
         (?a, ?b) : ?r^* |]
      ==> ?b = ?f 0 --> (EX f. f 0 = ?a & (ALL i. (f i, f (Suc i)) : ?r))",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 0)),
              template_app (template_hole 5, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app (template_var 2, template_hole 1))),
             template_app (template_hole 0, t_empty))
           ))),
    ("PHoareTotal.lem",
     "ALL y. (?a, y) : ?r^+ --> ?P ?a --> ?P y ==>
      ((?b, ?a) : {(y, x). ?P x & (x, y) : ?r}^+) =
      ((?b, ?a) : {(y, x). ?P x & (x, y) : ?r^+})",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_var 3)),
           template_app
            (template_hole 4,
             template_app
              (template_hole 2, template_app (template_hole 1, t_empty)))),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_var 3)),
           template_app
            (template_hole 2, template_app (template_hole 1, t_empty)))))),
    ("PHoareTotal.least_lem",
     "[| ?f 0 = (?c # ?cs, ?s); ALL i. ?f i \<rightarrow> ?f (Suc i);
         EX i. fst (?f i) = ?cs |]
      ==> EX k. fst (?f k) = ?cs &
                ([?c], ?s) \<rightarrow>\<^sup>* ([], snd (?f k))",
     template_implication
      ([template_equation
         (template_app (template_var 3, template_hole 14),
          template_app
           (template_app
             (template_hole 13,
              template_app
               (template_app (template_hole 12, template_var 2),
                template_var 1)),
            template_var 0)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("PHoareTotal.exec1E",
     "[| ((IF ?b THEN ?c1.0 ELSE ?c2.0) # ?cs,
          ?s) \<rightarrow> (?cs', ?s');
         [| ?cs' = ?c1.0 # ?cs; ?s' = ?s; ?b ?s |] ==> ?P;
         [| ?cs' = ?c2.0 # ?cs; ?s' = ?s; ~ ?b ?s |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app
                       (template_hole 6,
                        template_app
                         (template_app
                           (template_hole 5,
                            template_app
                             (template_app
                               (template_app
                                 (template_hole 4, template_var 7),
                                template_var 6),
                              template_var 5)),
                          template_var 4)),
                      template_var 3)),
                  template_app
                   (template_app (template_hole 6, template_var 2),
                    template_var 1))),
              template_hole 3)
            ),
        template_implication
         ([template_equation
            (template_var 2,
             template_app
              (template_app (template_hole 5, template_var 6),
               template_var 4))],
          template_implication
           ([template_equation (template_var 1, template_var 3)],
            template_implication
             ([template_predicate
                (template_app (template_var 7, template_var 3))],
              template_predicate (template_var 0)))),
        template_implication
         ([template_equation
            (template_var 2,
             template_app
              (template_app (template_hole 5, template_var 5),
               template_var 4))],
          template_implication
           ([template_equation (template_var 1, template_var 3)],
            template_implication
             ([template_negation
                (
                   template_predicate
                    (template_app (template_var 7, template_var 3))
                   )],
              template_predicate (template_var 0))))],
       template_predicate (template_var 0))),
    ("PHoareTotal.exec1E",
     "[| ((WHILE ?b DO ?c) # ?cs, ?s) \<rightarrow> (?cs', ?s');
         [| ?cs' = ?cs; ?s' = ?s; ~ ?b ?s |] ==> ?P;
         [| ?cs' = ?c # (WHILE ?b DO ?c) # ?cs; ?s' = ?s; ?b ?s |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app
                       (template_hole 6,
                        template_app
                         (template_app
                           (template_hole 5,
                            template_app
                             (template_app
                               (template_hole 4, template_var 6),
                              template_var 5)),
                          template_var 4)),
                      template_var 3)),
                  template_app
                   (template_app (template_hole 6, template_var 2),
                    template_var 1))),
              template_hole 3)
            ),
        template_implication
         ([template_equation (template_var 2, template_var 4)],
          template_implication
           ([template_equation (template_var 1, template_var 3)],
            template_implication
             ([template_negation
                (
                   template_predicate
                    (template_app (template_var 6, template_var 3))
                   )],
              template_predicate (template_var 0)))),
        template_implication
         ([template_equation
            (template_var 2,
             template_app
              (template_app (template_hole 5, template_var 5),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 6),
                     template_var 5)),
                 template_var 4)))],
          template_implication
           ([template_equation (template_var 1, template_var 3)],
            template_implication
             ([template_predicate
                (template_app (template_var 6, template_var 3))],
              template_predicate (template_var 0))))],
       template_predicate (template_var 0))),
    ("PHoareTotal.CALL_lemma",
     "{(%z s. (z = s & body \<down> s) & (s, ?t) : termi_call_steps, CALL,
        %z. exec z body)} \<turnstile>\<^sub>t
      {%z s. (z = s & body \<down> ?t) &
             (EX cs. ([body], ?t) \<rightarrow>\<^sup>* (?c # cs, s))}
      ?c {%z. exec z ?c}",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 21,
                 template_app
                  (template_app
                    (template_hole 20,
                     template_app
                      (template_app (template_hole 19, t_empty),
                       template_app
                        (template_app (template_hole 11, template_hole 10),
                         t_empty))),
                   template_hole 8)),
               t_empty),
             template_var 0),
           t_empty)
         )),
    ("PHoareTotal.least_aux",
     "[| ?f 0 = (?c # ?cs, ?s); ALL i. ?f i \<rightarrow> ?f (Suc i);
         fst (?f ?k) = ?cs; ALL i<?k. fst (?f i) ~= ?cs |]
      ==> ALL i<=?k. EX p. (p ~= []) = (i < ?k) & fst (?f i) = p @ ?cs",
     template_implication
      ([template_equation
         (template_app (template_var 4, template_hole 18),
          template_app
           (template_app
             (template_hole 17,
              template_app
               (template_app (template_hole 16, template_var 3),
                template_var 2)),
            template_var 1)),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_equation
         (template_app
           (template_hole 9, template_app (template_var 4, template_var 0)),
          template_var 2),
        template_predicate (template_app (template_hole 15, t_empty))],
       template_predicate (template_app (template_hole 15, t_empty)))),
    ("PHoareTotal.execs_drop_suffix",
     "[| ?f 0 = (?c # ?cs, ?s); ALL i. ?f i \<rightarrow> ?f (Suc i);
         ALL i<?k. ?p i ~= [] & fst (?f i) = ?p i @ ?cs;
         fst (?f ?k) = ?p ?k @ ?cs |]
      ==> ([?c], ?s) \<rightarrow>\<^sup>* (?p ?k, snd (?f ?k))",
     template_implication
      ([template_equation
         (template_app (template_var 5, template_hole 17),
          template_app
           (template_app
             (template_hole 16,
              template_app
               (template_app (template_hole 15, template_var 4),
                template_var 3)),
            template_var 2)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_equation
         (template_app
           (template_hole 3, template_app (template_var 5, template_var 1)),
          template_app
           (template_app
             (template_hole 2,
              template_app (template_var 0, template_var 1)),
            template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app
                      (template_hole 16,
                       template_app
                        (template_app (template_hole 15, template_var 4),
                         template_hole 4)),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_hole 16,
                     template_app (template_var 0, template_var 1)),
                   template_app
                    (template_hole 1,
                     template_app (template_var 5, template_var 1))))),
             template_app (template_hole 0, template_hole 10))
           ))),
    ("PHoareTotal.execs_drop_suffix0",
     "[| ?f 0 = (?c # ?cs, ?s); ALL i. ?f i \<rightarrow> ?f (Suc i);
         ALL i<?k. ?p i ~= [] & fst (?f i) = ?p i @ ?cs; fst (?f ?k) = ?cs;
         ?p ?k = [] |]
      ==> ([?c], ?s) \<rightarrow>\<^sup>* ([], snd (?f ?k))",
     template_implication
      ([template_equation
         (template_app (template_var 5, template_hole 17),
          template_app
           (template_app
             (template_hole 16,
              template_app
               (template_app (template_hole 15, template_var 4),
                template_var 3)),
            template_var 2)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_equation
         (template_app
           (template_hole 3, template_app (template_var 5, template_var 1)),
          template_var 3),
        template_equation
         (template_app (template_var 0, template_var 1), template_hole 4)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app
                      (template_hole 16,
                       template_app
                        (template_app (template_hole 15, template_var 4),
                         template_hole 4)),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 16, template_hole 4),
                   template_app
                    (template_hole 1,
                     template_app (template_var 5, template_var 1))))),
             template_app (template_hole 0, template_hole 10))
           )))]:
   (string * thm * template) list
### theory "Draft.PHoareTotalMoreTemplates"
### 0.527s elapsed time, 1.093s cpu time, 0.625s GC time
val it = (): unit
