   [("Lehmer.prime_factors_elem",
     "1 < ?n ==> EX p. p :# prime_factorization ?n",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 0)],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Lehmer.cong_pow_1_nat",
     "[?a = 1] (mod ?b) ==> [?a ^ ?x = 1] (mod ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_hole 1),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0)),
               template_hole 1),
             template_var 1)
           ))),
    ("Lehmer.One_leq_div", "[| ?a dvd ?b; ?a < ?b |] ==> 1 < ?b div ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_than, template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Lehmer.mod_1_coprime_nat",
     "[| 0 < ?n; [?a ^ ?n = 1] (mod ?b) |] ==> coprime ?a ?b",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 1),
                    template_var 2)),
                template_hole 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Lehmer.cong_gcd_eq_1_nat",
     "[| 0 < ?m; [?a ^ ?m = 1] (mod ?b); [?a ^ ?n = 1] (mod ?b) |]
      ==> [?a ^ gcd ?m ?n = 1] (mod ?b)",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 3),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 2),
                    template_var 3)),
                template_hole 1),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 2),
                    template_var 0)),
                template_hole 1),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 0))),
               template_hole 1),
             template_var 1)
           ))),
    ("Lehmer.lehmers_weak_theorem",
     "[| 2 <= ?p;
         !!x. [| 0 < x; x < ?p - 1 |] ==> [?a ^ x \<noteq> 1] (mod ?p);
         [?a ^ (?p - 1) = 1] (mod ?p) |]
      ==> prime ?p",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 11,
            template_app (template_hole 10, template_hole 9)),
          template_var 1),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 0),
                    template_app
                     (template_app (template_hole 5, template_var 1),
                      template_hole 4))),
                template_hole 4),
              template_var 1)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Lehmer.lehmers_theorem",
     "[| 2 <= ?p;
         !!x. x :# prime_factorization (?p - 1) ==>
              [?a ^ ((?p - 1) div x) \<noteq> 1] (mod ?p);
         [?a ^ (?p - 1) = 1] (mod ?p) |]
      ==> prime ?p",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 13,
            template_app (template_hole 12, template_hole 11)),
          template_var 1),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 0),
                    template_app
                     (template_app (template_hole 6, template_var 1),
                      template_hole 5))),
                template_hole 5),
              template_var 1)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Lehmer.converse_lehmer_weak",
     "prime ?p ==>
      EX a. [a ^ (?p - 1) = 1] (mod ?p) &
            (ALL x>0. x <= ?p - 2 --> [a ^ x \<noteq> 1] (mod ?p)) &
            0 < a & a < ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 0))],
       template_predicate (template_app (template_hole 14, t_empty)))),
    ("Lehmer.converse_lehmer",
     "prime ?p ==>
      EX a. [a ^ (?p - 1) = 1] (mod ?p) &
            (ALL q.
                q :# prime_factorization (?p - 1) -->
                [a ^ ((?p - 1) div q) \<noteq> 1] (mod ?p)) &
            0 < a & a < ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 0))],
       template_predicate (template_app (template_hole 14, t_empty))))]
