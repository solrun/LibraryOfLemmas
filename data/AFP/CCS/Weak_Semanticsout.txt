Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Weak_SemanticsMoreTemplates" via "Draft.Weak_Semantics" via "Draft.Weak_Cong_Semantics" via "Draft.Tau_Chain" via "Draft.Agent" via "HOL-Nominal.Nominal")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Weak_SemanticsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Weak_SemanticsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.Weak_SemanticsMoreTemplates" via "Draft.Weak_Semantics" via "Draft.Weak_Cong_Semantics" via "Draft.Tau_Chain" via "Draft.Agent" via "HOL-Nominal.Nominal")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.119s elapsed time, 0.492s cpu time, 0.043s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Weak_SemanticsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.326s elapsed time, 1.300s cpu time, 0.118s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Weak_SemanticsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.212s elapsed time, 0.835s cpu time, 0.075s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Weak_SemanticsMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.353s elapsed time, 1.416s cpu time, 0.118s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Weak_SemanticsMoreTemplates" via "Draft.ExtrEqs")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.425s elapsed time, 1.697s cpu time, 0.210s GC time
Loading theory "HOL-Nominal.Nominal" (required by "Draft.Weak_SemanticsMoreTemplates" via "Draft.Weak_Semantics" via "Draft.Weak_Cong_Semantics" via "Draft.Tau_Chain" via "Draft.Agent")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "HOL-Library.BigO"
### 1.048s elapsed time, 3.926s cpu time, 0.910s GC time
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.149s elapsed time, 4.229s cpu time, 1.011s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
overloading
  perm_fun \<equiv> perm :: ('x * 'x) list => ('a => 'b) => 'a => 'b
  perm_bool \<equiv> perm :: ('x * 'x) list => bool => bool
  perm_set \<equiv> perm :: ('x * 'x) list => 'a set => 'a set
  perm_unit \<equiv> perm :: ('x * 'x) list => unit => unit
  perm_prod \<equiv> perm :: ('x * 'x) list => 'a * 'b => 'a * 'b
  perm_list \<equiv> perm :: ('x * 'x) list => 'a list => 'a list
  perm_option \<equiv> perm :: ('x * 'x) list => 'a option => 'a option
  perm_char \<equiv> perm :: ('x * 'x) list => char => char
  perm_nat \<equiv> perm :: ('x * 'x) list => nat => nat
  perm_int \<equiv> perm :: ('x * 'x) list => int => int
  perm_noption \<equiv> perm :: ('x * 'x) list => 'a noption => 'a noption
  perm_nprod \<equiv> perm ::
    ('x * 'x) list => ('a, 'b) nprod => ('a, 'b) nprod
consts
  perm_unit :: "('x * 'x) list => unit => unit"
consts
  perm_prod :: "('x * 'x) list => 'a * 'b => 'a * 'b"
consts
  perm_list :: "('x * 'x) list => 'a list => 'a list"
consts
  perm_option :: "('x * 'x) list => 'a option => 'a option"
consts
  perm_noption :: "('x * 'x) list => 'a noption => 'a noption"
Found termination order: "size <*mlex*> {}"
consts
  perm_nprod :: "('x * 'x) list => ('a, 'b) nprod => ('a, 'b) nprod"
Found termination order: "size <*mlex*> {}"
val mksimps_pairs =
   [("Nominal.fresh",
     ["?a \<sharp> (?x, ?y) ==> ?a \<sharp> ?x",
      "?a \<sharp> (?x, ?y) ==> ?a \<sharp> ?y"]),
    ("Set.Ball", ["[| ALL x:?A. ?P x; ?x : ?A |] ==> ?P ?x"]),
    ("HOL.implies", ["[| ?P --> ?Q; ?P |] ==> ?Q"]),
    ("HOL.conj", ["?P & ?Q ==> ?P", "?P & ?Q ==> ?Q"]),
    ("HOL.All", ["ALL x. ?P x ==> ?P ?x"]), ("HOL.True", []),
    ("HOL.False", []),
    ("HOL.If",
     ["if ?P1 then ?Q1 else ?R1 ==> (?P1 --> ?Q1) & (~ ?P1 --> ?R1)"])]:
   (string * thm list) list
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
overloading
  fresh_star_set \<equiv> fresh_star :: 'b set => 'a => bool
overloading
  frsh_star_list \<equiv> fresh_star :: 'b list => 'a => bool
### theory "HOL-Library.Tree"
### 2.042s elapsed time, 6.208s cpu time, 1.290s GC time
Loading theory "Draft.Templates" (required by "Draft.Weak_SemanticsMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.107s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Weak_SemanticsMoreTemplates")
Proofs for inductive predicate(s) "ABS_setp"
  Proving monotonicity ...
### ML warning (line 73 of "~~/src/HOL/Nominal/nominal_thmdecls.ML"):
### Pattern is not exhaustive.
### ML warning (line 104 of "~~/src/HOL/Nominal/nominal_thmdecls.ML"):
### Value identifier (n) has not been referenced.
### ML warning (line 102 of "~~/src/HOL/Nominal/nominal_thmdecls.ML"):
### Value identifier (typrm) has not been referenced.
### ML warning (line 149 of "~~/src/HOL/Nominal/nominal_thmdecls.ML"):
### Value identifier (typrm) has not been referenced.
signature NOMINAL_THMDECLS =
  sig
    val eqvt_add: attribute
    val eqvt_del: attribute
    val eqvt_force_add: attribute
    val eqvt_force_del: attribute
    val get_eqvt_thms: Proof.context -> thm list
    val nominal_eqvt_debug: bool Config.T
    val setup: theory -> theory
  end
structure NominalThmDecls: NOMINAL_THMDECLS
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.810s elapsed time, 2.014s cpu time, 0.948s GC time
### ML warning (line 132 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (prems) has not been referenced.
### ML warning (line 171 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (swap_eqs) has not been referenced.
### ML warning (line 205 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (prm_eqs) has not been referenced.
### ML warning (line 241 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (perm_defs) has not been referenced.
### ML warning (line 263 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (T) has not been referenced.
### ML warning (line 322 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (T) has not been referenced.
### ML warning (line 369 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (T) has not been referenced.
### ML warning (line 368 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (fs_inst_thms) has not been referenced.
### ML warning (line 416 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (T) has not been referenced.
### ML warning (line 417 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (T') has not been referenced.
### ML warning (line 453 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (T) has not been referenced.
### ML warning (line 454 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (T') has not been referenced.
### ML warning (line 636 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (cp_bool_inst) has not been referenced.
### ML warning (line 751 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (supp_def) has not been referenced.
### ML warning (line 893 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (inst_pt_pt_at_cp) has not been referenced.
signature NOMINAL_ATOMS =
  sig
    val at_inst_of: theory -> string -> thm
    type atom_info
    val atoms_of: theory -> string list
    val cp_class_of: theory -> string -> string -> string
    val cp_inst_of: theory -> string -> string -> thm
    val create_nom_typedecls: string list -> theory -> theory
    val dj_thm_of: theory -> string -> string -> thm
    val fs_class_of: theory -> string -> string
    val get_atom_info: theory -> string -> atom_info option
    val get_atom_infos: theory -> atom_info Symtab.table
    val mk_permT: typ -> typ
    val pt_class_of: theory -> string -> string
    val pt_inst_of: theory -> string -> thm
    val the_atom_info: theory -> string -> atom_info
  end
structure NominalAtoms: NOMINAL_ATOMS
### ML warning (line 104 of "~~/src/HOL/Nominal/nominal_permeq.ML"):
### Value identifier (x) has not been referenced.
### ML warning (line 104 of "~~/src/HOL/Nominal/nominal_permeq.ML"):
### Value identifier (pi) has not been referenced.
### ML warning (line 120 of "~~/src/HOL/Nominal/nominal_permeq.ML"):
### Value identifier (ctxt) has not been referenced.
### ML warning (line 132 of "~~/src/HOL/Nominal/nominal_permeq.ML"):
### Value identifier (pi) has not been referenced.
### ML warning (line 291 of "~~/src/HOL/Nominal/nominal_permeq.ML"):
### Value identifier (i) has not been referenced.
### ML warning (line 290 of "~~/src/HOL/Nominal/nominal_permeq.ML"):
### Value identifier (i) has not been referenced.
### ML warning (line 289 of "~~/src/HOL/Nominal/nominal_permeq.ML"):
### Value identifier (i) has not been referenced.
### ML warning (line 312 of "~~/src/HOL/Nominal/nominal_permeq.ML"):
### Pattern is not exhaustive.
### ML warning (line 356 of "~~/src/HOL/Nominal/nominal_permeq.ML"):
### Pattern is not exhaustive.
### ML warning (line 376 of "~~/src/HOL/Nominal/nominal_permeq.ML"):
### Value identifier (eqvt_simp_tac) has not been referenced.
signature NOMINAL_PERMEQ =
  sig
    val finite_guess_meth: (Proof.context -> Proof.method) context_parser
    val finite_guess_meth_debug:
       (Proof.context -> Proof.method) context_parser
    val finite_guess_tac: Proof.context -> int -> tactic
    val fresh_guess_meth: (Proof.context -> Proof.method) context_parser
    val fresh_guess_meth_debug:
       (Proof.context -> Proof.method) context_parser
    val fresh_guess_tac: Proof.context -> int -> tactic
    val perm_extend_simp_meth:
       (Proof.context -> Proof.method) context_parser
    val perm_extend_simp_meth_debug:
       (Proof.context -> Proof.method) context_parser
    val perm_extend_simp_tac: Proof.context -> int -> tactic
    val perm_simp_meth: (Proof.context -> Proof.method) context_parser
    val perm_simp_meth_debug: (Proof.context -> Proof.method) context_parser
    val perm_simp_tac: Proof.context -> int -> tactic
    val perm_simproc_app: simproc
    val perm_simproc_fun: simproc
    val supports_meth: (Proof.context -> Proof.method) context_parser
    val supports_meth_debug: (Proof.context -> Proof.method) context_parser
    val supports_tac: Proof.context -> int -> tactic
  end
structure NominalPermeq: NOMINAL_PERMEQ
### ML warning (line 94 of "~~/src/HOL/Nominal/nominal_fresh_fun.ML"):
### Value identifier (u) has not been referenced.
### ML warning (line 90 of "~~/src/HOL/Nominal/nominal_fresh_fun.ML"):
### Value identifier (v) has not been referenced.
### ML warning (line 89 of "~~/src/HOL/Nominal/nominal_fresh_fun.ML"):
### Value identifier (v) has not been referenced.
### ML warning (line 88 of "~~/src/HOL/Nominal/nominal_fresh_fun.ML"):
### Value identifier (j) has not been referenced.
### ML warning (line 137 of "~~/src/HOL/Nominal/nominal_fresh_fun.ML"):
### Value identifier (x) has not been referenced.
### ML warning (line 139 of "~~/src/HOL/Nominal/nominal_fresh_fun.ML"):
### Value identifier (n) has not been referenced.
### ML warning (line 150 of "~~/src/HOL/Nominal/nominal_fresh_fun.ML"):
### Value identifier (i) has not been referenced.
val gen_res_inst_tac_term = fn:
   Proof.context ->
     ((typ * ctyp) list -> (term * cterm) list -> thm -> thm) ->
       (typ * typ) list ->
         (term * term) list -> bool -> thm -> int -> thm -> thm Seq.seq
val res_inst_tac_term = fn:
   Proof.context ->
     (typ * typ) list ->
       (term * term) list -> bool -> thm -> int -> thm -> thm Seq.seq
val res_inst_tac_term' = fn:
   Proof.context ->
     (term * term) list -> bool -> thm -> int -> thm -> thm Seq.seq
val cut_inst_tac_term' = fn:
   Proof.context -> (term * term) list -> thm -> int -> thm -> thm Seq.seq
val get_dyn_thm = fn: theory -> xstring -> string -> thm
val at_exists_fresh' =
   "[| at TYPE(?'x); finite (supp ?x) |] ==> EX c. c \<sharp> ?x": thm
val fresh_fun_app' =
   "[| pt TYPE(?'a) TYPE(?'x); at TYPE(?'x); finite (supp ?h);
       ?a \<sharp> ?h; ?a \<sharp> ?h ?a |]
    ==> fresh_fun ?h = ?h ?a":
   thm
val fresh_prod = "?a \<sharp> (?x, ?y) = (?a \<sharp> ?x & ?a \<sharp> ?y)":
   thm
val generate_fresh_tac = fn: Proof.context -> string -> tactic
val get_inner_fresh_fun = fn: term -> string option
val generate_fresh_fun_tac = fn: Proof.context -> tactic
val search_fun = fn: EqSubst.searchinfo -> term -> EqSubst.match Seq.seq
val search_fun_asm = fn:
   EqSubst.searchinfo -> int -> term -> EqSubst.match EqSubst.skipseq
val subst_inner_tac = fn: Proof.context -> thm -> int -> thm -> thm Seq.seq
val subst_inner_asm_tac_aux = fn:
   int -> Proof.context -> thm -> int -> tactic
val subst_inner_asm_tac = fn: Proof.context -> thm -> int -> tactic
val fresh_fun_tac = fn: Proof.context -> bool -> int -> tactic
### ML warning (line 62 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (put_nominal_datatypes) has not been referenced.
### ML warning (line 89 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Matches are not exhaustive.
### ML warning (line 93 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (t) has not been referenced.
### ML warning (line 101 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 102 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 183 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (constrs) has not been referenced.
### ML warning (line 183 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (tvs) has not been referenced.
### ML warning (line 185 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (cargs) has not been referenced.
### ML warning (line 189 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (rps) has not been referenced.
### ML warning (line 197 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (mx) has not been referenced.
### ML warning (line 199 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (mx) has not been referenced.
### ML warning (line 202 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (new_type_names') has not been referenced.
### ML warning (line 257 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (perm_simps) has not been referenced.
### ML warning (line 277 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 278 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 278 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (T1) has not been referenced.
### ML warning (line 316 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (at_pt_inst) has not been referenced.
### ML warning (line 441 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (perm_thmss) has not been referenced.
### ML warning (line 474 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (i) has not been referenced.
### ML warning (line 553 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (x) has not been referenced.
### ML warning (line 692 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (i) has not been referenced.
### ML warning (line 708 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (i) has not been referenced.
### ML warning (line 711 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 744 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (full_new_type_names) has not been referenced.
### ML warning (line 780 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 829 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 830 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 850 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (dist_rewrites) has not been referenced.
### ML warning (line 1137 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Matches are not exhaustive.
### ML warning (line 1156 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (xs) has not been referenced.
### ML warning (line 1162 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (xss) has not been referenced.
### ML warning (line 1213 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (induct) has not been referenced.
### ML warning (line 1216 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Matches are not exhaustive.
### ML warning (line 1228 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (induct') has not been referenced.
### ML warning (line 1245 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Matches are not exhaustive.
### ML warning (line 1247 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Matches are not exhaustive.
### ML warning (line 1269 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1280 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1312 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (prems2) has not been referenced.
### ML warning (line 1334 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1366 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (t) has not been referenced.
### ML warning (line 1400 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Matches are not exhaustive.
### ML warning (line 1439 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Matches are not exhaustive.
### ML warning (line 1465 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (p) has not been referenced.
### ML warning (line 1464 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (rs) has not been referenced.
### ML warning (line 1645 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1649 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1662 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Matches are not exhaustive.
### ML warning (line 1699 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (T) has not been referenced.
### ML warning (line 1717 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1773 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (asms) has not been referenced.
### ML warning (line 1775 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1777 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1778 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1780 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (c) has not been referenced.
### ML warning (line 1786 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1874 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1875 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1881 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1909 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1926 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1932 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Matches are not exhaustive.
### ML warning (line 1949 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Matches are not exhaustive.
### ML warning (line 1963 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Matches are not exhaustive.
### ML warning (line 1988 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Matches are not exhaustive.
### ML warning (line 2055 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 2057 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Matches are not exhaustive.
signature NOMINAL_DATATYPE =
  sig
    type descr
    val fresh_const: typ -> typ -> term
    val fresh_star_const: typ -> typ -> term
    val get_nominal_datatype:
       theory -> string -> nominal_datatype_info option
    val get_nominal_datatypes: theory -> nominal_datatype_info Symtab.table
    val mk_not_sym: thm list -> thm list
    val mk_perm: typ list -> term -> term -> term
    val nominal_datatype:
       Old_Datatype_Aux.config -> Old_Datatype.spec list -> theory -> theory
    val nominal_datatype_cmd:
       Old_Datatype_Aux.config ->
         Old_Datatype.spec_cmd list -> theory -> theory
    type nominal_datatype_info
    val perm_of_pair: term * term -> term
    val perm_simproc: simproc
  end
structure NominalDatatype: NOMINAL_DATATYPE
### ML warning (line 144 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Matches are not exhaustive.
### ML warning (line 155 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Value identifier (rs) has not been referenced.
### ML warning (line 155 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Value identifier (ls) has not been referenced.
### ML warning (line 173 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Pattern is not exhaustive.
### ML warning (line 204 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Value identifier (tname) has not been referenced.
### ML warning (line 213 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Pattern is not exhaustive.
### ML warning (line 223 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Value identifier (dt_info) has not been referenced.
### ML warning (line 233 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Value identifier (eq) has not been referenced.
### ML warning (line 232 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Value identifier (eq) has not been referenced.
### ML warning (line 248 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Pattern is not exhaustive.
### ML warning (line 287 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Pattern is not exhaustive.
### ML warning (line 289 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Pattern is not exhaustive.
### ML warning (line 290 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Pattern is not exhaustive.
### ML warning (line 291 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Pattern is not exhaustive.
### ML warning (line 292 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Pattern is not exhaustive.
signature NOMINAL_PRIMREC =
  sig
    val primrec:
       term list option ->
         term option ->
           (binding * typ option * mixfix) list ->
             (binding * typ option * mixfix) list ->
               Specification.multi_specs -> local_theory -> Proof.state
    val primrec_cmd:
       string list option ->
         string option ->
           (binding * string option * mixfix) list ->
             (binding * string option * mixfix) list ->
               Specification.multi_specs_cmd -> local_theory -> Proof.state
  end
structure NominalPrimrec: NOMINAL_PRIMREC
### ML warning (line 74 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Value identifier (i) has not been referenced.
### ML warning (line 74 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Value identifier (thy) has not been referenced.
### ML warning (line 63 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Value identifier (x) has not been referenced.
### ML warning (line 64 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Pattern is not exhaustive.
### ML warning (line 83 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Value identifier (T) has not been referenced.
### ML warning (line 83 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 82 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Matches are not exhaustive.
### ML warning (line 102 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Value identifier (names) has not been referenced.
### ML warning (line 94 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Value identifier (ps) has not been referenced.
### ML warning (line 107 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Pattern 3 is redundant.
### ML warning (line 121 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Value identifier (T') has not been referenced.
### ML warning (line 121 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Value identifier (s') has not been referenced.
### ML warning (line 207 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Pattern is not exhaustive.
### ML warning (line 213 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Matches are not exhaustive.
### ML warning (line 306 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Pattern is not exhaustive.
### ML warning (line 371 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Matches are not exhaustive.
### ML warning (line 420 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Value identifier (name) has not been referenced.
### ML warning (line 422 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Pattern is not exhaustive.
### ML warning (line 423 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Pattern is not exhaustive.
### ML warning (line 437 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Pattern is not exhaustive.
### ML warning (line 451 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Value identifier (prem) has not been referenced.
### ML warning (line 478 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Matches are not exhaustive.
### ML warning (line 574 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Pattern is not exhaustive.
### ML warning (line 623 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Pattern is not exhaustive.
### ML warning (line 635 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Pattern is not exhaustive.
signature NOMINAL_INDUCTIVE =
  sig
    val prove_eqvt: string -> string list -> local_theory -> local_theory
    val prove_strong_ind:
       string -> (string * string list) list -> local_theory -> Proof.state
  end
structure NominalInductive: NOMINAL_INDUCTIVE
### ML warning (line 56 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (transp) has not been referenced.
### ML warning (line 79 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (i) has not been referenced.
### ML warning (line 79 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (thy) has not been referenced.
### ML warning (line 67 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (x) has not been referenced.
### ML warning (line 68 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Pattern is not exhaustive.
### ML warning (line 88 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (T) has not been referenced.
### ML warning (line 88 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 87 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Matches are not exhaustive.
### ML warning (line 107 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (names) has not been referenced.
### ML warning (line 99 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (ps) has not been referenced.
### ML warning (line 112 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Pattern 3 is redundant.
### ML warning (line 126 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (T') has not been referenced.
### ML warning (line 126 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (s') has not been referenced.
### ML warning (line 161 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (ind_params) has not been referenced.
### ML warning (line 163 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (elims) has not been referenced.
### ML warning (line 194 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Matches are not exhaustive.
### ML warning (line 233 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Pattern is not exhaustive.
### ML warning (line 239 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Matches are not exhaustive.
### ML warning (line 329 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Pattern is not exhaustive.
### ML warning (line 337 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Pattern is not exhaustive.
### ML warning (line 341 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Pattern is not exhaustive.
### ML warning (line 370 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (pi_sets) has not been referenced.
### ML warning (line 462 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (induct_cases') has not been referenced.
### ML warning (line 465 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (thsss) has not been referenced.
### ML warning (line 479 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Pattern is not exhaustive.
signature NOMINAL_INDUCTIVE2 =
  sig
    val prove_strong_ind:
       string ->
         string option ->
           (string * string list) list -> local_theory -> Proof.state
  end
structure NominalInductive2: NOMINAL_INDUCTIVE2
### ML warning (line 17 of "~~/src/HOL/Nominal/nominal_induct.ML"):
### Value identifier (tupleT) has not been referenced.
### ML warning (line 48 of "~~/src/HOL/Nominal/nominal_induct.ML"):
### Pattern is not exhaustive.
structure NominalInduct:
  sig
    val nominal_induct_method:
       (Proof.context -> Proof.method) context_parser
    val nominal_induct_tac:
       bool ->
         (binding option * (term * bool)) option list list ->
           (string * typ) list ->
             (string * typ) list list ->
               thm list -> thm list -> int -> context_tactic
  end
### theory "HOL-Nominal.Nominal"
### 4.505s elapsed time, 10.230s cpu time, 3.096s GC time
Loading theory "Draft.Agent" (required by "Draft.Weak_SemanticsMoreTemplates" via "Draft.Weak_Semantics" via "Draft.Weak_Cong_Semantics" via "Draft.Tau_Chain")
### length descr: 1
### length new_type_names: 1
### perm_empty_thms
### perm_append_thms
### perm_eq_thms
### representing sets
### big_rep_name: act_Rep_set
Proofs for inductive predicate(s) "act_Rep_set"
### proving closure under permutation...
### defining type...
### prove that new types are in class pt_<name> ...
### prove that new types are in class cp_<name1>_<name2> ...
### proving finite support for the new datatype
### proving strong induction theorem ...
### defining recursion combinator ...
Proofs for inductive predicate(s) "act_rec_set"
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### length descr: 2
### length new_type_names: 1
### perm_empty_thms
### perm_append_thms
### perm_eq_thms
### representing sets
### big_rep_name: ccs_Rep_set
Proofs for inductive predicate(s) "ccs_Rep_set"
### proving closure under permutation...
### defining type...
### prove that new types are in class pt_<name> ...
### prove that new types are in class cp_<name1>_<name2> ...
### proving finite support for the new datatype
### proving strong induction theorem ...
### defining recursion combinator ...
Proofs for inductive predicate(s) "ccs_rec_set"
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### ~ False == True
### Ignoring duplicate rewrite rule:
### ?a1 \<sharp> ?b1 == ?a1 ~= ?b1
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### finite (supp ?x1) == True
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### ~ False == True
### Ignoring duplicate rewrite rule:
### ?a1 \<sharp> ?b1 == ?a1 ~= ?b1
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### finite (supp ?x1) == True
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
Proofs for inductive predicate(s) "semantics"
  Proving monotonicity ...
### equivariance lemma of the relational form
pi_ \<bullet> x1_ \<longmapsto>x2_ \<prec> x3_ =
pi_ \<bullet> x1_ \<longmapsto>pi_ \<bullet> x2_ \<prec> pi_ \<bullet> x3_
### equivariance lemma of the relational form
pi_ \<bullet> x1_ \<longmapsto>x2_ \<prec> x3_ =
pi_ \<bullet> x1_ \<longmapsto>pi_ \<bullet> x2_ \<prec> pi_ \<bullet> x3_
### equivariance lemma of the relational form
pi_ \<bullet> x1_ \<longmapsto>x2_ \<prec> x3_ =
pi_ \<bullet> x1_ \<longmapsto>pi_ \<bullet> x2_ \<prec> pi_ \<bullet> x3_
### equivariance lemma of the relational form
pi_ \<bullet> x1_ \<longmapsto>x2_ \<prec> x3_ =
pi_ \<bullet> x1_ \<longmapsto>pi_ \<bullet> x2_ \<prec> pi_ \<bullet> x3_
### Ambiguous input (line 81 of "$AFP/CCS/Agent.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Agent.semantics" ("_position" R) ("_position" \<beta>)
###         ("_position" R')))
###     ("_asms"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" \<alpha>)
###           ("_idts" ("_position" P) ("_position" \<C>)))
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" Prop)
###             ("_cargs" ("_position" \<C>)
###               ("_cargs"
###                 ("\<^const>Agent.ccs.Action" ("_position" \<alpha>)
###                   ("_position" P))
###                 ("_cargs" ("_position" \<alpha>) ("_position" P)))))))
###       ("_asms"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" P)
###             ("_idts" ("_position" \<alpha>)
###               ("_idts" ("_position" P')
###                 ("_idts" ("_position" Q) ("_position" \<C>)))))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Agent.semantics" ("_position" P)
###                   ("_position" \<alpha>) ("_position" P')))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" \<C>)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" Prop)
###                       ("_cargs" ("_position" \<C>)
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" \<alpha>)
###                             ("_position" P')))))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" Prop)
###                 ("_cargs" ("_position" \<C>)
###                   ("_cargs"
###                     ("_applC" ("_position" ccs.Sum)
###                       ("_cargs" ("_position" P) ("_position" Q)))
###                     ("_cargs" ("_position" \<alpha>) ("_position" P'))))))))
###         ("_asms"
###           ("\<^const>Pure.all_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" \<alpha>)
###                 ("_idts" ("_position" Q')
###                   ("_idts" ("_position" P) ("_position" \<C>)))))
###             ("_bigimpl"
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Agent.semantics" ("_position" Q)
###                     ("_position" \<alpha>) ("_position" Q')))
###                 ("_asm"
###                   ("\<^const>Pure.all_binder" ("_position" \<C>)
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" Prop)
###                         ("_cargs" ("_position" \<C>)
###                           ("_cargs" ("_position" Q)
###                             ("_cargs" ("_position" \<alpha>)
###                               ("_position" Q')))))))))
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" Prop)
###                   ("_cargs" ("_position" \<C>)
###                     ("_cargs"
###                       ("_applC" ("_position" ccs.Sum)
###                         ("_cargs" ("_position" P) ("_position" Q)))
###                       ("_cargs" ("_position" \<alpha>)
###                         ("_position" Q'))))))))
###           ("_asms"
###             ("\<^const>Pure.all_binder"
###               ("_idts" ("_position" P)
###                 ("_idts" ("_position" \<alpha>)
###                   ("_idts" ("_position" P')
###                     ("_idts" ("_position" Q) ("_position" \<C>)))))
###               ("_bigimpl"
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Agent.semantics" ("_position" P)
###                       ("_position" \<alpha>) ("_position" P')))
###                   ("_asm"
###                     ("\<^const>Pure.all_binder" ("_position" \<C>)
###                       ("\<^const>HOL.Trueprop"
###                         ("_applC" ("_position" Prop)
###                           ("_cargs" ("_position" \<C>)
###                             ("_cargs" ("_position" P)
###                               ("_cargs" ("_position" \<alpha>)
###                                 ("_position" P')))))))))
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" Prop)
###                     ("_cargs" ("_position" \<C>)
###                       ("_cargs"
###                         ("\<^const>Agent.ccs.Par" ("_position" P)
###                           ("_position" Q))
###                         ("_cargs" ("_position" \<alpha>)
###                           ("\<^const>Agent.ccs.Par" ("_position" P')
###                             ("_position" Q)))))))))
###             ("_asms"
###               ("\<^const>Pure.all_binder"
###                 ("_idts" ("_position" Q)
###                   ("_idts" ("_position" \<alpha>)
###                     ("_idts" ("_position" Q')
###                       ("_idts" ("_position" P) ("_position" \<C>)))))
###                 ("_bigimpl"
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Agent.semantics" ("_position" Q)
###                         ("_position" \<alpha>) ("_position" Q')))
###                     ("_asm"
###                       ("\<^const>Pure.all_binder" ("_position" \<C>)
###                         ("\<^const>HOL.Trueprop"
###                           ("_applC" ("_position" Prop)
###                             ("_cargs" ("_position" \<C>)
###                               ("_cargs" ("_position" Q)
###                                 ("_cargs" ("_position" \<alpha>)
###                                   ("_position" Q')))))))))
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" Prop)
###                       ("_cargs" ("_position" \<C>)
###                         ("_cargs"
###                           ("\<^const>Agent.ccs.Par" ("_position" P)
###                             ("_position" Q))
###                           ("_cargs" ("_position" \<alpha>)
###                             ("\<^const>Agent.ccs.Par" ("_position" P)
###                               ("_position" Q')))))))))
###               ("_asms"
###                 ("\<^const>Pure.all_binder"
###                   ("_idts" ("_position" P)
###                     ("_idts" ("_position" a)
###                       ("_idts" ("_position" P')
###                         ("_idts" ("_position" Q)
###                           ("_idts" ("_position" Q') ("_position" \<C>))))))
###                   ("_bigimpl"
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Agent.semantics" ("_position" P)
###                           ("_position" a) ("_position" P')))
###                       ("_asms"
###                         ("\<^const>Pure.all_binder" ("_position" \<C>)
###                           ("\<^const>HOL.Trueprop"
###                             ("_applC" ("_position" Prop)
###                               ("_cargs" ("_position" \<C>)
###                                 ("_cargs" ("_position" P)
###                                   ("_cargs" ("_position" a)
###                                     ("_position" P')))))))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Agent.semantics" ("_position" Q)
###                               ("_applC" ("_position" coAction)
###                                 ("_position" a))
###                               ("_position" Q')))
###                           ("_asms"
###                             ("\<^const>Pure.all_binder" ("_position" \<C>)
###                               ("\<^const>HOL.Trueprop"
###                                 ("_applC" ("_position" Prop)
###                                   ("_cargs" ("_position" \<C>)
###                                     ("_cargs" ("_position" Q)
### ("_cargs" ("_applC" ("_position" coAction) ("_position" a))
###   ("_position" Q')))))))
###                             ("_asm"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>HOL.not_equal" ("_position" a)
###                                   ("\<^const>Agent.act.actTau"))))))))
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" Prop)
###                         ("_cargs" ("_position" \<C>)
###                           ("_cargs"
###                             ("\<^const>Agent.ccs.Par" ("_position" P)
###                               ("_position" Q))
###                             ("_cargs" ("\<^const>Agent.act.actTau")
###                               ("\<^const>Agent.ccs.Par" ("_position" P')
###                                 ("_position" Q')))))))))
###                 ("_asms"
###                   ("\<^const>Pure.all_binder"
###                     ("_idts" ("_position" P)
###                       ("_idts" ("_position" \<alpha>)
###                         ("_idts" ("_position" P')
###                           ("_idts" ("_position" x) ("_position" \<C>)))))
###                     ("_bigimpl"
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>Nominal.fresh" ("_position" x)
###                             ("_position" \<C>)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Agent.semantics" ("_position" P)
###                               ("_position" \<alpha>) ("_position" P')))
###                           ("_asms"
###                             ("\<^const>Pure.all_binder" ("_position" \<C>)
###                               ("\<^const>HOL.Trueprop"
###                                 ("_applC" ("_position" Prop)
###                                   ("_cargs" ("_position" \<C>)
###                                     ("_cargs" ("_position" P)
### ("_cargs" ("_position" \<alpha>) ("_position" P')))))))
###                             ("_asm"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" x)
###                                   ("_position" \<alpha>)))))))
###                       ("\<^const>HOL.Trueprop"
###                         ("_applC" ("_position" Prop)
###                           ("_cargs" ("_position" \<C>)
###                             ("_cargs"
###                               ("\<^const>Agent.ccs.Res" ("_position" x)
###                                 ("_position" P))
###                               ("_cargs" ("_position" \<alpha>)
###                                 ("\<^const>Agent.ccs.Res" ("_position" x)
###                                   ("_position" P')))))))))
###                   ("_asm"
###                     ("\<^const>Pure.all_binder"
###                       ("_idts" ("_position" P)
###                         ("_idts" ("_position" \<alpha>)
###                           ("_idts" ("_position" P') ("_position" \<C>))))
###                       ("_bigimpl"
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Agent.semantics"
###                               ("\<^const>Agent.ccs.Par" ("_position" P)
###                                 ("\<^const>Agent.ccs.Bang" ("_position" P)))
###                               ("_position" \<alpha>) ("_position" P')))
###                           ("_asm"
###                             ("\<^const>Pure.all_binder" ("_position" \<C>)
###                               ("\<^const>HOL.Trueprop"
###                                 ("_applC" ("_position" Prop)
###                                   ("_cargs" ("_position" \<C>)
###                                     ("_cargs"
### ("\<^const>Agent.ccs.Par" ("_position" P)
###   ("\<^const>Agent.ccs.Bang" ("_position" P)))
### ("_cargs" ("_position" \<alpha>) ("_position" P')))))))))
###                         ("\<^const>HOL.Trueprop"
###                           ("_applC" ("_position" Prop)
###                             ("_cargs" ("_position" \<C>)
###                               ("_cargs"
###                                 ("\<^const>Agent.ccs.Bang"
###                                   ("_applC" ("_position" P)
###                                     ("_position" \<alpha>)))
###                                 ("_position" P'))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Prop)
###       ("_cargs"
###         ("_constrain" ("_position" \<C>)
###           ("_ofsort" ("_position_sort" 'a) ("_class_name" fs_name)))
###         ("_cargs" ("_position" R)
###           ("_cargs" ("_position" \<beta>) ("_position" R')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Agent.semantics" ("_position" R) ("_position" \<beta>)
###         ("_position" R')))
###     ("_asms"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" \<alpha>)
###           ("_idts" ("_position" P) ("_position" \<C>)))
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" Prop)
###             ("_cargs" ("_position" \<C>)
###               ("_cargs"
###                 ("\<^const>Agent.ccs.Action" ("_position" \<alpha>)
###                   ("_position" P))
###                 ("_cargs" ("_position" \<alpha>) ("_position" P)))))))
###       ("_asms"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" P)
###             ("_idts" ("_position" \<alpha>)
###               ("_idts" ("_position" P')
###                 ("_idts" ("_position" Q) ("_position" \<C>)))))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Agent.semantics" ("_position" P)
###                   ("_position" \<alpha>) ("_position" P')))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" \<C>)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" Prop)
###                       ("_cargs" ("_position" \<C>)
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" \<alpha>)
###                             ("_position" P')))))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" Prop)
###                 ("_cargs" ("_position" \<C>)
###                   ("_cargs"
###                     ("_applC" ("_position" ccs.Sum)
###                       ("_cargs" ("_position" P) ("_position" Q)))
###                     ("_cargs" ("_position" \<alpha>) ("_position" P'))))))))
###         ("_asms"
###           ("\<^const>Pure.all_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" \<alpha>)
###                 ("_idts" ("_position" Q')
###                   ("_idts" ("_position" P) ("_position" \<C>)))))
###             ("_bigimpl"
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Agent.semantics" ("_position" Q)
###                     ("_position" \<alpha>) ("_position" Q')))
###                 ("_asm"
###                   ("\<^const>Pure.all_binder" ("_position" \<C>)
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" Prop)
###                         ("_cargs" ("_position" \<C>)
###                           ("_cargs" ("_position" Q)
###                             ("_cargs" ("_position" \<alpha>)
###                               ("_position" Q')))))))))
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" Prop)
###                   ("_cargs" ("_position" \<C>)
###                     ("_cargs"
###                       ("_applC" ("_position" ccs.Sum)
###                         ("_cargs" ("_position" P) ("_position" Q)))
###                       ("_cargs" ("_position" \<alpha>)
###                         ("_position" Q'))))))))
###           ("_asms"
###             ("\<^const>Pure.all_binder"
###               ("_idts" ("_position" P)
###                 ("_idts" ("_position" \<alpha>)
###                   ("_idts" ("_position" P')
###                     ("_idts" ("_position" Q) ("_position" \<C>)))))
###               ("_bigimpl"
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Agent.semantics" ("_position" P)
###                       ("_position" \<alpha>) ("_position" P')))
###                   ("_asm"
###                     ("\<^const>Pure.all_binder" ("_position" \<C>)
###                       ("\<^const>HOL.Trueprop"
###                         ("_applC" ("_position" Prop)
###                           ("_cargs" ("_position" \<C>)
###                             ("_cargs" ("_position" P)
###                               ("_cargs" ("_position" \<alpha>)
###                                 ("_position" P')))))))))
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" Prop)
###                     ("_cargs" ("_position" \<C>)
###                       ("_cargs"
###                         ("\<^const>Agent.ccs.Par" ("_position" P)
###                           ("_position" Q))
###                         ("_cargs" ("_position" \<alpha>)
###                           ("\<^const>Agent.ccs.Par" ("_position" P')
###                             ("_position" Q)))))))))
###             ("_asms"
###               ("\<^const>Pure.all_binder"
###                 ("_idts" ("_position" Q)
###                   ("_idts" ("_position" \<alpha>)
###                     ("_idts" ("_position" Q')
###                       ("_idts" ("_position" P) ("_position" \<C>)))))
###                 ("_bigimpl"
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Agent.semantics" ("_position" Q)
###                         ("_position" \<alpha>) ("_position" Q')))
###                     ("_asm"
###                       ("\<^const>Pure.all_binder" ("_position" \<C>)
###                         ("\<^const>HOL.Trueprop"
###                           ("_applC" ("_position" Prop)
###                             ("_cargs" ("_position" \<C>)
###                               ("_cargs" ("_position" Q)
###                                 ("_cargs" ("_position" \<alpha>)
###                                   ("_position" Q')))))))))
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" Prop)
###                       ("_cargs" ("_position" \<C>)
###                         ("_cargs"
###                           ("\<^const>Agent.ccs.Par" ("_position" P)
###                             ("_position" Q))
###                           ("_cargs" ("_position" \<alpha>)
###                             ("\<^const>Agent.ccs.Par" ("_position" P)
###                               ("_position" Q')))))))))
###               ("_asms"
###                 ("\<^const>Pure.all_binder"
###                   ("_idts" ("_position" P)
###                     ("_idts" ("_position" a)
###                       ("_idts" ("_position" P')
###                         ("_idts" ("_position" Q)
###                           ("_idts" ("_position" Q') ("_position" \<C>))))))
###                   ("_bigimpl"
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Agent.semantics" ("_position" P)
###                           ("_position" a) ("_position" P')))
###                       ("_asms"
###                         ("\<^const>Pure.all_binder" ("_position" \<C>)
###                           ("\<^const>HOL.Trueprop"
###                             ("_applC" ("_position" Prop)
###                               ("_cargs" ("_position" \<C>)
###                                 ("_cargs" ("_position" P)
###                                   ("_cargs" ("_position" a)
###                                     ("_position" P')))))))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Agent.semantics" ("_position" Q)
###                               ("_applC" ("_position" coAction)
###                                 ("_position" a))
###                               ("_position" Q')))
###                           ("_asms"
###                             ("\<^const>Pure.all_binder" ("_position" \<C>)
###                               ("\<^const>HOL.Trueprop"
###                                 ("_applC" ("_position" Prop)
###                                   ("_cargs" ("_position" \<C>)
###                                     ("_cargs" ("_position" Q)
### ("_cargs" ("_applC" ("_position" coAction) ("_position" a))
###   ("_position" Q')))))))
###                             ("_asm"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>HOL.not_equal" ("_position" a)
###                                   ("\<^const>Agent.act.actTau"))))))))
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" Prop)
###                         ("_cargs" ("_position" \<C>)
###                           ("_cargs"
###                             ("\<^const>Agent.ccs.Par" ("_position" P)
###                               ("_position" Q))
###                             ("_cargs" ("\<^const>Agent.act.actTau")
###                               ("\<^const>Agent.ccs.Par" ("_position" P')
###                                 ("_position" Q')))))))))
###                 ("_asms"
###                   ("\<^const>Pure.all_binder"
###                     ("_idts" ("_position" P)
###                       ("_idts" ("_position" \<alpha>)
###                         ("_idts" ("_position" P')
###                           ("_idts" ("_position" x) ("_position" \<C>)))))
###                     ("_bigimpl"
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>Nominal.fresh" ("_position" x)
###                             ("_position" \<C>)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Agent.semantics" ("_position" P)
###                               ("_position" \<alpha>) ("_position" P')))
###                           ("_asms"
###                             ("\<^const>Pure.all_binder" ("_position" \<C>)
###                               ("\<^const>HOL.Trueprop"
###                                 ("_applC" ("_position" Prop)
###                                   ("_cargs" ("_position" \<C>)
###                                     ("_cargs" ("_position" P)
### ("_cargs" ("_position" \<alpha>) ("_position" P')))))))
###                             ("_asm"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" x)
###                                   ("_position" \<alpha>)))))))
###                       ("\<^const>HOL.Trueprop"
###                         ("_applC" ("_position" Prop)
###                           ("_cargs" ("_position" \<C>)
###                             ("_cargs"
###                               ("\<^const>Agent.ccs.Res" ("_position" x)
###                                 ("_position" P))
###                               ("_cargs" ("_position" \<alpha>)
###                                 ("\<^const>Agent.ccs.Res" ("_position" x)
###                                   ("_position" P')))))))))
###                   ("_asm"
###                     ("\<^const>Pure.all_binder"
###                       ("_idts" ("_position" P)
###                         ("_idts" ("_position" \<alpha>)
###                           ("_idts" ("_position" P') ("_position" \<C>))))
###                       ("_bigimpl"
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Agent.semantics"
###                               ("\<^const>Agent.ccs.Par" ("_position" P)
###                                 ("\<^const>Agent.ccs.Bang" ("_position" P)))
###                               ("_position" \<alpha>) ("_position" P')))
###                           ("_asm"
###                             ("\<^const>Pure.all_binder" ("_position" \<C>)
###                               ("\<^const>HOL.Trueprop"
###                                 ("_applC" ("_position" Prop)
###                                   ("_cargs" ("_position" \<C>)
###                                     ("_cargs"
### ("\<^const>Agent.ccs.Par" ("_position" P)
###   ("\<^const>Agent.ccs.Bang" ("_position" P)))
### ("_cargs" ("_position" \<alpha>) ("_position" P')))))))))
###                         ("\<^const>HOL.Trueprop"
###                           ("_applC" ("_position" Prop)
###                             ("_cargs" ("_position" \<C>)
###                               ("\<^const>Agent.ccs.Bang"
###                                 ("_applC" ("_position" P)
###                                   ("_cargs" ("_position" \<alpha>)
###                                     ("_position" P'))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Prop)
###       ("_cargs"
###         ("_constrain" ("_position" \<C>)
###           ("_ofsort" ("_position_sort" 'a) ("_class_name" fs_name)))
###         ("_cargs" ("_position" R)
###           ("_cargs" ("_position" \<beta>) ("_position" R')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Agent.semantics" ("_position" R) ("_position" \<beta>)
###         ("_position" R')))
###     ("_asms"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" \<alpha>)
###           ("_idts" ("_position" P) ("_position" \<C>)))
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" Prop)
###             ("_cargs" ("_position" \<C>)
###               ("_cargs"
###                 ("\<^const>Agent.ccs.Action" ("_position" \<alpha>)
###                   ("_position" P))
###                 ("_cargs" ("_position" \<alpha>) ("_position" P)))))))
###       ("_asms"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" P)
###             ("_idts" ("_position" \<alpha>)
###               ("_idts" ("_position" P')
###                 ("_idts" ("_position" Q) ("_position" \<C>)))))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Agent.semantics" ("_position" P)
###                   ("_position" \<alpha>) ("_position" P')))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" \<C>)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" Prop)
###                       ("_cargs" ("_position" \<C>)
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" \<alpha>)
###                             ("_position" P')))))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" Prop)
###                 ("_cargs" ("_position" \<C>)
###                   ("_cargs"
###                     ("_applC" ("_position" ccs.Sum)
###                       ("_cargs" ("_position" P) ("_position" Q)))
###                     ("_cargs" ("_position" \<alpha>) ("_position" P'))))))))
###         ("_asms"
###           ("\<^const>Pure.all_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" \<alpha>)
###                 ("_idts" ("_position" Q')
###                   ("_idts" ("_position" P) ("_position" \<C>)))))
###             ("_bigimpl"
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Agent.semantics" ("_position" Q)
###                     ("_position" \<alpha>) ("_position" Q')))
###                 ("_asm"
###                   ("\<^const>Pure.all_binder" ("_position" \<C>)
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" Prop)
###                         ("_cargs" ("_position" \<C>)
###                           ("_cargs" ("_position" Q)
###                             ("_cargs" ("_position" \<alpha>)
###                               ("_position" Q')))))))))
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" Prop)
###                   ("_cargs" ("_position" \<C>)
###                     ("_cargs"
###                       ("_applC" ("_position" ccs.Sum)
###                         ("_cargs" ("_position" P) ("_position" Q)))
###                       ("_cargs" ("_position" \<alpha>)
###                         ("_position" Q'))))))))
###           ("_asms"
###             ("\<^const>Pure.all_binder"
###               ("_idts" ("_position" P)
###                 ("_idts" ("_position" \<alpha>)
###                   ("_idts" ("_position" P')
###                     ("_idts" ("_position" Q) ("_position" \<C>)))))
###               ("_bigimpl"
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Agent.semantics" ("_position" P)
###                       ("_position" \<alpha>) ("_position" P')))
###                   ("_asm"
###                     ("\<^const>Pure.all_binder" ("_position" \<C>)
###                       ("\<^const>HOL.Trueprop"
###                         ("_applC" ("_position" Prop)
###                           ("_cargs" ("_position" \<C>)
###                             ("_cargs" ("_position" P)
###                               ("_cargs" ("_position" \<alpha>)
###                                 ("_position" P')))))))))
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" Prop)
###                     ("_cargs" ("_position" \<C>)
###                       ("_cargs"
###                         ("\<^const>Agent.ccs.Par" ("_position" P)
###                           ("_position" Q))
###                         ("_cargs" ("_position" \<alpha>)
###                           ("\<^const>Agent.ccs.Par" ("_position" P')
###                             ("_position" Q)))))))))
###             ("_asms"
###               ("\<^const>Pure.all_binder"
###                 ("_idts" ("_position" Q)
###                   ("_idts" ("_position" \<alpha>)
###                     ("_idts" ("_position" Q')
###                       ("_idts" ("_position" P) ("_position" \<C>)))))
###                 ("_bigimpl"
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Agent.semantics" ("_position" Q)
###                         ("_position" \<alpha>) ("_position" Q')))
###                     ("_asm"
###                       ("\<^const>Pure.all_binder" ("_position" \<C>)
###                         ("\<^const>HOL.Trueprop"
###                           ("_applC" ("_position" Prop)
###                             ("_cargs" ("_position" \<C>)
###                               ("_cargs" ("_position" Q)
###                                 ("_cargs" ("_position" \<alpha>)
###                                   ("_position" Q')))))))))
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" Prop)
###                       ("_cargs" ("_position" \<C>)
###                         ("_cargs"
###                           ("\<^const>Agent.ccs.Par" ("_position" P)
###                             ("_position" Q))
###                           ("_cargs" ("_position" \<alpha>)
###                             ("\<^const>Agent.ccs.Par" ("_position" P)
###                               ("_position" Q')))))))))
###               ("_asms"
###                 ("\<^const>Pure.all_binder"
###                   ("_idts" ("_position" P)
###                     ("_idts" ("_position" a)
###                       ("_idts" ("_position" P')
###                         ("_idts" ("_position" Q)
###                           ("_idts" ("_position" Q') ("_position" \<C>))))))
###                   ("_bigimpl"
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Agent.semantics" ("_position" P)
###                           ("_position" a) ("_position" P')))
###                       ("_asms"
###                         ("\<^const>Pure.all_binder" ("_position" \<C>)
###                           ("\<^const>HOL.Trueprop"
###                             ("_applC" ("_position" Prop)
###                               ("_cargs" ("_position" \<C>)
###                                 ("_cargs" ("_position" P)
###                                   ("_cargs" ("_position" a)
###                                     ("_position" P')))))))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Agent.semantics" ("_position" Q)
###                               ("_applC" ("_position" coAction)
###                                 ("_position" a))
###                               ("_position" Q')))
###                           ("_asms"
###                             ("\<^const>Pure.all_binder" ("_position" \<C>)
###                               ("\<^const>HOL.Trueprop"
###                                 ("_applC" ("_position" Prop)
###                                   ("_cargs" ("_position" \<C>)
###                                     ("_cargs" ("_position" Q)
### ("_cargs" ("_applC" ("_position" coAction) ("_position" a))
###   ("_position" Q')))))))
###                             ("_asm"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>HOL.not_equal" ("_position" a)
###                                   ("\<^const>Agent.act.actTau"))))))))
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" Prop)
###                         ("_cargs" ("_position" \<C>)
###                           ("_cargs"
###                             ("\<^const>Agent.ccs.Par" ("_position" P)
###                               ("_position" Q))
###                             ("_cargs" ("\<^const>Agent.act.actTau")
###                               ("\<^const>Agent.ccs.Par" ("_position" P')
###                                 ("_position" Q')))))))))
###                 ("_asms"
###                   ("\<^const>Pure.all_binder"
###                     ("_idts" ("_position" P)
###                       ("_idts" ("_position" \<alpha>)
###                         ("_idts" ("_position" P')
###                           ("_idts" ("_position" x) ("_position" \<C>)))))
###                     ("_bigimpl"
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>Nominal.fresh" ("_position" x)
###                             ("_position" \<C>)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Agent.semantics" ("_position" P)
###                               ("_position" \<alpha>) ("_position" P')))
###                           ("_asms"
###                             ("\<^const>Pure.all_binder" ("_position" \<C>)
###                               ("\<^const>HOL.Trueprop"
###                                 ("_applC" ("_position" Prop)
###                                   ("_cargs" ("_position" \<C>)
###                                     ("_cargs" ("_position" P)
### ("_cargs" ("_position" \<alpha>) ("_position" P')))))))
###                             ("_asm"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" x)
###                                   ("_position" \<alpha>)))))))
###                       ("\<^const>HOL.Trueprop"
###                         ("_applC" ("_position" Prop)
###                           ("_cargs" ("_position" \<C>)
###                             ("_cargs"
###                               ("\<^const>Agent.ccs.Res" ("_position" x)
###                                 ("_position" P))
###                               ("_cargs" ("_position" \<alpha>)
###                                 ("\<^const>Agent.ccs.Res" ("_position" x)
###                                   ("_position" P')))))))))
###                   ("_asm"
###                     ("\<^const>Pure.all_binder"
###                       ("_idts" ("_position" P)
###                         ("_idts" ("_position" \<alpha>)
###                           ("_idts" ("_position" P') ("_position" \<C>))))
###                       ("_bigimpl"
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Agent.semantics"
###                               ("\<^const>Agent.ccs.Par" ("_position" P)
###                                 ("\<^const>Agent.ccs.Bang" ("_position" P)))
###                               ("_position" \<alpha>) ("_position" P')))
###                           ("_asm"
###                             ("\<^const>Pure.all_binder" ("_position" \<C>)
###                               ("\<^const>HOL.Trueprop"
###                                 ("_applC" ("_position" Prop)
###                                   ("_cargs" ("_position" \<C>)
###                                     ("_cargs"
### ("\<^const>Agent.ccs.Par" ("_position" P)
###   ("\<^const>Agent.ccs.Bang" ("_position" P)))
### ("_cargs" ("_position" \<alpha>) ("_position" P')))))))))
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>List.nth"
###                             ("_applC" ("_position" Prop) ("_position" \<C>))
###                             ("_applC" ("_position" P)
###                               ("_cargs" ("_position" \<alpha>)
###                                 ("_position" P'))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Prop)
###       ("_cargs"
###         ("_constrain" ("_position" \<C>)
###           ("_ofsort" ("_position_sort" 'a) ("_class_name" fs_name)))
###         ("_cargs" ("_position" R)
###           ("_cargs" ("_position" \<beta>) ("_position" R')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Agent.semantics" ("_position" R) ("_position" \<beta>)
###         ("_position" R')))
###     ("_asms"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" \<alpha>)
###           ("_idts" ("_position" P) ("_position" \<C>)))
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" Prop)
###             ("_cargs" ("_position" \<C>)
###               ("_cargs"
###                 ("\<^const>Agent.ccs.Action" ("_position" \<alpha>)
###                   ("_position" P))
###                 ("_cargs" ("_position" \<alpha>) ("_position" P)))))))
###       ("_asms"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" P)
###             ("_idts" ("_position" \<alpha>)
###               ("_idts" ("_position" P')
###                 ("_idts" ("_position" Q) ("_position" \<C>)))))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Agent.semantics" ("_position" P)
###                   ("_position" \<alpha>) ("_position" P')))
###               ("_asm"
###                 ("\<^const>Pure.all_binder" ("_position" \<C>)
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" Prop)
###                       ("_cargs" ("_position" \<C>)
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" \<alpha>)
###                             ("_position" P')))))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" Prop)
###                 ("_cargs" ("_position" \<C>)
###                   ("_cargs"
###                     ("_applC" ("_position" ccs.Sum)
###                       ("_cargs" ("_position" P) ("_position" Q)))
###                     ("_cargs" ("_position" \<alpha>) ("_position" P'))))))))
###         ("_asms"
###           ("\<^const>Pure.all_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" \<alpha>)
###                 ("_idts" ("_position" Q')
###                   ("_idts" ("_position" P) ("_position" \<C>)))))
###             ("_bigimpl"
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Agent.semantics" ("_position" Q)
###                     ("_position" \<alpha>) ("_position" Q')))
###                 ("_asm"
###                   ("\<^const>Pure.all_binder" ("_position" \<C>)
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" Prop)
###                         ("_cargs" ("_position" \<C>)
###                           ("_cargs" ("_position" Q)
###                             ("_cargs" ("_position" \<alpha>)
###                               ("_position" Q')))))))))
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" Prop)
###                   ("_cargs" ("_position" \<C>)
###                     ("_cargs"
###                       ("_applC" ("_position" ccs.Sum)
###                         ("_cargs" ("_position" P) ("_position" Q)))
###                       ("_cargs" ("_position" \<alpha>)
###                         ("_position" Q'))))))))
###           ("_asms"
###             ("\<^const>Pure.all_binder"
###               ("_idts" ("_position" P)
###                 ("_idts" ("_position" \<alpha>)
###                   ("_idts" ("_position" P')
###                     ("_idts" ("_position" Q) ("_position" \<C>)))))
###               ("_bigimpl"
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Agent.semantics" ("_position" P)
###                       ("_position" \<alpha>) ("_position" P')))
###                   ("_asm"
###                     ("\<^const>Pure.all_binder" ("_position" \<C>)
###                       ("\<^const>HOL.Trueprop"
###                         ("_applC" ("_position" Prop)
###                           ("_cargs" ("_position" \<C>)
###                             ("_cargs" ("_position" P)
###                               ("_cargs" ("_position" \<alpha>)
###                                 ("_position" P')))))))))
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" Prop)
###                     ("_cargs" ("_position" \<C>)
###                       ("_cargs"
###                         ("\<^const>Agent.ccs.Par" ("_position" P)
###                           ("_position" Q))
###                         ("_cargs" ("_position" \<alpha>)
###                           ("\<^const>Agent.ccs.Par" ("_position" P')
###                             ("_position" Q)))))))))
###             ("_asms"
###               ("\<^const>Pure.all_binder"
###                 ("_idts" ("_position" Q)
###                   ("_idts" ("_position" \<alpha>)
###                     ("_idts" ("_position" Q')
###                       ("_idts" ("_position" P) ("_position" \<C>)))))
###                 ("_bigimpl"
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Agent.semantics" ("_position" Q)
###                         ("_position" \<alpha>) ("_position" Q')))
###                     ("_asm"
###                       ("\<^const>Pure.all_binder" ("_position" \<C>)
###                         ("\<^const>HOL.Trueprop"
###                           ("_applC" ("_position" Prop)
###                             ("_cargs" ("_position" \<C>)
###                               ("_cargs" ("_position" Q)
###                                 ("_cargs" ("_position" \<alpha>)
###                                   ("_position" Q')))))))))
###                   ("\<^const>HOL.Trueprop"
###                     ("_applC" ("_position" Prop)
###                       ("_cargs" ("_position" \<C>)
###                         ("_cargs"
###                           ("\<^const>Agent.ccs.Par" ("_position" P)
###                             ("_position" Q))
###                           ("_cargs" ("_position" \<alpha>)
###                             ("\<^const>Agent.ccs.Par" ("_position" P)
###                               ("_position" Q')))))))))
###               ("_asms"
###                 ("\<^const>Pure.all_binder"
###                   ("_idts" ("_position" P)
###                     ("_idts" ("_position" a)
###                       ("_idts" ("_position" P')
###                         ("_idts" ("_position" Q)
###                           ("_idts" ("_position" Q') ("_position" \<C>))))))
###                   ("_bigimpl"
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>Agent.semantics" ("_position" P)
###                           ("_position" a) ("_position" P')))
###                       ("_asms"
###                         ("\<^const>Pure.all_binder" ("_position" \<C>)
###                           ("\<^const>HOL.Trueprop"
###                             ("_applC" ("_position" Prop)
###                               ("_cargs" ("_position" \<C>)
###                                 ("_cargs" ("_position" P)
###                                   ("_cargs" ("_position" a)
###                                     ("_position" P')))))))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Agent.semantics" ("_position" Q)
###                               ("_applC" ("_position" coAction)
###                                 ("_position" a))
###                               ("_position" Q')))
###                           ("_asms"
###                             ("\<^const>Pure.all_binder" ("_position" \<C>)
###                               ("\<^const>HOL.Trueprop"
###                                 ("_applC" ("_position" Prop)
###                                   ("_cargs" ("_position" \<C>)
###                                     ("_cargs" ("_position" Q)
### ("_cargs" ("_applC" ("_position" coAction) ("_position" a))
###   ("_position" Q')))))))
###                             ("_asm"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>HOL.not_equal" ("_position" a)
###                                   ("\<^const>Agent.act.actTau"))))))))
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" Prop)
###                         ("_cargs" ("_position" \<C>)
###                           ("_cargs"
###                             ("\<^const>Agent.ccs.Par" ("_position" P)
###                               ("_position" Q))
###                             ("_cargs" ("\<^const>Agent.act.actTau")
###                               ("\<^const>Agent.ccs.Par" ("_position" P')
###                                 ("_position" Q')))))))))
###                 ("_asms"
###                   ("\<^const>Pure.all_binder"
###                     ("_idts" ("_position" P)
###                       ("_idts" ("_position" \<alpha>)
###                         ("_idts" ("_position" P')
###                           ("_idts" ("_position" x) ("_position" \<C>)))))
###                     ("_bigimpl"
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>Nominal.fresh" ("_position" x)
###                             ("_position" \<C>)))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Agent.semantics" ("_position" P)
###                               ("_position" \<alpha>) ("_position" P')))
###                           ("_asms"
###                             ("\<^const>Pure.all_binder" ("_position" \<C>)
###                               ("\<^const>HOL.Trueprop"
###                                 ("_applC" ("_position" Prop)
###                                   ("_cargs" ("_position" \<C>)
###                                     ("_cargs" ("_position" P)
### ("_cargs" ("_position" \<alpha>) ("_position" P')))))))
###                             ("_asm"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Nominal.fresh" ("_position" x)
###                                   ("_position" \<alpha>)))))))
###                       ("\<^const>HOL.Trueprop"
###                         ("_applC" ("_position" Prop)
###                           ("_cargs" ("_position" \<C>)
###                             ("_cargs"
###                               ("\<^const>Agent.ccs.Res" ("_position" x)
###                                 ("_position" P))
###                               ("_cargs" ("_position" \<alpha>)
###                                 ("\<^const>Agent.ccs.Res" ("_position" x)
###                                   ("_position" P')))))))))
###                   ("_asm"
###                     ("\<^const>Pure.all_binder"
###                       ("_idts" ("_position" P)
###                         ("_idts" ("_position" \<alpha>)
###                           ("_idts" ("_position" P') ("_position" \<C>))))
###                       ("_bigimpl"
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Agent.semantics"
###                               ("\<^const>Agent.ccs.Par" ("_position" P)
###                                 ("\<^const>Agent.ccs.Bang" ("_position" P)))
###                               ("_position" \<alpha>) ("_position" P')))
###                           ("_asm"
###                             ("\<^const>Pure.all_binder" ("_position" \<C>)
###                               ("\<^const>HOL.Trueprop"
###                                 ("_applC" ("_position" Prop)
###                                   ("_cargs" ("_position" \<C>)
###                                     ("_cargs"
### ("\<^const>Agent.ccs.Par" ("_position" P)
###   ("\<^const>Agent.ccs.Bang" ("_position" P)))
### ("_cargs" ("_position" \<alpha>) ("_position" P')))))))))
###                         ("\<^const>HOL.Trueprop"
###                           ("_applC" ("_position" Prop)
###                             ("_cargs" ("_position" \<C>)
###                               ("_cargs"
###                                 ("\<^const>Agent.ccs.Bang" ("_position" P))
###                                 ("_cargs" ("_position" \<alpha>)
###                                   ("_position" P')))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Prop)
###       ("_cargs"
###         ("_constrain" ("_position" \<C>)
###           ("_ofsort" ("_position_sort" 'a) ("_class_name" fs_name)))
###         ("_cargs" ("_position" R)
###           ("_cargs" ("_position" \<beta>) ("_position" R')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "bangPred"
  Proving monotonicity ...
Proofs for inductive predicate(s) "bangRelp"
  Proving monotonicity ...
### theory "Draft.Agent"
### 1.764s elapsed time, 1.926s cpu time, 0.221s GC time
Loading theory "Draft.Tau_Chain" (required by "Draft.Weak_SemanticsMoreTemplates" via "Draft.Weak_Semantics" via "Draft.Weak_Cong_Semantics")
### Ambiguous input (line 11 of "$AFP/CCS/Tau_Chain.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>tauChain" ("_position" P) ("_position" P'))
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" P) ("_tuple_arg" ("_position" P')))
###     ("\<^const>Transitive_Closure.rtrancl"
###       ("_Setcompr"
###         ("_tuple" ("_position" P) ("_tuple_arg" ("_position" P')))
###         ("_idts" ("_position" P) ("_position" P'))
###         ("\<^const>Agent.semantics" ("_position" P)
###           ("\<^const>Agent.act.actTau") ("_position" P'))))))
### ("\<^const>Pure.eq" ("\<^fixed>tauChain" ("_position" P) ("_position" P'))
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" P) ("_tuple_arg" ("_position" P')))
###     ("\<^const>Transitive_Closure.rtrancl"
###       ("_Finset"
###         ("\<^const>HOL.disj"
###           ("_tuple" ("_position" P) ("_tuple_arg" ("_position" P')))
###           ("\<^const>Agent.semantics"
###             ("\<^const>Agent.ccs.Action"
###               ("_applC" ("_position" P) ("_position" P')) ("_position" P))
###             ("\<^const>Agent.act.actTau") ("_position" P')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Tau_Chain"
### 0.042s elapsed time, 0.060s cpu time, 0.000s GC time
Loading theory "Draft.Weak_Cong_Semantics" (required by "Draft.Weak_SemanticsMoreTemplates" via "Draft.Weak_Semantics")
### theory "Draft.Weak_Cong_Semantics"
### 0.041s elapsed time, 0.041s cpu time, 0.000s GC time
Loading theory "Draft.Weak_Semantics" (required by "Draft.Weak_SemanticsMoreTemplates")
### theory "Draft.Weak_Semantics"
### 0.040s elapsed time, 0.040s cpu time, 0.000s GC time
Loading theory "Draft.Weak_SemanticsMoreTemplates"
val templateLemmas =
   [("Weak_Semantics.weakEmptyTrans",
     "?P \<Longrightarrow>\<^sup>^\<tau> \<prec> ?P",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0),
           template_var 0)
         )),
    ("Weak_Semantics.weakAction",
     "?\<alpha>.?P \<Longrightarrow>\<^sup>^?\<alpha> \<prec> ?P",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 1),
           template_var 0)
         )),
    ("Weak_Semantics.transitionWeakTransition",
     "?P \<longmapsto>?\<alpha> \<prec> ?P' ==>
      ?P \<Longrightarrow>\<^sup>^?\<alpha> \<prec> ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Weak_Semantics.weakCongTransitionWeakTransition",
     "?P \<Longrightarrow>?\<alpha> \<prec> ?P' ==>
      ?P \<Longrightarrow>\<^sup>^?\<alpha> \<prec> ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Weak_Semantics.weakPar1",
     "?P \<Longrightarrow>\<^sup>^?\<alpha> \<prec> ?P' ==>
      ?P \<parallel>
      ?Q \<Longrightarrow>\<^sup>^?\<alpha> \<prec> ?P' \<parallel> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0)),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Weak_Semantics.weakPar2",
     "?Q \<Longrightarrow>\<^sup>^?\<alpha> \<prec> ?Q' ==>
      ?P \<parallel>
      ?Q \<Longrightarrow>\<^sup>^?\<alpha> \<prec> ?P \<parallel> ?Q'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3)),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Weak_Semantics.weakSum1",
     "[| ?P \<Longrightarrow>\<^sup>^?\<alpha> \<prec> ?P'; ?P ~= ?P' |]
      ==> ?P \<oplus> ?Q \<Longrightarrow>\<^sup>^?\<alpha> \<prec> ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0)),
               template_var 2),
             template_var 1)
           ))),
    ("Weak_Semantics.weakSum2",
     "[| ?Q \<Longrightarrow>\<^sup>^?\<alpha> \<prec> ?Q'; ?Q ~= ?Q' |]
      ==> ?P \<oplus> ?Q \<Longrightarrow>\<^sup>^?\<alpha> \<prec> ?Q'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3)),
               template_var 2),
             template_var 1)
           ))),
    ("Weak_Semantics.weakRes",
     "[| ?P \<Longrightarrow>\<^sup>^?\<alpha> \<prec> ?P';
         ?x \<sharp> ?\<alpha> |]
      ==> \<lparr>\<nu>?x\<rparr>?P \<Longrightarrow>\<^sup>^?\<alpha> \<prec> \<lparr>\<nu>?x\<rparr>?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3)),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Weak_Semantics.weakRepl",
     "[| ?P \<parallel> !?P \<Longrightarrow>\<^sup>^?\<alpha> \<prec> ?P';
         ?P' ~= ?P \<parallel> !?P |]
      ==> !?P \<Longrightarrow>?\<alpha> \<prec> ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_app (template_hole 3, template_var 2))),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_var 0,
              template_app
               (template_app (template_hole 4, template_var 2),
                template_app (template_hole 3, template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 3, template_var 2)),
               template_var 1),
             template_var 0)
           ))),
    ("Weak_Semantics.weakSync",
     "[| ?P \<Longrightarrow>\<^sup>^?\<alpha> \<prec> ?P';
         ?Q \<Longrightarrow>\<^sup>^coAction ?\<alpha> \<prec> ?Q';
         ?\<alpha> ~= \<tau> |]
      ==> ?P \<parallel>
          ?Q \<Longrightarrow>\<^sup>^\<tau> \<prec> ?P' \<parallel> ?Q'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_app (template_hole 4, template_var 3)),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 3, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 1)),
               template_hole 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Weak_Semantics.weakTransCases",
     "[| ?P \<Longrightarrow>\<^sup>^?\<alpha> \<prec> ?P';
         [| ?\<alpha> = \<tau>; ?P = ?P' |] ==> ?Prop (\<tau>) ?P;
         ?P \<Longrightarrow>?\<alpha> \<prec> ?P' ==>
         ?Prop ?\<alpha> ?P' |]
      ==> ?Prop ?\<alpha> ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 2, template_hole 2)],
          template_implication
           ([template_equation (template_var 3, template_var 1)],
            template_predicate
             (
                template_app
                 (template_app (template_var 0, template_hole 2),
                  template_var 3)
                ))),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate
           (
              template_app
               (template_app (template_var 0, template_var 2),
                template_var 1)
              ))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 2), template_var 1)
           )))]:
   (string * thm * template) list
### theory "Draft.Weak_SemanticsMoreTemplates"
### 0.389s elapsed time, 0.566s cpu time, 0.079s GC time
val it = (): unit
