   [("Case_Labeling.VC_I", "?P ==> Case_Labeling.VC ?ct ?P",
     template_implication
      ([template_predicate (template_var 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Case_Labeling.Suc_numeral_simps",
     "num.One + num.Bit0 ?n = num.Bit1 ?n",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Case_Labeling.Suc_numeral_simps",
     "num.Bit0 ?m + num.One = num.Bit1 ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Case_Labeling.BIND_I", "?P ==> Case_Labeling.BIND ?name ?inp ?P",
     template_implication
      ([template_predicate (template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)
           ))),
    ("Case_Labeling.BIND_D", "Case_Labeling.BIND ?name ?inp ?P ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_var 0))),
    ("Case_Labeling.SPLIT_thin_refl",
     "[| Case_Labeling.SPLIT ?x ?x; PROP ?W |] ==> PROP ?W",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 1)
            ),
        template_predicate (template_var 0)],
       template_predicate (template_var 0))),
    ("Case_Labeling.Suc_numeral_simps",
     "Suc (numeral ?n) = numeral (?n + num.One)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Case_Labeling.SPLIT_sym",
     "Case_Labeling.SPLIT ?x ?y ==> Case_Labeling.SPLIT ?y ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Case_Labeling.Initial_Label",
     "Case_Labeling.CTXT 0 [] ?outp ?P ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_hole 0),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_var 0))),
    ("Case_Labeling.DISAMBIG_E",
     "(Case_Labeling.DISAMBIG ?n ==> ?P) ==> ?P",
     template_implication
      ([template_implication
         ([template_predicate
            (template_app (template_hole 0, template_var 1))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Case_Labeling.Suc_numeral_simps",
     "num.One + num.Bit1 ?n = num.Bit0 (?n + num.One)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)))),
    ("Case_Labeling.Suc_numeral_simps",
     "num.Bit1 ?m + num.One = num.Bit0 (?m + num.One)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 1)))),
    ("Case_Labeling.Suc_numeral_simps",
     "num.Bit0 ?m + num.Bit0 ?n = num.Bit0 (?m + ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Case_Labeling.Suc_numeral_simps",
     "num.Bit0 ?m + num.Bit1 ?n = num.Bit1 (?m + ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Case_Labeling.Suc_numeral_simps",
     "num.Bit1 ?m + num.Bit0 ?n = num.Bit1 (?m + ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Case_Labeling.SPLIT_subst",
     "[| Case_Labeling.SPLIT ?x ?y; ?P ?x |] ==> ?P ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_var 0, template_var 2))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("Case_Labeling.Suc_numeral_simps",
     "num.Bit1 ?m + num.Bit1 ?n = num.Bit0 (?m + ?n + num.One)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_hole 0)))),
    ("Case_Labeling.SPLIT_prodE",
     "[| Case_Labeling.SPLIT (?x1.0, ?y1.0) (?x2.0, ?y2.0);
         [| Case_Labeling.SPLIT ?x1.0 ?x2.0;
            Case_Labeling.SPLIT ?y1.0 ?y2.0 |]
         ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 2)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0)))]
