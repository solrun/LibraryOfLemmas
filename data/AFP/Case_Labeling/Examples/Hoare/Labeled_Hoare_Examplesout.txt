Loading theory "Draft.Case_Labeling" (required by "Draft.Labeled_Hoare_ExamplesMoreTemplates" via "Draft.Labeled_Hoare_Examples" via "Draft.Labeled_Hoare")
Loading theory "HOL-Hoare.Hoare_Syntax" (required by "Draft.Labeled_Hoare_ExamplesMoreTemplates" via "Draft.Labeled_Hoare_Examples" via "Draft.Labeled_Hoare" via "HOL-Hoare.Hoare_Logic")
Loading theory "HOL-Hoare.Arith2" (required by "Draft.Labeled_Hoare_ExamplesMoreTemplates" via "Draft.Labeled_Hoare_Examples")
Loading theory "HOL-Hoare.Hoare_Tac" (required by "Draft.Labeled_Hoare_ExamplesMoreTemplates" via "Draft.Labeled_Hoare_Examples" via "Draft.Labeled_Hoare" via "HOL-Hoare.Hoare_Logic")
consts
  fac :: "nat => nat"
### theory "HOL-Hoare.Arith2"
### 0.060s elapsed time, 0.272s cpu time, 0.000s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Labeled_Hoare_ExamplesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
locale Labeling_Syntax
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
signature PRINT_NESTED_CASES =
  sig
    val pretty_cases: Proof.context -> Pretty.T
    val print_cases: Proof.context -> unit
  end
structure Print_Nested_Cases: PRINT_NESTED_CASES
infix 1 THEN_CONTEXT
infix 1 THEN_ALL_NEW_FWD
signature BASIC_UTIL =
  sig
    val INTERVAL_FWD: (int -> tactic) -> int -> int -> tactic
    val REPEAT_ALL_NEW_FWD: (int -> tactic) -> int -> tactic
    val THEN_ALL_NEW_FWD: (int -> tactic) * (int -> tactic) -> int -> tactic
    val THEN_CONTEXT: tactic * context_tactic -> context_tactic
  end
signature UTIL =
  sig
    val INTERVAL_FWD: (int -> tactic) -> int -> int -> tactic
    val REPEAT_ALL_NEW_FWD: (int -> tactic) -> int -> tactic
    val SIMPLE_METHOD_CASES: context_tactic -> Method.method
    val THEN_ALL_NEW_FWD: (int -> tactic) * (int -> tactic) -> int -> tactic
    val THEN_CONTEXT: tactic * context_tactic -> context_tactic
    val appair: ('a -> 'b) -> ('c -> 'd) -> 'a * 'c -> 'b * 'd
    val dest_bool: term -> bool
    val dest_option: term -> term option
    val dest_pair: term -> term * term
    val dest_tuple: term -> term list
    val fst_ord: ('a * 'a -> order) -> ('a * 'b) * ('a * 'b) -> order
    val infst: ('a -> 'b -> 'c * 'b) -> 'a * 'd -> 'b -> ('c * 'd) * 'b
    val none_inf_ord: ('a * 'a -> order) -> 'a option * 'a option -> order
    val snd_ord: ('a * 'a -> order) -> ('b * 'a) * ('b * 'a) -> order
  end
structure Util: UTIL
structure Basic_Util: BASIC_UTIL
val INTERVAL_FWD = fn: (int -> tactic) -> int -> int -> tactic
val THEN_CONTEXT = fn: tactic * context_tactic -> context_tactic
val REPEAT_ALL_NEW_FWD = fn: (int -> tactic) -> int -> tactic
val THEN_ALL_NEW_FWD = fn:
   (int -> tactic) * (int -> tactic) -> int -> tactic
### theory "HOL-Library.Function_Algebras"
### 0.123s elapsed time, 0.470s cpu time, 0.041s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Labeled_Hoare_ExamplesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
signature CASIFY =
  sig
    val SPLIT_subst_tac: Proof.context -> int -> tactic
    val casify_method_setup:
       options -> (Proof.context -> Method.method) context_parser
    val casify_options: options -> options parser
    val casify_tac: options -> context_tactic
    val extract_cases_tac: context_tactic
    val hyp_subst_tac: Proof.context -> int -> tactic
    datatype options
    =
         Options of
             {protect_subgoals: bool,
              simp_all_cases: bool, split_right_only: bool}
    val prepare_labels_tac: Proof.context -> int -> tactic
    val split_bind_all_tac:
       {right_only: bool, simp_all_cases: bool} ->
         Proof.context -> int -> tactic
  end
structure Casify: CASIFY
val casify_defs =
   Options
    {protect_subgoals = false, simp_all_cases = true, split_right_only =
     true}:
   Casify.options
### theory "Draft.Case_Labeling"
### 0.348s elapsed time, 1.396s cpu time, 0.119s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Labeled_Hoare_ExamplesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.329s elapsed time, 1.300s cpu time, 0.152s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Labeled_Hoare_ExamplesMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.187s elapsed time, 0.739s cpu time, 0.074s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Labeled_Hoare_ExamplesMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### ML warning (line 58 of "~~/src/HOL/Hoare/hoare_syntax.ML"):
### Matches are not exhaustive.
### ML warning (line 62 of "~~/src/HOL/Hoare/hoare_syntax.ML"):
### Matches are not exhaustive.
### ML warning (line 232 of "~~/src/HOL/Hoare/hoare_syntax.ML"):
### Matches are not exhaustive.
signature HOARE_SYNTAX =
  sig
    val hoare_tc_vars_tr: Proof.context -> term list -> term
    val hoare_vars_tr: Proof.context -> term list -> term
    val setup:
       {Basic: string,
        Cond: string,
        Seq: string,
        Skip: string, Valid: string, ValidTC: string, While: string}
         -> theory -> theory
    val spec_tr': string -> Proof.context -> term list -> term
  end
structure Hoare_Syntax: HOARE_SYNTAX
### theory "HOL-Hoare.Hoare_Syntax"
### 0.767s elapsed time, 3.051s cpu time, 0.280s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Labeled_Hoare_ExamplesMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.035s elapsed time, 3.917s cpu time, 0.698s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### ML warning (line 49 of "~~/src/HOL/Hoare/hoare_tac.ML"):
### Matches are not exhaustive.
### ML warning (line 64 of "~~/src/HOL/Hoare/hoare_tac.ML"):
### Matches are not exhaustive.
### ML warning (line 76 of "~~/src/HOL/Hoare/hoare_tac.ML"):
### Matches are not exhaustive.
### ML warning (file "~~/src/HOL/Hoare/hoare_tac.ML"):
### Pattern is not exhaustive.
### ML warning (line 90 of "~~/src/HOL/Hoare/hoare_tac.ML"):
### Pattern is not exhaustive.
signature HOARE_TAC =
  sig
    val hoare_rule_tac:
       Proof.context ->
         term list * thm -> (int -> tactic) -> bool -> int -> tactic
    val hoare_tac: Proof.context -> (int -> tactic) -> int -> tactic
    val hoare_tc_tac: Proof.context -> (int -> tactic) -> int -> tactic
  end
structure Hoare_Tac: HOARE_TAC
### theory "HOL-Hoare.Hoare_Tac"
### 1.750s elapsed time, 6.591s cpu time, 0.963s GC time
Loading theory "HOL-Hoare.Hoare_Logic" (required by "Draft.Labeled_Hoare_ExamplesMoreTemplates" via "Draft.Labeled_Hoare_Examples" via "Draft.Labeled_Hoare")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.996s elapsed time, 3.575s cpu time, 0.683s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Sem"
  Proving monotonicity ...
### theory "HOL-Library.Tree"
### 1.940s elapsed time, 5.986s cpu time, 0.917s GC time
Loading theory "Draft.Templates" (required by "Draft.Labeled_Hoare_ExamplesMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.106s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Labeled_Hoare_ExamplesMoreTemplates")
### theory "HOL-Hoare.Hoare_Logic"
### 0.811s elapsed time, 1.714s cpu time, 0.147s GC time
Loading theory "Draft.Labeled_Hoare" (required by "Draft.Labeled_Hoare_ExamplesMoreTemplates" via "Draft.Labeled_Hoare_Examples")
### ML warning (line 63 of "$AFP/Case_Labeling/Examples/Hoare/labeled_hoare_tac.ML"):
### Matches are not exhaustive.
### ML warning (line 80 of "$AFP/Case_Labeling/Examples/Hoare/labeled_hoare_tac.ML"):
### Matches are not exhaustive.
### ML warning (line 90 of "$AFP/Case_Labeling/Examples/Hoare/labeled_hoare_tac.ML"):
### Pattern is not exhaustive.
### ML warning (line 94 of "$AFP/Case_Labeling/Examples/Hoare/labeled_hoare_tac.ML"):
### Pattern is not exhaustive.
### ML warning (line 94 of "$AFP/Case_Labeling/Examples/Hoare/labeled_hoare_tac.ML"):
### Value identifier (T) has not been referenced.
### ML warning (line 103 of "$AFP/Case_Labeling/Examples/Hoare/labeled_hoare_tac.ML"):
### Pattern is not exhaustive.
signature LABELED_HOARE =
  sig
    val hoare_rule_tac:
       Proof.context ->
         term list * thm -> (int -> tactic) -> bool -> int -> tactic
    val hoare_tac: Proof.context -> (int -> tactic) -> int -> tactic
    val wrap_label_tac: Proof.context -> (int -> tactic) -> int -> tactic
  end
structure Labeled_Hoare: LABELED_HOARE
### theory "Draft.Labeled_Hoare"
### 0.230s elapsed time, 0.479s cpu time, 0.050s GC time
Loading theory "Draft.Labeled_Hoare_Examples" (required by "Draft.Labeled_Hoare_ExamplesMoreTemplates")
### Ambiguous input (line 172 of "$AFP/Case_Labeling/Examples/Hoare/Labeled_Hoare_Examples.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_hoare_vars"
###     ("_idts" ("_position" A) ("_idts" ("_position" u) ("_position" l)))
###     ("\<^const>Orderings.ord_class.less" ("\<^const>Groups.zero_class.zero")
###       ("_applC" ("_position" length)
###         ("_constrain" ("_position" A)
###           ("_tapp" ("_ofsort" ("_position_sort" 'a) ("_class_name" order))
###             ("_type_name" list)))))
###     ("_Seq" ("_assign" ("_position" l) ("\<^const>Groups.zero_class.zero"))
###       ("_Seq"
###         ("_assign" ("_position" u)
###           ("\<^const>Groups.minus_class.minus"
###             ("_applC" ("_position" length) ("_position" A))
###             ("_applC" ("_position" Suc)
###               ("\<^const>Groups.zero_class.zero"))))
###         ("_While0"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###             ("_position" u))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" leq)
###               ("_cargs" ("_position" A) ("_position" l)))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" geq)
###                 ("_cargs" ("_position" A) ("_position" u)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Orderings.ord_class.less" ("_position" u)
###                   ("_applC" ("_position" length) ("_position" A)))
###                 ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###                   ("_applC" ("_position" length) ("_position" A))))))
###           ("_Seq"
###             ("_While0"
###               ("\<^const>HOL.conj"
###                 ("\<^const>Orderings.ord_class.less" ("_position" l)
###                   ("_applC" ("_position" length) ("_position" A)))
###                 ("\<^const>Orderings.ord_class.less_eq"
###                   ("\<^const>List.nth" ("_position" A) ("_position" l))
###                   ("_position" pivot)))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" leq)
###                   ("_cargs" ("_position" A) ("_position" l)))
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" geq)
###                     ("_cargs" ("_position" A) ("_position" u)))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Orderings.ord_class.less" ("_position" u)
###                       ("_applC" ("_position" length) ("_position" A)))
###                     ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###                       ("_applC" ("_position" length) ("_position" A))))))
###               ("_assign" ("_position" l)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one"))))
###             ("_Seq"
###               ("_While0"
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Orderings.ord_class.less"
###                     ("\<^const>Groups.zero_class.zero") ("_position" u))
###                   ("\<^const>Orderings.ord_class.less_eq"
###                     ("_position" pivot)
###                     ("\<^const>List.nth" ("_position" A) ("_position" u))))
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" leq)
###                     ("_cargs" ("_position" A) ("_position" l)))
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" geq)
###                       ("_cargs" ("_position" A) ("_position" u)))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>Orderings.ord_class.less" ("_position" u)
###                         ("_applC" ("_position" length) ("_position" A)))
###                       ("\<^const>Orderings.ord_class.less_eq"
###                         ("_position" l)
###                         ("_applC" ("_position" length) ("_position" A))))))
###                 ("_assign" ("_position" u)
###                   ("\<^const>Groups.minus_class.minus" ("_position" u)
###                     ("\<^const>Groups.one_class.one"))))
###               ("_Cond"
###                 ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###                   ("_position" u))
###                 ("_assign" ("_position" A)
###                   ("_LUpdate" ("_position" A)
###                     ("_lupdbinds"
###                       ("_lupdbind" ("_position" l)
###                         ("\<^const>List.nth" ("_position" A)
###                           ("_position" u)))
###                       ("_lupdbind" ("_position" u)
###                         ("\<^const>List.nth" ("_position" A)
###                           ("_position" l))))))
###                 ("\<^const>Hoare_Logic.annskip")))))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" leq)
###         ("_cargs" ("_position" A) ("_position" u)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.All_binder" ("_position" k)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.conj"
###               ("\<^const>Orderings.ord_class.less" ("_position" u)
###                 ("_position" k))
###               ("\<^const>Orderings.ord_class.less" ("_position" k)
###                 ("_position" l)))
###             ("\<^const>HOL.eq"
###               ("\<^const>List.nth" ("_position" A) ("_position" k))
###               ("_position" pivot))))
###         ("_applC" ("_position" geq)
###           ("_cargs" ("_position" A) ("_position" l)))))))
### ("\<^const>HOL.Trueprop"
###   ("_hoare_vars"
###     ("_idts" ("_position" A) ("_idts" ("_position" u) ("_position" l)))
###     ("\<^const>Orderings.ord_class.less" ("\<^const>Groups.zero_class.zero")
###       ("_applC" ("_position" length)
###         ("_constrain" ("_position" A)
###           ("_tapp" ("_ofsort" ("_position_sort" 'a) ("_class_name" order))
###             ("_type_name" list)))))
###     ("_Seq" ("_assign" ("_position" l) ("\<^const>Groups.zero_class.zero"))
###       ("_Seq"
###         ("_assign" ("_position" u)
###           ("\<^const>Groups.minus_class.minus"
###             ("_applC" ("_position" length) ("_position" A))
###             ("_applC" ("_position" Suc)
###               ("\<^const>Groups.zero_class.zero"))))
###         ("_While0"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###             ("_position" u))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" leq)
###               ("_cargs" ("_position" A) ("_position" l)))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" geq)
###                 ("_cargs" ("_position" A) ("_position" u)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Orderings.ord_class.less" ("_position" u)
###                   ("_applC" ("_position" length) ("_position" A)))
###                 ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###                   ("_applC" ("_position" length) ("_position" A))))))
###           ("_Seq"
###             ("_While0"
###               ("\<^const>HOL.conj"
###                 ("\<^const>Orderings.ord_class.less" ("_position" l)
###                   ("_applC" ("_position" length) ("_position" A)))
###                 ("\<^const>Orderings.ord_class.less_eq"
###                   ("\<^const>List.nth" ("_position" A) ("_position" l))
###                   ("_position" pivot)))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" leq)
###                   ("_cargs" ("_position" A) ("_position" l)))
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" geq)
###                     ("_cargs" ("_position" A) ("_position" u)))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Orderings.ord_class.less" ("_position" u)
###                       ("_applC" ("_position" length) ("_position" A)))
###                     ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###                       ("_applC" ("_position" length) ("_position" A))))))
###               ("_assign" ("_position" l)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one"))))
###             ("_Seq"
###               ("_While0"
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Orderings.ord_class.less"
###                     ("\<^const>Groups.zero_class.zero") ("_position" u))
###                   ("\<^const>Orderings.ord_class.less_eq"
###                     ("_position" pivot)
###                     ("\<^const>List.nth" ("_position" A) ("_position" u))))
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" leq)
###                     ("_cargs" ("_position" A) ("_position" l)))
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" geq)
###                       ("_cargs" ("_position" A) ("_position" u)))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>Orderings.ord_class.less" ("_position" u)
###                         ("_applC" ("_position" length) ("_position" A)))
###                       ("\<^const>Orderings.ord_class.less_eq"
###                         ("_position" l)
###                         ("_applC" ("_position" length) ("_position" A))))))
###                 ("_assign" ("_position" u)
###                   ("\<^const>Groups.minus_class.minus" ("_position" u)
###                     ("\<^const>Groups.one_class.one"))))
###               ("_Cond"
###                 ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###                   ("_position" u))
###                 ("_assign" ("_position" A)
###                   ("_applC" ("_position" A)
###                     ("_list"
###                       ("_args"
###                         ("_assign" ("_position" l)
###                           ("\<^const>List.nth" ("_position" A)
###                             ("_position" u)))
###                         ("_assign" ("_position" u)
###                           ("\<^const>List.nth" ("_position" A)
###                             ("_position" l)))))))
###                 ("\<^const>Hoare_Logic.annskip")))))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" leq)
###         ("_cargs" ("_position" A) ("_position" u)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.All_binder" ("_position" k)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.conj"
###               ("\<^const>Orderings.ord_class.less" ("_position" u)
###                 ("_position" k))
###               ("\<^const>Orderings.ord_class.less" ("_position" k)
###                 ("_position" l)))
###             ("\<^const>HOL.eq"
###               ("\<^const>List.nth" ("_position" A) ("_position" k))
###               ("_position" pivot))))
###         ("_applC" ("_position" geq)
###           ("_cargs" ("_position" A) ("_position" l)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Labeled_Hoare_Examples"
### 0.202s elapsed time, 0.421s cpu time, 0.046s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.539s elapsed time, 1.064s cpu time, 0.096s GC time
Loading theory "Draft.Labeled_Hoare_ExamplesMoreTemplates"
val templateLemmas =
   [("Labeled_Hoare_Examples.distribs",
     "?k * (?m - ?n) = ?k * ?m - ?k * ?n",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Labeled_Hoare_Examples.distribs",
     "?k * (?m + ?n) = ?k * ?m + ?k * ?n",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Labeled_Hoare_Examples.distribs",
     "(?m - ?n) * ?k = ?m * ?k - ?n * ?k",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Labeled_Hoare_Examples.distribs",
     "(?m + ?n) * ?k = ?m * ?k + ?n * ?k",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Labeled_Hoare_Examples.factorial",
     "{a = ?A} 
       b := 1; WHILE a ~= 0 INV {fac ?A = b * fac a}  VAR {0} 
                DO b := b * a; a := a - 1 OD 
       {b = fac ?A}",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 18,
                 template_app
                  (template_hole 17,
                   template_app (template_hole 16, t_empty))),
               template_app
                (template_app
                  (template_hole 14,
                   template_app
                    (template_hole 13,
                     template_app (template_hole 12, t_empty))),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_hole 17,
                       template_app (template_hole 16, t_empty))),
                   template_app
                    (template_app
                      (template_hole 14,
                       template_app
                        (template_hole 13,
                         template_app (template_hole 12, t_empty))),
                     template_app
                      (template_hole 13,
                       template_app (template_hole 12, t_empty)))))),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_hole 17,
                       template_app (template_hole 16, t_empty))),
                   template_app (template_hole 0, t_empty)),
                 t_empty))),
           template_app
            (template_hole 17, template_app (template_hole 16, t_empty)))
         )),
    ("Labeled_Hoare_Examples.Euclid_GCD",
     "{0 < ?A & 0 < ?B} 
       a := ?A;
       b := ?B;
       WHILE a ~= b INV {0 < a & 0 < b & Arith2.gcd ?A ?B = Arith2.gcd a b} 
        VAR {0} 
        DO IF a < b THEN b := b - a  ELSE a := a - b FI OD 
       {a = Arith2.gcd ?A ?B}",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 20,
                 template_app
                  (template_hole 19,
                   template_app (template_hole 18, t_empty))),
               template_app
                (template_app
                  (template_hole 14,
                   template_app
                    (template_hole 13,
                     template_app (template_hole 12, t_empty))),
                 template_app
                  (template_app
                    (template_hole 14,
                     template_app
                      (template_hole 13,
                       template_app (template_hole 12, t_empty))),
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app
                        (template_hole 19,
                         template_app (template_hole 18, t_empty))),
                     template_app
                      (template_app
                        (template_app
                          (template_hole 7,
                           template_app
                            (template_hole 19,
                             template_app (template_hole 18, t_empty))),
                         template_app
                          (template_hole 13,
                           template_app (template_hole 12, t_empty))),
                       template_app
                        (template_hole 13,
                         template_app (template_hole 12, t_empty))))))),
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_hole 19,
                         template_app (template_hole 18, t_empty))),
                     template_app (template_hole 1, t_empty)),
                   t_empty)))),
           template_app
            (template_hole 19, template_app (template_hole 18, t_empty)))
         )),
    ("Labeled_Hoare_Examples.multiply_by_add",
     "{a = ?A & b = ?B} 
       m := 0;
       s := 0; WHILE m ~= a INV {s = m * b & a = ?A & b = ?B}  VAR {0} 
                DO s := s + b; m := m + 1 OD 
       {s = ?A * ?B}",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 26,
                 template_app
                  (template_hole 25,
                   template_app (template_hole 24, t_empty))),
               template_app
                (template_app
                  (template_hole 19,
                   template_app
                    (template_hole 18,
                     template_app (template_hole 17, t_empty))),
                 template_app
                  (template_app
                    (template_hole 19,
                     template_app
                      (template_hole 18,
                       template_app (template_hole 17, t_empty))),
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app
                        (template_hole 25,
                         template_app (template_hole 24, t_empty))),
                     template_app
                      (template_app
                        (template_hole 19,
                         template_app
                          (template_hole 18,
                           template_app (template_hole 17, t_empty))),
                       template_app
                        (template_hole 18,
                         template_app (template_hole 17, t_empty))))))),
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_hole 25,
                         template_app (template_hole 24, t_empty))),
                     template_app (template_hole 2, t_empty)),
                   t_empty)))),
           template_app
            (template_hole 25, template_app (template_hole 24, t_empty)))
         )),
    ("Labeled_Hoare_Examples.power_by_mult",
     "{a = ?A & b = ?B} 
       c := 1;
       WHILE b ~= 0 INV {?A ^ ?B = c * a ^ b}  VAR {0} 
        DO WHILE b mod 2 = 0 INV {?A ^ ?B = c * a ^ b}  VAR {0} 
            DO a := a * a; b := b div 2 OD;
           c := c * a; b := b - 1 
        OD 
       {c = ?A ^ ?B}",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 28,
                 template_app
                  (template_hole 27,
                   template_app (template_hole 26, t_empty))),
               template_app
                (template_app
                  (template_hole 22,
                   template_app
                    (template_hole 21,
                     template_app (template_hole 20, t_empty))),
                 template_app
                  (template_app
                    (template_hole 15,
                     template_app
                      (template_hole 27,
                       template_app (template_hole 26, t_empty))),
                   template_app
                    (template_app
                      (template_hole 22,
                       template_app
                        (template_app
                          (template_hole 15,
                           template_app
                            (template_hole 27,
                             template_app (template_hole 26, t_empty))),
                         template_app
                          (template_app
                            (template_hole 22,
                             template_app
                              (template_hole 21,
                               template_app (template_hole 20, t_empty))),
                           template_app
                            (template_hole 21,
                             template_app (template_hole 20, t_empty))))),
                     template_app
                      (template_app
                        (template_hole 22,
                         template_app
                          (template_hole 21,
                           template_app (template_hole 20, t_empty))),
                       template_app
                        (template_hole 21,
                         template_app (template_hole 20, t_empty))))))),
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_app
                (template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_hole 27,
                       template_app (template_hole 26, t_empty))),
                   template_app (template_hole 1, t_empty)),
                 t_empty))),
           template_app
            (template_hole 27, template_app (template_hole 26, t_empty)))
         )),
    ("Labeled_Hoare_Examples.gcd_scm",
     "{0 < ?A & 0 < ?B & a = ?A & b = ?B & x = ?B & y = ?A} 
       WHILE a ~= b
        INV {0 < a &
             0 < b &
             Arith2.gcd ?A ?B = Arith2.gcd a b &
             2 * ?A * ?B = a * x + b * y} 
        VAR {0} 
        DO IF a < b THEN b := b - a; x := x + y  ELSE a := a - b; y := y + x
            FI 
        OD 
       {a = Arith2.gcd ?A ?B & 2 * ?A * ?B = a * (x + y)}",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 33,
                 template_app
                  (template_hole 32,
                   template_app (template_hole 31, t_empty))),
               template_app
                (template_app
                  (template_hole 24,
                   template_app
                    (template_hole 32,
                     template_app (template_hole 31, t_empty))),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 22,
                       template_app
                        (template_hole 32,
                         template_app (template_hole 31, t_empty))),
                     template_app
                      (template_app
                        (template_hole 21,
                         template_app
                          (template_hole 20,
                           template_app (template_hole 19, t_empty))),
                       template_app
                        (template_hole 20,
                         template_app (template_hole 19, t_empty)))),
                   template_app
                    (template_app
                      (template_hole 21,
                       template_app
                        (template_hole 20,
                         template_app (template_hole 19, t_empty))),
                     template_app
                      (template_hole 20,
                       template_app (template_hole 19, t_empty)))))),
             template_app
              (template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_hole 32,
                     template_app (template_hole 31, t_empty))),
                 template_app (template_hole 5, t_empty)),
               t_empty)),
           template_app
            (template_hole 32, template_app (template_hole 31, t_empty)))
         )),
    ("Labeled_Hoare_Examples.Partition",
     "{0 < length A} 
       l := 0;
       u := length A - Suc 0;
       WHILE l <= u
        INV {(ALL k<l. A ! k <= ?pivot) &
             (ALL k. u < k & k < length A --> ?pivot <= A ! k) &
             u < length A & l <= length A} 
        VAR {0} 
        DO WHILE l < length A & A ! l <= ?pivot
            INV {(ALL k<l. A ! k <= ?pivot) &
                 (ALL k. u < k & k < length A --> ?pivot <= A ! k) &
                 u < length A & l <= length A} 
            VAR {0} 
            DO l := l + 1 OD;
           WHILE 0 < u & ?pivot <= A ! u
            INV {(ALL k<l. A ! k <= ?pivot) &
                 (ALL k. u < k & k < length A --> ?pivot <= A ! k) &
                 u < length A & l <= length A} 
            VAR {0} 
            DO u := u - 1 OD;
           IF l <= u THEN A := A[l := A ! u, u := A ! l]  ELSE SKIP FI 
        OD 
       {(ALL k<u. A ! k <= ?pivot) &
        (ALL k. u < k & k < l --> A ! k = ?pivot) &
        (ALL k. l < k & k < length A --> ?pivot <= A ! k)}",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 33,
                 template_app
                  (template_hole 32,
                   template_app (template_hole 31, t_empty))),
               template_app
                (template_app
                  (template_hole 26,
                   template_app
                    (template_hole 25,
                     template_app (template_hole 24, t_empty))),
                 template_app
                  (template_app
                    (template_hole 26,
                     template_app
                      (template_hole 25,
                       template_app (template_hole 24, t_empty))),
                   template_app
                    (template_app
                      (template_hole 18,
                       template_app
                        (template_hole 32,
                         template_app (template_hole 31, t_empty))),
                     template_app
                      (template_app
                        (template_hole 26,
                         template_app
                          (template_app
                            (template_hole 18,
                             template_app
                              (template_hole 32,
                               template_app (template_hole 31, t_empty))),
                           template_app
                            (template_hole 25,
                             template_app (template_hole 24, t_empty)))),
                       template_app
                        (template_app
                          (template_hole 26,
                           template_app
                            (template_app
                              (template_hole 18,
                               template_app
                                (template_hole 32,
                                 template_app (template_hole 31, t_empty))),
                             template_app
                              (template_hole 25,
                               template_app (template_hole 24, t_empty)))),
                         template_app
                          (template_app
                            (template_app
                              (template_hole 11,
                               template_app
                                (template_hole 32,
                                 template_app (template_hole 31, t_empty))),
                             template_app
                              (template_hole 25,
                               template_app (template_hole 24, t_empty))),
                           template_app
                            (template_hole 25, template_hole 9)))))))),
             template_app
              (template_app (template_hole 8, template_hole 7),
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_hole 32,
                         template_app (template_hole 31, t_empty))),
                     template_app (template_hole 3, t_empty)),
                   t_empty)))),
           template_app
            (template_hole 32, template_app (template_hole 31, t_empty)))
         ))]:
   (string * thm * template) list
### theory "Draft.Labeled_Hoare_ExamplesMoreTemplates"
### 0.357s elapsed time, 0.482s cpu time, 0.052s GC time
val it = (): unit
