Loading theory "Draft.Case_Labeling" (required by "Draft.ConditionalsMoreTemplates" via "Draft.Conditionals")
Loading theory "HOL-Eisbach.Eisbach" (required by "Draft.ConditionalsMoreTemplates" via "Draft.Conditionals")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ConditionalsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ConditionalsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
signature PARSE_TOOLS =
  sig
    val is_real_val: ('a, 'b) parse_val -> bool
    val name_term: (term, string) parse_val parser
    val parse_term_val: 'a parser -> (term, 'a) parse_val parser
    val parse_thm_val: 'a parser -> (thm, 'a) parse_val parser
    datatype ('a, 'b) parse_val
    = Parse_Val of 'b * ('a -> unit) | Real_Val of 'a
    val parse_val_cases:
       ('a -> 'b) -> ('b, 'a) parse_val -> 'b * ('b -> unit)
    val the_parse_fun: ('a, 'b) parse_val -> 'a -> unit
    val the_parse_val: ('a, 'b) parse_val -> 'b
    val the_real_val: ('a, 'b) parse_val -> 'a
  end
structure Parse_Tools: PARSE_TOOLS
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
locale Labeling_Syntax
signature METHOD_CLOSURE =
  sig
    val apply_method:
       Proof.context ->
         string ->
           term list ->
             thm list list ->
               (Proof.context -> Method.method) list ->
                 Proof.context -> thm list -> context_tactic
    val method:
       binding ->
         (binding * typ option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
    val method_cmd:
       binding ->
         (binding * string option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
  end
structure Method_Closure: METHOD_CLOSURE
### theory "HOL-Library.Function_Algebras"
### 0.122s elapsed time, 0.470s cpu time, 0.045s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ConditionalsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
signature PRINT_NESTED_CASES =
  sig
    val pretty_cases: Proof.context -> Pretty.T
    val print_cases: Proof.context -> unit
  end
structure Print_Nested_Cases: PRINT_NESTED_CASES
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
infix 1 THEN_CONTEXT
infix 1 THEN_ALL_NEW_FWD
signature BASIC_UTIL =
  sig
    val INTERVAL_FWD: (int -> tactic) -> int -> int -> tactic
    val REPEAT_ALL_NEW_FWD: (int -> tactic) -> int -> tactic
    val THEN_ALL_NEW_FWD: (int -> tactic) * (int -> tactic) -> int -> tactic
    val THEN_CONTEXT: tactic * context_tactic -> context_tactic
  end
signature UTIL =
  sig
    val INTERVAL_FWD: (int -> tactic) -> int -> int -> tactic
    val REPEAT_ALL_NEW_FWD: (int -> tactic) -> int -> tactic
    val SIMPLE_METHOD_CASES: context_tactic -> Method.method
    val THEN_ALL_NEW_FWD: (int -> tactic) * (int -> tactic) -> int -> tactic
    val THEN_CONTEXT: tactic * context_tactic -> context_tactic
    val appair: ('a -> 'b) -> ('c -> 'd) -> 'a * 'c -> 'b * 'd
    val dest_bool: term -> bool
    val dest_option: term -> term option
    val dest_pair: term -> term * term
    val dest_tuple: term -> term list
    val fst_ord: ('a * 'a -> order) -> ('a * 'b) * ('a * 'b) -> order
    val infst: ('a -> 'b -> 'c * 'b) -> 'a * 'd -> 'b -> ('c * 'd) * 'b
    val none_inf_ord: ('a * 'a -> order) -> 'a option * 'a option -> order
    val snd_ord: ('a * 'a -> order) -> ('b * 'a) * ('b * 'a) -> order
  end
structure Util: UTIL
structure Basic_Util: BASIC_UTIL
val INTERVAL_FWD = fn: (int -> tactic) -> int -> int -> tactic
val THEN_CONTEXT = fn: tactic * context_tactic -> context_tactic
val REPEAT_ALL_NEW_FWD = fn: (int -> tactic) -> int -> tactic
val THEN_ALL_NEW_FWD = fn:
   (int -> tactic) * (int -> tactic) -> int -> tactic
structure Eisbach_Rule_Insts: sig end
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.222s elapsed time, 0.877s cpu time, 0.081s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ConditionalsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### ML warning (line 170 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 187 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 309 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
signature MATCH_METHOD =
  sig
    val focus_params: Proof.context -> term list
    val focus_schematics: Proof.context -> Envir.tenv
  end
structure Match_Method: MATCH_METHOD
val method_evaluate = fn: Method.text -> Proof.context -> thm list -> tactic
signature CASIFY =
  sig
    val SPLIT_subst_tac: Proof.context -> int -> tactic
    val casify_method_setup:
       options -> (Proof.context -> Method.method) context_parser
    val casify_options: options -> options parser
    val casify_tac: options -> context_tactic
    val extract_cases_tac: context_tactic
    val hyp_subst_tac: Proof.context -> int -> tactic
    datatype options
    =
         Options of
             {protect_subgoals: bool,
              simp_all_cases: bool, split_right_only: bool}
    val prepare_labels_tac: Proof.context -> int -> tactic
    val split_bind_all_tac:
       {right_only: bool, simp_all_cases: bool} ->
         Proof.context -> int -> tactic
  end
structure Casify: CASIFY
val casify_defs =
   Options
    {protect_subgoals = false, simp_all_cases = true, split_right_only =
     true}:
   Casify.options
### theory "Draft.Case_Labeling"
### 0.465s elapsed time, 1.816s cpu time, 0.165s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ConditionalsMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.464s elapsed time, 1.814s cpu time, 0.165s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ConditionalsMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Eisbach.Eisbach"
### 0.473s elapsed time, 1.850s cpu time, 0.165s GC time
Loading theory "Draft.Conditionals" (required by "Draft.ConditionalsMoreTemplates")
consts
  shift :: "'a list => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Proofs for coinductive predicate(s) "streamsp"
### theory "Draft.Conditionals"
### 0.419s elapsed time, 1.692s cpu time, 0.142s GC time
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.947s elapsed time, 3.292s cpu time, 0.788s GC time
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.066s elapsed time, 3.547s cpu time, 0.829s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.840s elapsed time, 4.731s cpu time, 0.928s GC time
Loading theory "Draft.Templates" (required by "Draft.ConditionalsMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.048s elapsed time, 0.063s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ConditionalsMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.444s elapsed time, 0.481s cpu time, 0.044s GC time
Loading theory "Draft.ConditionalsMoreTemplates"
val templateLemmas =
   [("Conditionals.DC_conj",
     "[| Case_Labeling.CTXT ?inp ?ct ?outp' ?a;
         Case_Labeling.CTXT ?outp' ?ct ?outp ?b |]
      ==> Case_Labeling.CTXT ?inp ?ct ?outp (?a & ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 4),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 5),
                 template_var 4),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Conditionals.DC_final",
     "Case_Labeling.VC ((''g'', ?inp, []) # ?ct) ?a ==>
      Case_Labeling.CTXT ?inp ?ct (Suc ?inp) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app
                       (template_hole 9,
                        template_app
                         (template_app
                           (template_hole 8,
                            template_app
                             (template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app (template_hole 7, template_hole 6), template_hole 6),
  template_hole 6),
template_hole 5),
                                    template_hole 5),
                                  template_hole 6),
                                template_hole 6),
                              template_hole 5)),
                          template_hole 4)),
                      template_app
                       (template_app (template_hole 3, template_var 2),
                        template_hole 2))),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_app (template_hole 0, template_var 2)),
             template_var 0)
           ))),
    ("Conditionals.DC_if",
     "[| Case_Labeling.HIER ((''then'', ?inp, []) # ?ct) ?a ==>
         Case_Labeling.CTXT (Suc ?inp) ((''then'', ?inp, []) # ?ct) ?outp'
          ?b;
         Case_Labeling.HIER ((''else'', ?outp', []) # ?ct) (~ ?a) ==>
         Case_Labeling.CTXT (Suc ?outp') ((''else'', ?outp', []) # ?ct)
          ?outp ?c |]
      ==> Case_Labeling.CTXT ?inp ?ct ?outp (if ?a then ?b else ?c)",
     template_implication
      ([template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_app
                      (template_hole 12,
                       template_app
                        (template_app
                          (template_hole 11,
                           template_app
                            (template_app
                              (template_hole 10,
                               template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app (template_hole 9, template_hole 8), template_hole 8),
     template_hole 7),
   template_hole 8),
 template_hole 7),
                                     template_hole 7),
                                   template_hole 7),
                                 template_hole 8)),
                             template_app
                              (template_app
                                (template_hole 10,
                                 template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app (template_hole 9, template_hole 8), template_hole 8),
       template_hole 8),
     template_hole 7),
   template_hole 8),
 template_hole 7),
                                     template_hole 7),
                                   template_hole 8)),
                               template_app
                                (template_app
                                  (template_hole 10,
                                   template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app (template_hole 9, template_hole 7),
           template_hole 8),
         template_hole 7),
       template_hole 8),
     template_hole 8),
   template_hole 7),
 template_hole 7),
                                     template_hole 8)),
                                 template_app
                                  (template_app
                                    (template_hole 10,
                                     template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 9, template_hole 8),
             template_hole 7),
           template_hole 7),
         template_hole 7),
       template_hole 8),
     template_hole 7),
   template_hole 7),
 template_hole 8)),
                                   template_hole 6))))),
                         template_app
                          (template_app (template_hole 5, template_var 6),
                           template_hole 4))),
                     template_var 5)),
                 template_var 4)
               )],
          template_predicate
           (
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 3,
                      template_app (template_hole 2, template_var 6)),
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app
                         (template_app
                           (template_hole 11,
                            template_app
                             (template_app
                               (template_hole 10,
                                template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app (template_hole 9, template_hole 8), template_hole 8),
      template_hole 7),
    template_hole 8),
  template_hole 7),
template_hole 7),
                                    template_hole 7),
                                  template_hole 8)),
                              template_app
                               (template_app
                                 (template_hole 10,
                                  template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app
         (template_app (template_hole 9, template_hole 8), template_hole 8),
        template_hole 8),
      template_hole 7),
    template_hole 8),
  template_hole 7),
template_hole 7),
                                    template_hole 8)),
                                template_app
                                 (template_app
                                   (template_hole 10,
                                    template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app
         (template_app
           (template_app (template_hole 9, template_hole 7),
            template_hole 8),
          template_hole 7),
        template_hole 8),
      template_hole 8),
    template_hole 7),
  template_hole 7),
template_hole 8)),
                                  template_app
                                   (template_app
                                     (template_hole 10,
template_app
 (template_app
   (template_app
     (template_app
       (template_app
         (template_app
           (template_app
             (template_app (template_hole 9, template_hole 8),
              template_hole 7),
            template_hole 7),
          template_hole 7),
        template_hole 8),
      template_hole 7),
    template_hole 7),
  template_hole 8)),
                                    template_hole 6))))),
                          template_app
                           (template_app (template_hole 5, template_var 6),
                            template_hole 4))),
                      template_var 5)),
                  template_var 3),
                template_var 2)
              )),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_app
                      (template_hole 12,
                       template_app
                        (template_app
                          (template_hole 11,
                           template_app
                            (template_app
                              (template_hole 10,
                               template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app (template_hole 9, template_hole 7), template_hole 8),
     template_hole 7),
   template_hole 8),
 template_hole 8),
                                     template_hole 7),
                                   template_hole 7),
                                 template_hole 8)),
                             template_app
                              (template_app
                                (template_hole 10,
                                 template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app (template_hole 9, template_hole 8), template_hole 8),
       template_hole 7),
     template_hole 7),
   template_hole 8),
 template_hole 7),
                                     template_hole 7),
                                   template_hole 8)),
                               template_app
                                (template_app
                                  (template_hole 10,
                                   template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app (template_hole 9, template_hole 7),
           template_hole 7),
         template_hole 8),
       template_hole 8),
     template_hole 7),
   template_hole 7),
 template_hole 7),
                                     template_hole 8)),
                                 template_app
                                  (template_app
                                    (template_hole 10,
                                     template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 9, template_hole 7),
             template_hole 8),
           template_hole 7),
         template_hole 8),
       template_hole 8),
     template_hole 7),
   template_hole 7),
 template_hole 8)),
                                   template_hole 6))))),
                         template_app
                          (template_app (template_hole 5, template_var 3),
                           template_hole 4))),
                     template_var 5)),
                 template_app (template_hole 1, template_var 4))
               )],
          template_predicate
           (
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 3,
                      template_app (template_hole 2, template_var 3)),
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app
                         (template_app
                           (template_hole 11,
                            template_app
                             (template_app
                               (template_hole 10,
                                template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app (template_hole 9, template_hole 7), template_hole 8),
      template_hole 7),
    template_hole 8),
  template_hole 8),
template_hole 7),
                                    template_hole 7),
                                  template_hole 8)),
                              template_app
                               (template_app
                                 (template_hole 10,
                                  template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app
         (template_app (template_hole 9, template_hole 8), template_hole 8),
        template_hole 7),
      template_hole 7),
    template_hole 8),
  template_hole 7),
template_hole 7),
                                    template_hole 8)),
                                template_app
                                 (template_app
                                   (template_hole 10,
                                    template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app
         (template_app
           (template_app (template_hole 9, template_hole 7),
            template_hole 7),
          template_hole 8),
        template_hole 8),
      template_hole 7),
    template_hole 7),
  template_hole 7),
template_hole 8)),
                                  template_app
                                   (template_app
                                     (template_hole 10,
template_app
 (template_app
   (template_app
     (template_app
       (template_app
         (template_app
           (template_app
             (template_app (template_hole 9, template_hole 7),
              template_hole 8),
            template_hole 7),
          template_hole 8),
        template_hole 8),
      template_hole 7),
    template_hole 7),
  template_hole 8)),
                                    template_hole 6))))),
                          template_app
                           (template_app (template_hole 5, template_var 3),
                            template_hole 4))),
                      template_var 5)),
                  template_var 1),
                template_var 0)
              ))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 6),
                 template_var 5),
               template_var 1),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 2),
               template_var 0))
           )))]:
   (string * thm * template) list
### theory "Draft.ConditionalsMoreTemplates"
### 0.294s elapsed time, 0.453s cpu time, 0.060s GC time
val it = (): unit
