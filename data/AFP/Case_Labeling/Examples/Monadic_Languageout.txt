Loading theory "Draft.Case_Labeling" (required by "Draft.Monadic_LanguageMoreTemplates" via "Draft.Monadic_Language")
Loading theory "HOL-Eisbach.Eisbach" (required by "Draft.Monadic_LanguageMoreTemplates" via "Draft.Monadic_Language")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Monadic_LanguageMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Monadic_LanguageMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
signature PARSE_TOOLS =
  sig
    val is_real_val: ('a, 'b) parse_val -> bool
    val name_term: (term, string) parse_val parser
    val parse_term_val: 'a parser -> (term, 'a) parse_val parser
    val parse_thm_val: 'a parser -> (thm, 'a) parse_val parser
    datatype ('a, 'b) parse_val
    = Parse_Val of 'b * ('a -> unit) | Real_Val of 'a
    val parse_val_cases:
       ('a -> 'b) -> ('b, 'a) parse_val -> 'b * ('b -> unit)
    val the_parse_fun: ('a, 'b) parse_val -> 'a -> unit
    val the_parse_val: ('a, 'b) parse_val -> 'b
    val the_real_val: ('a, 'b) parse_val -> 'a
  end
structure Parse_Tools: PARSE_TOOLS
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
locale Labeling_Syntax
signature METHOD_CLOSURE =
  sig
    val apply_method:
       Proof.context ->
         string ->
           term list ->
             thm list list ->
               (Proof.context -> Method.method) list ->
                 Proof.context -> thm list -> context_tactic
    val method:
       binding ->
         (binding * typ option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
    val method_cmd:
       binding ->
         (binding * string option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
  end
structure Method_Closure: METHOD_CLOSURE
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
signature PRINT_NESTED_CASES =
  sig
    val pretty_cases: Proof.context -> Pretty.T
    val print_cases: Proof.context -> unit
  end
structure Print_Nested_Cases: PRINT_NESTED_CASES
### theory "HOL-Library.Function_Algebras"
### 0.128s elapsed time, 0.480s cpu time, 0.036s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Monadic_LanguageMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
infix 1 THEN_CONTEXT
infix 1 THEN_ALL_NEW_FWD
signature BASIC_UTIL =
  sig
    val INTERVAL_FWD: (int -> tactic) -> int -> int -> tactic
    val REPEAT_ALL_NEW_FWD: (int -> tactic) -> int -> tactic
    val THEN_ALL_NEW_FWD: (int -> tactic) * (int -> tactic) -> int -> tactic
    val THEN_CONTEXT: tactic * context_tactic -> context_tactic
  end
signature UTIL =
  sig
    val INTERVAL_FWD: (int -> tactic) -> int -> int -> tactic
    val REPEAT_ALL_NEW_FWD: (int -> tactic) -> int -> tactic
    val SIMPLE_METHOD_CASES: context_tactic -> Method.method
    val THEN_ALL_NEW_FWD: (int -> tactic) * (int -> tactic) -> int -> tactic
    val THEN_CONTEXT: tactic * context_tactic -> context_tactic
    val appair: ('a -> 'b) -> ('c -> 'd) -> 'a * 'c -> 'b * 'd
    val dest_bool: term -> bool
    val dest_option: term -> term option
    val dest_pair: term -> term * term
    val dest_tuple: term -> term list
    val fst_ord: ('a * 'a -> order) -> ('a * 'b) * ('a * 'b) -> order
    val infst: ('a -> 'b -> 'c * 'b) -> 'a * 'd -> 'b -> ('c * 'd) * 'b
    val none_inf_ord: ('a * 'a -> order) -> 'a option * 'a option -> order
    val snd_ord: ('a * 'a -> order) -> ('b * 'a) * ('b * 'a) -> order
  end
structure Util: UTIL
structure Basic_Util: BASIC_UTIL
val INTERVAL_FWD = fn: (int -> tactic) -> int -> int -> tactic
val THEN_CONTEXT = fn: tactic * context_tactic -> context_tactic
val REPEAT_ALL_NEW_FWD = fn: (int -> tactic) -> int -> tactic
val THEN_ALL_NEW_FWD = fn:
   (int -> tactic) * (int -> tactic) -> int -> tactic
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
structure Eisbach_Rule_Insts: sig end
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
signature CASIFY =
  sig
    val SPLIT_subst_tac: Proof.context -> int -> tactic
    val casify_method_setup:
       options -> (Proof.context -> Method.method) context_parser
    val casify_options: options -> options parser
    val casify_tac: options -> context_tactic
    val extract_cases_tac: context_tactic
    val hyp_subst_tac: Proof.context -> int -> tactic
    datatype options
    =
         Options of
             {protect_subgoals: bool,
              simp_all_cases: bool, split_right_only: bool}
    val prepare_labels_tac: Proof.context -> int -> tactic
    val split_bind_all_tac:
       {right_only: bool, simp_all_cases: bool} ->
         Proof.context -> int -> tactic
  end
structure Casify: CASIFY
val casify_defs =
   Options
    {protect_subgoals = false, simp_all_cases = true, split_right_only =
     true}:
   Casify.options
### theory "Draft.Case_Labeling"
### 0.322s elapsed time, 1.248s cpu time, 0.097s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Monadic_LanguageMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.214s elapsed time, 0.844s cpu time, 0.061s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Monadic_LanguageMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.353s elapsed time, 1.368s cpu time, 0.097s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Monadic_LanguageMoreTemplates" via "Draft.ExtrEqs")
### ML warning (line 170 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 187 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 309 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
signature MATCH_METHOD =
  sig
    val focus_params: Proof.context -> term list
    val focus_schematics: Proof.context -> Envir.tenv
  end
structure Match_Method: MATCH_METHOD
val method_evaluate = fn: Method.text -> Proof.context -> thm list -> tactic
### theory "HOL-Eisbach.Eisbach"
### 0.453s elapsed time, 1.753s cpu time, 0.156s GC time
Loading theory "Draft.Monadic_Language" (required by "Draft.Monadic_LanguageMoreTemplates")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
infix 1 THEN_CONTEXT
infix 1 THEN_ALL_NEW_FWD
signature BASIC_UTIL =
  sig
    val INTERVAL_FWD: (int -> tactic) -> int -> int -> tactic
    val REPEAT_ALL_NEW_FWD: (int -> tactic) -> int -> tactic
    val THEN_ALL_NEW_FWD: (int -> tactic) * (int -> tactic) -> int -> tactic
    val THEN_CONTEXT: tactic * context_tactic -> context_tactic
  end
signature UTIL =
  sig
    val INTERVAL_FWD: (int -> tactic) -> int -> int -> tactic
    val REPEAT_ALL_NEW_FWD: (int -> tactic) -> int -> tactic
    val SIMPLE_METHOD_CASES: context_tactic -> Method.method
    val THEN_ALL_NEW_FWD: (int -> tactic) * (int -> tactic) -> int -> tactic
    val THEN_CONTEXT: tactic * context_tactic -> context_tactic
    val appair: ('a -> 'b) -> ('c -> 'd) -> 'a * 'c -> 'b * 'd
    val dest_bool: term -> bool
    val dest_option: term -> term option
    val dest_pair: term -> term * term
    val dest_tuple: term -> term list
    val fst_ord: ('a * 'a -> order) -> ('a * 'b) * ('a * 'b) -> order
    val infst: ('a -> 'b -> 'c * 'b) -> 'a * 'd -> 'b -> ('c * 'd) * 'b
    val none_inf_ord: ('a * 'a -> order) -> 'a option * 'a option -> order
    val snd_ord: ('a * 'a -> order) -> ('b * 'a) * ('b * 'a) -> order
  end
structure Util: UTIL
structure Basic_Util: BASIC_UTIL
val INTERVAL_FWD = fn: (int -> tactic) -> int -> int -> tactic
val THEN_CONTEXT = fn: tactic * context_tactic -> context_tactic
val REPEAT_ALL_NEW_FWD = fn: (int -> tactic) -> int -> tactic
val THEN_ALL_NEW_FWD = fn:
   (int -> tactic) * (int -> tactic) -> int -> tactic
val vcg_tac = fn: string -> string -> Proof.context -> int -> tactic
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.984s elapsed time, 3.775s cpu time, 0.752s GC time
Found termination order: "size <*mlex*> {}"
### Introduced fixed type variable(s): 'a, 'b, 'c, 'd in "B" or "I" or "Q" or "R" or "b" or "c" or "c1" or "c2" or "v" or "x"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.128s elapsed time, 4.203s cpu time, 0.788s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
cases:
### theory "Draft.Monadic_Language"
### 1.397s elapsed time, 4.600s cpu time, 0.780s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.915s elapsed time, 5.531s cpu time, 0.885s GC time
Loading theory "Draft.Templates" (required by "Draft.Monadic_LanguageMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.049s elapsed time, 0.066s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Monadic_LanguageMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.486s elapsed time, 0.539s cpu time, 0.065s GC time
Loading theory "Draft.Monadic_LanguageMoreTemplates"
val templateLemmas =
   [("Monadic_Language.return", "valid (?Q ?x) (return ?x) ?Q",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_var 1, template_var 0)),
             template_app (template_hole 0, template_var 0)),
           template_var 1)
         )),
    ("Monadic_Language.L_return",
     "Case_Labeling.CTXT ?inp ?ct (Suc ?inp)
       (valid (?P ?x) (return ?x) ?P)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_app (template_hole 2, template_var 3)),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_var 1, template_var 0)),
               template_app (template_hole 0, template_var 0)),
             template_var 1))
         )),
    ("Monadic_Language.vcg_elim",
     "[| ?P & ?Q; [| ?P; ?Q |] ==> ?R |] ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate (template_var 2)],
          template_implication
           ([template_predicate (template_var 1)],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Monadic_Language.conseq",
     "[| valid ?P' ?c ?Q; ?P ==> ?P' |] ==> valid ?P ?c ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate (template_var 0)],
          template_predicate (template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("Monadic_Language.dvd_div",
     "[| ?a dvd ?b; ?c dvd ?b; coprime ?a ?c |] ==> ?a dvd ?b div ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Monadic_Language.cond",
     "[| valid ?P1.0 ?c1.0 ?Q; valid ?P2.0 ?c2.0 ?Q |]
      ==> valid (if ?b then ?P1.0 else ?P2.0) (if ?b then ?c1.0 else ?c2.0)
           ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 5),
                   template_var 2)),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 4),
                 template_var 1)),
             template_var 3)
           ))),
    ("Monadic_Language.bind",
     "[| !!x. valid (?R x) (?c2.0 x) ?Q; valid ?P ?c1.0 ?R |]
      ==> valid ?P (?c1.0 |>> ?c2.0) ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3)),
             template_var 2)
           ))),
    ("Monadic_Language.L_assm_conjE",
     "[| Case_Labeling.BIND ?name ?inp (?P & ?Q);
         [| Case_Labeling.BIND ?name ?inp ?P;
            Case_Labeling.BIND ?name ?inp ?Q |]
         ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 4),
                     template_var 3),
                   template_var 1)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Monadic_Language.while",
     "[| !!x. valid (?I x & ?b x) (?c x) ?I; !!x. ?I x & ~ ?b x ==> ?Q x |]
      ==> valid (?I ?x) (while ?b ?I ?c ?x) ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_var 4, template_var 0)),
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 4),
                   template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("Monadic_Language.case_prod",
     "(!!x y. ?v = (x, y) ==> valid (?P x y) (?B x y) ?Q) ==>
      valid (case ?v of (x, y) => ?P x y) (case ?v of (x, y) => ?B x y) ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, t_empty),
                   template_var 3)),
               template_app
                (template_app (template_hole 0, t_empty), template_var 3)),
             template_var 0)
           ))),
    ("Monadic_Language.L_case_prod",
     "(!!x y.
          ?v = (x, y) ==>
          Case_Labeling.CTXT ?inp ?ct ?outp
           (valid (?P x y) (?B x y) ?Q)) ==>
      Case_Labeling.CTXT ?inp ?ct ?outp
       (valid (case ?v of (x, y) => ?P x y) (case ?v of (x, y) => ?B x y)
         ?Q)",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 5),
                 template_var 4),
               template_var 3),
             template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, t_empty),
                     template_var 6)),
                 template_app
                  (template_app (template_hole 0, t_empty),
                   template_var 6)),
               template_var 0))
           ))),
    ("Monadic_Language.add",
     "valid True
       (while (%(r, j). j < ?b) (%(r, j). j <= ?b & r = ?a + j)
         (%(r, j). return (r + 1, j + 1)) (?a, 0) |>>
        (%(r, uu_). return r))
       (%r. r = ?a + ?b)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 16, template_hole 15),
             template_app
              (template_app
                (template_hole 14,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_hole 13,
                         template_app (template_hole 12, t_empty)),
                       template_app (template_hole 12, t_empty)),
                     template_app (template_hole 6, t_empty)),
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_hole 2))),
               template_app (template_hole 1, t_empty))),
           t_empty)
         )),
    ("Monadic_Language.divides",
     "valid (0 < ?a)
       (return ?a |>>
        while even
         (%n. 0 < n & n dvd ?a & (ALL m. odd m & m dvd ?a --> m dvd n))
         (%n. return (n div 2)))
       (%r. odd r & r dvd ?a & (ALL m. odd m & m dvd ?a --> m <= r))",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 15,
               template_app
                (template_app (template_hole 14, template_hole 13),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 12,
                 template_app (template_hole 11, template_var 0)),
               t_empty)),
           t_empty)
         )),
    ("Monadic_Language.L_bind",
     "[| !!x. Case_Labeling.CTXT (Suc ?outp')
               ((''bind'', ?outp', [Case_Labeling.VAR x]) # ?ct) ?outp
               (valid (?R x) (?c2.0 x) ?Q);
         Case_Labeling.CTXT ?inp ?ct ?outp' (valid ?P ?c1.0 ?R) |]
      ==> Case_Labeling.CTXT ?inp ?ct ?outp
           (valid ?P (?c1.0 |>> ?c2.0) ?Q)",
     template_implication
      ([template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 15, template_var 2),
                  template_var 7),
                template_var 8),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0),
                template_var 5))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 15, template_var 2),
                 template_var 7),
               template_var 6),
             template_app
              (template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 4)),
               template_var 3))
           ))),
    ("Monadic_Language.mult",
     "valid True
       (while (%(r, i). i < ?a) (%(r, i). i <= ?a & r = i * ?b)
         (%(r, i).
             while (%(r, j). j < ?b)
              (%(r, j). i < ?a & j <= ?b & r = i * ?b + j)
              (%(r, j). return (r + 1, j + 1)) (r, 0) |>>
             (%(r, uu_). return (r, i + 1)))
         (0, 0) |>>
        (%(r, uu_). return r))
       (%r. r = ?a * ?b)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 18, template_hole 17),
             template_app
              (template_app
                (template_hole 16,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_hole 15,
                         template_app (template_hole 14, t_empty)),
                       template_app (template_hole 14, t_empty)),
                     template_app (template_hole 8, t_empty)),
                   template_app
                    (template_app (template_hole 4, template_hole 2),
                     template_hole 2))),
               template_app (template_hole 1, t_empty))),
           t_empty)
         )),
    ("Monadic_Language.L_conseq",
     "[| Case_Labeling.CTXT (Suc ?inp) ?ct ?outp (valid ?P' ?c ?Q);
         ?P ==> Case_Labeling.VC ((''conseq'', ?inp, []) # ?ct) ?P' |]
      ==> Case_Labeling.CTXT ?inp ?ct ?outp (valid ?P ?c ?Q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 12,
                    template_app (template_hole 11, template_var 6)),
                  template_var 5),
                template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 10, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate (template_var 0)],
          template_predicate
           (
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app
                     (template_hole 8,
                      template_app
                       (template_app
                         (template_hole 7,
                          template_app
                           (template_app
                             (template_hole 6,
                              template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app (template_hole 5, template_hole 4), template_hole 4),
    template_hole 3),
  template_hole 3),
template_hole 3),
                                    template_hole 4),
                                  template_hole 4),
                                template_hole 3)),
                            template_app
                             (template_app
                               (template_hole 6,
                                template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app (template_hole 5, template_hole 4), template_hole 4),
      template_hole 4),
    template_hole 4),
  template_hole 3),
template_hole 4),
                                    template_hole 4),
                                  template_hole 3)),
                              template_app
                               (template_app
                                 (template_hole 6,
                                  template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app
         (template_app (template_hole 5, template_hole 3), template_hole 4),
        template_hole 4),
      template_hole 4),
    template_hole 3),
  template_hole 4),
template_hole 4),
                                    template_hole 3)),
                                template_app
                                 (template_app
                                   (template_hole 6,
                                    template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app
         (template_app
           (template_app (template_hole 5, template_hole 4),
            template_hole 4),
          template_hole 3),
        template_hole 3),
      template_hole 4),
    template_hole 4),
  template_hole 4),
template_hole 3)),
                                  template_app
                                   (template_app
                                     (template_hole 6,
template_app
 (template_app
   (template_app
     (template_app
       (template_app
         (template_app
           (template_app
             (template_app (template_hole 5, template_hole 4),
              template_hole 3),
            template_hole 4),
          template_hole 3),
        template_hole 3),
      template_hole 4),
    template_hole 4),
  template_hole 3)),
                                    template_app
                                     (template_app
 (template_hole 6,
  template_app
   (template_app
     (template_app
       (template_app
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 5, template_hole 4),
                template_hole 3),
              template_hole 3),
            template_hole 3),
          template_hole 4),
        template_hole 4),
      template_hole 4),
    template_hole 3)),
template_hole 2))))))),
                        template_app
                         (template_app (template_hole 1, template_var 6),
                          template_hole 0))),
                    template_var 5)),
                template_var 3)
              ))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 12, template_var 6),
                 template_var 5),
               template_var 4),
             template_app
              (template_app
                (template_app (template_hole 10, template_var 0),
                 template_var 2),
               template_var 1))
           ))),
    ("Monadic_Language.L_paths",
     "valid (?path ~= [])
       (while (%(p, r). p ~= [])
         (%(p, r).
             distinct r & hd (r @ p) = hd ?path & last (r @ p) = last ?path)
         (%(p, r).
             return (hd p) |>>
             (%x. if r ~= [] & x = hd r then return []
                  else if x : set r then return (takeWhile (%y. y ~= x) r)
                       else return r |>>
                  (%r'. return (tl p, r' @ [x]))))
         (?path, []) |>>
        (%(uu_, r). return r))
       (%r. distinct r & hd r = hd ?path & last r = last ?path)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 26,
               template_app
                (template_hole 25,
                 template_app
                  (template_app (template_hole 24, template_var 0),
                   template_hole 23))),
             template_app
              (template_app
                (template_hole 22,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_hole 21,
                         template_app (template_hole 20, t_empty)),
                       template_app (template_hole 20, t_empty)),
                     template_app (template_hole 13, t_empty)),
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 23))),
               template_app (template_hole 0, t_empty))),
           t_empty)
         )),
    ("Monadic_Language.L_cond",
     "[| Case_Labeling.CTXT (Suc ?inp)
          ((''then'', ?inp, []) # (''if'', ?inp, []) # ?ct) ?outp
          (valid ?P1.0 ?c1.0 ?Q);
         Case_Labeling.CTXT (Suc ?outp)
          ((''else'', ?outp, []) # (''if'', ?inp, []) # ?ct) ?outp'
          (valid ?P2.0 ?c2.0 ?Q) |]
      ==> Case_Labeling.CTXT ?inp ?ct ?outp'
           (valid
             (if Case_Labeling.BIND ''cond'' ?inp ?b
              then Case_Labeling.BIND ''then'' ?inp ?P1.0
              else Case_Labeling.BIND ''else'' ?inp ?P2.0)
             (if ?b then ?c1.0 else ?c2.0) ?Q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 14,
                    template_app (template_hole 13, template_var 9)),
                  template_app
                   (template_app
                     (template_hole 12,
                      template_app
                       (template_app
                         (template_hole 11,
                          template_app
                           (template_app
                             (template_hole 10,
                              template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app (template_hole 9, template_hole 8), template_hole 8),
    template_hole 7),
  template_hole 8),
template_hole 7),
                                    template_hole 7),
                                  template_hole 7),
                                template_hole 8)),
                            template_app
                             (template_app
                               (template_hole 10,
                                template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app (template_hole 9, template_hole 8), template_hole 8),
      template_hole 8),
    template_hole 7),
  template_hole 8),
template_hole 7),
                                    template_hole 7),
                                  template_hole 8)),
                              template_app
                               (template_app
                                 (template_hole 10,
                                  template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app
         (template_app (template_hole 9, template_hole 7), template_hole 8),
        template_hole 7),
      template_hole 8),
    template_hole 8),
  template_hole 7),
template_hole 7),
                                    template_hole 8)),
                                template_app
                                 (template_app
                                   (template_hole 10,
                                    template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app
         (template_app
           (template_app (template_hole 9, template_hole 8),
            template_hole 7),
          template_hole 7),
        template_hole 7),
      template_hole 8),
    template_hole 7),
  template_hole 7),
template_hole 8)),
                                  template_hole 6))))),
                        template_app
                         (template_app (template_hole 5, template_var 9),
                          template_hole 4))),
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app
                         (template_app
                           (template_hole 11,
                            template_app
                             (template_app
                               (template_hole 10,
                                template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app (template_hole 9, template_hole 7), template_hole 8),
      template_hole 8),
    template_hole 7),
  template_hole 8),
template_hole 7),
                                    template_hole 7),
                                  template_hole 8)),
                              template_app
                               (template_app
                                 (template_hole 10,
                                  template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app
         (template_app (template_hole 9, template_hole 8), template_hole 7),
        template_hole 7),
      template_hole 8),
    template_hole 8),
  template_hole 7),
template_hole 7),
                                    template_hole 8)),
                                template_hole 6))),
                          template_app
                           (template_app (template_hole 5, template_var 9),
                            template_hole 4))),
                      template_var 8))),
                template_var 7),
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 6),
                  template_var 5),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 14,
                    template_app (template_hole 13, template_var 7)),
                  template_app
                   (template_app
                     (template_hole 12,
                      template_app
                       (template_app
                         (template_hole 11,
                          template_app
                           (template_app
                             (template_hole 10,
                              template_app
                               (template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app (template_hole 9, template_hole 7), template_hole 8),
    template_hole 7),
  template_hole 8),
template_hole 8),
                                    template_hole 7),
                                  template_hole 7),
                                template_hole 8)),
                            template_app
                             (template_app
                               (template_hole 10,
                                template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app (template_hole 9, template_hole 8), template_hole 8),
      template_hole 7),
    template_hole 7),
  template_hole 8),
template_hole 7),
                                    template_hole 7),
                                  template_hole 8)),
                              template_app
                               (template_app
                                 (template_hole 10,
                                  template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app
         (template_app (template_hole 9, template_hole 7), template_hole 7),
        template_hole 8),
      template_hole 8),
    template_hole 7),
  template_hole 7),
template_hole 7),
                                    template_hole 8)),
                                template_app
                                 (template_app
                                   (template_hole 10,
                                    template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app
         (template_app
           (template_app (template_hole 9, template_hole 7),
            template_hole 8),
          template_hole 7),
        template_hole 8),
      template_hole 8),
    template_hole 7),
  template_hole 7),
template_hole 8)),
                                  template_hole 6))))),
                        template_app
                         (template_app (template_hole 5, template_var 7),
                          template_hole 4))),
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app
                         (template_app
                           (template_hole 11,
                            template_app
                             (template_app
                               (template_hole 10,
                                template_app
                                 (template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app (template_hole 9, template_hole 7), template_hole 8),
      template_hole 8),
    template_hole 7),
  template_hole 8),
template_hole 7),
                                    template_hole 7),
                                  template_hole 8)),
                              template_app
                               (template_app
                                 (template_hole 10,
                                  template_app
                                   (template_app
                                     (template_app
 (template_app
   (template_app
     (template_app
       (template_app
         (template_app (template_hole 9, template_hole 8), template_hole 7),
        template_hole 7),
      template_hole 8),
    template_hole 8),
  template_hole 7),
template_hole 7),
                                    template_hole 8)),
                                template_hole 6))),
                          template_app
                           (template_app (template_hole 5, template_var 9),
                            template_hole 4))),
                      template_var 8))),
                template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 14, template_var 9),
                 template_var 8),
               template_var 3),
             template_app
              (template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_app
                            (template_app
                              (template_hole 1,
                               template_app
                                (template_app
                                  (template_hole 10,
                                   template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app (template_hole 9, template_hole 7),
           template_hole 7),
         template_hole 8),
       template_hole 8),
     template_hole 8),
   template_hole 7),
 template_hole 7),
                                     template_hole 8)),
                                 template_app
                                  (template_app
                                    (template_hole 10,
                                     template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 9, template_hole 7),
             template_hole 7),
           template_hole 7),
         template_hole 7),
       template_hole 8),
     template_hole 7),
   template_hole 7),
 template_hole 8)),
                                   template_app
                                    (template_app
(template_hole 10,
 template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 9, template_hole 8),
               template_hole 7),
             template_hole 7),
           template_hole 7),
         template_hole 8),
       template_hole 7),
     template_hole 7),
   template_hole 8)),
                                     template_app
(template_app
  (template_hole 10,
   template_app
    (template_app
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 9, template_hole 8),
                 template_hole 8),
               template_hole 7),
             template_hole 8),
           template_hole 8),
         template_hole 7),
       template_hole 7),
     template_hole 8)),
 template_hole 6))))),
                             template_var 9),
                           template_var 0)),
                       template_app
                        (template_app
                          (template_app
                            (template_hole 1,
                             template_app
                              (template_app
                                (template_hole 10,
                                 template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app (template_hole 9, template_hole 8), template_hole 8),
       template_hole 7),
     template_hole 8),
   template_hole 7),
 template_hole 7),
                                     template_hole 7),
                                   template_hole 8)),
                               template_app
                                (template_app
                                  (template_hole 10,
                                   template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app (template_hole 9, template_hole 8),
           template_hole 8),
         template_hole 8),
       template_hole 7),
     template_hole 8),
   template_hole 7),
 template_hole 7),
                                     template_hole 8)),
                                 template_app
                                  (template_app
                                    (template_hole 10,
                                     template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 9, template_hole 7),
             template_hole 8),
           template_hole 7),
         template_hole 8),
       template_hole 8),
     template_hole 7),
   template_hole 7),
 template_hole 8)),
                                   template_app
                                    (template_app
(template_hole 10,
 template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 9, template_hole 8),
               template_hole 7),
             template_hole 7),
           template_hole 7),
         template_hole 8),
       template_hole 7),
     template_hole 7),
   template_hole 8)),
                                     template_hole 6))))),
                           template_var 9),
                         template_var 6)),
                     template_app
                      (template_app
                        (template_app
                          (template_hole 1,
                           template_app
                            (template_app
                              (template_hole 10,
                               template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app (template_hole 9, template_hole 7), template_hole 8),
     template_hole 7),
   template_hole 8),
 template_hole 8),
                                     template_hole 7),
                                   template_hole 7),
                                 template_hole 8)),
                             template_app
                              (template_app
                                (template_hole 10,
                                 template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app (template_hole 9, template_hole 8), template_hole 8),
       template_hole 7),
     template_hole 7),
   template_hole 8),
 template_hole 7),
                                     template_hole 7),
                                   template_hole 8)),
                               template_app
                                (template_app
                                  (template_hole 10,
                                   template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app (template_hole 9, template_hole 7),
           template_hole 7),
         template_hole 8),
       template_hole 8),
     template_hole 7),
   template_hole 7),
 template_hole 7),
                                     template_hole 8)),
                                 template_app
                                  (template_app
                                    (template_hole 10,
                                     template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 9, template_hole 7),
             template_hole 8),
           template_hole 7),
         template_hole 8),
       template_hole 8),
     template_hole 7),
   template_hole 7),
 template_hole 8)),
                                   template_hole 6))))),
                         template_var 9),
                       template_var 2))),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 5),
                   template_var 1)),
               template_var 4))
           ))),
    ("Monadic_Language.L_while",
     "[| !!x. Case_Labeling.CTXT (Suc ?inp)
               ((''while'', ?inp, [Case_Labeling.VAR x]) # ?ct) ?outp'
               (valid
                 (Case_Labeling.BIND ''inv_pre'' ?inp (?I x) &
                  Case_Labeling.BIND ''lcond'' ?inp (?b x))
                 (?c x) (%x. Case_Labeling.BIND ''inv_post'' ?inp (?I x)));
         !!x. Case_Labeling.BIND ''inv_pre'' ?inp (?I x) &
              Case_Labeling.BIND ''lcond'' ?inp (~ ?b x) ==>
              Case_Labeling.VC
               ((''post'', ?outp', []) #
                (''while'', ?inp, [Case_Labeling.VAR x]) # ?ct)
               (?P x) |]
      ==> Case_Labeling.CTXT ?inp ?ct (Suc ?outp')
           (valid (?I ?x) (while ?b ?I ?c ?x) ?P)",
     template_implication
      ([template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 18, template_var 7),
                 template_var 6),
               template_app (template_hole 17, template_var 5)),
             template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app (template_var 4, template_var 0)),
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 4),
                     template_var 2),
                   template_var 0)),
               template_var 1))
           )))]:
   (string * thm * template) list
### theory "Draft.Monadic_LanguageMoreTemplates"
### 0.316s elapsed time, 0.404s cpu time, 0.000s GC time
val it = (): unit
