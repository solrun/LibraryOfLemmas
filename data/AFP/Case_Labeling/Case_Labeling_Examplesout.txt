Loading theory "Draft.Case_Labeling" (required by "Draft.Case_Labeling_ExamplesMoreTemplates" via "Draft.Case_Labeling_Examples" via "Draft.Labeled_Hoare_Examples" via "Draft.Labeled_Hoare")
Loading theory "HOL-Eisbach.Eisbach" (required by "Draft.Case_Labeling_ExamplesMoreTemplates" via "Draft.Case_Labeling_Examples" via "Draft.Conditionals")
Loading theory "HOL-Hoare.Arith2" (required by "Draft.Case_Labeling_ExamplesMoreTemplates" via "Draft.Case_Labeling_Examples" via "Draft.Labeled_Hoare_Examples")
Loading theory "HOL-Hoare.Hoare_Syntax" (required by "Draft.Case_Labeling_ExamplesMoreTemplates" via "Draft.Case_Labeling_Examples" via "Draft.Labeled_Hoare_Examples" via "Draft.Labeled_Hoare" via "HOL-Hoare.Hoare_Logic")
signature PARSE_TOOLS =
  sig
    val is_real_val: ('a, 'b) parse_val -> bool
    val name_term: (term, string) parse_val parser
    val parse_term_val: 'a parser -> (term, 'a) parse_val parser
    val parse_thm_val: 'a parser -> (thm, 'a) parse_val parser
    datatype ('a, 'b) parse_val
    = Parse_Val of 'b * ('a -> unit) | Real_Val of 'a
    val parse_val_cases:
       ('a -> 'b) -> ('b, 'a) parse_val -> 'b * ('b -> unit)
    val the_parse_fun: ('a, 'b) parse_val -> 'a -> unit
    val the_parse_val: ('a, 'b) parse_val -> 'b
    val the_real_val: ('a, 'b) parse_val -> 'a
  end
structure Parse_Tools: PARSE_TOOLS
consts
  fac :: "nat => nat"
### theory "HOL-Hoare.Arith2"
### 0.059s elapsed time, 0.235s cpu time, 0.000s GC time
Loading theory "HOL-Hoare.Hoare_Tac" (required by "Draft.Case_Labeling_ExamplesMoreTemplates" via "Draft.Case_Labeling_Examples" via "Draft.Labeled_Hoare_Examples" via "Draft.Labeled_Hoare" via "HOL-Hoare.Hoare_Logic")
locale Labeling_Syntax
signature METHOD_CLOSURE =
  sig
    val apply_method:
       Proof.context ->
         string ->
           term list ->
             thm list list ->
               (Proof.context -> Method.method) list ->
                 Proof.context -> thm list -> context_tactic
    val method:
       binding ->
         (binding * typ option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
    val method_cmd:
       binding ->
         (binding * string option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
  end
structure Method_Closure: METHOD_CLOSURE
signature PRINT_NESTED_CASES =
  sig
    val pretty_cases: Proof.context -> Pretty.T
    val print_cases: Proof.context -> unit
  end
structure Print_Nested_Cases: PRINT_NESTED_CASES
infix 1 THEN_CONTEXT
infix 1 THEN_ALL_NEW_FWD
signature BASIC_UTIL =
  sig
    val INTERVAL_FWD: (int -> tactic) -> int -> int -> tactic
    val REPEAT_ALL_NEW_FWD: (int -> tactic) -> int -> tactic
    val THEN_ALL_NEW_FWD: (int -> tactic) * (int -> tactic) -> int -> tactic
    val THEN_CONTEXT: tactic * context_tactic -> context_tactic
  end
signature UTIL =
  sig
    val INTERVAL_FWD: (int -> tactic) -> int -> int -> tactic
    val REPEAT_ALL_NEW_FWD: (int -> tactic) -> int -> tactic
    val SIMPLE_METHOD_CASES: context_tactic -> Method.method
    val THEN_ALL_NEW_FWD: (int -> tactic) * (int -> tactic) -> int -> tactic
    val THEN_CONTEXT: tactic * context_tactic -> context_tactic
    val appair: ('a -> 'b) -> ('c -> 'd) -> 'a * 'c -> 'b * 'd
    val dest_bool: term -> bool
    val dest_option: term -> term option
    val dest_pair: term -> term * term
    val dest_tuple: term -> term list
    val fst_ord: ('a * 'a -> order) -> ('a * 'b) * ('a * 'b) -> order
    val infst: ('a -> 'b -> 'c * 'b) -> 'a * 'd -> 'b -> ('c * 'd) * 'b
    val none_inf_ord: ('a * 'a -> order) -> 'a option * 'a option -> order
    val snd_ord: ('a * 'a -> order) -> ('b * 'a) * ('b * 'a) -> order
  end
structure Util: UTIL
structure Basic_Util: BASIC_UTIL
val INTERVAL_FWD = fn: (int -> tactic) -> int -> int -> tactic
val THEN_CONTEXT = fn: tactic * context_tactic -> context_tactic
val REPEAT_ALL_NEW_FWD = fn: (int -> tactic) -> int -> tactic
val THEN_ALL_NEW_FWD = fn:
   (int -> tactic) * (int -> tactic) -> int -> tactic
structure Eisbach_Rule_Insts: sig end
signature CASIFY =
  sig
    val SPLIT_subst_tac: Proof.context -> int -> tactic
    val casify_method_setup:
       options -> (Proof.context -> Method.method) context_parser
    val casify_options: options -> options parser
    val casify_tac: options -> context_tactic
    val extract_cases_tac: context_tactic
    val hyp_subst_tac: Proof.context -> int -> tactic
    datatype options
    =
         Options of
             {protect_subgoals: bool,
              simp_all_cases: bool, split_right_only: bool}
    val prepare_labels_tac: Proof.context -> int -> tactic
    val split_bind_all_tac:
       {right_only: bool, simp_all_cases: bool} ->
         Proof.context -> int -> tactic
  end
structure Casify: CASIFY
val casify_defs =
   Options
    {protect_subgoals = false, simp_all_cases = true, split_right_only =
     true}:
   Casify.options
### theory "Draft.Case_Labeling"
### 0.331s elapsed time, 1.294s cpu time, 0.080s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Case_Labeling_ExamplesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### ML warning (line 170 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 187 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 309 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
signature MATCH_METHOD =
  sig
    val focus_params: Proof.context -> term list
    val focus_schematics: Proof.context -> Envir.tenv
  end
structure Match_Method: MATCH_METHOD
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
val method_evaluate = fn: Method.text -> Proof.context -> thm list -> tactic
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Eisbach.Eisbach"
### 0.434s elapsed time, 1.700s cpu time, 0.080s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Case_Labeling_ExamplesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Library.Function_Algebras"
### 0.134s elapsed time, 0.546s cpu time, 0.048s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Case_Labeling_ExamplesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.220s elapsed time, 0.887s cpu time, 0.074s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Case_Labeling_ExamplesMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.329s elapsed time, 1.335s cpu time, 0.074s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Case_Labeling_ExamplesMoreTemplates" via "Draft.ExtrEqs")
### ML warning (line 58 of "~~/src/HOL/Hoare/hoare_syntax.ML"):
### Matches are not exhaustive.
### ML warning (line 62 of "~~/src/HOL/Hoare/hoare_syntax.ML"):
### Matches are not exhaustive.
### ML warning (line 232 of "~~/src/HOL/Hoare/hoare_syntax.ML"):
### Matches are not exhaustive.
signature HOARE_SYNTAX =
  sig
    val hoare_tc_vars_tr: Proof.context -> term list -> term
    val hoare_vars_tr: Proof.context -> term list -> term
    val setup:
       {Basic: string,
        Cond: string,
        Seq: string,
        Skip: string, Valid: string, ValidTC: string, While: string}
         -> theory -> theory
    val spec_tr': string -> Proof.context -> term list -> term
  end
structure Hoare_Syntax: HOARE_SYNTAX
### theory "HOL-Hoare.Hoare_Syntax"
### 0.824s elapsed time, 3.279s cpu time, 0.201s GC time
Loading theory "Draft.Conditionals" (required by "Draft.Case_Labeling_ExamplesMoreTemplates" via "Draft.Case_Labeling_Examples")
consts
  shift :: "'a list => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  right :: "'a tree => 'a tree"
### theory "Draft.Conditionals"
### 0.444s elapsed time, 1.755s cpu time, 0.122s GC time
Loading theory "Draft.Monadic_Language" (required by "Draft.Case_Labeling_ExamplesMoreTemplates" via "Draft.Case_Labeling_Examples")
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.888s elapsed time, 3.508s cpu time, 0.222s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Case_Labeling_ExamplesMoreTemplates" via "Draft.ExtrEqs")
### ML warning (line 49 of "~~/src/HOL/Hoare/hoare_tac.ML"):
### Matches are not exhaustive.
### ML warning (line 64 of "~~/src/HOL/Hoare/hoare_tac.ML"):
### Matches are not exhaustive.
### ML warning (line 76 of "~~/src/HOL/Hoare/hoare_tac.ML"):
### Matches are not exhaustive.
### ML warning (file "~~/src/HOL/Hoare/hoare_tac.ML"):
### Pattern is not exhaustive.
### ML warning (line 90 of "~~/src/HOL/Hoare/hoare_tac.ML"):
### Pattern is not exhaustive.
signature HOARE_TAC =
  sig
    val hoare_rule_tac:
       Proof.context ->
         term list * thm -> (int -> tactic) -> bool -> int -> tactic
    val hoare_tac: Proof.context -> (int -> tactic) -> int -> tactic
    val hoare_tc_tac: Proof.context -> (int -> tactic) -> int -> tactic
  end
structure Hoare_Tac: HOARE_TAC
### theory "HOL-Hoare.Hoare_Tac"
### 1.655s elapsed time, 6.545s cpu time, 0.475s GC time
Loading theory "HOL-Hoare.Hoare_Logic" (required by "Draft.Case_Labeling_ExamplesMoreTemplates" via "Draft.Case_Labeling_Examples" via "Draft.Labeled_Hoare_Examples" via "Draft.Labeled_Hoare")
infix 1 THEN_CONTEXT
infix 1 THEN_ALL_NEW_FWD
signature BASIC_UTIL =
  sig
    val INTERVAL_FWD: (int -> tactic) -> int -> int -> tactic
    val REPEAT_ALL_NEW_FWD: (int -> tactic) -> int -> tactic
    val THEN_ALL_NEW_FWD: (int -> tactic) * (int -> tactic) -> int -> tactic
    val THEN_CONTEXT: tactic * context_tactic -> context_tactic
  end
signature UTIL =
  sig
    val INTERVAL_FWD: (int -> tactic) -> int -> int -> tactic
    val REPEAT_ALL_NEW_FWD: (int -> tactic) -> int -> tactic
    val SIMPLE_METHOD_CASES: context_tactic -> Method.method
    val THEN_ALL_NEW_FWD: (int -> tactic) * (int -> tactic) -> int -> tactic
    val THEN_CONTEXT: tactic * context_tactic -> context_tactic
    val appair: ('a -> 'b) -> ('c -> 'd) -> 'a * 'c -> 'b * 'd
    val dest_bool: term -> bool
    val dest_option: term -> term option
    val dest_pair: term -> term * term
    val dest_tuple: term -> term list
    val fst_ord: ('a * 'a -> order) -> ('a * 'b) * ('a * 'b) -> order
    val infst: ('a -> 'b -> 'c * 'b) -> 'a * 'd -> 'b -> ('c * 'd) * 'b
    val none_inf_ord: ('a * 'a -> order) -> 'a option * 'a option -> order
    val snd_ord: ('a * 'a -> order) -> ('b * 'a) * ('b * 'a) -> order
  end
structure Util: UTIL
structure Basic_Util: BASIC_UTIL
val INTERVAL_FWD = fn: (int -> tactic) -> int -> int -> tactic
val THEN_CONTEXT = fn: tactic * context_tactic -> context_tactic
val REPEAT_ALL_NEW_FWD = fn: (int -> tactic) -> int -> tactic
val THEN_ALL_NEW_FWD = fn:
   (int -> tactic) * (int -> tactic) -> int -> tactic
val vcg_tac = fn: string -> string -> Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Introduced fixed type variable(s): 'a, 'b, 'c, 'd in "B" or "I" or "Q" or "R" or "b" or "c" or "c1" or "c2" or "v" or "x"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Monadic_Language"
### 1.444s elapsed time, 5.568s cpu time, 0.982s GC time
cases:
### theory "HOL-Library.BigO"
### 1.026s elapsed time, 3.914s cpu time, 0.830s GC time
Proofs for inductive predicate(s) "Sem"
  Proving monotonicity ...
### theory "HOL-Library.Tree"
### 2.190s elapsed time, 8.227s cpu time, 1.160s GC time
Loading theory "Draft.Templates" (required by "Draft.Case_Labeling_ExamplesMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Hoare.Hoare_Logic"
### 1.185s elapsed time, 4.233s cpu time, 0.886s GC time
Loading theory "Draft.Labeled_Hoare" (required by "Draft.Case_Labeling_ExamplesMoreTemplates" via "Draft.Case_Labeling_Examples" via "Draft.Labeled_Hoare_Examples")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.057s elapsed time, 0.115s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Case_Labeling_ExamplesMoreTemplates")
### ML warning (line 63 of "$AFP/Case_Labeling/Examples/Hoare/labeled_hoare_tac.ML"):
### Matches are not exhaustive.
### ML warning (line 80 of "$AFP/Case_Labeling/Examples/Hoare/labeled_hoare_tac.ML"):
### Matches are not exhaustive.
### ML warning (line 90 of "$AFP/Case_Labeling/Examples/Hoare/labeled_hoare_tac.ML"):
### Pattern is not exhaustive.
### ML warning (line 94 of "$AFP/Case_Labeling/Examples/Hoare/labeled_hoare_tac.ML"):
### Pattern is not exhaustive.
### ML warning (line 94 of "$AFP/Case_Labeling/Examples/Hoare/labeled_hoare_tac.ML"):
### Value identifier (T) has not been referenced.
### ML warning (line 103 of "$AFP/Case_Labeling/Examples/Hoare/labeled_hoare_tac.ML"):
### Pattern is not exhaustive.
signature LABELED_HOARE =
  sig
    val hoare_rule_tac:
       Proof.context ->
         term list * thm -> (int -> tactic) -> bool -> int -> tactic
    val hoare_tac: Proof.context -> (int -> tactic) -> int -> tactic
    val wrap_label_tac: Proof.context -> (int -> tactic) -> int -> tactic
  end
structure Labeled_Hoare: LABELED_HOARE
### theory "Draft.Labeled_Hoare"
### 0.218s elapsed time, 0.439s cpu time, 0.000s GC time
Loading theory "Draft.Labeled_Hoare_Examples" (required by "Draft.Case_Labeling_ExamplesMoreTemplates" via "Draft.Case_Labeling_Examples")
### Ambiguous input (line 172 of "$AFP/Case_Labeling/Examples/Hoare/Labeled_Hoare_Examples.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_hoare_vars"
###     ("_idts" ("_position" A) ("_idts" ("_position" u) ("_position" l)))
###     ("\<^const>Orderings.ord_class.less" ("\<^const>Groups.zero_class.zero")
###       ("_applC" ("_position" length)
###         ("_constrain" ("_position" A)
###           ("_tapp" ("_ofsort" ("_position_sort" 'a) ("_class_name" order))
###             ("_type_name" list)))))
###     ("_Seq" ("_assign" ("_position" l) ("\<^const>Groups.zero_class.zero"))
###       ("_Seq"
###         ("_assign" ("_position" u)
###           ("\<^const>Groups.minus_class.minus"
###             ("_applC" ("_position" length) ("_position" A))
###             ("_applC" ("_position" Suc)
###               ("\<^const>Groups.zero_class.zero"))))
###         ("_While0"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###             ("_position" u))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" leq)
###               ("_cargs" ("_position" A) ("_position" l)))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" geq)
###                 ("_cargs" ("_position" A) ("_position" u)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Orderings.ord_class.less" ("_position" u)
###                   ("_applC" ("_position" length) ("_position" A)))
###                 ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###                   ("_applC" ("_position" length) ("_position" A))))))
###           ("_Seq"
###             ("_While0"
###               ("\<^const>HOL.conj"
###                 ("\<^const>Orderings.ord_class.less" ("_position" l)
###                   ("_applC" ("_position" length) ("_position" A)))
###                 ("\<^const>Orderings.ord_class.less_eq"
###                   ("\<^const>List.nth" ("_position" A) ("_position" l))
###                   ("_position" pivot)))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" leq)
###                   ("_cargs" ("_position" A) ("_position" l)))
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" geq)
###                     ("_cargs" ("_position" A) ("_position" u)))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Orderings.ord_class.less" ("_position" u)
###                       ("_applC" ("_position" length) ("_position" A)))
###                     ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###                       ("_applC" ("_position" length) ("_position" A))))))
###               ("_assign" ("_position" l)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one"))))
###             ("_Seq"
###               ("_While0"
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Orderings.ord_class.less"
###                     ("\<^const>Groups.zero_class.zero") ("_position" u))
###                   ("\<^const>Orderings.ord_class.less_eq"
###                     ("_position" pivot)
###                     ("\<^const>List.nth" ("_position" A) ("_position" u))))
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" leq)
###                     ("_cargs" ("_position" A) ("_position" l)))
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" geq)
###                       ("_cargs" ("_position" A) ("_position" u)))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>Orderings.ord_class.less" ("_position" u)
###                         ("_applC" ("_position" length) ("_position" A)))
###                       ("\<^const>Orderings.ord_class.less_eq"
###                         ("_position" l)
###                         ("_applC" ("_position" length) ("_position" A))))))
###                 ("_assign" ("_position" u)
###                   ("\<^const>Groups.minus_class.minus" ("_position" u)
###                     ("\<^const>Groups.one_class.one"))))
###               ("_Cond"
###                 ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###                   ("_position" u))
###                 ("_assign" ("_position" A)
###                   ("_LUpdate" ("_position" A)
###                     ("_lupdbinds"
###                       ("_lupdbind" ("_position" l)
###                         ("\<^const>List.nth" ("_position" A)
###                           ("_position" u)))
###                       ("_lupdbind" ("_position" u)
###                         ("\<^const>List.nth" ("_position" A)
###                           ("_position" l))))))
###                 ("\<^const>Hoare_Logic.annskip")))))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" leq)
###         ("_cargs" ("_position" A) ("_position" u)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.All_binder" ("_position" k)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.conj"
###               ("\<^const>Orderings.ord_class.less" ("_position" u)
###                 ("_position" k))
###               ("\<^const>Orderings.ord_class.less" ("_position" k)
###                 ("_position" l)))
###             ("\<^const>HOL.eq"
###               ("\<^const>List.nth" ("_position" A) ("_position" k))
###               ("_position" pivot))))
###         ("_applC" ("_position" geq)
###           ("_cargs" ("_position" A) ("_position" l)))))))
### ("\<^const>HOL.Trueprop"
###   ("_hoare_vars"
###     ("_idts" ("_position" A) ("_idts" ("_position" u) ("_position" l)))
###     ("\<^const>Orderings.ord_class.less" ("\<^const>Groups.zero_class.zero")
###       ("_applC" ("_position" length)
###         ("_constrain" ("_position" A)
###           ("_tapp" ("_ofsort" ("_position_sort" 'a) ("_class_name" order))
###             ("_type_name" list)))))
###     ("_Seq" ("_assign" ("_position" l) ("\<^const>Groups.zero_class.zero"))
###       ("_Seq"
###         ("_assign" ("_position" u)
###           ("\<^const>Groups.minus_class.minus"
###             ("_applC" ("_position" length) ("_position" A))
###             ("_applC" ("_position" Suc)
###               ("\<^const>Groups.zero_class.zero"))))
###         ("_While0"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###             ("_position" u))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" leq)
###               ("_cargs" ("_position" A) ("_position" l)))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" geq)
###                 ("_cargs" ("_position" A) ("_position" u)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Orderings.ord_class.less" ("_position" u)
###                   ("_applC" ("_position" length) ("_position" A)))
###                 ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###                   ("_applC" ("_position" length) ("_position" A))))))
###           ("_Seq"
###             ("_While0"
###               ("\<^const>HOL.conj"
###                 ("\<^const>Orderings.ord_class.less" ("_position" l)
###                   ("_applC" ("_position" length) ("_position" A)))
###                 ("\<^const>Orderings.ord_class.less_eq"
###                   ("\<^const>List.nth" ("_position" A) ("_position" l))
###                   ("_position" pivot)))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" leq)
###                   ("_cargs" ("_position" A) ("_position" l)))
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" geq)
###                     ("_cargs" ("_position" A) ("_position" u)))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Orderings.ord_class.less" ("_position" u)
###                       ("_applC" ("_position" length) ("_position" A)))
###                     ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###                       ("_applC" ("_position" length) ("_position" A))))))
###               ("_assign" ("_position" l)
###                 ("\<^const>Groups.plus_class.plus" ("_position" l)
###                   ("\<^const>Groups.one_class.one"))))
###             ("_Seq"
###               ("_While0"
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Orderings.ord_class.less"
###                     ("\<^const>Groups.zero_class.zero") ("_position" u))
###                   ("\<^const>Orderings.ord_class.less_eq"
###                     ("_position" pivot)
###                     ("\<^const>List.nth" ("_position" A) ("_position" u))))
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" leq)
###                     ("_cargs" ("_position" A) ("_position" l)))
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" geq)
###                       ("_cargs" ("_position" A) ("_position" u)))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>Orderings.ord_class.less" ("_position" u)
###                         ("_applC" ("_position" length) ("_position" A)))
###                       ("\<^const>Orderings.ord_class.less_eq"
###                         ("_position" l)
###                         ("_applC" ("_position" length) ("_position" A))))))
###                 ("_assign" ("_position" u)
###                   ("\<^const>Groups.minus_class.minus" ("_position" u)
###                     ("\<^const>Groups.one_class.one"))))
###               ("_Cond"
###                 ("\<^const>Orderings.ord_class.less_eq" ("_position" l)
###                   ("_position" u))
###                 ("_assign" ("_position" A)
###                   ("_applC" ("_position" A)
###                     ("_list"
###                       ("_args"
###                         ("_assign" ("_position" l)
###                           ("\<^const>List.nth" ("_position" A)
###                             ("_position" u)))
###                         ("_assign" ("_position" u)
###                           ("\<^const>List.nth" ("_position" A)
###                             ("_position" l)))))))
###                 ("\<^const>Hoare_Logic.annskip")))))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" leq)
###         ("_cargs" ("_position" A) ("_position" u)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.All_binder" ("_position" k)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.conj"
###               ("\<^const>Orderings.ord_class.less" ("_position" u)
###                 ("_position" k))
###               ("\<^const>Orderings.ord_class.less" ("_position" k)
###                 ("_position" l)))
###             ("\<^const>HOL.eq"
###               ("\<^const>List.nth" ("_position" A) ("_position" k))
###               ("_position" pivot))))
###         ("_applC" ("_position" geq)
###           ("_cargs" ("_position" A) ("_position" l)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Labeled_Hoare_Examples"
### 0.203s elapsed time, 0.421s cpu time, 0.038s GC time
Loading theory "Draft.Case_Labeling_Examples" (required by "Draft.Case_Labeling_ExamplesMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.553s elapsed time, 1.179s cpu time, 0.100s GC time
### theory "Draft.Case_Labeling_Examples"
### 0.463s elapsed time, 0.697s cpu time, 0.062s GC time
Loading theory "Draft.Case_Labeling_ExamplesMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Case_Labeling_ExamplesMoreTemplates"
### 0.343s elapsed time, 0.466s cpu time, 0.051s GC time
val it = (): unit
