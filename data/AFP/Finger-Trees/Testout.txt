Loading theory "Draft.FingerTree" (required by "Draft.TestMoreTemplates" via "Draft.Test")
Loading theory "HOL-Library.Code_Abstract_Nat" (required by "Draft.TestMoreTemplates" via "Draft.Test" via "HOL-Library.Code_Target_Numeral" via "HOL-Library.Code_Target_Nat")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.TestMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Code_Target_Int" (required by "Draft.TestMoreTemplates" via "Draft.Test" via "HOL-Library.Code_Target_Numeral")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### Code generator: dropping subsumed code equation
### 1 == Int.Pos num.One
locale FingerTreeStruc_loc
### Code generator: dropping subsumed code equation
### Int.Neg ?m + Int.Neg ?n == Int.Neg (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m + Int.Pos ?n == Int.sub ?n ?m
### Code generator: dropping subsumed code equation
### Int.Pos ?m + Int.Neg ?n == Int.sub ?m ?n
### Code generator: dropping subsumed code equation
### Int.Pos ?m + Int.Pos ?n == Int.Pos (?m + ?n)
### Code generator: dropping subsumed code equation
### 0 + ?l == ?l
### Code generator: dropping subsumed code equation
### ?k + 0 == ?k
### theory "HOL-Library.Code_Abstract_Nat"
### 0.061s elapsed time, 0.270s cpu time, 0.000s GC time
Loading theory "HOL-Library.Code_Target_Nat" (required by "Draft.TestMoreTemplates" via "Draft.Test" via "HOL-Library.Code_Target_Numeral")
### Code generator: dropping subsumed code equation
### - Int.Neg ?m == Int.Pos ?m
### Code generator: dropping subsumed code equation
### - Int.Pos ?m == Int.Neg ?m
### Code generator: dropping subsumed code equation
### - 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m - Int.Neg ?n == Int.sub ?n ?m
### Code generator: dropping subsumed code equation
### Int.Neg ?m - Int.Pos ?n == Int.Neg (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m - Int.Neg ?n == Int.Pos (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m - Int.Pos ?n == Int.sub ?m ?n
### Code generator: dropping subsumed code equation
### 0 - ?l == - ?l
### Code generator: dropping subsumed code equation
### ?k - 0 == ?k
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### Code generator: dropping subsumed code equation
### Int.dup (Int.Neg ?n) == Int.Neg (num.Bit0 ?n)
### Code generator: dropping subsumed code equation
### Int.dup (Int.Pos ?n) == Int.Pos (num.Bit0 ?n)
### Code generator: dropping subsumed code equation
### Int.dup 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m * Int.Neg ?n == Int.Pos (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m * Int.Pos ?n == Int.Neg (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m * Int.Neg ?n == Int.Neg (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m * Int.Pos ?n == Int.Pos (?m * ?n)
### Code generator: dropping subsumed code equation
### 0 * ?l == 0
### Code generator: dropping subsumed code equation
### ?k * 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m div Int.Neg ?n == fst (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m div Int.Neg ?n == - Divides.adjust_div (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m div Int.Pos ?n == - Divides.adjust_div (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m div Int.Pos ?n == fst (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### ?k div Int.Neg num.One == - ?k
### Code generator: dropping subsumed code equation
### ?k div Int.Pos num.One == ?k
### Code generator: dropping subsumed code equation
### 0 div ?k == 0
### Code generator: dropping subsumed code equation
### ?k div 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m mod Int.Neg ?n == - snd (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m mod Int.Neg ?n ==
### - Divides.adjust_mod (Int.Pos ?n) (snd (divmod ?m ?n))
### Code generator: dropping subsumed code equation
### Int.Neg ?m mod Int.Pos ?n ==
### Divides.adjust_mod (Int.Pos ?n) (snd (divmod ?m ?n))
### Code generator: dropping subsumed code equation
### Int.Pos ?m mod Int.Pos ?n == snd (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### ?k mod Int.Neg num.One == 0
### Code generator: dropping subsumed code equation
### ?k mod Int.Pos num.One == 0
### Code generator: dropping subsumed code equation
### 0 mod ?k == 0
### Code generator: dropping subsumed code equation
### ?k mod 0 == ?k
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit1 ?n) ==
### if ?m < ?n then (0, numeral (num.Bit1 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit1 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit1 ?n) ==
### if ?m <= ?n then (0, numeral (num.Bit0 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit0 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r + 1)
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit1 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit0 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod ?m num.One == (numeral ?m, 0)
### Code generator: dropping subsumed code equation
### equal_class.equal ?k ?k == True
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) (Int.Neg ?l) == equal_class.equal ?k ?l
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) (Int.Pos ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) 0 == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) (Int.Neg ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) (Int.Pos ?l) == equal_class.equal ?k ?l
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) 0 == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 (Int.Neg ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 (Int.Pos ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 0 == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= Int.Neg ?l == ?l <= ?k
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= 0 == True
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= Int.Pos ?l == ?k <= ?l
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= 0 == False
### Code generator: dropping subsumed code equation
### 0 <= Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### 0 <= Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### 0 <= 0 == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k < Int.Neg ?l == ?l < ?k
### Code generator: dropping subsumed code equation
### Int.Neg ?k < Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k < 0 == True
### Code generator: dropping subsumed code equation
### Int.Pos ?k < Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### Int.Pos ?k < Int.Pos ?l == ?k < ?l
### Code generator: dropping subsumed code equation
### Int.Pos ?k < 0 == False
### Code generator: dropping subsumed code equation
### 0 < Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### 0 < Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### 0 < 0 == False
### Code generator: dropping subsumed code equation
### divmod_nat ?m ?n ==
### if ?n = 0 | ?m < ?n then (0, ?m)
### else let (q, y) = divmod_nat (?m - ?n) ?n in (Suc q, y)
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit1 ?n) ==
### if ?m < ?n then (0, numeral (num.Bit1 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit1 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit1 ?n) ==
### if ?m <= ?n then (0, numeral (num.Bit0 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit0 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r + 1)
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit1 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit0 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod ?m num.One == (numeral ?m, 0)
### Code generator: dropping subsumed code equation
### Suc ?m <= ?n == ?m < ?n
### Code generator: dropping subsumed code equation
### 0 <= ?n == True
### Code generator: dropping subsumed code equation
### ?m < Suc ?n == ?m <= ?n
### Code generator: dropping subsumed code equation
### ?n < 0 == False
### Code generator: dropping subsumed code equation
### of_int (Int.Pos ?k) == numeral ?k
### Code generator: dropping subsumed code equation
### of_int 0 == 0::?'a
### Code generator: dropping subsumed code equation
### of_int (Int.Neg ?k) == - numeral ?k
### Code generator: dropping subsumed code equation
### nat (Int.Pos ?k) == nat_of_num ?k
### Code generator: dropping subsumed code equation
### nat 0 == 0
### Code generator: dropping subsumed code equation
### nat (Int.Neg ?k) == 0
### theory "HOL-Library.Function_Algebras"
### 0.162s elapsed time, 0.647s cpu time, 0.049s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.TestMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Library.Code_Target_Int"
### 0.168s elapsed time, 0.679s cpu time, 0.049s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.TestMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### Code generator: dropping subsumed code equation
### of_nat ?n == semiring_1_class.of_nat_aux (%i. i + (1::?'a)) ?n (0::?'a)
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
### theory "HOL-Library.Code_Target_Nat"
### 0.143s elapsed time, 0.553s cpu time, 0.049s GC time
Loading theory "HOL-Library.Code_Target_Numeral" (required by "Draft.TestMoreTemplates" via "Draft.Test")
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Code_Target_Numeral"
### 0.140s elapsed time, 0.544s cpu time, 0.084s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.TestMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.218s elapsed time, 0.853s cpu time, 0.084s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.TestMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.353s elapsed time, 1.385s cpu time, 0.182s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.TestMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.980s elapsed time, 3.735s cpu time, 0.877s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.064s elapsed time, 3.884s cpu time, 0.863s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.951s elapsed time, 6.104s cpu time, 1.169s GC time
Loading theory "Draft.Templates" (required by "Draft.TestMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.071s elapsed time, 0.165s cpu time, 0.055s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.TestMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.530s elapsed time, 1.117s cpu time, 0.136s GC time
locale FingerTreeStruc_loc
consts
  gmn :: "('e, 'a) Node => 'a"
consts
  gmd :: "('e, 'a) Digit => 'a"
consts
  gmft :: "('e, 'a) FingerTreeStruc => 'a"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  is_leveln_digit :: "nat => ('e, 'a) Digit => bool"
consts
  is_leveln_ftree :: "nat => ('e, 'a) FingerTreeStruc => bool"
consts
  is_measured_node :: "('e, 'a) Node => bool"
consts
  is_measured_digit :: "('e, 'a) Digit => bool"
consts
  is_measured_ftree :: "('e, 'a) FingerTreeStruc => bool"
consts
  nodeToList :: "('e, 'a) Node => ('e * 'a) list"
consts
  digitToList :: "('e, 'a) Digit => ('e * 'a) list"
consts
  toList :: "('e, 'a) FingerTreeStruc => ('e * 'a) list"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  toTree :: "('e * 'a) list => ('e, 'a) FingerTreeStruc"
consts
  digitToTree :: "('e, 'a) Digit => ('e, 'a) FingerTreeStruc"
consts
  nodeToDigit :: "('e, 'a) Node => ('e, 'a) Digit"
### Missing patterns in function definition:
### nlistToDigit [] = undefined
### !!v vb va vc vd vf. nlistToDigit (v # vb # va # vc # vd # vf) = undefined
Found termination order: "{}"
consts
  digitToNlist :: "('e, 'a) Digit => ('e, 'a) Node list"
consts
  n_unwrap :: "('e, 'a) Node => 'e * 'a"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  lconsNlist ::
    "('e, 'a) Node list
     => ('e, 'a) FingerTreeStruc => ('e, 'a) FingerTreeStruc"
consts
  rconsNlist ::
    "('e, 'a) FingerTreeStruc
     => ('e, 'a) Node list => ('e, 'a) FingerTreeStruc"
### Missing patterns in function definition:
### nodes [] = undefined
### !!v. nodes [v] = undefined
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
consts
  nlistToList :: "('e, 'a) Node list => ('e * 'a) list"
Found termination order: "{}"
Found termination order: "{}"
### Missing patterns in function definition:
### !!a b. splitNlist a b [] = undefined
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
consts
  gmnl :: "('e, 'a) Node list => 'a"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
consts
  foldl_digit :: "('s => 'e * 'a => 's) => 's => ('e, 'a) Digit => 's"
consts
  foldr_node :: "('e * 'a => 's => 's) => ('e, 'a) Node => 's => 's"
consts
  foldr_digit :: "('e * 'a => 's => 's) => ('e, 'a) Digit => 's => 's"
consts
  foldl :: "('s => 'e * 'a => 's) => 's => ('e, 'a) FingerTreeStruc => 's"
consts
  foldr :: "('e * 'a => 's => 's) => ('e, 'a) FingerTreeStruc => 's => 's"
consts
  count_node :: "('e, 'a) Node => nat"
consts
  count_digit :: "('e, 'a) Digit => nat"
consts
  count :: "('e, 'a) FingerTreeStruc => nat"
locale FingerTree_loc
### theory "Draft.FingerTree"
### 6.733s elapsed time, 13.725s cpu time, 3.031s GC time
Loading theory "Draft.Test" (required by "Draft.TestMoreTemplates")
See theory exports
See theory exports
See theory exports
### theory "Draft.Test"
### 0.570s elapsed time, 0.678s cpu time, 0.078s GC time
Loading theory "Draft.TestMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.TestMoreTemplates"
### 0.355s elapsed time, 0.828s cpu time, 0.018s GC time
val t1 =
   Abs_FingerTree
    (
       Deep
        (Nat 6, Two (Tip ("a", Nat 1), Tip ("b", Nat 2)), Empty,
         Onea (Tip ("c", Nat 3)))
       ):
   (string, Isabelle5534694.Generated_Code.nat)
   Isabelle5534694.Generated_Code.fingerTree
val t2 =
   Abs_FingerTree
    (
       Deep
        (Nat 6, Two (Tip ("d", Nat 1), Tip ("e", Nat 2)), Empty,
         Onea (Tip ("f", Nat 3)))
       ):
   (string, Isabelle5534694.Generated_Code.nat)
   Isabelle5534694.Generated_Code.fingerTree
val t3 =
   Abs_FingerTree
    (
       Deep
        (Nat 12, Two (Tip ("a", Nat 1), Tip ("b", Nat 2)),
         Single
          (
             Node3
              (Nat 6, Tip ("c", Nat 3), Tip ("d", Nat 1), Tip ("e", Nat 2))
             ),
         Onea (Tip ("f", Nat 3)))
       ):
   (string, Isabelle5534694.Generated_Code.nat)
   Isabelle5534694.Generated_Code.fingerTree
val t3 =
   Abs_FingerTree
    (
       Deep
        (Nat 12, Two (Tip ("a", Nat 1), Tip ("b", Nat 2)),
         Single
          (
             Node3
              (Nat 6, Tip ("c", Nat 3), Tip ("d", Nat 1), Tip ("e", Nat 2))
             ),
         Onea (Tip ("f", Nat 3)))
       ):
   (string, Isabelle5534694.Generated_Code.nat)
   Isabelle5534694.Generated_Code.fingerTree
val t4 =
   Abs_FingerTree
    (
       Deep
        (Nat 19,
         Three (Tip ("g", Nat 7), Tip ("a", Nat 1), Tip ("b", Nat 2)),
         Single
          (
             Node3
              (Nat 6, Tip ("c", Nat 3), Tip ("d", Nat 1), Tip ("e", Nat 2))
             ),
         Onea (Tip ("f", Nat 3)))
       ):
   (string, Isabelle5534694.Generated_Code.nat)
   Isabelle5534694.Generated_Code.fingerTree
val t4 =
   Abs_FingerTree
    (
       Deep
        (Nat 19, Two (Tip ("a", Nat 1), Tip ("b", Nat 2)),
         Single
          (
             Node3
              (Nat 6, Tip ("c", Nat 3), Tip ("d", Nat 1), Tip ("e", Nat 2))
             ),
         Two (Tip ("f", Nat 3), Tip ("g", Nat 7)))
       ):
   (string, Isabelle5534694.Generated_Code.nat)
   Isabelle5534694.Generated_Code.fingerTree
val it =
   [("a", Nat 1), ("b", Nat 2), ("c", Nat 3), ("d", Nat 1), ("e", Nat 2),
    ("f", Nat 3), ("g", Nat 7)]:
   (string * Isabelle5534694.Generated_Code.nat) list
val it = Nat 19: Isabelle5534694.Generated_Code.nat
val it =
   SOME
    (("a", Nat 1),
     Abs_FingerTree
      (
         Deep
          (Nat 18, Onea (Tip ("b", Nat 2)),
           Single
            (
               Node3
                (Nat 6, Tip ("c", Nat 3), Tip ("d", Nat 1),
                 Tip ("e", Nat 2))
               ),
           Two (Tip ("f", Nat 3), Tip ("g", Nat 7)))
         )):
   ((string * Isabelle5534694.Generated_Code.nat) *
    (string, Isabelle5534694.Generated_Code.nat)
    Isabelle5534694.Generated_Code.fingerTree
   )
   option
val it =
   SOME
    (("g", Nat 7),
     Abs_FingerTree
      (
         Deep
          (Nat 12, Two (Tip ("a", Nat 1), Tip ("b", Nat 2)),
           Single
            (
               Node3
                (Nat 6, Tip ("c", Nat 3), Tip ("d", Nat 1),
                 Tip ("e", Nat 2))
               ),
           Onea (Tip ("f", Nat 3)))
         )):
   ((string * Isabelle5534694.Generated_Code.nat) *
    (string, Isabelle5534694.Generated_Code.nat)
    Isabelle5534694.Generated_Code.fingerTree
   )
   option
val it = ("a", Nat 1): string * Isabelle5534694.Generated_Code.nat
val it =
   Abs_FingerTree
    (
       Deep
        (Nat 18, Onea (Tip ("b", Nat 2)),
         Single
          (
             Node3
              (Nat 6, Tip ("c", Nat 3), Tip ("d", Nat 1), Tip ("e", Nat 2))
             ),
         Two (Tip ("f", Nat 3), Tip ("g", Nat 7)))
       ):
   (string, Isabelle5534694.Generated_Code.nat)
   Isabelle5534694.Generated_Code.fingerTree
val it = ("g", Nat 7): string * Isabelle5534694.Generated_Code.nat
val it =
   Abs_FingerTree
    (
       Deep
        (Nat 12, Two (Tip ("a", Nat 1), Tip ("b", Nat 2)),
         Single
          (
             Node3
              (Nat 6, Tip ("c", Nat 3), Tip ("d", Nat 1), Tip ("e", Nat 2))
             ),
         Onea (Tip ("f", Nat 3)))
       ):
   (string, Isabelle5534694.Generated_Code.nat)
   Isabelle5534694.Generated_Code.fingerTree
val it = Nat 7: Isabelle5534694.Generated_Code.nat
val it = false: bool
val it = true: bool
val tl =
   Abs_FingerTree
    (
       Deep
        (Nat 9, Two (Tip ("a", Nat 1), Tip ("b", Nat 2)), Empty,
         Three (Tip ("c", Nat 3), Tip ("d", Nat 1), Tip ("e", Nat 2)))
       ):
   (string, Isabelle5534694.Generated_Code.nat)
   Isabelle5534694.Generated_Code.fingerTree
val e = ("f", Nat 3): string * Isabelle5534694.Generated_Code.nat
val tr = Abs_FingerTree (Single (Tip ("g", Nat 7))):
   (string, Isabelle5534694.Generated_Code.nat)
   Isabelle5534694.Generated_Code.fingerTree
val it =
   [("a", Nat 1), ("b", Nat 2), ("c", Nat 3), ("d", Nat 1), ("e", Nat 2)]:
   (string * Isabelle5534694.Generated_Code.nat) list
val it = ("f", Nat 3): string * Isabelle5534694.Generated_Code.nat
val it = [("g", Nat 7)]: (string * Isabelle5534694.Generated_Code.nat) list
val it = 19: int
val it = 19: int
val it = (): unit
