Loading theory "Draft.FingerTree" (required by "Draft.FingerTreeMoreTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.FingerTreeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.FingerTreeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.FingerTreeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
locale FingerTreeStruc_loc
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.139s elapsed time, 0.565s cpu time, 0.059s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.FingerTreeMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.199s elapsed time, 0.809s cpu time, 0.059s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.FingerTreeMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.381s elapsed time, 1.517s cpu time, 0.161s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.FingerTreeMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
### theory "HOL-Library.BigO"
### 0.954s elapsed time, 3.623s cpu time, 0.922s GC time
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.145s elapsed time, 4.052s cpu time, 0.957s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.012s elapsed time, 6.337s cpu time, 1.214s GC time
Loading theory "Draft.Templates" (required by "Draft.FingerTreeMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.104s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.FingerTreeMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.527s elapsed time, 1.099s cpu time, 0.107s GC time
locale FingerTreeStruc_loc
consts
  gmn :: "('e, 'a) Node => 'a"
consts
  gmd :: "('e, 'a) Digit => 'a"
consts
  gmft :: "('e, 'a) FingerTreeStruc => 'a"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  is_leveln_digit :: "nat => ('e, 'a) Digit => bool"
consts
  is_leveln_ftree :: "nat => ('e, 'a) FingerTreeStruc => bool"
consts
  is_measured_node :: "('e, 'a) Node => bool"
consts
  is_measured_digit :: "('e, 'a) Digit => bool"
consts
  is_measured_ftree :: "('e, 'a) FingerTreeStruc => bool"
consts
  nodeToList :: "('e, 'a) Node => ('e * 'a) list"
consts
  digitToList :: "('e, 'a) Digit => ('e * 'a) list"
consts
  toList :: "('e, 'a) FingerTreeStruc => ('e * 'a) list"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  toTree :: "('e * 'a) list => ('e, 'a) FingerTreeStruc"
consts
  digitToTree :: "('e, 'a) Digit => ('e, 'a) FingerTreeStruc"
consts
  nodeToDigit :: "('e, 'a) Node => ('e, 'a) Digit"
### Missing patterns in function definition:
### nlistToDigit [] = undefined
### !!v vb va vc vd vf. nlistToDigit (v # vb # va # vc # vd # vf) = undefined
Found termination order: "{}"
consts
  digitToNlist :: "('e, 'a) Digit => ('e, 'a) Node list"
consts
  n_unwrap :: "('e, 'a) Node => 'e * 'a"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  lconsNlist ::
    "('e, 'a) Node list
     => ('e, 'a) FingerTreeStruc => ('e, 'a) FingerTreeStruc"
consts
  rconsNlist ::
    "('e, 'a) FingerTreeStruc
     => ('e, 'a) Node list => ('e, 'a) FingerTreeStruc"
### Missing patterns in function definition:
### nodes [] = undefined
### !!v. nodes [v] = undefined
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
consts
  nlistToList :: "('e, 'a) Node list => ('e * 'a) list"
Found termination order: "{}"
Found termination order: "{}"
### Missing patterns in function definition:
### !!a b. splitNlist a b [] = undefined
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
consts
  gmnl :: "('e, 'a) Node list => 'a"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
consts
  foldl_digit :: "('s => 'e * 'a => 's) => 's => ('e, 'a) Digit => 's"
consts
  foldr_node :: "('e * 'a => 's => 's) => ('e, 'a) Node => 's => 's"
consts
  foldr_digit :: "('e * 'a => 's => 's) => ('e, 'a) Digit => 's => 's"
consts
  foldl :: "('s => 'e * 'a => 's) => 's => ('e, 'a) FingerTreeStruc => 's"
consts
  foldr :: "('e * 'a => 's => 's) => ('e, 'a) FingerTreeStruc => 's => 's"
consts
  count_node :: "('e, 'a) Node => nat"
consts
  count_digit :: "('e, 'a) Digit => nat"
consts
  count :: "('e, 'a) FingerTreeStruc => nat"
locale FingerTree_loc
### theory "Draft.FingerTree"
### 6.793s elapsed time, 13.156s cpu time, 2.716s GC time
Loading theory "Draft.FingerTreeMoreTemplates"
val templateLemmas =
   [("FingerTree.Rep_FingerTree_invar",
     "FingerTreeStruc.ft_invar (Rep_FingerTree ?t)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("FingerTree.Abs_viewres_inverse_Some",
     "FingerTreeStruc.ft_invar ?t ==>
      Rep_viewres (Abs_viewres (Some (?a, ?t))) = Some (?a, ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("FingerTree.Abs_splitres_inverse",
     "[| FingerTreeStruc.ft_invar ?r; FingerTreeStruc.ft_invar ?s |]
      ==> Rep_splitres (Abs_splitres (?r, ?a, ?s)) = (?r, ?a, ?s)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)))))]:
   (string * thm * template) list
### theory "Draft.FingerTreeMoreTemplates"
### 0.364s elapsed time, 0.641s cpu time, 0.079s GC time
val it = (): unit
