   [("SimpleFw_Semantics.simple_match_any",
     "simple_matches simple_match_any ?p",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("SimpleFw_Semantics.simple_match_none",
     "~ simple_matches simple_match_none ?p",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0)
             )
         )),
    ("SimpleFw_Semantics.simple_fw_alt",
     "simple_fw ?r ?p = simple_fw_alt ?r ?p",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("SimpleFw_Semantics.cut_off_after_match_any",
     "simple_fw (cut_off_after_match_any ?rs) ?p = simple_fw ?rs ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("SimpleFw_Semantics.wordinterval_to_set_ipcidr_tuple_to_wordinterval_simple_match_ip_set",
     "wordinterval_to_set (ipcidr_tuple_to_wordinterval ?ip) =
      {d. simple_match_ip ?ip d}",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app (template_hole 1, t_empty))),
    ("SimpleFw_Semantics.empty_match",
     "empty_match ?m = (ALL p. ~ simple_matches ?m p)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app (template_hole 2, t_empty))),
    ("SimpleFw_Semantics.simple_match_port_code",
     "simple_match_port (?s, ?e) ?p_p = (?s <= ?p_p & ?p_p <= ?e)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("SimpleFw_Semantics.simple_ports_conjunct_correct",
     "(simple_match_port ?p1.0 ?pkt & simple_match_port ?p2.0 ?pkt) =
      simple_match_port (simpl_ports_conjunct ?p1.0 ?p2.0) ?pkt",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0), template_var 1)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("SimpleFw_Semantics.simple_match_and_NoneD",
     "simple_match_and ?m1.0 ?m2.0 = None ==>
      ~ (simple_matches ?m1.0 ?p & simple_matches ?m2.0 ?p)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_hole 3)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))
               )
           ))),
    ("SimpleFw_Semantics.simple_match_ip_conjunct",
     "(simple_match_ip ?ip1.0 ?p_ip & simple_match_ip ?ip2.0 ?p_ip) =
      (case ipcidr_conjunct ?ip1.0 ?ip2.0 of None => False
       | Some ipx => simple_match_ip ipx ?p_ip)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 0), template_var 1)),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), t_empty),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("SimpleFw_Semantics.simple_match_and_correct",
     "(simple_matches ?m1.0 ?p & simple_matches ?m2.0 ?p) =
      (case simple_match_and ?m1.0 ?m2.0 of None => False
       | Some m => simple_matches m ?p)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 0), template_var 1)),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), t_empty),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("SimpleFw_Semantics.nomatch",
     "~ simple_matches ?m ?p ==>
      simple_fw (SimpleRule ?m ?a # ?rs) ?p = simple_fw ?rs ?p",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1)),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_var 2)))),
    ("SimpleFw_Semantics.simple_fw_not_matches_removeAll",
     "~ simple_matches ?m ?p ==>
      simple_fw (removeAll (SimpleRule ?m ?a) ?rs) ?p = simple_fw ?rs ?p",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1)),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_var 2)))),
    ("SimpleFw_Semantics.simple_match_port_UNIV",
     "({p. simple_match_port (?s, ?e) p} = UNIV) = (?s = 0 & ?e = - 1)",
     template_bimplication
      (template_equation
        (template_app (template_hole 8, t_empty), template_hole 5),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("SimpleFw_Semantics.simple_match_and_valid",
     "[| simple_match_valid ?m1.0; simple_match_valid ?m2.0;
         simple_match_and ?m1.0 ?m2.0 = Some ?m |]
      ==> simple_match_valid ?m",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (template_app (template_hole 3, template_var 0)))),
    ("SimpleFw_Semantics.ipcidr_conjunct_valid",
     "[| valid_prefix_fw ?p1.0; valid_prefix_fw ?p2.0;
         ipcidr_conjunct ?p1.0 ?p2.0 = Some ?p |]
      ==> valid_prefix_fw ?p",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (template_app (template_hole 3, template_var 0)))),
    ("SimpleFw_Semantics.simple_match_and_SomeD",
     "simple_match_and ?m1.0 ?m2.0 = Some ?m ==>
      simple_matches ?m ?p =
      (simple_matches ?m1.0 ?p & simple_matches ?m2.0 ?p)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 2),
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("SimpleFw_Semantics.simple_matches_andD",
     "[| simple_matches ?m1.0 ?p; simple_matches ?m2.0 ?p |]
      ==> EX m. simple_match_and ?m1.0 ?m2.0 = Some m &
                simple_matches m ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("SimpleFw_Semantics.simple_matches_extended_packet",
     "simple_matches ?m
       (| p_iiface = ?iifce, p_oiface = ?oifce, p_src = ?s, p_dst = ?d,
          p_proto = ?prot, p_sport = ?sport, p_dport = ?dport,
          p_tcp_flags = ?tcp_flags, p_payload = ?payload1.0 |) =
      simple_matches ?m
       (| p_iiface = ?iifce, p_oiface = ?oifce, p_src = ?s, p_dst = ?d,
          p_proto = ?prot, p_sport = ?sport, p_dport = ?dport,
          p_tcp_flags = ?tcp_flags2.0, p_payload = ?payload2.0,
          ... = ?aux |)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 12),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 3, template_var 11),
                           template_var 10),
                         template_var 9),
                       template_var 8),
                     template_var 7),
                   template_var 6),
                 template_var 5),
               template_var 4),
             template_var 3),
           template_hole 2)),
       template_app
        (template_app (template_hole 1, template_var 12),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 0, template_var 11),
                           template_var 10),
                         template_var 9),
                       template_var 8),
                     template_var 7),
                   template_var 6),
                 template_var 5),
               template_var 2),
             template_var 1),
           template_var 0))))]
