Loading theory "Draft.List_Product_More" (required by "Draft.Generic_SimpleFwTemplates" via "Draft.Generic_SimpleFw")
Loading theory "Draft.Firewall_Common_Decision_State" (required by "Draft.Generic_SimpleFwTemplates" via "Draft.Generic_SimpleFw" via "Draft.SimpleFw_Semantics" via "Draft.SimpleFw_Syntax")
Loading theory "Draft.Iface" (required by "Draft.Generic_SimpleFwTemplates" via "Draft.Generic_SimpleFw" via "Draft.SimpleFw_Semantics" via "Draft.SimpleFw_Syntax")
Loading theory "Draft.Option_Helpers" (required by "Draft.Generic_SimpleFwTemplates" via "Draft.Generic_SimpleFw")
### theory "Draft.Option_Helpers"
### 0.042s elapsed time, 0.205s cpu time, 0.000s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Generic_SimpleFwTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "Draft.List_Product_More"
### 0.046s elapsed time, 0.220s cpu time, 0.000s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Generic_SimpleFwTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.114s elapsed time, 0.429s cpu time, 0.039s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Generic_SimpleFwTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
instantiation
  iface :: linorder
  less_eq_iface == less_eq :: iface => iface => bool
  less_iface == less :: iface => iface => bool
### theory "HOL-Library.Set_Algebras"
### 0.209s elapsed time, 0.817s cpu time, 0.087s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Generic_SimpleFwTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.327s elapsed time, 1.262s cpu time, 0.125s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Generic_SimpleFwTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Firewall_Common_Decision_State"
### 0.814s elapsed time, 3.206s cpu time, 0.368s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Generic_SimpleFwTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "{}"
consts
  left :: "'a tree => 'a tree"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  right :: "'a tree => 'a tree"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "length <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### theory "Draft.Iface"
### 1.379s elapsed time, 5.278s cpu time, 0.912s GC time
Loading theory "Draft.Lib_Enum_toString" (required by "Draft.Generic_SimpleFwTemplates" via "Draft.Generic_SimpleFw" via "Draft.SimpleFw_Semantics" via "Draft.SimpleFw_Syntax" via "Draft.L4_Protocol")
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "{}"
### theory "HOL-Library.Stream"
### 1.110s elapsed time, 4.196s cpu time, 0.857s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Lib_Enum_toString"
### 0.265s elapsed time, 0.916s cpu time, 0.153s GC time
Loading theory "Draft.L4_Protocol" (required by "Draft.Generic_SimpleFwTemplates" via "Draft.Generic_SimpleFw" via "Draft.SimpleFw_Semantics" via "Draft.SimpleFw_Syntax")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.975s elapsed time, 3.449s cpu time, 0.697s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.026s elapsed time, 6.475s cpu time, 1.141s GC time
Loading theory "Draft.Templates" (required by "Draft.Generic_SimpleFwTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.126s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Generic_SimpleFwTemplates")
Found termination order: "{}"
instantiation
  tcp_flag :: enum
  enum_tcp_flag == enum_class.enum :: tcp_flag list
  enum_all_tcp_flag == enum_class.enum_all :: (tcp_flag => bool) => bool
  enum_ex_tcp_flag == enum_class.enum_ex :: (tcp_flag => bool) => bool
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.544s elapsed time, 1.148s cpu time, 0.126s GC time
Found termination order: "{}"
### theory "Draft.L4_Protocol"
### 1.398s elapsed time, 3.077s cpu time, 0.327s GC time
Loading theory "Draft.Simple_Packet" (required by "Draft.Generic_SimpleFwTemplates" via "Draft.Generic_SimpleFw" via "Draft.SimpleFw_Semantics" via "Draft.SimpleFw_Syntax")
"(| p_iiface = ''eth1'', p_oiface = [], p_src = 0, p_dst = 0, p_proto = 6,
    p_sport = 0, p_dport = 0, p_tcp_flags = {TCP_SYN},
    p_payload = ''arbitrary payload'' |)"
  :: "'a simple_packet"
### theory "Draft.Simple_Packet"
### 1.249s elapsed time, 1.747s cpu time, 0.206s GC time
Loading theory "Draft.SimpleFw_Syntax" (required by "Draft.Generic_SimpleFwTemplates" via "Draft.Generic_SimpleFw" via "Draft.SimpleFw_Semantics")
### theory "Draft.SimpleFw_Syntax"
### 1.526s elapsed time, 1.636s cpu time, 0.155s GC time
Loading theory "Draft.SimpleFw_Semantics" (required by "Draft.Generic_SimpleFwTemplates" via "Draft.Generic_SimpleFw")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.SimpleFw_Semantics"
### 1.345s elapsed time, 2.107s cpu time, 1.030s GC time
Loading theory "Draft.Generic_SimpleFw" (required by "Draft.Generic_SimpleFwTemplates")
### theory "Draft.Generic_SimpleFw"
### 0.362s elapsed time, 0.363s cpu time, 0.000s GC time
Loading theory "Draft.Generic_SimpleFwTemplates"
val templateLemmas =
   [("Generic_SimpleFw.generalized_fw_join_1_Nil",
     "generalized_fw_join [] ?f2.0 = []",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Generic_SimpleFw.generalized_fw_join_2_Nil",
     "generalized_fw_join ?f1.0 [] = []",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Generic_SimpleFw.generalized_sfw_simps",
     "generalized_sfw [] ?p = None",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Generic_SimpleFw.gsfw_validI",
     "simple_fw_valid ?fw ==> gsfw_valid (map simple_rule_dtor ?fw)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Generic_SimpleFw.gsfw_join_valid",
     "[| gsfw_valid ?f1.0; gsfw_valid ?f2.0 |]
      ==> gsfw_valid (generalized_fw_join ?f1.0 ?f2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Generic_SimpleFw.generalized_sfw_mapsnd",
     "generalized_sfw (map (apsnd ?f) ?fw) ?p =
      map_option (apsnd ?f) (generalized_sfw ?fw ?p)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 2)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Generic_SimpleFw.generalized_sfw_1_join_None",
     "generalized_sfw ?fw1.0 ?p = None ==>
      generalized_sfw (generalized_fw_join ?fw1.0 ?fw2.0) ?p = None",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_var 1),
         template_hole 0))),
    ("Generic_SimpleFw.generalized_sfw_2_join_None",
     "generalized_sfw ?fw2.0 ?p = None ==>
      generalized_sfw (generalized_fw_join ?fw1.0 ?fw2.0) ?p = None",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_var 1),
         template_hole 0))),
    ("Generic_SimpleFw.generalized_sfw_append",
     "generalized_sfw (?a @ ?b) ?p =
      (case generalized_sfw ?a ?p of None => generalized_sfw ?b ?p
       | Some x => Some x)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           t_empty),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("Generic_SimpleFw.simple_generalized_undecided",
     "simple_fw ?fw ?p ~= Undecided ==>
      generalized_sfw (map simple_rule_dtor ?fw) ?p ~= None",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0),
              template_hole 5)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 1)),
               template_var 0),
             template_hole 0)
           ))),
    ("Generic_SimpleFw.generalized_sfw_NoneD",
     "generalized_sfw ?fw ?p = None ==>
      ALL (a, b):set ?fw. ~ simple_matches a ?p",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 1), template_var 0),
          template_hole 5)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1)),
             template_app (template_hole 2, t_empty))
           ))),
    ("Generic_SimpleFw.simple_fw_iff_generalized_fw_accept",
     "(simple_fw ?fw ?p = Decision FinalAllow) =
      (EX r. generalized_sfw (map simple_rule_dtor ?fw) ?p =
             Some (r, Accept))",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, template_var 1),
             template_var 0)),
         template_app (template_hole 9, template_hole 8)),
       template_app (template_hole 7, t_empty))),
    ("Generic_SimpleFw.simple_fw_iff_generalized_fw_drop",
     "(simple_fw ?fw ?p = Decision FinalDeny) =
      (EX r. generalized_sfw (map simple_rule_dtor ?fw) ?p =
             Some (r, Drop))",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, template_var 1),
             template_var 0)),
         template_app (template_hole 9, template_hole 8)),
       template_app (template_hole 7, t_empty))),
    ("Generic_SimpleFw.simple_fw_iff_generalized_fw",
     "(simple_fw ?fw ?p = simple_action_to_decision ?a) =
      (EX r. generalized_sfw (map simple_rule_dtor ?fw) ?p = Some (r, ?a))",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 2),
             template_var 1)),
         template_app (template_hole 7, template_var 0)),
       template_app (template_hole 6, t_empty))),
    ("Generic_SimpleFw.generalized_sfw_simps",
     "generalized_sfw (?a # ?as) ?p =
      (if case ?a of (m, x) => simple_matches m ?p then Some ?a
       else generalized_sfw ?as ?p)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty), template_var 2)),
           template_app (template_hole 0, template_var 2)),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_var 0)))),
    ("Generic_SimpleFw.generalized_sfwSomeD",
     "generalized_sfw ?fw ?p = Some (?r, ?d) ==>
      (?r, ?d) : set ?fw & simple_matches ?r ?p",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 3), template_var 2),
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 0)),
                 template_app (template_hole 1, template_var 3))),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2))
           ))),
    ("Generic_SimpleFw.generalized_sfw_filterD",
     "generalized_sfw (filter ?f ?fw) ?p = Some (?r, ?d) ==>
      simple_matches ?r ?p & ?f (?r, ?d)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3)),
            template_var 2),
          template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)),
             template_app
              (template_var 4,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)))
           ))),
    ("Generic_SimpleFw.generalized_fw_join_2_nomatch",
     "~ simple_matches ?bm ?p ==>
      generalized_sfw (generalized_fw_join ?as ((?bm, ?bd) # ?bs)) ?p =
      generalized_sfw (generalized_fw_join ?as ?bs) ?p",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_var 3)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 1)),
                 template_var 0))),
           template_var 3),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_var 3)))),
    ("Generic_SimpleFw.generalized_fw_split",
     "generalized_sfw ?fw ?p = Some ?r ==>
      EX fw1 fw3. ?fw = fw1 @ ?r # fw3 & generalized_sfw fw1 ?p = None",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 2), template_var 1),
          template_app (template_hole 6, template_var 0))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Generic_SimpleFw.generalized_fw_join_1_nomatch",
     "~ simple_matches ?am ?p ==>
      generalized_sfw
       (concat
         (map (%(m2, b).
                  map (%u. (u, ?ad, b))
                   (option2list (simple_match_and ?am m2)))
           ?l2.0))
       ?p =
      None",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 11, template_var 3),
                  template_var 2)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 6, t_empty)),
                 template_var 0))),
           template_var 2),
         template_hole 0))),
    ("Generic_SimpleFw.generalized_fw_join_1_1",
     "generalized_fw_join [(?m1.0, ?d1.0)] ?fw2.0 =
      foldr
       (%(m2, d2).
           (@) (case simple_match_and ?m1.0 m2 of None => []
                | Some mu => [(mu, ?d1.0, d2)]))
       ?fw2.0 []",
     template_equation
      (template_app
        (template_app
          (template_hole 12,
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app (template_hole 10, template_var 2),
                 template_var 1)),
             template_hole 9)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 8, template_app (template_hole 7, t_empty)),
           template_var 0),
         template_hole 4))),
    ("Generic_SimpleFw.generalized_fw_join_cons_1",
     "generalized_fw_join ((?am, ?ad) # ?l1.0) ?l2.0 =
      concat
       (map (%(m2, b).
                map (%u. (u, ?ad, b))
                 (option2list (simple_match_and ?am m2)))
         ?l2.0) @
      generalized_fw_join ?l1.0 ?l2.0",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 9, template_var 3),
                 template_var 2)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6, template_app (template_hole 5, t_empty)),
               template_var 0))),
         template_app
          (template_app (template_hole 11, template_var 1),
           template_var 0)))),
    ("Generic_SimpleFw.generalized_sfw_join_set",
     "((?a, ?b1.0, ?b2.0) : set (generalized_fw_join ?f1.0 ?f2.0)) =
      (EX a1 a2.
          (a1, ?b1.0) : set ?f1.0 &
          (a2, ?b2.0) : set ?f2.0 & simple_match_and a1 a2 = Some ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 15,
           template_app
            (template_app (template_hole 14, template_var 4),
             template_app
              (template_app (template_hole 13, template_var 3),
               template_var 2))),
         template_app
          (template_hole 12,
           template_app
            (template_app (template_hole 11, template_var 1),
             template_var 0))),
       template_app (template_hole 10, t_empty))),
    ("Generic_SimpleFw.generalized_fw_joinI",
     "[| generalized_sfw ?f1.0 ?p = Some (?r1.0, ?d1.0);
         generalized_sfw ?f2.0 ?p = Some (?r2.0, ?d2.0) |]
      ==> generalized_sfw (generalized_fw_join ?f1.0 ?f2.0) ?p =
          Some (the (simple_match_and ?r1.0 ?r2.0), ?d1.0, ?d2.0)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 14, template_var 6),
            template_var 5),
          template_app
           (template_hole 13,
            template_app
             (template_app (template_hole 12, template_var 4),
              template_var 3))),
        template_equation
         (template_app
           (template_app (template_hole 10, template_var 2),
            template_var 5),
          template_app
           (template_hole 9,
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 6),
               template_var 2)),
           template_var 5),
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 1))),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0)))))),
    ("Generic_SimpleFw.simple_fw_join2",
     "(simple_fw ?rs1.0 ?p = Decision FinalAllow &
       simple_fw ?rs2.0 ?p = Decision FinalAllow) =
      (EX m. generalized_sfw
              (map (apsnd
                     (%x. case x of (Accept, b) => b | (Drop, b) => Drop))
                (generalized_fw_join (map simple_rule_dtor ?rs1.0)
                  (map simple_rule_dtor ?rs2.0)))
              ?p =
             Some (m, Accept))",
     template_equation
      (template_app
        (template_app
          (template_hole 18,
           template_app
            (template_app
              (template_hole 17,
               template_app
                (template_app (template_hole 16, template_var 2),
                 template_var 1)),
             template_app (template_hole 15, template_hole 14))),
         template_app
          (template_app
            (template_hole 17,
             template_app
              (template_app (template_hole 16, template_var 0),
               template_var 1)),
           template_app (template_hole 15, template_hole 14))),
       template_app (template_hole 13, t_empty))),
    ("Generic_SimpleFw.generalized_fw_joinD",
     "generalized_sfw (generalized_fw_join ?f1.0 ?f2.0) ?p =
      Some (?u, ?d1.0, ?d2.0) ==>
      EX r1 r2.
         generalized_sfw ?f1.0 ?p = Some (r1, ?d1.0) &
         generalized_sfw ?f2.0 ?p = Some (r2, ?d2.0) &
         Some ?u = simple_match_and r1 r2",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 17,
              template_app
               (template_app (template_hole 16, template_var 5),
                template_var 4)),
            template_var 3),
          template_app
           (template_hole 15,
            template_app
             (template_app (template_hole 14, template_var 2),
              template_app
               (template_app (template_hole 13, template_var 1),
                template_var 0))))],
       template_predicate (template_app (template_hole 12, t_empty)))),
    ("Generic_SimpleFw.simple_fw_join",
     "(simple_fw ?rs1.0 ?p = Decision FinalAllow &
       simple_fw ?rs2.0 ?p = Decision FinalAllow) =
      (simple_fw
        (map (%(u, a, b).
                 SimpleRule u
                  (if a = Accept & b = Accept then Accept else Drop))
          (generalized_fw_join (map simple_rule_dtor ?rs1.0)
            (map simple_rule_dtor ?rs2.0)))
        ?p =
       Decision FinalAllow)",
     template_bimplication
      (template_predicate
        (
           template_app
            (template_app
              (template_hole 15,
               template_app
                (template_app
                  (template_hole 14,
                   template_app
                    (template_app (template_hole 13, template_var 2),
                     template_var 1)),
                 template_app (template_hole 12, template_hole 11))),
             template_app
              (template_app
                (template_hole 14,
                 template_app
                  (template_app (template_hole 13, template_var 0),
                   template_var 1)),
               template_app (template_hole 12, template_hole 11)))
           ),
       template_equation
        (template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app
                (template_hole 10, template_app (template_hole 9, t_empty)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 0)))),
           template_var 1),
         template_app (template_hole 12, template_hole 11))))]:
   (string * thm * template) list
### theory "Draft.Generic_SimpleFwTemplates"
### 0.645s elapsed time, 0.836s cpu time, 0.104s GC time
val it = (): unit
