Loading theory "Draft.Iface" (required by "Draft.SimpleFw_SemanticsTemplates" via "Draft.SimpleFw_Semantics" via "Draft.SimpleFw_Syntax")
Loading theory "Draft.Firewall_Common_Decision_State" (required by "Draft.SimpleFw_SemanticsTemplates" via "Draft.SimpleFw_Semantics" via "Draft.SimpleFw_Syntax")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SimpleFw_SemanticsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SimpleFw_SemanticsTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.129s elapsed time, 0.525s cpu time, 0.053s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SimpleFw_SemanticsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
Found termination order: "size_list size <*mlex*> {}"
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  iface :: linorder
  less_eq_iface == less_eq :: iface => iface => bool
  less_iface == less :: iface => iface => bool
### theory "HOL-Library.Nat_Bijection"
### 0.317s elapsed time, 1.265s cpu time, 0.131s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SimpleFw_SemanticsTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.279s elapsed time, 1.098s cpu time, 0.078s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SimpleFw_SemanticsTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "{}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "{}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### theory "Draft.Firewall_Common_Decision_State"
### 0.921s elapsed time, 3.637s cpu time, 0.334s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SimpleFw_SemanticsTemplates" via "Draft.ExtrEqs")
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### theory "Draft.Iface"
### 1.313s elapsed time, 5.034s cpu time, 0.854s GC time
Loading theory "Draft.Lib_Enum_toString" (required by "Draft.SimpleFw_SemanticsTemplates" via "Draft.SimpleFw_Semantics" via "Draft.SimpleFw_Syntax" via "Draft.L4_Protocol")
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "{}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "HOL-Library.Stream"
### 1.106s elapsed time, 4.207s cpu time, 0.786s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Lib_Enum_toString"
### 0.248s elapsed time, 0.857s cpu time, 0.064s GC time
Loading theory "Draft.L4_Protocol" (required by "Draft.SimpleFw_SemanticsTemplates" via "Draft.SimpleFw_Semantics" via "Draft.SimpleFw_Syntax")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.854s elapsed time, 2.906s cpu time, 0.247s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
### theory "HOL-Library.Tree"
### 2.024s elapsed time, 6.452s cpu time, 1.033s GC time
Loading theory "Draft.Templates" (required by "Draft.SimpleFw_SemanticsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.056s elapsed time, 0.128s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SimpleFw_SemanticsTemplates")
instantiation
  tcp_flag :: enum
  enum_tcp_flag == enum_class.enum :: tcp_flag list
  enum_all_tcp_flag == enum_class.enum_all :: (tcp_flag => bool) => bool
  enum_ex_tcp_flag == enum_class.enum_ex :: (tcp_flag => bool) => bool
Found termination order: "{}"
### theory "Draft.L4_Protocol"
### 1.464s elapsed time, 3.453s cpu time, 0.365s GC time
Loading theory "Draft.Simple_Packet" (required by "Draft.SimpleFw_SemanticsTemplates" via "Draft.SimpleFw_Semantics" via "Draft.SimpleFw_Syntax")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.561s elapsed time, 1.203s cpu time, 0.118s GC time
"(| p_iiface = ''eth1'', p_oiface = [], p_src = 0, p_dst = 0, p_proto = 6,
    p_sport = 0, p_dport = 0, p_tcp_flags = {TCP_SYN},
    p_payload = ''arbitrary payload'' |)"
  :: "'a simple_packet"
### theory "Draft.Simple_Packet"
### 1.333s elapsed time, 1.870s cpu time, 0.170s GC time
Loading theory "Draft.SimpleFw_Syntax" (required by "Draft.SimpleFw_SemanticsTemplates" via "Draft.SimpleFw_Semantics")
### theory "Draft.SimpleFw_Syntax"
### 1.648s elapsed time, 1.756s cpu time, 0.154s GC time
Loading theory "Draft.SimpleFw_Semantics" (required by "Draft.SimpleFw_SemanticsTemplates")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.SimpleFw_Semantics"
### 1.064s elapsed time, 1.173s cpu time, 0.123s GC time
Loading theory "Draft.SimpleFw_SemanticsTemplates"
val templateLemmas =
   [("SimpleFw_Semantics.simple_match_any",
     "simple_matches simple_match_any ?p",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("SimpleFw_Semantics.simple_match_none",
     "~ simple_matches simple_match_none ?p",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0)
             )
         )),
    ("SimpleFw_Semantics.simple_fw_alt",
     "simple_fw ?r ?p = simple_fw_alt ?r ?p",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("SimpleFw_Semantics.cut_off_after_match_any",
     "simple_fw (cut_off_after_match_any ?rs) ?p = simple_fw ?rs ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("SimpleFw_Semantics.wordinterval_to_set_ipcidr_tuple_to_wordinterval_simple_match_ip_set",
     "wordinterval_to_set (ipcidr_tuple_to_wordinterval ?ip) =
      {d. simple_match_ip ?ip d}",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app (template_hole 1, t_empty))),
    ("SimpleFw_Semantics.empty_match",
     "empty_match ?m = (ALL p. ~ simple_matches ?m p)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app (template_hole 2, t_empty))),
    ("SimpleFw_Semantics.simple_match_port_code",
     "simple_match_port (?s, ?e) ?p_p = (?s <= ?p_p & ?p_p <= ?e)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("SimpleFw_Semantics.simple_ports_conjunct_correct",
     "(simple_match_port ?p1.0 ?pkt & simple_match_port ?p2.0 ?pkt) =
      simple_match_port (simpl_ports_conjunct ?p1.0 ?p2.0) ?pkt",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0), template_var 1)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("SimpleFw_Semantics.simple_match_and_NoneD",
     "simple_match_and ?m1.0 ?m2.0 = None ==>
      ~ (simple_matches ?m1.0 ?p & simple_matches ?m2.0 ?p)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_hole 3)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))
               )
           ))),
    ("SimpleFw_Semantics.simple_match_ip_conjunct",
     "(simple_match_ip ?ip1.0 ?p_ip & simple_match_ip ?ip2.0 ?p_ip) =
      (case ipcidr_conjunct ?ip1.0 ?ip2.0 of None => False
       | Some ipx => simple_match_ip ipx ?p_ip)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 0), template_var 1)),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), t_empty),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("SimpleFw_Semantics.simple_match_and_correct",
     "(simple_matches ?m1.0 ?p & simple_matches ?m2.0 ?p) =
      (case simple_match_and ?m1.0 ?m2.0 of None => False
       | Some m => simple_matches m ?p)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 0), template_var 1)),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), t_empty),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("SimpleFw_Semantics.nomatch",
     "~ simple_matches ?m ?p ==>
      simple_fw (SimpleRule ?m ?a # ?rs) ?p = simple_fw ?rs ?p",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1)),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_var 2)))),
    ("SimpleFw_Semantics.simple_fw_not_matches_removeAll",
     "~ simple_matches ?m ?p ==>
      simple_fw (removeAll (SimpleRule ?m ?a) ?rs) ?p = simple_fw ?rs ?p",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1)),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_var 2)))),
    ("SimpleFw_Semantics.simple_match_port_UNIV",
     "({p. simple_match_port (?s, ?e) p} = UNIV) = (?s = 0 & ?e = - 1)",
     template_bimplication
      (template_equation
        (template_app (template_hole 8, t_empty), template_hole 5),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("SimpleFw_Semantics.simple_match_and_valid",
     "[| simple_match_valid ?m1.0; simple_match_valid ?m2.0;
         simple_match_and ?m1.0 ?m2.0 = Some ?m |]
      ==> simple_match_valid ?m",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (template_app (template_hole 3, template_var 0)))),
    ("SimpleFw_Semantics.ipcidr_conjunct_valid",
     "[| valid_prefix_fw ?p1.0; valid_prefix_fw ?p2.0;
         ipcidr_conjunct ?p1.0 ?p2.0 = Some ?p |]
      ==> valid_prefix_fw ?p",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (template_app (template_hole 3, template_var 0)))),
    ("SimpleFw_Semantics.simple_match_and_SomeD",
     "simple_match_and ?m1.0 ?m2.0 = Some ?m ==>
      simple_matches ?m ?p =
      (simple_matches ?m1.0 ?p & simple_matches ?m2.0 ?p)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 2),
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("SimpleFw_Semantics.simple_matches_andD",
     "[| simple_matches ?m1.0 ?p; simple_matches ?m2.0 ?p |]
      ==> EX m. simple_match_and ?m1.0 ?m2.0 = Some m &
                simple_matches m ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("SimpleFw_Semantics.simple_matches_extended_packet",
     "simple_matches ?m
       (| p_iiface = ?iifce, p_oiface = ?oifce, p_src = ?s, p_dst = ?d,
          p_proto = ?prot, p_sport = ?sport, p_dport = ?dport,
          p_tcp_flags = ?tcp_flags, p_payload = ?payload1.0 |) =
      simple_matches ?m
       (| p_iiface = ?iifce, p_oiface = ?oifce, p_src = ?s, p_dst = ?d,
          p_proto = ?prot, p_sport = ?sport, p_dport = ?dport,
          p_tcp_flags = ?tcp_flags2.0, p_payload = ?payload2.0,
          ... = ?aux |)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 12),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 3, template_var 11),
                           template_var 10),
                         template_var 9),
                       template_var 8),
                     template_var 7),
                   template_var 6),
                 template_var 5),
               template_var 4),
             template_var 3),
           template_hole 2)),
       template_app
        (template_app (template_hole 1, template_var 12),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 0, template_var 11),
                           template_var 10),
                         template_var 9),
                       template_var 8),
                     template_var 7),
                   template_var 6),
                 template_var 5),
               template_var 2),
             template_var 1),
           template_var 0))))]:
   (string * thm * template) list
### theory "Draft.SimpleFw_SemanticsTemplates"
### 0.959s elapsed time, 1.901s cpu time, 1.087s GC time
val it = (): unit
