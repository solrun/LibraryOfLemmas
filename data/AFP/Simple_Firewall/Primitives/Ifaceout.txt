Loading theory "Draft.Iface" (required by "Draft.IfaceTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.IfaceTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.IfaceTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.IfaceTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.121s elapsed time, 0.498s cpu time, 0.048s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.IfaceTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.199s elapsed time, 0.810s cpu time, 0.048s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.IfaceTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
instantiation
  iface :: linorder
  less_eq_iface == less_eq :: iface => iface => bool
  less_iface == less :: iface => iface => bool
### theory "HOL-Library.Nat_Bijection"
### 0.322s elapsed time, 1.277s cpu time, 0.122s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.IfaceTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "{}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.BigO"
### 0.986s elapsed time, 3.724s cpu time, 0.927s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "Draft.Iface"
### 1.365s elapsed time, 5.084s cpu time, 0.975s GC time
### theory "HOL-Library.Stream"
### 1.087s elapsed time, 3.935s cpu time, 0.933s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.893s elapsed time, 5.399s cpu time, 1.066s GC time
Loading theory "Draft.Templates" (required by "Draft.IfaceTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.050s elapsed time, 0.066s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.IfaceTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.480s elapsed time, 0.518s cpu time, 0.049s GC time
Loading theory "Draft.IfaceTemplates"
val templateLemmas =
   [("Iface.internal_iface_name_match_refl",
     "internal_iface_name_match ?i ?i",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Iface.match_ifaceAny", "match_iface ifaceAny ?i",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Iface.match_iface_refl", "match_iface (Iface ?x) ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 0)
         )),
    ("Iface.less_eq_empty", "Iface [] <= ?q",
     template_inequation
      (less_equals, template_app (template_hole 1, template_hole 0),
       template_var 0)),
    ("Iface.internal_iface_name_wildcard_longest_refl",
     "??.Iface.internal_iface_name_wildcard_longest ?i ?i = Some ?i",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Iface.iface_conjunct_ifaceAny",
     "iface_conjunct ifaceAny ?i = Some ?i",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Iface.iface_conjunct_commute",
     "iface_conjunct ?i1.0 ?i2.0 = iface_conjunct ?i2.0 ?i1.0",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Iface.internal_iface_name_to_set2",
     "??.Iface.internal_iface_name_to_set ?ifce =
      {i. internal_iface_name_match ?ifce i}",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Iface.internal_iface_name_to_set",
     "internal_iface_name_match ?i ?p_iface =
      (?p_iface : ??.Iface.internal_iface_name_to_set ?i)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Iface.match_iface_set",
     "match_iface (Iface ?i) ?p_iface =
      (?p_iface : ??.Iface.internal_iface_name_to_set ?i)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Iface.match_iface_eqI", "?x = Iface ?y ==> match_iface ?x ?y",
     template_implication
      ([template_equation
         (template_var 1, template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Iface.Iface_less_eq_empty", "Iface ?x <= Iface [] ==> ?x = []",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 2, template_var 0),
          template_app (template_hole 2, template_hole 1))],
       template_equation (template_var 0, template_hole 1))),
    ("Iface.strings_of_length_n",
     "set (List.n_lists ?n ??.Iface.all_chars) = {s. length s = ?n}",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 0),
           template_hole 3)),
       template_app (template_hole 2, t_empty))),
    ("Iface.match_iface_case_nowildcard",
     "~ iface_name_is_wildcard ?i ==>
      match_iface (Iface ?i) ?p_i = (?i = ?p_i)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 1))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 1)),
                template_var 0)
              )],
         template_equation (template_var 1, template_var 0)))),
    ("Iface.non_wildcard_ifaces",
     "set (??.Iface.non_wildcard_ifaces ?n) =
      {s. length s = ?n & ~ iface_name_is_wildcard s}",
     template_equation
      (template_app
        (template_hole 7, template_app (template_hole 6, template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("Iface.non_wildcard_ifaces_upto",
     "set (??.Iface.non_wildcard_ifaces_upto ?n) =
      {s. length s <= ?n & ~ iface_name_is_wildcard s}",
     template_equation
      (template_app
        (template_hole 7, template_app (template_hole 6, template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("Iface.compress_pos_interfaces_None",
     "compress_pos_interfaces ?ifces = None ==>
      ~ (ALL i:set ?ifces. match_iface i ?p_i)",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1), template_hole 4)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 1)),
                 t_empty)
               )
           ))),
    ("Iface.iface_name_is_wildcard_fst",
     "[| iface_name_is_wildcard (?i # ?is); ?is ~= [] |]
      ==> iface_name_is_wildcard ?is",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            ),
        template_negation
         (template_equation (template_var 0, template_hole 0))],
       template_predicate
        (template_app (template_hole 4, template_var 0)))),
    ("Iface.iface_subset",
     "iface_subset ?i1.0 ?i2.0 =
      ({i. match_iface ?i1.0 i} <= {i. match_iface ?i2.0 i})",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, t_empty)),
         template_app (template_hole 1, t_empty)))),
    ("Iface.internal_iface_name_subset",
     "??.Iface.internal_iface_name_subset ?i1.0 ?i2.0 =
      ({i. internal_iface_name_match ?i1.0 i}
       <= {i. internal_iface_name_match ?i2.0 i})",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, t_empty)),
         template_app (template_hole 1, t_empty)))),
    ("Iface.iface_conjunct_None",
     "iface_conjunct ?i1.0 ?i2.0 = None ==>
      ~ (match_iface ?i1.0 ?p_i & match_iface ?i2.0 ?p_i)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_hole 3)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))
               )
           ))),
    ("Iface.internal_iface_name_wildcard_longest_commute",
     "[| iface_name_is_wildcard ?i1.0; iface_name_is_wildcard ?i2.0 |]
      ==> ??.Iface.internal_iface_name_wildcard_longest ?i1.0 ?i2.0 =
          ??.Iface.internal_iface_name_wildcard_longest ?i2.0 ?i1.0",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Iface.iface_conjunct",
     "(match_iface ?i1.0 ?p_i & match_iface ?i2.0 ?p_i) =
      (case iface_conjunct ?i1.0 ?i2.0 of None => False
       | Some x => match_iface x ?p_i)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 0), template_var 1)),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), t_empty),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Iface.match_iface_case_wildcard_length",
     "[| iface_name_is_wildcard ?i; match_iface (Iface ?i) ?p_i |]
      ==> length ?i - 1 <= length ?p_i",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_hole 0),
         template_app (template_hole 1, template_var 0)))),
    ("Iface.match_iface_case_wildcard_prefix",
     "iface_name_is_wildcard ?i ==>
      match_iface (Iface ?i) ?p_i =
      (butlast ?i = take (length ?i - 1) ?p_i)",
     template_implication
      ([template_predicate
         (template_app (template_hole 9, template_var 1))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 1)),
                template_var 0)
              )],
         template_equation
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 1)),
                 template_hole 0)),
             template_var 0))))),
    ("Iface.compress_pos_interfaces_Some",
     "compress_pos_interfaces ?ifces = Some ?ifce ==>
      match_iface ?ifce ?p_i = (ALL i:set ?ifces. match_iface i ?p_i)",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 2),
          template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           t_empty)))),
    ("Iface.iface_conjunct_Some",
     "iface_conjunct ?i1.0 ?i2.0 = Some ?x ==>
      match_iface ?x ?p_i =
      (match_iface ?i1.0 ?p_i & match_iface ?i2.0 ?p_i)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 2),
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("Iface.iface_name_is_wildcard_alt",
     "iface_name_is_wildcard ?eth = (?eth ~= [] & last ?eth = CHR ''+'')",
     template_implication
      ([template_predicate
         (template_app (template_hole 9, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 0),
                   template_hole 5))),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 0)),
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_hole 2, template_hole 1),
                             template_hole 1),
                           template_hole 0),
                         template_hole 1),
                       template_hole 0),
                     template_hole 1),
                   template_hole 0),
                 template_hole 0)))
           ))),
    ("Iface.iface_name_is_wildcard_alt'",
     "iface_name_is_wildcard ?eth =
      (?eth ~= [] & hd (rev ?eth) = CHR ''+'')",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 0),
                   template_hole 6))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0))),
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_hole 2, template_hole 1),
                             template_hole 1),
                           template_hole 0),
                         template_hole 1),
                       template_hole 0),
                     template_hole 1),
                   template_hole 0),
                 template_hole 0)))
           ))),
    ("Iface.match_iface_case_wildcard",
     "iface_name_is_wildcard ?i ==>
      match_iface (Iface ?i) ?p_i =
      (butlast ?i = take (length ?i - 1) ?p_i &
       length ?i - 1 <= length ?p_i)",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 8, template_var 1)),
                template_var 0)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_var 1)),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app (template_hole 2, template_var 1)),
                         template_hole 1)),
                     template_var 0))),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 1)),
                     template_hole 1)),
                 template_app (template_hole 2, template_var 0)))
             )))),
    ("Iface.iface_cons_less_eq_i",
     "Iface (?b # ?bs) <= ?i ==>
      EX q qs. ?i = Iface (q # qs) & (?b < q | Iface ?bs <= Iface qs)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)),
          template_var 0)],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Iface.internal_iface_name_wildcard_longest_correct",
     "[| iface_name_is_wildcard ?i1.0; iface_name_is_wildcard ?i2.0 |]
      ==> (match_iface (Iface ?i1.0) ?p_i &
           match_iface (Iface ?i2.0) ?p_i) =
          (case ??.Iface.internal_iface_name_wildcard_longest ?i1.0 ?i2.0 of
           None => False | Some x => match_iface (Iface x) ?p_i)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 2)),
               template_var 0)),
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1), t_empty),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("Iface.butlast_take_length_helper",
     "[| length ?i2.0 <= length ?i1.0;
         take (length ?i2.0 - Suc 0) ?i1.0 = butlast ?i2.0;
         butlast ?i1.0 = take (length ?i1.0 - Suc 0) ?x |]
      ==> butlast ?i2.0 = take (length ?i2.0 - Suc 0) ?x",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 6, template_var 2),
          template_app (template_hole 6, template_var 1)),
        template_equation
         (template_app
           (template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 6, template_var 2)),
                template_app (template_hole 2, template_hole 1))),
            template_var 1),
          template_app (template_hole 0, template_var 2)),
        template_equation
         (template_app (template_hole 0, template_var 1),
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 6, template_var 1)),
                template_app (template_hole 2, template_hole 1))),
            template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 6, template_var 2)),
               template_app (template_hole 2, template_hole 1))),
           template_var 0)))),
    ("Iface.inv_iface_name_set",
     "- ??.Iface.internal_iface_name_to_set ?i =
      (if iface_name_is_wildcard ?i
       then {c |c. length c < length (butlast ?i)} Un
            {c @ cs |c cs. length c = length (butlast ?i) & c ~= butlast ?i}
       else {c |c. length c < length ?i} Un
            {c @ cs |c cs. length ?i <= length c & c ~= ?i})",
     template_equation
      (template_app
        (template_hole 15, template_app (template_hole 14, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 13,
             template_app (template_hole 12, template_var 0)),
           template_app
            (template_app
              (template_hole 11, template_app (template_hole 10, t_empty)),
             template_app (template_hole 10, t_empty))),
         template_app
          (template_app
            (template_hole 11, template_app (template_hole 10, t_empty)),
           template_app (template_hole 10, t_empty)))))]:
   (string * thm * template) list
### theory "Draft.IfaceTemplates"
### 0.312s elapsed time, 0.438s cpu time, 0.053s GC time
val it = (): unit
