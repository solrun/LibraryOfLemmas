Loading theory "Draft.IP_Partition_Preliminaries" (required by "Draft.IP_Partition_PreliminariesTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.IP_Partition_PreliminariesTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.IP_Partition_PreliminariesTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.IP_Partition_PreliminariesTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.126s elapsed time, 0.508s cpu time, 0.048s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.IP_Partition_PreliminariesTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "length <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.274s elapsed time, 1.096s cpu time, 0.048s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.IP_Partition_PreliminariesTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.392s elapsed time, 1.548s cpu time, 0.121s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.IP_Partition_PreliminariesTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.BigO"
### 0.907s elapsed time, 3.407s cpu time, 0.782s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.037s elapsed time, 3.716s cpu time, 0.880s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.IP_Partition_Preliminaries"
### 1.524s elapsed time, 5.461s cpu time, 1.001s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.899s elapsed time, 5.577s cpu time, 1.072s GC time
Loading theory "Draft.Templates" (required by "Draft.IP_Partition_PreliminariesTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.050s elapsed time, 0.064s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.IP_Partition_PreliminariesTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.488s elapsed time, 0.544s cpu time, 0.072s GC time
Loading theory "Draft.IP_Partition_PreliminariesTemplates"
val templateLemmas =
   [("IP_Partition_Preliminaries.disjointPartitioning",
     "disjoint (??.IP_Partition_Preliminaries.partitioning ?ss {})",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("IP_Partition_Preliminaries.partList2_empty",
     "??.IP_Partition_Preliminaries.partList2 {} ?ts = ?ts",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("IP_Partition_Preliminaries.ipPartitioning",
     "ipPartition (set ?ts)
       (??.IP_Partition_Preliminaries.partitioning ?ts {})",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("IP_Partition_Preliminaries.disjoint_list_disjoint_list_rec",
     "disjoint_list ?ts ==>
      ??.IP_Partition_Preliminaries.disjoint_list_rec ?ts",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("IP_Partition_Preliminaries.partitioning_nottail_equi",
     "??.IP_Partition_Preliminaries.partitioning_nontail ?ss ?ts =
      ??.IP_Partition_Preliminaries.partitioning ?ss ?ts",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("IP_Partition_Preliminaries.partList4",
     "partList4 ?s ?ts = ??.IP_Partition_Preliminaries.partList3 ?s ?ts",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("IP_Partition_Preliminaries.ipPartitioningAddSubset2",
     "ipPartition {?a} (??.IP_Partition_Preliminaries.addSubsetSet ?a ?ts)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("IP_Partition_Preliminaries.disjoint_equi",
     "??.IP_Partition_Preliminaries.disjoint_list_rec ?ts ==>
      disjoint (set ?ts)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("IP_Partition_Preliminaries.coversallPartitioning",
     "\<Union> (set ?ts) =
      \<Union> (??.IP_Partition_Preliminaries.partitioning ?ts {})",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("IP_Partition_Preliminaries.partitioning_foldr",
     "??.IP_Partition_Preliminaries.partitioning ?X ?B =
      foldr ??.IP_Partition_Preliminaries.addSubsetSet ?X ?B",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 1),
         template_var 0))),
    ("IP_Partition_Preliminaries.addSubsetSetI",
     "?s - \<Union> ?ts
      : ??.IP_Partition_Preliminaries.addSubsetSet ?s ?ts",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 1, template_var 0))),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("IP_Partition_Preliminaries.disjointPartitioning_helper",
     "disjoint ?As ==>
      disjoint (??.IP_Partition_Preliminaries.partitioning ?ss ?As)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("IP_Partition_Preliminaries.disjointAddSubset",
     "disjoint ?ts ==>
      disjoint (??.IP_Partition_Preliminaries.addSubsetSet ?a ?ts)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("IP_Partition_Preliminaries.disjoint_sublist",
     "disjoint_list (?t # ?ts) ==> disjoint_list ?ts",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("IP_Partition_Preliminaries.Union_addSubsetSet",
     "\<Union> (??.IP_Partition_Preliminaries.addSubsetSet ?b ?As) =
      ?b Un \<Union> ?As",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("IP_Partition_Preliminaries.coversallAddSubset",
     "\<Union> (insert ?a ?ts) =
      \<Union> (??.IP_Partition_Preliminaries.addSubsetSet ?a ?ts)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IP_Partition_Preliminaries.union_set_partList4",
     "\<Union> (set (partList4 ?s ?ts)) = \<Union> (set ?ts)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)))),
    ("IP_Partition_Preliminaries.ipPartioningAddSubset0",
     "disjoint ?ts ==>
      ipPartition ?ts (??.IP_Partition_Preliminaries.addSubsetSet ?a ?ts)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("IP_Partition_Preliminaries.ipPartitioning_helper",
     "disjoint ?As ==>
      ipPartition (set ?ts)
       (??.IP_Partition_Preliminaries.partitioning ?ts ?As)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("IP_Partition_Preliminaries.addSubsetSetCom",
     "??.IP_Partition_Preliminaries.addSubsetSet ?a
       (??.IP_Partition_Preliminaries.addSubsetSet ?b ?As) =
      ??.IP_Partition_Preliminaries.addSubsetSet ?b
       (??.IP_Partition_Preliminaries.addSubsetSet ?a ?As)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("IP_Partition_Preliminaries.partitioningCom",
     "??.IP_Partition_Preliminaries.addSubsetSet ?a
       (??.IP_Partition_Preliminaries.partitioning ?ss ?ts) =
      ??.IP_Partition_Preliminaries.partitioning ?ss
       (??.IP_Partition_Preliminaries.addSubsetSet ?a ?ts)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("IP_Partition_Preliminaries.ipPartitioningAddSubset1",
     "disjoint ?ts ==>
      ipPartition (insert ?a ?ts)
       (??.IP_Partition_Preliminaries.addSubsetSet ?a ?ts)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("IP_Partition_Preliminaries.difList_equi",
     "??.IP_Partition_Preliminaries.disjoint_list_rec ?ts ==>
      ??.IP_Partition_Preliminaries.difference_list ?s ?ts =
      ??.IP_Partition_Preliminaries.difference_list_opt ?s ?ts",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("IP_Partition_Preliminaries.intList_equi",
     "??.IP_Partition_Preliminaries.disjoint_list_rec ?ts ==>
      ??.IP_Partition_Preliminaries.intersection_list ?s ?ts =
      ??.IP_Partition_Preliminaries.intersection_list_opt ?s ?ts",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("IP_Partition_Preliminaries.addSubsetSetI",
     "?t : ?ts ==>
      ?t - ?s : ??.IP_Partition_Preliminaries.addSubsetSet ?s ?ts",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("IP_Partition_Preliminaries.addSubsetSetI",
     "?t : ?ts ==>
      ?s Int ?t : ??.IP_Partition_Preliminaries.addSubsetSet ?s ?ts",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("IP_Partition_Preliminaries.ipPartitionUnion",
     "(ipPartition ?As ?Cs & ipPartition ?Bs ?Cs) =
      ipPartition (?As Un ?Bs) ?Cs",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0), template_var 1)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("IP_Partition_Preliminaries.partList0_partList1_equi",
     "??.IP_Partition_Preliminaries.disjoint_list_rec ?ts ==>
      set (??.IP_Partition_Preliminaries.partList0 ?s ?ts) =
      set (??.IP_Partition_Preliminaries.partList1 ?s ?ts)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("IP_Partition_Preliminaries.partList_sub_equi0",
     "set (??.IP_Partition_Preliminaries.partList0 ?s ?ts) =
      set (??.IP_Partition_Preliminaries.difference_list ?s ?ts) Un
      set (??.IP_Partition_Preliminaries.intersection_list ?s ?ts)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("IP_Partition_Preliminaries.partList_sub_equi",
     "set (??.IP_Partition_Preliminaries.partList1 ?s ?ts) =
      set (??.IP_Partition_Preliminaries.difference_list_opt ?s ?ts) Un
      set (??.IP_Partition_Preliminaries.intersection_list_opt ?s ?ts)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("IP_Partition_Preliminaries.partList4_empty",
     "{} ~: set ?ts ==> {} ~: set (partList4 ?s ?ts)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_app (template_hole 1, template_var 1))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 1)))
               )
           ))),
    ("IP_Partition_Preliminaries.partitioning1_empty0",
     "{} ~: set ?ts ==> {} ~: set (partitioning1 ?ss ?ts)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_app (template_hole 1, template_var 1))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 1)))
               )
           ))),
    ("IP_Partition_Preliminaries.partList4_subset",
     "?a <= \<Union> (set ?ts) ==> ?a <= \<Union> (set (partList4 ?b ?ts))",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_hole 2,
            template_app (template_hole 1, template_var 1)))],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("IP_Partition_Preliminaries.partitioning1_subset",
     "?a <= \<Union> (set ?ts) ==>
      ?a <= \<Union> (set (partitioning1 ?ss ?ts))",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_hole 2,
            template_app (template_hole 1, template_var 1)))],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("IP_Partition_Preliminaries.partList4_distinct",
     "[| {} ~: set ?ts; disjoint_list ?ts |]
      ==> distinct (partList4 ?s ?ts)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_app (template_hole 3, template_var 1))
                )
            ),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("IP_Partition_Preliminaries.partList4_disjoint",
     "[| ?s <= \<Union> (set ?ts);
         ??.IP_Partition_Preliminaries.disjoint_list_rec ?ts |]
      ==> ??.IP_Partition_Preliminaries.disjoint_list_rec
           (partList4 ?s ?ts)",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app
           (template_hole 3,
            template_app (template_hole 2, template_var 0))),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("IP_Partition_Preliminaries.inter_dif_help_lemma",
     "?A Int ?B = {} ==> ?B - ?S = ?B - (?S - ?A)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_hole 1)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("IP_Partition_Preliminaries.partList4_complete0",
     "?s <= \<Union> (set ?ts) ==>
      \<Union> (set (partList4 ?s ?ts)) = \<Union> (set ?ts)",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app
           (template_hole 3,
            template_app (template_hole 2, template_var 0)))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))))),
    ("IP_Partition_Preliminaries.partList1_partList2_equi",
     "set (??.IP_Partition_Preliminaries.partList1 ?s ?ts) - {{}} =
      set (??.IP_Partition_Preliminaries.partList2 ?s ?ts) - {{}}",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_hole 1)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_hole 1)))),
    ("IP_Partition_Preliminaries.partList2_partList3_equi",
     "set (??.IP_Partition_Preliminaries.partList2 ?s ?ts) - {{}} =
      set (??.IP_Partition_Preliminaries.partList3 ?s ?ts) - {{}}",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_hole 1)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_hole 1)))),
    ("IP_Partition_Preliminaries.partitioning1_disjoint",
     "[| \<Union> (set ?ss) <= \<Union> (set ?ts);
         ??.IP_Partition_Preliminaries.disjoint_list_rec ?ts |]
      ==> ??.IP_Partition_Preliminaries.disjoint_list_rec
           (partitioning1 ?ss ?ts)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 3,
            template_app (template_hole 2, template_var 1)),
          template_app
           (template_hole 3,
            template_app (template_hole 2, template_var 0))),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("IP_Partition_Preliminaries.partList0_set_equi",
     "set (??.IP_Partition_Preliminaries.partList0 ?s ?ts) =
      (Int) ?s ` set ?ts Un (%x. x - ?s) ` set ?ts",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 5, template_var 0))),
         template_app
          (template_app (template_hole 2, t_empty),
           template_app (template_hole 5, template_var 0))))),
    ("IP_Partition_Preliminaries.ipPartitionSingleSet",
     "ipPartition {?t}
       (??.IP_Partition_Preliminaries.addSubsetSet ?t ?Bs) ==>
      ipPartition {?t}
       (??.IP_Partition_Preliminaries.partitioning ?ts
         (??.IP_Partition_Preliminaries.addSubsetSet ?t ?Bs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_hole 2)),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_hole 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)))
           ))),
    ("IP_Partition_Preliminaries.partitioning1_empty1",
     "{} ~: set ?ts ==>
      set (partitioning1 ?ss ?ts) - {{}} = set (partitioning1 ?ss ?ts)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_app (template_hole 5, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1))),
           template_app
            (template_app (template_hole 1, template_hole 6),
             template_hole 0)),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1))))),
    ("IP_Partition_Preliminaries.disjoint_intersection",
     "[| disjoint ?A; ?a : ?A |] ==> disjoint ({?a Int ?b} Un (?A - {?a}))",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_var 0)),
                   template_hole 1)),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_hole 1))))
           ))),
    ("IP_Partition_Preliminaries.disjoint_list_lem",
     "disjoint_list ?ls ==>
      ALL s:set ?ls. ALL t:set ?ls. s ~= t --> s Int t = {}",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 0)),
             t_empty)
           ))),
    ("IP_Partition_Preliminaries.partList4_disjoint_list",
     "[| ?s <= \<Union> (set ?ts); disjoint_list ?ts; {} ~: set ?ts |]
      ==> disjoint_list (partList4 ?s ?ts)",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_var 0))),
        template_predicate (template_app (template_hole 4, template_var 0)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_app (template_hole 5, template_var 0))
                )
            )],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("IP_Partition_Preliminaries.partList0_addSubsetSet_equi",
     "?s <= \<Union> (set ?ts) ==>
      ??.IP_Partition_Preliminaries.addSubsetSet ?s (set ?ts) - {{}} =
      set (??.IP_Partition_Preliminaries.partList0 ?s ?ts) - {{}}",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app
           (template_hole 8,
            template_app (template_hole 7, template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app (template_hole 7, template_var 0))),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_hole 1)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_hole 1))))),
    ("IP_Partition_Preliminaries.disjoint_subset",
     "[| disjoint ?A; ?a : ?A; ?b <= ?a |]
      ==> disjoint (?A - {?a} Un {?b})",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_predicate
        (
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_hole 0))),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)))
           ))),
    ("IP_Partition_Preliminaries.partitioning1_disjoint_list",
     "[| {} ~: set ?ts; \<Union> (set ?ss) <= \<Union> (set ?ts);
         disjoint_list ?ts |]
      ==> disjoint_list (partitioning1 ?ss ?ts)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_app (template_hole 4, template_var 1))
                )
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 2,
            template_app (template_hole 4, template_var 0)),
          template_app
           (template_hole 2,
            template_app (template_hole 4, template_var 1))),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("IP_Partition_Preliminaries.complete_helper",
     "[| {} ~: set ?ts; \<Union> (set ?ss) <= \<Union> (set ?ts) |]
      ==> \<Union> (set ?ts) = \<Union> (set (partitioning1 ?ss ?ts))",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_app (template_hole 4, template_var 1))
                )
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 2,
            template_app (template_hole 4, template_var 0)),
          template_app
           (template_hole 2,
            template_app (template_hole 4, template_var 1)))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 4, template_var 1)),
         template_app
          (template_hole 2,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("IP_Partition_Preliminaries.partList4_distinct_hlp",
     "[| ?a ~= {}; ?a ~: set ?ts; disjoint (insert ?a (set ?ts)) |]
      ==> ?a ~: set (partList4 ?s ?ts)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 5)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app (template_hole 3, template_var 1))
                )
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 2),
                template_app (template_hole 3, template_var 1)))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 1)))
               )
           ))),
    ("IP_Partition_Preliminaries.ipPartitioning_helper_opt",
     "[| {} ~: set ?ts; disjoint_list ?ts;
         \<Union> (set ?ss) <= \<Union> (set ?ts) |]
      ==> ipPartition (set ?ss) (set (partitioning1 ?ss ?ts))",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_app (template_hole 5, template_var 1))
                )
            ),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 2,
            template_app (template_hole 5, template_var 0)),
          template_app
           (template_hole 2,
            template_app (template_hole 5, template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 5, template_var 0)),
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("IP_Partition_Preliminaries.partitioning_equi",
     "[| {} ~: set ?ts; ??.IP_Partition_Preliminaries.disjoint_list_rec ?ts;
         \<Union> (set ?ss) <= \<Union> (set ?ts) |]
      ==> set (partitioning1 ?ss ?ts) =
          ??.IP_Partition_Preliminaries.partitioning_nontail ?ss (set ?ts) -
          {{}}",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 11, template_hole 10),
                  template_app (template_hole 9, template_var 1))
                )
            ),
        template_predicate (template_app (template_hole 8, template_var 1)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 6,
            template_app (template_hole 9, template_var 0)),
          template_app
           (template_hole 6,
            template_app (template_hole 9, template_var 1)))],
       template_equation
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 4, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app (template_hole 9, template_var 1))),
           template_app
            (template_app (template_hole 1, template_hole 10),
             template_hole 0))))),
    ("IP_Partition_Preliminaries.addSubsetSetE",
     "[| ?A : ??.IP_Partition_Preliminaries.addSubsetSet ?s ?ts;
         ?A = ?s - \<Union> ?ts ==> ?thesis;
         !!T. [| T : ?ts; ?A = ?s Int T |] ==> ?thesis;
         !!T. [| T : ?ts; ?A = T - ?s |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_equation
            (template_var 3,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app (template_hole 2, template_var 1)))],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 1, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.IP_Partition_PreliminariesTemplates"
### 0.285s elapsed time, 0.391s cpu time, 0.000s GC time
val it = (): unit
