   [("IP_Partition_Preliminaries.disjointPartitioning",
     "disjoint (??.IP_Partition_Preliminaries.partitioning ?ss {})",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("IP_Partition_Preliminaries.partList2_empty",
     "??.IP_Partition_Preliminaries.partList2 {} ?ts = ?ts",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("IP_Partition_Preliminaries.ipPartitioning",
     "ipPartition (set ?ts)
       (??.IP_Partition_Preliminaries.partitioning ?ts {})",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("IP_Partition_Preliminaries.disjoint_list_disjoint_list_rec",
     "disjoint_list ?ts ==>
      ??.IP_Partition_Preliminaries.disjoint_list_rec ?ts",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("IP_Partition_Preliminaries.partitioning_nottail_equi",
     "??.IP_Partition_Preliminaries.partitioning_nontail ?ss ?ts =
      ??.IP_Partition_Preliminaries.partitioning ?ss ?ts",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("IP_Partition_Preliminaries.partList4",
     "partList4 ?s ?ts = ??.IP_Partition_Preliminaries.partList3 ?s ?ts",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("IP_Partition_Preliminaries.ipPartitioningAddSubset2",
     "ipPartition {?a} (??.IP_Partition_Preliminaries.addSubsetSet ?a ?ts)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("IP_Partition_Preliminaries.disjoint_equi",
     "??.IP_Partition_Preliminaries.disjoint_list_rec ?ts ==>
      disjoint (set ?ts)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("IP_Partition_Preliminaries.coversallPartitioning",
     "\<Union> (set ?ts) =
      \<Union> (??.IP_Partition_Preliminaries.partitioning ?ts {})",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("IP_Partition_Preliminaries.partitioning_foldr",
     "??.IP_Partition_Preliminaries.partitioning ?X ?B =
      foldr ??.IP_Partition_Preliminaries.addSubsetSet ?X ?B",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 1),
         template_var 0))),
    ("IP_Partition_Preliminaries.addSubsetSetI",
     "?s - \<Union> ?ts
      : ??.IP_Partition_Preliminaries.addSubsetSet ?s ?ts",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 1, template_var 0))),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("IP_Partition_Preliminaries.disjointPartitioning_helper",
     "disjoint ?As ==>
      disjoint (??.IP_Partition_Preliminaries.partitioning ?ss ?As)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("IP_Partition_Preliminaries.disjointAddSubset",
     "disjoint ?ts ==>
      disjoint (??.IP_Partition_Preliminaries.addSubsetSet ?a ?ts)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("IP_Partition_Preliminaries.disjoint_sublist",
     "disjoint_list (?t # ?ts) ==> disjoint_list ?ts",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("IP_Partition_Preliminaries.Union_addSubsetSet",
     "\<Union> (??.IP_Partition_Preliminaries.addSubsetSet ?b ?As) =
      ?b Un \<Union> ?As",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("IP_Partition_Preliminaries.coversallAddSubset",
     "\<Union> (insert ?a ?ts) =
      \<Union> (??.IP_Partition_Preliminaries.addSubsetSet ?a ?ts)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("IP_Partition_Preliminaries.union_set_partList4",
     "\<Union> (set (partList4 ?s ?ts)) = \<Union> (set ?ts)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)))),
    ("IP_Partition_Preliminaries.ipPartioningAddSubset0",
     "disjoint ?ts ==>
      ipPartition ?ts (??.IP_Partition_Preliminaries.addSubsetSet ?a ?ts)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("IP_Partition_Preliminaries.ipPartitioning_helper",
     "disjoint ?As ==>
      ipPartition (set ?ts)
       (??.IP_Partition_Preliminaries.partitioning ?ts ?As)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("IP_Partition_Preliminaries.addSubsetSetCom",
     "??.IP_Partition_Preliminaries.addSubsetSet ?a
       (??.IP_Partition_Preliminaries.addSubsetSet ?b ?As) =
      ??.IP_Partition_Preliminaries.addSubsetSet ?b
       (??.IP_Partition_Preliminaries.addSubsetSet ?a ?As)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("IP_Partition_Preliminaries.partitioningCom",
     "??.IP_Partition_Preliminaries.addSubsetSet ?a
       (??.IP_Partition_Preliminaries.partitioning ?ss ?ts) =
      ??.IP_Partition_Preliminaries.partitioning ?ss
       (??.IP_Partition_Preliminaries.addSubsetSet ?a ?ts)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("IP_Partition_Preliminaries.ipPartitioningAddSubset1",
     "disjoint ?ts ==>
      ipPartition (insert ?a ?ts)
       (??.IP_Partition_Preliminaries.addSubsetSet ?a ?ts)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("IP_Partition_Preliminaries.difList_equi",
     "??.IP_Partition_Preliminaries.disjoint_list_rec ?ts ==>
      ??.IP_Partition_Preliminaries.difference_list ?s ?ts =
      ??.IP_Partition_Preliminaries.difference_list_opt ?s ?ts",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("IP_Partition_Preliminaries.intList_equi",
     "??.IP_Partition_Preliminaries.disjoint_list_rec ?ts ==>
      ??.IP_Partition_Preliminaries.intersection_list ?s ?ts =
      ??.IP_Partition_Preliminaries.intersection_list_opt ?s ?ts",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("IP_Partition_Preliminaries.addSubsetSetI",
     "?t : ?ts ==>
      ?t - ?s : ??.IP_Partition_Preliminaries.addSubsetSet ?s ?ts",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("IP_Partition_Preliminaries.addSubsetSetI",
     "?t : ?ts ==>
      ?s Int ?t : ??.IP_Partition_Preliminaries.addSubsetSet ?s ?ts",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("IP_Partition_Preliminaries.ipPartitionUnion",
     "(ipPartition ?As ?Cs & ipPartition ?Bs ?Cs) =
      ipPartition (?As Un ?Bs) ?Cs",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0), template_var 1)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("IP_Partition_Preliminaries.partList0_partList1_equi",
     "??.IP_Partition_Preliminaries.disjoint_list_rec ?ts ==>
      set (??.IP_Partition_Preliminaries.partList0 ?s ?ts) =
      set (??.IP_Partition_Preliminaries.partList1 ?s ?ts)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("IP_Partition_Preliminaries.partList_sub_equi0",
     "set (??.IP_Partition_Preliminaries.partList0 ?s ?ts) =
      set (??.IP_Partition_Preliminaries.difference_list ?s ?ts) Un
      set (??.IP_Partition_Preliminaries.intersection_list ?s ?ts)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("IP_Partition_Preliminaries.partList_sub_equi",
     "set (??.IP_Partition_Preliminaries.partList1 ?s ?ts) =
      set (??.IP_Partition_Preliminaries.difference_list_opt ?s ?ts) Un
      set (??.IP_Partition_Preliminaries.intersection_list_opt ?s ?ts)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("IP_Partition_Preliminaries.partList4_empty",
     "{} ~: set ?ts ==> {} ~: set (partList4 ?s ?ts)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_app (template_hole 1, template_var 1))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 1)))
               )
           ))),
    ("IP_Partition_Preliminaries.partitioning1_empty0",
     "{} ~: set ?ts ==> {} ~: set (partitioning1 ?ss ?ts)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_app (template_hole 1, template_var 1))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 1)))
               )
           ))),
    ("IP_Partition_Preliminaries.partList4_subset",
     "?a <= \<Union> (set ?ts) ==> ?a <= \<Union> (set (partList4 ?b ?ts))",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_hole 2,
            template_app (template_hole 1, template_var 1)))],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("IP_Partition_Preliminaries.partitioning1_subset",
     "?a <= \<Union> (set ?ts) ==>
      ?a <= \<Union> (set (partitioning1 ?ss ?ts))",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_hole 2,
            template_app (template_hole 1, template_var 1)))],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("IP_Partition_Preliminaries.partList4_distinct",
     "[| {} ~: set ?ts; disjoint_list ?ts |]
      ==> distinct (partList4 ?s ?ts)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_app (template_hole 3, template_var 1))
                )
            ),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("IP_Partition_Preliminaries.partList4_disjoint",
     "[| ?s <= \<Union> (set ?ts);
         ??.IP_Partition_Preliminaries.disjoint_list_rec ?ts |]
      ==> ??.IP_Partition_Preliminaries.disjoint_list_rec
           (partList4 ?s ?ts)",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app
           (template_hole 3,
            template_app (template_hole 2, template_var 0))),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("IP_Partition_Preliminaries.inter_dif_help_lemma",
     "?A Int ?B = {} ==> ?B - ?S = ?B - (?S - ?A)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_hole 1)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("IP_Partition_Preliminaries.partList4_complete0",
     "?s <= \<Union> (set ?ts) ==>
      \<Union> (set (partList4 ?s ?ts)) = \<Union> (set ?ts)",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app
           (template_hole 3,
            template_app (template_hole 2, template_var 0)))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))))),
    ("IP_Partition_Preliminaries.partList1_partList2_equi",
     "set (??.IP_Partition_Preliminaries.partList1 ?s ?ts) - {{}} =
      set (??.IP_Partition_Preliminaries.partList2 ?s ?ts) - {{}}",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_hole 1)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_hole 1)))),
    ("IP_Partition_Preliminaries.partList2_partList3_equi",
     "set (??.IP_Partition_Preliminaries.partList2 ?s ?ts) - {{}} =
      set (??.IP_Partition_Preliminaries.partList3 ?s ?ts) - {{}}",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_hole 1)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_hole 1)))),
    ("IP_Partition_Preliminaries.partitioning1_disjoint",
     "[| \<Union> (set ?ss) <= \<Union> (set ?ts);
         ??.IP_Partition_Preliminaries.disjoint_list_rec ?ts |]
      ==> ??.IP_Partition_Preliminaries.disjoint_list_rec
           (partitioning1 ?ss ?ts)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 3,
            template_app (template_hole 2, template_var 1)),
          template_app
           (template_hole 3,
            template_app (template_hole 2, template_var 0))),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("IP_Partition_Preliminaries.partList0_set_equi",
     "set (??.IP_Partition_Preliminaries.partList0 ?s ?ts) =
      (Int) ?s ` set ?ts Un (%x. x - ?s) ` set ?ts",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 5, template_var 0))),
         template_app
          (template_app (template_hole 2, t_empty),
           template_app (template_hole 5, template_var 0))))),
    ("IP_Partition_Preliminaries.ipPartitionSingleSet",
     "ipPartition {?t}
       (??.IP_Partition_Preliminaries.addSubsetSet ?t ?Bs) ==>
      ipPartition {?t}
       (??.IP_Partition_Preliminaries.partitioning ?ts
         (??.IP_Partition_Preliminaries.addSubsetSet ?t ?Bs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_hole 2)),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_hole 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)))
           ))),
    ("IP_Partition_Preliminaries.partitioning1_empty1",
     "{} ~: set ?ts ==>
      set (partitioning1 ?ss ?ts) - {{}} = set (partitioning1 ?ss ?ts)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_app (template_hole 5, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1))),
           template_app
            (template_app (template_hole 1, template_hole 6),
             template_hole 0)),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1))))),
    ("IP_Partition_Preliminaries.disjoint_intersection",
     "[| disjoint ?A; ?a : ?A |] ==> disjoint ({?a Int ?b} Un (?A - {?a}))",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_var 0)),
                   template_hole 1)),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_hole 1))))
           ))),
    ("IP_Partition_Preliminaries.disjoint_list_lem",
     "disjoint_list ?ls ==>
      ALL s:set ?ls. ALL t:set ?ls. s ~= t --> s Int t = {}",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 0)),
             t_empty)
           ))),
    ("IP_Partition_Preliminaries.partList4_disjoint_list",
     "[| ?s <= \<Union> (set ?ts); disjoint_list ?ts; {} ~: set ?ts |]
      ==> disjoint_list (partList4 ?s ?ts)",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_var 0))),
        template_predicate (template_app (template_hole 4, template_var 0)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_app (template_hole 5, template_var 0))
                )
            )],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("IP_Partition_Preliminaries.partList0_addSubsetSet_equi",
     "?s <= \<Union> (set ?ts) ==>
      ??.IP_Partition_Preliminaries.addSubsetSet ?s (set ?ts) - {{}} =
      set (??.IP_Partition_Preliminaries.partList0 ?s ?ts) - {{}}",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app
           (template_hole 8,
            template_app (template_hole 7, template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app (template_hole 7, template_var 0))),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_hole 1)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_hole 1))))),
    ("IP_Partition_Preliminaries.disjoint_subset",
     "[| disjoint ?A; ?a : ?A; ?b <= ?a |]
      ==> disjoint (?A - {?a} Un {?b})",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_predicate
        (
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_hole 0))),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)))
           ))),
    ("IP_Partition_Preliminaries.partitioning1_disjoint_list",
     "[| {} ~: set ?ts; \<Union> (set ?ss) <= \<Union> (set ?ts);
         disjoint_list ?ts |]
      ==> disjoint_list (partitioning1 ?ss ?ts)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_app (template_hole 4, template_var 1))
                )
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 2,
            template_app (template_hole 4, template_var 0)),
          template_app
           (template_hole 2,
            template_app (template_hole 4, template_var 1))),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("IP_Partition_Preliminaries.complete_helper",
     "[| {} ~: set ?ts; \<Union> (set ?ss) <= \<Union> (set ?ts) |]
      ==> \<Union> (set ?ts) = \<Union> (set (partitioning1 ?ss ?ts))",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_app (template_hole 4, template_var 1))
                )
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 2,
            template_app (template_hole 4, template_var 0)),
          template_app
           (template_hole 2,
            template_app (template_hole 4, template_var 1)))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 4, template_var 1)),
         template_app
          (template_hole 2,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("IP_Partition_Preliminaries.partList4_distinct_hlp",
     "[| ?a ~= {}; ?a ~: set ?ts; disjoint (insert ?a (set ?ts)) |]
      ==> ?a ~: set (partList4 ?s ?ts)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 5)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app (template_hole 3, template_var 1))
                )
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 2),
                template_app (template_hole 3, template_var 1)))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 1)))
               )
           ))),
    ("IP_Partition_Preliminaries.ipPartitioning_helper_opt",
     "[| {} ~: set ?ts; disjoint_list ?ts;
         \<Union> (set ?ss) <= \<Union> (set ?ts) |]
      ==> ipPartition (set ?ss) (set (partitioning1 ?ss ?ts))",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_app (template_hole 5, template_var 1))
                )
            ),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 2,
            template_app (template_hole 5, template_var 0)),
          template_app
           (template_hole 2,
            template_app (template_hole 5, template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 5, template_var 0)),
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("IP_Partition_Preliminaries.partitioning_equi",
     "[| {} ~: set ?ts; ??.IP_Partition_Preliminaries.disjoint_list_rec ?ts;
         \<Union> (set ?ss) <= \<Union> (set ?ts) |]
      ==> set (partitioning1 ?ss ?ts) =
          ??.IP_Partition_Preliminaries.partitioning_nontail ?ss (set ?ts) -
          {{}}",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 11, template_hole 10),
                  template_app (template_hole 9, template_var 1))
                )
            ),
        template_predicate (template_app (template_hole 8, template_var 1)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 6,
            template_app (template_hole 9, template_var 0)),
          template_app
           (template_hole 6,
            template_app (template_hole 9, template_var 1)))],
       template_equation
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 4, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app (template_hole 9, template_var 1))),
           template_app
            (template_app (template_hole 1, template_hole 10),
             template_hole 0))))),
    ("IP_Partition_Preliminaries.addSubsetSetE",
     "[| ?A : ??.IP_Partition_Preliminaries.addSubsetSet ?s ?ts;
         ?A = ?s - \<Union> ?ts ==> ?thesis;
         !!T. [| T : ?ts; ?A = ?s Int T |] ==> ?thesis;
         !!T. [| T : ?ts; ?A = T - ?s |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_equation
            (template_var 3,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app (template_hole 2, template_var 1)))],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 1, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0)))]
