Loading theory "Draft.Semantics" (required by "Draft.secTypesMoreTemplates" via "Draft.secTypes")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.secTypesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.secTypesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.secTypesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.153s elapsed time, 0.625s cpu time, 0.043s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.secTypesMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.205s elapsed time, 0.834s cpu time, 0.043s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.secTypesMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.334s elapsed time, 1.329s cpu time, 0.135s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.secTypesMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "HOL-Library.BigO"
### 0.955s elapsed time, 3.613s cpu time, 0.885s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.037s elapsed time, 3.754s cpu time, 0.837s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.983s elapsed time, 6.125s cpu time, 1.111s GC time
Loading theory "Draft.Templates" (required by "Draft.secTypesMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.069s elapsed time, 0.159s cpu time, 0.051s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.secTypesMoreTemplates")
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 68 of "$AFP/VolpanoSmith/Semantics.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>interpret" ("_applC" ("_position" Val) ("_position" v))
###       ("_position" s))
###     ("_applC" ("_position" Some) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>interpret" ("_applC" ("_position" Val) ("_position" v))
###     ("\<^const>HOL.eq" ("_position" s)
###       ("_applC" ("_position" Some) ("_position" v)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^fixed>interpret" ("_applC" ("_position" Val) ("_position" v))
###       ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###     ("_position" v)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 69 of "$AFP/VolpanoSmith/Semantics.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>interpret" ("_applC" ("_position" Var) ("_position" V))
###       ("_position" s))
###     ("_applC" ("_position" s) ("_position" V))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>interpret" ("_applC" ("_position" Var) ("_position" V))
###     ("\<^const>HOL.eq" ("_position" s)
###       ("_applC" ("_position" s) ("_position" V)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^fixed>interpret" ("_applC" ("_position" Var) ("_position" V))
###       ("\<^const>HOL.eq" ("_position" s) ("_position" s)))
###     ("_position" V)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 70 of "$AFP/VolpanoSmith/Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>interpret"
###       ("\<^const>Semantics.expr.BinOp" ("_position" e\<^sub>1)
###         ("_position" bop) ("_position" e\<^sub>2))
###       ("_position" s))
###     ("_case_syntax"
###       ("\<^fixed>interpret" ("_position" e\<^sub>1) ("_position" s))
###       ("_case2" ("_case1" ("_position" None) ("_position" None))
###         ("_case1" ("_applC" ("_position" Some) ("_position" v\<^sub>1))
###           ("_case_syntax"
###             ("\<^fixed>interpret" ("_position" e\<^sub>2) ("_position" s))
###             ("_case2" ("_case1" ("_position" None) ("_position" None))
###               ("_case1"
###                 ("_applC" ("_position" Some) ("_position" v\<^sub>2))
###                 ("_applC" ("_position" binop)
###                   ("_cargs" ("_position" bop)
###                     ("_cargs" ("_position" v\<^sub>1)
###                       ("_position" v\<^sub>2))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>interpret"
###     ("\<^const>Semantics.expr.BinOp" ("_position" e\<^sub>1)
###       ("_position" bop) ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" s)
###       ("_case_syntax"
###         ("\<^fixed>interpret" ("_position" e\<^sub>1) ("_position" s))
###         ("_case2" ("_case1" ("_position" None) ("_position" None))
###           ("_case1" ("_applC" ("_position" Some) ("_position" v\<^sub>1))
###             ("_case_syntax"
###               ("\<^fixed>interpret" ("_position" e\<^sub>2) ("_position" s))
###               ("_case2" ("_case1" ("_position" None) ("_position" None))
###                 ("_case1"
###                   ("_applC" ("_position" Some) ("_position" v\<^sub>2))
###                   ("_applC" ("_position" binop)
###                     ("_cargs" ("_position" bop)
###                       ("_cargs" ("_position" v\<^sub>1)
###                         ("_position" v\<^sub>2)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Ambiguous input (line 82 of "$AFP/VolpanoSmith/Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'"
###     ("\<^const>Semantics.com.LAss" ("_position" V) ("_position" e))
###     ("_position" s) ("_position" Skip)
###     ("_applC" ("_position" s)
###       ("\<^const>Semantics.com.LAss" ("_position" V)
###         ("\<^const>Semantics.interpret" ("_position" e) ("_position" s))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'"
###     ("\<^const>Semantics.com.LAss" ("_position" V) ("_position" e))
###     ("_position" s) ("_position" Skip)
###     ("_Update" ("_position" s)
###       ("_updbind" ("_position" V)
###         ("\<^const>Semantics.interpret" ("_position" e) ("_position" s))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 91 of "$AFP/VolpanoSmith/Semantics.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###       ("_applC" ("_position" Some) ("_position" true))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" c\<^sub>1) ("_position" s))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.interpret" ("_position" b)
###       ("\<^const>HOL.eq" ("_position" s)
###         ("_applC" ("_position" Some) ("_position" true)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" c\<^sub>1) ("_position" s))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###       ("_position" true)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" c\<^sub>1) ("_position" s))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 94 of "$AFP/VolpanoSmith/Semantics.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###       ("_applC" ("_position" Some) ("_position" false))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" c\<^sub>2) ("_position" s))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.interpret" ("_position" b)
###       ("\<^const>HOL.eq" ("_position" s)
###         ("_applC" ("_position" Some) ("_position" false)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" c\<^sub>2) ("_position" s))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###       ("_position" false)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" c\<^sub>2) ("_position" s))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 97 of "$AFP/VolpanoSmith/Semantics.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###       ("_applC" ("_position" Some) ("_position" true))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" c))
###       ("_position" s)
###       ("\<^const>Semantics.com.Seq" ("_position" c)
###         ("\<^const>Semantics.com.While" ("_position" b) ("_position" c)))
###       ("_position" s))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.interpret" ("_position" b)
###       ("\<^const>HOL.eq" ("_position" s)
###         ("_applC" ("_position" Some) ("_position" true)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" c))
###       ("_position" s)
###       ("\<^const>Semantics.com.Seq" ("_position" c)
###         ("\<^const>Semantics.com.While" ("_position" b) ("_position" c)))
###       ("_position" s))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###       ("_position" true)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" c))
###       ("_position" s)
###       ("\<^const>Semantics.com.Seq" ("_position" c)
###         ("\<^const>Semantics.com.While" ("_position" b) ("_position" c)))
###       ("_position" s))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 100 of "$AFP/VolpanoSmith/Semantics.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###       ("_applC" ("_position" Some) ("_position" false))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" c))
###       ("_position" s) ("_position" Skip) ("_position" s))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.interpret" ("_position" b)
###       ("\<^const>HOL.eq" ("_position" s)
###         ("_applC" ("_position" Some) ("_position" false)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" c))
###       ("_position" s) ("_position" Skip) ("_position" s))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###       ("_position" false)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" c))
###       ("_position" s) ("_position" Skip) ("_position" s))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "red"
  Proving monotonicity ...
### Ambiguous input (line 113 of "$AFP/VolpanoSmith/Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.LAss" ("_position" V) ("_position" e))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" s')
###       ("_Update" ("_position" s)
###         ("_updbind" ("_position" V)
###           ("\<^const>Semantics.interpret" ("_position" e)
###             ("_position" s)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.LAss" ("_position" V) ("_position" e))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" s')
###       ("_applC" ("_position" s)
###         ("\<^const>Semantics.com.LAss" ("_position" V)
###           ("\<^const>Semantics.interpret" ("_position" e)
###             ("_position" s)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 167 of "$AFP/VolpanoSmith/Semantics.thy") produces 15 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.disj"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_applC" ("_position" Some) ("_position" true)))
###           ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))))
###       ("_applC" ("_position" Some) ("_position" false)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" true)))
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" false))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.interpret" ("_position" b)
###       ("\<^const>HOL.disj"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" true)))
###         ("\<^const>HOL.eq"
###           ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###           ("_applC" ("_position" Some) ("_position" false)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" true))))
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" false))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("_applC"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###         ("_position" true))
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" false))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" true)))
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" false)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.interpret" ("_position" b)
###       ("\<^const>HOL.disj"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" true)))
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_applC" ("_position" Some) ("_position" false))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" true))))
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" false)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("_applC"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###         ("_position" true))
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" false)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.disj"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_applC" ("_position" Some) ("_position" true)))
###           ("\<^const>Semantics.interpret" ("_position" b)
###             ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))))
###       ("_position" false))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 171 of "$AFP/VolpanoSmith/Semantics.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" true))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds" ("_position" c\<^sub>1) ("_position" s)
###         ("_position" Skip) ("_position" s')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" true)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds" ("_position" c\<^sub>1) ("_position" s)
###         ("_position" Skip) ("_position" s')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###         ("_position" true)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds" ("_position" c\<^sub>1) ("_position" s)
###         ("_position" Skip) ("_position" s')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 175 of "$AFP/VolpanoSmith/Semantics.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" false))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds" ("_position" c\<^sub>2) ("_position" s)
###         ("_position" Skip) ("_position" s')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" false)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds" ("_position" c\<^sub>2) ("_position" s)
###         ("_position" Skip) ("_position" s')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###         ("_position" false)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds" ("_position" c\<^sub>2) ("_position" s)
###         ("_position" Skip) ("_position" s')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 179 of "$AFP/VolpanoSmith/Semantics.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" false))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" s) ("_position" s')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" false)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" s) ("_position" s')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###         ("_position" false)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" s) ("_position" s')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 185 of "$AFP/VolpanoSmith/Semantics.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" true))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" sx)
###         ("\<^const>HOL.conj"
###           ("\<^const>Semantics.reds" ("_position" cx) ("_position" s)
###             ("_position" Skip) ("_position" sx))
###           ("\<^const>Semantics.reds"
###             ("\<^const>Semantics.com.While" ("_position" b)
###               ("_position" cx))
###             ("_position" sx) ("_position" Skip) ("_position" s')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" true)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" sx)
###         ("\<^const>HOL.conj"
###           ("\<^const>Semantics.reds" ("_position" cx) ("_position" s)
###             ("_position" Skip) ("_position" sx))
###           ("\<^const>Semantics.reds"
###             ("\<^const>Semantics.com.While" ("_position" b)
###               ("_position" cx))
###             ("_position" sx) ("_position" Skip) ("_position" s')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###         ("_position" true)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" sx)
###         ("\<^const>HOL.conj"
###           ("\<^const>Semantics.reds" ("_position" cx) ("_position" s)
###             ("_position" Skip) ("_position" sx))
###           ("\<^const>Semantics.reds"
###             ("\<^const>Semantics.com.While" ("_position" b)
###               ("_position" cx))
###             ("_position" sx) ("_position" Skip) ("_position" s')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 194 of "$AFP/VolpanoSmith/Semantics.thy") produces 15 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" com))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.disj"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_applC" ("_position" Some) ("_position" true)))
###           ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))))
###       ("_applC" ("_position" Some) ("_position" false)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" com))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" true)))
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" false))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" com))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.interpret" ("_position" b)
###       ("\<^const>HOL.disj"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" true)))
###         ("\<^const>HOL.eq"
###           ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###           ("_applC" ("_position" Some) ("_position" false)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" com))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" true))))
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" false))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" com))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("_applC"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###         ("_position" true))
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" false))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" com))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" true)))
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" false)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" com))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.interpret" ("_position" b)
###       ("\<^const>HOL.disj"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" true)))
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_applC" ("_position" Some) ("_position" false))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" com))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" true))))
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" false)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" com))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("_applC"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###         ("_position" true))
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" false)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" com))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.disj"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_applC" ("_position" Some) ("_position" true)))
###           ("\<^const>Semantics.interpret" ("_position" b)
###             ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))))
###       ("_position" false))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "red_n"
  Proving monotonicity ...
### Ambiguous input (line 242 of "$AFP/VolpanoSmith/Semantics.thy") produces 63 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.red_n"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" n) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" s)
###               ("_applC" ("_position" Some) ("_position" false)))
###             ("\<^const>HOL.eq" ("_position" s) ("_position" s'))))
###         ("\<^const>HOL.eq" ("_position" n)
###           ("\<^const>Groups.one_class.one")))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" i)
###           ("_idts" ("_position" j) ("_position" s'')))
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Semantics.interpret" ("_position" b)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" s)
###                   ("_applC" ("_position" Some) ("_position" true)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Semantics.red_n" ("_position" cx)
###                     ("_position" s) ("_position" i) ("_position" Skip)
###                     ("_position" s''))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Semantics.red_n"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" j) ("_position" Skip)
###                       ("_position" s'))
###                     ("\<^const>HOL.eq" ("_position" n) ("_position" i))))))
###             ("_position" j))
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.red_n"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" n) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj"
###         ("_applC"
###           ("\<^const>Semantics.interpret" ("_position" b)
###             ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###           ("_position" false))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" s) ("_position" s'))
###           ("\<^const>HOL.eq" ("_position" n)
###             ("\<^const>Groups.one_class.one"))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" i)
###           ("_idts" ("_position" j) ("_position" s'')))
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Semantics.interpret" ("_position" b)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" s)
###                   ("_applC" ("_position" Some) ("_position" true)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Semantics.red_n" ("_position" cx)
###                     ("_position" s) ("_position" i) ("_position" Skip)
###                     ("_position" s''))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Semantics.red_n"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" j) ("_position" Skip)
###                       ("_position" s'))
###                     ("\<^const>HOL.eq" ("_position" n) ("_position" i))))))
###             ("_position" j))
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.red_n"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" n) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_applC" ("_position" Some) ("_position" false))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" s) ("_position" s'))
###           ("\<^const>HOL.eq" ("_position" n)
###             ("\<^const>Groups.one_class.one"))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" i)
###           ("_idts" ("_position" j) ("_position" s'')))
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Semantics.interpret" ("_position" b)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" s)
###                   ("_applC" ("_position" Some) ("_position" true)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Semantics.red_n" ("_position" cx)
###                     ("_position" s) ("_position" i) ("_position" Skip)
###                     ("_position" s''))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Semantics.red_n"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" j) ("_position" Skip)
###                       ("_position" s'))
###                     ("\<^const>HOL.eq" ("_position" n) ("_position" i))))))
###             ("_position" j))
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.red_n"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" n) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_applC" ("_position" Some) ("_position" false)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" s) ("_position" s'))
###             ("\<^const>HOL.eq" ("_position" n)
###               ("\<^const>Groups.one_class.one")))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" i)
###           ("_idts" ("_position" j) ("_position" s'')))
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Semantics.interpret" ("_position" b)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" s)
###                   ("_applC" ("_position" Some) ("_position" true)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Semantics.red_n" ("_position" cx)
###                     ("_position" s) ("_position" i) ("_position" Skip)
###                     ("_position" s''))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Semantics.red_n"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" j) ("_position" Skip)
###                       ("_position" s'))
###                     ("\<^const>HOL.eq" ("_position" n) ("_position" i))))))
###             ("_position" j))
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.red_n"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" n) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###           ("_applC" ("_position" Some) ("_position" false)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" s) ("_position" s'))
###           ("\<^const>HOL.eq" ("_position" n)
###             ("\<^const>Groups.one_class.one"))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" i)
###           ("_idts" ("_position" j) ("_position" s'')))
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Semantics.interpret" ("_position" b)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" s)
###                   ("_applC" ("_position" Some) ("_position" true)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Semantics.red_n" ("_position" cx)
###                     ("_position" s) ("_position" i) ("_position" Skip)
###                     ("_position" s''))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Semantics.red_n"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" j) ("_position" Skip)
###                       ("_position" s'))
###                     ("\<^const>HOL.eq" ("_position" n) ("_position" i))))))
###             ("_position" j))
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.red_n"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" n) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>Semantics.interpret" ("_position" b)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" s)
###                 ("_applC" ("_position" Some) ("_position" false)))
###               ("_position" s)))
###           ("_position" s'))
###         ("\<^const>HOL.eq" ("_position" n)
###           ("\<^const>Groups.one_class.one")))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" i)
###           ("_idts" ("_position" j) ("_position" s'')))
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Semantics.interpret" ("_position" b)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" s)
###                   ("_applC" ("_position" Some) ("_position" true)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Semantics.red_n" ("_position" cx)
###                     ("_position" s) ("_position" i) ("_position" Skip)
###                     ("_position" s''))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Semantics.red_n"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" j) ("_position" Skip)
###                       ("_position" s'))
###                     ("\<^const>HOL.eq" ("_position" n) ("_position" i))))))
###             ("_position" j))
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.red_n"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" n) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" s)
###               ("_applC" ("_position" Some) ("_position" false)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" s) ("_position" s'))
###               ("_position" n))))
###         ("\<^const>Groups.one_class.one"))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" i)
###           ("_idts" ("_position" j) ("_position" s'')))
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Semantics.interpret" ("_position" b)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" s)
###                   ("_applC" ("_position" Some) ("_position" true)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Semantics.red_n" ("_position" cx)
###                     ("_position" s) ("_position" i) ("_position" Skip)
###                     ("_position" s''))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Semantics.red_n"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" j) ("_position" Skip)
###                       ("_position" s'))
###                     ("\<^const>HOL.eq" ("_position" n) ("_position" i))))))
###             ("_position" j))
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.red_n"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" n) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" s)
###               ("_applC" ("_position" Some) ("_position" false)))
###             ("\<^const>HOL.eq" ("_position" s) ("_position" s'))))
###         ("\<^const>HOL.eq" ("_position" n)
###           ("\<^const>Groups.one_class.one")))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" i)
###           ("_idts" ("_position" j) ("_position" s'')))
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Semantics.interpret" ("_position" b)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" s)
###                 ("_applC" ("_position" Some) ("_position" true)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Semantics.red_n" ("_position" cx) ("_position" s)
###                   ("_position" i) ("_position" Skip) ("_position" s''))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Semantics.red_n"
###                     ("\<^const>Semantics.com.While" ("_position" b)
###                       ("_position" cx))
###                     ("_position" s'') ("_position" j) ("_position" Skip)
###                     ("_position" s'))
###                   ("\<^const>HOL.eq" ("_position" n)
###                     ("\<^const>Groups.plus_class.plus" ("_position" i)
###                       ("_position" j)))))))
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.red_n"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" n) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj"
###         ("_applC"
###           ("\<^const>Semantics.interpret" ("_position" b)
###             ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###           ("_position" false))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" s) ("_position" s'))
###           ("\<^const>HOL.eq" ("_position" n)
###             ("\<^const>Groups.one_class.one"))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" i)
###           ("_idts" ("_position" j) ("_position" s'')))
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Semantics.interpret" ("_position" b)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" s)
###                 ("_applC" ("_position" Some) ("_position" true)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Semantics.red_n" ("_position" cx) ("_position" s)
###                   ("_position" i) ("_position" Skip) ("_position" s''))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Semantics.red_n"
###                     ("\<^const>Semantics.com.While" ("_position" b)
###                       ("_position" cx))
###                     ("_position" s'') ("_position" j) ("_position" Skip)
###                     ("_position" s'))
###                   ("\<^const>HOL.eq" ("_position" n)
###                     ("\<^const>Groups.plus_class.plus" ("_position" i)
###                       ("_position" j)))))))
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.red_n"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" n) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_applC" ("_position" Some) ("_position" false))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" s) ("_position" s'))
###           ("\<^const>HOL.eq" ("_position" n)
###             ("\<^const>Groups.one_class.one"))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" i)
###           ("_idts" ("_position" j) ("_position" s'')))
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Semantics.interpret" ("_position" b)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" s)
###                 ("_applC" ("_position" Some) ("_position" true)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Semantics.red_n" ("_position" cx) ("_position" s)
###                   ("_position" i) ("_position" Skip) ("_position" s''))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Semantics.red_n"
###                     ("\<^const>Semantics.com.While" ("_position" b)
###                       ("_position" cx))
###                     ("_position" s'') ("_position" j) ("_position" Skip)
###                     ("_position" s'))
###                   ("\<^const>HOL.eq" ("_position" n)
###                     ("\<^const>Groups.plus_class.plus" ("_position" i)
###                       ("_position" j)))))))
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 273 of "$AFP/VolpanoSmith/Semantics.thy") produces 3 parse trees:
### ("\<^const>Pure.all_binder" ("_position" s)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" false))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" s) ("_position" s))))))
### ("\<^const>Pure.all_binder" ("_position" s)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" false)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" s) ("_position" s))))))
### ("\<^const>Pure.all_binder" ("_position" s)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###         ("_position" false)))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" s) ("_position" s))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 274 of "$AFP/VolpanoSmith/Semantics.thy") produces 3 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" s)
###     ("_idts" ("_position" i) ("_idts" ("_position" j) ("_position" s''))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC"
###           ("\<^const>Semantics.interpret" ("_position" b)
###             ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###           ("_position" true)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Semantics.red_n" ("_position" cx) ("_position" s)
###             ("_position" i) ("_position" Skip) ("_position" s'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Semantics.red_n"
###               ("\<^const>Semantics.com.While" ("_position" b)
###                 ("_position" cx))
###               ("_position" s'') ("_position" j) ("_position" Skip)
###               ("_position" s')))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" s'') ("_position" s'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" s) ("_position" s'))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" s)
###     ("_idts" ("_position" i) ("_idts" ("_position" j) ("_position" s''))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_applC" ("_position" Some) ("_position" true)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Semantics.red_n" ("_position" cx) ("_position" s)
###             ("_position" i) ("_position" Skip) ("_position" s'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Semantics.red_n"
###               ("\<^const>Semantics.com.While" ("_position" b)
###                 ("_position" cx))
###               ("_position" s'') ("_position" j) ("_position" Skip)
###               ("_position" s')))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" s'') ("_position" s'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" s) ("_position" s'))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" s)
###     ("_idts" ("_position" i) ("_idts" ("_position" j) ("_position" s''))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###           ("_applC" ("_position" Some) ("_position" true))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Semantics.red_n" ("_position" cx) ("_position" s)
###             ("_position" i) ("_position" Skip) ("_position" s'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Semantics.red_n"
###               ("\<^const>Semantics.com.While" ("_position" b)
###                 ("_position" cx))
###               ("_position" s'') ("_position" j) ("_position" Skip)
###               ("_position" s')))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" s'') ("_position" s'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" s) ("_position" s'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 316 of "$AFP/VolpanoSmith/Semantics.thy") produces 9 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds"
###         ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###         ("_position" s) ("_position" Skip) ("_position" s')))
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" s)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("_applC"
###               ("\<^const>Semantics.interpret" ("_position" b)
###                 ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###               ("_position" false)))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs" ("_position" s) ("_position" s))))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" s) ("_position" s''))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>Semantics.interpret" ("_position" b)
###                     ("_position" s))
###                   ("_applC" ("_position" Some) ("_position" true))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Semantics.reds" ("_position" cx)
###                     ("_position" s) ("_position" Skip) ("_position" s'')))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Semantics.reds"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" Skip)
###                       ("_position" s')))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" P)
###                         ("_cargs" ("_position" s'') ("_position" s'))))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" s) ("_position" s')))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" P) ("_cargs" ("_position" s) ("_position" s')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds"
###         ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###         ("_position" s) ("_position" Skip) ("_position" s')))
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" s)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Semantics.interpret" ("_position" b)
###               ("\<^const>HOL.eq" ("_position" s)
###                 ("_applC" ("_position" Some) ("_position" false)))))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs" ("_position" s) ("_position" s))))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" s) ("_position" s''))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>Semantics.interpret" ("_position" b)
###                     ("_position" s))
###                   ("_applC" ("_position" Some) ("_position" true))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Semantics.reds" ("_position" cx)
###                     ("_position" s) ("_position" Skip) ("_position" s'')))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Semantics.reds"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" Skip)
###                       ("_position" s')))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" P)
###                         ("_cargs" ("_position" s'') ("_position" s'))))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" s) ("_position" s')))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" P) ("_cargs" ("_position" s) ("_position" s')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds"
###         ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###         ("_position" s) ("_position" Skip) ("_position" s')))
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" s)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>Semantics.interpret" ("_position" b)
###                 ("_position" s))
###               ("_applC" ("_position" Some) ("_position" false))))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs" ("_position" s) ("_position" s))))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" s) ("_position" s''))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>Semantics.interpret" ("_position" b)
###                     ("_position" s))
###                   ("_applC" ("_position" Some) ("_position" true))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Semantics.reds" ("_position" cx)
###                     ("_position" s) ("_position" Skip) ("_position" s'')))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Semantics.reds"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" Skip)
###                       ("_position" s')))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" P)
###                         ("_cargs" ("_position" s'') ("_position" s'))))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" s) ("_position" s')))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" P) ("_cargs" ("_position" s) ("_position" s')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds"
###         ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###         ("_position" s) ("_position" Skip) ("_position" s')))
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" s)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("_applC"
###               ("\<^const>Semantics.interpret" ("_position" b)
###                 ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###               ("_position" false)))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs" ("_position" s) ("_position" s))))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" s) ("_position" s''))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Semantics.interpret" ("_position" b)
###                   ("\<^const>HOL.eq" ("_position" s)
###                     ("_applC" ("_position" Some) ("_position" true)))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Semantics.reds" ("_position" cx)
###                     ("_position" s) ("_position" Skip) ("_position" s'')))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Semantics.reds"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" Skip)
###                       ("_position" s')))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" P)
###                         ("_cargs" ("_position" s'') ("_position" s'))))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" s) ("_position" s')))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" P) ("_cargs" ("_position" s) ("_position" s')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds"
###         ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###         ("_position" s) ("_position" Skip) ("_position" s')))
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" s)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Semantics.interpret" ("_position" b)
###               ("\<^const>HOL.eq" ("_position" s)
###                 ("_applC" ("_position" Some) ("_position" false)))))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs" ("_position" s) ("_position" s))))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" s) ("_position" s''))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Semantics.interpret" ("_position" b)
###                   ("\<^const>HOL.eq" ("_position" s)
###                     ("_applC" ("_position" Some) ("_position" true)))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Semantics.reds" ("_position" cx)
###                     ("_position" s) ("_position" Skip) ("_position" s'')))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Semantics.reds"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" Skip)
###                       ("_position" s')))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" P)
###                         ("_cargs" ("_position" s'') ("_position" s'))))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" s) ("_position" s')))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" P) ("_cargs" ("_position" s) ("_position" s')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds"
###         ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###         ("_position" s) ("_position" Skip) ("_position" s')))
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" s)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>Semantics.interpret" ("_position" b)
###                 ("_position" s))
###               ("_applC" ("_position" Some) ("_position" false))))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs" ("_position" s) ("_position" s))))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" s) ("_position" s''))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Semantics.interpret" ("_position" b)
###                   ("\<^const>HOL.eq" ("_position" s)
###                     ("_applC" ("_position" Some) ("_position" true)))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Semantics.reds" ("_position" cx)
###                     ("_position" s) ("_position" Skip) ("_position" s'')))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Semantics.reds"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" Skip)
###                       ("_position" s')))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" P)
###                         ("_cargs" ("_position" s'') ("_position" s'))))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" s) ("_position" s')))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" P) ("_cargs" ("_position" s) ("_position" s')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds"
###         ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###         ("_position" s) ("_position" Skip) ("_position" s')))
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" s)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("_applC"
###               ("\<^const>Semantics.interpret" ("_position" b)
###                 ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###               ("_position" false)))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs" ("_position" s) ("_position" s))))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" s) ("_position" s''))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC"
###                   ("\<^const>Semantics.interpret" ("_position" b)
###                     ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###                   ("_position" true)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Semantics.reds" ("_position" cx)
###                     ("_position" s) ("_position" Skip) ("_position" s'')))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Semantics.reds"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" Skip)
###                       ("_position" s')))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" P)
###                         ("_cargs" ("_position" s'') ("_position" s'))))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" s) ("_position" s')))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" P) ("_cargs" ("_position" s) ("_position" s')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds"
###         ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###         ("_position" s) ("_position" Skip) ("_position" s')))
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" s)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Semantics.interpret" ("_position" b)
###               ("\<^const>HOL.eq" ("_position" s)
###                 ("_applC" ("_position" Some) ("_position" false)))))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs" ("_position" s) ("_position" s))))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" s) ("_position" s''))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC"
###                   ("\<^const>Semantics.interpret" ("_position" b)
###                     ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###                   ("_position" true)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Semantics.reds" ("_position" cx)
###                     ("_position" s) ("_position" Skip) ("_position" s'')))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Semantics.reds"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" Skip)
###                       ("_position" s')))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" P)
###                         ("_cargs" ("_position" s'') ("_position" s'))))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" s) ("_position" s')))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" P) ("_cargs" ("_position" s) ("_position" s')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds"
###         ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###         ("_position" s) ("_position" Skip) ("_position" s')))
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" s)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>Semantics.interpret" ("_position" b)
###                 ("_position" s))
###               ("_applC" ("_position" Some) ("_position" false))))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs" ("_position" s) ("_position" s))))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" s) ("_position" s''))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC"
###                   ("\<^const>Semantics.interpret" ("_position" b)
###                     ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###                   ("_position" true)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Semantics.reds" ("_position" cx)
###                     ("_position" s) ("_position" Skip) ("_position" s'')))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Semantics.reds"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" Skip)
###                       ("_position" s')))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" P)
###                         ("_cargs" ("_position" s'') ("_position" s'))))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" s) ("_position" s')))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" P) ("_cargs" ("_position" s) ("_position" s')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Semantics"
### 2.554s elapsed time, 7.677s cpu time, 1.270s GC time
Loading theory "Draft.secTypes" (required by "Draft.secTypesMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.578s elapsed time, 1.253s cpu time, 0.117s GC time
Proofs for inductive predicate(s) "secExprTyping"
  Proving monotonicity ...
### Ambiguous input (line 30 of "$AFP/VolpanoSmith/secTypes.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" \<Gamma>) ("_position" V))
###       ("_applC" ("_position" Some) ("_position" High))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.com.LAss"
###       ("\<^fixed>secComTyping" ("_position" \<Gamma>) ("_position" T)
###         ("_position" V))
###       ("_position" e))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" \<Gamma>) ("_position" V))
###       ("_applC" ("_position" Some) ("_position" High))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>secComTyping" ("_position" \<Gamma>) ("_position" T)
###       ("\<^const>Semantics.com.LAss" ("_position" V) ("_position" e)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 32 of "$AFP/VolpanoSmith/secTypes.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>secTypes.secExprTyping" ("_position" \<Gamma>)
###         ("_position" e) ("_position" Low)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" \<Gamma>) ("_position" V))
###           ("_applC" ("_position" Some) ("_position" Low))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.com.LAss"
###       ("\<^fixed>secComTyping" ("_position" \<Gamma>) ("_position" Low)
###         ("_position" V))
###       ("_position" e))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>secTypes.secExprTyping" ("_position" \<Gamma>)
###         ("_position" e) ("_position" Low)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" \<Gamma>) ("_position" V))
###           ("_applC" ("_position" Some) ("_position" Low))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>secComTyping" ("_position" \<Gamma>) ("_position" Low)
###       ("\<^const>Semantics.com.LAss" ("_position" V) ("_position" e)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 34 of "$AFP/VolpanoSmith/secTypes.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>secComTyping" ("_position" \<Gamma>) ("_position" T)
###         ("_position" c1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>secComTyping" ("_position" \<Gamma>) ("_position" T)
###           ("_position" c2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.com.Seq"
###       ("\<^fixed>secComTyping" ("_position" \<Gamma>) ("_position" T)
###         ("_position" c1))
###       ("_position" c2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>secComTyping" ("_position" \<Gamma>) ("_position" T)
###         ("_position" c1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>secComTyping" ("_position" \<Gamma>) ("_position" T)
###           ("_position" c2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>secComTyping" ("_position" \<Gamma>) ("_position" T)
###       ("\<^const>Semantics.com.Seq" ("_position" c1) ("_position" c2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "secComTyping"
  Proving monotonicity ...
### Ambiguous input (line 96 of "$AFP/VolpanoSmith/secTypes.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>secTypes.secExprTyping"
###       ("\<^const>HOL.Ex_binder" ("_position" T1) ("_position" \<Gamma>))
###       ("_position" e1) ("_position" T1))
###     ("\<^const>secTypes.secExprTyping"
###       ("\<^const>HOL.Ex_binder" ("_position" T2) ("_position" \<Gamma>))
###       ("_position" e2) ("_position" T2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.Ex_binder" ("_position" T1)
###       ("\<^const>secTypes.secExprTyping" ("_position" \<Gamma>)
###         ("_position" e1) ("_position" T1)))
###     ("\<^const>secTypes.secExprTyping"
###       ("\<^const>HOL.Ex_binder" ("_position" T2) ("_position" \<Gamma>))
###       ("_position" e2) ("_position" T2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>secTypes.secExprTyping"
###       ("\<^const>HOL.Ex_binder" ("_position" T1) ("_position" \<Gamma>))
###       ("_position" e1) ("_position" T1))
###     ("\<^const>HOL.Ex_binder" ("_position" T2)
###       ("\<^const>secTypes.secExprTyping" ("_position" \<Gamma>)
###         ("_position" e2) ("_position" T2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.Ex_binder" ("_position" T1)
###       ("\<^const>secTypes.secExprTyping" ("_position" \<Gamma>)
###         ("_position" e1) ("_position" T1)))
###     ("\<^const>HOL.Ex_binder" ("_position" T2)
###       ("\<^const>secTypes.secExprTyping" ("_position" \<Gamma>)
###         ("_position" e2) ("_position" T2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 210 of "$AFP/VolpanoSmith/secTypes.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.not_equal"
###     ("\<^const>Semantics.interpret" ("_position" e) ("_position" s))
###     ("_position" None)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Semantics.interpret" ("_position" e)
###     ("\<^const>HOL.not_equal" ("_position" s) ("_position" None))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 275 of "$AFP/VolpanoSmith/secTypes.thy") produces 9 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" nonInterference)
###     ("_cargs" ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>secTypes.lowEquiv"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s1)
###         ("_idts" ("_position" s2)
###           ("_idts" ("_position" s1') ("_position" s2'))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>secTypes.lowEquiv" ("_position" \<Gamma>)
###             ("_position" s1) ("_position" s2))
###           ("\<^const>HOL.conj"
###             ("\<^const>Semantics.reds" ("_position" c) ("_position" s1)
###               ("_position" Skip) ("_position" s1'))
###             ("\<^const>Semantics.reds" ("_position" c) ("_position" s2)
###               ("_position" Skip) ("_position" s2'))))
###         ("_position" \<Gamma>)))
###     ("_position" s1') ("_position" s2')))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" nonInterference)
###     ("_cargs" ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" s1)
###       ("_idts" ("_position" s2)
###         ("_idts" ("_position" s1') ("_position" s2'))))
###     ("\<^const>secTypes.lowEquiv"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>secTypes.lowEquiv" ("_position" \<Gamma>)
###             ("_position" s1) ("_position" s2))
###           ("\<^const>HOL.conj"
###             ("\<^const>Semantics.reds" ("_position" c) ("_position" s1)
###               ("_position" Skip) ("_position" s1'))
###             ("\<^const>Semantics.reds" ("_position" c) ("_position" s2)
###               ("_position" Skip) ("_position" s2'))))
###         ("_position" \<Gamma>))
###       ("_position" s1') ("_position" s2'))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" nonInterference)
###     ("_cargs" ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>secTypes.lowEquiv"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s1)
###         ("_idts" ("_position" s2)
###           ("_idts" ("_position" s1') ("_position" s2'))))
###       ("\<^const>HOL.implies"
###         ("\<^const>secTypes.lowEquiv" ("_position" \<Gamma>)
###           ("_position" s1)
###           ("\<^const>HOL.conj" ("_position" s2)
###             ("\<^const>HOL.conj"
###               ("\<^const>Semantics.reds" ("_position" c) ("_position" s1)
###                 ("_position" Skip) ("_position" s1'))
###               ("\<^const>Semantics.reds" ("_position" c) ("_position" s2)
###                 ("_position" Skip) ("_position" s2')))))
###         ("_position" \<Gamma>)))
###     ("_position" s1') ("_position" s2')))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" nonInterference)
###     ("_cargs" ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" s1)
###       ("_idts" ("_position" s2)
###         ("_idts" ("_position" s1') ("_position" s2'))))
###     ("\<^const>secTypes.lowEquiv"
###       ("\<^const>HOL.implies"
###         ("\<^const>secTypes.lowEquiv" ("_position" \<Gamma>)
###           ("_position" s1)
###           ("\<^const>HOL.conj" ("_position" s2)
###             ("\<^const>HOL.conj"
###               ("\<^const>Semantics.reds" ("_position" c) ("_position" s1)
###                 ("_position" Skip) ("_position" s1'))
###               ("\<^const>Semantics.reds" ("_position" c) ("_position" s2)
###                 ("_position" Skip) ("_position" s2')))))
###         ("_position" \<Gamma>))
###       ("_position" s1') ("_position" s2'))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" nonInterference)
###     ("_cargs" ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" s1)
###       ("_idts" ("_position" s2)
###         ("_idts" ("_position" s1') ("_position" s2'))))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>secTypes.lowEquiv" ("_position" \<Gamma>)
###           ("_position" s1) ("_position" s2))
###         ("\<^const>HOL.conj"
###           ("\<^const>Semantics.reds" ("_position" c) ("_position" s1)
###             ("_position" Skip) ("_position" s1'))
###           ("\<^const>Semantics.reds" ("_position" c) ("_position" s2)
###             ("_position" Skip) ("_position" s2'))))
###       ("\<^const>secTypes.lowEquiv" ("_position" \<Gamma>) ("_position" s1')
###         ("_position" s2')))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" nonInterference)
###     ("_cargs" ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" s1)
###       ("_idts" ("_position" s2)
###         ("_idts" ("_position" s1') ("_position" s2'))))
###     ("\<^const>HOL.implies"
###       ("\<^const>secTypes.lowEquiv" ("_position" \<Gamma>) ("_position" s1)
###         ("\<^const>HOL.conj" ("_position" s2)
###           ("\<^const>HOL.conj"
###             ("\<^const>Semantics.reds" ("_position" c) ("_position" s1)
###               ("_position" Skip) ("_position" s1'))
###             ("\<^const>Semantics.reds" ("_position" c) ("_position" s2)
###               ("_position" Skip) ("_position" s2')))))
###       ("\<^const>secTypes.lowEquiv" ("_position" \<Gamma>) ("_position" s1')
###         ("_position" s2')))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" nonInterference)
###     ("_cargs" ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" s1)
###       ("_idts" ("_position" s2)
###         ("_idts" ("_position" s1') ("_position" s2'))))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>secTypes.lowEquiv" ("_position" \<Gamma>)
###           ("_position" s1)
###           ("\<^const>HOL.conj" ("_position" s2)
###             ("\<^const>Semantics.reds" ("_position" c) ("_position" s1)
###               ("_position" Skip) ("_position" s1'))))
###         ("\<^const>Semantics.reds" ("_position" c) ("_position" s2)
###           ("_position" Skip) ("_position" s2')))
###       ("\<^const>secTypes.lowEquiv" ("_position" \<Gamma>) ("_position" s1')
###         ("_position" s2')))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" nonInterference)
###     ("_cargs" ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>secTypes.lowEquiv"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s1)
###         ("_idts" ("_position" s2)
###           ("_idts" ("_position" s1') ("_position" s2'))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>secTypes.lowEquiv" ("_position" \<Gamma>)
###             ("_position" s1)
###             ("\<^const>HOL.conj" ("_position" s2)
###               ("\<^const>Semantics.reds" ("_position" c) ("_position" s1)
###                 ("_position" Skip) ("_position" s1'))))
###           ("\<^const>Semantics.reds" ("_position" c) ("_position" s2)
###             ("_position" Skip) ("_position" s2')))
###         ("_position" \<Gamma>)))
###     ("_position" s1') ("_position" s2')))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" nonInterference)
###     ("_cargs" ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" s1)
###       ("_idts" ("_position" s2)
###         ("_idts" ("_position" s1') ("_position" s2'))))
###     ("\<^const>secTypes.lowEquiv"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>secTypes.lowEquiv" ("_position" \<Gamma>)
###             ("_position" s1)
###             ("\<^const>HOL.conj" ("_position" s2)
###               ("\<^const>Semantics.reds" ("_position" c) ("_position" s1)
###                 ("_position" Skip) ("_position" s1'))))
###           ("\<^const>Semantics.reds" ("_position" c) ("_position" s2)
###             ("_position" Skip) ("_position" s2')))
###         ("_position" \<Gamma>))
###       ("_position" s1') ("_position" s2'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 287 of "$AFP/VolpanoSmith/secTypes.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Semantics.interpret" ("_position" e) ("_position" s1))
###     ("\<^const>Semantics.interpret" ("_position" e) ("_position" s2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Semantics.interpret" ("_position" e)
###     ("\<^const>HOL.eq" ("_position" s1)
###       ("\<^const>Semantics.interpret" ("_position" e) ("_position" s2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 313 of "$AFP/VolpanoSmith/secTypes.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Semantics.interpret" ("_position" e) ("_position" s1))
###     ("\<^const>Semantics.interpret" ("_position" e) ("_position" s2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Semantics.interpret" ("_position" e)
###     ("\<^const>HOL.eq" ("_position" s1)
###       ("\<^const>Semantics.interpret" ("_position" e) ("_position" s2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 326 of "$AFP/VolpanoSmith/secTypes.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" s1')
###     ("_Update" ("_position" s1)
###       ("_updbind" ("_position" V)
###         ("\<^const>Semantics.interpret" ("_position" e)
###           ("_position" s1))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" s1')
###     ("_applC" ("_position" s1)
###       ("\<^const>Semantics.com.LAss" ("_position" V)
###         ("\<^const>Semantics.interpret" ("_position" e)
###           ("_position" s1))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 327 of "$AFP/VolpanoSmith/secTypes.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" s2')
###     ("_Update" ("_position" s2)
###       ("_updbind" ("_position" V)
###         ("\<^const>Semantics.interpret" ("_position" e)
###           ("_position" s2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" s2')
###     ("_applC" ("_position" s2)
###       ("\<^const>Semantics.com.LAss" ("_position" V)
###         ("\<^const>Semantics.interpret" ("_position" e)
###           ("_position" s2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 352 of "$AFP/VolpanoSmith/secTypes.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" s1')
###     ("_Update" ("_position" s1)
###       ("_updbind" ("_position" V)
###         ("\<^const>Semantics.interpret" ("_position" e)
###           ("_position" s1))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" s1')
###     ("_applC" ("_position" s1)
###       ("\<^const>Semantics.com.LAss" ("_position" V)
###         ("\<^const>Semantics.interpret" ("_position" e)
###           ("_position" s1))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 352 of "$AFP/VolpanoSmith/secTypes.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" s2')
###     ("_Update" ("_position" s2)
###       ("_updbind" ("_position" V)
###         ("\<^const>Semantics.interpret" ("_position" e)
###           ("_position" s2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" s2')
###     ("_applC" ("_position" s2)
###       ("\<^const>Semantics.com.LAss" ("_position" V)
###         ("\<^const>Semantics.interpret" ("_position" e)
###           ("_position" s2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.secTypes"
### 0.418s elapsed time, 0.668s cpu time, 0.052s GC time
Loading theory "Draft.secTypesMoreTemplates"
val templateLemmas =
   [("secTypes.lowEquivReflexive",
     "?\<Gamma> \<turnstile> ?s1.0 \<approx>\<^sub>L ?s1.0",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 0)
         )),
    ("secTypes.secTypeImpliesNonInterference",
     "?\<Gamma>,?T \<turnstile> ?c ==> nonInterference ?\<Gamma> ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("secTypes.lowEquivSymmetric",
     "?\<Gamma> \<turnstile> ?s1.0 \<approx>\<^sub>L ?s2.0 ==>
      ?\<Gamma> \<turnstile> ?s2.0 \<approx>\<^sub>L ?s1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("secTypes.typeableFreevars",
     "?\<Gamma> \<turnstile> ?e : ?T ==> fv ?e <= dom ?\<Gamma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 2)))),
    ("secTypes.WhileHighCompositionality",
     "?\<Gamma>,High \<turnstile> while (?b) ?c' ==>
      nonInterference ?\<Gamma> (while (?b) ?c')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_hole 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))
           ))),
    ("secTypes.CondHighCompositionality",
     "?\<Gamma>,High \<turnstile> if (?b) ?c1.0 else ?c2.0 ==>
      nonInterference ?\<Gamma> (if (?b) ?c1.0 else ?c2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_hole 2),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("secTypes.SeqCompositionality",
     "[| nonInterference ?\<Gamma> ?c1.0; nonInterference ?\<Gamma> ?c2.0 |]
      ==> nonInterference ?\<Gamma> (?c1.0;; ?c2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("secTypes.lowEquivTransitive",
     "[| ?\<Gamma> \<turnstile> ?s1.0 \<approx>\<^sub>L ?s2.0;
         ?\<Gamma> \<turnstile> ?s2.0 \<approx>\<^sub>L ?s3.0 |]
      ==> ?\<Gamma> \<turnstile> ?s1.0 \<approx>\<^sub>L ?s3.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("secTypes.exprTypingLow",
     "[| ?\<Gamma> \<turnstile> ?e : Low; ?x : fv ?e |]
      ==> ?\<Gamma> ?x = Some Low",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_var 1))
            )],
       template_equation
        (template_app (template_var 2, template_var 0),
         template_app (template_hole 0, template_hole 4)))),
    ("secTypes.exprNotNone",
     "[| ?\<Gamma> \<turnstile> ?e : ?T; fv ?e <= dom ?s |]
      ==> \<lbrakk>?e\<rbrakk>?s ~= None",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 2),
          template_app (template_hole 4, template_var 0))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0),
             template_hole 0)
           ))),
    ("secTypes.interpretLow2",
     "[| ?\<Gamma> \<turnstile> ?e : Low;
         ?\<Gamma> \<turnstile> ?s1.0 \<approx>\<^sub>L ?s2.0 |]
      ==> \<lbrakk>?e\<rbrakk>?s1.0 = \<lbrakk>?e\<rbrakk>?s2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("secTypes.exprTypeable",
     "[| fv ?e <= dom ?\<Gamma>;
         !!T. ?\<Gamma> \<turnstile> ?e : T ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 2),
          template_app (template_hole 2, template_var 1)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("secTypes.highBodies",
     "[| ?\<Gamma>,High \<turnstile> ?c;
         \<langle>?c,?s1.0\<rangle> \<rightarrow>*
         \<langle>Skip,?s2.0\<rangle> |]
      ==> ?\<Gamma> \<turnstile> ?s1.0 \<approx>\<^sub>L ?s2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_hole 5),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_hole 3),
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)
           ))),
    ("secTypes.exprBinopTypeable",
     "?\<Gamma> \<turnstile> ?e1.0 \<guillemotleft>?bop\<guillemotright> ?e2.0 : ?T ==>
      (EX T1. ?\<Gamma> \<turnstile> ?e1.0 : T1) &
      (EX T2. ?\<Gamma> \<turnstile> ?e2.0 : T2)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1, template_app (template_hole 0, t_empty)),
             template_app (template_hole 0, t_empty))
           ))),
    ("secTypes.WhileLowCompositionality",
     "[| nonInterference ?\<Gamma> ?c'; ?\<Gamma> \<turnstile> ?b : Low;
         ?\<Gamma>,Low \<turnstile> ?c' |]
      ==> nonInterference ?\<Gamma> (while (?b) ?c')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 0),
              template_hole 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_hole 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("secTypes.CondLowCompositionality",
     "[| nonInterference ?\<Gamma> ?c1.0; nonInterference ?\<Gamma> ?c2.0;
         ?\<Gamma> \<turnstile> ?b : Low |]
      ==> nonInterference ?\<Gamma> (if (?b) ?c1.0 else ?c2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2),
               template_var 1))
           ))),
    ("secTypes.exprTypingHigh",
     "[| ?\<Gamma> \<turnstile> ?e : ?T; ?x : fv ?e;
         ?\<Gamma> ?x = Some High |]
      ==> ?\<Gamma> \<turnstile> ?e : High",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 2))
            ),
        template_equation
         (template_app (template_var 3, template_var 0),
          template_app (template_hole 1, template_hole 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 3),
               template_var 2),
             template_hole 0)
           ))),
    ("secTypes.interpretLow",
     "[| ?\<Gamma> \<turnstile> ?s1.0 \<approx>\<^sub>L ?s2.0;
         ALL V:fv ?e. ?\<Gamma> V = Some Low |]
      ==> \<lbrakk>?e\<rbrakk>?s1.0 = \<lbrakk>?e\<rbrakk>?s2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 0)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("secTypes.assignNIhighlemma",
     "[| ?\<Gamma> \<turnstile> ?s1.0 \<approx>\<^sub>L ?s2.0;
         ?\<Gamma> ?V = Some High;
         ?s1' = ?s1.0(?V := \<lbrakk>?e\<rbrakk>?s1.0);
         ?s2' = ?s2.0(?V := \<lbrakk>?e\<rbrakk>?s2.0) |]
      ==> ?\<Gamma> \<turnstile> ?s1' \<approx>\<^sub>L ?s2'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_equation
         (template_app (template_var 6, template_var 3),
          template_app (template_hole 4, template_hole 3)),
        template_equation
         (template_var 2,
          template_app
           (template_app
             (template_app (template_hole 1, template_var 5),
              template_var 3),
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 5))),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_app (template_hole 1, template_var 4),
              template_var 3),
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 4)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, template_var 6),
               template_var 2),
             template_var 0)
           ))),
    ("secTypes.WhileStepInduct",
     "[| \<langle>while (?b) ?c,?s1.0\<rangle> \<rightarrow>*
         \<langle>Skip,?s2.0\<rangle>;
         !!s1 s2.
            \<langle>?c,s1\<rangle> \<rightarrow>*
            \<langle>Skip,s2\<rangle> ==>
            ?\<Gamma> \<turnstile> s1 \<approx>\<^sub>L s2;
         ?\<Gamma>,High \<turnstile> ?c |]
      ==> ?\<Gamma> \<turnstile> ?s1.0 \<approx>\<^sub>L ?s2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_hole 7),
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 4),
                      template_var 3)),
                  template_var 2)),
              template_app
               (template_app (template_hole 6, template_hole 4),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 0),
                template_hole 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("secTypes.nonInterferenceI",
     "(!!s1 s2 s1' s2'.
          [| ?\<Gamma> \<turnstile> s1 \<approx>\<^sub>L s2;
             \<langle>?c,s1\<rangle> \<rightarrow>*
             \<langle>Skip,s1'\<rangle>;
             \<langle>?c,s2\<rangle> \<rightarrow>*
             \<langle>Skip,s2'\<rangle> |]
          ==> ?\<Gamma> \<turnstile> s1' \<approx>\<^sub>L s2') ==>
      nonInterference ?\<Gamma> ?c",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("secTypes.assignNIlowlemma",
     "[| ?\<Gamma> \<turnstile> ?s1.0 \<approx>\<^sub>L ?s2.0;
         ?\<Gamma> ?V = Some Low; ?\<Gamma> \<turnstile> ?e : Low;
         ?s1' = ?s1.0(?V := \<lbrakk>?e\<rbrakk>?s1.0);
         ?s2' = ?s2.0(?V := \<lbrakk>?e\<rbrakk>?s2.0) |]
      ==> ?\<Gamma> \<turnstile> ?s1' \<approx>\<^sub>L ?s2'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_equation
         (template_app (template_var 6, template_var 3),
          template_app (template_hole 5, template_hole 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 6),
                template_var 2),
              template_hole 4)
            ),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_app (template_hole 1, template_var 5),
              template_var 3),
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 5))),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_app (template_hole 1, template_var 4),
              template_var 3),
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 4)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, template_var 6),
               template_var 1),
             template_var 0)
           ))),
    ("secTypes.WhileLowStepInduct",
     "[| \<langle>while (?b) ?c',?s1.0\<rangle> \<rightarrow>*
         \<langle>Skip,?s1'\<rangle>;
         \<langle>while (?b) ?c',?s2.0\<rangle> \<rightarrow>*
         \<langle>Skip,?s2'\<rangle>;
         ?\<Gamma> \<turnstile> ?b : Low;
         !!s1 s1' s2 s2'.
            [| \<langle>?c',s1\<rangle> \<rightarrow>*
               \<langle>Skip,s1'\<rangle>;
               \<langle>?c',s2\<rangle> \<rightarrow>*
               \<langle>Skip,s2'\<rangle>;
               ?\<Gamma> \<turnstile> s1 \<approx>\<^sub>L s2 |]
            ==> ?\<Gamma> \<turnstile> s1' \<approx>\<^sub>L s2';
         ?\<Gamma> \<turnstile> ?s1.0 \<approx>\<^sub>L ?s2.0 |]
      ==> ?\<Gamma> \<turnstile> ?s1' \<approx>\<^sub>L ?s2'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_hole 7),
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 6),
                      template_var 5)),
                  template_var 4)),
              template_app
               (template_app (template_hole 6, template_hole 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_hole 7),
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 6),
                      template_var 5)),
                  template_var 2)),
              template_app
               (template_app (template_hole 6, template_hole 4),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 0),
                template_var 6),
              template_hole 2)
            ),
        template_predicate (template_app (template_hole 1, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 0),
                template_var 4),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3),
             template_var 1)
           )))]:
   (string * thm * template) list
### theory "Draft.secTypesMoreTemplates"
### 0.386s elapsed time, 0.578s cpu time, 0.079s GC time
val it = (): unit
