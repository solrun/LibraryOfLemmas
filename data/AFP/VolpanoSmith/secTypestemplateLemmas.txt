   [("secTypes.lowEquivReflexive",
     "?\<Gamma> \<turnstile> ?s1.0 \<approx>\<^sub>L ?s1.0",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 0)
         )),
    ("secTypes.secTypeImpliesNonInterference",
     "?\<Gamma>,?T \<turnstile> ?c ==> nonInterference ?\<Gamma> ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("secTypes.lowEquivSymmetric",
     "?\<Gamma> \<turnstile> ?s1.0 \<approx>\<^sub>L ?s2.0 ==>
      ?\<Gamma> \<turnstile> ?s2.0 \<approx>\<^sub>L ?s1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("secTypes.typeableFreevars",
     "?\<Gamma> \<turnstile> ?e : ?T ==> fv ?e <= dom ?\<Gamma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 2)))),
    ("secTypes.WhileHighCompositionality",
     "?\<Gamma>,High \<turnstile> while (?b) ?c' ==>
      nonInterference ?\<Gamma> (while (?b) ?c')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_hole 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))
           ))),
    ("secTypes.CondHighCompositionality",
     "?\<Gamma>,High \<turnstile> if (?b) ?c1.0 else ?c2.0 ==>
      nonInterference ?\<Gamma> (if (?b) ?c1.0 else ?c2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_hole 2),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("secTypes.SeqCompositionality",
     "[| nonInterference ?\<Gamma> ?c1.0; nonInterference ?\<Gamma> ?c2.0 |]
      ==> nonInterference ?\<Gamma> (?c1.0;; ?c2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("secTypes.lowEquivTransitive",
     "[| ?\<Gamma> \<turnstile> ?s1.0 \<approx>\<^sub>L ?s2.0;
         ?\<Gamma> \<turnstile> ?s2.0 \<approx>\<^sub>L ?s3.0 |]
      ==> ?\<Gamma> \<turnstile> ?s1.0 \<approx>\<^sub>L ?s3.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("secTypes.exprTypingLow",
     "[| ?\<Gamma> \<turnstile> ?e : Low; ?x : fv ?e |]
      ==> ?\<Gamma> ?x = Some Low",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_var 1))
            )],
       template_equation
        (template_app (template_var 2, template_var 0),
         template_app (template_hole 0, template_hole 4)))),
    ("secTypes.exprNotNone",
     "[| ?\<Gamma> \<turnstile> ?e : ?T; fv ?e <= dom ?s |]
      ==> \<lbrakk>?e\<rbrakk>?s ~= None",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 2),
          template_app (template_hole 4, template_var 0))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0),
             template_hole 0)
           ))),
    ("secTypes.interpretLow2",
     "[| ?\<Gamma> \<turnstile> ?e : Low;
         ?\<Gamma> \<turnstile> ?s1.0 \<approx>\<^sub>L ?s2.0 |]
      ==> \<lbrakk>?e\<rbrakk>?s1.0 = \<lbrakk>?e\<rbrakk>?s2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("secTypes.exprTypeable",
     "[| fv ?e <= dom ?\<Gamma>;
         !!T. ?\<Gamma> \<turnstile> ?e : T ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 2),
          template_app (template_hole 2, template_var 1)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("secTypes.highBodies",
     "[| ?\<Gamma>,High \<turnstile> ?c;
         \<langle>?c,?s1.0\<rangle> \<rightarrow>*
         \<langle>Skip,?s2.0\<rangle> |]
      ==> ?\<Gamma> \<turnstile> ?s1.0 \<approx>\<^sub>L ?s2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_hole 5),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_hole 3),
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)
           ))),
    ("secTypes.exprBinopTypeable",
     "?\<Gamma> \<turnstile> ?e1.0 \<guillemotleft>?bop\<guillemotright> ?e2.0 : ?T ==>
      (EX T1. ?\<Gamma> \<turnstile> ?e1.0 : T1) &
      (EX T2. ?\<Gamma> \<turnstile> ?e2.0 : T2)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1, template_app (template_hole 0, t_empty)),
             template_app (template_hole 0, t_empty))
           ))),
    ("secTypes.WhileLowCompositionality",
     "[| nonInterference ?\<Gamma> ?c'; ?\<Gamma> \<turnstile> ?b : Low;
         ?\<Gamma>,Low \<turnstile> ?c' |]
      ==> nonInterference ?\<Gamma> (while (?b) ?c')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 0),
              template_hole 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_hole 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("secTypes.CondLowCompositionality",
     "[| nonInterference ?\<Gamma> ?c1.0; nonInterference ?\<Gamma> ?c2.0;
         ?\<Gamma> \<turnstile> ?b : Low |]
      ==> nonInterference ?\<Gamma> (if (?b) ?c1.0 else ?c2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2),
               template_var 1))
           ))),
    ("secTypes.exprTypingHigh",
     "[| ?\<Gamma> \<turnstile> ?e : ?T; ?x : fv ?e;
         ?\<Gamma> ?x = Some High |]
      ==> ?\<Gamma> \<turnstile> ?e : High",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 2))
            ),
        template_equation
         (template_app (template_var 3, template_var 0),
          template_app (template_hole 1, template_hole 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 3),
               template_var 2),
             template_hole 0)
           ))),
    ("secTypes.interpretLow",
     "[| ?\<Gamma> \<turnstile> ?s1.0 \<approx>\<^sub>L ?s2.0;
         ALL V:fv ?e. ?\<Gamma> V = Some Low |]
      ==> \<lbrakk>?e\<rbrakk>?s1.0 = \<lbrakk>?e\<rbrakk>?s2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 0)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("secTypes.assignNIhighlemma",
     "[| ?\<Gamma> \<turnstile> ?s1.0 \<approx>\<^sub>L ?s2.0;
         ?\<Gamma> ?V = Some High;
         ?s1' = ?s1.0(?V := \<lbrakk>?e\<rbrakk>?s1.0);
         ?s2' = ?s2.0(?V := \<lbrakk>?e\<rbrakk>?s2.0) |]
      ==> ?\<Gamma> \<turnstile> ?s1' \<approx>\<^sub>L ?s2'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_equation
         (template_app (template_var 6, template_var 3),
          template_app (template_hole 4, template_hole 3)),
        template_equation
         (template_var 2,
          template_app
           (template_app
             (template_app (template_hole 1, template_var 5),
              template_var 3),
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 5))),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_app (template_hole 1, template_var 4),
              template_var 3),
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 4)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, template_var 6),
               template_var 2),
             template_var 0)
           ))),
    ("secTypes.WhileStepInduct",
     "[| \<langle>while (?b) ?c,?s1.0\<rangle> \<rightarrow>*
         \<langle>Skip,?s2.0\<rangle>;
         !!s1 s2.
            \<langle>?c,s1\<rangle> \<rightarrow>*
            \<langle>Skip,s2\<rangle> ==>
            ?\<Gamma> \<turnstile> s1 \<approx>\<^sub>L s2;
         ?\<Gamma>,High \<turnstile> ?c |]
      ==> ?\<Gamma> \<turnstile> ?s1.0 \<approx>\<^sub>L ?s2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_hole 7),
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 4),
                      template_var 3)),
                  template_var 2)),
              template_app
               (template_app (template_hole 6, template_hole 4),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 0),
                template_hole 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("secTypes.nonInterferenceI",
     "(!!s1 s2 s1' s2'.
          [| ?\<Gamma> \<turnstile> s1 \<approx>\<^sub>L s2;
             \<langle>?c,s1\<rangle> \<rightarrow>*
             \<langle>Skip,s1'\<rangle>;
             \<langle>?c,s2\<rangle> \<rightarrow>*
             \<langle>Skip,s2'\<rangle> |]
          ==> ?\<Gamma> \<turnstile> s1' \<approx>\<^sub>L s2') ==>
      nonInterference ?\<Gamma> ?c",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("secTypes.assignNIlowlemma",
     "[| ?\<Gamma> \<turnstile> ?s1.0 \<approx>\<^sub>L ?s2.0;
         ?\<Gamma> ?V = Some Low; ?\<Gamma> \<turnstile> ?e : Low;
         ?s1' = ?s1.0(?V := \<lbrakk>?e\<rbrakk>?s1.0);
         ?s2' = ?s2.0(?V := \<lbrakk>?e\<rbrakk>?s2.0) |]
      ==> ?\<Gamma> \<turnstile> ?s1' \<approx>\<^sub>L ?s2'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_equation
         (template_app (template_var 6, template_var 3),
          template_app (template_hole 5, template_hole 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 6),
                template_var 2),
              template_hole 4)
            ),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_app (template_hole 1, template_var 5),
              template_var 3),
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 5))),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_app (template_hole 1, template_var 4),
              template_var 3),
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 4)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, template_var 6),
               template_var 1),
             template_var 0)
           ))),
    ("secTypes.WhileLowStepInduct",
     "[| \<langle>while (?b) ?c',?s1.0\<rangle> \<rightarrow>*
         \<langle>Skip,?s1'\<rangle>;
         \<langle>while (?b) ?c',?s2.0\<rangle> \<rightarrow>*
         \<langle>Skip,?s2'\<rangle>;
         ?\<Gamma> \<turnstile> ?b : Low;
         !!s1 s1' s2 s2'.
            [| \<langle>?c',s1\<rangle> \<rightarrow>*
               \<langle>Skip,s1'\<rangle>;
               \<langle>?c',s2\<rangle> \<rightarrow>*
               \<langle>Skip,s2'\<rangle>;
               ?\<Gamma> \<turnstile> s1 \<approx>\<^sub>L s2 |]
            ==> ?\<Gamma> \<turnstile> s1' \<approx>\<^sub>L s2';
         ?\<Gamma> \<turnstile> ?s1.0 \<approx>\<^sub>L ?s2.0 |]
      ==> ?\<Gamma> \<turnstile> ?s1' \<approx>\<^sub>L ?s2'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_hole 7),
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 6),
                      template_var 5)),
                  template_var 4)),
              template_app
               (template_app (template_hole 6, template_hole 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_hole 7),
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 6),
                      template_var 5)),
                  template_var 2)),
              template_app
               (template_app (template_hole 6, template_hole 4),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 0),
                template_var 6),
              template_hole 2)
            ),
        template_predicate (template_app (template_hole 1, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 0),
                template_var 4),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3),
             template_var 1)
           )))]
