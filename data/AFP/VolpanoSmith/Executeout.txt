Loading theory "Draft.Semantics" (required by "Draft.ExecuteMoreTemplates" via "Draft.Execute" via "Draft.secTypes")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ExecuteMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ExecuteMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ExecuteMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.139s elapsed time, 0.568s cpu time, 0.050s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ExecuteMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.209s elapsed time, 0.847s cpu time, 0.050s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ExecuteMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.323s elapsed time, 1.291s cpu time, 0.122s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ExecuteMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.954s elapsed time, 3.601s cpu time, 0.777s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.033s elapsed time, 3.755s cpu time, 0.752s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.933s elapsed time, 6.028s cpu time, 0.988s GC time
Loading theory "Draft.Templates" (required by "Draft.ExecuteMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.066s elapsed time, 0.146s cpu time, 0.041s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ExecuteMoreTemplates")
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 68 of "$AFP/VolpanoSmith/Semantics.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>interpret" ("_applC" ("_position" Val) ("_position" v))
###       ("_position" s))
###     ("_applC" ("_position" Some) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>interpret" ("_applC" ("_position" Val) ("_position" v))
###     ("\<^const>HOL.eq" ("_position" s)
###       ("_applC" ("_position" Some) ("_position" v)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^fixed>interpret" ("_applC" ("_position" Val) ("_position" v))
###       ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###     ("_position" v)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 69 of "$AFP/VolpanoSmith/Semantics.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>interpret" ("_applC" ("_position" Var) ("_position" V))
###       ("_position" s))
###     ("_applC" ("_position" s) ("_position" V))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>interpret" ("_applC" ("_position" Var) ("_position" V))
###     ("\<^const>HOL.eq" ("_position" s)
###       ("_applC" ("_position" s) ("_position" V)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^fixed>interpret" ("_applC" ("_position" Var) ("_position" V))
###       ("\<^const>HOL.eq" ("_position" s) ("_position" s)))
###     ("_position" V)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 70 of "$AFP/VolpanoSmith/Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>interpret"
###       ("\<^const>Semantics.expr.BinOp" ("_position" e\<^sub>1)
###         ("_position" bop) ("_position" e\<^sub>2))
###       ("_position" s))
###     ("_case_syntax"
###       ("\<^fixed>interpret" ("_position" e\<^sub>1) ("_position" s))
###       ("_case2" ("_case1" ("_position" None) ("_position" None))
###         ("_case1" ("_applC" ("_position" Some) ("_position" v\<^sub>1))
###           ("_case_syntax"
###             ("\<^fixed>interpret" ("_position" e\<^sub>2) ("_position" s))
###             ("_case2" ("_case1" ("_position" None) ("_position" None))
###               ("_case1"
###                 ("_applC" ("_position" Some) ("_position" v\<^sub>2))
###                 ("_applC" ("_position" binop)
###                   ("_cargs" ("_position" bop)
###                     ("_cargs" ("_position" v\<^sub>1)
###                       ("_position" v\<^sub>2))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>interpret"
###     ("\<^const>Semantics.expr.BinOp" ("_position" e\<^sub>1)
###       ("_position" bop) ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" s)
###       ("_case_syntax"
###         ("\<^fixed>interpret" ("_position" e\<^sub>1) ("_position" s))
###         ("_case2" ("_case1" ("_position" None) ("_position" None))
###           ("_case1" ("_applC" ("_position" Some) ("_position" v\<^sub>1))
###             ("_case_syntax"
###               ("\<^fixed>interpret" ("_position" e\<^sub>2) ("_position" s))
###               ("_case2" ("_case1" ("_position" None) ("_position" None))
###                 ("_case1"
###                   ("_applC" ("_position" Some) ("_position" v\<^sub>2))
###                   ("_applC" ("_position" binop)
###                     ("_cargs" ("_position" bop)
###                       ("_cargs" ("_position" v\<^sub>1)
###                         ("_position" v\<^sub>2)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Ambiguous input (line 82 of "$AFP/VolpanoSmith/Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'"
###     ("\<^const>Semantics.com.LAss" ("_position" V) ("_position" e))
###     ("_position" s) ("_position" Skip)
###     ("_applC" ("_position" s)
###       ("\<^const>Semantics.com.LAss" ("_position" V)
###         ("\<^const>Semantics.interpret" ("_position" e) ("_position" s))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'"
###     ("\<^const>Semantics.com.LAss" ("_position" V) ("_position" e))
###     ("_position" s) ("_position" Skip)
###     ("_Update" ("_position" s)
###       ("_updbind" ("_position" V)
###         ("\<^const>Semantics.interpret" ("_position" e) ("_position" s))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 91 of "$AFP/VolpanoSmith/Semantics.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###       ("_applC" ("_position" Some) ("_position" true))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" c\<^sub>1) ("_position" s))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.interpret" ("_position" b)
###       ("\<^const>HOL.eq" ("_position" s)
###         ("_applC" ("_position" Some) ("_position" true)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" c\<^sub>1) ("_position" s))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###       ("_position" true)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" c\<^sub>1) ("_position" s))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 94 of "$AFP/VolpanoSmith/Semantics.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###       ("_applC" ("_position" Some) ("_position" false))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" c\<^sub>2) ("_position" s))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.interpret" ("_position" b)
###       ("\<^const>HOL.eq" ("_position" s)
###         ("_applC" ("_position" Some) ("_position" false)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" c\<^sub>2) ("_position" s))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###       ("_position" false)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" c\<^sub>2) ("_position" s))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 97 of "$AFP/VolpanoSmith/Semantics.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###       ("_applC" ("_position" Some) ("_position" true))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" c))
###       ("_position" s)
###       ("\<^const>Semantics.com.Seq" ("_position" c)
###         ("\<^const>Semantics.com.While" ("_position" b) ("_position" c)))
###       ("_position" s))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.interpret" ("_position" b)
###       ("\<^const>HOL.eq" ("_position" s)
###         ("_applC" ("_position" Some) ("_position" true)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" c))
###       ("_position" s)
###       ("\<^const>Semantics.com.Seq" ("_position" c)
###         ("\<^const>Semantics.com.While" ("_position" b) ("_position" c)))
###       ("_position" s))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###       ("_position" true)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" c))
###       ("_position" s)
###       ("\<^const>Semantics.com.Seq" ("_position" c)
###         ("\<^const>Semantics.com.While" ("_position" b) ("_position" c)))
###       ("_position" s))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 100 of "$AFP/VolpanoSmith/Semantics.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###       ("_applC" ("_position" Some) ("_position" false))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" c))
###       ("_position" s) ("_position" Skip) ("_position" s))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.interpret" ("_position" b)
###       ("\<^const>HOL.eq" ("_position" s)
###         ("_applC" ("_position" Some) ("_position" false)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" c))
###       ("_position" s) ("_position" Skip) ("_position" s))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###       ("_position" false)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" c))
###       ("_position" s) ("_position" Skip) ("_position" s))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "red"
  Proving monotonicity ...
### Ambiguous input (line 113 of "$AFP/VolpanoSmith/Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.LAss" ("_position" V) ("_position" e))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" s')
###       ("_Update" ("_position" s)
###         ("_updbind" ("_position" V)
###           ("\<^const>Semantics.interpret" ("_position" e)
###             ("_position" s)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.LAss" ("_position" V) ("_position" e))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" s')
###       ("_applC" ("_position" s)
###         ("\<^const>Semantics.com.LAss" ("_position" V)
###           ("\<^const>Semantics.interpret" ("_position" e)
###             ("_position" s)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 167 of "$AFP/VolpanoSmith/Semantics.thy") produces 15 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.disj"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_applC" ("_position" Some) ("_position" true)))
###           ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))))
###       ("_applC" ("_position" Some) ("_position" false)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" true)))
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" false))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.interpret" ("_position" b)
###       ("\<^const>HOL.disj"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" true)))
###         ("\<^const>HOL.eq"
###           ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###           ("_applC" ("_position" Some) ("_position" false)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" true))))
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" false))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("_applC"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###         ("_position" true))
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" false))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" true)))
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" false)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.interpret" ("_position" b)
###       ("\<^const>HOL.disj"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" true)))
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_applC" ("_position" Some) ("_position" false))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" true))))
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" false)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("_applC"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###         ("_position" true))
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" false)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.disj"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_applC" ("_position" Some) ("_position" true)))
###           ("\<^const>Semantics.interpret" ("_position" b)
###             ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))))
###       ("_position" false))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 171 of "$AFP/VolpanoSmith/Semantics.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" true))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds" ("_position" c\<^sub>1) ("_position" s)
###         ("_position" Skip) ("_position" s')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" true)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds" ("_position" c\<^sub>1) ("_position" s)
###         ("_position" Skip) ("_position" s')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###         ("_position" true)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds" ("_position" c\<^sub>1) ("_position" s)
###         ("_position" Skip) ("_position" s')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 175 of "$AFP/VolpanoSmith/Semantics.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" false))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds" ("_position" c\<^sub>2) ("_position" s)
###         ("_position" Skip) ("_position" s')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" false)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds" ("_position" c\<^sub>2) ("_position" s)
###         ("_position" Skip) ("_position" s')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###         ("_position" false)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds" ("_position" c\<^sub>2) ("_position" s)
###         ("_position" Skip) ("_position" s')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 179 of "$AFP/VolpanoSmith/Semantics.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" false))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" s) ("_position" s')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" false)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" s) ("_position" s')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###         ("_position" false)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" s) ("_position" s')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 185 of "$AFP/VolpanoSmith/Semantics.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" true))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" sx)
###         ("\<^const>HOL.conj"
###           ("\<^const>Semantics.reds" ("_position" cx) ("_position" s)
###             ("_position" Skip) ("_position" sx))
###           ("\<^const>Semantics.reds"
###             ("\<^const>Semantics.com.While" ("_position" b)
###               ("_position" cx))
###             ("_position" sx) ("_position" Skip) ("_position" s')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" true)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" sx)
###         ("\<^const>HOL.conj"
###           ("\<^const>Semantics.reds" ("_position" cx) ("_position" s)
###             ("_position" Skip) ("_position" sx))
###           ("\<^const>Semantics.reds"
###             ("\<^const>Semantics.com.While" ("_position" b)
###               ("_position" cx))
###             ("_position" sx) ("_position" Skip) ("_position" s')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###         ("_position" true)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" sx)
###         ("\<^const>HOL.conj"
###           ("\<^const>Semantics.reds" ("_position" cx) ("_position" s)
###             ("_position" Skip) ("_position" sx))
###           ("\<^const>Semantics.reds"
###             ("\<^const>Semantics.com.While" ("_position" b)
###               ("_position" cx))
###             ("_position" sx) ("_position" Skip) ("_position" s')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 194 of "$AFP/VolpanoSmith/Semantics.thy") produces 15 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" com))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.disj"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_applC" ("_position" Some) ("_position" true)))
###           ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))))
###       ("_applC" ("_position" Some) ("_position" false)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" com))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" true)))
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" false))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" com))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.interpret" ("_position" b)
###       ("\<^const>HOL.disj"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" true)))
###         ("\<^const>HOL.eq"
###           ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###           ("_applC" ("_position" Some) ("_position" false)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" com))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" true))))
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" false))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" com))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("_applC"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###         ("_position" true))
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" false))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" com))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" true)))
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" false)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" com))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.interpret" ("_position" b)
###       ("\<^const>HOL.disj"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" true)))
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_applC" ("_position" Some) ("_position" false))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" com))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" true))))
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" false)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" com))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("_applC"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###         ("_position" true))
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" false)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" com))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.disj"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_applC" ("_position" Some) ("_position" true)))
###           ("\<^const>Semantics.interpret" ("_position" b)
###             ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))))
###       ("_position" false))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "red_n"
  Proving monotonicity ...
### Ambiguous input (line 242 of "$AFP/VolpanoSmith/Semantics.thy") produces 63 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.red_n"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" n) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" s)
###               ("_applC" ("_position" Some) ("_position" false)))
###             ("\<^const>HOL.eq" ("_position" s) ("_position" s'))))
###         ("\<^const>HOL.eq" ("_position" n)
###           ("\<^const>Groups.one_class.one")))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" i)
###           ("_idts" ("_position" j) ("_position" s'')))
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Semantics.interpret" ("_position" b)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" s)
###                   ("_applC" ("_position" Some) ("_position" true)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Semantics.red_n" ("_position" cx)
###                     ("_position" s) ("_position" i) ("_position" Skip)
###                     ("_position" s''))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Semantics.red_n"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" j) ("_position" Skip)
###                       ("_position" s'))
###                     ("\<^const>HOL.eq" ("_position" n) ("_position" i))))))
###             ("_position" j))
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.red_n"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" n) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj"
###         ("_applC"
###           ("\<^const>Semantics.interpret" ("_position" b)
###             ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###           ("_position" false))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" s) ("_position" s'))
###           ("\<^const>HOL.eq" ("_position" n)
###             ("\<^const>Groups.one_class.one"))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" i)
###           ("_idts" ("_position" j) ("_position" s'')))
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Semantics.interpret" ("_position" b)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" s)
###                   ("_applC" ("_position" Some) ("_position" true)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Semantics.red_n" ("_position" cx)
###                     ("_position" s) ("_position" i) ("_position" Skip)
###                     ("_position" s''))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Semantics.red_n"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" j) ("_position" Skip)
###                       ("_position" s'))
###                     ("\<^const>HOL.eq" ("_position" n) ("_position" i))))))
###             ("_position" j))
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.red_n"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" n) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_applC" ("_position" Some) ("_position" false))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" s) ("_position" s'))
###           ("\<^const>HOL.eq" ("_position" n)
###             ("\<^const>Groups.one_class.one"))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" i)
###           ("_idts" ("_position" j) ("_position" s'')))
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Semantics.interpret" ("_position" b)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" s)
###                   ("_applC" ("_position" Some) ("_position" true)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Semantics.red_n" ("_position" cx)
###                     ("_position" s) ("_position" i) ("_position" Skip)
###                     ("_position" s''))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Semantics.red_n"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" j) ("_position" Skip)
###                       ("_position" s'))
###                     ("\<^const>HOL.eq" ("_position" n) ("_position" i))))))
###             ("_position" j))
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.red_n"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" n) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_applC" ("_position" Some) ("_position" false)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" s) ("_position" s'))
###             ("\<^const>HOL.eq" ("_position" n)
###               ("\<^const>Groups.one_class.one")))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" i)
###           ("_idts" ("_position" j) ("_position" s'')))
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Semantics.interpret" ("_position" b)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" s)
###                   ("_applC" ("_position" Some) ("_position" true)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Semantics.red_n" ("_position" cx)
###                     ("_position" s) ("_position" i) ("_position" Skip)
###                     ("_position" s''))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Semantics.red_n"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" j) ("_position" Skip)
###                       ("_position" s'))
###                     ("\<^const>HOL.eq" ("_position" n) ("_position" i))))))
###             ("_position" j))
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.red_n"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" n) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###           ("_applC" ("_position" Some) ("_position" false)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" s) ("_position" s'))
###           ("\<^const>HOL.eq" ("_position" n)
###             ("\<^const>Groups.one_class.one"))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" i)
###           ("_idts" ("_position" j) ("_position" s'')))
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Semantics.interpret" ("_position" b)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" s)
###                   ("_applC" ("_position" Some) ("_position" true)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Semantics.red_n" ("_position" cx)
###                     ("_position" s) ("_position" i) ("_position" Skip)
###                     ("_position" s''))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Semantics.red_n"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" j) ("_position" Skip)
###                       ("_position" s'))
###                     ("\<^const>HOL.eq" ("_position" n) ("_position" i))))))
###             ("_position" j))
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.red_n"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" n) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>Semantics.interpret" ("_position" b)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" s)
###                 ("_applC" ("_position" Some) ("_position" false)))
###               ("_position" s)))
###           ("_position" s'))
###         ("\<^const>HOL.eq" ("_position" n)
###           ("\<^const>Groups.one_class.one")))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" i)
###           ("_idts" ("_position" j) ("_position" s'')))
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Semantics.interpret" ("_position" b)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" s)
###                   ("_applC" ("_position" Some) ("_position" true)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Semantics.red_n" ("_position" cx)
###                     ("_position" s) ("_position" i) ("_position" Skip)
###                     ("_position" s''))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Semantics.red_n"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" j) ("_position" Skip)
###                       ("_position" s'))
###                     ("\<^const>HOL.eq" ("_position" n) ("_position" i))))))
###             ("_position" j))
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.red_n"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" n) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" s)
###               ("_applC" ("_position" Some) ("_position" false)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" s) ("_position" s'))
###               ("_position" n))))
###         ("\<^const>Groups.one_class.one"))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" i)
###           ("_idts" ("_position" j) ("_position" s'')))
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Semantics.interpret" ("_position" b)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" s)
###                   ("_applC" ("_position" Some) ("_position" true)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Semantics.red_n" ("_position" cx)
###                     ("_position" s) ("_position" i) ("_position" Skip)
###                     ("_position" s''))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Semantics.red_n"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" j) ("_position" Skip)
###                       ("_position" s'))
###                     ("\<^const>HOL.eq" ("_position" n) ("_position" i))))))
###             ("_position" j))
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.red_n"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" n) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" s)
###               ("_applC" ("_position" Some) ("_position" false)))
###             ("\<^const>HOL.eq" ("_position" s) ("_position" s'))))
###         ("\<^const>HOL.eq" ("_position" n)
###           ("\<^const>Groups.one_class.one")))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" i)
###           ("_idts" ("_position" j) ("_position" s'')))
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Semantics.interpret" ("_position" b)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" s)
###                 ("_applC" ("_position" Some) ("_position" true)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Semantics.red_n" ("_position" cx) ("_position" s)
###                   ("_position" i) ("_position" Skip) ("_position" s''))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Semantics.red_n"
###                     ("\<^const>Semantics.com.While" ("_position" b)
###                       ("_position" cx))
###                     ("_position" s'') ("_position" j) ("_position" Skip)
###                     ("_position" s'))
###                   ("\<^const>HOL.eq" ("_position" n)
###                     ("\<^const>Groups.plus_class.plus" ("_position" i)
###                       ("_position" j)))))))
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.red_n"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" n) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj"
###         ("_applC"
###           ("\<^const>Semantics.interpret" ("_position" b)
###             ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###           ("_position" false))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" s) ("_position" s'))
###           ("\<^const>HOL.eq" ("_position" n)
###             ("\<^const>Groups.one_class.one"))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" i)
###           ("_idts" ("_position" j) ("_position" s'')))
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Semantics.interpret" ("_position" b)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" s)
###                 ("_applC" ("_position" Some) ("_position" true)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Semantics.red_n" ("_position" cx) ("_position" s)
###                   ("_position" i) ("_position" Skip) ("_position" s''))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Semantics.red_n"
###                     ("\<^const>Semantics.com.While" ("_position" b)
###                       ("_position" cx))
###                     ("_position" s'') ("_position" j) ("_position" Skip)
###                     ("_position" s'))
###                   ("\<^const>HOL.eq" ("_position" n)
###                     ("\<^const>Groups.plus_class.plus" ("_position" i)
###                       ("_position" j)))))))
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.red_n"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" n) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_applC" ("_position" Some) ("_position" false))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" s) ("_position" s'))
###           ("\<^const>HOL.eq" ("_position" n)
###             ("\<^const>Groups.one_class.one"))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" i)
###           ("_idts" ("_position" j) ("_position" s'')))
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Semantics.interpret" ("_position" b)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" s)
###                 ("_applC" ("_position" Some) ("_position" true)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Semantics.red_n" ("_position" cx) ("_position" s)
###                   ("_position" i) ("_position" Skip) ("_position" s''))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Semantics.red_n"
###                     ("\<^const>Semantics.com.While" ("_position" b)
###                       ("_position" cx))
###                     ("_position" s'') ("_position" j) ("_position" Skip)
###                     ("_position" s'))
###                   ("\<^const>HOL.eq" ("_position" n)
###                     ("\<^const>Groups.plus_class.plus" ("_position" i)
###                       ("_position" j)))))))
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 273 of "$AFP/VolpanoSmith/Semantics.thy") produces 3 parse trees:
### ("\<^const>Pure.all_binder" ("_position" s)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" false))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" s) ("_position" s))))))
### ("\<^const>Pure.all_binder" ("_position" s)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" false)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" s) ("_position" s))))))
### ("\<^const>Pure.all_binder" ("_position" s)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###         ("_position" false)))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" s) ("_position" s))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 274 of "$AFP/VolpanoSmith/Semantics.thy") produces 3 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" s)
###     ("_idts" ("_position" i) ("_idts" ("_position" j) ("_position" s''))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC"
###           ("\<^const>Semantics.interpret" ("_position" b)
###             ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###           ("_position" true)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Semantics.red_n" ("_position" cx) ("_position" s)
###             ("_position" i) ("_position" Skip) ("_position" s'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Semantics.red_n"
###               ("\<^const>Semantics.com.While" ("_position" b)
###                 ("_position" cx))
###               ("_position" s'') ("_position" j) ("_position" Skip)
###               ("_position" s')))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" s'') ("_position" s'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" s) ("_position" s'))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" s)
###     ("_idts" ("_position" i) ("_idts" ("_position" j) ("_position" s''))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_applC" ("_position" Some) ("_position" true)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Semantics.red_n" ("_position" cx) ("_position" s)
###             ("_position" i) ("_position" Skip) ("_position" s'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Semantics.red_n"
###               ("\<^const>Semantics.com.While" ("_position" b)
###                 ("_position" cx))
###               ("_position" s'') ("_position" j) ("_position" Skip)
###               ("_position" s')))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" s'') ("_position" s'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" s) ("_position" s'))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" s)
###     ("_idts" ("_position" i) ("_idts" ("_position" j) ("_position" s''))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###           ("_applC" ("_position" Some) ("_position" true))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Semantics.red_n" ("_position" cx) ("_position" s)
###             ("_position" i) ("_position" Skip) ("_position" s'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Semantics.red_n"
###               ("\<^const>Semantics.com.While" ("_position" b)
###                 ("_position" cx))
###               ("_position" s'') ("_position" j) ("_position" Skip)
###               ("_position" s')))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" s'') ("_position" s'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" s) ("_position" s'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 316 of "$AFP/VolpanoSmith/Semantics.thy") produces 9 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds"
###         ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###         ("_position" s) ("_position" Skip) ("_position" s')))
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" s)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("_applC"
###               ("\<^const>Semantics.interpret" ("_position" b)
###                 ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###               ("_position" false)))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs" ("_position" s) ("_position" s))))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" s) ("_position" s''))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>Semantics.interpret" ("_position" b)
###                     ("_position" s))
###                   ("_applC" ("_position" Some) ("_position" true))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Semantics.reds" ("_position" cx)
###                     ("_position" s) ("_position" Skip) ("_position" s'')))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Semantics.reds"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" Skip)
###                       ("_position" s')))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" P)
###                         ("_cargs" ("_position" s'') ("_position" s'))))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" s) ("_position" s')))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" P) ("_cargs" ("_position" s) ("_position" s')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds"
###         ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###         ("_position" s) ("_position" Skip) ("_position" s')))
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" s)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Semantics.interpret" ("_position" b)
###               ("\<^const>HOL.eq" ("_position" s)
###                 ("_applC" ("_position" Some) ("_position" false)))))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs" ("_position" s) ("_position" s))))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" s) ("_position" s''))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>Semantics.interpret" ("_position" b)
###                     ("_position" s))
###                   ("_applC" ("_position" Some) ("_position" true))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Semantics.reds" ("_position" cx)
###                     ("_position" s) ("_position" Skip) ("_position" s'')))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Semantics.reds"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" Skip)
###                       ("_position" s')))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" P)
###                         ("_cargs" ("_position" s'') ("_position" s'))))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" s) ("_position" s')))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" P) ("_cargs" ("_position" s) ("_position" s')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds"
###         ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###         ("_position" s) ("_position" Skip) ("_position" s')))
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" s)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>Semantics.interpret" ("_position" b)
###                 ("_position" s))
###               ("_applC" ("_position" Some) ("_position" false))))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs" ("_position" s) ("_position" s))))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" s) ("_position" s''))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>Semantics.interpret" ("_position" b)
###                     ("_position" s))
###                   ("_applC" ("_position" Some) ("_position" true))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Semantics.reds" ("_position" cx)
###                     ("_position" s) ("_position" Skip) ("_position" s'')))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Semantics.reds"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" Skip)
###                       ("_position" s')))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" P)
###                         ("_cargs" ("_position" s'') ("_position" s'))))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" s) ("_position" s')))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" P) ("_cargs" ("_position" s) ("_position" s')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds"
###         ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###         ("_position" s) ("_position" Skip) ("_position" s')))
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" s)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("_applC"
###               ("\<^const>Semantics.interpret" ("_position" b)
###                 ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###               ("_position" false)))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs" ("_position" s) ("_position" s))))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" s) ("_position" s''))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Semantics.interpret" ("_position" b)
###                   ("\<^const>HOL.eq" ("_position" s)
###                     ("_applC" ("_position" Some) ("_position" true)))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Semantics.reds" ("_position" cx)
###                     ("_position" s) ("_position" Skip) ("_position" s'')))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Semantics.reds"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" Skip)
###                       ("_position" s')))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" P)
###                         ("_cargs" ("_position" s'') ("_position" s'))))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" s) ("_position" s')))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" P) ("_cargs" ("_position" s) ("_position" s')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds"
###         ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###         ("_position" s) ("_position" Skip) ("_position" s')))
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" s)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Semantics.interpret" ("_position" b)
###               ("\<^const>HOL.eq" ("_position" s)
###                 ("_applC" ("_position" Some) ("_position" false)))))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs" ("_position" s) ("_position" s))))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" s) ("_position" s''))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Semantics.interpret" ("_position" b)
###                   ("\<^const>HOL.eq" ("_position" s)
###                     ("_applC" ("_position" Some) ("_position" true)))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Semantics.reds" ("_position" cx)
###                     ("_position" s) ("_position" Skip) ("_position" s'')))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Semantics.reds"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" Skip)
###                       ("_position" s')))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" P)
###                         ("_cargs" ("_position" s'') ("_position" s'))))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" s) ("_position" s')))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" P) ("_cargs" ("_position" s) ("_position" s')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds"
###         ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###         ("_position" s) ("_position" Skip) ("_position" s')))
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" s)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>Semantics.interpret" ("_position" b)
###                 ("_position" s))
###               ("_applC" ("_position" Some) ("_position" false))))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs" ("_position" s) ("_position" s))))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" s) ("_position" s''))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Semantics.interpret" ("_position" b)
###                   ("\<^const>HOL.eq" ("_position" s)
###                     ("_applC" ("_position" Some) ("_position" true)))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Semantics.reds" ("_position" cx)
###                     ("_position" s) ("_position" Skip) ("_position" s'')))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Semantics.reds"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" Skip)
###                       ("_position" s')))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" P)
###                         ("_cargs" ("_position" s'') ("_position" s'))))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" s) ("_position" s')))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" P) ("_cargs" ("_position" s) ("_position" s')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds"
###         ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###         ("_position" s) ("_position" Skip) ("_position" s')))
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" s)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("_applC"
###               ("\<^const>Semantics.interpret" ("_position" b)
###                 ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###               ("_position" false)))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs" ("_position" s) ("_position" s))))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" s) ("_position" s''))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC"
###                   ("\<^const>Semantics.interpret" ("_position" b)
###                     ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###                   ("_position" true)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Semantics.reds" ("_position" cx)
###                     ("_position" s) ("_position" Skip) ("_position" s'')))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Semantics.reds"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" Skip)
###                       ("_position" s')))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" P)
###                         ("_cargs" ("_position" s'') ("_position" s'))))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" s) ("_position" s')))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" P) ("_cargs" ("_position" s) ("_position" s')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds"
###         ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###         ("_position" s) ("_position" Skip) ("_position" s')))
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" s)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Semantics.interpret" ("_position" b)
###               ("\<^const>HOL.eq" ("_position" s)
###                 ("_applC" ("_position" Some) ("_position" false)))))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs" ("_position" s) ("_position" s))))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" s) ("_position" s''))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC"
###                   ("\<^const>Semantics.interpret" ("_position" b)
###                     ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###                   ("_position" true)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Semantics.reds" ("_position" cx)
###                     ("_position" s) ("_position" Skip) ("_position" s'')))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Semantics.reds"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" Skip)
###                       ("_position" s')))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" P)
###                         ("_cargs" ("_position" s'') ("_position" s'))))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" s) ("_position" s')))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" P) ("_cargs" ("_position" s) ("_position" s')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds"
###         ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###         ("_position" s) ("_position" Skip) ("_position" s')))
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" s)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>Semantics.interpret" ("_position" b)
###                 ("_position" s))
###               ("_applC" ("_position" Some) ("_position" false))))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs" ("_position" s) ("_position" s))))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" s) ("_position" s''))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC"
###                   ("\<^const>Semantics.interpret" ("_position" b)
###                     ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###                   ("_position" true)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Semantics.reds" ("_position" cx)
###                     ("_position" s) ("_position" Skip) ("_position" s'')))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Semantics.reds"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" Skip)
###                       ("_position" s')))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" P)
###                         ("_cargs" ("_position" s'') ("_position" s'))))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" s) ("_position" s')))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" P) ("_cargs" ("_position" s) ("_position" s')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Semantics"
### 2.500s elapsed time, 7.521s cpu time, 1.131s GC time
Loading theory "Draft.secTypes" (required by "Draft.ExecuteMoreTemplates" via "Draft.Execute")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.570s elapsed time, 1.222s cpu time, 0.097s GC time
Proofs for inductive predicate(s) "secExprTyping"
  Proving monotonicity ...
### Ambiguous input (line 30 of "$AFP/VolpanoSmith/secTypes.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" \<Gamma>) ("_position" V))
###       ("_applC" ("_position" Some) ("_position" High))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.com.LAss"
###       ("\<^fixed>secComTyping" ("_position" \<Gamma>) ("_position" T)
###         ("_position" V))
###       ("_position" e))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" \<Gamma>) ("_position" V))
###       ("_applC" ("_position" Some) ("_position" High))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>secComTyping" ("_position" \<Gamma>) ("_position" T)
###       ("\<^const>Semantics.com.LAss" ("_position" V) ("_position" e)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 32 of "$AFP/VolpanoSmith/secTypes.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>secTypes.secExprTyping" ("_position" \<Gamma>)
###         ("_position" e) ("_position" Low)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" \<Gamma>) ("_position" V))
###           ("_applC" ("_position" Some) ("_position" Low))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.com.LAss"
###       ("\<^fixed>secComTyping" ("_position" \<Gamma>) ("_position" Low)
###         ("_position" V))
###       ("_position" e))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>secTypes.secExprTyping" ("_position" \<Gamma>)
###         ("_position" e) ("_position" Low)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" \<Gamma>) ("_position" V))
###           ("_applC" ("_position" Some) ("_position" Low))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>secComTyping" ("_position" \<Gamma>) ("_position" Low)
###       ("\<^const>Semantics.com.LAss" ("_position" V) ("_position" e)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 34 of "$AFP/VolpanoSmith/secTypes.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>secComTyping" ("_position" \<Gamma>) ("_position" T)
###         ("_position" c1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>secComTyping" ("_position" \<Gamma>) ("_position" T)
###           ("_position" c2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.com.Seq"
###       ("\<^fixed>secComTyping" ("_position" \<Gamma>) ("_position" T)
###         ("_position" c1))
###       ("_position" c2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>secComTyping" ("_position" \<Gamma>) ("_position" T)
###         ("_position" c1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>secComTyping" ("_position" \<Gamma>) ("_position" T)
###           ("_position" c2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>secComTyping" ("_position" \<Gamma>) ("_position" T)
###       ("\<^const>Semantics.com.Seq" ("_position" c1) ("_position" c2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "secComTyping"
  Proving monotonicity ...
### Ambiguous input (line 96 of "$AFP/VolpanoSmith/secTypes.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>secTypes.secExprTyping"
###       ("\<^const>HOL.Ex_binder" ("_position" T1) ("_position" \<Gamma>))
###       ("_position" e1) ("_position" T1))
###     ("\<^const>secTypes.secExprTyping"
###       ("\<^const>HOL.Ex_binder" ("_position" T2) ("_position" \<Gamma>))
###       ("_position" e2) ("_position" T2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.Ex_binder" ("_position" T1)
###       ("\<^const>secTypes.secExprTyping" ("_position" \<Gamma>)
###         ("_position" e1) ("_position" T1)))
###     ("\<^const>secTypes.secExprTyping"
###       ("\<^const>HOL.Ex_binder" ("_position" T2) ("_position" \<Gamma>))
###       ("_position" e2) ("_position" T2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>secTypes.secExprTyping"
###       ("\<^const>HOL.Ex_binder" ("_position" T1) ("_position" \<Gamma>))
###       ("_position" e1) ("_position" T1))
###     ("\<^const>HOL.Ex_binder" ("_position" T2)
###       ("\<^const>secTypes.secExprTyping" ("_position" \<Gamma>)
###         ("_position" e2) ("_position" T2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.Ex_binder" ("_position" T1)
###       ("\<^const>secTypes.secExprTyping" ("_position" \<Gamma>)
###         ("_position" e1) ("_position" T1)))
###     ("\<^const>HOL.Ex_binder" ("_position" T2)
###       ("\<^const>secTypes.secExprTyping" ("_position" \<Gamma>)
###         ("_position" e2) ("_position" T2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 210 of "$AFP/VolpanoSmith/secTypes.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.not_equal"
###     ("\<^const>Semantics.interpret" ("_position" e) ("_position" s))
###     ("_position" None)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Semantics.interpret" ("_position" e)
###     ("\<^const>HOL.not_equal" ("_position" s) ("_position" None))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 275 of "$AFP/VolpanoSmith/secTypes.thy") produces 9 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" nonInterference)
###     ("_cargs" ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>secTypes.lowEquiv"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s1)
###         ("_idts" ("_position" s2)
###           ("_idts" ("_position" s1') ("_position" s2'))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>secTypes.lowEquiv" ("_position" \<Gamma>)
###             ("_position" s1) ("_position" s2))
###           ("\<^const>HOL.conj"
###             ("\<^const>Semantics.reds" ("_position" c) ("_position" s1)
###               ("_position" Skip) ("_position" s1'))
###             ("\<^const>Semantics.reds" ("_position" c) ("_position" s2)
###               ("_position" Skip) ("_position" s2'))))
###         ("_position" \<Gamma>)))
###     ("_position" s1') ("_position" s2')))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" nonInterference)
###     ("_cargs" ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" s1)
###       ("_idts" ("_position" s2)
###         ("_idts" ("_position" s1') ("_position" s2'))))
###     ("\<^const>secTypes.lowEquiv"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>secTypes.lowEquiv" ("_position" \<Gamma>)
###             ("_position" s1) ("_position" s2))
###           ("\<^const>HOL.conj"
###             ("\<^const>Semantics.reds" ("_position" c) ("_position" s1)
###               ("_position" Skip) ("_position" s1'))
###             ("\<^const>Semantics.reds" ("_position" c) ("_position" s2)
###               ("_position" Skip) ("_position" s2'))))
###         ("_position" \<Gamma>))
###       ("_position" s1') ("_position" s2'))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" nonInterference)
###     ("_cargs" ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>secTypes.lowEquiv"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s1)
###         ("_idts" ("_position" s2)
###           ("_idts" ("_position" s1') ("_position" s2'))))
###       ("\<^const>HOL.implies"
###         ("\<^const>secTypes.lowEquiv" ("_position" \<Gamma>)
###           ("_position" s1)
###           ("\<^const>HOL.conj" ("_position" s2)
###             ("\<^const>HOL.conj"
###               ("\<^const>Semantics.reds" ("_position" c) ("_position" s1)
###                 ("_position" Skip) ("_position" s1'))
###               ("\<^const>Semantics.reds" ("_position" c) ("_position" s2)
###                 ("_position" Skip) ("_position" s2')))))
###         ("_position" \<Gamma>)))
###     ("_position" s1') ("_position" s2')))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" nonInterference)
###     ("_cargs" ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" s1)
###       ("_idts" ("_position" s2)
###         ("_idts" ("_position" s1') ("_position" s2'))))
###     ("\<^const>secTypes.lowEquiv"
###       ("\<^const>HOL.implies"
###         ("\<^const>secTypes.lowEquiv" ("_position" \<Gamma>)
###           ("_position" s1)
###           ("\<^const>HOL.conj" ("_position" s2)
###             ("\<^const>HOL.conj"
###               ("\<^const>Semantics.reds" ("_position" c) ("_position" s1)
###                 ("_position" Skip) ("_position" s1'))
###               ("\<^const>Semantics.reds" ("_position" c) ("_position" s2)
###                 ("_position" Skip) ("_position" s2')))))
###         ("_position" \<Gamma>))
###       ("_position" s1') ("_position" s2'))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" nonInterference)
###     ("_cargs" ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" s1)
###       ("_idts" ("_position" s2)
###         ("_idts" ("_position" s1') ("_position" s2'))))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>secTypes.lowEquiv" ("_position" \<Gamma>)
###           ("_position" s1) ("_position" s2))
###         ("\<^const>HOL.conj"
###           ("\<^const>Semantics.reds" ("_position" c) ("_position" s1)
###             ("_position" Skip) ("_position" s1'))
###           ("\<^const>Semantics.reds" ("_position" c) ("_position" s2)
###             ("_position" Skip) ("_position" s2'))))
###       ("\<^const>secTypes.lowEquiv" ("_position" \<Gamma>) ("_position" s1')
###         ("_position" s2')))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" nonInterference)
###     ("_cargs" ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" s1)
###       ("_idts" ("_position" s2)
###         ("_idts" ("_position" s1') ("_position" s2'))))
###     ("\<^const>HOL.implies"
###       ("\<^const>secTypes.lowEquiv" ("_position" \<Gamma>) ("_position" s1)
###         ("\<^const>HOL.conj" ("_position" s2)
###           ("\<^const>HOL.conj"
###             ("\<^const>Semantics.reds" ("_position" c) ("_position" s1)
###               ("_position" Skip) ("_position" s1'))
###             ("\<^const>Semantics.reds" ("_position" c) ("_position" s2)
###               ("_position" Skip) ("_position" s2')))))
###       ("\<^const>secTypes.lowEquiv" ("_position" \<Gamma>) ("_position" s1')
###         ("_position" s2')))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" nonInterference)
###     ("_cargs" ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" s1)
###       ("_idts" ("_position" s2)
###         ("_idts" ("_position" s1') ("_position" s2'))))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>secTypes.lowEquiv" ("_position" \<Gamma>)
###           ("_position" s1)
###           ("\<^const>HOL.conj" ("_position" s2)
###             ("\<^const>Semantics.reds" ("_position" c) ("_position" s1)
###               ("_position" Skip) ("_position" s1'))))
###         ("\<^const>Semantics.reds" ("_position" c) ("_position" s2)
###           ("_position" Skip) ("_position" s2')))
###       ("\<^const>secTypes.lowEquiv" ("_position" \<Gamma>) ("_position" s1')
###         ("_position" s2')))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" nonInterference)
###     ("_cargs" ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>secTypes.lowEquiv"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" s1)
###         ("_idts" ("_position" s2)
###           ("_idts" ("_position" s1') ("_position" s2'))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>secTypes.lowEquiv" ("_position" \<Gamma>)
###             ("_position" s1)
###             ("\<^const>HOL.conj" ("_position" s2)
###               ("\<^const>Semantics.reds" ("_position" c) ("_position" s1)
###                 ("_position" Skip) ("_position" s1'))))
###           ("\<^const>Semantics.reds" ("_position" c) ("_position" s2)
###             ("_position" Skip) ("_position" s2')))
###         ("_position" \<Gamma>)))
###     ("_position" s1') ("_position" s2')))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" nonInterference)
###     ("_cargs" ("_position" \<Gamma>) ("_position" c)))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" s1)
###       ("_idts" ("_position" s2)
###         ("_idts" ("_position" s1') ("_position" s2'))))
###     ("\<^const>secTypes.lowEquiv"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>secTypes.lowEquiv" ("_position" \<Gamma>)
###             ("_position" s1)
###             ("\<^const>HOL.conj" ("_position" s2)
###               ("\<^const>Semantics.reds" ("_position" c) ("_position" s1)
###                 ("_position" Skip) ("_position" s1'))))
###           ("\<^const>Semantics.reds" ("_position" c) ("_position" s2)
###             ("_position" Skip) ("_position" s2')))
###         ("_position" \<Gamma>))
###       ("_position" s1') ("_position" s2'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 287 of "$AFP/VolpanoSmith/secTypes.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Semantics.interpret" ("_position" e) ("_position" s1))
###     ("\<^const>Semantics.interpret" ("_position" e) ("_position" s2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Semantics.interpret" ("_position" e)
###     ("\<^const>HOL.eq" ("_position" s1)
###       ("\<^const>Semantics.interpret" ("_position" e) ("_position" s2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 313 of "$AFP/VolpanoSmith/secTypes.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Semantics.interpret" ("_position" e) ("_position" s1))
###     ("\<^const>Semantics.interpret" ("_position" e) ("_position" s2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Semantics.interpret" ("_position" e)
###     ("\<^const>HOL.eq" ("_position" s1)
###       ("\<^const>Semantics.interpret" ("_position" e) ("_position" s2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 326 of "$AFP/VolpanoSmith/secTypes.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" s1')
###     ("_Update" ("_position" s1)
###       ("_updbind" ("_position" V)
###         ("\<^const>Semantics.interpret" ("_position" e)
###           ("_position" s1))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" s1')
###     ("_applC" ("_position" s1)
###       ("\<^const>Semantics.com.LAss" ("_position" V)
###         ("\<^const>Semantics.interpret" ("_position" e)
###           ("_position" s1))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 327 of "$AFP/VolpanoSmith/secTypes.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" s2')
###     ("_Update" ("_position" s2)
###       ("_updbind" ("_position" V)
###         ("\<^const>Semantics.interpret" ("_position" e)
###           ("_position" s2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" s2')
###     ("_applC" ("_position" s2)
###       ("\<^const>Semantics.com.LAss" ("_position" V)
###         ("\<^const>Semantics.interpret" ("_position" e)
###           ("_position" s2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 352 of "$AFP/VolpanoSmith/secTypes.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" s1')
###     ("_Update" ("_position" s1)
###       ("_updbind" ("_position" V)
###         ("\<^const>Semantics.interpret" ("_position" e)
###           ("_position" s1))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" s1')
###     ("_applC" ("_position" s1)
###       ("\<^const>Semantics.com.LAss" ("_position" V)
###         ("\<^const>Semantics.interpret" ("_position" e)
###           ("_position" s1))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 352 of "$AFP/VolpanoSmith/secTypes.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" s2')
###     ("_Update" ("_position" s2)
###       ("_updbind" ("_position" V)
###         ("\<^const>Semantics.interpret" ("_position" e)
###           ("_position" s2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" s2')
###     ("_applC" ("_position" s2)
###       ("\<^const>Semantics.com.LAss" ("_position" V)
###         ("\<^const>Semantics.interpret" ("_position" e)
###           ("_position" s2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.secTypes"
### 0.426s elapsed time, 0.652s cpu time, 0.046s GC time
Loading theory "Draft.Execute" (required by "Draft.ExecuteMoreTemplates")
exec_red (?x, ?xa) =
sup (Predicate.bind (Predicate.single (?x, ?xa))
      (%x. case x of
           (V_:=e_, s_) =>
             Predicate.single (Skip, s_(V_ := \<lbrakk>e_\<rbrakk>s_))
           | (_, s_) => bot))
 (sup (Predicate.bind (Predicate.single (?x, ?xa))
        (%x. case x of
             (c\<^sub>1_;; c\<^sub>2_, s_) =>
               Predicate.bind (exec_red (c\<^sub>1_, s_))
                (%x. case x of
                     (c\<^sub>1'_, s'_) =>
                       Predicate.single (c\<^sub>1'_;; c\<^sub>2_, s'_))
             | (_, s_) => bot))
   (sup (Predicate.bind (Predicate.single (?x, ?xa))
          (%x. case x of
               (Skip;; c\<^sub>2_, s_) => Predicate.single (c\<^sub>2_, s_)
               | (_;; c\<^sub>2_, s_) => bot | (_, s_) => bot))
     (sup (Predicate.bind (Predicate.single (?x, ?xa))
            (%x. case x of
                 (if (b_) c\<^sub>1_ else c\<^sub>2_, s_) =>
                   Predicate.bind
                    (eq_i_i \<lbrakk>b_\<rbrakk>s_ (Some true))
                    (%x. case x of () => Predicate.single (c\<^sub>1_, s_))
                 | (_, s_) => bot))
       (sup (Predicate.bind (Predicate.single (?x, ?xa))
              (%x. case x of
                   (if (b_) c\<^sub>1_ else c\<^sub>2_, s_) =>
                     Predicate.bind
                      (eq_i_i \<lbrakk>b_\<rbrakk>s_ (Some false))
                      (%x. case x of
                           () => Predicate.single (c\<^sub>2_, s_))
                   | (_, s_) => bot))
         (sup (Predicate.bind (Predicate.single (?x, ?xa))
                (%x. case x of
                     (while (b_) c_, s_) =>
                       Predicate.bind
                        (eq_i_i \<lbrakk>b_\<rbrakk>s_ (Some true))
                        (%x. case x of
                             () =>
                               Predicate.single (c_;; while (b_) c_, s_))
                     | (_, s_) => bot))
           (Predicate.bind (Predicate.single (?x, ?xa))
             (%x. case x of
                  (while (b_) c_, s_) =>
                    Predicate.bind
                     (eq_i_i \<lbrakk>b_\<rbrakk>s_ (Some false))
                     (%x. case x of () => Predicate.single (Skip, s_))
                  | (_, s_) => bot)))))))
red_i_Pio (?x, ?xa) ?xb =
sup (Predicate.bind (Predicate.single ((?x, ?xa), ?xb))
      (%x. case x of
           ((V_:=e_, s_), Skip) =>
             Predicate.single (s_(V_ := \<lbrakk>e_\<rbrakk>s_))
           | ((V_:=e_, s_), _) => bot | ((_, s_), b) => bot))
 (sup (Predicate.bind (Predicate.single ((?x, ?xa), ?xb))
        (%x. case x of
             ((c\<^sub>1_;; c\<^sub>2_, s_), c\<^sub>1'_;; c\<^sub>2'_) =>
               if c\<^sub>2_ = c\<^sub>2'_
               then Predicate.bind (exec_red (c\<^sub>1_, s_))
                     (%x. case x of
                          (c\<^sub>1''_, s'_) =>
                            if c\<^sub>1'_ = c\<^sub>1''_
                            then Predicate.single s'_ else bot)
               else bot
             | ((c\<^sub>1_;; c\<^sub>2_, s_), _) => bot
             | ((_, s_), b) => bot))
   (sup (Predicate.bind (Predicate.single ((?x, ?xa), ?xb))
          (%x. case x of
               ((Skip;; c\<^sub>2_, s_), c\<^sub>2'_) =>
                 if c\<^sub>2_ = c\<^sub>2'_ then Predicate.single s_
                 else bot
               | ((_;; c\<^sub>2_, s_), c\<^sub>2'_) => bot
               | ((_, s_), c\<^sub>2'_) => bot))
     (sup (Predicate.bind (Predicate.single ((?x, ?xa), ?xb))
            (%x. case x of
                 ((if (b_) c\<^sub>1_ else c\<^sub>2_, s_), c\<^sub>1''_) =>
                   if c\<^sub>1_ = c\<^sub>1''_
                   then Predicate.bind
                         (eq_i_i \<lbrakk>b_\<rbrakk>s_ (Some true))
                         (%x. case x of () => Predicate.single s_)
                   else bot
                 | ((_, s_), c\<^sub>1''_) => bot))
       (sup (Predicate.bind (Predicate.single ((?x, ?xa), ?xb))
              (%x. case x of
                   ((if (b_) c\<^sub>1_ else c\<^sub>2_, s_),
                    c\<^sub>2'_) =>
                     if c\<^sub>2_ = c\<^sub>2'_
                     then Predicate.bind
                           (eq_i_i \<lbrakk>b_\<rbrakk>s_ (Some false))
                           (%x. case x of () => Predicate.single s_)
                     else bot
                   | ((_, s_), c\<^sub>2'_) => bot))
         (sup (Predicate.bind (Predicate.single ((?x, ?xa), ?xb))
                (%x. case x of
                     ((while (b_) c_, s_), ca_;; while (ba_) cb_) =>
                       if c_ = cb_ & c_ = ca_ & b_ = ba_
                       then Predicate.bind
                             (eq_i_i \<lbrakk>b_\<rbrakk>s_ (Some true))
                             (%x. case x of () => Predicate.single s_)
                       else bot
                     | ((while (b_) c_, s_), ca_;; _) => bot
                     | ((while (b_) c_, s_), _) => bot
                     | ((_, s_), bb) => bot))
           (Predicate.bind (Predicate.single ((?x, ?xa), ?xb))
             (%x. case x of
                  ((while (b_) c_, s_), Skip) =>
                    Predicate.bind
                     (eq_i_i \<lbrakk>b_\<rbrakk>s_ (Some false))
                     (%x. case x of () => Predicate.single s_)
                  | ((while (b_) c_, s_), _) => bot
                  | ((_, s_), ba) => bot)))))))
red_i_Poi (?x, ?xa) ?xb =
sup (Predicate.bind (Predicate.single ((?x, ?xa), ?xb))
      (%xa. case xa of
            ((V_:=e_, s_), x) =>
              if x = s_(V_ := \<lbrakk>e_\<rbrakk>s_)
              then Predicate.single Skip else bot
            | ((_, s_), x) => bot))
 (sup (Predicate.bind (Predicate.single ((?x, ?xa), ?xb))
        (%x. case x of
             ((c\<^sub>1_;; c\<^sub>2_, s_), s'_) =>
               Predicate.bind (red_i_Poi (c\<^sub>1_, s_) s'_)
                (%x. Predicate.single (x;; c\<^sub>2_))
             | ((_, s_), s'_) => bot))
   (sup (Predicate.bind (Predicate.single ((?x, ?xa), ?xb))
          (%x. case x of
               ((Skip;; c\<^sub>2_, s_), sa_) =>
                 if s_ = sa_ then Predicate.single c\<^sub>2_ else bot
               | ((_;; c\<^sub>2_, s_), sa_) => bot
               | ((_, s_), sa_) => bot))
     (sup (Predicate.bind (Predicate.single ((?x, ?xa), ?xb))
            (%x. case x of
                 ((if (b_) c\<^sub>1_ else c\<^sub>2_, s_), sa_) =>
                   if s_ = sa_
                   then Predicate.bind
                         (eq_i_i \<lbrakk>b_\<rbrakk>s_ (Some true))
                         (%x. case x of () => Predicate.single c\<^sub>1_)
                   else bot
                 | ((_, s_), sa_) => bot))
       (sup (Predicate.bind (Predicate.single ((?x, ?xa), ?xb))
              (%x. case x of
                   ((if (b_) c\<^sub>1_ else c\<^sub>2_, s_), sa_) =>
                     if s_ = sa_
                     then Predicate.bind
                           (eq_i_i \<lbrakk>b_\<rbrakk>s_ (Some false))
                           (%x. case x of () => Predicate.single c\<^sub>2_)
                     else bot
                   | ((_, s_), sa_) => bot))
         (sup (Predicate.bind (Predicate.single ((?x, ?xa), ?xb))
                (%x. case x of
                     ((while (b_) c_, s_), sa_) =>
                       if s_ = sa_
                       then Predicate.bind
                             (eq_i_i \<lbrakk>b_\<rbrakk>s_ (Some true))
                             (%x. case x of
                                  () =>
                                    Predicate.single (c_;; while (b_) c_))
                       else bot
                     | ((_, s_), sa_) => bot))
           (Predicate.bind (Predicate.single ((?x, ?xa), ?xb))
             (%x. case x of
                  ((while (b_) c_, s_), sa_) =>
                    if s_ = sa_
                    then Predicate.bind
                          (eq_i_i \<lbrakk>b_\<rbrakk>s_ (Some false))
                          (%x. case x of () => Predicate.single Skip)
                    else bot
                  | ((_, s_), sa_) => bot)))))))
red_i_i (?x, ?xa) (?xb, ?xc) =
sup (Predicate.bind (Predicate.single ((?x, ?xa), ?xb, ?xc))
      (%xa. case xa of
            ((V_:=e_, s_), Skip, x) =>
              if x = s_(V_ := \<lbrakk>e_\<rbrakk>s_)
              then Predicate.single () else bot
            | ((V_:=e_, s_), _, x) => bot | ((_, s_), b) => bot))
 (sup (Predicate.bind (Predicate.single ((?x, ?xa), ?xb, ?xc))
        (%x. case x of
             ((c\<^sub>1_;; c\<^sub>2_, s_), c\<^sub>1'_;; c\<^sub>2'_,
              s'_) =>
               if c\<^sub>2_ = c\<^sub>2'_
               then Predicate.bind
                     (red_i_i (c\<^sub>1_, s_) (c\<^sub>1'_, s'_))
                     (%x. case x of () => Predicate.single ())
               else bot
             | ((c\<^sub>1_;; c\<^sub>2_, s_), _, s'_) => bot
             | ((_, s_), b) => bot))
   (sup (Predicate.bind (Predicate.single ((?x, ?xa), ?xb, ?xc))
          (%x. case x of
               ((Skip;; c\<^sub>2_, s_), c\<^sub>2'_, sa_) =>
                 if s_ = sa_ & c\<^sub>2_ = c\<^sub>2'_
                 then Predicate.single () else bot
               | ((_;; c\<^sub>2_, s_), b) => bot | ((_, s_), b) => bot))
     (sup (Predicate.bind (Predicate.single ((?x, ?xa), ?xb, ?xc))
            (%x. case x of
                 ((if (b_) c\<^sub>1_ else c\<^sub>2_, s_), c\<^sub>1''_,
                  sa_) =>
                   if s_ = sa_ & c\<^sub>1_ = c\<^sub>1''_
                   then Predicate.bind
                         (eq_i_i \<lbrakk>b_\<rbrakk>s_ (Some true))
                         (%x. case x of () => Predicate.single ())
                   else bot
                 | ((_, s_), ba) => bot))
       (sup (Predicate.bind (Predicate.single ((?x, ?xa), ?xb, ?xc))
              (%x. case x of
                   ((if (b_) c\<^sub>1_ else c\<^sub>2_, s_), c\<^sub>2'_,
                    sa_) =>
                     if s_ = sa_ & c\<^sub>2_ = c\<^sub>2'_
                     then Predicate.bind
                           (eq_i_i \<lbrakk>b_\<rbrakk>s_ (Some false))
                           (%x. case x of () => Predicate.single ())
                     else bot
                   | ((_, s_), ba) => bot))
         (sup (Predicate.bind (Predicate.single ((?x, ?xa), ?xb, ?xc))
                (%x. case x of
                     ((while (b_) c_, s_), ca_;; while (ba_) cb_, sa_) =>
                       if s_ = sa_ & c_ = cb_ & c_ = ca_ & b_ = ba_
                       then Predicate.bind
                             (eq_i_i \<lbrakk>b_\<rbrakk>s_ (Some true))
                             (%x. case x of () => Predicate.single ())
                       else bot
                     | ((while (b_) c_, s_), ca_;; _, sa_) => bot
                     | ((while (b_) c_, s_), _, sa_) => bot
                     | ((_, s_), bb) => bot))
           (Predicate.bind (Predicate.single ((?x, ?xa), ?xb, ?xc))
             (%x. case x of
                  ((while (b_) c_, s_), Skip, sa_) =>
                    if s_ = sa_
                    then Predicate.bind
                          (eq_i_i \<lbrakk>b_\<rbrakk>s_ (Some false))
                          (%x. case x of () => Predicate.single ())
                    else bot
                  | ((while (b_) c_, s_), _, sa_) => bot
                  | ((_, s_), ba) => bot)))))))
red ?x1.0 ?x2.0 = Predicate.holds (red_i_i ?x1.0 ?x2.0)
compute_secComTyping ?x ?xa =
sup (Predicate.bind (Predicate.single (?x, ?xa))
      (%x. case x of (\<Gamma>_, Skip) => Predicate.single Low
           | (\<Gamma>_, _) => bot))
 (sup (Predicate.bind (Predicate.single (?x, ?xa))
        (%x. case x of (\<Gamma>_, Skip) => Predicate.single High
             | (\<Gamma>_, _) => bot))
   (sup (Predicate.bind (Predicate.single (?x, ?xa))
          (%x. case x of
               (\<Gamma>_, V_:=e_) =>
                 Predicate.bind (eq_i_i (\<Gamma>_ V_) (Some High))
                  (%x. case x of () => Predicate.single Low)
               | (\<Gamma>_, _) => bot))
     (sup (Predicate.bind (Predicate.single (?x, ?xa))
            (%x. case x of
                 (\<Gamma>_, V_:=e_) =>
                   Predicate.bind (eq_i_i (\<Gamma>_ V_) (Some High))
                    (%x. case x of () => Predicate.single High)
                 | (\<Gamma>_, _) => bot))
       (sup (Predicate.bind (Predicate.single (?x, ?xa))
              (%x. case x of
                   (\<Gamma>_, V_:=e_) =>
                     Predicate.bind (check_secExprTyping \<Gamma>_ e_ Low)
                      (%x. case x of
                           () =>
                             Predicate.bind
                              (eq_i_i (\<Gamma>_ V_) (Some Low))
                              (%x. case x of () => Predicate.single Low))
                   | (\<Gamma>_, _) => bot))
         (sup (Predicate.bind (Predicate.single (?x, ?xa))
                (%x. case x of
                     (\<Gamma>_, c1_;; c2_) =>
                       Predicate.bind (compute_secComTyping \<Gamma>_ c1_)
                        (%x. Predicate.bind
                              (check_secComTyping \<Gamma>_ x c2_)
                              (%xa. case xa of () => Predicate.single x))
                     | (\<Gamma>_, _) => bot))
           (sup (Predicate.bind (Predicate.single (?x, ?xa))
                  (%x. case x of
                       (\<Gamma>_, while (b_) c_) =>
                         Predicate.bind (compute_secComTyping \<Gamma>_ c_)
                          (%x. Predicate.bind
                                (check_secExprTyping \<Gamma>_ b_ x)
                                (%xa. case xa of () => Predicate.single x))
                       | (\<Gamma>_, _) => bot))
             (sup (Predicate.bind (Predicate.single (?x, ?xa))
                    (%x. case x of
                         (\<Gamma>_, if (b_) c1_ else c2_) =>
                           Predicate.bind
                            (compute_secComTyping \<Gamma>_ c1_)
                            (%x. Predicate.bind
                                  (check_secComTyping \<Gamma>_ x c2_)
                                  (%xa.
case xa of
() =>
  Predicate.bind (check_secExprTyping \<Gamma>_ b_ x)
   (%xa. case xa of () => Predicate.single x)))
                         | (\<Gamma>_, _) => bot))
               (Predicate.bind (Predicate.single (?x, ?xa))
                 (%x. case x of
                      (\<Gamma>_, c_) =>
                        Predicate.bind
                         (check_secComTyping \<Gamma>_ High c_)
                         (%x. case x of () => Predicate.single Low))))))))))
check_secComTyping ?x ?xa ?xb =
sup (Predicate.bind (Predicate.single (?x, ?xa, ?xb))
      (%x. case x of (\<Gamma>_, Low, Skip) => Predicate.single ()
           | (\<Gamma>_, Low, _) => bot | (\<Gamma>_, High, ba) => bot))
 (sup (Predicate.bind (Predicate.single (?x, ?xa, ?xb))
        (%x. case x of (\<Gamma>_, Low, ba) => bot
             | (\<Gamma>_, High, Skip) => Predicate.single ()
             | (\<Gamma>_, High, _) => bot))
   (sup (Predicate.bind (Predicate.single (?x, ?xa, ?xb))
          (%x. case x of
               (\<Gamma>_, Low, V_:=e_) =>
                 Predicate.bind (eq_i_i (\<Gamma>_ V_) (Some High))
                  (%x. case x of () => Predicate.single ())
               | (\<Gamma>_, Low, _) => bot | (\<Gamma>_, High, ba) => bot))
     (sup (Predicate.bind (Predicate.single (?x, ?xa, ?xb))
            (%x. case x of (\<Gamma>_, Low, ba) => bot
                 | (\<Gamma>_, High, V_:=e_) =>
                     Predicate.bind (eq_i_i (\<Gamma>_ V_) (Some High))
                      (%x. case x of () => Predicate.single ())
                 | (\<Gamma>_, High, _) => bot))
       (sup (Predicate.bind (Predicate.single (?x, ?xa, ?xb))
              (%x. case x of
                   (\<Gamma>_, Low, V_:=e_) =>
                     Predicate.bind (check_secExprTyping \<Gamma>_ e_ Low)
                      (%x. case x of
                           () =>
                             Predicate.bind
                              (eq_i_i (\<Gamma>_ V_) (Some Low))
                              (%x. case x of () => Predicate.single ()))
                   | (\<Gamma>_, Low, _) => bot
                   | (\<Gamma>_, High, ba) => bot))
         (sup (Predicate.bind (Predicate.single (?x, ?xa, ?xb))
                (%x. case x of
                     (\<Gamma>_, T_, c1_;; c2_) =>
                       Predicate.bind (check_secComTyping \<Gamma>_ T_ c1_)
                        (%x. case x of
                             () =>
                               Predicate.bind
                                (check_secComTyping \<Gamma>_ T_ c2_)
                                (%x. case x of () => Predicate.single ()))
                     | (\<Gamma>_, T_, _) => bot))
           (sup (Predicate.bind (Predicate.single (?x, ?xa, ?xb))
                  (%x. case x of
                       (\<Gamma>_, T_, while (b_) c_) =>
                         Predicate.bind (check_secComTyping \<Gamma>_ T_ c_)
                          (%x. case x of
                               () =>
                                 Predicate.bind
                                  (check_secExprTyping \<Gamma>_ b_ T_)
                                  (%x. case x of () => Predicate.single ()))
                       | (\<Gamma>_, T_, _) => bot))
             (sup (Predicate.bind (Predicate.single (?x, ?xa, ?xb))
                    (%x. case x of
                         (\<Gamma>_, T_, if (b_) c1_ else c2_) =>
                           Predicate.bind
                            (check_secComTyping \<Gamma>_ T_ c1_)
                            (%x. case x of
                                 () =>
                                   Predicate.bind
                                    (check_secComTyping \<Gamma>_ T_ c2_)
                                    (%x.
  case x of
  () =>
    Predicate.bind (check_secExprTyping \<Gamma>_ b_ T_)
     (%x. case x of () => Predicate.single ())))
                         | (\<Gamma>_, T_, _) => bot))
               (Predicate.bind (Predicate.single (?x, ?xa, ?xb))
                 (%x. case x of
                      (\<Gamma>_, Low, c_) =>
                        Predicate.bind
                         (check_secComTyping \<Gamma>_ High c_)
                         (%x. case x of () => Predicate.single ())
                      | (\<Gamma>_, High, c_) => bot)))))))))
?x1.0,?x2.0 \<turnstile> ?x3.0 =
Predicate.holds (check_secComTyping ?x1.0 ?x2.0 ?x3.0)
### theory "Draft.Execute"
### 0.626s elapsed time, 0.862s cpu time, 0.086s GC time
Loading theory "Draft.ExecuteMoreTemplates"
"True"
  :: "bool"
"True"
  :: "bool"
"{High, High}"
  :: "secLevel set"
"{High} Un ..."
  :: "secLevel set"
"True"
  :: "bool"
"True"
  :: "bool"
val templateLemmas =
   [("Execute.eq_i_oI", "Predicate.eq ?x ?xa ==> pred.eval (eq_i_o ?x) ?xa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Execute.eq_o_iI", "Predicate.eq ?x ?xa ==> pred.eval (eq_o_i ?xa) ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Execute.exec_redI", "red ?x ?xa ==> pred.eval (exec_red ?x) ?xa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Execute.eq_i_iI",
     "Predicate.eq ?x ?xa ==> pred.eval (eq_i_i ?x ?xa) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.red_i_iI", "red ?x ?xa ==> pred.eval (red_i_i ?x ?xa) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.compute_secComTypingI",
     "?x,?xa \<turnstile> ?xb ==>
      pred.eval (compute_secComTyping ?x ?xb) ?xa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("Execute.compute_secExprTypingI",
     "?x \<turnstile> ?xa : ?xb ==>
      pred.eval (compute_secExprTyping ?x ?xa) ?xb",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Execute.check_secComTypingI",
     "?x,?xa \<turnstile> ?xb ==>
      pred.eval (check_secComTyping ?x ?xa ?xb) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.check_secExprTypingI",
     "?x \<turnstile> ?xa : ?xb ==>
      pred.eval (check_secExprTyping ?x ?xa ?xb) ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Execute.red_i_PioI",
     "red ?x (?xa, ?xb) ==> pred.eval (red_i_Pio ?x ?xa) ?xb",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Execute.red_i_PoiI",
     "red ?x (?xa, ?xb) ==> pred.eval (red_i_Poi ?x ?xb) ?xa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("Execute.eq_i_oE",
     "[| pred.eval (eq_i_o ?x) ?xa; Predicate.eq ?x ?xa ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.eq_o_iE",
     "[| pred.eval (eq_o_i ?xa) ?x; Predicate.eq ?x ?xa ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.exec_redE",
     "[| pred.eval (exec_red ?x) ?xa; red ?x ?xa ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.eq_i_iE",
     "[| pred.eval (eq_i_i ?x ?xa) ?y; Predicate.eq ?x ?xa ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.red_i_iE",
     "[| pred.eval (red_i_i ?x ?xa) ?y; red ?x ?xa ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.compute_secComTypingE",
     "[| pred.eval (compute_secComTyping ?x ?xb) ?xa;
         ?x,?xa \<turnstile> ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.compute_secExprTypingE",
     "[| pred.eval (compute_secExprTyping ?x ?xa) ?xb;
         ?x \<turnstile> ?xa : ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.red_i_PioE",
     "[| pred.eval (red_i_Pio ?x ?xa) ?xb; red ?x (?xa, ?xb) ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1))
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.red_i_PoiE",
     "[| pred.eval (red_i_Poi ?x ?xb) ?xa; red ?x (?xa, ?xb) ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2))
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.check_secComTypingE",
     "[| pred.eval (check_secComTyping ?x ?xa ?xb) ?y;
         ?x,?xa \<turnstile> ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Execute.check_secExprTypingE",
     "[| pred.eval (check_secExprTyping ?x ?xa ?xb) ?y;
         ?x \<turnstile> ?xa : ?xb ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.ExecuteMoreTemplates"
### 0.516s elapsed time, 2.020s cpu time, 0.115s GC time
"{High} Un ..."
  :: "secLevel set"
val it = (): unit
