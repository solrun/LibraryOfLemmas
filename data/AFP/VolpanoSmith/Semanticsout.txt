Loading theory "Draft.Semantics" (required by "Draft.SemanticsMoreTemplates")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SemanticsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SemanticsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SemanticsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.133s elapsed time, 0.554s cpu time, 0.062s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SemanticsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.226s elapsed time, 0.922s cpu time, 0.062s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SemanticsMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.347s elapsed time, 1.394s cpu time, 0.154s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SemanticsMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.026s elapsed time, 3.884s cpu time, 0.943s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.078s elapsed time, 3.937s cpu time, 0.851s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.996s elapsed time, 6.333s cpu time, 1.150s GC time
Loading theory "Draft.Templates" (required by "Draft.SemanticsMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.068s elapsed time, 0.157s cpu time, 0.051s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SemanticsMoreTemplates")
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 68 of "$AFP/VolpanoSmith/Semantics.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>interpret" ("_applC" ("_position" Val) ("_position" v))
###       ("_position" s))
###     ("_applC" ("_position" Some) ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>interpret" ("_applC" ("_position" Val) ("_position" v))
###     ("\<^const>HOL.eq" ("_position" s)
###       ("_applC" ("_position" Some) ("_position" v)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^fixed>interpret" ("_applC" ("_position" Val) ("_position" v))
###       ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###     ("_position" v)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 69 of "$AFP/VolpanoSmith/Semantics.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>interpret" ("_applC" ("_position" Var) ("_position" V))
###       ("_position" s))
###     ("_applC" ("_position" s) ("_position" V))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>interpret" ("_applC" ("_position" Var) ("_position" V))
###     ("\<^const>HOL.eq" ("_position" s)
###       ("_applC" ("_position" s) ("_position" V)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^fixed>interpret" ("_applC" ("_position" Var) ("_position" V))
###       ("\<^const>HOL.eq" ("_position" s) ("_position" s)))
###     ("_position" V)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 70 of "$AFP/VolpanoSmith/Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>interpret"
###       ("\<^const>Semantics.expr.BinOp" ("_position" e\<^sub>1)
###         ("_position" bop) ("_position" e\<^sub>2))
###       ("_position" s))
###     ("_case_syntax"
###       ("\<^fixed>interpret" ("_position" e\<^sub>1) ("_position" s))
###       ("_case2" ("_case1" ("_position" None) ("_position" None))
###         ("_case1" ("_applC" ("_position" Some) ("_position" v\<^sub>1))
###           ("_case_syntax"
###             ("\<^fixed>interpret" ("_position" e\<^sub>2) ("_position" s))
###             ("_case2" ("_case1" ("_position" None) ("_position" None))
###               ("_case1"
###                 ("_applC" ("_position" Some) ("_position" v\<^sub>2))
###                 ("_applC" ("_position" binop)
###                   ("_cargs" ("_position" bop)
###                     ("_cargs" ("_position" v\<^sub>1)
###                       ("_position" v\<^sub>2))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>interpret"
###     ("\<^const>Semantics.expr.BinOp" ("_position" e\<^sub>1)
###       ("_position" bop) ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" s)
###       ("_case_syntax"
###         ("\<^fixed>interpret" ("_position" e\<^sub>1) ("_position" s))
###         ("_case2" ("_case1" ("_position" None) ("_position" None))
###           ("_case1" ("_applC" ("_position" Some) ("_position" v\<^sub>1))
###             ("_case_syntax"
###               ("\<^fixed>interpret" ("_position" e\<^sub>2) ("_position" s))
###               ("_case2" ("_case1" ("_position" None) ("_position" None))
###                 ("_case1"
###                   ("_applC" ("_position" Some) ("_position" v\<^sub>2))
###                   ("_applC" ("_position" binop)
###                     ("_cargs" ("_position" bop)
###                       ("_cargs" ("_position" v\<^sub>1)
###                         ("_position" v\<^sub>2)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Ambiguous input (line 82 of "$AFP/VolpanoSmith/Semantics.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'"
###     ("\<^const>Semantics.com.LAss" ("_position" V) ("_position" e))
###     ("_position" s) ("_position" Skip)
###     ("_applC" ("_position" s)
###       ("\<^const>Semantics.com.LAss" ("_position" V)
###         ("\<^const>Semantics.interpret" ("_position" e) ("_position" s))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'"
###     ("\<^const>Semantics.com.LAss" ("_position" V) ("_position" e))
###     ("_position" s) ("_position" Skip)
###     ("_Update" ("_position" s)
###       ("_updbind" ("_position" V)
###         ("\<^const>Semantics.interpret" ("_position" e) ("_position" s))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 91 of "$AFP/VolpanoSmith/Semantics.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###       ("_applC" ("_position" Some) ("_position" true))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" c\<^sub>1) ("_position" s))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.interpret" ("_position" b)
###       ("\<^const>HOL.eq" ("_position" s)
###         ("_applC" ("_position" Some) ("_position" true)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" c\<^sub>1) ("_position" s))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###       ("_position" true)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" c\<^sub>1) ("_position" s))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 94 of "$AFP/VolpanoSmith/Semantics.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###       ("_applC" ("_position" Some) ("_position" false))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" c\<^sub>2) ("_position" s))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.interpret" ("_position" b)
###       ("\<^const>HOL.eq" ("_position" s)
###         ("_applC" ("_position" Some) ("_position" false)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" c\<^sub>2) ("_position" s))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###       ("_position" false)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" c\<^sub>2) ("_position" s))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 97 of "$AFP/VolpanoSmith/Semantics.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###       ("_applC" ("_position" Some) ("_position" true))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" c))
###       ("_position" s)
###       ("\<^const>Semantics.com.Seq" ("_position" c)
###         ("\<^const>Semantics.com.While" ("_position" b) ("_position" c)))
###       ("_position" s))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.interpret" ("_position" b)
###       ("\<^const>HOL.eq" ("_position" s)
###         ("_applC" ("_position" Some) ("_position" true)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" c))
###       ("_position" s)
###       ("\<^const>Semantics.com.Seq" ("_position" c)
###         ("\<^const>Semantics.com.While" ("_position" b) ("_position" c)))
###       ("_position" s))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###       ("_position" true)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" c))
###       ("_position" s)
###       ("\<^const>Semantics.com.Seq" ("_position" c)
###         ("\<^const>Semantics.com.While" ("_position" b) ("_position" c)))
###       ("_position" s))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 100 of "$AFP/VolpanoSmith/Semantics.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###       ("_applC" ("_position" Some) ("_position" false))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" c))
###       ("_position" s) ("_position" Skip) ("_position" s))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.interpret" ("_position" b)
###       ("\<^const>HOL.eq" ("_position" s)
###         ("_applC" ("_position" Some) ("_position" false)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" c))
###       ("_position" s) ("_position" Skip) ("_position" s))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###       ("_position" false)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" c))
###       ("_position" s) ("_position" Skip) ("_position" s))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "red"
  Proving monotonicity ...
### Ambiguous input (line 113 of "$AFP/VolpanoSmith/Semantics.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.LAss" ("_position" V) ("_position" e))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" s')
###       ("_Update" ("_position" s)
###         ("_updbind" ("_position" V)
###           ("\<^const>Semantics.interpret" ("_position" e)
###             ("_position" s)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.LAss" ("_position" V) ("_position" e))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" s')
###       ("_applC" ("_position" s)
###         ("\<^const>Semantics.com.LAss" ("_position" V)
###           ("\<^const>Semantics.interpret" ("_position" e)
###             ("_position" s)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 167 of "$AFP/VolpanoSmith/Semantics.thy") produces 15 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.disj"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_applC" ("_position" Some) ("_position" true)))
###           ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))))
###       ("_applC" ("_position" Some) ("_position" false)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" true)))
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" false))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.interpret" ("_position" b)
###       ("\<^const>HOL.disj"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" true)))
###         ("\<^const>HOL.eq"
###           ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###           ("_applC" ("_position" Some) ("_position" false)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" true))))
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" false))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("_applC"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###         ("_position" true))
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" false))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" true)))
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" false)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.interpret" ("_position" b)
###       ("\<^const>HOL.disj"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" true)))
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_applC" ("_position" Some) ("_position" false))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" true))))
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" false)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("_applC"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###         ("_position" true))
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" false)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.disj"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_applC" ("_position" Some) ("_position" true)))
###           ("\<^const>Semantics.interpret" ("_position" b)
###             ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))))
###       ("_position" false))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 171 of "$AFP/VolpanoSmith/Semantics.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" true))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds" ("_position" c\<^sub>1) ("_position" s)
###         ("_position" Skip) ("_position" s')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" true)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds" ("_position" c\<^sub>1) ("_position" s)
###         ("_position" Skip) ("_position" s')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###         ("_position" true)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds" ("_position" c\<^sub>1) ("_position" s)
###         ("_position" Skip) ("_position" s')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 175 of "$AFP/VolpanoSmith/Semantics.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" false))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds" ("_position" c\<^sub>2) ("_position" s)
###         ("_position" Skip) ("_position" s')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" false)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds" ("_position" c\<^sub>2) ("_position" s)
###         ("_position" Skip) ("_position" s')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###         ("_position" false)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds" ("_position" c\<^sub>2) ("_position" s)
###         ("_position" Skip) ("_position" s')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 179 of "$AFP/VolpanoSmith/Semantics.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" false))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" s) ("_position" s')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" false)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" s) ("_position" s')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###         ("_position" false)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" s) ("_position" s')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 185 of "$AFP/VolpanoSmith/Semantics.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" true))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" sx)
###         ("\<^const>HOL.conj"
###           ("\<^const>Semantics.reds" ("_position" cx) ("_position" s)
###             ("_position" Skip) ("_position" sx))
###           ("\<^const>Semantics.reds"
###             ("\<^const>Semantics.com.While" ("_position" b)
###               ("_position" cx))
###             ("_position" sx) ("_position" Skip) ("_position" s')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" true)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" sx)
###         ("\<^const>HOL.conj"
###           ("\<^const>Semantics.reds" ("_position" cx) ("_position" s)
###             ("_position" Skip) ("_position" sx))
###           ("\<^const>Semantics.reds"
###             ("\<^const>Semantics.com.While" ("_position" b)
###               ("_position" cx))
###             ("_position" sx) ("_position" Skip) ("_position" s')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###         ("_position" true)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" sx)
###         ("\<^const>HOL.conj"
###           ("\<^const>Semantics.reds" ("_position" cx) ("_position" s)
###             ("_position" Skip) ("_position" sx))
###           ("\<^const>Semantics.reds"
###             ("\<^const>Semantics.com.While" ("_position" b)
###               ("_position" cx))
###             ("_position" sx) ("_position" Skip) ("_position" s')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 194 of "$AFP/VolpanoSmith/Semantics.thy") produces 15 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" com))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.disj"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_applC" ("_position" Some) ("_position" true)))
###           ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))))
###       ("_applC" ("_position" Some) ("_position" false)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" com))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" true)))
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" false))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" com))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.interpret" ("_position" b)
###       ("\<^const>HOL.disj"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" true)))
###         ("\<^const>HOL.eq"
###           ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###           ("_applC" ("_position" Some) ("_position" false)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" com))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" true))))
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" false))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" com))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("_applC"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###         ("_position" true))
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" false))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" com))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" true)))
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" false)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" com))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.interpret" ("_position" b)
###       ("\<^const>HOL.disj"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" true)))
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_applC" ("_position" Some) ("_position" false))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" com))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" true))))
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" false)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" com))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("_applC"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###         ("_position" true))
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" false)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.reds"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" com))
###       ("_position" s) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.disj"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_applC" ("_position" Some) ("_position" true)))
###           ("\<^const>Semantics.interpret" ("_position" b)
###             ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))))
###       ("_position" false))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "red_n"
  Proving monotonicity ...
### Ambiguous input (line 242 of "$AFP/VolpanoSmith/Semantics.thy") produces 63 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.red_n"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" n) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" s)
###               ("_applC" ("_position" Some) ("_position" false)))
###             ("\<^const>HOL.eq" ("_position" s) ("_position" s'))))
###         ("\<^const>HOL.eq" ("_position" n)
###           ("\<^const>Groups.one_class.one")))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" i)
###           ("_idts" ("_position" j) ("_position" s'')))
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Semantics.interpret" ("_position" b)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" s)
###                   ("_applC" ("_position" Some) ("_position" true)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Semantics.red_n" ("_position" cx)
###                     ("_position" s) ("_position" i) ("_position" Skip)
###                     ("_position" s''))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Semantics.red_n"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" j) ("_position" Skip)
###                       ("_position" s'))
###                     ("\<^const>HOL.eq" ("_position" n) ("_position" i))))))
###             ("_position" j))
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.red_n"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" n) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj"
###         ("_applC"
###           ("\<^const>Semantics.interpret" ("_position" b)
###             ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###           ("_position" false))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" s) ("_position" s'))
###           ("\<^const>HOL.eq" ("_position" n)
###             ("\<^const>Groups.one_class.one"))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" i)
###           ("_idts" ("_position" j) ("_position" s'')))
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Semantics.interpret" ("_position" b)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" s)
###                   ("_applC" ("_position" Some) ("_position" true)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Semantics.red_n" ("_position" cx)
###                     ("_position" s) ("_position" i) ("_position" Skip)
###                     ("_position" s''))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Semantics.red_n"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" j) ("_position" Skip)
###                       ("_position" s'))
###                     ("\<^const>HOL.eq" ("_position" n) ("_position" i))))))
###             ("_position" j))
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.red_n"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" n) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_applC" ("_position" Some) ("_position" false))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" s) ("_position" s'))
###           ("\<^const>HOL.eq" ("_position" n)
###             ("\<^const>Groups.one_class.one"))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" i)
###           ("_idts" ("_position" j) ("_position" s'')))
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Semantics.interpret" ("_position" b)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" s)
###                   ("_applC" ("_position" Some) ("_position" true)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Semantics.red_n" ("_position" cx)
###                     ("_position" s) ("_position" i) ("_position" Skip)
###                     ("_position" s''))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Semantics.red_n"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" j) ("_position" Skip)
###                       ("_position" s'))
###                     ("\<^const>HOL.eq" ("_position" n) ("_position" i))))))
###             ("_position" j))
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.red_n"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" n) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_applC" ("_position" Some) ("_position" false)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" s) ("_position" s'))
###             ("\<^const>HOL.eq" ("_position" n)
###               ("\<^const>Groups.one_class.one")))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" i)
###           ("_idts" ("_position" j) ("_position" s'')))
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Semantics.interpret" ("_position" b)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" s)
###                   ("_applC" ("_position" Some) ("_position" true)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Semantics.red_n" ("_position" cx)
###                     ("_position" s) ("_position" i) ("_position" Skip)
###                     ("_position" s''))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Semantics.red_n"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" j) ("_position" Skip)
###                       ("_position" s'))
###                     ("\<^const>HOL.eq" ("_position" n) ("_position" i))))))
###             ("_position" j))
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.red_n"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" n) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###           ("_applC" ("_position" Some) ("_position" false)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" s) ("_position" s'))
###           ("\<^const>HOL.eq" ("_position" n)
###             ("\<^const>Groups.one_class.one"))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" i)
###           ("_idts" ("_position" j) ("_position" s'')))
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Semantics.interpret" ("_position" b)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" s)
###                   ("_applC" ("_position" Some) ("_position" true)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Semantics.red_n" ("_position" cx)
###                     ("_position" s) ("_position" i) ("_position" Skip)
###                     ("_position" s''))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Semantics.red_n"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" j) ("_position" Skip)
###                       ("_position" s'))
###                     ("\<^const>HOL.eq" ("_position" n) ("_position" i))))))
###             ("_position" j))
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.red_n"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" n) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>Semantics.interpret" ("_position" b)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" s)
###                 ("_applC" ("_position" Some) ("_position" false)))
###               ("_position" s)))
###           ("_position" s'))
###         ("\<^const>HOL.eq" ("_position" n)
###           ("\<^const>Groups.one_class.one")))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" i)
###           ("_idts" ("_position" j) ("_position" s'')))
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Semantics.interpret" ("_position" b)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" s)
###                   ("_applC" ("_position" Some) ("_position" true)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Semantics.red_n" ("_position" cx)
###                     ("_position" s) ("_position" i) ("_position" Skip)
###                     ("_position" s''))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Semantics.red_n"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" j) ("_position" Skip)
###                       ("_position" s'))
###                     ("\<^const>HOL.eq" ("_position" n) ("_position" i))))))
###             ("_position" j))
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.red_n"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" n) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" s)
###               ("_applC" ("_position" Some) ("_position" false)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" s) ("_position" s'))
###               ("_position" n))))
###         ("\<^const>Groups.one_class.one"))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" i)
###           ("_idts" ("_position" j) ("_position" s'')))
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Semantics.interpret" ("_position" b)
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq" ("_position" s)
###                   ("_applC" ("_position" Some) ("_position" true)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Semantics.red_n" ("_position" cx)
###                     ("_position" s) ("_position" i) ("_position" Skip)
###                     ("_position" s''))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Semantics.red_n"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" j) ("_position" Skip)
###                       ("_position" s'))
###                     ("\<^const>HOL.eq" ("_position" n) ("_position" i))))))
###             ("_position" j))
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.red_n"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" n) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" s)
###               ("_applC" ("_position" Some) ("_position" false)))
###             ("\<^const>HOL.eq" ("_position" s) ("_position" s'))))
###         ("\<^const>HOL.eq" ("_position" n)
###           ("\<^const>Groups.one_class.one")))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" i)
###           ("_idts" ("_position" j) ("_position" s'')))
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Semantics.interpret" ("_position" b)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" s)
###                 ("_applC" ("_position" Some) ("_position" true)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Semantics.red_n" ("_position" cx) ("_position" s)
###                   ("_position" i) ("_position" Skip) ("_position" s''))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Semantics.red_n"
###                     ("\<^const>Semantics.com.While" ("_position" b)
###                       ("_position" cx))
###                     ("_position" s'') ("_position" j) ("_position" Skip)
###                     ("_position" s'))
###                   ("\<^const>HOL.eq" ("_position" n)
###                     ("\<^const>Groups.plus_class.plus" ("_position" i)
###                       ("_position" j)))))))
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.red_n"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" n) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj"
###         ("_applC"
###           ("\<^const>Semantics.interpret" ("_position" b)
###             ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###           ("_position" false))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" s) ("_position" s'))
###           ("\<^const>HOL.eq" ("_position" n)
###             ("\<^const>Groups.one_class.one"))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" i)
###           ("_idts" ("_position" j) ("_position" s'')))
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Semantics.interpret" ("_position" b)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" s)
###                 ("_applC" ("_position" Some) ("_position" true)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Semantics.red_n" ("_position" cx) ("_position" s)
###                   ("_position" i) ("_position" Skip) ("_position" s''))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Semantics.red_n"
###                     ("\<^const>Semantics.com.While" ("_position" b)
###                       ("_position" cx))
###                     ("_position" s'') ("_position" j) ("_position" Skip)
###                     ("_position" s'))
###                   ("\<^const>HOL.eq" ("_position" n)
###                     ("\<^const>Groups.plus_class.plus" ("_position" i)
###                       ("_position" j)))))))
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Semantics.red_n"
###       ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###       ("_position" s) ("_position" n) ("_position" Skip) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_applC" ("_position" Some) ("_position" false))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" s) ("_position" s'))
###           ("\<^const>HOL.eq" ("_position" n)
###             ("\<^const>Groups.one_class.one"))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" i)
###           ("_idts" ("_position" j) ("_position" s'')))
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Semantics.interpret" ("_position" b)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" s)
###                 ("_applC" ("_position" Some) ("_position" true)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Semantics.red_n" ("_position" cx) ("_position" s)
###                   ("_position" i) ("_position" Skip) ("_position" s''))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Semantics.red_n"
###                     ("\<^const>Semantics.com.While" ("_position" b)
###                       ("_position" cx))
###                     ("_position" s'') ("_position" j) ("_position" Skip)
###                     ("_position" s'))
###                   ("\<^const>HOL.eq" ("_position" n)
###                     ("\<^const>Groups.plus_class.plus" ("_position" i)
###                       ("_position" j)))))))
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 273 of "$AFP/VolpanoSmith/Semantics.thy") produces 3 parse trees:
### ("\<^const>Pure.all_binder" ("_position" s)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###         ("_applC" ("_position" Some) ("_position" false))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" s) ("_position" s))))))
### ("\<^const>Pure.all_binder" ("_position" s)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.interpret" ("_position" b)
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_applC" ("_position" Some) ("_position" false)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" s) ("_position" s))))))
### ("\<^const>Pure.all_binder" ("_position" s)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###         ("_position" false)))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" s) ("_position" s))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 274 of "$AFP/VolpanoSmith/Semantics.thy") produces 3 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" s)
###     ("_idts" ("_position" i) ("_idts" ("_position" j) ("_position" s''))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC"
###           ("\<^const>Semantics.interpret" ("_position" b)
###             ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###           ("_position" true)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Semantics.red_n" ("_position" cx) ("_position" s)
###             ("_position" i) ("_position" Skip) ("_position" s'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Semantics.red_n"
###               ("\<^const>Semantics.com.While" ("_position" b)
###                 ("_position" cx))
###               ("_position" s'') ("_position" j) ("_position" Skip)
###               ("_position" s')))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" s'') ("_position" s'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" s) ("_position" s'))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" s)
###     ("_idts" ("_position" i) ("_idts" ("_position" j) ("_position" s''))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Semantics.interpret" ("_position" b)
###           ("\<^const>HOL.eq" ("_position" s)
###             ("_applC" ("_position" Some) ("_position" true)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Semantics.red_n" ("_position" cx) ("_position" s)
###             ("_position" i) ("_position" Skip) ("_position" s'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Semantics.red_n"
###               ("\<^const>Semantics.com.While" ("_position" b)
###                 ("_position" cx))
###               ("_position" s'') ("_position" j) ("_position" Skip)
###               ("_position" s')))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" s'') ("_position" s'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" s) ("_position" s'))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" s)
###     ("_idts" ("_position" i) ("_idts" ("_position" j) ("_position" s''))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>Semantics.interpret" ("_position" b) ("_position" s))
###           ("_applC" ("_position" Some) ("_position" true))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Semantics.red_n" ("_position" cx) ("_position" s)
###             ("_position" i) ("_position" Skip) ("_position" s'')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Semantics.red_n"
###               ("\<^const>Semantics.com.While" ("_position" b)
###                 ("_position" cx))
###               ("_position" s'') ("_position" j) ("_position" Skip)
###               ("_position" s')))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" s'') ("_position" s'))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" s) ("_position" s'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 316 of "$AFP/VolpanoSmith/Semantics.thy") produces 9 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds"
###         ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###         ("_position" s) ("_position" Skip) ("_position" s')))
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" s)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("_applC"
###               ("\<^const>Semantics.interpret" ("_position" b)
###                 ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###               ("_position" false)))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs" ("_position" s) ("_position" s))))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" s) ("_position" s''))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>Semantics.interpret" ("_position" b)
###                     ("_position" s))
###                   ("_applC" ("_position" Some) ("_position" true))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Semantics.reds" ("_position" cx)
###                     ("_position" s) ("_position" Skip) ("_position" s'')))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Semantics.reds"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" Skip)
###                       ("_position" s')))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" P)
###                         ("_cargs" ("_position" s'') ("_position" s'))))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" s) ("_position" s')))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" P) ("_cargs" ("_position" s) ("_position" s')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds"
###         ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###         ("_position" s) ("_position" Skip) ("_position" s')))
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" s)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Semantics.interpret" ("_position" b)
###               ("\<^const>HOL.eq" ("_position" s)
###                 ("_applC" ("_position" Some) ("_position" false)))))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs" ("_position" s) ("_position" s))))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" s) ("_position" s''))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>Semantics.interpret" ("_position" b)
###                     ("_position" s))
###                   ("_applC" ("_position" Some) ("_position" true))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Semantics.reds" ("_position" cx)
###                     ("_position" s) ("_position" Skip) ("_position" s'')))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Semantics.reds"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" Skip)
###                       ("_position" s')))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" P)
###                         ("_cargs" ("_position" s'') ("_position" s'))))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" s) ("_position" s')))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" P) ("_cargs" ("_position" s) ("_position" s')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds"
###         ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###         ("_position" s) ("_position" Skip) ("_position" s')))
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" s)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>Semantics.interpret" ("_position" b)
###                 ("_position" s))
###               ("_applC" ("_position" Some) ("_position" false))))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs" ("_position" s) ("_position" s))))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" s) ("_position" s''))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>Semantics.interpret" ("_position" b)
###                     ("_position" s))
###                   ("_applC" ("_position" Some) ("_position" true))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Semantics.reds" ("_position" cx)
###                     ("_position" s) ("_position" Skip) ("_position" s'')))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Semantics.reds"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" Skip)
###                       ("_position" s')))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" P)
###                         ("_cargs" ("_position" s'') ("_position" s'))))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" s) ("_position" s')))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" P) ("_cargs" ("_position" s) ("_position" s')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds"
###         ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###         ("_position" s) ("_position" Skip) ("_position" s')))
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" s)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("_applC"
###               ("\<^const>Semantics.interpret" ("_position" b)
###                 ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###               ("_position" false)))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs" ("_position" s) ("_position" s))))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" s) ("_position" s''))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Semantics.interpret" ("_position" b)
###                   ("\<^const>HOL.eq" ("_position" s)
###                     ("_applC" ("_position" Some) ("_position" true)))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Semantics.reds" ("_position" cx)
###                     ("_position" s) ("_position" Skip) ("_position" s'')))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Semantics.reds"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" Skip)
###                       ("_position" s')))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" P)
###                         ("_cargs" ("_position" s'') ("_position" s'))))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" s) ("_position" s')))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" P) ("_cargs" ("_position" s) ("_position" s')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds"
###         ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###         ("_position" s) ("_position" Skip) ("_position" s')))
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" s)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Semantics.interpret" ("_position" b)
###               ("\<^const>HOL.eq" ("_position" s)
###                 ("_applC" ("_position" Some) ("_position" false)))))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs" ("_position" s) ("_position" s))))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" s) ("_position" s''))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Semantics.interpret" ("_position" b)
###                   ("\<^const>HOL.eq" ("_position" s)
###                     ("_applC" ("_position" Some) ("_position" true)))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Semantics.reds" ("_position" cx)
###                     ("_position" s) ("_position" Skip) ("_position" s'')))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Semantics.reds"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" Skip)
###                       ("_position" s')))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" P)
###                         ("_cargs" ("_position" s'') ("_position" s'))))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" s) ("_position" s')))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" P) ("_cargs" ("_position" s) ("_position" s')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds"
###         ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###         ("_position" s) ("_position" Skip) ("_position" s')))
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" s)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>Semantics.interpret" ("_position" b)
###                 ("_position" s))
###               ("_applC" ("_position" Some) ("_position" false))))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs" ("_position" s) ("_position" s))))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" s) ("_position" s''))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Semantics.interpret" ("_position" b)
###                   ("\<^const>HOL.eq" ("_position" s)
###                     ("_applC" ("_position" Some) ("_position" true)))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Semantics.reds" ("_position" cx)
###                     ("_position" s) ("_position" Skip) ("_position" s'')))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Semantics.reds"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" Skip)
###                       ("_position" s')))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" P)
###                         ("_cargs" ("_position" s'') ("_position" s'))))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" s) ("_position" s')))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" P) ("_cargs" ("_position" s) ("_position" s')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds"
###         ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###         ("_position" s) ("_position" Skip) ("_position" s')))
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" s)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("_applC"
###               ("\<^const>Semantics.interpret" ("_position" b)
###                 ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###               ("_position" false)))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs" ("_position" s) ("_position" s))))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" s) ("_position" s''))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC"
###                   ("\<^const>Semantics.interpret" ("_position" b)
###                     ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###                   ("_position" true)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Semantics.reds" ("_position" cx)
###                     ("_position" s) ("_position" Skip) ("_position" s'')))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Semantics.reds"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" Skip)
###                       ("_position" s')))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" P)
###                         ("_cargs" ("_position" s'') ("_position" s'))))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" s) ("_position" s')))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" P) ("_cargs" ("_position" s) ("_position" s')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds"
###         ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###         ("_position" s) ("_position" Skip) ("_position" s')))
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" s)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Semantics.interpret" ("_position" b)
###               ("\<^const>HOL.eq" ("_position" s)
###                 ("_applC" ("_position" Some) ("_position" false)))))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs" ("_position" s) ("_position" s))))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" s) ("_position" s''))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC"
###                   ("\<^const>Semantics.interpret" ("_position" b)
###                     ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###                   ("_position" true)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Semantics.reds" ("_position" cx)
###                     ("_position" s) ("_position" Skip) ("_position" s'')))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Semantics.reds"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" Skip)
###                       ("_position" s')))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" P)
###                         ("_cargs" ("_position" s'') ("_position" s'))))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" s) ("_position" s')))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" P) ("_cargs" ("_position" s) ("_position" s')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Semantics.reds"
###         ("\<^const>Semantics.com.While" ("_position" b) ("_position" cx))
###         ("_position" s) ("_position" Skip) ("_position" s')))
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" s)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>Semantics.interpret" ("_position" b)
###                 ("_position" s))
###               ("_applC" ("_position" Some) ("_position" false))))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs" ("_position" s) ("_position" s))))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" s) ("_position" s''))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC"
###                   ("\<^const>Semantics.interpret" ("_position" b)
###                     ("\<^const>HOL.eq" ("_position" s) ("_position" Some)))
###                   ("_position" true)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Semantics.reds" ("_position" cx)
###                     ("_position" s) ("_position" Skip) ("_position" s'')))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Semantics.reds"
###                       ("\<^const>Semantics.com.While" ("_position" b)
###                         ("_position" cx))
###                       ("_position" s'') ("_position" Skip)
###                       ("_position" s')))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" P)
###                         ("_cargs" ("_position" s'') ("_position" s'))))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" s) ("_position" s')))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" P) ("_cargs" ("_position" s) ("_position" s')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Semantics"
### 2.555s elapsed time, 7.818s cpu time, 1.323s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.555s elapsed time, 1.010s cpu time, 0.061s GC time
Loading theory "Draft.SemanticsMoreTemplates"
val templateLemmas =
   [("Semantics.FVc", "fv (Val ?V) = {}",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Semantics.FVv", "fv (Var ?V) = {?V}",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Semantics.Val", "\<lbrakk>Val ?v\<rbrakk>?s = Some ?v",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("Semantics.Var", "\<lbrakk>Var ?V\<rbrakk>?s = ?s ?V",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app (template_var 0, template_var 1))),
    ("Semantics.FVe",
     "fv (?e1.0 \<guillemotleft>?bop\<guillemotright> ?e2.0) =
      fv ?e1.0 Un fv ?e2.0",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 2)),
         template_app (template_hole 2, template_var 0)))),
    ("Semantics.red_n_to_reds",
     "\<langle>?c,
       ?s\<rangle> \<rightarrow>\<^bsup>?n\<^esup> \<langle>?c',
              ?s'\<rangle> ==>
      \<langle>?c,?s\<rangle> \<rightarrow>* \<langle>?c',?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Semantics.Skip_reds",
     "\<langle>Skip,?s\<rangle> \<rightarrow>* \<langle>?c',?s'\<rangle> ==>
      ?s = ?s' & ?c' = Skip",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_hole 5),
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_hole 3))
           ))),
    ("Semantics.reds_to_red_n",
     "\<langle>?c,?s\<rangle> \<rightarrow>* \<langle>?c',?s'\<rangle> ==>
      EX n. \<langle>?c,
             ?s\<rangle> \<rightarrow>\<^bsup>n\<^esup> \<langle>?c',
                   ?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_hole 3),
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Semantics.LAss_reds",
     "\<langle>?V:=?e,?s\<rangle> \<rightarrow>*
      \<langle>Skip,?s'\<rangle> ==>
      ?s' = ?s(?V := \<lbrakk>?e\<rbrakk>?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_hole 6),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 3),
                      template_var 2)),
                  template_var 1)),
              template_app
               (template_app (template_hole 5, template_hole 3),
                template_var 0))
            )],
       template_equation
        (template_var 0,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("Semantics.Seq2_reds",
     "\<langle>Skip;; ?c\<^sub>2,?s\<rangle> \<rightarrow>*
      \<langle>Skip,?s'\<rangle> ==>
      \<langle>?c\<^sub>2,?s\<rangle> \<rightarrow>*
      \<langle>Skip,?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_hole 3),
                template_app
                 (template_app
                   (template_hole 2,
                    template_app
                     (template_app (template_hole 1, template_hole 0),
                      template_var 2)),
                  template_var 1)),
              template_app
               (template_app (template_hole 2, template_hole 0),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 2, template_hole 0),
               template_var 0))
           ))),
    ("Semantics.BinOp",
     "\<lbrakk>?e\<^sub>1 \<guillemotleft>?bop\<guillemotright> ?e\<^sub>2\<rbrakk>?s =
      (case \<lbrakk>?e\<^sub>1\<rbrakk>?s of None => None
       | Some v\<^sub>1 =>
           case \<lbrakk>?e\<^sub>2\<rbrakk>?s of None => None
           | Some x => binop ?bop v\<^sub>1 x)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), t_empty),
         template_app
          (template_app (template_hole 4, template_var 3),
           template_var 0)))),
    ("Semantics.reds_det",
     "[| \<langle>?c,?s\<rangle> \<rightarrow>*
         \<langle>Skip,?s\<^sub>1\<rangle>;
         \<langle>?c,?s\<rangle> \<rightarrow>*
         \<langle>Skip,?s\<^sub>2\<rangle> |]
      ==> ?s\<^sub>1 = ?s\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_hole 3),
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_hole 3),
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 0))
            )],
       template_equation (template_var 1, template_var 0))),
    ("Semantics.WhileFalse_reds",
     "[| \<langle>while (?b) ?cx,?s\<rangle> \<rightarrow>*
         \<langle>Skip,?s'\<rangle>;
         \<lbrakk>?b\<rbrakk>?s = Some false |]
      ==> ?s = ?s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_hole 9),
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_var 3),
                      template_var 2)),
                  template_var 1)),
              template_app
               (template_app (template_hole 8, template_hole 6),
                template_var 0))
            ),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 1),
          template_app
           (template_hole 3,
            template_app (template_hole 2, template_hole 1)))],
       template_equation (template_var 1, template_var 0))),
    ("Semantics.red_det",
     "[| \<langle>?c,?s\<rangle> \<rightarrow>
         \<langle>?c\<^sub>1,?s\<^sub>1\<rangle>;
         \<langle>?c,?s\<rangle> \<rightarrow>
         \<langle>?c\<^sub>2,?s\<^sub>2\<rangle> |]
      ==> ?c\<^sub>1 = ?c\<^sub>2 & ?s\<^sub>1 = ?s\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 4)),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 4)),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Semantics.While_True_or_False",
     "\<langle>while (?b) ?com,?s\<rangle> \<rightarrow>*
      \<langle>Skip,?s'\<rangle> ==>
      \<lbrakk>?b\<rbrakk>?s = Some true |
      \<lbrakk>?b\<rbrakk>?s = Some false",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_hole 10),
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 3),
                      template_var 2)),
                  template_var 1)),
              template_app
               (template_app (template_hole 9, template_hole 7),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 3),
                     template_var 1)),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1)))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_var 1)),
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 0))))
           ))),
    ("Semantics.Cond_True_or_False",
     "\<langle>if (?b) ?c\<^sub>1 else ?c\<^sub>2,?s\<rangle> \<rightarrow>*
      \<langle>Skip,?s'\<rangle> ==>
      \<lbrakk>?b\<rbrakk>?s = Some true |
      \<lbrakk>?b\<rbrakk>?s = Some false",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_hole 10),
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app
                       (template_app (template_hole 8, template_var 4),
                        template_var 3),
                      template_var 2)),
                  template_var 1)),
              template_app
               (template_app (template_hole 9, template_hole 7),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 4),
                     template_var 1)),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1)))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 4),
                   template_var 1)),
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 0))))
           ))),
    ("Semantics.CondFalse_reds",
     "[| \<langle>if (?b) ?c\<^sub>1 else ?c\<^sub>2,
          ?s\<rangle> \<rightarrow>*
         \<langle>Skip,?s'\<rangle>;
         \<lbrakk>?b\<rbrakk>?s = Some false |]
      ==> \<langle>?c\<^sub>2,?s\<rangle> \<rightarrow>*
          \<langle>Skip,?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_hole 8),
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app
                       (template_app (template_hole 6, template_var 4),
                        template_var 3),
                      template_var 2)),
                  template_var 1)),
              template_app
               (template_app (template_hole 7, template_hole 5),
                template_var 0))
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 4), template_var 1),
          template_app
           (template_hole 2,
            template_app (template_hole 1, template_hole 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 9, template_hole 8),
               template_app
                (template_app (template_hole 7, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 7, template_hole 5),
               template_var 0))
           ))),
    ("Semantics.CondTrue_reds",
     "[| \<langle>if (?b) ?c\<^sub>1 else ?c\<^sub>2,
          ?s\<rangle> \<rightarrow>*
         \<langle>Skip,?s'\<rangle>;
         \<lbrakk>?b\<rbrakk>?s = Some true |]
      ==> \<langle>?c\<^sub>1,?s\<rangle> \<rightarrow>*
          \<langle>Skip,?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_hole 8),
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app
                       (template_app (template_hole 6, template_var 4),
                        template_var 3),
                      template_var 2)),
                  template_var 1)),
              template_app
               (template_app (template_hole 7, template_hole 5),
                template_var 0))
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 4), template_var 1),
          template_app
           (template_hole 2,
            template_app (template_hole 1, template_hole 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 9, template_hole 8),
               template_app
                (template_app (template_hole 7, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 7, template_hole 5),
               template_var 0))
           ))),
    ("Semantics.Seq_reds",
     "[| \<langle>?c\<^sub>1;; ?c\<^sub>2,?s\<rangle> \<rightarrow>*
         \<langle>Skip,?s'\<rangle>;
         !!s''.
            [| \<langle>?c\<^sub>1,?s\<rangle> \<rightarrow>*
               \<langle>Skip,s''\<rangle>;
               \<langle>?c\<^sub>2,s''\<rangle> \<rightarrow>*
               \<langle>Skip,?s'\<rangle> |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_hole 4),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 4),
                      template_var 3)),
                  template_var 2)),
              template_app
               (template_app (template_hole 3, template_hole 1),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Semantics.WhileTrue_reds",
     "[| \<langle>while (?b) ?cx,?s\<rangle> \<rightarrow>*
         \<langle>Skip,?s'\<rangle>;
         \<lbrakk>?b\<rbrakk>?s = Some true |]
      ==> EX sx.
             \<langle>?cx,?s\<rangle> \<rightarrow>*
             \<langle>Skip,sx\<rangle> &
             \<langle>while (?b) ?cx,sx\<rangle> \<rightarrow>*
             \<langle>Skip,?s'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_hole 10),
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 3),
                      template_var 2)),
                  template_var 1)),
              template_app
               (template_app (template_hole 9, template_hole 7),
                template_var 0))
            ),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 3), template_var 1),
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_hole 2)))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Semantics.Seq_red_nE",
     "[| \<langle>?c\<^sub>1;; ?c\<^sub>2,
          ?s\<rangle> \<rightarrow>\<^bsup>?n\<^esup> \<langle>Skip,
                 ?s'\<rangle>;
         !!i j s''.
            [| \<langle>?c\<^sub>1,
                ?s\<rangle> \<rightarrow>\<^bsup>i\<^esup> \<langle>Skip,
                      s''\<rangle>;
               \<langle>?c\<^sub>2,
                s''\<rangle> \<rightarrow>\<^bsup>j\<^esup> \<langle>Skip,
                       ?s'\<rangle>;
               ?n = i + j + 1 |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app (template_hole 6, template_var 5),
                        template_var 4)),
                    template_var 3),
                  template_var 2),
                template_hole 5),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Semantics.while_red_nE",
     "\<langle>while (?b) ?cx,
       ?s\<rangle> \<rightarrow>\<^bsup>?n\<^esup> \<langle>Skip,
              ?s'\<rangle> ==>
      \<lbrakk>?b\<rbrakk>?s = Some false & ?s = ?s' & ?n = 1 |
      (EX i j s''.
          \<lbrakk>?b\<rbrakk>?s = Some true &
          \<langle>?cx,
           ?s\<rangle> \<rightarrow>\<^bsup>i\<^esup> \<langle>Skip,
                 s''\<rangle> &
          \<langle>while (?b) ?cx,
           s''\<rangle> \<rightarrow>\<^bsup>j\<^esup> \<langle>Skip,
                  ?s'\<rangle> &
          ?n = i + j + 2)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 19,
                      template_app
                       (template_app (template_hole 18, template_var 4),
                        template_var 3)),
                    template_var 2),
                  template_var 1),
                template_hole 17),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 16,
               template_app
                (template_app
                  (template_hole 15,
                   template_app
                    (template_app
                      (template_hole 14,
                       template_app
                        (template_app (template_hole 13, template_var 4),
                         template_var 2)),
                     template_app
                      (template_hole 12,
                       template_app (template_hole 11, template_hole 10)))),
                 template_app
                  (template_app
                    (template_hole 15,
                     template_app
                      (template_app (template_hole 9, template_var 2),
                       template_var 0)),
                   template_app
                    (template_app (template_hole 8, template_var 1),
                     template_hole 7)))),
             template_app (template_hole 6, t_empty))
           ))),
    ("Semantics.while_red_n_induct",
     "[| \<langle>while (?b) ?cx,
          ?s\<rangle> \<rightarrow>\<^bsup>?n\<^esup> \<langle>Skip,
                 ?s'\<rangle>;
         !!s. \<lbrakk>?b\<rbrakk>s = Some false ==> ?P s s;
         !!s i j s''.
            [| \<lbrakk>?b\<rbrakk>s = Some true;
               \<langle>?cx,
                s\<rangle> \<rightarrow>\<^bsup>i\<^esup> \<langle>Skip,
                     s''\<rangle>;
               \<langle>while (?b) ?cx,
                s''\<rangle> \<rightarrow>\<^bsup>j\<^esup> \<langle>Skip,
                       ?s'\<rangle>;
               ?P s'' ?s' |]
            ==> ?P s ?s' |]
      ==> ?P ?s ?s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 5),
                        template_var 4)),
                    template_var 3),
                  template_var 2),
                template_hole 8),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 3), template_var 1)
           ))),
    ("Semantics.while_reds_induct",
     "[| \<langle>while (?b) ?cx,?s\<rangle> \<rightarrow>*
         \<langle>Skip,?s'\<rangle>;
         !!s. \<lbrakk>?b\<rbrakk>s = Some false ==> ?P s s;
         !!s s''.
            [| \<lbrakk>?b\<rbrakk>s = Some true;
               \<langle>?cx,s\<rangle> \<rightarrow>*
               \<langle>Skip,s''\<rangle>;
               \<langle>while (?b) ?cx,s''\<rangle> \<rightarrow>*
               \<langle>Skip,?s'\<rangle>;
               ?P s'' ?s' |]
            ==> ?P s ?s' |]
      ==> ?P ?s ?s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_hole 10),
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 4),
                      template_var 3)),
                  template_var 2)),
              template_app
               (template_app (template_hole 9, template_hole 7),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 2), template_var 1)
           ))),
    ("Semantics.red_induct",
     "[| \<langle>?x1a,?x1b\<rangle> \<rightarrow>
         \<langle>?x2a,?x2b\<rangle>;
         !!V e s. ?P (V:=e) s Skip (s(V := \<lbrakk>e\<rbrakk>s));
         !!c\<^sub>1 s c\<^sub>1' s' c\<^sub>2.
            [| \<langle>c\<^sub>1,s\<rangle> \<rightarrow>
               \<langle>c\<^sub>1',s'\<rangle>;
               ?P c\<^sub>1 s c\<^sub>1' s' |]
            ==> ?P (c\<^sub>1;; c\<^sub>2) s (c\<^sub>1';; c\<^sub>2) s';
         !!c\<^sub>2 s. ?P (Skip;; c\<^sub>2) s c\<^sub>2 s;
         !!b s c\<^sub>1 c\<^sub>2.
            \<lbrakk>b\<rbrakk>s = Some true ==>
            ?P (if (b) c\<^sub>1 else c\<^sub>2) s c\<^sub>1 s;
         !!b s c\<^sub>1 c\<^sub>2.
            \<lbrakk>b\<rbrakk>s = Some false ==>
            ?P (if (b) c\<^sub>1 else c\<^sub>2) s c\<^sub>2 s;
         !!b s c.
            \<lbrakk>b\<rbrakk>s = Some true ==>
            ?P (while (b) c) s (c;; while (b) c) s;
         !!b s c.
            \<lbrakk>b\<rbrakk>s = Some false ==>
            ?P (while (b) c) s Skip s |]
      ==> ?P ?x1a ?x1b ?x2a ?x2b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app (template_hole 16, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 16, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_var 0, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)
           )))]:
   (string * thm * template) list
### theory "Draft.SemanticsMoreTemplates"
### 0.353s elapsed time, 0.474s cpu time, 0.041s GC time
val it = (): unit
