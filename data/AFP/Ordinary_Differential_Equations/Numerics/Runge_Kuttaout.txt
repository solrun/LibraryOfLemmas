Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Runge_KuttaTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.Runge_KuttaTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.One_Step_Method" (required by "Draft.Runge_KuttaTemplates" via "Draft.Runge_Kutta")
Loading theory "HOL-Library.Tree" (required by "Draft.Runge_KuttaTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
locale grid
  fixes t :: "nat => real"
  assumes "grid t"
### theory "HOL-Library.Function_Algebras"
### 0.125s elapsed time, 0.510s cpu time, 0.054s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Runge_KuttaTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
locale consistent_one_step
  fixes t0 :: "real"
    and t1 :: "real"
    and x :: "real => 'a"
    and incr :: "real => real => 'a => 'a"
    and p :: "nat"
    and B :: "real"
    and r :: "real"
    and L :: "real"
  assumes "consistent_one_step t0 t1 x incr p B r L"
locale max_step
  fixes t :: "nat => real"
    and t1 :: "real"
    and p :: "nat"
    and L :: "real"
    and B :: "real"
    and r :: "real"
  assumes "max_step t t1 p L B r"
consts
  shift :: "'a list => 'a stream => 'a stream"
locale convergent_one_step
  fixes t0 :: "real"
    and t1 :: "real"
    and x :: "real => 'a"
    and incr :: "real => real => 'a => 'a"
    and p :: "nat"
    and B :: "real"
    and r :: "real"
    and L :: "real"
    and t :: "nat => real"
  assumes "convergent_one_step t0 t1 x incr p B r L t"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
locale disturbed_one_step
  fixes t :: "nat => real"
    and t1 :: "real"
    and s :: "real => real => 'a => 'a"
    and s0 :: "'a"
    and x :: "real => 'a"
    and incr :: "real => real => 'a => 'a"
    and p :: "nat"
    and B :: "real"
    and L :: "real"
  assumes "disturbed_one_step t t1 s s0 x incr p B L"
locale stable_one_step
  fixes t1 :: "real"
    and x :: "real => 'a"
    and incr :: "real => real => 'a => 'a"
    and p :: "nat"
    and B :: "real"
    and r :: "real"
    and L :: "real"
    and t :: "nat => real"
    and s :: "real => real => 'a => 'a"
    and s0 :: "'a"
  assumes "stable_one_step t1 x incr p B r L t s s0"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
locale rounded_one_step
  fixes t :: "nat => real"
    and t1 :: "real"
    and x :: "real => 'a"
    and incr :: "real => real => 'a => 'a"
    and p :: "nat"
    and B :: "real"
    and r :: "real"
    and L :: "real"
    and incr' :: "real => real => 'a => 'a"
    and x0' :: "'a"
  assumes "rounded_one_step t t1 x incr p B r L incr' x0'"
### theory "Draft.One_Step_Method"
### 0.543s elapsed time, 2.138s cpu time, 0.177s GC time
Loading theory "Draft.Runge_Kutta" (required by "Draft.Runge_KuttaTemplates")
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.849s elapsed time, 3.319s cpu time, 0.338s GC time
### theory "HOL-Library.BigO"
### 0.745s elapsed time, 2.882s cpu time, 0.284s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd (snd p))))))) <*mlex*> {}"
consts
  rk_eval_dynamic ::
    "(nat => nat => real)
     => (nat => real)
        => (real * 'a => 'a) => real => real => 'a => nat => nat => 'a"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale derivative_on_prod
  fixes T :: "real set"
    and X :: "'a set"
    and f :: "real => 'a => 'a"
    and f' :: "real * 'a => real * 'a => 'a"
  assumes "derivative_on_prod T X f f'"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.871s elapsed time, 5.659s cpu time, 1.010s GC time
Loading theory "Draft.Templates" (required by "Draft.Runge_KuttaTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.125s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Runge_KuttaTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.721s elapsed time, 1.714s cpu time, 0.679s GC time
locale derivative_norm_bounded
  fixes T :: "real set"
    and X :: "'a set"
    and f :: "real => 'a => 'a"
    and f' :: "real * 'a => real * 'a => 'a"
    and B :: "real"
    and B' :: "real"
  assumes "derivative_norm_bounded T X f f' B B'"
locale grid_from
  fixes t :: "nat => real"
    and t0 :: "real"
  assumes "grid_from t t0"
locale euler_consistent
  fixes T :: "real set"
    and f :: "real => 'a => 'a"
    and X :: "'a set"
    and X' :: "'a set"
    and B :: "real"
    and f' :: "real * 'a => real * 'a => 'a"
    and B' :: "real"
    and solution :: "real => 'a"
    and t0 :: "real"
    and x0 :: "'a"
    and r :: "real"
    and e :: "real"
  assumes "euler_consistent T f X X' B f' B' solution t0 x0 r e"
locale max_step1
  fixes t :: "nat => real"
    and t1 :: "real"
    and L :: "real"
    and B :: "real"
    and r :: "real"
  assumes "max_step1 t t1 L B r"
locale euler_convergent
  fixes X' :: "'a set"
    and B :: "real"
    and f' :: "real * 'a => real * 'a => 'a"
    and B' :: "real"
    and solution :: "real => 'a"
    and t0 :: "real"
    and x0 :: "'a"
    and r :: "real"
    and e :: "real"
    and T :: "real set"
    and f :: "real => 'a => 'a"
    and X :: "'a set"
    and t :: "nat => real"
  assumes "euler_convergent X' B f' B' solution t0 x0 r e T f X t"
locale ivp_rectangle_bounded_derivative
  fixes t0 :: "real"
    and T :: "real set"
    and x0 :: "'a"
    and b :: "real"
    and f :: "real => 'a => 'a"
    and X :: "'a set"
    and B :: "real"
    and f' :: "real * 'a => real * 'a => 'a"
    and B' :: "real"
    and r :: "real"
    and e :: "real"
  assumes "ivp_rectangle_bounded_derivative t0 T x0 b f B f' B' r e"
  defines "X == cball x0 b"
locale euler_on_rectangle
  fixes t0 :: "real"
    and T :: "real set"
    and x0 :: "'a"
    and f :: "real => 'a => 'a"
    and X :: "'a set"
    and t :: "nat => real"
    and e :: "real"
    and b :: "real"
    and r :: "real"
    and B :: "real"
    and f' :: "real * 'a => real * 'a => 'a"
    and B' :: "real"
  assumes "euler_on_rectangle t0 T x0 f t e b r B f' B'"
  defines "X == cball x0 b"
locale euler_on_rectangle
  fixes t0 :: "real"
    and T :: "real set"
    and x0 :: "'a"
    and f :: "real => 'a => 'a"
    and X :: "'a set"
    and t :: "nat => real"
    and e :: "real"
    and b :: "real"
    and r :: "real"
    and B :: "real"
    and f' :: "real * 'a => real * 'a => 'a"
    and B' :: "real"
  assumes "euler_on_rectangle t0 T x0 f t e b r B f' B'"
  defines "X == cball x0 b"
locale euler_rounded_on_rectangle
  fixes t0 :: "real"
    and T :: "real set"
    and x0 :: "'a"
    and f :: "real => 'a => 'a"
    and X :: "'a set"
    and t :: "nat => real"
    and t0' :: "real"
    and e1' :: "real"
    and e2' :: "real"
    and x0' :: "'a"
    and b :: "real"
    and r :: "real"
    and B :: "real"
    and f' :: "real * 'a => real * 'a => 'a"
    and B' :: "real"
    and g :: "real => 'a => 'a"
    and e :: "int"
  assumes
    "euler_rounded_on_rectangle t0 T x0 f t t0' e1' e2' x0' b r B f' B' g e"
  defines "X == cball x0 b"
locale euler_rounded_on_rectangle
  fixes t0 :: "real"
    and T :: "real set"
    and x0 :: "'a"
    and f :: "real => 'a => 'a"
    and X :: "'a set"
    and t :: "nat => real"
    and t0' :: "real"
    and e1' :: "real"
    and e2' :: "real"
    and x0' :: "'a"
    and b :: "real"
    and r :: "real"
    and B :: "real"
    and f' :: "real * 'a => real * 'a => 'a"
    and B' :: "real"
    and g :: "real => 'a => 'a"
    and e :: "int"
  assumes
    "euler_rounded_on_rectangle t0 T x0 f t t0' e1' e2' x0' b r B f' B' g e"
  defines "X == cball x0 b"
### theory "Draft.Runge_Kutta"
### 2.865s elapsed time, 6.151s cpu time, 1.609s GC time
Loading theory "Draft.Runge_KuttaTemplates"
val templateLemmas =
   [("Runge_Kutta.euler_increment",
     "euler_increment ?f ?h ?t ?x = ?f ?t ?x",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app (template_var 3, template_var 1), template_var 0))),
    ("Runge_Kutta.scale_back",
     "(0::?'b, ?r *\<^sub>R ?x) = ?r *\<^sub>R (0::?'b, ?x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)))),
    ("Runge_Kutta.scale_back",
     "(?r, ?r *\<^sub>R ?x) = ?r *\<^sub>R (1, ?x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 3, template_hole 0),
           template_var 0)))),
    ("Runge_Kutta.euler_float_increment",
     "euler_increment' ?e ?f ?h ?t ?x = eucl_down ?e (?f ?t ?x)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 4),
         template_app
          (template_app (template_var 3, template_var 1),
           template_var 0)))),
    ("Runge_Kutta.bounded_uminus_image",
     "bounded ((%x. - ?f x) ` ?s) = bounded (?f ` ?s)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Runge_Kutta.snd_imageI", "(?a, ?b) : ?R ==> ?b : snd ` ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Runge_Kutta.convex_minus_translation_iff",
     "convex ((%x. ?f x - ?y) ` ?S) = convex (?f ` ?S)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Runge_Kutta.convex_translation_iff",
     "convex ((%x. ?y + ?f x) ` ?S) = convex (?f ` ?S)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Runge_Kutta.convex_translation_iff",
     "convex ((%x. ?f x + ?y) ` ?S) = convex (?f ` ?S)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Runge_Kutta.closed_minus_translation_iff",
     "closed ((%x. ?f x - ?y) ` ?S) = closed (?f ` ?S)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Runge_Kutta.closed_translation_iff",
     "closed ((%x. ?y + ?f x) ` ?S) = closed (?f ` ?S)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Runge_Kutta.closed_translation_iff",
     "closed ((%x. ?f x + ?y) ` ?S) = closed (?f ` ?S)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Runge_Kutta.has_integral_integral_eqI",
     "[| ?f integrable_on ?s; integral ?s ?f = ?k |]
      ==> (?f has_integral ?k) ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 1), template_var 2),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("Runge_Kutta.convex_scaleR_image_iff",
     "convex ((%x. ?r *\<^sub>R ?f x) ` ?R) = (?r = 0 | convex (?f ` ?R))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, t_empty), template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 0)),
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0)))
           ))),
    ("Runge_Kutta.closed_scaleR_image_iff",
     "closed ((%x. ?r *\<^sub>R ?f x) ` ?R) = (?r = 0 | closed (?f ` ?R))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, t_empty), template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 0)),
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0)))
           ))),
    ("Runge_Kutta.bounded_minus_image",
     "[| bounded (?f ` ?s); bounded (?g ` ?s) |]
      ==> bounded ((%x. ?f x - ?g x) ` ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 1))
           ))),
    ("Runge_Kutta.bounded_plus_image",
     "[| bounded (?f ` ?s); bounded (?g ` ?s) |]
      ==> bounded ((%x. ?f x + ?g x) ` ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 1))
           ))),
    ("Runge_Kutta.bounded_Pair_image",
     "[| bounded (?f ` ?s); bounded (?g ` ?s) |]
      ==> bounded ((%x. (?f x, ?g x)) ` ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 0),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 1))
           ))),
    ("Runge_Kutta.bounded_scaleR_image",
     "[| bounded (?f ` ?s); bounded (?g ` ?s) |]
      ==> bounded ((%x. ?f x *\<^sub>R ?g x) ` ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 1))
           ))),
    ("Runge_Kutta.bounded_blinfun_apply_image",
     "[| bounded (?f ` ?s); bounded (?g ` ?s) |]
      ==> bounded ((%x. blinfun_apply (?f x) (?g x)) ` ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 0),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 1))
           ))),
    ("Runge_Kutta.euler_lipschitz",
     "[| ?t : {?t0.0..?T}; ALL t:{?t0.0..?T}. ?L-lipschitz_on ?D' (?f t) |]
      ==> ?L-lipschitz_on ?D' (euler_increment ?f ?h ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 6),
              template_app
               (template_app (template_hole 3, template_var 5),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 4)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 6))
           ))),
    ("Runge_Kutta.in_minus_Collect",
     "[| ?a : ?A; ?b : ?B |] ==> ?a - ?b : {x - y |x y. x : ?A & y : ?B}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 1)),
             template_app (template_hole 3, t_empty))
           ))),
    ("Runge_Kutta.integral_normalize_bounds",
     "[| ?t <= ?s; ?f integrable_on {?t..?s} |]
      ==> integral {?t..?s} ?f =
          (?s - ?t) *\<^sub>R
          integral {0..1} (%x. ?f ((?s - ?t) *\<^sub>R x + ?t))",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 0),
              template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 8, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 2)),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 8, template_hole 3),
                 template_hole 2)),
             t_empty))))),
    ("Runge_Kutta.max_step1_mono",
     "[| ?t 0 <= ?t1.0; ?t1.0 <= ?t2.0; 0 <= ?a; 0 <= ?b;
         max_step1 ?t ?t2.0 ?a ?b ?c |]
      ==> max_step1 ?t ?t1.0 ?a ?b ?c",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_var 5, template_hole 2),
          template_var 4),
        template_inequation (less_equals, template_var 4, template_var 3),
        template_inequation (less_equals, template_hole 1, template_var 2),
        template_inequation (less_equals, template_hole 1, template_var 1),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 0, template_var 5),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 4),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Runge_Kutta.closure_minus_Collect",
     "{x - y |x y. x : closure ?A & y : closure ?B}
      <= closure {x - y |x y. x : ?A & y : ?B}",
     template_inequation
      (less_equals, template_app (template_hole 6, t_empty),
       template_app
        (template_hole 0, template_app (template_hole 6, t_empty)))),
    ("Runge_Kutta.rk2_increment",
     "rk2_increment ?p ?f ?h ?t ?x =
      (1 - 1 / (?p * 2)) *\<^sub>R ?f ?t ?x +
      (1 / (?p * 2)) *\<^sub>R
      ?f (?t + ?h * ?p) (?x + (?h * ?p) *\<^sub>R ?f ?t ?x)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 10, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_app
                  (template_app (template_hole 5, template_hole 6),
                   template_app
                    (template_app (template_hole 4, template_var 4),
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_hole 1)))))),
             template_app
              (template_app (template_var 3, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 5, template_hole 6),
               template_app
                (template_app (template_hole 4, template_var 4),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))))),
           template_app
            (template_app
              (template_var 3,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 4))),
             template_app
              (template_app (template_hole 9, template_var 0),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 4, template_var 2),
                     template_var 4)),
                 template_app
                  (template_app (template_var 3, template_var 1),
                   template_var 0)))))))),
    ("Runge_Kutta.convex_hull_minus_Collect",
     "{x - y |x y. x : convex hull ?A & y : convex hull ?B} =
      convex hull {x - y |x y. x : ?A & y : ?B}",
     template_equation
      (template_app (template_hole 7, t_empty),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_app (template_hole 7, t_empty)))),
    ("Runge_Kutta.convex_scaleR_sum2",
     "[| ?x : ?G; ?y : ?G; convex ?G; 0 <= ?a; 0 <= ?b; ?a + ?b ~= 0 |]
      ==> (?a *\<^sub>R ?x + ?b *\<^sub>R ?y) /\<^sub>R (?a + ?b) : ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 8, template_var 3)),
        template_inequation (less_equals, template_hole 6, template_var 1),
        template_inequation (less_equals, template_hole 6, template_var 0),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0),
              template_hole 6)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 3, template_var 1),
                       template_var 0))),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_var 4)),
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 2)))),
             template_var 3)
           ))),
    ("Runge_Kutta.set_minus_subset",
     "[| ?A <= ?C; ?B <= ?D |]
      ==> {a - b |a b. a : ?A & b : ?B} <= {a - b |a b. a : ?C & b : ?D}",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 5, t_empty),
         template_app (template_hole 5, t_empty)))),
    ("Runge_Kutta.integral_by_parts_in_bounded_set",
     "[| (?f has_integral ?I) (cbox ?a ?b);
         ((%x. ?f x *\<^sub>R ?g x) has_integral ?P) (cbox ?a ?b);
         !!x. x : cbox ?a ?b ==> 0 <= ?f x; bounded (?g ` cbox ?a ?b);
         cbox ?a ?b ~= {} |]
      ==> ?P : (*\<^sub>R) ?I ` closure (convex hull ?g ` cbox ?a ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 17, template_var 5),
                template_var 4),
              template_app
               (template_app (template_hole 16, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 15, t_empty), template_var 0),
              template_app
               (template_app (template_hole 16, template_var 3),
                template_var 2))
            ),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_var 1),
                template_app
                 (template_app (template_hole 16, template_var 3),
                  template_var 2)))
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 16, template_var 3),
                template_var 2),
              template_hole 5)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 0),
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 14, template_var 4)),
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_app
                    (template_app (template_hole 8, template_var 1),
                     template_app
                      (template_app (template_hole 16, template_var 3),
                       template_var 2))))))
           ))),
    ("Runge_Kutta.integral_by_parts_near_bounded_convex_set",
     "[| (?f has_integral ?I) (cbox ?a ?b);
         ((%x. ?f x *\<^sub>R ?g x) has_integral ?P) (cbox ?a ?b);
         !!x. x : cbox ?a ?b ==> ?g x : ?G;
         !!x. x : cbox ?a ?b ==> 0 <= ?f x; convex ?G; bounded ?G |]
      ==> infdist ?P ((*\<^sub>R) ?I ` ?G) = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 6),
                template_var 5),
              template_app
               (template_app (template_hole 12, template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, t_empty), template_var 1),
              template_app
               (template_app (template_hole 12, template_var 4),
                template_var 3))
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 4, template_var 0)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 10, template_var 5)),
             template_var 0)),
         template_hole 5))),
    ("Runge_Kutta.sum_by_parts_ivt",
     "[| finite ?X; convex ?G; !!i. i : ?X ==> ?g i : ?G;
         !!i. i : ?X ==> 0 <= ?c i;
         !!y. [| y : ?G;
                 (SUM x:?X. ?c x *\<^sub>R ?g x) = sum ?c ?X *\<^sub>R y |]
              ==> ?thesis;
         ?G = {} ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 4)),
        template_predicate
         (template_app (template_hole 12, template_var 3)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_implication
         ([template_equation (template_var 3, template_hole 0)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Runge_Kutta.integral_by_parts_in_bounded_closed_convex_set",
     "[| (?f has_integral ?I) (cbox ?a ?b);
         ((%x. ?f x *\<^sub>R ?g x) has_integral ?P) (cbox ?a ?b);
         !!x. x : cbox ?a ?b ==> ?g x : ?G;
         !!x. x : cbox ?a ?b ==> 0 <= ?f x; bounded ?G; closed ?G;
         convex ?G; cbox ?a ?b ~= {} |]
      ==> ?P : (*\<^sub>R) ?I ` ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 15, template_var 6),
                template_var 5),
              template_app
               (template_app (template_hole 14, template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, t_empty), template_var 1),
              template_app
               (template_app (template_hole 14, template_var 4),
                template_var 3))
            ),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 6, template_var 0)),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate (template_app (template_hole 4, template_var 0)),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 14, template_var 4),
                template_var 3),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 9, template_var 1),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 12, template_var 5)),
               template_var 0))
           ))),
    ("Runge_Kutta.rk2_consistent_traj_set",
     "[| 0 <= ?h; ?t + ?h <= ?u; {?t..?u} <= ?T; ?X ~= {}; convex ?X;
         !!s. s : {?t..?u} ==>
              (?x has_vector_derivative ?f (s, ?x s))
               (at s within {?t..?u});
         !!tx. tx : ?T \<times> ?X ==> (?f has_derivative ?g' tx) (at tx);
         !!tx. tx : ?T \<times> ?X ==> (?f' has_derivative ?g'' tx) (at tx);
         !!tx. tx : ?T \<times> ?X ==> ?g' tx = blinfun_apply (?f' tx);
         !!tx. tx : ?T \<times> ?X ==> ?g'' tx = blinfun_apply (?f'' tx);
         bounded (?f'' ` (?T \<times> ?X)); !!s. s : {?t..?u} ==> ?x s : ?X;
         0 < ?p; ?p <= 1; ?x ?t + (?h * ?p) *\<^sub>R ?f (?t, ?x ?t) : ?X;
         convex ?R; closed ?R;
         !!s1 s2.
            [| 0 <= s1; s1 <= 1; 0 <= s2; s2 <= 1 |]
            ==> discrete_evolution (rk2_increment ?p (%t x. ?f (t, x)))
                 (?t + ?h) ?t (?x ?t) +
                heun_remainder1 ?x ?f ?f' ?f'' ?t ?h s1 -
                heun_remainder2 ?p ?x ?f ?f'' ?t ?h s2
                : ?R |]
      ==> ?x (?t + ?h) : ?R",
     template_implication
      ([template_inequation
         (less_equals, template_hole 37, template_var 12),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 36, template_var 11),
            template_var 12),
          template_var 10),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 34, template_var 11),
            template_var 10),
          template_var 9),
        template_negation
         (template_equation (template_var 8, template_hole 31)),
        template_predicate
         (template_app (template_hole 30, template_var 8)),
        template_predicate (template_app (template_hole 29, t_empty)),
        template_predicate (template_app (template_hole 24, t_empty)),
        template_predicate (template_app (template_hole 24, t_empty)),
        template_predicate (template_app (template_hole 24, t_empty)),
        template_predicate (template_app (template_hole 24, t_empty)),
        template_predicate
         (
            template_app
             (template_hole 13,
              template_app
               (template_app (template_hole 12, template_var 2),
                template_app
                 (template_app (template_hole 22, template_var 9),
                  t_empty)))
            ),
        template_predicate (template_app (template_hole 29, t_empty)),
        template_inequation (less_than, template_hole 37, template_var 1),
        template_inequation (less_equals, template_var 1, template_hole 9),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app (template_var 7, template_var 11)),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app (template_hole 6, template_var 12),
                        template_var 1)),
                    template_app
                     (template_var 6,
                      template_app
                       (template_app (template_hole 26, template_var 11),
                        template_app (template_var 7, template_var 11)))))),
              template_var 8)
            ),
        template_predicate
         (template_app (template_hole 30, template_var 0)),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate (template_app (template_hole 29, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_var 7,
                 template_app
                  (template_app (template_hole 36, template_var 11),
                   template_var 12))),
             template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.Runge_KuttaTemplates"
### 1.093s elapsed time, 1.383s cpu time, 0.173s GC time
val it = (): unit
