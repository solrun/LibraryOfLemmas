Loading theory "HOL-Library.Stream" (required by "Draft.Bounded_Linear_OperatorTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Bounded_Linear_OperatorTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Bounded_Linear_OperatorTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "Draft.Bounded_Linear_Operator" (required by "Draft.Bounded_Linear_OperatorTemplates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### Generation of a parametrized correspondence relation failed.
### Reason:  No relator for the type "Bounded_Linear_Function.blinfun" found.
### theory "HOL-Library.Function_Algebras"
### 0.133s elapsed time, 0.552s cpu time, 0.047s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Bounded_Linear_OperatorTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
instantiation
  blinop :: (real_normed_vector) real_normed_vector
  uminus_blinop == uminus :: 'a blinop => 'a blinop
  zero_blinop == zero_class.zero :: 'a blinop
  minus_blinop == minus :: 'a blinop => 'a blinop => 'a blinop
  plus_blinop == plus :: 'a blinop => 'a blinop => 'a blinop
  sgn_blinop == sgn :: 'a blinop => 'a blinop
  norm_blinop == norm :: 'a blinop => real
  scaleR_blinop == scaleR :: real => 'a blinop => 'a blinop
  dist_blinop == dist :: 'a blinop => 'a blinop => real
  uniformity_blinop == uniformity :: ('a blinop * 'a blinop) filter
  open_blinop == open :: 'a blinop set => bool
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
instantiation
  blinop :: ({real_normed_vector,perfect_space}) real_normed_algebra_1
  one_blinop == one_class.one :: 'a blinop
  times_blinop == times :: 'a blinop => 'a blinop => 'a blinop
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.829s elapsed time, 3.247s cpu time, 0.297s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.871s elapsed time, 3.254s cpu time, 0.668s GC time
### theory "Draft.Bounded_Linear_Operator"
### 1.045s elapsed time, 3.905s cpu time, 0.714s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.757s elapsed time, 4.674s cpu time, 0.801s GC time
Loading theory "Draft.Templates" (required by "Draft.Bounded_Linear_OperatorTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.046s elapsed time, 0.061s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Bounded_Linear_OperatorTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.456s elapsed time, 0.505s cpu time, 0.057s GC time
Loading theory "Draft.Bounded_Linear_OperatorTemplates"
val templateLemmas =
   [("Bounded_Linear_Operator.blinop_apply_one_blinop",
     "blinop_apply 1 ?x = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Bounded_Linear_Operator.bounded_linear_apply_blinop",
     "bounded_linear (%a. blinop_apply a ?b)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Bounded_Linear_Operator.blinop_apply_times_blinop",
     "blinop_apply (?f * ?g) ?x = blinop_apply ?f (blinop_apply ?g ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Bounded_Linear_Operator.blinop_eqI",
     "(!!i. blinop_apply ?x i = blinop_apply ?y i) ==> ?x = ?y",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Bounded_Linear_Operator.bounded_bilinear_bounded_uniform_limit_intros",
     "uniform_limit ?X ?g ?l ?F ==>
      uniform_limit ?X (%a b. blinop_apply ?a (?g a b))
       (%a. blinop_apply ?a (?l a)) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_app (template_hole 1, template_var 3), t_empty)),
             template_var 1)
           ))),
    ("Bounded_Linear_Operator.bounded_bilinear_bounded_uniform_limit_intros",
     "uniform_limit ?X ?g ?l ?F ==>
      uniform_limit ?X (%a b. blinop_apply (?g a b) ?b)
       (%a. blinop_apply (?l a) ?b) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_app (template_hole 0, template_var 3), t_empty)),
             template_var 1)
           ))),
    ("Bounded_Linear_Operator.bounded_bilinear_bounded_uniform_limit_intros",
     "[| uniform_limit ?X ?f ?l ?F; uniform_limit ?X ?g ?m ?F;
         bounded (?m ` ?X); bounded (?l ` ?X) |]
      ==> uniform_limit ?X (%a b. blinfun_apply (?g a b) (?f a b))
           (%a. blinfun_apply (?m a) (?l a)) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 5),
                template_app
                 (template_app (template_hole 9, template_var 4),
                  template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 1),
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 0)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 0),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_app (template_hole 0, template_var 4), t_empty)),
             template_var 2)
           ))),
    ("Bounded_Linear_Operator.bounded_bilinear_bounded_uniform_limit_intros",
     "[| uniform_limit ?X ?f ?l ?F; uniform_limit ?X ?g ?m ?F;
         bounded (?m ` ?X); bounded (?l ` ?X) |]
      ==> uniform_limit ?X (%a b. blinop_apply (?g a b) (?f a b))
           (%a. blinop_apply (?m a) (?l a)) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 5),
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 1),
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_var 0)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 0),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 3),
                template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 8, t_empty),
               template_app
                (template_app (template_hole 7, template_var 4), t_empty)),
             template_var 2)
           ))),
    ("Bounded_Linear_Operator.bounded_bilinear_bounded_uniform_limit_intros",
     "[| uniform_limit ?X ?f ?l ?F; uniform_limit ?X ?g ?m ?F;
         bounded (?m ` ?X); bounded (?l ` ?X) |]
      ==> uniform_limit ?X (%a b. blinop_apply (?f a b) (?g a b))
           (%a. blinop_apply (?l a) (?m a)) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 5),
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 1),
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_var 0)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 0),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 3),
                template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, t_empty),
               template_app
                (template_app (template_hole 5, template_var 4), t_empty)),
             template_var 2)
           ))),
    ("Bounded_Linear_Operator.bounded_bilinear_bounded_uniform_limit_intros",
     "[| uniform_limit ?X ?f ?l ?F; uniform_limit ?X ?g ?m ?F;
         bounded (?m ` ?X); bounded (?l ` ?X) |]
      ==> uniform_limit ?X (%a b. blinfun_apply (?f a b) (?g a b))
           (%a. blinfun_apply (?l a) (?m a)) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 5),
                template_app
                 (template_app (template_hole 9, template_var 4),
                  template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 1),
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 0)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 0),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_app (template_hole 0, template_var 4), t_empty)),
             template_var 2)
           )))]:
   (string * thm * template) list
### theory "Draft.Bounded_Linear_OperatorTemplates"
### 0.989s elapsed time, 1.268s cpu time, 0.168s GC time
val it = (): unit
