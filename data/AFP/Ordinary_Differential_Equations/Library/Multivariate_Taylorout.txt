Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Multivariate_TaylorTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.ODE_Auxiliarities" (required by "Draft.Multivariate_TaylorTemplates" via "Draft.Multivariate_Taylor")
Loading theory "HOL-Library.Stream" (required by "Draft.Multivariate_TaylorTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Tree" (required by "Draft.Multivariate_TaylorTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.129s elapsed time, 0.529s cpu time, 0.053s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Multivariate_TaylorTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
instantiation
  prod :: (zero_neq_one, zero_neq_one) zero_neq_one
  one_prod == one_class.one :: 'a * 'b
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
locale no_real_inner
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  left :: "'a tree => 'a tree"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.ODE_Auxiliarities"
### 0.762s elapsed time, 2.989s cpu time, 0.257s GC time
Loading theory "Draft.Multivariate_Taylor" (required by "Draft.Multivariate_TaylorTemplates")
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.881s elapsed time, 3.451s cpu time, 0.331s GC time
### theory "HOL-Library.BigO"
### 0.763s elapsed time, 2.954s cpu time, 0.278s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale second_derivative_within
  fixes f :: "'a => 'b"
    and f' :: "'a => 'a \<Rightarrow>\<^sub>L 'b"
    and f'' :: "'a \<Rightarrow>\<^sub>L 'a \<Rightarrow>\<^sub>L 'b"
    and a :: "'a"
    and G :: "'a set"
  assumes "second_derivative_within f f' f'' a G"
locale second_derivative
  fixes f :: "'a => 'b"
    and f' :: "'a => 'a \<Rightarrow>\<^sub>L 'b"
    and f'' :: "'a \<Rightarrow>\<^sub>L 'a \<Rightarrow>\<^sub>L 'b"
    and a :: "'a"
    and G :: "'a set"
  assumes "second_derivative f f' f'' a G"
Found termination order: "size <*mlex*> {}"
locale second_derivative_within'
  fixes f :: "'a => 'b"
    and f' :: "'a => 'a => 'b"
    and f'' :: "'a => 'a => 'b"
    and a :: "'a"
    and G :: "'a set"
  assumes "second_derivative_within' f f' f'' a G"
locale second_derivative_on_open
  fixes f :: "'a => 'b"
    and f' :: "'a => 'a => 'b"
    and f'' :: "'a => 'a => 'b"
    and a :: "'a"
    and G :: "'a set"
  assumes "second_derivative_on_open f f' f'' a G"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Multivariate_Taylor"
### 0.859s elapsed time, 2.149s cpu time, 0.642s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.945s elapsed time, 5.538s cpu time, 0.941s GC time
Loading theory "Draft.Templates" (required by "Draft.Multivariate_TaylorTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.048s elapsed time, 0.065s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Multivariate_TaylorTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.453s elapsed time, 0.500s cpu time, 0.056s GC time
Loading theory "Draft.Multivariate_TaylorTemplates"
val templateLemmas =
   [("Multivariate_Taylor.multivariate_Taylor_integrable",
     "[| 0 < ?n; !!a x. ?Df a 0 ?H ?H = ?f a;
         !!a i d.
            [| a : {?X--?X + ?H}; i < ?n |]
            ==> ((%a. ?Df a i ?H ?H) has_derivative ?Df a (Suc i) ?H)
                 (at a within ?G);
         {?X--?X + ?H} <= ?G |]
      ==> (%x. ((1 - x) ^ (?n - 1) / fact (?n - 1)) *\<^sub>R
               ?Df (?X + x *\<^sub>R ?H) ?n ?H ?H) integrable_on
          {0..1}",
     template_implication
      ([template_inequation (less_than, template_hole 24, template_var 5),
        template_predicate (template_app (template_hole 23, t_empty)),
        template_predicate (template_app (template_hole 23, t_empty)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 17, template_var 1),
            template_app
             (template_app (template_hole 16, template_var 1),
              template_var 3)),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 11, t_empty),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_hole 6))
           ))),
    ("Multivariate_Taylor.symmetric_second_derivative_aux",
     "[| !!a. a : ?G ==> (?f has_derivative ?f' a) (at a within ?G);
         !!i. ((%x. ?f' x i) has_derivative (%j. ?f'' j i))
               (at ?a within ?G);
         ?i ~= ?j; ?i ~= (0::?'a); ?j ~= (0::?'a); ?a : ?G;
         !!s t.
            [| s : {0..1}; t : {0..1} |]
            ==> ?a + s *\<^sub>R ?i + t *\<^sub>R ?j : ?G |]
      ==> ?f'' ?j ?i = ?f'' ?i ?j",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_negation
         (template_equation (template_var 1, template_var 0)),
        template_negation
         (template_equation (template_var 1, template_hole 8)),
        template_negation
         (template_equation (template_var 0, template_hole 8)),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2),
              template_var 6)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app (template_var 3, template_var 0), template_var 1),
         template_app
          (template_app (template_var 3, template_var 1),
           template_var 0)))),
    ("Multivariate_Taylor.multivariate_Taylor_has_integral",
     "[| 0 < ?n; !!a x. ?Df a 0 ?H ?H = ?f a;
         !!a i d.
            [| a : {?X--?X + ?H}; i < ?n |]
            ==> ((%a. ?Df a i ?H ?H) has_derivative ?Df a (Suc i) ?H)
                 (at a within ?G);
         {?X--?X + ?H} <= ?G |]
      ==> ((%x. ((1 - x) ^ (?n - 1) / fact (?n - 1)) *\<^sub>R
                ?Df (?X + x *\<^sub>R ?H) ?n ?H ?H) has_integral
           ?f (?X + ?H) - (SUM i<?n. (1 / fact i) *\<^sub>R ?Df ?X i ?H ?H))
           {0..1}",
     template_implication
      ([template_inequation (less_than, template_hole 27, template_var 5),
        template_predicate (template_app (template_hole 26, t_empty)),
        template_predicate (template_app (template_hole 26, t_empty)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 20, template_var 1),
            template_app
             (template_app (template_hole 19, template_var 1),
              template_var 3)),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 14, t_empty),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_var 2,
                     template_app
                      (template_app (template_hole 19, template_var 1),
                       template_var 3))),
                 template_app
                  (template_app (template_hole 3, t_empty),
                   template_app (template_hole 2, template_var 5)))),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_hole 9))
           ))),
    ("Multivariate_Taylor.multivariate_Taylor",
     "[| 0 < ?n; !!a x. ?Df a 0 ?H ?H = ?f a;
         !!a i d.
            [| a : {?X--?X + ?H}; i < ?n |]
            ==> ((%a. ?Df a i ?H ?H) has_derivative ?Df a (Suc i) ?H)
                 (at a within ?G);
         {?X--?X + ?H} <= ?G |]
      ==> ?f (?X + ?H) =
          (SUM i<?n. (1 / fact i) *\<^sub>R ?Df ?X i ?H ?H) +
          integral {0..1}
           (%x. ((1 - x) ^ (?n - 1) / fact (?n - 1)) *\<^sub>R
                ?Df (?X + x *\<^sub>R ?H) ?n ?H ?H)",
     template_implication
      ([template_inequation (less_than, template_hole 27, template_var 5),
        template_predicate (template_app (template_hole 26, t_empty)),
        template_predicate (template_app (template_hole 26, t_empty)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 20, template_var 1),
            template_app
             (template_app (template_hole 19, template_var 1),
              template_var 3)),
          template_var 0)],
       template_equation
        (template_app
          (template_var 2,
           template_app
            (template_app (template_hole 19, template_var 1),
             template_var 3)),
         template_app
          (template_app
            (template_hole 14,
             template_app
              (template_app (template_hole 13, t_empty),
               template_app (template_hole 8, template_var 5))),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_hole 10)),
             t_empty))))),
    ("Multivariate_Taylor.uniform_explicit_remainder_Taylor_1",
     "[| !!x. x : ?G ==> (?f has_derivative blinfun_apply (?f' x)) (at x);
         !!x. x : ?G ==> isCont ?f' x; open ?G; ?J ~= {}; compact ?J;
         ?J <= ?G; 0 < ?e;
         !!d R.
            [| 0 < d;
               !!x z. ?f z = ?f x + blinfun_apply (?f' x) (z - x) + R x z;
               !!x y.
                  [| x : ?J; y : ?J; dist x y < d |]
                  ==> norm (R x y) <= ?e * dist x y;
               continuous_on (?G \<times> ?G) (%(a, b). R a b) |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 27, t_empty)),
        template_predicate (template_app (template_hole 27, t_empty)),
        template_predicate
         (template_app (template_hole 19, template_var 5)),
        template_negation
         (template_equation (template_var 2, template_hole 16)),
        template_predicate
         (template_app (template_hole 15, template_var 2)),
        template_inequation (less_equals, template_var 2, template_var 5),
        template_inequation (less_than, template_hole 12, template_var 1),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Multivariate_TaylorTemplates"
### 1.033s elapsed time, 1.301s cpu time, 0.151s GC time
val it = (): unit
