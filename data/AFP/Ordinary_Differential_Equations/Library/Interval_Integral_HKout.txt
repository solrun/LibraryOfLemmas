Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Interval_Integral_HKTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Vector_Derivative_On" (required by "Draft.Interval_Integral_HKTemplates" via "Draft.Interval_Integral_HK")
Loading theory "HOL-Library.Stream" (required by "Draft.Interval_Integral_HKTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Tree" (required by "Draft.Interval_Integral_HKTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.127s elapsed time, 0.510s cpu time, 0.057s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Interval_Integral_HKTemplates" via "Draft.ExtrEqs")
### theory "Draft.Vector_Derivative_On"
### 0.189s elapsed time, 0.763s cpu time, 0.057s GC time
Loading theory "Draft.Interval_Integral_HK" (required by "Draft.Interval_Integral_HKTemplates")
### theory "Draft.Interval_Integral_HK"
### 0.228s elapsed time, 0.888s cpu time, 0.083s GC time
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.875s elapsed time, 3.030s cpu time, 0.276s GC time
### theory "HOL-Library.BigO"
### 0.753s elapsed time, 2.536s cpu time, 0.219s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.900s elapsed time, 4.499s cpu time, 0.880s GC time
Loading theory "Draft.Templates" (required by "Draft.Interval_Integral_HKTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.066s elapsed time, 0.086s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Interval_Integral_HKTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.516s elapsed time, 0.564s cpu time, 0.057s GC time
Loading theory "Draft.Interval_Integral_HKTemplates"
val templateLemmas =
   [("Interval_Integral_HK.ivl_integral_zero",
     "ivl_integral ?a ?a ?f = (0::?'a)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 1),
         template_var 0),
       template_hole 0)),
    ("Interval_Integral_HK.ivl_integral_const",
     "ivl_integral ?a ?b (%x. ?c) = (?b - ?a) *\<^sub>R ?c",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         t_empty),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_var 0))),
    ("Interval_Integral_HK.integral_emptyI",
     "?b < ?a ==> integral {?a..?b} ?f = (0::?'a)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_var 0),
         template_hole 0))),
    ("Interval_Integral_HK.real_Icc_closed_segment",
     "?a <= ?b ==> {?a..?b} = closed_segment ?a ?b",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Interval_Integral_HK.integral_emptyI",
     "?b <= ?a ==> integral {?a..?b} ?f = (0::?'a)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_var 0),
         template_hole 0))),
    ("Interval_Integral_HK.ivl_integral_unique",
     "(?f has_ivl_integral ?y) ?a ?b ==> ivl_integral ?a ?b ?f = ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 3),
         template_var 2))),
    ("Interval_Integral_HK.has_ivl_integral_ivl_integral",
     "(?f integrable_on closed_segment ?a ?b) =
      (?f has_ivl_integral ivl_integral ?a ?b ?f) ?a ?b",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2)),
           template_var 1),
         template_var 0))),
    ("Interval_Integral_HK.indefinite_ivl_integral_continuous",
     "?f integrable_on closed_segment ?a ?b ==>
      continuous_on (closed_segment ?a ?b) (%x. ivl_integral ?a x ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             t_empty)
           ))),
    ("Interval_Integral_HK.indefinite_ivl_integral_continuous",
     "?f integrable_on closed_segment ?a ?b ==>
      continuous_on (closed_segment ?b ?a) (%x. ivl_integral ?a x ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1)),
             t_empty)
           ))),
    ("Interval_Integral_HK.ivl_integral_has_vderiv_on",
     "continuous_on (closed_segment ?a ?b) ?f ==>
      ((%u. ivl_integral ?a u ?f) has_vderiv_on ?f) (closed_segment ?a ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, t_empty), template_var 0),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1))
           ))),
    ("Interval_Integral_HK.fundamental_theorem_of_calculus_ivl_integral",
     "(?f has_vderiv_on ?f') (closed_segment ?a ?b) ==>
      (?f' has_ivl_integral ?f ?b - ?f ?a) ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_var 3, template_var 0)),
                   template_app (template_var 3, template_var 1))),
               template_var 1),
             template_var 0)
           ))),
    ("Interval_Integral_HK.has_integral_nonpos",
     "[| (?f has_integral ?i) ?s; ALL x:?s. ?f x <= 0 |] ==> ?i <= 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0), t_empty)
            )],
       template_inequation (less_equals, template_var 1, template_hole 0))),
    ("Interval_Integral_HK.compact_interval_eq_Inf_Sup",
     "[| is_interval ?A; compact ?A; ?A ~= {} |] ==> ?A = {Inf ?A..Sup ?A}",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 0)),
        template_predicate (template_app (template_hole 6, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_equation
        (template_var 0,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0))))),
    ("Interval_Integral_HK.indefinite_ivl_integral_continuous_subset",
     "[| ?f integrable_on closed_segment ?a ?b; ?c : closed_segment ?a ?b |]
      ==> continuous_on (closed_segment ?a ?b) (%x. ivl_integral ?c x ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1)),
             t_empty)
           ))),
    ("Interval_Integral_HK.ivl_integral_has_vderiv_on_subset_segment",
     "[| continuous_on (closed_segment ?a ?b) ?f;
         ?c : closed_segment ?a ?b |]
      ==> ((%u. ivl_integral ?c u ?f) has_vderiv_on ?f)
           (closed_segment ?a ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, t_empty), template_var 1),
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2))
           ))),
    ("Interval_Integral_HK.ivl_integral_has_vderiv_on_compact_interval",
     "[| continuous_on ?A ?f; ?c : ?A; is_interval ?A; compact ?A |]
      ==> ((%u. ivl_integral ?c u ?f) has_vderiv_on ?f) ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, t_empty), template_var 1),
             template_var 2)
           ))),
    ("Interval_Integral_HK.ivl_integral_has_vector_derivative",
     "[| continuous_on (closed_segment ?a ?b) ?f;
         ?x : closed_segment ?a ?b |]
      ==> ((%u. ivl_integral ?a u ?f) has_vector_derivative ?f ?x)
           (at ?x within closed_segment ?a ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app (template_var 1, template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 2)))
           ))),
    ("Interval_Integral_HK.ivl_integral_diff",
     "[| ?f integrable_on closed_segment ?s ?t;
         ?g integrable_on closed_segment ?s ?t |]
      ==> ivl_integral ?s ?t (%x. ?f x - ?g x) =
          ivl_integral ?s ?t ?f - ivl_integral ?s ?t ?g",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           t_empty),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 3)),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0))))),
    ("Interval_Integral_HK.ivl_integral_has_vector_derivative_subset",
     "[| continuous_on (closed_segment ?a ?b) ?f; ?x : closed_segment ?a ?b;
         ?c : closed_segment ?a ?b |]
      ==> ((%u. ivl_integral ?c u ?f) has_vector_derivative ?f ?x)
           (at ?x within closed_segment ?a ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app (template_var 2, template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_app
                (template_app (template_hole 4, template_var 4),
                 template_var 3)))
           ))),
    ("Interval_Integral_HK.ivl_integral_has_vector_derivative_compact_interval",
     "[| continuous_on ?A ?f; is_interval ?A; compact ?A; ?x : ?A;
         ?c : ?A |]
      ==> ((%u. ivl_integral ?c u ?f) has_vector_derivative ?f ?x)
           (at ?x within ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate (template_app (template_hole 4, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app (template_var 2, template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3))
           ))),
    ("Interval_Integral_HK.ivl_integral_bound",
     "[| continuous_on (closed_segment ?a ?b) ?f;
         !!t. t : closed_segment ?a ?b ==> norm (?f t) <= ?B |]
      ==> norm (ivl_integral ?a ?b ?f) <= ?B * \<bar>?b - ?a\<bar>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 3)))))),
    ("Interval_Integral_HK.ivl_integral_combine",
     "[| ?f integrable_on closed_segment ?a ?b;
         ?f integrable_on closed_segment ?b ?c;
         ?f integrable_on closed_segment ?a ?c |]
      ==> ivl_integral ?a ?b ?f + ivl_integral ?b ?c ?f =
          ivl_integral ?a ?c ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 3)),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0),
           template_var 3)))),
    ("Interval_Integral_HK.ivl_integral_minus_sets'",
     "[| ?f integrable_on closed_segment ?a ?c;
         ?f integrable_on closed_segment ?b ?c;
         ?f integrable_on closed_segment ?a ?b |]
      ==> ivl_integral ?a ?c ?f - ivl_integral ?b ?c ?f =
          ivl_integral ?a ?b ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 0),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 3)),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0),
           template_var 3)))),
    ("Interval_Integral_HK.ivl_integral_minus_sets",
     "[| ?f integrable_on closed_segment ?c ?a;
         ?f integrable_on closed_segment ?c ?b;
         ?f integrable_on closed_segment ?a ?b |]
      ==> ivl_integral ?c ?a ?f - ivl_integral ?c ?b ?f =
          ivl_integral ?b ?a ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 3)),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1),
           template_var 3)))),
    ("Interval_Integral_HK.ivl_integral_cong",
     "[| !!x. x : closed_segment ?a ?b ==> ?g x = ?f x; ?a = ?c; ?b = ?d |]
      ==> ivl_integral ?a ?b ?f = ivl_integral ?c ?d ?g",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_equation (template_var 5, template_var 1),
        template_equation (template_var 4, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 5),
             template_var 4),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 3)))),
    ("Interval_Integral_HK.ivl_integral_norm_bound_ivl_integral",
     "[| ?f integrable_on closed_segment ?a ?b;
         ?g integrable_on closed_segment ?a ?b;
         !!x. x : closed_segment ?a ?b ==> norm (?f x) <= ?g x |]
      ==> norm (ivl_integral ?a ?b ?f)
          <= \<bar>ivl_integral ?a ?b ?g\<bar>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_var 3)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))))),
    ("Interval_Integral_HK.ivl_integral_norm_bound_integral",
     "[| ?f integrable_on closed_segment ?a ?b;
         ?g integrable_on closed_segment ?a ?b;
         !!x. x : closed_segment ?a ?b ==> norm (?f x) <= ?g x |]
      ==> norm (ivl_integral ?a ?b ?f)
          <= integral (closed_segment ?a ?b) ?g",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 3)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 7, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Interval_Integral_HK.has_ivl_integral_nonneg",
     "[| (?f has_ivl_integral ?i) ?a ?b;
         !!x. [| ?a <= x; x <= ?b |] ==> 0 <= ?f x;
         !!x. [| ?b <= x; x <= ?a |] ==> ?f x <= 0 |]
      ==> 0 <= ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_inequation (less_equals, template_hole 0, template_var 2))),
    ("Interval_Integral_HK.ivl_integral_nonneg",
     "[| ?f integrable_on closed_segment ?a ?b;
         !!x. [| ?a <= x; x <= ?b |] ==> 0 <= ?f x;
         !!x. [| ?b <= x; x <= ?a |] ==> ?f x <= 0 |]
      ==> 0 <= ivl_integral ?a ?b ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            ),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_inequation
        (less_equals, template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2)))),
    ("Interval_Integral_HK.norm_ivl_integral_le",
     "[| ?f integrable_on closed_segment ?a ?b;
         ?g integrable_on closed_segment ?a ?b;
         !!x. x : closed_segment ?a ?b ==> ?f x <= ?g x;
         !!x. x : closed_segment ?a ?b ==> 0 <= ?f x |]
      ==> \<bar>ivl_integral ?a ?b ?f\<bar>
          <= \<bar>ivl_integral ?a ?b ?g\<bar>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 3)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))))),
    ("Interval_Integral_HK.integral_equation_swap_initial_value",
     "[| !!t. t : closed_segment ?t0.0 ?t1.0 ==>
              ?x t = ?x ?t0.0 + ivl_integral ?t0.0 t (%t. ?f t (?x t));
         ?t : closed_segment ?t0.0 ?t1.0;
         (%t. ?f t (?x t)) integrable_on closed_segment ?t0.0 ?t1.0 |]
      ==> ?x ?t = ?x ?t1.0 + ivl_integral ?t1.0 ?t (%t. ?f t (?x t))",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, t_empty),
              template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3))
            )],
       template_equation
        (template_app (template_var 2, template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_var 2, template_var 3)),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0),
             t_empty)))))]:
   (string * thm * template) list
### theory "Draft.Interval_Integral_HKTemplates"
### 1.043s elapsed time, 1.347s cpu time, 0.203s GC time
val it = (): unit
