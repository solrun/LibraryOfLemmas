Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Linear_ODETemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Bounded_Linear_Operator" (required by "Draft.Linear_ODETemplates" via "Draft.Linear_ODE" via "Draft.Flow")
Loading theory "HOL-Library.Tree" (required by "Draft.Linear_ODETemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "HOL-Library.Stream" (required by "Draft.Linear_ODETemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.139s elapsed time, 0.563s cpu time, 0.060s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Linear_ODETemplates" via "Draft.ExtrEqs")
### Generation of a parametrized correspondence relation failed.
### Reason:  No relator for the type "Bounded_Linear_Function.blinfun" found.
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
instantiation
  blinop :: (real_normed_vector) real_normed_vector
  uminus_blinop == uminus :: 'a blinop => 'a blinop
  zero_blinop == zero_class.zero :: 'a blinop
  minus_blinop == minus :: 'a blinop => 'a blinop => 'a blinop
  plus_blinop == plus :: 'a blinop => 'a blinop => 'a blinop
  sgn_blinop == sgn :: 'a blinop => 'a blinop
  norm_blinop == norm :: 'a blinop => real
  scaleR_blinop == scaleR :: real => 'a blinop => 'a blinop
  dist_blinop == dist :: 'a blinop => 'a blinop => real
  uniformity_blinop == uniformity :: ('a blinop * 'a blinop) filter
  open_blinop == open :: 'a blinop set => bool
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
instantiation
  blinop :: ({real_normed_vector,perfect_space}) real_normed_algebra_1
  one_blinop == one_class.one :: 'a blinop
  times_blinop == times :: 'a blinop => 'a blinop => 'a blinop
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.860s elapsed time, 3.357s cpu time, 0.353s GC time
Loading theory "Draft.Vector_Derivative_On" (required by "Draft.Linear_ODETemplates" via "Draft.Linear_ODE" via "Draft.Flow" via "Draft.Picard_Lindeloef_Qualitative" via "Draft.Initial_Value_Problem" via "Draft.Interval_Integral_HK")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.920s elapsed time, 3.470s cpu time, 0.826s GC time
Loading theory "Draft.ODE_Auxiliarities" (required by "Draft.Linear_ODETemplates" via "Draft.Linear_ODE" via "Draft.Flow" via "Draft.Picard_Lindeloef_Qualitative" via "Draft.Initial_Value_Problem")
Found termination order: "size <*mlex*> {}"
### theory "Draft.Bounded_Linear_Operator"
### 1.133s elapsed time, 4.331s cpu time, 0.885s GC time
Found termination order: "size <*mlex*> {}"
### theory "Draft.Vector_Derivative_On"
### 0.370s elapsed time, 1.242s cpu time, 0.567s GC time
Loading theory "Draft.Gronwall" (required by "Draft.Linear_ODETemplates" via "Draft.Linear_ODE" via "Draft.Flow" via "Draft.Picard_Lindeloef_Qualitative" via "Draft.Initial_Value_Problem")
Loading theory "Draft.Interval_Integral_HK" (required by "Draft.Linear_ODETemplates" via "Draft.Linear_ODE" via "Draft.Flow" via "Draft.Picard_Lindeloef_Qualitative" via "Draft.Initial_Value_Problem")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Gronwall"
### 0.180s elapsed time, 0.698s cpu time, 0.073s GC time
Found termination order: "size <*mlex*> {}"
### theory "Draft.Interval_Integral_HK"
### 0.244s elapsed time, 0.889s cpu time, 0.073s GC time
instantiation
  prod :: (zero_neq_one, zero_neq_one) zero_neq_one
  one_prod == one_class.one :: 'a * 'b
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale no_real_inner
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.ODE_Auxiliarities"
### 0.766s elapsed time, 2.193s cpu time, 0.171s GC time
Loading theory "Draft.Initial_Value_Problem" (required by "Draft.Linear_ODETemplates" via "Draft.Linear_ODE" via "Draft.Flow" via "Draft.Picard_Lindeloef_Qualitative")
Loading theory "Draft.Multivariate_Taylor" (required by "Draft.Linear_ODETemplates" via "Draft.Linear_ODE" via "Draft.Flow")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.077s elapsed time, 6.988s cpu time, 1.179s GC time
Loading theory "Draft.Templates" (required by "Draft.Linear_ODETemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.060s elapsed time, 0.205s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Linear_ODETemplates")
locale second_derivative_within
  fixes f :: "'a => 'b"
    and f' :: "'a => 'a \<Rightarrow>\<^sub>L 'b"
    and f'' :: "'a \<Rightarrow>\<^sub>L 'a \<Rightarrow>\<^sub>L 'b"
    and a :: "'a"
    and G :: "'a set"
  assumes "second_derivative_within f f' f'' a G"
locale second_derivative
  fixes f :: "'a => 'b"
    and f' :: "'a => 'a \<Rightarrow>\<^sub>L 'b"
    and f'' :: "'a \<Rightarrow>\<^sub>L 'a \<Rightarrow>\<^sub>L 'b"
    and a :: "'a"
    and G :: "'a set"
  assumes "second_derivative f f' f'' a G"
locale second_derivative_within'
  fixes f :: "'a => 'b"
    and f' :: "'a => 'a => 'b"
    and f'' :: "'a => 'a => 'b"
    and a :: "'a"
    and G :: "'a set"
  assumes "second_derivative_within' f f' f'' a G"
locale second_derivative_on_open
  fixes f :: "'a => 'b"
    and f' :: "'a => 'a => 'b"
    and f'' :: "'a => 'a => 'b"
    and a :: "'a"
    and G :: "'a set"
  assumes "second_derivative_on_open f f' f'' a G"
### theory "Draft.Multivariate_Taylor"
### 0.663s elapsed time, 2.030s cpu time, 0.238s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.637s elapsed time, 1.675s cpu time, 0.165s GC time
locale continuous_rhs
  fixes T :: "'a set"
    and X :: "'b set"
    and f :: "'a => 'b => 'c"
  assumes "continuous_rhs T X f"
locale global_lipschitz
  fixes T :: "'a set"
    and X :: "'b set"
    and f :: "'a => 'b => 'c"
    and L :: "real"
  assumes "global_lipschitz T X f L"
locale closed_domain
  fixes X :: "'a set"
  assumes "closed_domain X"
locale interval
  fixes T :: "real set"
  assumes "interval T"
locale nonempty_set
  fixes T :: "'a set"
  assumes "nonempty_set T"
locale compact_interval
  fixes T :: "real set"
  assumes "compact_interval T"
locale self_mapping
  fixes T :: "real set"
    and t0 :: "real"
    and x0 :: "'a"
    and f :: "real => 'a => 'a"
    and X :: "'a set"
  assumes "self_mapping T t0 x0 f X"
locale unique_on_closed
  fixes t0 :: "real"
    and T :: "real set"
    and x0 :: "'a"
    and f :: "real => 'a => 'a"
    and X :: "'a set"
    and L :: "real"
  assumes "unique_on_closed t0 T x0 f X L"
### Ignoring duplicate introduction (intro)
### [| tmin <= ?t; ?t <= tmax |] ==> ?t : T
### Ignoring duplicate rewrite rule:
### [| tmin <= ?t1; ?t1 <= tmax |] ==> ?t1 : T == True
locale unique_on_bounded_closed
  fixes t0 :: "real"
    and T :: "real set"
    and x0 :: "'a"
    and f :: "real => 'a => 'a"
    and X :: "'a set"
    and L :: "real"
  assumes "unique_on_bounded_closed t0 T x0 f X L"
locale unique_on_closed
  fixes t0 :: "real"
    and T :: "real set"
    and x0 :: "'a"
    and f :: "real => 'a => 'a"
    and X :: "'a set"
    and L :: "real"
  assumes "unique_on_closed t0 T x0 f X L"
consts
  psolution :: "nat => real => 'a"
locale unique_on_strip
  fixes t0 :: "real"
    and T :: "real set"
    and f :: "real => 'a => 'a"
    and L :: "real"
  assumes "unique_on_strip t0 T f L"
locale solution_in_cylinder
  fixes t0 :: "real"
    and T :: "real set"
    and x0 :: "'a"
    and b :: "real"
    and f :: "real => 'a => 'a"
    and X :: "'a set"
    and B :: "real"
  assumes "solution_in_cylinder t0 T x0 b f B"
  defines "X == cball x0 b"
locale unique_on_cylinder
  fixes t0 :: "real"
    and T :: "real set"
    and x0 :: "'a"
    and b :: "real"
    and X :: "'a set"
    and f :: "real => 'a => 'a"
    and B :: "real"
    and L :: "real"
  assumes "unique_on_cylinder t0 T x0 b f B L"
  defines "X == cball x0 b"
locale derivative_on_prod
  fixes T :: "real set"
    and X :: "'a set"
    and f :: "real => 'a => 'a"
    and f' :: "real * 'a => real * 'a => 'a"
  assumes "derivative_on_prod T X f f'"
### theory "Draft.Initial_Value_Problem"
### 1.627s elapsed time, 3.290s cpu time, 0.340s GC time
Loading theory "Draft.Picard_Lindeloef_Qualitative" (required by "Draft.Linear_ODETemplates" via "Draft.Linear_ODE" via "Draft.Flow")
locale ll_on_open
  fixes T :: "real set"
    and f :: "real => 'a => 'a"
    and X :: "'a set"
  assumes "ll_on_open T f X"
locale ll_on_open_it
  fixes T :: "real set"
    and f :: "real => 'a => 'a"
    and X :: "'a set"
    and t0 :: "real"
  assumes "ll_on_open_it T f X"
locale ll_on_open
  fixes T :: "real set"
    and f :: "real => 'a => 'a"
    and X :: "'a set"
  assumes "ll_on_open T f X"
locale ll_on_open_it
  fixes T :: "real set"
    and f :: "real => 'a => 'a"
    and X :: "'a set"
    and t0 :: "real"
  assumes "ll_on_open_it T f X"
### theory "Draft.Picard_Lindeloef_Qualitative"
### 0.336s elapsed time, 0.365s cpu time, 0.043s GC time
Loading theory "Draft.Flow" (required by "Draft.Linear_ODETemplates" via "Draft.Linear_ODE")
locale ll_on_open_it
  fixes T :: "real set"
    and f :: "real => 'a => 'a"
    and X :: "'a set"
    and t0 :: "real"
  assumes "ll_on_open_it T f X"
[| ?A ~= {}; compact ?A; open ?B; ?A <= ?B;
   !!e. [| 0 < e; {x. infdist x ?A <= e} <= ?B |] ==> ?thesis |]
==> ?thesis
locale two_ll_on_open
  fixes F :: "real => 'a => 'a"
    and T1 :: "real set"
    and G :: "real => 'a => 'a"
    and T2 :: "real set"
    and X :: "'a set"
    and J :: "real set"
    and x0 :: "'a"
    and e :: "real"
    and K :: "real"
  assumes "two_ll_on_open F T1 G T2 X J x0 e K"
locale auto_ll_on_open
  fixes f :: "'a => 'a"
    and X :: "'a set"
  assumes "auto_ll_on_open f X"
locale compact_continuously_diff
  fixes T :: "real set"
    and X :: "'a set"
    and f :: "real => 'a => 'a"
    and f' :: "'a => 'a \<Rightarrow>\<^sub>L 'a"
  assumes "compact_continuously_diff T X f f'"
locale unique_on_compact_continuously_diff
  fixes T :: "real set"
    and t0 :: "real"
    and x0 :: "'a"
    and f :: "real => 'a => 'a"
    and X :: "'a set"
    and f' :: "'a => 'a \<Rightarrow>\<^sub>L 'a"
  assumes "unique_on_compact_continuously_diff T t0 x0 f X f'"
locale c1_on_open
  fixes f :: "'a => 'a"
    and f' :: "'a => 'a \<Rightarrow>\<^sub>L 'a"
    and X :: "'a set"
  assumes "c1_on_open f f' X"
locale c1_on_open_euclidean
  fixes f :: "'a => 'a"
    and f' :: "'a => 'a \<Rightarrow>\<^sub>L 'a"
    and X :: "'a set"
  assumes "c1_on_open_euclidean f f' X"
### theory "Draft.Flow"
### 2.284s elapsed time, 2.923s cpu time, 0.902s GC time
Loading theory "Draft.Linear_ODE" (required by "Draft.Linear_ODETemplates")
### theory "Draft.Linear_ODE"
### 0.062s elapsed time, 0.063s cpu time, 0.000s GC time
Loading theory "Draft.Linear_ODETemplates"
val templateLemmas =
   [("Linear_ODE.linode_solution_solves_ode",
     "linode_solution ?A ?t0.0 ?x0.0 ?t0.0 = ?x0.0",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0),
         template_var 1),
       template_var 0)),
    ("Linear_ODE.linode_solution_solves_ode",
     "(linode_solution ?A ?t0.0 ?x0.0 solves_ode (%x. blinop_apply ?A)) UNIV
       UNIV",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 1),
                   template_var 0)),
               t_empty),
             template_hole 1),
           template_hole 0)
         )),
    ("Linear_ODE.exp_scaleR_has_derivative_right",
     "(?f has_derivative ?f') (at ?x within ?s) ==>
      ((%x. exp (?f x *\<^sub>R ?A)) has_derivative
       (%h. ?f' h *\<^sub>R (exp (?f ?x *\<^sub>R ?A) * ?A)))
       (at ?x within ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty), t_empty),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1))
           )))]:
   (string * thm * template) list
### theory "Draft.Linear_ODETemplates"
### 1.160s elapsed time, 1.443s cpu time, 0.147s GC time
val it = (): unit
