Loading theory "HOL-Library.Stream" (required by "Draft.GronwallTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.GronwallTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Vector_Derivative_On" (required by "Draft.GronwallTemplates" via "Draft.Gronwall")
Loading theory "HOL-Library.Tree" (required by "Draft.GronwallTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.120s elapsed time, 0.496s cpu time, 0.051s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.GronwallTemplates" via "Draft.ExtrEqs")
### theory "Draft.Vector_Derivative_On"
### 0.195s elapsed time, 0.794s cpu time, 0.051s GC time
Loading theory "Draft.Gronwall" (required by "Draft.GronwallTemplates")
### theory "Draft.Gronwall"
### 0.150s elapsed time, 0.571s cpu time, 0.073s GC time
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.802s elapsed time, 2.751s cpu time, 0.243s GC time
### theory "HOL-Library.BigO"
### 0.706s elapsed time, 2.295s cpu time, 0.193s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.779s elapsed time, 4.138s cpu time, 0.791s GC time
Loading theory "Draft.Templates" (required by "Draft.GronwallTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.061s elapsed time, 0.075s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.GronwallTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.529s elapsed time, 0.583s cpu time, 0.062s GC time
Loading theory "Draft.GronwallTemplates"
val templateLemmas =
   [("Gronwall.derivative_quotient_bound_left",
     "[| (?g has_vderiv_on ?g') {?a..?b};
         !!t. t : {?a..?b} ==> ?K <= ?g' t / ?g t;
         continuous_on {?a..?b} ?g'; !!t. t : {?a..?b} ==> 0 < ?g t;
         ?t : {?a..?b} |]
      ==> ?g ?t <= ?g ?b * exp (?K * (?t - ?b))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 5),
                template_var 4),
              template_app
               (template_app (template_hole 10, template_var 3),
                template_var 2))
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 10, template_var 3),
                  template_var 2)),
              template_var 4)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app
               (template_app (template_hole 10, template_var 3),
                template_var 2))
            )],
       template_inequation
        (less_equals, template_app (template_var 5, template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_var 5, template_var 2)),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2))))))),
    ("Gronwall.derivative_quotient_bound",
     "[| (?g has_vderiv_on ?g') {?a..?b};
         !!t. t : {?a..?b} ==> ?g' t / ?g t <= ?K;
         continuous_on {?a..?b} ?g'; !!t. t : {?a..?b} ==> 0 < ?g t;
         ?t : {?a..?b} |]
      ==> ?g ?t <= ?g ?a * exp (?K * (?t - ?a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 5),
                template_var 4),
              template_app
               (template_app (template_hole 10, template_var 3),
                template_var 2))
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 10, template_var 3),
                  template_var 2)),
              template_var 4)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app
               (template_app (template_hole 10, template_var 3),
                template_var 2))
            )],
       template_inequation
        (less_equals, template_app (template_var 5, template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_var 5, template_var 3)),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3))))))),
    ("Gronwall.gronwall_general_segment",
     "[| !!t. t : closed_segment ?a ?b ==>
              ?g t <= ?C + ?K * integral (closed_segment ?a t) ?g;
         continuous_on (closed_segment ?a ?b) ?g;
         !!t. t : closed_segment ?a ?b ==> 0 <= ?g t; 0 < ?C; 0 < ?K;
         ?t : closed_segment ?a ?b |]
      ==> ?g ?t <= ?C * exp (?K * \<bar>?t - ?a\<bar>)",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 10, template_var 5),
                  template_var 4)),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_inequation (less_than, template_hole 4, template_var 2),
        template_inequation (less_than, template_hole 4, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 0),
              template_app
               (template_app (template_hole 10, template_var 5),
                template_var 4))
            )],
       template_inequation
        (less_equals, template_app (template_var 3, template_var 0),
         template_app
          (template_app (template_hole 7, template_var 2),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 7, template_var 1),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 5)))))))),
    ("Gronwall.gronwall_general",
     "[| !!t. t : {?a..?b} ==> ?g t <= ?C + ?K * integral {?a..t} ?g;
         continuous_on {?a..?b} ?g; !!t. t : {?a..?b} ==> 0 <= ?g t; 0 < ?C;
         0 < ?K; ?t : {?a..?b} |]
      ==> ?g ?t <= ?C * exp (?K * (?t - ?a))",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 9, template_var 5),
                  template_var 4)),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_inequation (less_than, template_hole 3, template_var 2),
        template_inequation (less_than, template_hole 3, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_app
               (template_app (template_hole 9, template_var 5),
                template_var 4))
            )],
       template_inequation
        (less_equals, template_app (template_var 3, template_var 0),
         template_app
          (template_app (template_hole 6, template_var 2),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 6, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 5))))))),
    ("Gronwall.gronwall_general_left",
     "[| !!t. t : {?a..?b} ==> ?g t <= ?C + ?K * integral {t..?b} ?g;
         continuous_on {?a..?b} ?g; !!t. t : {?a..?b} ==> 0 <= ?g t; 0 < ?C;
         0 < ?K; ?t : {?a..?b} |]
      ==> ?g ?t <= ?C * exp (- ?K * (?t - ?b))",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 10, template_var 5),
                  template_var 4)),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_inequation (less_than, template_hole 4, template_var 2),
        template_inequation (less_than, template_hole 4, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 0),
              template_app
               (template_app (template_hole 10, template_var 5),
                template_var 4))
            )],
       template_inequation
        (less_equals, template_app (template_var 3, template_var 0),
         template_app
          (template_app (template_hole 7, template_var 2),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 7,
                 template_app (template_hole 1, template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 4))))))),
    ("Gronwall.gronwall_more_general_segment",
     "[| !!t. t : closed_segment ?a ?b ==>
              ?g t <= ?C + ?K * integral (closed_segment ?c t) ?g;
         continuous_on (closed_segment ?a ?b) ?g;
         !!t. t : closed_segment ?a ?b ==> 0 <= ?g t; 0 < ?C; 0 < ?K;
         ?t : closed_segment ?a ?b; ?c : closed_segment ?a ?b |]
      ==> ?g ?t <= ?C * exp (?K * \<bar>?t - ?c\<bar>)",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 10, template_var 6),
                  template_var 5)),
              template_var 4)
            ),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_inequation (less_than, template_hole 4, template_var 3),
        template_inequation (less_than, template_hole 4, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 0),
              template_app
               (template_app (template_hole 10, template_var 6),
                template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_app
               (template_app (template_hole 10, template_var 6),
                template_var 5))
            )],
       template_inequation
        (less_equals, template_app (template_var 4, template_var 0),
         template_app
          (template_app (template_hole 7, template_var 3),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 7, template_var 2),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1)))))))),
    ("Gronwall.gronwall",
     "[| !!t. [| 0 <= t; t <= ?a |]
              ==> ?g t <= ?C + ?K * integral {0..t} ?g;
         continuous_on {0..?a} ?g; !!t. [| 0 <= t; t <= ?a |] ==> 0 <= ?g t;
         0 < ?C; 0 < ?K; 0 <= ?t; ?t <= ?a |]
      ==> ?g ?t <= ?C * exp (?K * ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 3, template_hole 7),
                  template_var 4)),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_inequation (less_than, template_hole 7, template_var 2),
        template_inequation (less_than, template_hole 7, template_var 1),
        template_inequation (less_equals, template_hole 7, template_var 0),
        template_inequation (less_equals, template_var 0, template_var 4)],
       template_inequation
        (less_equals, template_app (template_var 3, template_var 0),
         template_app
          (template_app (template_hole 5, template_var 2),
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0)))))),
    ("Gronwall.gronwall_left",
     "[| !!t. [| ?a <= t; t <= 0 |]
              ==> ?g t <= ?C + ?K * integral {t..0} ?g;
         continuous_on {?a..0} ?g; !!t. [| ?a <= t; t <= 0 |] ==> 0 <= ?g t;
         0 < ?C; 0 < ?K; ?a <= ?t; ?t <= 0 |]
      ==> ?g ?t <= ?C * exp (- ?K * ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_hole 8)),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_inequation (less_than, template_hole 8, template_var 2),
        template_inequation (less_than, template_hole 8, template_var 1),
        template_inequation (less_equals, template_var 4, template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 8)],
       template_inequation
        (less_equals, template_app (template_var 3, template_var 0),
         template_app
          (template_app (template_hole 6, template_var 2),
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 0, template_var 1)),
               template_var 0))))))]:
   (string * thm * template) list
### theory "Draft.GronwallTemplates"
### 1.037s elapsed time, 1.330s cpu time, 0.159s GC time
val it = (): unit
