Loading theory "Draft.ODE_Auxiliarities" (required by "Draft.ConesTemplates" via "Draft.Cones")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ConesTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.ConesTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "HOL-Library.Stream" (required by "Draft.ConesTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.149s elapsed time, 0.598s cpu time, 0.055s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ConesTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
instantiation
  prod :: (zero_neq_one, zero_neq_one) zero_neq_one
  one_prod == one_class.one :: 'a * 'b
consts
  snth :: "'a stream => nat => 'a"
locale no_real_inner
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### theory "Draft.ODE_Auxiliarities"
### 0.803s elapsed time, 3.150s cpu time, 0.276s GC time
Loading theory "Draft.Cones" (required by "Draft.ConesTemplates")
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.865s elapsed time, 3.371s cpu time, 0.347s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.736s elapsed time, 2.843s cpu time, 0.292s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Cones"
### 0.974s elapsed time, 2.312s cpu time, 0.717s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.978s elapsed time, 5.706s cpu time, 0.993s GC time
Loading theory "Draft.Templates" (required by "Draft.ConesTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.071s elapsed time, 0.132s cpu time, 0.066s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ConesTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.468s elapsed time, 0.477s cpu time, 0.000s GC time
Loading theory "Draft.ConesTemplates"
val templateLemmas =
   [("Cones.cone_conefield", "cone (conefield ?x ?y)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Cones.convex_conefield", "convex (conefield ?x ?y)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Cones.conefield_commute", "conefield ?x ?y = conefield ?y ?x",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Cones.conesegment_commute", "conesegment ?a ?b = conesegment ?b ?a",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Cones.gt_one_absI", "\<bar>?k\<bar> < 1 ==> ?k < 1",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 1, template_var 0),
          template_hole 0)],
       template_inequation (less_than, template_var 0, template_hole 0))),
    ("Cones.gt_minus_one_absI", "\<bar>?k\<bar> < 1 ==> - 1 < ?k",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 2, template_var 0),
          template_hole 1)],
       template_inequation
        (less_than, template_app (template_hole 0, template_hole 1),
         template_var 0))),
    ("Cones.inner_eq_vangle",
     "?u \<bullet> ?v = cos (vangle ?u ?v) * (norm ?u * norm ?v)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Cones.vangle_scaleR",
     "0 < ?k ==> vangle ?w (?k *\<^sub>R ?v) = vangle ?w ?v",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Cones.vangle_scaleR",
     "0 < ?k ==> vangle (?k *\<^sub>R ?v) ?w = vangle ?v ?w",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Cones.conefield_scaleR",
     "0 < ?r ==> conefield (?r *\<^sub>R ?x) ?y = conefield ?x ?y",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Cones.vangle_eq_zeroD",
     "vangle ?u ?v = 0 ==> EX k. ?v = k *\<^sub>R ?u",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 1), template_var 0),
          template_hole 3)],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Cones.bounded_linear_image_conefield",
     "bounded_linear ?F ==>
      ?F ` conefield ?u ?v = conefield (?F ?u) (?F ?v)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_var 2, template_var 1)),
           template_app (template_var 2, template_var 0))))),
    ("Cones.bounded_linear_image_conesegment",
     "bounded_linear ?F ==>
      ?F ` conesegment ?u ?v = conesegment (?F ?u) (?F ?v)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_var 2, template_var 1)),
           template_app (template_var 2, template_var 0))))),
    ("Cones.bounded_linear_image_cone_hull",
     "bounded_linear ?F ==> ?F ` (cone hull ?T) = cone hull ?F ` ?T",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0))))),
    ("Cones.bounded_linear_image_conemem",
     "bounded_linear ?F ==>
      ?F (conemem ?u ?v ?t) = conemem (?F ?u) (?F ?v) ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 3))],
       template_equation
        (template_app
          (template_var 3,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app (template_var 3, template_var 2)),
             template_app (template_var 3, template_var 1)),
           template_var 0)))),
    ("Cones.ortho_imp_angle_pi_half",
     "?u \<bullet> ?v = 0 ==> vangle ?u ?v = pi / 2",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 1), template_var 0),
          template_hole 6)],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Cones.vangle_le_pi2",
     "0 <= ?u \<bullet> ?v ==> vangle ?u ?v <= pi / 2",
     template_implication
      ([template_inequation
         (less_equals, template_hole 7,
          template_app
           (template_app (template_hole 6, template_var 1),
            template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Cones.arccos_eq_zero_iff",
     "[| - 1 <= ?x; ?x <= 1 |] ==> (arccos ?x = 0) = (?x = 1)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 5, template_hole 4),
          template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 4)],
       template_bimplication
        (template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0),
         template_equation (template_var 0, template_hole 4)))),
    ("Cones.arcsin_eq_zero_iff",
     "[| - 1 <= ?x; ?x <= 1 |] ==> (arcsin ?x = 0) = (?x = 0)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 5, template_hole 4),
          template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 4)],
       template_bimplication
        (template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0),
         template_equation (template_var 0, template_hole 0)))),
    ("Cones.conefield_scaleRI",
     "[| ?v : conefield ?x ?y; 0 < ?r |]
      ==> ?v : conefield (?r *\<^sub>R ?x) ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_inequation (less_than, template_hole 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 3),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2)),
               template_var 1))
           ))),
    ("Cones.conefield_scaleRD",
     "[| ?v : conefield (?r *\<^sub>R ?x) ?y; 0 < ?r |]
      ==> ?v : conefield ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 2),
                    template_var 1)),
                template_var 0))
            ),
        template_inequation (less_than, template_hole 0, template_var 2)],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 3),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))
           ))),
    ("Cones.cos_vangle_eq_zero_iff_vangle",
     "(cos (vangle ?u ?v) = 0) =
      (?u = (0::?'a) | ?v = (0::?'a) | ?u \<bullet> ?v = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_hole 4),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)),
                 template_hole 4)))
           ))),
    ("Cones.less_one_multI",
     "[| ?e <= 1; 0 < ?x; ?x < 1 |] ==> ?e * ?x < 1",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_hole 3),
        template_inequation (less_than, template_hole 1, template_var 0),
        template_inequation (less_than, template_var 0, template_hole 3)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_hole 3))),
    ("Cones.Cauchy_Schwarz_eq2_iff",
     "(\<bar>?x \<bullet> ?y\<bar> = norm ?x * norm ?y) =
      ((EX k. ?x = k *\<^sub>R ?y) | ?y = (0::?'a))",
     template_bimplication
      (template_equation
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 1)),
           template_app (template_hole 5, template_var 0))),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4, template_app (template_hole 3, t_empty)),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 0))
           ))),
    ("Cones.abs_impossible",
     "[| \<bar>?y1.0\<bar> < ?x1.0; \<bar>?y2.0\<bar> < ?x2.0 |]
      ==> ?x1.0 * ?x2.0 + ?y1.0 * ?y2.0 ~= 0",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 5, template_var 3),
          template_var 2),
        template_inequation
         (less_than, template_app (template_hole 5, template_var 1),
          template_var 0)],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0)),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_hole 0)
           ))),
    ("Cones.vangle_scaleR_self",
     "vangle ?v (?k *\<^sub>R ?v) =
      (if ?k = 0 | ?v = (0::?'a) then pi / 2
       else if 0 < ?k then 0 else pi)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 1),
              template_app
               (template_app (template_hole 11, template_var 0),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app (template_hole 13, template_var 0),
                       template_hole 8)),
                   template_app
                    (template_app (template_hole 7, template_var 1),
                     template_hole 6))),
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1)))),
             template_app
              (template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app (template_hole 0, template_hole 8),
                     template_var 0)),
                 template_hole 8),
               template_hole 4))
           ))),
    ("Cones.vangle_scaleR_self",
     "vangle (?k *\<^sub>R ?v) ?v =
      (if ?k = 0 | ?v = (0::?'a) then pi / 2
       else if 0 < ?k then 0 else pi)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 1),
                  template_var 0)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app (template_hole 13, template_var 1),
                       template_hole 8)),
                   template_app
                    (template_app (template_hole 7, template_var 0),
                     template_hole 6))),
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1)))),
             template_app
              (template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app (template_hole 0, template_hole 8),
                     template_var 1)),
                 template_hole 8),
               template_hole 4))
           ))),
    ("Cones.Cauchy_Schwarz_strict_ineq2",
     "[| ?y ~= (0::?'a); !!k. ?x ~= k *\<^sub>R ?y |]
      ==> \<bar>?x \<bullet> ?y\<bar> < norm ?x * norm ?y",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 7)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_inequation
        (less_than,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_app (template_hole 0, template_var 1))))),
    ("Cones.Cauchy_Schwarz_eq_iff",
     "((?x \<bullet> ?y)\<^sup>2 = ?x \<bullet> ?x * (?y \<bullet> ?y)) =
      ((EX k. ?x = k *\<^sub>R ?y) | ?y = (0::?'a))",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_var 1),
               template_var 0)),
           template_app
            (template_hole 8,
             template_app (template_hole 7, template_hole 6))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 9, template_var 1),
               template_var 1)),
           template_app
            (template_app (template_hole 9, template_var 0),
             template_var 0))),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4, template_app (template_hole 3, t_empty)),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 0))
           ))),
    ("Cones.conemem_commute",
     "[| 0 <= ?t; ?t <= pi / 2 |]
      ==> conemem ?a ?b ?t = conemem ?b ?a (pi / 2 - ?t)",
     template_implication
      ([template_inequation (less_equals, template_hole 8, template_var 2),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 7, template_hole 6),
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_hole 3))))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_hole 3)))),
             template_var 2))))),
    ("Cones.Cauchy_Schwarz_strict_ineq",
     "[| ?y ~= (0::?'a); !!k. ?x ~= k *\<^sub>R ?y |]
      ==> (?x \<bullet> ?y)\<^sup>2 < ?x \<bullet> ?x * (?y \<bullet> ?y)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 9)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 1)),
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 0)),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 1))))),
    ("Cones.discriminant",
     "?a * ?x\<^sup>2 + ?b * ?x + ?c = 0 ==> 0 <= ?b\<^sup>2 - 4 * ?a * ?c",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 9,
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 8, template_var 3),
                    template_app
                     (template_app (template_hole 7, template_var 2),
                      template_app
                       (template_hole 6,
                        template_app (template_hole 5, template_hole 4))))),
                template_app
                 (template_app (template_hole 8, template_var 1),
                  template_var 2))),
            template_var 0),
          template_hole 3)],
       template_inequation
        (less_equals, template_hole 3,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 7, template_var 1),
               template_app
                (template_hole 6,
                 template_app (template_hole 5, template_hole 4)))),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_hole 0,
                     template_app
                      (template_hole 5,
                       template_app (template_hole 5, template_hole 4)))),
                 template_var 3)),
             template_var 0))))),
    ("Cones.conefield_rightI",
     "[| ?i : Basis; ?j : Basis; ?i ~= ?j; ?y : {?y1.0..?y2.0} |]
      ==> ?i + ?y *\<^sub>R ?j
          : conefield (?i + ?y1.0 *\<^sub>R ?j) (?i + ?y2.0 *\<^sub>R ?j)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_hole 7)
            ),
        template_negation
         (template_equation (template_var 4, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 2, template_var 4),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 3))),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 2, template_var 4),
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 3))),
               template_app
                (template_app (template_hole 2, template_var 4),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 3))))
           ))),
    ("Cones.conefield_right_vangleI",
     "[| ?i : Basis; ?j : Basis; ?i ~= ?j; ?y : {?y1.0..?y2.0};
         ?y1.0 < ?y2.0 |]
      ==> ?i + ?y *\<^sub>R ?j
          : conefield (?i + ?y1.0 *\<^sub>R ?j) (?i + ?y2.0 *\<^sub>R ?j)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 4),
              template_hole 8)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_hole 8)
            ),
        template_negation
         (template_equation (template_var 4, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            ),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 2, template_var 4),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 3))),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 2, template_var 4),
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 3))),
               template_app
                (template_app (template_hole 2, template_var 4),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 3))))
           ))),
    ("Cones.conefield_prod3I",
     "[| 0 < ?x; 0 < ?x1.0; 0 < ?x2.0; ?y1.0 / ?x1.0 <= ?y / ?x;
         ?y / ?x <= ?y2.0 / ?x2.0 |]
      ==> (?x, ?y, 0) : conefield (?x1.0, ?y1.0, 0) (?x2.0, ?y2.0, 0)",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 5),
        template_inequation (less_than, template_hole 6, template_var 4),
        template_inequation (less_than, template_hole 6, template_var 3),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_var 2), template_var 4),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 5)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_var 1), template_var 5),
          template_app
           (template_app (template_hole 4, template_var 0),
            template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 5),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 6))),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 2, template_var 4),
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_hole 6))),
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 6))))
           ))),
    ("Cones.quadratic_ex_zero_iff",
     "(EX x. ?a * x\<^sup>2 + ?b * x + ?c = 0) =
      (?a ~= 0 & 0 <= ?b\<^sup>2 - 4 * ?a * ?c |
       ?a = 0 & (?b = 0 --> ?c = 0))",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 14, template_var 2),
                       template_hole 7))),
                 template_app
                  (template_app (template_hole 3, template_hole 7),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 11, template_var 1),
                         template_app
                          (template_hole 10,
                           template_app
                            (template_hole 9, template_hole 8)))),
                     template_app
                      (template_app
                        (template_hole 12,
                         template_app
                          (template_app
                            (template_hole 12,
                             template_app
                              (template_hole 1,
                               template_app
                                (template_hole 9,
                                 template_app
                                  (template_hole 9, template_hole 8)))),
                           template_var 2)),
                       template_var 0))))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 14, template_var 2),
                   template_hole 7)),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 14, template_var 1),
                     template_hole 7)),
                 template_app
                  (template_app (template_hole 14, template_var 0),
                   template_hole 7))))
           ))),
    ("Cones.vangle_eq_arctan_minus",
     "[| ?i : Basis; ?j : Basis; ?i ~= ?j; \<bar>?y1.0\<bar> < ?x1.0;
         \<bar>?y2.0\<bar> < ?x2.0; ?y1.0 / ?x1.0 < ?y2.0 / ?x2.0 |]
      ==> vangle (?x1.0 *\<^sub>R ?i + ?y1.0 *\<^sub>R ?j)
           (?x2.0 *\<^sub>R ?i + ?y2.0 *\<^sub>R ?j) =
          arctan (?y2.0 / ?x2.0) - arctan (?y1.0 / ?x1.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 5),
              template_hole 11)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 4),
              template_hole 11)
            ),
        template_negation
         (template_equation (template_var 5, template_var 4)),
        template_inequation
         (less_than, template_app (template_hole 7, template_var 3),
          template_var 2),
        template_inequation
         (less_than, template_app (template_hole 7, template_var 1),
          template_var 0),
        template_inequation
         (less_than,
          template_app
           (template_app (template_hole 6, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 6, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 5)),
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 4))),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 5)),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 4))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_var 0))),
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 6, template_var 3),
               template_var 2)))))),
    ("Cones.conemem_expansion_estimate",
     "[| ?t : {0..pi / 2}; 0 < vangle ?u ?v; vangle ?u ?v < pi / 2;
         vangle ?u' ?v' <= vangle ?u ?v; norm ?u = 1; norm ?v = 1 |]
      ==> min (norm ?u') (norm ?v') * norm (conemem ?u ?v ?t)
          <= norm (conemem ?u' ?v' ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 4),
              template_app
               (template_app (template_hole 15, template_hole 14),
                template_app
                 (template_app (template_hole 13, template_hole 12),
                  template_app
                   (template_hole 11,
                    template_app (template_hole 10, template_hole 9)))))
            ),
        template_inequation
         (less_than, template_hole 14,
          template_app
           (template_app (template_hole 7, template_var 3),
            template_var 2)),
        template_inequation
         (less_than,
          template_app
           (template_app (template_hole 7, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 13, template_hole 12),
            template_app
             (template_hole 11,
              template_app (template_hole 10, template_hole 9)))),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 7, template_var 1), template_var 0),
          template_app
           (template_app (template_hole 7, template_var 3),
            template_var 2)),
        template_equation
         (template_app (template_hole 4, template_var 3), template_hole 3),
        template_equation
         (template_app (template_hole 4, template_var 2), template_hole 3)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 4, template_var 1)),
               template_app (template_hole 4, template_var 0))),
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 4))),
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 4))))),
    ("Cones.conefield_expansion_estimate",
     "[| ?t : {0..pi / 2}; 0 < vangle ?u ?v; vangle ?u ?v < pi / 2;
         vangle (?F ?u) (?F ?v) <= vangle ?u ?v; bounded_linear ?F;
         ?x : conefield ?u ?v |]
      ==> min (norm (?F ?u) / norm ?u) (norm (?F ?v) / norm ?v) * norm ?x
          <= norm (?F ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 4),
              template_app
               (template_app (template_hole 15, template_hole 14),
                template_app
                 (template_app (template_hole 13, template_hole 12),
                  template_app
                   (template_hole 11,
                    template_app (template_hole 10, template_hole 9)))))
            ),
        template_inequation
         (less_than, template_hole 14,
          template_app
           (template_app (template_hole 7, template_var 3),
            template_var 2)),
        template_inequation
         (less_than,
          template_app
           (template_app (template_hole 7, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 13, template_hole 12),
            template_app
             (template_hole 11,
              template_app (template_hole 10, template_hole 9)))),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 7,
              template_app (template_var 1, template_var 3)),
            template_app (template_var 1, template_var 2)),
          template_app
           (template_app (template_hole 7, template_var 3),
            template_var 2)),
        template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 13,
                     template_app
                      (template_hole 0,
                       template_app (template_var 1, template_var 3))),
                   template_app (template_hole 0, template_var 3))),
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_hole 0,
                     template_app (template_var 1, template_var 2))),
                 template_app (template_hole 0, template_var 2)))),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_var 1, template_var 0))))),
    ("Cones.conefield_mk_rightI",
     "[| ?i : Basis; ?j : Basis; ?i ~= ?j;
         ?i + (?y / ?x) *\<^sub>R ?j
         : conefield (?i + (?y1.0 / ?x1.0) *\<^sub>R ?j)
            (?i + (?y2.0 / ?x2.0) *\<^sub>R ?j);
         0 < ?x; 0 < ?x1.0; 0 < ?x2.0 |]
      ==> ?x *\<^sub>R ?i + ?y *\<^sub>R ?j
          : conefield (?x1.0 *\<^sub>R ?i + ?y1.0 *\<^sub>R ?j)
             (?x2.0 *\<^sub>R ?i + ?y2.0 *\<^sub>R ?j)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 7),
              template_hole 8)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 6),
              template_hole 8)
            ),
        template_negation
         (template_equation (template_var 7, template_var 6)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 5, template_var 7),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app
                       (template_app (template_hole 3, template_var 5),
                        template_var 4)),
                    template_var 6))),
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 5, template_var 7),
                    template_app
                     (template_app
                       (template_hole 4,
                        template_app
                         (template_app (template_hole 3, template_var 3),
                          template_var 2)),
                      template_var 6))),
                template_app
                 (template_app (template_hole 5, template_var 7),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app
                       (template_app (template_hole 3, template_var 1),
                        template_var 0)),
                    template_var 6))))
            ),
        template_inequation (less_than, template_hole 0, template_var 4),
        template_inequation (less_than, template_hole 0, template_var 2),
        template_inequation (less_than, template_hole 0, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 4),
                     template_var 7)),
                 template_app
                  (template_app (template_hole 4, template_var 5),
                   template_var 6))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 2),
                       template_var 7)),
                   template_app
                    (template_app (template_hole 4, template_var 3),
                     template_var 6))),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_var 7)),
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_var 6))))
           ))),
    ("Cones.quadratic_eq_zeroes_iff",
     "[| ?D = ?b\<^sup>2 - 4 * ?a * ?c;
         ?x\<^sub>1 = (- ?b + sqrt ?D) / (2 * ?a);
         ?x\<^sub>2 = (- ?b - sqrt ?D) / (2 * ?a); ?a ~= 0 |]
      ==> (?a * ?x\<^sup>2 + ?b * ?x + ?c = 0) =
          (0 <= ?D & (?x = ?x\<^sub>1 | ?x = ?x\<^sub>2))",
     template_implication
      ([template_equation
         (template_var 6,
          template_app
           (template_app
             (template_hole 16,
              template_app
               (template_app (template_hole 15, template_var 5),
                template_app
                 (template_hole 14,
                  template_app (template_hole 13, template_hole 12)))),
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_hole 10,
                      template_app
                       (template_hole 13,
                        template_app
                         (template_hole 13, template_hole 12)))),
                  template_var 4)),
              template_var 3))),
        template_equation
         (template_var 2,
          template_app
           (template_app
             (template_hole 9,
              template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_var 5)),
                template_app (template_hole 6, template_var 6))),
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_hole 10,
                  template_app (template_hole 13, template_hole 12))),
              template_var 4))),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_hole 9,
              template_app
               (template_app
                 (template_hole 16,
                  template_app (template_hole 7, template_var 5)),
                template_app (template_hole 6, template_var 6))),
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_hole 10,
                  template_app (template_hole 13, template_hole 12))),
              template_var 4))),
        template_negation
         (template_equation (template_var 4, template_hole 4))],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 11, template_var 4),
                     template_app
                      (template_app (template_hole 15, template_var 0),
                       template_app
                        (template_hole 14,
                         template_app
                          (template_hole 13, template_hole 12))))),
                 template_app
                  (template_app (template_hole 11, template_var 5),
                   template_var 0))),
             template_var 3),
           template_hole 4),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 4),
                   template_var 6)),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 17, template_var 0),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 17, template_var 0),
                   template_var 1)))
             )))),
    ("Cones.quadratic_eq_factoring",
     "[| ?D = ?b\<^sup>2 - 4 * ?a * ?c; 0 <= ?D;
         ?x\<^sub>1 = (- ?b + sqrt ?D) / (2 * ?a);
         ?x\<^sub>2 = (- ?b - sqrt ?D) / (2 * ?a); ?a ~= 0 |]
      ==> ?a * ?x\<^sup>2 + ?b * ?x + ?c =
          ?a * (?x - ?x\<^sub>1) * (?x - ?x\<^sub>2)",
     template_implication
      ([template_equation
         (template_var 6,
          template_app
           (template_app
             (template_hole 13,
              template_app
               (template_app (template_hole 12, template_var 5),
                template_app
                 (template_hole 11,
                  template_app (template_hole 10, template_hole 9)))),
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_hole 7,
                      template_app
                       (template_hole 10,
                        template_app (template_hole 10, template_hole 9)))),
                  template_var 4)),
              template_var 3))),
        template_inequation (less_equals, template_hole 5, template_var 6),
        template_equation
         (template_var 2,
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 5)),
                template_app (template_hole 1, template_var 6))),
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_hole 7,
                  template_app (template_hole 10, template_hole 9))),
              template_var 4))),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_hole 13,
                  template_app (template_hole 2, template_var 5)),
                template_app (template_hole 1, template_var 6))),
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_hole 7,
                  template_app (template_hole 10, template_hole 9))),
              template_var 4))),
        template_negation
         (template_equation (template_var 4, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 8, template_var 4),
                   template_app
                    (template_app (template_hole 12, template_var 0),
                     template_app
                      (template_hole 11,
                       template_app (template_hole 10, template_hole 9))))),
               template_app
                (template_app (template_hole 8, template_var 5),
                 template_var 0))),
           template_var 3),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 8, template_var 4),
               template_app
                (template_app (template_hole 13, template_var 0),
                 template_var 2))),
           template_app
            (template_app (template_hole 13, template_var 0),
             template_var 1)))))]:
   (string * thm * template) list
### theory "Draft.ConesTemplates"
### 1.139s elapsed time, 1.453s cpu time, 0.179s GC time
val it = (): unit
