Loading theory "HOL-Library.Stream" (required by "Draft.Poincare_MapTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Poincare_MapTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Poincare_MapTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "Draft.Bounded_Linear_Operator" (required by "Draft.Poincare_MapTemplates" via "Draft.Poincare_Map" via "Draft.Flow")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.131s elapsed time, 0.528s cpu time, 0.051s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Poincare_MapTemplates" via "Draft.ExtrEqs")
### Generation of a parametrized correspondence relation failed.
### Reason:  No relator for the type "Bounded_Linear_Function.blinfun" found.
consts
  shift :: "'a list => 'a stream => 'a stream"
instantiation
  blinop :: (real_normed_vector) real_normed_vector
  uminus_blinop == uminus :: 'a blinop => 'a blinop
  zero_blinop == zero_class.zero :: 'a blinop
  minus_blinop == minus :: 'a blinop => 'a blinop => 'a blinop
  plus_blinop == plus :: 'a blinop => 'a blinop => 'a blinop
  sgn_blinop == sgn :: 'a blinop => 'a blinop
  norm_blinop == norm :: 'a blinop => real
  scaleR_blinop == scaleR :: real => 'a blinop => 'a blinop
  dist_blinop == dist :: 'a blinop => 'a blinop => real
  uniformity_blinop == uniformity :: ('a blinop * 'a blinop) filter
  open_blinop == open :: 'a blinop set => bool
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  left :: "'a tree => 'a tree"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  right :: "'a tree => 'a tree"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
instantiation
  blinop :: ({real_normed_vector,perfect_space}) real_normed_algebra_1
  one_blinop == one_class.one :: 'a blinop
  times_blinop == times :: 'a blinop => 'a blinop => 'a blinop
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.843s elapsed time, 3.288s cpu time, 0.304s GC time
Loading theory "Draft.Vector_Derivative_On" (required by "Draft.Poincare_MapTemplates" via "Draft.Poincare_Map" via "Draft.Flow" via "Draft.Picard_Lindeloef_Qualitative" via "Draft.Initial_Value_Problem" via "Draft.Interval_Integral_HK")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.876s elapsed time, 3.311s cpu time, 0.658s GC time
Loading theory "Draft.ODE_Auxiliarities" (required by "Draft.Poincare_MapTemplates" via "Draft.Poincare_Map" via "Draft.Flow" via "Draft.Picard_Lindeloef_Qualitative" via "Draft.Initial_Value_Problem")
### theory "Draft.Bounded_Linear_Operator"
### 1.074s elapsed time, 4.110s cpu time, 0.709s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Vector_Derivative_On"
### 0.309s elapsed time, 1.036s cpu time, 0.432s GC time
Loading theory "Draft.Gronwall" (required by "Draft.Poincare_MapTemplates" via "Draft.Poincare_Map" via "Draft.Flow" via "Draft.Picard_Lindeloef_Qualitative" via "Draft.Initial_Value_Problem")
Loading theory "Draft.Interval_Integral_HK" (required by "Draft.Poincare_MapTemplates" via "Draft.Poincare_Map" via "Draft.Flow" via "Draft.Picard_Lindeloef_Qualitative" via "Draft.Initial_Value_Problem")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Gronwall"
### 0.163s elapsed time, 0.634s cpu time, 0.057s GC time
Found termination order: "size <*mlex*> {}"
### theory "Draft.Interval_Integral_HK"
### 0.243s elapsed time, 0.874s cpu time, 0.057s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
instantiation
  prod :: (zero_neq_one, zero_neq_one) zero_neq_one
  one_prod == one_class.one :: 'a * 'b
Found termination order: "size <*mlex*> {}"
locale no_real_inner
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.ODE_Auxiliarities"
### 0.735s elapsed time, 2.071s cpu time, 0.136s GC time
Loading theory "Draft.Initial_Value_Problem" (required by "Draft.Poincare_MapTemplates" via "Draft.Poincare_Map" via "Draft.Flow" via "Draft.Picard_Lindeloef_Qualitative")
Loading theory "Draft.Multivariate_Taylor" (required by "Draft.Poincare_MapTemplates" via "Draft.Poincare_Map" via "Draft.Flow")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.970s elapsed time, 6.614s cpu time, 0.963s GC time
Loading theory "Draft.Templates" (required by "Draft.Poincare_MapTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.060s elapsed time, 0.196s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Poincare_MapTemplates")
locale second_derivative_within
  fixes f :: "'a => 'b"
    and f' :: "'a => 'a \<Rightarrow>\<^sub>L 'b"
    and f'' :: "'a \<Rightarrow>\<^sub>L 'a \<Rightarrow>\<^sub>L 'b"
    and a :: "'a"
    and G :: "'a set"
  assumes "second_derivative_within f f' f'' a G"
locale second_derivative
  fixes f :: "'a => 'b"
    and f' :: "'a => 'a \<Rightarrow>\<^sub>L 'b"
    and f'' :: "'a \<Rightarrow>\<^sub>L 'a \<Rightarrow>\<^sub>L 'b"
    and a :: "'a"
    and G :: "'a set"
  assumes "second_derivative f f' f'' a G"
locale second_derivative_within'
  fixes f :: "'a => 'b"
    and f' :: "'a => 'a => 'b"
    and f'' :: "'a => 'a => 'b"
    and a :: "'a"
    and G :: "'a set"
  assumes "second_derivative_within' f f' f'' a G"
locale second_derivative_on_open
  fixes f :: "'a => 'b"
    and f' :: "'a => 'a => 'b"
    and f'' :: "'a => 'a => 'b"
    and a :: "'a"
    and G :: "'a set"
  assumes "second_derivative_on_open f f' f'' a G"
### theory "Draft.Multivariate_Taylor"
### 0.656s elapsed time, 1.992s cpu time, 0.221s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.617s elapsed time, 1.643s cpu time, 0.142s GC time
locale continuous_rhs
  fixes T :: "'a set"
    and X :: "'b set"
    and f :: "'a => 'b => 'c"
  assumes "continuous_rhs T X f"
locale global_lipschitz
  fixes T :: "'a set"
    and X :: "'b set"
    and f :: "'a => 'b => 'c"
    and L :: "real"
  assumes "global_lipschitz T X f L"
locale closed_domain
  fixes X :: "'a set"
  assumes "closed_domain X"
locale interval
  fixes T :: "real set"
  assumes "interval T"
locale nonempty_set
  fixes T :: "'a set"
  assumes "nonempty_set T"
locale compact_interval
  fixes T :: "real set"
  assumes "compact_interval T"
locale self_mapping
  fixes T :: "real set"
    and t0 :: "real"
    and x0 :: "'a"
    and f :: "real => 'a => 'a"
    and X :: "'a set"
  assumes "self_mapping T t0 x0 f X"
locale unique_on_closed
  fixes t0 :: "real"
    and T :: "real set"
    and x0 :: "'a"
    and f :: "real => 'a => 'a"
    and X :: "'a set"
    and L :: "real"
  assumes "unique_on_closed t0 T x0 f X L"
### Ignoring duplicate introduction (intro)
### [| tmin <= ?t; ?t <= tmax |] ==> ?t : T
### Ignoring duplicate rewrite rule:
### [| tmin <= ?t1; ?t1 <= tmax |] ==> ?t1 : T == True
locale unique_on_bounded_closed
  fixes t0 :: "real"
    and T :: "real set"
    and x0 :: "'a"
    and f :: "real => 'a => 'a"
    and X :: "'a set"
    and L :: "real"
  assumes "unique_on_bounded_closed t0 T x0 f X L"
locale unique_on_closed
  fixes t0 :: "real"
    and T :: "real set"
    and x0 :: "'a"
    and f :: "real => 'a => 'a"
    and X :: "'a set"
    and L :: "real"
  assumes "unique_on_closed t0 T x0 f X L"
consts
  psolution :: "nat => real => 'a"
locale unique_on_strip
  fixes t0 :: "real"
    and T :: "real set"
    and f :: "real => 'a => 'a"
    and L :: "real"
  assumes "unique_on_strip t0 T f L"
locale solution_in_cylinder
  fixes t0 :: "real"
    and T :: "real set"
    and x0 :: "'a"
    and b :: "real"
    and f :: "real => 'a => 'a"
    and X :: "'a set"
    and B :: "real"
  assumes "solution_in_cylinder t0 T x0 b f B"
  defines "X == cball x0 b"
locale unique_on_cylinder
  fixes t0 :: "real"
    and T :: "real set"
    and x0 :: "'a"
    and b :: "real"
    and X :: "'a set"
    and f :: "real => 'a => 'a"
    and B :: "real"
    and L :: "real"
  assumes "unique_on_cylinder t0 T x0 b f B L"
  defines "X == cball x0 b"
locale derivative_on_prod
  fixes T :: "real set"
    and X :: "'a set"
    and f :: "real => 'a => 'a"
    and f' :: "real * 'a => real * 'a => 'a"
  assumes "derivative_on_prod T X f f'"
### theory "Draft.Initial_Value_Problem"
### 1.807s elapsed time, 3.836s cpu time, 0.914s GC time
Loading theory "Draft.Picard_Lindeloef_Qualitative" (required by "Draft.Poincare_MapTemplates" via "Draft.Poincare_Map" via "Draft.Flow")
locale ll_on_open
  fixes T :: "real set"
    and f :: "real => 'a => 'a"
    and X :: "'a set"
  assumes "ll_on_open T f X"
locale ll_on_open_it
  fixes T :: "real set"
    and f :: "real => 'a => 'a"
    and X :: "'a set"
    and t0 :: "real"
  assumes "ll_on_open_it T f X"
locale ll_on_open
  fixes T :: "real set"
    and f :: "real => 'a => 'a"
    and X :: "'a set"
  assumes "ll_on_open T f X"
locale ll_on_open_it
  fixes T :: "real set"
    and f :: "real => 'a => 'a"
    and X :: "'a set"
    and t0 :: "real"
  assumes "ll_on_open_it T f X"
### theory "Draft.Picard_Lindeloef_Qualitative"
### 0.373s elapsed time, 0.393s cpu time, 0.032s GC time
Loading theory "Draft.Flow" (required by "Draft.Poincare_MapTemplates" via "Draft.Poincare_Map")
locale ll_on_open_it
  fixes T :: "real set"
    and f :: "real => 'a => 'a"
    and X :: "'a set"
    and t0 :: "real"
  assumes "ll_on_open_it T f X"
[| ?A ~= {}; compact ?A; open ?B; ?A <= ?B;
   !!e. [| 0 < e; {x. infdist x ?A <= e} <= ?B |] ==> ?thesis |]
==> ?thesis
locale two_ll_on_open
  fixes F :: "real => 'a => 'a"
    and T1 :: "real set"
    and G :: "real => 'a => 'a"
    and T2 :: "real set"
    and X :: "'a set"
    and J :: "real set"
    and x0 :: "'a"
    and e :: "real"
    and K :: "real"
  assumes "two_ll_on_open F T1 G T2 X J x0 e K"
locale auto_ll_on_open
  fixes f :: "'a => 'a"
    and X :: "'a set"
  assumes "auto_ll_on_open f X"
locale compact_continuously_diff
  fixes T :: "real set"
    and X :: "'a set"
    and f :: "real => 'a => 'a"
    and f' :: "'a => 'a \<Rightarrow>\<^sub>L 'a"
  assumes "compact_continuously_diff T X f f'"
locale unique_on_compact_continuously_diff
  fixes T :: "real set"
    and t0 :: "real"
    and x0 :: "'a"
    and f :: "real => 'a => 'a"
    and X :: "'a set"
    and f' :: "'a => 'a \<Rightarrow>\<^sub>L 'a"
  assumes "unique_on_compact_continuously_diff T t0 x0 f X f'"
locale c1_on_open
  fixes f :: "'a => 'a"
    and f' :: "'a => 'a \<Rightarrow>\<^sub>L 'a"
    and X :: "'a set"
  assumes "c1_on_open f f' X"
locale c1_on_open_euclidean
  fixes f :: "'a => 'a"
    and f' :: "'a => 'a \<Rightarrow>\<^sub>L 'a"
    and X :: "'a set"
  assumes "c1_on_open_euclidean f f' X"
### theory "Draft.Flow"
### 2.005s elapsed time, 2.107s cpu time, 0.155s GC time
Loading theory "Draft.Poincare_Map" (required by "Draft.Poincare_MapTemplates")
locale ll_on_open_it
  fixes T :: "real set"
    and f :: "real => 'a => 'a"
    and X :: "'a set"
    and t0 :: "real"
  assumes "ll_on_open_it T f X"
locale auto_ll_on_open
  fixes f :: "'a => 'a"
    and X :: "'a set"
  assumes "auto_ll_on_open f X"
### Ignoring duplicate rewrite rule:
### norm (- ?x1) == norm ?x1
locale c1_on_open_euclidean
  fixes f :: "'a => 'a"
    and f' :: "'a => 'a \<Rightarrow>\<^sub>L 'a"
    and X :: "'a set"
  assumes "c1_on_open_euclidean f f' X"
### theory "Draft.Poincare_Map"
### 1.338s elapsed time, 2.059s cpu time, 1.012s GC time
Loading theory "Draft.Poincare_MapTemplates"
val templateLemmas =
   [("Poincare_Map.blinfun_apply_embed1_blinfun",
     "blinfun_apply embed1_blinfun ?x = (?x, 0::?'b)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Poincare_Map.blinfun_apply_embed2_blinfun",
     "blinfun_apply embed2_blinfun ?x = (0::?'a, ?x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2), template_var 0),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Poincare_Map.blinfun_compose_assoc",
     "?a o\<^sub>L ?b o\<^sub>L ?c = ?a o\<^sub>L (?b o\<^sub>L ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Poincare_Map.pos_half_less", "0 < ?x ==> ?x / 2 < ?x",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 0)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0))),
         template_var 0))),
    ("Poincare_Map.closed_levelset",
     "continuous_on UNIV ?s ==> closed {x. ?s x = ?c}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_hole 2, template_app (template_hole 1, t_empty))
           ))),
    ("Poincare_Map.blinfun_inverseD",
     "?f o\<^sub>L ?f' = 1\<^sub>L ==>
      blinfun_apply ?f (blinfun_apply ?f' ?x) = ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_hole 3)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0))),
    ("Poincare_Map.linear_inverse_blinop_lemma",
     "norm ?w < 1 ==> summable (%n. (- 1) ^ n *\<^sub>R ?w ^ n)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 6, template_var 0),
          template_hole 5)],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Poincare_Map.blinfun_apply_Pair_split",
     "blinfun_apply ?g (?a, ?b) =
      blinfun_apply ?g (?a, 0::?'c) + blinfun_apply ?g (0::?'b, ?b)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_hole 1))),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app (template_hole 3, template_hole 0),
             template_var 0))))),
    ("Poincare_Map.blinfun_apply_Pair_minus2",
     "blinfun_apply ?f (0::?'b, ?a - ?b) =
      blinfun_apply ?f (0::?'b, ?a) - blinfun_apply ?f (0::?'b, ?b)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 1))),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0))))),
    ("Poincare_Map.blinfun_apply_Pair_add2",
     "blinfun_apply ?f (0::?'b, ?a + ?b) =
      blinfun_apply ?f (0::?'b, ?a) + blinfun_apply ?f (0::?'b, ?b)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 1))),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0))))),
    ("Poincare_Map.blinfun_apply_Pair_minus1",
     "blinfun_apply ?f (?a - ?b, 0::?'c) =
      blinfun_apply ?f (?a, 0::?'c) - blinfun_apply ?f (?b, 0::?'c)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_hole 1)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_hole 1))),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 1))))),
    ("Poincare_Map.blinfun_apply_Pair_add1",
     "blinfun_apply ?f (?a + ?b, 0::?'c) =
      blinfun_apply ?f (?a, 0::?'c) + blinfun_apply ?f (?b, 0::?'c)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_hole 1)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_hole 1))),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 1))))),
    ("Poincare_Map.continuous_on_open_vimageI",
     "[| open ?s; continuous_on ?s ?f; open ?B |]
      ==> open (?f -` ?B Int ?s)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_var 2))
           ))),
    ("Poincare_Map.continuous_on_closed_vimageI",
     "[| closed ?s; continuous_on ?s ?f; closed ?B |]
      ==> closed (?f -` ?B Int ?s)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_var 2))
           ))),
    ("Poincare_Map.closed_levelset_within",
     "[| continuous_on ?S ?s; closed ?S |] ==> closed {x: ?S. ?s x = ?c}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 4, template_app (template_hole 3, t_empty))
           ))),
    ("Poincare_Map.ball_times_subset",
     "ball ?a (?c / 2) \<times> ball ?b (?c / 2) <= ball (?a, ?b) ?c",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 2),
             template_app
              (template_app (template_hole 6, template_var 1),
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_hole 3))))),
         t_empty),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Poincare_Map.linear_inverse_blinop_lemma",
     "norm ?w < 1 ==> (1 + ?w) * (\<Sum>n. (- 1) ^ n *\<^sub>R ?w ^ n) = 1",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 10, template_var 0),
          template_hole 9)],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_var 0)),
           template_app (template_hole 4, t_empty)),
         template_hole 5))),
    ("Poincare_Map.linear_inverse_blinop_lemma",
     "norm ?w < 1 ==> (\<Sum>n. (- 1) ^ n *\<^sub>R ?w ^ n) * (1 + ?w) = 1",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 10, template_var 0),
          template_hole 9)],
       template_equation
        (template_app
          (template_app
            (template_hole 7, template_app (template_hole 6, t_empty)),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)),
         template_hole 0))),
    ("Poincare_Map.eventually_eventually_withinI",
     "[| eventually ?P (at ?x within ?A); ?P ?x |]
      ==> \<forall>\<^sub>F a in at ?x within ?S.
             eventually ?P (at a within ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, t_empty),
              template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_var 3, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Poincare_Map.open_cballE",
     "[| open ?S; ?x : ?S; !!e. [| 0 < e; cball ?x e <= ?S |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Poincare_Map.eventually_not_in_closed",
     "[| closed ?P; ?f ?t ~: ?P; ?t : ?T; continuous_on ?T ?f |]
      ==> \<forall>\<^sub>F t in at ?t within ?T. ?f t ~: ?P",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 3)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_var 2, template_var 1)),
                  template_var 3)
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Poincare_Map.linear_inverse_blinop_lemma",
     "norm ?w < 1 ==>
      norm ((\<Sum>n. (- 1) ^ n *\<^sub>R ?w ^ n) - 1 + ?w)
      <= (norm ?w)\<^sup>2 / (1 - norm ?w)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 15, template_var 0),
          template_hole 14)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 15,
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app (template_hole 10, t_empty)),
                 template_hole 5)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 8,
                 template_app (template_hole 15, template_var 0)),
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1)))),
           template_app
            (template_app (template_hole 0, template_hole 14),
             template_app (template_hole 15, template_var 0)))))),
    ("Poincare_Map.isCont_blinfunD",
     "[| isCont ?f' ?a; 0 < ?e |]
      ==> EX d>0.
             ALL x.
                dist ?a x < d -->
                onorm
                 (%v. blinfun_apply (?f' x) v - blinfun_apply (?f' ?a) v)
                < ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 2),
                  template_hole 10)),
              template_var 1)
            ),
        template_inequation (less_than, template_hole 8, template_var 0)],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Poincare_Map.eventually_tendsto_compose_within",
     "[| eventually ?P (at ?l within ?S); ?P ?l;
         (?f \<longlongrightarrow> ?l) (at ?x within ?T);
         \<forall>\<^sub>F x in at ?x within ?T. ?f x : ?S |]
      ==> \<forall>\<^sub>F x in at ?x within ?T. ?P (?f x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 5),
              template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3))
            ),
        template_predicate (template_app (template_var 5, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_app (template_hole 3, template_var 4)),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, t_empty),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))
           ))),
    ("Poincare_Map.uniform_limit_compose",
     "[| uniform_limit ?T ?f ?l ?F; uniformly_continuous_on ?S ?s;
         \<forall>\<^sub>F x in ?F. ?f x ` ?T <= ?S; ?l ` ?T <= ?S |]
      ==> uniform_limit ?T (%i x. ?s (?f i x)) (%x. ?s (?l x)) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 5),
                template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, t_empty), template_var 2)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 3), template_var 4),
          template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, t_empty),
               template_app
                (template_app (template_hole 0, template_var 4), t_empty)),
             template_var 2)
           ))),
    ("Poincare_Map.order_uniform_limitD2",
     "[| uniform_limit ?T ?f ?l (at ?x); continuous_on ?T ?l; compact ?T;
         !!t. t : ?T ==> ?b < ?l t |]
      ==> \<forall>\<^sub>F y in at ?x. ALL t:?T. ?b < ?f y t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 4),
                template_app
                 (template_app (template_hole 9, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_hole 7))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty),
             template_app
              (template_app (template_hole 8, template_var 1),
               template_hole 7))
           ))),
    ("Poincare_Map.order_uniform_limitD1",
     "[| uniform_limit ?T ?f ?l (at ?x); continuous_on ?T ?l; compact ?T;
         !!t. t : ?T ==> ?l t < ?b |]
      ==> \<forall>\<^sub>F y in at ?x. ALL t:?T. ?f y t < ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 4),
                template_app
                 (template_app (template_hole 9, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_hole 7))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty),
             template_app
              (template_app (template_hole 8, template_var 1),
               template_hole 7))
           ))),
    ("Poincare_Map.uniform_limit_in_open",
     "[| uniform_limit ?T ?f ?l (at ?x); continuous_on ?T ?l; compact ?T;
         ?T ~= {}; open ?B; ?l ` ?T <= ?B |]
      ==> \<forall>\<^sub>F y in at ?x. ALL t:?T. ?f y t : ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 14, template_var 4),
                template_app
                 (template_app (template_hole 13, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 12, template_var 1),
                template_hole 11))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 9, template_var 3)),
        template_negation
         (template_equation (template_var 3, template_hole 6)),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 3, template_var 2), template_var 3),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty),
             template_app
              (template_app (template_hole 12, template_var 1),
               template_hole 11))
           ))),
    ("Poincare_Map.linear_inverse_blinfun_lemma",
     "[| norm ?w < 1;
         !!I. [| I o\<^sub>L 1\<^sub>L + ?w = 1\<^sub>L;
                 1\<^sub>L + ?w o\<^sub>L I = 1\<^sub>L;
                 norm (I - 1\<^sub>L + ?w)
                 <= (norm ?w)\<^sup>2 / (1 - norm ?w) |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 14, template_var 1),
          template_hole 13),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate (template_var 0))),
    ("Poincare_Map.order_uniform_limit_ne",
     "[| uniform_limit ?T ?f ?l (at ?x); continuous_on ?T ?l; compact ?T;
         connected ?T; !!t. t : ?T ==> ?l t ~= ?b |]
      ==> \<forall>\<^sub>F y in at ?x. ALL t:?T. ?f y t ~= ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 12, template_var 4),
                template_app
                 (template_app (template_hole 11, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 10, template_var 1),
                template_hole 9))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 7, template_var 3)),
        template_predicate (template_app (template_hole 6, template_var 3)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty),
             template_app
              (template_app (template_hole 10, template_var 1),
               template_hole 9))
           ))),
    ("Poincare_Map.continuous_on_avoid_cases",
     "[| continuous_on ?T ?l; connected ?T; !!t. t : ?T ==> ?l t ~= ?b;
         (!!t. t : ?T ==> ?l t < ?b) ==> ?thesis;
         (!!t. t : ?T ==> ?b < ?l t) ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_implication
         ([template_predicate (template_app (template_hole 4, t_empty))],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate (template_app (template_hole 4, t_empty))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Poincare_Map.has_derivative_locally_injective_blinfun",
     "[| ?a : ?s; open ?s; ?g' o\<^sub>L ?f' ?a = 1\<^sub>L;
         !!x. x : ?s ==> (?f has_derivative blinfun_apply (?f' x)) (at x);
         isCont ?f' ?a;
         !!r. [| 0 < r; ball ?a r <= ?s; inj_on ?f (ball ?a r) |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 5),
              template_var 4)
            ),
        template_predicate
         (template_app (template_hole 15, template_var 4)),
        template_equation
         (template_app
           (template_app (template_hole 13, template_var 3),
            template_app (template_var 2, template_var 5)),
          template_hole 12),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 8, template_var 5),
                  template_hole 7)),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Poincare_Map.implicit_function_theorem",
     "[| !!x. x : ?S ==> (?f has_derivative blinfun_apply (?f' x)) (at x);
         (?x, ?y) : ?S; open ?S; DIM(?'c) <= DIM(?'b); isCont ?f' (?x, ?y);
         ?f (?x, ?y) = (0::?'c);
         ?T o\<^sub>L (?f' (?x, ?y) o\<^sub>L embed2_blinfun) = 1\<^sub>L;
         ?f' (?x, ?y) o\<^sub>L embed2_blinfun o\<^sub>L ?T = 1\<^sub>L;
         !!u e r.
            [| ?f (?x, u ?x) = (0::?'c); u ?x = ?y;
               !!s. s : cball ?x e ==> ?f (s, u s) = (0::?'c);
               continuous_on (cball ?x e) u;
               (%t. (t, u t)) ` cball ?x e <= ?S; 0 < e;
               (u has_derivative
                blinfun_apply
                 (- ?T o\<^sub>L ?f' (?x, ?y) o\<^sub>L embed1_blinfun))
                (at ?x);
               0 < r;
               !!U v s.
                  [| v ?x = ?y; !!s. s : U ==> ?f (s, v s) = (0::?'c);
                     U <= cball ?x e; continuous_on U v; s : U;
                     (s, v s) : ball (?x, ?y) r |]
                  ==> u s = v s |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 46, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 44,
                template_app
                 (template_app (template_hole 39, template_var 3),
                  template_var 2)),
              template_var 6)
            ),
        template_predicate
         (template_app (template_hole 38, template_var 6)),
        template_inequation
         (less_equals, template_app (template_hole 36, template_hole 35),
          template_app (template_hole 34, template_hole 33)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 32,
                template_app
                 (template_app
                   (template_hole 41,
                    template_app
                     (template_app (template_hole 39, template_var 3),
                      template_var 2)),
                  template_hole 40)),
              template_var 4)
            ),
        template_equation
         (template_app
           (template_var 5,
            template_app
             (template_app (template_hole 39, template_var 3),
              template_var 2)),
          template_hole 30),
        template_equation
         (template_app
           (template_app (template_hole 28, template_var 1),
            template_app
             (template_app
               (template_hole 27,
                template_app
                 (template_var 4,
                  template_app
                   (template_app (template_hole 39, template_var 3),
                    template_var 2))),
              template_hole 26)),
          template_hole 25),
        template_equation
         (template_app
           (template_app
             (template_hole 23,
              template_app
               (template_app
                 (template_hole 27,
                  template_app
                   (template_var 4,
                    template_app
                     (template_app (template_hole 39, template_var 3),
                      template_var 2))),
                template_hole 26)),
            template_var 1),
          template_hole 22),
        template_predicate (template_app (template_hole 21, t_empty))],
       template_predicate (template_var 0))),
    ("Poincare_Map.implicit_function_theorem_unique",
     "[| !!x. x : ?S ==> (?f has_derivative blinfun_apply (?f' x)) (at x);
         (?x, ?y) : ?S; open ?S; DIM(?'c) <= DIM(?'b); continuous_on ?S ?f';
         ?f (?x, ?y) = (0::?'c);
         ?T o\<^sub>L (?f' (?x, ?y) o\<^sub>L embed2_blinfun) = 1\<^sub>L;
         ?f' (?x, ?y) o\<^sub>L embed2_blinfun o\<^sub>L ?T = 1\<^sub>L;
         !!u e.
            [| ?f (?x, u ?x) = (0::?'c); u ?x = ?y;
               !!s. s : cball ?x e ==> ?f (s, u s) = (0::?'c);
               continuous_on (cball ?x e) u;
               (%t. (t, u t)) ` cball ?x e <= ?S; 0 < e;
               (u has_derivative
                blinfun_apply
                 (- ?T o\<^sub>L ?f' (?x, ?y) o\<^sub>L embed1_blinfun))
                (at ?x);
               !!s. s : cball ?x e ==>
                    ?f' (s, u s) o\<^sub>L embed2_blinfun
                    : invertibles_blinfun;
               !!U v s.
                  [| !!s. s : U ==> ?f (s, v s) = (0::?'c); u ?x = v ?x;
                     continuous_on U v; s : U; ?x : U; U <= cball ?x e;
                     connected U; open U |]
                  ==> u s = v s |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 49, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 47,
                template_app
                 (template_app (template_hole 42, template_var 3),
                  template_var 2)),
              template_var 6)
            ),
        template_predicate
         (template_app (template_hole 41, template_var 6)),
        template_inequation
         (less_equals, template_app (template_hole 39, template_hole 38),
          template_app (template_hole 37, template_hole 36)),
        template_predicate
         (
            template_app
             (template_app (template_hole 35, template_var 6),
              template_var 4)
            ),
        template_equation
         (template_app
           (template_var 5,
            template_app
             (template_app (template_hole 42, template_var 3),
              template_var 2)),
          template_hole 33),
        template_equation
         (template_app
           (template_app (template_hole 31, template_var 1),
            template_app
             (template_app
               (template_hole 30,
                template_app
                 (template_var 4,
                  template_app
                   (template_app (template_hole 42, template_var 3),
                    template_var 2))),
              template_hole 29)),
          template_hole 28),
        template_equation
         (template_app
           (template_app
             (template_hole 26,
              template_app
               (template_app
                 (template_hole 30,
                  template_app
                   (template_var 4,
                    template_app
                     (template_app (template_hole 42, template_var 3),
                      template_var 2))),
                template_hole 29)),
            template_var 1),
          template_hole 25),
        template_predicate (template_app (template_hole 24, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Poincare_MapTemplates"
### 1.308s elapsed time, 1.618s cpu time, 0.193s GC time
val it = (): unit
