Loading theory "Automatic_Refinement.Foldi" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Refine_Lib")
Loading theory "HOL-Eisbach.Eisbach" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Refine_Lib" via "Automatic_Refinement.Misc")
Loading theory "Automatic_Refinement.Prio_List" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Refine_Lib")
Loading theory "Automatic_Refinement.Refine_Util_Bootstrap1" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Refine_Lib" via "Automatic_Refinement.Refine_Util")
signature PARSE_TOOLS =
  sig
    val is_real_val: ('a, 'b) parse_val -> bool
    val name_term: (term, string) parse_val parser
    val parse_term_val: 'a parser -> (term, 'a) parse_val parser
    val parse_thm_val: 'a parser -> (thm, 'a) parse_val parser
    datatype ('a, 'b) parse_val
    = Parse_Val of 'b * ('a -> unit) | Real_Val of 'a
    val parse_val_cases:
       ('a -> 'b) -> ('b, 'a) parse_val -> 'b * ('b -> unit)
    val the_parse_fun: ('a, 'b) parse_val -> 'a -> unit
    val the_parse_val: ('a, 'b) parse_val -> 'b
    val the_real_val: ('a, 'b) parse_val -> 'a
  end
structure Parse_Tools: PARSE_TOOLS
infix 1 ##
signature BASIC_REFINE_UTIL =
  sig
    val ## : ('a -> 'b) * ('c -> 'd) -> 'a * 'c -> 'b * 'd
    val map_fold: ('a -> 'b -> 'c * 'b) -> 'a list -> 'b -> 'c list * 'b
    val map_option: ('a -> 'b) -> 'a option -> 'b option
    val seq_is_empty: 'a Seq.seq -> bool * 'a Seq.seq
    val split: ('a -> bool) -> 'a list -> 'a list * 'a list
    val split_matching:
       ('a -> 'b -> bool) ->
         'a list -> 'b list -> ('b list * 'b list) option
    val yield_singleton2:
       ('a list -> 'b -> ('c * 'd list) * 'e) -> 'a -> 'b -> ('c * 'd) * 'e
  end
structure Basic_Refine_Util: BASIC_REFINE_UTIL
val map_option = fn: ('a -> 'b) -> 'a option -> 'b option
val split = fn: ('a -> bool) -> 'a list -> 'a list * 'a list
val map_fold = fn: ('a -> 'b -> 'c * 'b) -> 'a list -> 'b -> 'c list * 'b
val split_matching = fn:
   ('a -> 'b -> bool) -> 'a list -> 'b list -> ('b list * 'b list) option
val seq_is_empty = fn: 'a Seq.seq -> bool * 'a Seq.seq
val ## = fn: ('a -> 'b) * ('c -> 'd) -> 'a * 'c -> 'b * 'd
val yield_singleton2 = fn:
   ('a list -> 'b -> ('c * 'd list) * 'e) -> 'a -> 'b -> ('c * 'd) * 'e
consts
  foldli :: "'b list => ('a => bool) => ('b => 'a => 'a) => 'a => 'a"
### theory "Automatic_Refinement.Refine_Util_Bootstrap1"
### 0.032s elapsed time, 0.128s cpu time, 0.000s GC time
Loading theory "Automatic_Refinement.Mk_Term_Antiquot" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Refine_Lib" via "Automatic_Refinement.Refine_Util")
signature PRIO_LIST =
  sig
    type T
    val add_after: T -> item -> item -> T
    val add_before: T -> item -> item -> T
    val add_first: T -> item -> T
    val add_last: T -> item -> T
    val contains: T -> item -> bool
    val delete: item -> T -> T
    val dest: T -> item list
    val empty: T
    type item
    val merge: T * T -> T
    val merge': T * T -> item list * T
    val prio_of: (item -> bool) -> (item * item -> bool) -> T -> int
  end
functor Prio_List (sig val eq: item * item -> bool type item end): PRIO_LIST
### theory "Automatic_Refinement.Prio_List"
### 0.041s elapsed time, 0.163s cpu time, 0.000s GC time
Loading theory "Automatic_Refinement.Mpat_Antiquot" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Refine_Lib" via "Automatic_Refinement.Refine_Util")
signature METHOD_CLOSURE =
  sig
    val apply_method:
       Proof.context ->
         string ->
           term list ->
             thm list list ->
               (Proof.context -> Method.method) list ->
                 Proof.context -> thm list -> context_tactic
    val method:
       binding ->
         (binding * typ option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
    val method_cmd:
       binding ->
         (binding * string option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
  end
structure Method_Closure: METHOD_CLOSURE
val mk_term_antiquot = fn:
   Context.generic * Token.T list ->
     string * (Context.generic * Token.T list)
### theory "Automatic_Refinement.Mk_Term_Antiquot"
### 0.099s elapsed time, 0.371s cpu time, 0.025s GC time
Loading theory "Deriving.Comparator" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Enclosure_Operations" via "Affine_Arithmetic.Print" via "Affine_Arithmetic.Affine_Code" via "Affine_Arithmetic.Affine_Approximation" via "Affine_Arithmetic.Straight_Line_Program" via "Deriving.Derive" via "Deriving.Compare_Instances" via "Deriving.Compare_Generator" via "Deriving.Comparator_Generator")
### theory "Automatic_Refinement.Foldi"
### 0.133s elapsed time, 0.511s cpu time, 0.025s GC time
Loading theory "Deriving.Derive_Manager" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Enclosure_Operations" via "Affine_Arithmetic.Print" via "Affine_Arithmetic.Affine_Code" via "Affine_Arithmetic.Affine_Approximation" via "Affine_Arithmetic.Straight_Line_Program" via "Deriving.Derive" via "Deriving.Compare_Instances" via "Deriving.Compare_Generator" via "Deriving.Comparator_Generator")
signature DERIVE_MANAGER =
  sig
    val derive: string -> string -> string -> theory -> theory
    val derive_cmd: string -> string -> string -> theory -> theory
    val print_info: theory -> unit
    val register_derive:
       string ->
         string ->
           (string -> string -> theory -> theory) -> theory -> theory
  end
structure Derive_Manager: DERIVE_MANAGER
### theory "Deriving.Derive_Manager"
### 0.048s elapsed time, 0.191s cpu time, 0.000s GC time
Loading theory "Deriving.Generator_Aux" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Enclosure_Operations" via "Affine_Arithmetic.Print" via "Affine_Arithmetic.Affine_Code" via "Affine_Arithmetic.Affine_Approximation" via "Affine_Arithmetic.Straight_Line_Program" via "Deriving.Derive" via "Deriving.Compare_Instances" via "Deriving.Compare_Generator" via "Deriving.Comparator_Generator")
val mpat_antiquot = fn:
   Context.generic * Token.T list ->
     string * (Context.generic * Token.T list)
### theory "Automatic_Refinement.Mpat_Antiquot"
### 0.159s elapsed time, 0.614s cpu time, 0.025s GC time
Loading theory "Automatic_Refinement.Refine_Util" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Refine_Lib")
structure Eisbach_Rule_Insts: sig end
signature BNF_ACCESS =
  sig
    val bnf_types: Proof.context -> string list -> typ list
    val case_consts: Proof.context -> string list -> term list
    val case_simps: Proof.context -> string list -> thm list list
    val case_thms: Proof.context -> string list -> thm list
    val constr_argument_types:
       Proof.context -> string list -> typ list list list
    val constr_terms: Proof.context -> string -> term list
    val distinct_thms: Proof.context -> string list -> thm list list
    val induct_thms: Proof.context -> string list -> thm list
    val inject_thms: Proof.context -> string list -> thm list list
    val map_comps: Proof.context -> string list -> thm list
    val map_simps: Proof.context -> string list -> thm list list
    val map_terms: Proof.context -> string list -> term list
    val set_simps: Proof.context -> string list -> thm list list
    val set_terms: Proof.context -> string list -> term list list
  end
structure Bnf_Access: BNF_ACCESS
signature GENERATOR_AUX =
  sig
    val OF_option: thm -> thm option list -> thm
    val add_used_tycos:
       Proof.context -> string -> string list -> string list
    val alist_to_string: (string * 'a) list -> string
    val conjI_tac:
       thm list ->
         Proof.context ->
           'a list -> (Proof.context -> int -> tactic) -> tactic
    val create_map:
       (typ -> term) ->
         (string * typ -> 'a -> term) ->
           'a ->
             (typ -> bool) ->
               (local_theory -> string -> bool list) ->
                 (local_theory -> string -> term) ->
                   (local_theory -> string -> 'a -> term) ->
                     string list ->
                       (local_theory -> string -> 'a) ->
                         typ -> local_theory -> term
    val create_partial:
       'a ->
         (typ -> bool) ->
           (local_theory -> string -> bool list) ->
             (local_theory -> string -> term) ->
               (local_theory -> string -> 'a -> term) ->
                 string list ->
                   (local_theory -> string -> 'a) ->
                     typ -> local_theory -> term
    val define_overloaded:
       string * term -> local_theory -> thm * local_theory
    val define_overloaded_generic:
       Attrib.binding * term -> local_theory -> thm * local_theory
    val drop_last: 'a list -> 'a list
    val freeify_tvars: typ -> typ
    val ind_case_to_idxs: 'a list list -> int -> int * int
    val infer_type: Proof.context -> term -> term
    val ints_to_subscript: int list -> string
    val is_class_instance: theory -> string -> sort -> bool
    val lambdas: term list -> term -> term
    val mk_case_tac:
       Proof.context ->
         term option list list ->
           thm ->
             (int ->
                Proof.context * thm list * (string * cterm) list -> tactic)
               -> tactic
    val mk_def: typ -> string -> term -> term
    val mk_id: typ -> term
    val mk_infer_const: string -> Proof.context -> term -> term
    val mutual_recursive_types:
       string -> Proof.context -> string list * typ list
    val prove_multi_future:
       Proof.context ->
         string list ->
           term list ->
             term list ->
               ({context: Proof.context, prems: thm list} -> tactic) ->
                 thm list
    val recursor:
       (string -> 'a) * ('a -> bool list) * string list ->
         bool ->
           (typ -> 'b) ->
             (typ -> 'b) ->
               (typ -> 'b) ->
                 ((typ * 'b option) list * 'a -> 'b) -> typ -> 'b
    val rename_types: (typ * typ) list -> term -> term
    val split_IHs:
       (string -> 'a) * ('a -> bool list) * string list ->
         typ list -> thm list -> thm list list
    val std_recursor_tac:
       (string -> 'a) * ('a -> bool list) * string list ->
         typ list ->
           ('a -> thm) ->
             thm list -> typ -> thm list -> Proof.context -> tactic
    val sub: string -> string
    val subT: string -> typ -> string
    val typ_and_vs_of_typname:
       theory -> string -> sort -> typ * (string * sort) list
    val typ_and_vs_of_used_typname:
       string ->
         bool list -> string list -> typ * (string * string list) list
    val type_parameters:
       typ -> Proof.context -> (string * sort) list * typ list
  end
structure Generator_Aux: GENERATOR_AUX
### theory "Deriving.Generator_Aux"
### 0.134s elapsed time, 0.505s cpu time, 0.031s GC time
Loading theory "Deriving.Equality_Generator" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Enclosure_Operations" via "Affine_Arithmetic.Print" via "Affine_Arithmetic.Affine_Code" via "Affine_Arithmetic.Affine_Approximation" via "Affine_Arithmetic.Straight_Line_Program" via "Deriving.Derive" via "Deriving.Equality_Instances")
### ML warning (line 170 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 187 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 309 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
signature MATCH_METHOD =
  sig
    val focus_params: Proof.context -> term list
    val focus_schematics: Proof.context -> Envir.tenv
  end
structure Match_Method: MATCH_METHOD
val method_evaluate = fn: Method.text -> Proof.context -> thm list -> tactic
### theory "HOL-Eisbach.Eisbach"
### 0.500s elapsed time, 1.925s cpu time, 0.095s GC time
Loading theory "HOL-Library.AList" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "HOL-ODE-Numerics.GenCF_No_Comp" via "Collections.Impl_Array_Map" via "Collections.Diff_Array" via "Collections.Assoc_List")
Found termination order: "{}"
locale comparator
  fixes comp :: "'a => 'a => order"
  assumes "comparator comp"
consts
  update :: "'key => 'val => ('key * 'val) list => ('key * 'val) list"
### ML warning (line 563 of "$AFP/Automatic_Refinement/Lib/Refine_Util.thy"):
### Handler catches all exceptions.
infix 0 THEN_ELSE'
infix 0 THEN_ELSE_COMB'
infix 1 THEN_ALL_NEW_FWD
infix 1 THEN_INTERVAL
infix 2 ORELSE_INTERVAL
infix 3 ->>
type itactic = int -> int -> tactic
type tactic' = int -> tactic
signature BASIC_REFINE_UTIL =
  sig
    val ## : ('a -> 'b) * ('c -> 'd) -> 'a * 'c -> 'b * 'd
    val ->> :
       'a context_parser * ('a * Context.generic -> 'b * Context.generic) ->
         'b context_parser
    val ALL_GOALS_FWD: tactic' -> tactic
    val ALL_GOALS_FWD': tactic' -> tactic'
    val APPEND_LIST': tactic' list -> tactic'
    val CAN': tactic' -> tactic'
    val CASES': (tactic' * tactic) list -> tactic'
    val CONCL_COND': (term -> bool) -> tactic'
    val COND': (term -> bool) -> tactic'
    val IF_EXGOAL: (int -> tactic) -> tactic'
    val INTERVAL_FWD: tactic' -> int -> int -> tactic
    val NTIMES': tactic' -> int -> tactic'
    val ORELSE_INTERVAL: itactic * itactic -> itactic
    val REPEAT': tactic' -> tactic'
    val REPEAT_ALL_NEW_FWD: tactic' -> tactic'
    val REPEAT_DETERM': tactic' -> tactic'
    val RSm: Proof.context -> thm -> thm -> thm
    val SINGLE_INTERVAL: itactic -> tactic'
    val THEN_ALL_NEW_FWD: tactic' * tactic' -> tactic'
    val THEN_ELSE': tactic' * (tactic' * tactic') -> tactic'
    val THEN_ELSE_COMB':
       tactic' * ((tactic' * tactic' -> tactic') * tactic' * tactic') ->
         tactic'
    val THEN_INTERVAL: itactic * itactic -> itactic
    val TRADE: (Proof.context -> tactic') -> Proof.context -> tactic'
    val TRY_SOLVED': tactic' -> tactic'
    val WITH_concl: (term -> tactic') -> tactic'
    val WITH_subgoal: (term -> tactic') -> tactic'
    val elim_all_tac: Proof.context -> thm list -> tactic
    val eqsubst_inst_meth: (Proof.context -> Proof.method) context_parser
    val eqsubst_inst_tac:
       Proof.context ->
         bool ->
           int list ->
             ((indexname * Position.T) * string) list ->
               thm -> int -> tactic
    val fo_resolve_tac: thm list -> Proof.context -> tactic'
    val fo_rtac: thm -> Proof.context -> tactic'
    val has_Var: term -> bool
    val insert_subgoal_tac: cterm -> tactic'
    val insert_subgoals_tac: cterm list -> tactic'
    val is_Abs: term -> bool
    val is_Comb: term -> bool
    val is_TFree: typ -> bool
    val is_def_thm: thm -> bool
    type itactic = int -> int -> tactic
    val map_fold: ('a -> 'b -> 'c * 'b) -> 'a list -> 'b -> 'c list * 'b
    val map_option: ('a -> 'b) -> 'a option -> 'b option
    val prefer_tac: int -> tactic
    val rprem_tac: int -> Proof.context -> tactic'
    val rprems_tac: Proof.context -> tactic'
    val seq_is_empty: 'a Seq.seq -> bool * 'a Seq.seq
    val split: ('a -> bool) -> 'a list -> 'a list * 'a list
    val split_matching:
       ('a -> 'b -> bool) ->
         'a list -> 'b list -> ('b list * 'b list) option
    type tactic' = int -> tactic
    val yield_singleton2:
       ('a list -> 'b -> ('c * 'd list) * 'e) -> 'a -> 'b -> ('c * 'd) * 'e
  end
signature REFINE_UTIL =
  sig
    val ## : ('a -> 'b) * ('c -> 'd) -> 'a * 'c -> 'b * 'd
    val ->> :
       'a context_parser * ('a * Context.generic -> 'b * Context.generic) ->
         'b context_parser
    val ALL_GOALS_FWD: tactic' -> tactic
    val ALL_GOALS_FWD': tactic' -> tactic'
    val APPEND_LIST': tactic' list -> tactic'
    val CAN': tactic' -> tactic'
    val CASES': (tactic' * tactic) list -> tactic'
    val CONCL_COND': (term -> bool) -> tactic'
    val COND': (term -> bool) -> tactic'
    val HOL_concl_conv: (Proof.context -> conv) -> Proof.context -> conv
    val IF_EXGOAL: (int -> tactic) -> tactic'
    val INTERVAL_FWD: tactic' -> int -> int -> tactic
    val NTIMES': tactic' -> int -> tactic'
    val OF_fst: thm list -> thm list -> thm
    val ORELSE_INTERVAL: itactic * itactic -> itactic
    val REPEAT': tactic' -> tactic'
    val REPEAT_ALL_NEW_FWD: tactic' -> tactic'
    val REPEAT_DETERM': tactic' -> tactic'
    val RS_fst: thm -> thm list -> thm
    val RSm: Proof.context -> thm -> thm -> thm
    val SINGLE_INTERVAL: itactic -> tactic'
    val THEN_ALL_NEW_FWD: tactic' * tactic' -> tactic'
    val THEN_ELSE': tactic' * (tactic' * tactic') -> tactic'
    val THEN_ELSE_COMB':
       tactic' * ((tactic' * tactic' -> tactic') * tactic' * tactic') ->
         tactic'
    val THEN_INTERVAL: itactic * itactic -> itactic
    val TRADE: (Proof.context -> tactic') -> Proof.context -> tactic'
    val TRY_SOLVED': tactic' -> tactic'
    val WITH_concl: (term -> tactic') -> tactic'
    val WITH_subgoal: (term -> tactic') -> tactic'
    val abs_def: Proof.context -> thm -> thm
    val anorm_term: term -> term
    val anorm_typ: typ -> typ
    val apply_configs:
       ('a Config.T * 'a) list -> Proof.context -> Proof.context
    val build_res_net: thm list -> (int * thm) Net.net
    val cfg_trace_f_tac_conv: bool Config.T
    val changed_rule: (thm -> thm) -> thm -> thm
    val dest_itselfT: typ -> typ
    val dummify_tvars: term -> term
    val elim_all_tac: Proof.context -> thm list -> tactic
    val eqsubst_inst_meth: (Proof.context -> Proof.method) context_parser
    val eqsubst_inst_tac:
       Proof.context ->
         bool ->
           int list ->
             ((indexname * Position.T) * string) list ->
               thm -> int -> tactic
    val f_tac_conv:
       Proof.context -> (term -> term) -> (Proof.context -> tactic) -> conv
    val fcomb_conv: conv -> conv
    val fix_conv: Proof.context -> conv -> conv
    val fix_left_tuple_from_Ts:
       string -> typ list -> Proof.context -> term * Proof.context
    val fixup_vars: cterm -> thm -> thm
    val fixup_vars_conv: conv -> conv
    val fixup_vars_conv': (Proof.context -> conv) -> Proof.context -> conv
    val fo_matches: theory -> cterm -> term -> bool
    val fo_matchp: theory -> cterm -> term -> term list option
    val fo_resolve_tac: thm list -> Proof.context -> tactic'
    val fo_rtac: thm -> Proof.context -> tactic'
    val fold_binop_left:
       ('a -> 'b * 'a) ->
         ('c -> 'a -> 'b * 'a) ->
           ('b * 'b -> 'b) -> 'c list -> 'a -> 'b * 'a
    val fsub_conv: (Proof.context -> conv) -> Proof.context -> conv
    val ftop_conv: (Proof.context -> conv) -> Proof.context -> conv
    val has_Var: term -> bool
    val import_conv: (Proof.context -> conv) -> Proof.context -> conv
    val import_cterms:
       bool -> cterm list -> Proof.context -> cterm list * Proof.context
    val insert_subgoal_tac: cterm -> tactic'
    val insert_subgoals_tac: cterm list -> tactic'
    val instantiate_tuples:
       Proof.context -> (indexname * typ) list -> thm -> thm
    val instantiate_tuples_from_term_tac: Proof.context -> term -> tactic
    val instantiate_tuples_subgoal_tac: Proof.context -> tactic'
    val is_Abs: term -> bool
    val is_Comb: term -> bool
    val is_TFree: typ -> bool
    val is_def_thm: thm -> bool
    type itactic = int -> int -> tactic
    val ite_conv: conv -> conv -> conv -> conv
    val lambda_tuple: term list -> term -> term
    val list_binop_left: 'a -> ('a * 'a -> 'a) -> 'a list -> 'a
    val list_prodT_left: typ list -> typ
    val map_fold: ('a -> 'b -> 'c * 'b) -> 'a list -> 'b -> 'c list * 'b
    val map_option: ('a -> 'b) -> 'a option -> 'b option
    val mk_compN: int -> term -> term -> term
    val mk_compN1: typ list -> int -> term -> term -> term
    val mk_ltuple: term list -> term
    val monitor_conv: string -> conv -> conv
    val monitor_conv':
       string -> (Proof.context -> conv) -> Proof.context -> conv
    val order_by: ('a * 'a -> order) -> ('b -> 'a) -> 'b list -> 'b list
    val parse_bool_config: string -> bool Config.T -> bool context_parser
    val parse_bool_config':
       string ->
         bool Config.T ->
           Token.T list -> (bool Config.T * bool) * Token.T list
    val parse_paren_list: 'a context_parser -> 'a list context_parser
    val parse_paren_list':
       'a parser -> Token.T list -> 'a list * Token.T list
    val parse_paren_lists: 'a context_parser -> 'a list list context_parser
    val pat_conv: cterm -> (Proof.context -> conv) -> Proof.context -> conv
    val pat_conv':
       cterm -> (string -> Proof.context -> conv) -> Proof.context -> conv
    val prefer_tac: int -> tactic
    val repeat_rule: (thm -> thm) -> thm -> thm
    val rprem_tac: int -> Proof.context -> tactic'
    val rprems_tac: Proof.context -> tactic'
    val seq_is_empty: 'a Seq.seq -> bool * 'a Seq.seq
    val shift_lambda_left: thm -> thm
    val shift_lambda_leftN: int -> thm -> thm
    val split: ('a -> bool) -> 'a list -> 'a list * 'a list
    val split_matching:
       ('a -> 'b -> bool) ->
         'a list -> 'b list -> ('b list * 'b list) option
    val strip_prodT_left: typ -> typ list
    val subsume_sort: ('a -> term) -> theory -> 'a list -> 'a list
    val subsume_sort_gen:
       ('a -> term) -> Context.generic -> 'a list -> 'a list
    type tactic' = int -> tactic
    val trace_conv: conv
    val trade_rule:
       (Proof.context -> thm -> thm) -> Proof.context -> thm -> thm
    val try_rule: (thm -> thm) -> thm -> thm
    val yield_singleton2:
       ('a list -> 'b -> ('c * 'd list) * 'e) -> 'a -> 'b -> ('c * 'd) * 'e
  end
structure Refine_Util: REFINE_UTIL
structure Basic_Refine_Util: BASIC_REFINE_UTIL
val map_option = fn: ('a -> 'b) -> 'a option -> 'b option
val split = fn: ('a -> bool) -> 'a list -> 'a list * 'a list
val REPEAT_DETERM' = fn: tactic' -> tactic'
val RSm = fn: Proof.context -> thm -> thm -> thm
val NTIMES' = fn: tactic' -> int -> tactic'
val fo_resolve_tac = fn: thm list -> Proof.context -> tactic'
val SINGLE_INTERVAL = fn: itactic -> tactic'
val insert_subgoals_tac = fn: cterm list -> tactic'
val insert_subgoal_tac = fn: cterm -> tactic'
val THEN_ALL_NEW_FWD = fn: tactic' * tactic' -> tactic'
val TRY_SOLVED' = fn: tactic' -> tactic'
val INTERVAL_FWD = fn: tactic' -> int -> int -> tactic
val IF_EXGOAL = fn: (int -> tactic) -> tactic'
val eqsubst_inst_tac = fn:
   Proof.context ->
     bool ->
       int list ->
         ((indexname * Position.T) * string) list -> thm -> int -> tactic
val fo_rtac = fn: thm -> Proof.context -> tactic'
val TRADE = fn: (Proof.context -> tactic') -> Proof.context -> tactic'
val is_TFree = fn: typ -> bool
val ALL_GOALS_FWD = fn: tactic' -> tactic
val yield_singleton2 = fn:
   ('a list -> 'b -> ('c * 'd list) * 'e) -> 'a -> 'b -> ('c * 'd) * 'e
val ## = fn: ('a -> 'b) * ('c -> 'd) -> 'a * 'c -> 'b * 'd
val CAN' = fn: tactic' -> tactic'
val WITH_concl = fn: (term -> tactic') -> tactic'
val is_Abs = fn: term -> bool
val COND' = fn: (term -> bool) -> tactic'
val split_matching = fn:
   ('a -> 'b -> bool) -> 'a list -> 'b list -> ('b list * 'b list) option
val REPEAT_ALL_NEW_FWD = fn: tactic' -> tactic'
val CASES' = fn: (tactic' * tactic) list -> tactic'
val APPEND_LIST' = fn: tactic' list -> tactic'
val map_fold = fn: ('a -> 'b -> 'c * 'b) -> 'a list -> 'b -> 'c list * 'b
val is_def_thm = fn: thm -> bool
val THEN_INTERVAL = fn: itactic * itactic -> itactic
val rprems_tac = fn: Proof.context -> tactic'
val WITH_subgoal = fn: (term -> tactic') -> tactic'
val is_Comb = fn: term -> bool
val THEN_ELSE_COMB' = fn:
   tactic' * ((tactic' * tactic' -> tactic') * tactic' * tactic') -> tactic'
val eqsubst_inst_meth = fn: (Proof.context -> Proof.method) context_parser
val elim_all_tac = fn: Proof.context -> thm list -> tactic
val ->> = fn:
   'a context_parser * ('a * Context.generic -> 'b * Context.generic) ->
     'b context_parser
val ALL_GOALS_FWD' = fn: tactic' -> tactic'
val prefer_tac = fn: int -> tactic
val rprem_tac = fn: int -> Proof.context -> tactic'
val has_Var = fn: term -> bool
val REPEAT' = fn: tactic' -> tactic'
val THEN_ELSE' = fn: tactic' * (tactic' * tactic') -> tactic'
val CONCL_COND' = fn: (term -> bool) -> tactic'
val ORELSE_INTERVAL = fn: itactic * itactic -> itactic
val seq_is_empty = fn: 'a Seq.seq -> bool * 'a Seq.seq
### theory "Automatic_Refinement.Refine_Util"
### 0.360s elapsed time, 1.409s cpu time, 0.118s GC time
Loading theory "Automatic_Refinement.Anti_Unification" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Refine_Lib")
signature EQUALITY_GENERATOR =
  sig
    val ensure_info: equality_type -> string -> local_theory -> local_theory
    datatype equality_type = BNF | EQ
    val generate_equality:
       equality_type -> string -> local_theory -> local_theory
    val generate_equalitys_from_bnf_fp:
       string ->
         local_theory ->
           ((term * thm list) list * (term * thm) list) * local_theory
    val get_info: Proof.context -> string -> info option
    type info =
       {equality: term,
        equality_def: thm option,
        equality_thm: thm,
        map: term,
        map_comp: thm option,
        partial_equality_thm: thm,
        pequality: term, used_positions: bool list}
    val register_equality_of: string -> local_theory -> local_theory
    val register_foreign_equality:
       typ -> term -> thm -> local_theory -> local_theory
    val register_foreign_partial_and_full_equality:
       string ->
         term ->
           term ->
             term ->
               thm option ->
                 thm option ->
                   thm -> thm -> bool list -> local_theory -> local_theory
  end
structure Equality_Generator: EQUALITY_GENERATOR
### theory "Deriving.Equality_Generator"
### 0.285s elapsed time, 1.145s cpu time, 0.087s GC time
Loading theory "Automatic_Refinement.Attr_Comb" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Refine_Lib")
signature ANTI_UNIFICATION =
  sig
    val anti_unify: term * term -> term
    val anti_unifyT: typ * typ -> typ_env -> typ * typ_env
    val anti_unify_env: term * term -> env -> term * env
    val anti_unify_list: term list -> term
    val empty: env
    val empty_term: term_env
    val empty_typ: typ_env
    type env = typ_env * term_env
    val specialize_net_tac: Proof.context -> (int * thm) Net.net -> tactic'
    val specialize_tac: Proof.context -> thm list -> tactic'
    type term_env
    type typ_env
  end
structure Anti_Unification: ANTI_UNIFICATION
### theory "Automatic_Refinement.Anti_Unification"
### 0.062s elapsed time, 0.254s cpu time, 0.000s GC time
Loading theory "Automatic_Refinement.Autoref_Data" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops")
infixr 5 THEN_ATTR
infixr 4 ELSE_ATTR
signature ATTR_COMB =
  sig
    exception ATTR_EXC of string
    val CHECK_PREPARE:
       (Context.generic * thm -> bool) -> attribute -> attribute
    val COND_attr: (Context.generic * thm -> bool) -> attribute
    val EFF_ATTR: (Context.generic * thm -> 'a) -> attribute
    val ELSE_ATTR: attribute * attribute -> attribute
    val ID_ATTR: attribute
    val IGNORE_THM: attribute -> attribute
    val ITE_ATTR: attribute -> attribute -> attribute -> attribute
    val ITE_ATTR': attribute -> attribute -> (exn -> attribute) -> attribute
    val NO_ATTR: attribute
    val RPT1_ATTR: attribute -> attribute
    val RPT_ATTR: attribute -> attribute
    val RS_attr: thm -> attribute
    val RSm_attr: thm -> attribute
    val THEN_ATTR: attribute * attribute -> attribute
    val TRACE_ATTR: string -> attribute -> attribute
    val TRY_ATTR: attribute -> attribute
    val WARN_ATTR: Context.generic -> string -> attribute
  end
structure Attr_Comb: ATTR_COMB
### theory "Automatic_Refinement.Attr_Comb"
### 0.061s elapsed time, 0.224s cpu time, 0.028s GC time
Loading theory "Automatic_Refinement.Named_Sorted_Thms" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Refine_Lib")
signature AUTOREF_DATA =
  sig
    type T
    exception exCIRCULAR
    exception exNULL
    val get: Proof.context -> T
    val init: Proof.context -> Proof.context
  end
functor Autoref_Data (
  sig
    type T
    val compute: Proof.context -> T
    val prereq: (Proof.context -> Proof.context) list
  end
  ): 
  AUTOREF_DATA
### theory "Automatic_Refinement.Autoref_Data"
### 0.039s elapsed time, 0.139s cpu time, 0.028s GC time
Loading theory "Automatic_Refinement.Indep_Vars" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Refine_Lib")
signature NAMED_SORTED_THMS =
  sig
    val add: attribute
    val add_thm: thm -> Context.generic -> Context.generic
    val del: attribute
    val del_thm: thm -> Context.generic -> Context.generic
    val get: Proof.context -> thm list
    val member: Proof.context -> thm -> bool
    val setup: theory -> theory
  end
functor Named_Sorted_Thms (
  sig
    val description: string
    val name: binding
    val sort: Context.generic -> thm list -> thm list
    val transform: Context.generic -> thm -> thm list
  end
  ): 
  NAMED_SORTED_THMS
### theory "Automatic_Refinement.Named_Sorted_Thms"
### 0.029s elapsed time, 0.123s cpu time, 0.000s GC time
Loading theory "Automatic_Refinement.Mk_Record_Simp" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Refine_Lib")
consts
  update_with_aux ::
    "'val
     => 'key => ('val => 'val) => ('key * 'val) list => ('key * 'val) list"
signature INDEP_VARS = sig val indep_tac: Proof.context -> tactic' end
structure Indep_Vars: INDEP_VARS
### theory "Automatic_Refinement.Indep_Vars"
### 0.040s elapsed time, 0.160s cpu time, 0.000s GC time
Loading theory "Automatic_Refinement.Tagged_Solver" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Refine_Lib")
val mk_record_simp = fn: Context.generic -> thm -> thm
### theory "Automatic_Refinement.Mk_Record_Simp"
### 0.037s elapsed time, 0.147s cpu time, 0.000s GC time
Loading theory "Automatic_Refinement.Select_Solve" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Refine_Lib")
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
signature SELECT_SOLVE =
  sig
    val AS_FIRSTGOAL: tactic -> tactic'
    val IF_SUBGOAL_SOLVED: tactic -> tactic -> tactic -> tactic
    val PREFER_SOLVED: tactic -> tactic
    val REPEAT_SOLVE_FWD_SELECT: Proof.context -> int -> tactic' -> tactic'
    val SELECT_FIRST: Proof.context -> tactic -> tactic
    val TRY_SOLVE_FWD: int -> tactic -> tactic
  end
structure Select_Solve: SELECT_SOLVE
### theory "Automatic_Refinement.Select_Solve"
### 0.062s elapsed time, 0.252s cpu time, 0.000s GC time
Loading theory "Deriving.Equality_Instances" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Enclosure_Operations" via "Affine_Arithmetic.Print" via "Affine_Arithmetic.Affine_Code" via "Affine_Arithmetic.Affine_Approximation" via "Affine_Arithmetic.Straight_Line_Program" via "Deriving.Derive")
signature TAGGED_SOLVER =
  sig
    val add_triggers:
       string -> thm list -> morphism -> Context.generic -> Context.generic
    val cfg_full: bool Config.T
    val cfg_keep: bool Config.T
    val cfg_step: bool Config.T
    val cfg_trace: bool Config.T
    val declare_solver:
       thm list ->
         binding ->
           string ->
             (Proof.context -> tactic') ->
               morphism -> Context.generic -> Context.generic
    val delete_solver:
       string -> morphism -> Context.generic -> Context.generic
    val get_potential_solvers: Proof.context -> int -> thm -> solver list
    val get_potential_tacs: Proof.context -> int -> thm -> tactic' list
    val get_solvers: Proof.context -> solver list
    val lookup_solver: string -> Context.generic -> solver option
    val pretty_solvers: Proof.context -> Pretty.T
    val solve_full_keep_tac: Proof.context -> tactic'
    val solve_full_step_tac: Proof.context -> tactic'
    val solve_full_tac: Proof.context -> tactic'
    val solve_greedy_keep_tac: Proof.context -> tactic'
    val solve_greedy_step_tac: Proof.context -> tactic'
    val solve_greedy_tac: Proof.context -> tactic'
    val solve_tac: Proof.context -> tactic'
    type solver = thm list * string * string * (Proof.context -> tactic')
    val tac_of_solver: Proof.context -> solver -> tactic'
  end
structure Tagged_Solver: TAGGED_SOLVER
### theory "Automatic_Refinement.Tagged_Solver"
### 0.108s elapsed time, 0.408s cpu time, 0.037s GC time
Loading theory "HOL-Library.Adhoc_Overloading" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "HOL-Library.Monad_Syntax")
### theory "Deriving.Comparator"
### 0.704s elapsed time, 2.741s cpu time, 0.182s GC time
Loading theory "Deriving.Compare" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Enclosure_Operations" via "Affine_Arithmetic.Print" via "Affine_Arithmetic.Affine_Code" via "Affine_Arithmetic.Affine_Approximation" via "Affine_Arithmetic.Straight_Line_Program" via "Deriving.Derive" via "Deriving.Compare_Instances" via "Deriving.Compare_Generator")
generating equality for type "Sum_Type.sum"
generating equality for type "List.list"
generating equality for type "Product_Type.prod"
generating equality for type "Option.option"
class compare = type +
  fixes compare :: "'a => 'a => order"
  assumes "comparator_compare": "comparator compare"
### theory "Deriving.Equality_Instances"
### 0.112s elapsed time, 0.429s cpu time, 0.037s GC time
Loading theory "Deriving.Comparator_Generator" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Enclosure_Operations" via "Affine_Arithmetic.Print" via "Affine_Arithmetic.Affine_Code" via "Affine_Arithmetic.Affine_Approximation" via "Affine_Arithmetic.Straight_Line_Program" via "Deriving.Derive" via "Deriving.Compare_Instances" via "Deriving.Compare_Generator")
signature ADHOC_OVERLOADING =
  sig
    val generic_add_overloaded: string -> Context.generic -> Context.generic
    val generic_add_variant:
       string -> term -> Context.generic -> Context.generic
    val generic_remove_overloaded:
       string -> Context.generic -> Context.generic
    val generic_remove_variant:
       string -> term -> Context.generic -> Context.generic
    val is_overloaded: Proof.context -> string -> bool
    val show_variants: bool Config.T
  end
structure Adhoc_Overloading: ADHOC_OVERLOADING
### theory "HOL-Library.Adhoc_Overloading"
### 0.081s elapsed time, 0.331s cpu time, 0.000s GC time
Loading theory "HOL-Library.Monad_Syntax" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic")
### theory "HOL-Library.Monad_Syntax"
### 0.038s elapsed time, 0.144s cpu time, 0.000s GC time
Loading theory "HOL-ex.Quicksort" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Refine_Lib" via "Automatic_Refinement.Misc")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class compare_order = compare + ord +
  assumes "ord_defs": "le_of_comp compare = (<=)" "lt_of_comp compare = (<)"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
### theory "HOL-ex.Quicksort"
### 0.449s elapsed time, 1.727s cpu time, 0.158s GC time
Loading theory "HOL-Library.Char_ord" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Enclosure_Operations" via "Affine_Arithmetic.Print" via "Affine_Arithmetic.Affine_Code" via "Affine_Arithmetic.Affine_Approximation" via "Affine_Arithmetic.Straight_Line_Program" via "Deriving.Derive" via "Deriving.Compare_Instances")
instantiation
  char :: linorder
  less_eq_char == less_eq :: char => char => bool
  less_char == less :: char => char => bool
instantiation
  char :: distrib_lattice
  inf_char == inf :: char => char => char
  sup_char == sup :: char => char => char
### theory "HOL-Library.Char_ord"
### 0.073s elapsed time, 0.288s cpu time, 0.000s GC time
Loading theory "HOL-Combinatorics.List_Permutation" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Enclosure_Operations" via "Affine_Arithmetic.Print" via "Affine_Arithmetic.Affine_Code" via "Affine_Arithmetic.Affine_Approximation" via "Affine_Arithmetic.Affine_Form")
class compare_order = compare + linorder +
  assumes "ord_defs": "le_of_comp compare = (<=)" "lt_of_comp compare = (<)"
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
### theory "HOL-Combinatorics.List_Permutation"
### 0.284s elapsed time, 0.995s cpu time, 0.530s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Examples_IntegralTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "HOL-Library.AList"
### 1.270s elapsed time, 4.793s cpu time, 0.835s GC time
Loading theory "HOL-Library.Mapping" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Enclosure_Operations" via "Affine_Arithmetic.Print" via "Affine_Arithmetic.Affine_Code" via "Affine_Arithmetic.Affine_Approximation")
signature COMPARE_CODE =
  sig
    val change_compare_code:
       term -> string list -> local_theory -> local_theory
  end
structure Compare_Code: COMPARE_CODE
### theory "Deriving.Compare"
### 0.952s elapsed time, 3.557s cpu time, 0.723s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Examples_IntegralTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
signature COMPARATOR_GENERATOR =
  sig
    datatype comparator_type = BNF | Linorder
    val ensure_info:
       comparator_type -> string -> local_theory -> local_theory
    val generate_comparator:
       comparator_type -> string -> local_theory -> local_theory
    val generate_comparators_from_bnf_fp:
       string ->
         local_theory ->
           ((term * thm list) list * (term * thm) list) * local_theory
    val get_info: Proof.context -> string -> info option
    type info =
       {comp: term,
        comp_def: thm option,
        comp_thm: thm,
        map: term,
        map_comp: thm option,
        partial_comp_thms: thm list, pcomp: term, used_positions: bool list}
    val register_comparator_of: string -> local_theory -> local_theory
    val register_foreign_comparator:
       typ -> term -> thm -> local_theory -> local_theory
    val register_foreign_partial_and_full_comparator:
       string ->
         term ->
           term ->
             term ->
               thm option ->
                 thm option ->
                   thm ->
                     thm ->
                       thm ->
                         thm -> bool list -> local_theory -> local_theory
  end
structure Comparator_Generator: COMPARATOR_GENERATOR
### theory "Deriving.Comparator_Generator"
### 0.892s elapsed time, 3.317s cpu time, 0.723s GC time
Loading theory "Deriving.Compare_Generator" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Enclosure_Operations" via "Affine_Arithmetic.Print" via "Affine_Arithmetic.Affine_Code" via "Affine_Arithmetic.Affine_Approximation" via "Affine_Arithmetic.Straight_Line_Program" via "Deriving.Derive" via "Deriving.Compare_Instances")
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.109s elapsed time, 0.438s cpu time, 0.000s GC time
Loading theory "HOL-Library.Option_ord" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Refine_Lib" via "Automatic_Refinement.Misc")
instantiation
  option :: (preorder) preorder
  less_eq_option == less_eq :: 'a option => 'a option => bool
  less_option == less :: 'a option => 'a option => bool
instantiation
  option :: (order) order_bot
  bot_option == bot :: 'a option
instantiation
  option :: (order_top) order_top
  top_option == top :: 'a option
instantiation
  option :: (inf) inf
  inf_option == inf :: 'a option => 'a option => 'a option
instantiation
  option :: (sup) sup
  sup_option == sup :: 'a option => 'a option => 'a option
instantiation
  option :: (complete_lattice) complete_lattice
  Inf_option == Inf :: 'a option set => 'a option
  Sup_option == Sup :: 'a option set => 'a option
signature COMPARE_GENERATOR =
  sig
    val compare_instance:
       Comparator_Generator.comparator_type -> string -> theory -> theory
    val compare_order_instance_via_comparator_of: string -> theory -> theory
    val compare_order_instance_via_compare: string -> theory -> theory
  end
structure Compare_Generator: COMPARE_GENERATOR
### theory "Deriving.Compare_Generator"
### 0.340s elapsed time, 1.335s cpu time, 0.103s GC time
Loading theory "Deriving.Compare_Instances" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Enclosure_Operations" via "Affine_Arithmetic.Print" via "Affine_Arithmetic.Affine_Code" via "Affine_Arithmetic.Affine_Approximation" via "Affine_Arithmetic.Straight_Line_Program" via "Deriving.Derive")
### theory "HOL-Library.Option_ord"
### 0.349s elapsed time, 1.340s cpu time, 0.191s GC time
Loading theory "Automatic_Refinement.Misc" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Refine_Lib")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
instantiation
  mapping :: (type, type) equal
  equal_mapping == equal_class.equal ::
    ('a, 'b) mapping => ('a, 'b) mapping => bool
deriving "compare_order" instance for type "Int.int"
deriving "compare" instance for type "Int.int"
deriving "compare_order" instance for type "Code_Numeral.integer"
deriving "compare" instance for type "Code_Numeral.integer"
consts
  snth :: "'a stream => nat => 'a"
deriving "compare_order" instance for type "Nat.nat"
deriving "compare" instance for type "Nat.nat"
deriving "compare_order" instance for type "String.char"
deriving "compare" instance for type "String.char"
consts
  stake :: "nat => 'a stream => 'a list"
deriving "compare" instance for type "Sum_Type.sum"
generating comparator for type "Sum_Type.sum"
consts
  sdrop :: "nat => 'a stream => 'a stream"
deriving "compare" instance for type "List.list"
generating comparator for type "List.list"
deriving "compare" instance for type "Product_Type.prod"
generating comparator for type "Product_Type.prod"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
deriving "compare" instance for type "Option.option"
generating comparator for type "Option.option"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "{}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "{}"
deriving "compare" instance for type "HOL.bool"
deriving "compare" instance for type "Product_Type.unit"
locale combine_mapping_abel_semigroup
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
  assumes "combine_mapping_abel_semigroup (\<^bold>*)"
deriving "compare_order" instance for type "HOL.bool"
deriving "compare_order" instance for type "Product_Type.unit"
### theory "Deriving.Compare_Instances"
### 0.530s elapsed time, 2.049s cpu time, 0.250s GC time
Loading theory "HOL-Library.Parallel" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics")
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.201s elapsed time, 4.519s cpu time, 1.043s GC time
Loading theory "HOL-Library.Type_Length" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "HOL-ODE-Numerics.GenCF_No_Comp" via "Collections.Impl_Array_Hash_Map" via "Collections.Intf_Hash" via "Collections.HashCode" via "Native_Word.Uint32" via "Native_Word.Code_Target_Word_Base" via "HOL-Library.Word")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class len0 = type +
  fixes len_of :: "'a itself => nat"
locale Assoc
  fixes f :: "'a => 'a => 'a"
  assumes "Assoc f"
locale AC
  fixes f :: "'a => 'a => 'a"
  assumes "AC f"
locale su_rel_fun
  fixes F :: "('a * 'b) set"
    and f :: "'a => 'b"
  assumes "su_rel_fun F f"
class len = len0 +
  assumes "len_gt_0": "0 < LENGTH('a)"
instantiation
  0 :: len0
  1 :: len0
  len_of_num0 == len_of :: 0 itself => nat
  len_of_num1 == len_of :: 1 itself => nat
instantiation
  bit0 :: (len0) len0
  bit1 :: (len0) len0
  len_of_bit0 == len_of :: 'a bit0 itself => nat
  len_of_bit1 == len_of :: 'a bit1 itself => nat
instantiation
  Enum.finite_1 :: len
  len_of_finite_1 == len_of :: Enum.finite_1 itself => nat
instantiation
  Enum.finite_2 :: len
  len_of_finite_2 == len_of :: Enum.finite_2 itself => nat
instantiation
  Enum.finite_3 :: len
  len_of_finite_3 == len_of :: Enum.finite_3 itself => nat
### theory "HOL-Library.Mapping"
### 1.441s elapsed time, 5.422s cpu time, 1.162s GC time
Loading theory "HOL-Library.RBT_Impl" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "HOL-ODE-Numerics.GenCF_No_Comp" via "Collections.Impl_RBT_Map")
consts
  join :: "'a future => 'a"
### theory "HOL-Library.Parallel"
### 0.732s elapsed time, 2.666s cpu time, 0.899s GC time
Loading theory "HOL-Library.Signed_Division" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "HOL-ODE-Numerics.GenCF_No_Comp" via "Collections.Impl_Array_Hash_Map" via "Collections.Intf_Hash" via "Collections.HashCode" via "Native_Word.Uint32" via "Native_Word.Code_Target_Word_Base" via "Word_Lib.Signed_Division_Word")
class signed_division = type +
  fixes signed_divide :: "'a => 'a => 'a"
    and signed_modulo :: "'a => 'a => 'a"
instantiation
  int :: signed_division
  signed_divide_int == signed_divide :: int => int => int
  signed_modulo_int == signed_modulo :: int => int => int
### theory "HOL-Library.Signed_Division"
### 0.145s elapsed time, 0.556s cpu time, 0.079s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Examples_IntegralTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
class linordered_idom = ring_char_0 + idom_abs_sgn +
  linordered_ring_strict + linordered_semidom +
  linordered_semiring_1_strict + ordered_comm_ring + ordered_ring_abs +
  assumes
    "sgn_if":
      "!!x. sgn x =
            (if x = (0::'a) then 0::'a
             else if (0::'a) < x then 1::'a else - (1::'a))"
### theory "HOL-Library.Type_Length"
### 0.623s elapsed time, 2.393s cpu time, 0.289s GC time
Loading theory "HOL-Library.Word" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "HOL-ODE-Numerics.GenCF_No_Comp" via "Collections.Impl_Array_Hash_Map" via "Collections.Intf_Hash" via "Collections.HashCode" via "Native_Word.Uint32" via "Native_Word.Code_Target_Word_Base")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  word :: (len) comm_ring_1
  uminus_word == uminus :: 'a word => 'a word
  one_word == one_class.one :: 'a word
  times_word == times :: 'a word => 'a word => 'a word
  zero_word == zero_class.zero :: 'a word
  minus_word == minus :: 'a word => 'a word => 'a word
  plus_word == plus :: 'a word => 'a word => 'a word
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
signature WORD_LIB =
  sig
    val dest_binT: typ -> int
    val dest_wordT: typ -> int
    val is_wordT: typ -> bool
    val mk_wordT: int -> typ
  end
structure Word_Lib: WORD_LIB
### Ignoring duplicate rewrite rule:
### dom (%x. Some (?f1 x)) == UNIV
consts
  filter_rev_aux :: "'a list => ('a => bool) => 'a list => 'a list"
instantiation
  word :: (len) equal
  equal_word == equal_class.equal :: 'a word => 'a word => bool
### Missing patterns in function definition:
### !!a v va. zipf a (v # va) [] = undefined
### !!a v va. zipf a [] (v # va) = undefined
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class semiring_char_0 = semiring_1 +
  assumes "inj_of_nat": "inj of_nat"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  entries :: "('a, 'b) rbt => ('a * 'b) list"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
Found termination order: "size <*mlex*> {}"
consts
  rbt_sorted :: "('a, 'b) rbt => bool"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "size <*mlex*> {}"
consts
  rbt_lookup :: "('a, 'b) rbt => 'a => 'b option"
instantiation
  word :: (len) linorder
  less_eq_word == less_eq :: 'a word => 'a word => bool
  less_word == less :: 'a word => 'a word => bool
Found termination order: "size <*mlex*> {}"
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
Found termination order: "size <*mlex*> {}"
instantiation
  word :: (len) enum
  enum_word == enum_class.enum :: 'a word list
  enum_all_word == enum_class.enum_all :: ('a word => bool) => bool
  enum_ex_word == enum_class.enum_ex :: ('a word => bool) => bool
instantiation
  word :: (len) semiring_modulo
  modulo_word == modulo :: 'a word => 'a word => 'a word
  divide_word == divide :: 'a word => 'a word => 'a word
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "size <*mlex*> {}"
consts
  color_of :: "('a, 'b) rbt => color"
consts
  bheight :: "('a, 'b) rbt => nat"
instantiation
  word :: (len) semiring_bits
  bit_word == bit :: 'a word => nat => bool
consts
  inv1 :: "('a, 'b) rbt => bool"
consts
  inv1l :: "('a, 'b) rbt => bool"
consts
  inv2 :: "('a, 'b) rbt => bool"
Found termination order: "size <*mlex*> {}"
instantiation
  word :: (len) ring_bit_operations
  not_word == not :: 'a word => 'a word
  and_word == and :: 'a word => 'a word => 'a word
  or_word == or :: 'a word => 'a word => 'a word
  xor_word == xor :: 'a word => 'a word => 'a word
  mask_word == mask :: nat => 'a word
  set_bit_word == set_bit :: nat => 'a word => 'a word
  unset_bit_word == unset_bit :: nat => 'a word => 'a word
  flip_bit_word == flip_bit :: nat => 'a word => 'a word
  push_bit_word == push_bit :: nat => 'a word => 'a word
  drop_bit_word == drop_bit :: nat => 'a word => 'a word
  take_bit_word == take_bit :: nat => 'a word => 'a word
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Code generator: dropping subsumed code equation
### quicksort (?x # ?xs) ==
### quicksort (filter (%y. y < ?x) ?xs) @
### [?x] @ quicksort (filter ((<=) ?x) ?xs)
### Code generator: dropping subsumed code equation
### quicksort [] == []
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
class semiring_bits = semiring_parity +
  fixes bit :: "'a => nat => bool"
  assumes
    "bits_induct":
      "!!P a.
          [| !!a. a div (2::'a) = a ==> P a;
             !!a b.
                [| P a; (of_bool b + (2::'a) * a) div (2::'a) = a |]
                ==> P (of_bool b + (2::'a) * a) |]
          ==> P a"
  assumes "bits_div_0": "!!a. (0::'a) div a = (0::'a)"
    and "bits_div_by_1": "!!a. a div (1::'a) = a"
    and "bits_mod_div_trivial": "!!a b. a mod b div b = (0::'a)"
    and
    "even_succ_div_2":
      "!!a. even a ==> ((1::'a) + a) div (2::'a) = a div (2::'a)"
    and
    "even_mask_div_iff":
      "!!m n.
          even (((2::'a) ^ m - (1::'a)) div (2::'a) ^ n) =
          ((2::'a) ^ n = (0::'a) | m <= n)"
    and
    "exp_div_exp_eq":
      "!!m n.
          (2::'a) ^ m div (2::'a) ^ n =
          of_bool ((2::'a) ^ m ~= (0::'a) & n <= m) * (2::'a) ^ (m - n)"
    and
    "div_exp_eq":
      "!!a m n. a div (2::'a) ^ m div (2::'a) ^ n = a div (2::'a) ^ (m + n)"
    and
    "mod_exp_eq":
      "!!a m n. a mod (2::'a) ^ m mod (2::'a) ^ n = a mod (2::'a) ^ min m n"
    and
    "mult_exp_mod_exp_eq":
      "!!m n a.
          m <= n ==>
          a * (2::'a) ^ m mod (2::'a) ^ n =
          a mod (2::'a) ^ (n - m) * (2::'a) ^ m"
    and
    "div_exp_mod_exp_eq":
      "!!a n m.
          a div (2::'a) ^ n mod (2::'a) ^ m =
          a mod (2::'a) ^ (n + m) div (2::'a) ^ n"
    and
    "even_mult_exp_div_exp_iff":
      "!!a m n.
          even (a * (2::'a) ^ m div (2::'a) ^ n) =
          (n < m |
           (2::'a) ^ n = (0::'a) | m <= n & even (a div (2::'a) ^ (n - m)))"
  assumes "bit_iff_odd": "!!a n. bit a n = odd (a div (2::'a) ^ n)"
Found termination order:
  "(%p. length (snd (snd p))) <*mlex*>
   (%p. length (fst (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class semiring_bit_operations = semiring_bits +
  fixes "and" :: "'a => 'a => 'a"
    and or :: "'a => 'a => 'a"
    and xor :: "'a => 'a => 'a"
    and mask :: "nat => 'a"
    and set_bit :: "nat => 'a => 'a"
    and unset_bit :: "nat => 'a => 'a"
    and flip_bit :: "nat => 'a => 'a"
    and push_bit :: "nat => 'a => 'a"
    and drop_bit :: "nat => 'a => 'a"
    and take_bit :: "nat => 'a => 'a"
  assumes "bit_and_iff": "!!a b n. bit (and a b) n = (bit a n & bit b n)"
    and "bit_or_iff": "!!a b n. bit (or a b) n = (bit a n | bit b n)"
    and "bit_xor_iff": "!!a b n. bit (xor a b) n = (bit a n ~= bit b n)"
    and "mask_eq_exp_minus_1": "!!n. mask n = (2::'a) ^ n - (1::'a)"
    and "set_bit_eq_or": "!!n a. set_bit n a = or a (push_bit n (1::'a))"
    and
    "bit_unset_bit_iff":
      "!!m a n. bit (unset_bit m a) n = (bit a n & m ~= n)"
    and
    "flip_bit_eq_xor": "!!n a. flip_bit n a = xor a (push_bit n (1::'a))"
    and "push_bit_eq_mult": "!!n a. push_bit n a = a * (2::'a) ^ n"
    and "drop_bit_eq_div": "!!n a. drop_bit n a = a div (2::'a) ^ n"
    and "take_bit_eq_mod": "!!n a. take_bit n a = a mod (2::'a) ^ n"
### theory "HOL-Library.Tree"
### 2.294s elapsed time, 8.669s cpu time, 1.297s GC time
Loading theory "Draft.Templates" (required by "Draft.Examples_IntegralTemplates" via "Draft.ExtrEqs")
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.510s elapsed time, 1.823s cpu time, 1.545s GC time
Loading theory "HOL-Library.While_Combinator" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_While" via "Refine_Monadic.RefineG_While")
Found termination order: "{}"
Found termination order: "{}"
class semiring_bit_operations = semiring_bits +
  fixes "and" :: "'a => 'a => 'a"
    and or :: "'a => 'a => 'a"
    and xor :: "'a => 'a => 'a"
    and mask :: "nat => 'a"
    and set_bit :: "nat => 'a => 'a"
    and unset_bit :: "nat => 'a => 'a"
    and flip_bit :: "nat => 'a => 'a"
    and push_bit :: "nat => 'a => 'a"
    and drop_bit :: "nat => 'a => 'a"
    and take_bit :: "nat => 'a => 'a"
  assumes "bit_and_iff": "!!a b n. bit (and a b) n = (bit a n & bit b n)"
    and "bit_or_iff": "!!a b n. bit (or a b) n = (bit a n | bit b n)"
    and "bit_xor_iff": "!!a b n. bit (xor a b) n = (bit a n ~= bit b n)"
    and "mask_eq_exp_minus_1": "!!n. mask n = (2::'a) ^ n - (1::'a)"
    and "set_bit_eq_or": "!!n a. set_bit n a = or a (push_bit n (1::'a))"
    and
    "bit_unset_bit_iff":
      "!!m a n. bit (unset_bit m a) n = (bit a n & m ~= n)"
    and
    "flip_bit_eq_xor": "!!n a. flip_bit n a = xor a (push_bit n (1::'a))"
    and "push_bit_eq_mult": "!!n a. push_bit n a = a * (2::'a) ^ n"
    and "drop_bit_eq_div": "!!n a. drop_bit n a = a div (2::'a) ^ n"
    and "take_bit_eq_mod": "!!n a. take_bit n a = a mod (2::'a) ^ n"
Found termination order: "{}"
Found termination order: "{}"
### theory "HOL-Library.While_Combinator"
### 0.465s elapsed time, 1.764s cpu time, 0.202s GC time
Loading theory "HOL-Types_To_Sets.Types_To_Sets" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform")
signature LOCAL_TYPEDEF =
  sig
    val cancel_type_definition: thm -> thm
    val cancel_type_definition_attr: attribute
  end
structure Local_Typedef: LOCAL_TYPEDEF
signature UNOVERLOADING =
  sig
    val unoverload: cterm -> thm -> thm
    val unoverload_attr: cterm -> attribute
  end
structure Unoverloading: UNOVERLOADING
signature INTERNALIZE_SORT =
  sig
    val internalize_sort: ctyp -> thm -> typ * thm
    val internalize_sort_attr: typ -> attribute
  end
structure Internalize_Sort: INTERNALIZE_SORT
class ring_bit_operations = semiring_bit_operations + ring_parity +
  fixes not :: "'a => 'a"
  assumes
    "bit_not_iff_eq":
      "!!a n. bit (not a) n = ((2::'a) ^ n ~= (0::'a) & ~ bit a n)"
  assumes "minus_eq_not_minus_1": "!!a. - a = not (a - (1::'a))"
### ML warning (line 41 of "~~/src/HOL/Types_To_Sets/unoverload_type.ML"):
### Matches are not exhaustive.
signature UNOVERLOAD_TYPE =
  sig
    val unoverload_type: Context.generic -> indexname list -> thm -> thm
    val unoverload_type_attr: indexname list -> attribute
  end
structure Unoverload_Type: UNOVERLOAD_TYPE
consts
  the_default :: "'a => 'a option => 'a"
### ML warning (line 36 of "~~/src/HOL/Types_To_Sets/unoverload_def.ML"):
### Pattern is not exhaustive.
### ML warning (line 36 of "~~/src/HOL/Types_To_Sets/unoverload_def.ML"):
### Value identifier (ctxt') has not been referenced.
### ML warning (line 40 of "~~/src/HOL/Types_To_Sets/unoverload_def.ML"):
### Pattern is not exhaustive.
### ML warning (line 66 of "~~/src/HOL/Types_To_Sets/unoverload_def.ML"):
### Pattern is not exhaustive.
structure Unoverload_Def:
  sig
    val unoverload_def: binding option -> thm -> theory -> theory
    val unoverload_def1_cmd:
       binding option * (Facts.ref * Token.src list) -> theory -> theory
  end
### theory "HOL-Types_To_Sets.Types_To_Sets"
### 0.729s elapsed time, 2.631s cpu time, 1.615s GC time
Loading theory "Deriving.Countable_Generator" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Enclosure_Operations" via "Affine_Arithmetic.Print" via "Affine_Arithmetic.Affine_Code" via "Affine_Arithmetic.Affine_Approximation" via "Affine_Arithmetic.Straight_Line_Program" via "Deriving.Derive")
### theory "Deriving.Countable_Generator"
### 0.230s elapsed time, 0.862s cpu time, 0.110s GC time
Loading theory "Affine_Arithmetic.Optimize_Integer" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Enclosure_Operations" via "Affine_Arithmetic.Print" via "Affine_Arithmetic.Optimize_Float")
class unique_euclidean_semiring_numeral =
  unique_euclidean_semiring_with_nat + linordered_semidom +
  fixes divmod :: "num => num => 'a * 'a"
    and divmod_step :: "num => 'a * 'a => 'a * 'a"
  assumes
    "div_less": "!!a b. [| (0::'a) <= a; a < b |] ==> a div b = (0::'a)"
    and "mod_less": "!!a b. [| (0::'a) <= a; a < b |] ==> a mod b = a"
    and
    "div_positive": "!!b a. [| (0::'a) < b; b <= a |] ==> (0::'a) < a div b"
    and "mod_less_eq_dividend": "!!a b. (0::'a) <= a ==> a mod b <= a"
    and "pos_mod_bound": "!!b a. (0::'a) < b ==> a mod b < b"
    and "pos_mod_sign": "!!b a. (0::'a) < b ==> (0::'a) <= a mod b"
    and
    "mod_mult2_eq":
      "!!c a b.
          (0::'a) <= c ==> a mod (b * c) = b * (a div b mod c) + a mod b"
    and
    "div_mult2_eq":
      "!!c a b. (0::'a) <= c ==> a div (b * c) = a div b div c"
  assumes "discrete": "!!a b. (a < b) = (a + (1::'a) <= b)"
  assumes
    "divmod_def":
      "!!m n.
          divmod m n = (numeral m div numeral n, numeral m mod numeral n)"
    and
    "divmod_step_def":
      "!!l qr.
          divmod_step l qr =
          (let (q, r) = qr
           in if numeral l <= r then ((2::'a) * q + (1::'a), r - numeral l)
              else ((2::'a) * q, r))"
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |] ==> x <= Sup A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> Sup A <= z"
### theory "Automatic_Refinement.Misc"
### 5.599s elapsed time, 20.921s cpu time, 5.910s GC time
Loading theory "Automatic_Refinement.Refine_Lib" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops")
class linordered_semidom = linordered_comm_semiring_strict +
  linordered_nonzero_semiring + semidom +
  assumes "le_add_diff_inverse2": "!!b a. b <= a ==> a - b + b = a"
### theory "Affine_Arithmetic.Optimize_Integer"
### 0.272s elapsed time, 1.066s cpu time, 0.042s GC time
Loading theory "Collections.SetIterator" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "HOL-ODE-Numerics.GenCF_No_Comp" via "Collections.Impl_List_Set" via "Collections.Iterator" via "Collections.It_to_It" via "Collections.Proper_Iterator" via "Collections.SetIteratorOperations")
locale set_iterator_genord
  fixes
    iti ::
      "('\<sigma> => bool)
       => ('x => '\<sigma> => '\<sigma>) => '\<sigma> => '\<sigma>"
    and S0 :: "'x set"
    and R :: "'x => 'x => bool"
  assumes "set_iterator_genord iti S0 R"
class ring_bit_operations = semiring_bit_operations + ring_parity +
  fixes not :: "'a => 'a"
  assumes
    "bit_not_iff_eq":
      "!!a n. bit (not a) n = ((2::'a) ^ n ~= (0::'a) & ~ bit a n)"
  assumes "minus_eq_not_minus_1": "!!a. - a = not (a - (1::'a))"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class semiring_bit_operations = semiring_bits +
  fixes "and" :: "'a => 'a => 'a"
    and or :: "'a => 'a => 'a"
    and xor :: "'a => 'a => 'a"
    and mask :: "nat => 'a"
    and set_bit :: "nat => 'a => 'a"
    and unset_bit :: "nat => 'a => 'a"
    and flip_bit :: "nat => 'a => 'a"
    and push_bit :: "nat => 'a => 'a"
    and drop_bit :: "nat => 'a => 'a"
    and take_bit :: "nat => 'a => 'a"
  assumes "bit_and_iff": "!!a b n. bit (and a b) n = (bit a n & bit b n)"
    and "bit_or_iff": "!!a b n. bit (or a b) n = (bit a n | bit b n)"
    and "bit_xor_iff": "!!a b n. bit (xor a b) n = (bit a n ~= bit b n)"
    and "mask_eq_exp_minus_1": "!!n. mask n = (2::'a) ^ n - (1::'a)"
    and "set_bit_eq_or": "!!n a. set_bit n a = or a (push_bit n (1::'a))"
    and
    "bit_unset_bit_iff":
      "!!m a n. bit (unset_bit m a) n = (bit a n & m ~= n)"
    and
    "flip_bit_eq_xor": "!!n a. flip_bit n a = xor a (push_bit n (1::'a))"
    and "push_bit_eq_mult": "!!n a. push_bit n a = a * (2::'a) ^ n"
    and "drop_bit_eq_div": "!!n a. drop_bit n a = a div (2::'a) ^ n"
    and "take_bit_eq_mod": "!!n a. take_bit n a = a mod (2::'a) ^ n"
class ring_bit_operations = semiring_bit_operations + ring_parity +
  fixes not :: "'a => 'a"
  assumes
    "bit_not_iff_eq":
      "!!a n. bit (not a) n = ((2::'a) ^ n ~= (0::'a) & ~ bit a n)"
  assumes "minus_eq_not_minus_1": "!!a. - a = not (a - (1::'a))"
signature COND_REWR_CONV =
  sig
    val cond_rewr_conv:
       (Proof.context -> tactic) -> thm -> Proof.context -> conv
    val cond_rewrs_conv:
       (Proof.context -> tactic) -> thm list -> Proof.context -> conv
  end
structure Cond_Rewr_Conv: COND_REWR_CONV
signature REVERT_ABBREV =
  sig
    val revert_abbrev: string -> theory -> theory
    val revert_abbrev_matching: (string -> bool) -> theory -> theory
  end
structure Revert_Abbrev: REVERT_ABBREV
### theory "Automatic_Refinement.Refine_Lib"
### 1.032s elapsed time, 3.993s cpu time, 0.348s GC time
Loading theory "Automatic_Refinement.Autoref_Phases" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops")
instantiation
  word :: (len) size
  size_word == size :: 'a word => nat
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
signature AUTOREF_PHASES =
  sig
    val all_phases_tac: Proof.context -> tactic'
    val cfg_debug: bool Config.T
    val cfg_keep_goal: bool Config.T
    val cfg_trace: bool Config.T
    val declare_solver:
       thm list ->
         binding ->
           string ->
             (Proof.context -> tactic') ->
               morphism -> Context.generic -> Context.generic
    val delete_phase:
       string -> morphism -> Context.generic -> Context.generic
    val get_phase: string -> Proof.context -> (string * int * phase) option
    val get_phases: Proof.context -> (string * int * phase) list
    val init_data: Proof.context -> Proof.context
    val init_phase: string * int * phase -> Proof.context -> Proof.context
    val init_phases:
       (string * int * phase) list -> Proof.context -> Proof.context
    type phase =
       {analyze: Proof.context -> int -> int -> thm -> bool,
        init: Proof.context -> Proof.context,
        pretty_failure: Proof.context -> int -> int -> thm -> Pretty.T,
        tac: Proof.context -> int -> int -> tactic}
    val phase_tac: string * int * phase -> Proof.context -> tactic'
    val phase_tacN: string -> Proof.context -> tactic'
    val phases_tac: (string * int * phase) list -> Proof.context -> tactic'
    val phases_tacN: string list -> Proof.context -> tactic'
    val register_phase:
       string ->
         int -> phase -> morphism -> Context.generic -> Context.generic
  end
structure Autoref_Phases: AUTOREF_PHASES
### theory "Automatic_Refinement.Autoref_Phases"
### 0.104s elapsed time, 0.388s cpu time, 0.053s GC time
Loading theory "Automatic_Refinement.Autoref_Tagging" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops")
structure Autoref_Tag_Defs: NAMED_THMS
signature AUTOREF_TAGGING =
  sig
    val ABS_beta_conv: Proof.context -> conv
    val is_valid_tagged: term -> bool
    val lambda': string * typ -> term -> term
    val list_APP: term * term list -> term
    val mk_ABS_conv: Proof.context -> conv
    val mk_ANNOT_conv: cterm -> conv
    val mk_APP: term -> term -> term
    val mk_APP_conv: conv
    val mk_OP: term -> term
    val mk_OP_conv: conv
    val mk_rel_ANNOT_conv: Proof.context -> cterm -> conv
    val rhs_conv: (Proof.context -> conv) -> Proof.context -> conv
    val strip_app: term -> term * term list
    val term_of_tagged: term -> term
    val untag_conv: Proof.context -> conv
  end
structure Autoref_Tagging: AUTOREF_TAGGING
### theory "Automatic_Refinement.Autoref_Tagging"
### 0.105s elapsed time, 0.421s cpu time, 0.000s GC time
Loading theory "Automatic_Refinement.Relators" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Parametricity" via "Automatic_Refinement.Param_Tool")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
structure Refine_Relators_Thms:
  sig structure rel_comb_def_rules: NAMED_THMS end
### theory "Collections.SetIterator"
### 1.171s elapsed time, 4.516s cpu time, 0.425s GC time
Loading theory "Collections.SetIteratorOperations" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "HOL-ODE-Numerics.GenCF_No_Comp" via "Collections.Impl_List_Set" via "Collections.Iterator" via "Collections.It_to_It" via "Collections.Proper_Iterator")
### Partially applied constant "Word.word_sle" on left hand side of equation, in theorem:
### linorder.Min (\<le>s) (set (?x # ?xs)) == fold signed.min ?xs ?x
### Partially applied constant "Word.word_sle" on left hand side of equation, in theorem:
### linorder.Max (\<le>s) (set (?x # ?xs)) == fold signed.max ?xs ?x
### Partially applied constant "Word.word_sle" on left hand side of equation, in theorem:
### signed.sorted [] == True
### Partially applied constant "Word.word_sle" on left hand side of equation, in theorem:
### signed.sorted [?x] == True
### Partially applied constant "Word.word_sle" on left hand side of equation, in theorem:
### signed.sorted (?x # ?y # ?zs) == ?x \<le>s ?y & signed.sorted (?y # ?zs)
### Partially applied constant "Word.word_sle" on left hand side of equation, in theorem:
### signed.sorted_list_of_set (set ?xs) == signed.sort (remdups ?xs)
structure relator_props: NAMED_THMS
structure solve_relator_props: NAMED_THMS
### ML warning (line 560 of "$AFP/Automatic_Refinement/Parametricity/Relators.thy"):
### Handler catches all exceptions.
signature RELATORS =
  sig
    val declare_natural_relator:
       string * string -> Context.generic -> Context.generic
    val dest_prodrel: term -> term * term
    val dest_relT: typ -> typ * typ
    val is_prodrel: term -> bool
    val list_prodrel_left: term list -> term
    val list_rel: term list -> term -> term
    val list_relAPP: term list -> term -> term
    val mk_fun_rel: term -> term -> term
    val mk_natural_relator:
       Proof.context -> term list -> string -> term option
    val mk_prodrel: term * term -> term
    val mk_relAPP: term -> term -> term
    val mk_relT: typ * typ -> typ
    val natural_relator_of: Proof.context -> string -> string option
    val rel_absT: term -> typ
    val rel_concT: term -> typ
    val remove_natural_relator: string -> Context.generic -> Context.generic
    val setup: theory -> theory
    val strip_prodrel_left: term -> term list
    val strip_relAPP: term -> term list * term
  end
structure Relators: RELATORS
### theory "Automatic_Refinement.Relators"
### 1.041s elapsed time, 4.058s cpu time, 0.273s GC time
Loading theory "Automatic_Refinement.Param_Tool" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Parametricity")
val unat_arith_simpset =
   Simpset
    ({depth = (0, ref false), prems = [], rules =
      Net {atoms =
           {("Int.Pos",
              Leaf
               [{elhs = "Int.Pos", extra = false, fo = true, lhs =
                 Const ("Int.Pos", "num => int"), name = "Int.Pos_def",
                 perm = false, thm = "Int.Pos == numeral"}]),
             ("Word.Word",
               Leaf
                [{elhs = "Word.Word", extra = false, fo = true, lhs =
                  Const ("Word.Word", "int => ?'a1 word"), name =
                  "Word.Word_eq_word_of_int", perm = false, thm =
                  "Word.Word == word_of_int"}]),
             ("Word.cast",
               Leaf
                [{elhs = "Word.cast", extra = false, fo = true, lhs =
                  Const ("Word.cast", "?'a1 word => ?'b1 word"), name =
                  "??.unknown", perm = false, thm = "Word.cast == ucast"}]),
             ("Word.of_int",
               Leaf
                [{elhs = "Word.of_int", extra = false, fo = true, lhs =
                  Const ("Word.of_int", "int => ?'a1 word"), name =
                  "??.unknown", perm = false, thm =
                  "Word.of_int == word_of_int"}]),
             ("Word.of_nat",
               Leaf
                [{elhs = "Word.of_nat", extra = false, fo = true, lhs =
                  Const ("Word.of_nat", "nat => ?'a1 word"), name =
                  "??.unknown", perm = false, thm =
                  "Word.of_nat == word_of_nat"}]),
             ("Word.the_int",
               Leaf
                [{elhs = "Word.the_int", extra = false, fo = true, lhs =
                  Const ("Word.the_int", "?'a1 word => int"), name =
                  "??.unknown", perm = false, thm =
                  "Word.the_int == uint"}]),
             ("Word.the_nat",
               Leaf
                [{elhs = "Word.the_nat", extra = false, fo = true, lhs =
                  Const ("Word.the_nat", "?'a1 word ... nat"), name =
                  "??.unknown", perm = false, thm =
                  "Word.the_nat == unat"}]),
             ("String.Literal'",
               Leaf
                [{elhs = "String.Literal'", extra = false, fo = true, lhs =
                  Const ("String.Literal'", "... ... ..."), name =
                  "String.Literal'_def", perm = false, thm =
                  "String.Literal' ... String.Literal"}]),
             ("Code_Numeral.Pos",
               Leaf
                [{elhs = "Code_Numeral.Pos", extra = false, fo = true, lhs =
                  Const ("Code_Numeral.Pos", "..."), name =
                  "Code_Numeral.Pos_def", perm = false, thm =
                  "... ... ..."}]),
             ("Word.signed_cast",
               Leaf
                [{elhs = "Word.signed_cast", extra = false, fo = true, lhs =
                  Const ("Word.signed_cast", "..."), name = "??.unknown",
                  ...}]),
             ("Word.the_signed_int",
               Leaf
                [{elhs = "...", extra = false, fo = true, lhs =
                  Const ("...", ...), ...}]),
             ("Groups.abs_class.abs",
               Leaf [{elhs = "...", extra = false, fo = true, ...}]),
             ("Groups.one_class.one",
               Leaf [{elhs = ..., extra = false, ...}, ...]),
             ("Groups.sgn_class.sgn", Leaf [...]),
             ("Code_Numeral.negative", ...), ...},
           comb =
           Net {atoms =
                {("Fun.id",
                   Net {atoms = {}, comb = Leaf [], var =
                        Leaf
                         [{elhs = "id ?y", extra = false, fo = true, lhs =
                           Const ("Fun.id", "?'a => ?'a") $
                             Var (("y", 0), "?'a"),
                           name = "Fun.id_apply", perm = false, thm =
                           "id ?y == ?y"}]}),
                  ("HOL.Ex",
                    Net {atoms = {}, comb =
                         Net {atoms =
                              {("HOL.eq",
                                 Net {atoms = {}, comb = Leaf [], var =
Leaf
 [{elhs = "...", extra = false, fo = true, lhs =
   Const ("...", "(?'d1 => bool) => bool") $ ..., ...}]})},
                              comb = Leaf [], var = Leaf []},
                         var =
                         Leaf
                          [{elhs = "Ex ?P1", extra = false, fo = true, lhs =
                            Const ("HOL.Ex", "(...) ... bool") $
                              Abs ("x", "1",
                                Var ((...), "1 => bool") $ ...),
                            name = "Numeral_Type.ex_1", perm = false, thm =
                            "EX x. ?P1 x == ?P1 1"},
                           {elhs = "Ex ?P1", extra = false, fo = true, lhs =
                            Const ("HOL.Ex", "... ... ...") $
                              Abs ("x", "...", ... $ ...),
                            name = "Product_Type.split_paired_Ex", perm =
                            false, thm =
                            "... x... ... ... == ... a b... ... ..."},
                           {elhs = "EX x y. ?p1 ... ......... ......",
                            extra = false, fo = true, lhs =
                            Const ("HOL.Ex", "...") $ Abs ("x", "...", ...),
                            name = "Product_Type.surj_pair", perm = false,
                            thm = "... ... ...... ... ... True"},
                           {elhs = "... x... ... ... ...", extra = false,
                            fo = false, lhs =
                            Const ("HOL.Ex", "...") $ Abs ("x", ..., ...),
                            name = "Set.ex_image_cong_iff_2", perm = false,
                            thm = "... ... ..."},
                           {elhs = "... ...... ...", extra = false, fo =
                            true, lhs =
                            Const ("...", ...) $ Abs ("...", "?'a1", ...),
                            name = "Set.ex_image_cong_iff_1", ...},
                           {elhs = "...", extra = false, fo = false, lhs =
                            Const ("...", "(?'d1 => bool) => bool") $ ...,
                            ...},
                           {elhs = "...", extra = false, fo = false, ...},
                           {elhs = ..., extra = false, ...}, ...]}),
                  ("HOL.All",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [{elhs = "All ?P1", extra = false, fo = true,
                            lhs =
                            Const ("HOL.All", "... ... ...") $
                              Abs ("i", "...", ... $ ...),
                            name = "Numeral_Type.forall_1", perm = false,
                            thm = "... i... ... ... == ?P1 ..."},
                           {elhs = "ALL y. ?x1 ... ... ...", extra = false,
                            fo = true, lhs =
                            Const ("HOL.All", "...") $
                              Abs ("y", "...", ...),
                            name = "Option.not_Some_eq", perm = false, thm =
                            "... ...... ... ... ... ... ..."},
                           {elhs = "All ?P1", extra = false, fo = true,
                            lhs =
                            Const ("HOL.All", "...") $ Abs ("x", ..., ...),
                            name = "Product_Type.split_paired_All", perm =
                            false, thm = "... ... ..."},
                           {elhs = "... ...... ...", extra = false, fo =
                            true, lhs =
                            Const ("...", ...) $ Abs ("...", "?'a1", ...),
                            name = "Set.all_not_in_conv", ...},
                           {elhs = "...", extra = false, fo = true, lhs =
                            Const ("...", "(?'d1 => bool) => bool") $ ...,
                            ...},
                           {elhs = "...", extra = false, fo = true, ...},
                           {elhs = ..., extra = false, ...}, ...]}),
                  ("HOL.Ex1",
                    Net {atoms = {}, comb =
                         Net {atoms =
                              {("HOL.eq",
                                 Net {atoms = {}, comb = Leaf [], var =
Leaf [{elhs = ..., extra = false, ...}]})},
                              comb = Leaf [], var = Leaf []},
                         var =
                         Leaf
                          [{elhs = "EX! x. x ... ?t1", extra = false, fo =
                            true, lhs =
                            Const ("HOL.Ex1", "...") $
                              Abs ("x", "...", ...),
                            name = "HOL.ex1_eq_1", perm = false, thm =
                            "... ...... ... ... True"}]}),
                  ("HOL.Not",
                    Net {atoms =
                         {("HOL.True",
                            Leaf
                             [{elhs = "... True", extra = false, fo = true,
                               lhs =
                               Const ("...", ...) $ Const ("...", "bool"),
                               name = "HOL.simp_thms_7", ...}]),
                           ("HOL.False",
                             Leaf
                              [{elhs = "... ...", extra = false, fo = true,
                                lhs = Const ("...", "bool => bool") $ ...,
                                ...}])},
                         comb =
                         Net {atoms =
                              {("HOL.Ex",
                                 Net {atoms = {}, comb = Leaf [...], var =
Leaf [...]}),
                                ("HOL.All",
                                  Net {atoms = {}, comb = ..., var = ...}),
                                ("HOL.Not", Net {atoms = {}, ...}),
                                ("Finite_Set.finite", ...)},
                              comb =
                              Net {atoms =
                                   {("HOL.eq", Net {atoms = {...}, ...}),
                                     ("Set.Bex", ...), ...},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []},
                         var = Leaf []}),
                  ("HOL.The",
                    Net {atoms = {}, comb =
                         Net {atoms =
                              {("HOL.eq",
                                 Net {atoms = {}, comb = ..., var = ...}),
                                ("Product_Type.prod.case_prod",
                                  Net {atoms = {}, ...})},
                              comb = Leaf [], var = Leaf []},
                         var =
                         Leaf
                          [{elhs = "... ...... ...", extra = false, fo =
                            true, lhs =
                            Const ("...", ...) $ Abs ("...", "?'a", ...),
                            name = "HOL.the_eq_trivial", ...}]}),
                  ("Int.Neg",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [{elhs = "...", extra = false, fo = true, lhs =
                            Const ("...", "num => int") $ ..., ...}]}),
                  ("Int.dup",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [{elhs = "...", extra = false, fo = true, ...}]}),
                  ("Int.nat",
                    Net {atoms =
                         {("Groups.one_class.one", Leaf [...]),
                           ("Groups.zero_class.zero", ...)},
                         comb = Net {atoms = {...}, comb = ..., var = ...},
                         var = Leaf [{elhs = ..., extra = false, ...}]}),
                  ("Map.dom",
                    Net {atoms = {}, comb = Net {atoms = {...}, ...}, var =
                         Leaf [...]}),
                  ("Map.ran", Net {atoms = {}, comb = ..., var = ...}),
                  ("Nat.Suc", Net {atoms = {...}, ...}), ("Num.inc", ...),
                  ...},
                comb =
                Net {atoms =
                     {("HOL.eq",
                        Net {atoms =
                             {("HOL.True",
                                Net {atoms =
                                     {("HOL.False",
  Leaf
   [{elhs = "...", extra = false, fo = true, lhs =
     Const ("...", "bool => bool => bool") $ ... $ ..., ...}])},
                                     comb = Leaf [], var =
                                     Leaf
[{elhs = "... ... ...", extra = false, fo = true, lhs =
  Const ("...", ...) $ Const ("...", "bool") $ ..., name =
  "HOL.simp_thms_11", ...}]}),
                               ("HOL.False",
                                 Net {atoms =
{("HOL.True", Leaf [{elhs = "...", extra = false, fo = true, ...}])}, comb =
Leaf [], var =
Leaf
 [{elhs = "...", extra = false, fo = true, lhs =
   Const ("...", "bool => bool => bool") $ ... $ ..., ...}]}),
                               ("Num.num.One",
                                 Net {atoms = {}, comb =
Net {atoms = {("Num.num.Bit0", ...), ...}, comb = Leaf [...], var =
     Leaf [...]},
var = Leaf []}),
                               ("Filter.at_bot",
                                 Net {atoms =
{("Orderings.bot_class.bot", Leaf [...])}, comb = Leaf [], var = Leaf []}),
                               ("Filter.at_top",
                                 Net {atoms =
{("Orderings.bot_class.bot", ...)}, comb = Leaf [...], var = Leaf [...]}),
                               ("List.list.Nil",
                                 Net {atoms = {}, comb = ..., var = ...}),
                               ("Filter.cofinite",
                                 Net {atoms = {...}, ...}),
                               ("Option.option.None", ...), ...},
                             comb =
                             Net {atoms =
                                  {("HOL.Not",
                                     Net
{atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Net {atoms = {...}, ...}, var = Leaf [...]}}),
                                    ("Int.nat",
Net {atoms = {}, comb = Leaf [], var =
     Net {atoms = {...}, comb = ..., var = ...}}),
                                    ("Map.dom",
Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {...}, ...}}),
                                    ("Nat.Suc",
Net {atoms = {...}, comb = ..., var = ...}),
                                    ("Set.Pow", Net {atoms = {}, ...}),
                                    ("List.rev", ...), ...},
                                  comb =
                                  Net {atoms =
 {("List.upt",
    Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}}),
   ("List.zip", Net {atoms = {}, comb = ..., var = ...}),
   ("List.drop", Net {atoms = {}, ...}), ("List.take", ...), ...},
 comb =
 Net {atoms =
      {("Fun.fun_upd", Net {atoms = {}, ...}), ("Map.map_add", ...), ...},
      comb = Net {atoms = {...}, comb = ..., var = ...}, var = Leaf []},
 var = Leaf []},
                                  var = Leaf []},
                             var =
                             Net {atoms =
                                  {("HOL.True",
                                     Leaf
[{elhs = "... ... ...", extra = false, fo = true, lhs =
  Const ("...", ...) $ Var ((...), "bool") $ ..., name = "HOL.simp_thms_12",
  ...}]),
                                    ("HOL.False",
Leaf
 [{elhs = "...", extra = false, fo = true, lhs =
   Const ("...", "bool => bool => bool") $ ... $ ..., ...}]),
                                    ("Groups.one_class.one",
Leaf [{elhs = "...", extra = false, fo = true, ...}])},
                                  comb =
                                  Net {atoms =
 {("HOL.Not", Net {atoms = {}, comb = Leaf [...], var = Leaf [...]}),
   ("Map.map_of", Net {atoms = {}, comb = ..., var = ...}),
   ("Groups.uminus_class.uminus", Net {atoms = {}, ...})},
 comb =
 Net {atoms =
      {("List.append", Net {atoms = {}, ...}), ("Map.map_add", ...), ...},
      comb = Leaf [], var = Leaf []},
 var = Leaf []},
                                  var =
                                  Leaf
                                   [{elhs = "?v1 ... ?w1", extra = false,
                                     fo = true, lhs =
                                     Const ("HOL.eq", "...") $
 Var (("...", 1), ...) $ Var ((...), "?'a1 word"),
                                     name = "local.unat_arith_simps_3",
                                     perm = false, thm = "... ... ..."},
                                    {elhs = "... ... ...", extra = false,
                                     fo = true, lhs =
                                     Const ("...", ...) $
 Var ((...), "?'a1") $ ...,
                                     name = "HOL.simp_thms_6", ...}]}}),
                       ("HOL.Let",
                         Net {atoms =
                              {("Groups.one_class.one",
                                 Net {atoms = {}, comb = Leaf [], var =
Leaf
 [{elhs = "...", extra = false, fo = true, lhs =
   Const ("...", "?'b1 => (?'b1 => ?'a) => ?'a") $ ... $ ..., ...}]}),
                                ("Groups.zero_class.zero",
                                  Net {atoms = {}, comb = Leaf [], var =
 Leaf [{elhs = "...", extra = false, fo = true, ...}]})},
                              comb =
                              Net {atoms =
                                   {("Nat.Suc",
Net {atoms = {}, comb = Leaf [], var =
     Net {atoms = {}, comb = ..., var = ...}}),
                                     ("Num.numeral_class.numeral",
 Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}}),
                                     ("Groups.uminus_class.uminus",
 Net {atoms = {}, comb = ..., var = ...})},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []}),
                       ("Int.sub",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {}, comb = Leaf [], var =
                                   Leaf
                                    [{elhs = "...", extra = false, fo =
true, lhs = Const ("...", "num => num => int") $ ... $ ..., ...}]}}),
                       ("Num.pow",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms =
                                   {("Num.num.One",
Leaf [{elhs = ..., extra = false, ...}])},
                                   comb =
                                   Net {atoms =
  {("Num.num.Bit0", ...), ...}, comb = Leaf [...], var = Leaf [...]},
                                   var = Leaf []}}),
                       ("Set.Bex",
                         Net {atoms =
                              {("Orderings.bot_class.bot",
                                 Net {atoms = {}, comb = Leaf [...], var =
Leaf [...]}),
                                ("Orderings.top_class.top",
                                  Net {atoms = {}, comb = ..., var = ...})},
                              comb =
                              Net {atoms =
                                   {("Set.Collect", Net {atoms = {}, ...}),
                                     ("List.list.set", ...), ...},
                                   comb =
                                   Net {atoms = {...}, comb = ..., var =
  ...},
                                   var = Leaf []},
                              var =
                              Net {atoms = {}, comb =
                                   Net {atoms = {...}, comb = ..., var =
  ...},
                                   var =
                                   Leaf
                                    [{elhs = ..., extra = false, ...},
                                     ...]}}),
                       ("Fun.comp",
                         Net {atoms =
                              {("Fun.id",
                                 Net {atoms = {}, comb = ..., var = ...}),
                                ("Option.option.the",
                                  Net {atoms = {...}, ...}),
                                ("Product_Type.prod.fst", ...), ...},
                              comb =
                              Net {atoms = {("List.list.map", ...), ...},
                                   comb = Net {atoms = {...}, ...}, var =
                                   Leaf [...]},
                              var =
                              Net {atoms = {("Fun.id", ...)}, comb =
                                   Leaf [...], var = Leaf [...]}}),
                       ("GCD.bezw",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {...}, comb = ..., var = ...}}),
                       ("HOL.conj",
                         Net {atoms = {("HOL.True", ...), ...}, comb =
                              Net {atoms = {...}, ...}, var =
                              Net {atoms = {...}, ...}}),
                       ("HOL.disj",
                         Net {atoms = {...}, comb = ..., var = ...}),
                       ("List.nth", Net {atoms = {}, ...}),
                       ("List.upt", ...), ...},
                     comb =
                     Net {atoms =
                          {("HOL.If",
                             Net {atoms =
                                  {("HOL.True",
                                     Net
{atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Leaf [...], var = Leaf [...]}}),
                                    ("HOL.False",
Net {atoms = {}, comb = Leaf [], var =
     Net {atoms = {}, comb = ..., var = ...}})},
                                  comb =
                                  Net {atoms = {}, comb =
 Net {atoms = {("HOL.eq", Net {atoms = {}, ...})}, comb = Leaf [], var =
      Leaf []},
 var = Leaf []},
                                  var =
                                  Net {atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Leaf [], var =
      Leaf [{elhs = ..., extra = false, ...}]}}}),
                            ("Fun.comp",
                              Net {atoms = {}, comb = Leaf [], var =
                                   Net {atoms = {}, comb = Leaf [], var =
  Net {atoms = {}, comb = Leaf [...], var = Leaf [...]}}}),
                            ("Fun.fcomp",
                              Net {atoms = {}, comb = Leaf [], var =
                                   Net {atoms = {}, comb = Leaf [], var =
  Net {atoms = {}, comb = ..., var = ...}}}),
                            ("List.foldl",
                              Net {atoms = {}, comb = Leaf [], var =
                                   Net {atoms = {}, comb = Leaf [...], var =
  Net {atoms = {...}, ...}}}),
                            ("List.foldr",
                              Net {atoms = {}, comb = Leaf [], var =
                                   Net {atoms = {}, comb = ..., var =
  ...}}),
                            ("Nat.compow",
                              Net {atoms =
                                   {("Groups.zero_class.zero", ...)}, comb =
                                   Leaf [...], var = Leaf [...]}),
                            ("Fun.fun_upd",
                              Net {atoms = {}, comb = ..., var = ...}),
                            ("Map.map_add", Net {atoms = {}, ...}),
                            ("Fun.bij_betw", ...), ...},
                          comb =
                          Net {atoms =
                               {("Fun.fun_upd",
                                  Net {atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Leaf [], var =
      Net {atoms = {}, comb = ..., var = ...}}}),
                                 ("Fun.map_fun",
                                   Net {atoms = {}, comb = Leaf [], var =
  Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}}}),
                                 ("Map.map_upds",
                                   Net {atoms = {}, comb = Leaf [], var =
  Net {atoms = {}, comb = ..., var = ...}}),
                                 ("BNF_Def.rel_sum",
                                   Net {atoms = {}, comb = Leaf [...], var =
  Net {atoms = {}, ...}}),
                                 ("Fun.override_on",
                                   Net {atoms = {}, comb = ..., var = ...}),
                                 ("Num.num.rec_num", Net {atoms = {}, ...}),
                                 ("Num.num.case_num", ...), ...},
                               comb =
                               Net {atoms =
                                    {("Enum.finite_4.rec_finite_4",
 Net {atoms = {}, comb = Leaf [], var =
      Net {atoms = {}, comb = ..., var = ...}}),
("Enum.finite_4.case_finite_4",
  Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}})},
                                    comb =
                                    Net {atoms =
   {("Enum.finite_5.rec_finite_5", Net {atoms = {}, comb = ..., var = ...}),
     ("Enum.finite_5.case_finite_5", Net {atoms = {}, ...})},
   comb =
   Net {atoms = {}, comb = Net {atoms = {...}, ...}, var = Leaf [...]},
   var = Leaf []},
                                    var = Leaf []},
                               var = Leaf []},
                          var = Leaf []},
                     var = Leaf []},
                var = Leaf []},
           var =
           Leaf
            [{elhs = "%u. EX x y. u = (x, y) & ?P1 x y", extra = false, fo =
              false, lhs =
              Abs ("u", "?'a1 * ?'b1",
                Const ("HOL.Ex", "(?'a1 => bool) => bool") $
                  Abs ("x", "?'a1",
                    Const ("HOL.Ex", "...") $ Abs ("y", "...", ...))),
              name = "Product_Type.split_eta_SetCompr2", perm = false, thm =
              "%u. EX x y. u = (x, y) & ?P1 x y == %(x, y). ?P1 x y"},
             {elhs = "%u. EX x y. u = (x, y) & ?y (x, y)", extra = false,
              fo = true, lhs =
              Abs ("u", "?'a1 * ?'b1",
                Const ("HOL.Ex", "(?'a1 ... bool) => bool") $
                  Abs ("x", "?'a1",
                    Const ("HOL.Ex", "...") $ Abs ("y", ..., ...))),
              name = "Product_Type.split_eta_SetCompr", perm = false, thm =
              "%u. EX x y. u = (x, y) & ?y (x, y) == ?y"},
             {elhs = "%a. ?y ()", extra = false, fo = true, lhs =
              Abs ("", "unit",
                Var (("y", 0), "unit => ?'a1") $
                  Const ("Product_Type.Unity", "unit")),
              name = "Product_Type.unit_abs_eta_conv", perm = false, thm =
              "%a. ?y () == ?y"},
             {elhs = "%A f. Inf (f ` A)", extra = false, fo = true, lhs =
              Abs ("A", "?'a1 set",
                Abs ("f", "?'a1 => bool",
                  Const ("Complete_Lattices.Inf_class.Inf", "...") $
                    (Const ("...",
                            "(?'a1 => bool) => ?'a1 set => bool set") $
                      ... $ ...))),
              name = "Complete_Lattices.INF_bool_eq", perm = false, thm =
              "%A f. Inf (f ` A) == Ball"},
             {elhs = "%A f. Sup (f ` A)", extra = false, fo = true, lhs =
              Abs ("A", "?'a1 set",
                Abs ("f", "?'a1 ... bool",
                  Const ("...", ...) $ (... $ ... $ ...))),
              name = "Complete_Lattices.SUP_bool_eq", perm = false, thm =
              "%A f. Sup (f ... A) == Bex"}]}},
     {congs =
      ({((true, "HOL.If"),
          "?b == ?c ==> if ?b then ?x else ?y == if ?c then ?x else ?y"),
         ((true, "Set.Bex"),
           "[| ?A == ?B; !!x. x : ?B =simp=> ?P x == ?Q x |]
            ==> EX x:?A. ?P x == EX x:?B. ?Q x"),
         ((true, "Set.Ball"),
           "[| ?A == ?B; !!x. x : ?B =simp=> ?P x == ?Q x |]
            ==> ALL x:?A. ?P x == ALL x:?B. ?Q x"),
         ((true, "Set.image"),
           "[| ?M == ?N; !!x. x : ?N =simp=> ?f x == ?g x |]
            ==> ?f ` ?M == ?g ` ?N"),
         ((true, "HOL.implies"),
           "[| ?P == ?P'; ?P' ==> ?Q == ?Q' |]
            ==> ?P --> ?Q == ?P' --> ?Q'"),
         ((true, "HOL.NO_MATCH"),
           "NO_MATCH ?pat ?val == NO_MATCH ?pat ?val"),
         ((true, "HOL.ASSUMPTION"), "ASSUMPTION ?A == ASSUMPTION ?A"),
         ((true, "HOL.simp_implies"),
           "[| PROP ?P == PROP ?P'; PROP ?P' ==> PROP ?Q ... PROP ?Q' |]
            ==> (PROP ?P ... PROP ?Q) == (PROP ?P' ... PROP ?Q')"),
         ((true, "Nat.nat.case_nat"),
           "?M == ?M' ==>
            case ?M of ... ... ... | ... ... ... ==
            case ?M' of ... ... ... | ... ... ..."),
         ((true, "Num.num.case_num"),
           "?num ... ?num' ==>
            ... ... ... ... ... ... ... ... ...
            ... ... ... ... ... ... ... ..."),
         ((true, "List.successively"),
           "... ...... ... ... ==> ... ... ..."),
         ((true, "List.list.case_list"), "... ... ..."),
         ((true, "String.char.case_char"), "..."),
         ((true, "Sum_Type.sum.case_sum"), "..."),
         ((true, "Nitpick.word.case_word"), ...), ((true, "..."), ...),
         ...},
       [(true, "Power.power_class.power"),
        (true, "Phantom_Type.phantom.case_phantom"),
        (true, "Nitpick.word.case_word"),
        (true, "Nitpick.pair_box.case_pair_box"),
        (true, "Nitpick.fun_box.case_fun_box"),
        (true, "Record.tuple_isomorphism.case_tuple_isomorphism"),
        (true, "Extraction.sumbool.case_sumbool"),
        (true, "Quickcheck_Exhaustive.three_valued.case_three_valued"),
        (true, "Quickcheck_Exhaustive.unknown.case_unknown"),
        (true, "Quickcheck_Narrowing.cfun.case_cfun"),
        (true, "Quickcheck_Narrowing.ffun.case_ffun"),
        (true, "Quickcheck_Narrowing.property.case_property"),
        (true, "Quickcheck_Narrowing.narrowing_cons.case_narrowing_cons"),
        (true, "Quickcheck_Narrowing.narrowing_term.case_narrowing_term"),
        (true, "Quickcheck_Narrowing.narrowing_type.case_narrowing_type"),
        (true, "..."), ...]),
      loop_tacs =
      [("split asm HOL.If :: (HOL.bool, (_, (_, _)fun)fun)fun", fn),
       ("split asm Rings.zero_neq_one_class.of_bool :: (HOL.bool, _)fun",
        fn),
       ("split Rings.zero_neq_one_class.of_bool :: (HOL.bool, _)fun", fn),
       ("split HOL.If :: (HOL.bool, (_, (_, _)fun)fun)fun", fn)],
      mk_rews =
      {mk = fn, mk_cong = fn, mk_eq_True = fn, mk_sym = fn, reorient = fn},
      procs =
      Net {atoms = {}, comb =
           Net {atoms =
                {("HOL.Ex",
                   Net {atoms = {}, comb = Leaf [], var =
                        Leaf
                         [Proc
                           {lhs =
                            Const ("HOL.Ex", "(...) ... bool") $
                              Abs ("x", "?'a",
                                Var ((...), "?'a => bool") $ ...),
                            name = "HOL.defined_Ex", proc = fn, stamp =
                            Stamp 91198}]}),
                  ("HOL.All",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [Proc
                            {lhs =
                             Const ("HOL.All", "... ... ...") $
                               Abs ("x", "...", ... $ ...),
                             name = "HOL.defined_All", proc = fn, stamp =
                             Stamp 91244}]}),
                  ("HOL.Not",
                    Net {atoms = {}, comb =
                         Net {atoms = {}, comb =
                              Net {atoms =
                                   {("Orderings.ord_class.less",
Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}})},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []},
                         var = Leaf []}),
                  ("Nat.Suc",
                    Net {atoms = {}, comb =
                         Net {atoms = {}, comb =
                              Net {atoms =
                                   {("Groups.plus_class.plus",
Net {atoms = {}, comb = ..., var = ...})},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []},
                         var = Leaf []}),
                  ("Pure.all",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [Proc
                            {lhs =
                             Const ("...", ...) $ Abs ("...", "?'a", ...),
                             name = "HOL.defined_all", proc = fn, stamp =
                             Stamp 91290}]}),
                  ("Set.Collect",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [Proc
                            {lhs =
                             Const ("...", "(?'a => bool) => ?'a set") $
                               ...,
                             name = "Product_Type.Collect_mem", proc = fn,
                             stamp = Stamp 616364},
                           Proc
                            {lhs = ... $ ..., name = "Set.defined_Collect",
                             proc = fn, stamp = Stamp 299868}]}),
                  ("List.list.set",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [Proc
                            {lhs = ... $ ..., name =
                             "List.list_to_set_comprehension", proc = fn,
                             stamp = Stamp 2625594}]}),
                  ("Product_Type.prod.case_prod",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf [Proc {lhs = ..., name = "...", ...}]})},
                comb =
                Net {atoms =
                     {("HOL.eq",
                        Net {atoms =
                             {("Groups.one_class.one",
                                Net {atoms = {}, comb = Leaf [], var =
                                     Leaf
[Proc
  {lhs = Const ("...", "?'a => ?'a => bool") $ ... $ ..., name =
   "Groups.reorient_one", proc = fn, stamp = Stamp 171260}]}),
                               ("Groups.zero_class.zero",
                                 Net {atoms = {}, comb = Leaf [], var =
Leaf
 [Proc
   {lhs = ... $ ... $ ..., name = "Groups.reorient_zero", proc = fn, stamp =
    Stamp 171216}]})},
                             comb =
                             Net {atoms =
                                  {("Nat.Suc",
                                     Net
{atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Leaf [...], var = Leaf [...]}}),
                                    ("Num.numeral_class.numeral",
Net {atoms = {}, comb = Leaf [], var =
     Net {atoms = {}, comb = ..., var = ...}}),
                                    ("Groups.uminus_class.uminus",
Net {atoms = {}, comb = Net {atoms = {...}, ...}, var =
     Net {atoms = {}, ...}})},
                                  comb =
                                  Net {atoms =
 {("Groups.plus_class.plus",
    Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}}),
   ("Groups.minus_class.minus", Net {atoms = {}, comb = ..., var = ...}),
   ("Groups.times_class.times", Net {atoms = {}, ...})},
 comb = Leaf [], var = Leaf []},
                                  var = Leaf []},
                             var =
                             Net {atoms = {}, comb =
                                  Net {atoms =
 {("Nat.Suc", Net {atoms = {}, comb = Leaf [...], var = Leaf [...]}),
   ("Groups.uminus_class.uminus", Net {atoms = {}, comb = ..., var = ...})},
 comb =
 Net {atoms =
      {("Groups.plus_class.plus", Net {atoms = {}, ...}),
        ("Groups.minus_class.minus", ...), ...},
      comb = Leaf [], var = Leaf []},
 var = Leaf []},
                                  var =
                                  Leaf
                                   [Proc
                                     {lhs =
Const ("...", ...) $ Var ((...), "?'a") $ ..., name = "record_eq", proc =
fn, stamp = Stamp 4153886},
                                    Proc
                                     {lhs =
Const ("...", "?'a list => ?'a list => bool") $ ... $ ..., name =
"List.list_neq", proc = fn, stamp = Stamp 2645062},
                                    Proc
                                     {lhs = ... $ ... $ ..., name =
"List.list_eq", proc = fn, stamp = Stamp 2633172},
                                    Proc {lhs = ..., name = "...", ...},
                                    Proc {lhs = ..., ...}, ...]}}),
                       ("HOL.Let",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {}, comb = Leaf [], var =
                                   Leaf
                                    [Proc
{lhs = Const ("...", "?'a => (?'a => ?'b) => ?'b") $ ... $ ..., name =
 "HOL.let_simp", proc = fn, stamp = Stamp 91526}]}}),
                       ("Set.Bex",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {}, comb = Leaf [], var =
                                   Leaf
                                    [Proc
{lhs = ... $ ... $ ..., name = "Set.defined_Bex", proc = fn, stamp =
 Stamp 303020}]}}),
                       ("Pure.imp",
                         Net {atoms = {}, comb =
                              Net {atoms =
                                   {("HOL.Trueprop",
Net {atoms = {...}, comb = ..., var = ...})},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []}),
                       ("Set.Ball",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {}, comb = Leaf [], var =
                                   Leaf [Proc {lhs = ..., ...}]}}),
                       ("HOL.NO_MATCH",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {}, comb = Leaf [...], var =
                                   Leaf [...]}}),
                       ("Rings.dvd_class.dvd",
                         Net {atoms = {}, comb =
                              Net {atoms = {}, comb = ..., var = ...}, var =
                              Net {atoms = {}, comb = ..., var = ...}}),
                       ("Groups.plus_class.plus",
                         Net {atoms = {}, comb = Leaf [...], var =
                              Net {atoms = {}, ...}}),
                       ("Lattices.inf_class.inf",
                         Net {atoms = {}, comb = ..., var = ...}),
                       ("Lattices.sup_class.sup", Net {atoms = {}, ...}),
                       ("Groups.minus_class.minus", ...), ...},
                     comb =
                     Net {atoms =
                          {("Fun.fun_upd",
                             Net {atoms = {}, comb =
                                  Net {atoms = {}, comb =
 Net {atoms = {}, comb = Net {atoms = {...}, comb = ..., var = ...}, var =
      Leaf []},
 var = Leaf []},
                                  var = Leaf []})},
                          comb = Leaf [], var = Leaf []},
                     var = Leaf []},
                var = Leaf []},
           var =
           Leaf
            [Proc
              {lhs = Var (("x", 0), "?'a"), name = "record", proc = fn,
               stamp = Stamp 4153844},
             Proc
              {lhs = Var (("x", 0), "?'a"), name = "record_upd", proc = fn,
               stamp = Stamp 4153854},
             Proc
              {lhs = Var (("x", 0), "unit"), name = "Product_Type.unit_eq",
               proc = fn, stamp = Stamp 562196}]},
      solvers =
      ([Solver {id = Stamp 1038750, name = "Rtranclp", solver = fn},
        Solver {id = Stamp 1038748, name = "Tranclp", solver = fn},
        Solver {id = Stamp 1038746, name = "Rtrancl", solver = fn},
        Solver {id = Stamp 1038744, name = "Trancl", solver = fn},
        Solver {id = Stamp 781564, name = "lin_arith", solver = fn},
        Solver {id = Stamp 132670, name = "Transitivity", solver = fn},
        Solver {id = Stamp 102528, name = "ASSUMPTION", solver = fn},
        Solver {id = Stamp 90936, name = "HOL unsafe", solver = fn}],
       [Solver {id = Stamp 90938, name = "HOL safe", solver = fn}]),
      subgoal_tac = fn, term_ord = fn}):
   simpset
val unat_arith_tacs = fn: Proof.context -> tactic list
val unat_arith_tac = fn: Proof.context -> int -> tactic
val uint_arith_simpset =
   Simpset
    ({depth = (0, ref false), prems = [], rules =
      Net {atoms =
           {("Int.Pos",
              Leaf
               [{elhs = "Int.Pos", extra = false, fo = true, lhs =
                 Const ("Int.Pos", "num => int"), name = "Int.Pos_def",
                 perm = false, thm = "Int.Pos == numeral"}]),
             ("Word.Word",
               Leaf
                [{elhs = "Word.Word", extra = false, fo = true, lhs =
                  Const ("Word.Word", "int => ?'a1 word"), name =
                  "Word.Word_eq_word_of_int", perm = false, thm =
                  "Word.Word == word_of_int"}]),
             ("Word.cast",
               Leaf
                [{elhs = "Word.cast", extra = false, fo = true, lhs =
                  Const ("Word.cast", "?'a1 word => ?'b1 word"), name =
                  "??.unknown", perm = false, thm = "Word.cast == ucast"}]),
             ("Word.of_int",
               Leaf
                [{elhs = "Word.of_int", extra = false, fo = true, lhs =
                  Const ("Word.of_int", "int => ?'a1 word"), name =
                  "??.unknown", perm = false, thm =
                  "Word.of_int == word_of_int"}]),
             ("Word.of_nat",
               Leaf
                [{elhs = "Word.of_nat", extra = false, fo = true, lhs =
                  Const ("Word.of_nat", "nat => ?'a1 word"), name =
                  "??.unknown", perm = false, thm =
                  "Word.of_nat == word_of_nat"}]),
             ("Word.the_int",
               Leaf
                [{elhs = "Word.the_int", extra = false, fo = true, lhs =
                  Const ("Word.the_int", "?'a1 word => int"), name =
                  "??.unknown", perm = false, thm =
                  "Word.the_int == uint"}]),
             ("Word.the_nat",
               Leaf
                [{elhs = "Word.the_nat", extra = false, fo = true, lhs =
                  Const ("Word.the_nat", "?'a1 word ... nat"), name =
                  "??.unknown", perm = false, thm =
                  "Word.the_nat == unat"}]),
             ("String.Literal'",
               Leaf
                [{elhs = "String.Literal'", extra = false, fo = true, lhs =
                  Const ("String.Literal'", "... ... ..."), name =
                  "String.Literal'_def", perm = false, thm =
                  "String.Literal' ... String.Literal"}]),
             ("Code_Numeral.Pos",
               Leaf
                [{elhs = "Code_Numeral.Pos", extra = false, fo = true, lhs =
                  Const ("Code_Numeral.Pos", "..."), name =
                  "Code_Numeral.Pos_def", perm = false, thm =
                  "... ... ..."}]),
             ("Word.signed_cast",
               Leaf
                [{elhs = "Word.signed_cast", extra = false, fo = true, lhs =
                  Const ("Word.signed_cast", "..."), name = "??.unknown",
                  ...}]),
             ("Word.the_signed_int",
               Leaf
                [{elhs = "...", extra = false, fo = true, lhs =
                  Const ("...", ...), ...}]),
             ("Groups.abs_class.abs",
               Leaf [{elhs = "...", extra = false, fo = true, ...}]),
             ("Groups.one_class.one",
               Leaf [{elhs = ..., extra = false, ...}, ...]),
             ("Groups.sgn_class.sgn", Leaf [...]),
             ("Code_Numeral.negative", ...), ...},
           comb =
           Net {atoms =
                {("Fun.id",
                   Net {atoms = {}, comb = Leaf [], var =
                        Leaf
                         [{elhs = "id ?y", extra = false, fo = true, lhs =
                           Const ("Fun.id", "?'a => ?'a") $
                             Var (("y", 0), "?'a"),
                           name = "Fun.id_apply", perm = false, thm =
                           "id ?y == ?y"}]}),
                  ("HOL.Ex",
                    Net {atoms = {}, comb =
                         Net {atoms =
                              {("HOL.eq",
                                 Net {atoms = {}, comb = Leaf [], var =
Leaf
 [{elhs = "...", extra = false, fo = true, lhs =
   Const ("...", "(?'d1 => bool) => bool") $ ..., ...}]})},
                              comb = Leaf [], var = Leaf []},
                         var =
                         Leaf
                          [{elhs = "Ex ?P1", extra = false, fo = true, lhs =
                            Const ("HOL.Ex", "(...) ... bool") $
                              Abs ("x", "1",
                                Var ((...), "1 => bool") $ ...),
                            name = "Numeral_Type.ex_1", perm = false, thm =
                            "EX x. ?P1 x == ?P1 1"},
                           {elhs = "Ex ?P1", extra = false, fo = true, lhs =
                            Const ("HOL.Ex", "... ... ...") $
                              Abs ("x", "...", ... $ ...),
                            name = "Product_Type.split_paired_Ex", perm =
                            false, thm =
                            "... x... ... ... == ... a b... ... ..."},
                           {elhs = "EX x y. ?p1 ... ......... ......",
                            extra = false, fo = true, lhs =
                            Const ("HOL.Ex", "...") $ Abs ("x", "...", ...),
                            name = "Product_Type.surj_pair", perm = false,
                            thm = "... ... ...... ... ... True"},
                           {elhs = "... x... ... ... ...", extra = false,
                            fo = false, lhs =
                            Const ("HOL.Ex", "...") $ Abs ("x", ..., ...),
                            name = "Set.ex_image_cong_iff_2", perm = false,
                            thm = "... ... ..."},
                           {elhs = "... ...... ...", extra = false, fo =
                            true, lhs =
                            Const ("...", ...) $ Abs ("...", "?'a1", ...),
                            name = "Set.ex_image_cong_iff_1", ...},
                           {elhs = "...", extra = false, fo = false, lhs =
                            Const ("...", "(?'d1 => bool) => bool") $ ...,
                            ...},
                           {elhs = "...", extra = false, fo = false, ...},
                           {elhs = ..., extra = false, ...}, ...]}),
                  ("HOL.All",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [{elhs = "All ?P1", extra = false, fo = true,
                            lhs =
                            Const ("HOL.All", "... ... ...") $
                              Abs ("i", "...", ... $ ...),
                            name = "Numeral_Type.forall_1", perm = false,
                            thm = "... i... ... ... == ?P1 ..."},
                           {elhs = "ALL y. ?x1 ... ... ...", extra = false,
                            fo = true, lhs =
                            Const ("HOL.All", "...") $
                              Abs ("y", "...", ...),
                            name = "Option.not_Some_eq", perm = false, thm =
                            "... ...... ... ... ... ... ..."},
                           {elhs = "All ?P1", extra = false, fo = true,
                            lhs =
                            Const ("HOL.All", "...") $ Abs ("x", ..., ...),
                            name = "Product_Type.split_paired_All", perm =
                            false, thm = "... ... ..."},
                           {elhs = "... ...... ...", extra = false, fo =
                            true, lhs =
                            Const ("...", ...) $ Abs ("...", "?'a1", ...),
                            name = "Set.all_not_in_conv", ...},
                           {elhs = "...", extra = false, fo = true, lhs =
                            Const ("...", "(?'d1 => bool) => bool") $ ...,
                            ...},
                           {elhs = "...", extra = false, fo = true, ...},
                           {elhs = ..., extra = false, ...}, ...]}),
                  ("HOL.Ex1",
                    Net {atoms = {}, comb =
                         Net {atoms =
                              {("HOL.eq",
                                 Net {atoms = {}, comb = Leaf [], var =
Leaf [{elhs = ..., extra = false, ...}]})},
                              comb = Leaf [], var = Leaf []},
                         var =
                         Leaf
                          [{elhs = "EX! x. x ... ?t1", extra = false, fo =
                            true, lhs =
                            Const ("HOL.Ex1", "...") $
                              Abs ("x", "...", ...),
                            name = "HOL.ex1_eq_1", perm = false, thm =
                            "... ...... ... ... True"}]}),
                  ("HOL.Not",
                    Net {atoms =
                         {("HOL.True",
                            Leaf
                             [{elhs = "... True", extra = false, fo = true,
                               lhs =
                               Const ("...", ...) $ Const ("...", "bool"),
                               name = "HOL.simp_thms_7", ...}]),
                           ("HOL.False",
                             Leaf
                              [{elhs = "... ...", extra = false, fo = true,
                                lhs = Const ("...", "bool => bool") $ ...,
                                ...}])},
                         comb =
                         Net {atoms =
                              {("HOL.Ex",
                                 Net {atoms = {}, comb = Leaf [...], var =
Leaf [...]}),
                                ("HOL.All",
                                  Net {atoms = {}, comb = ..., var = ...}),
                                ("HOL.Not", Net {atoms = {}, ...}),
                                ("Finite_Set.finite", ...)},
                              comb =
                              Net {atoms =
                                   {("HOL.eq", Net {atoms = {...}, ...}),
                                     ("Set.Bex", ...), ...},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []},
                         var = Leaf []}),
                  ("HOL.The",
                    Net {atoms = {}, comb =
                         Net {atoms =
                              {("HOL.eq",
                                 Net {atoms = {}, comb = ..., var = ...}),
                                ("Product_Type.prod.case_prod",
                                  Net {atoms = {}, ...})},
                              comb = Leaf [], var = Leaf []},
                         var =
                         Leaf
                          [{elhs = "... ...... ...", extra = false, fo =
                            true, lhs =
                            Const ("...", ...) $ Abs ("...", "?'a", ...),
                            name = "HOL.the_eq_trivial", ...}]}),
                  ("Int.Neg",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [{elhs = "...", extra = false, fo = true, lhs =
                            Const ("...", "num => int") $ ..., ...}]}),
                  ("Int.dup",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [{elhs = "...", extra = false, fo = true, ...}]}),
                  ("Int.nat",
                    Net {atoms =
                         {("Groups.one_class.one", Leaf [...]),
                           ("Groups.zero_class.zero", ...)},
                         comb = Net {atoms = {...}, comb = ..., var = ...},
                         var = Leaf [{elhs = ..., extra = false, ...}]}),
                  ("Map.dom",
                    Net {atoms = {}, comb = Net {atoms = {...}, ...}, var =
                         Leaf [...]}),
                  ("Map.ran", Net {atoms = {}, comb = ..., var = ...}),
                  ("Nat.Suc", Net {atoms = {...}, ...}), ("Num.inc", ...),
                  ...},
                comb =
                Net {atoms =
                     {("HOL.eq",
                        Net {atoms =
                             {("HOL.True",
                                Net {atoms =
                                     {("HOL.False",
  Leaf
   [{elhs = "...", extra = false, fo = true, lhs =
     Const ("...", "bool => bool => bool") $ ... $ ..., ...}])},
                                     comb = Leaf [], var =
                                     Leaf
[{elhs = "... ... ...", extra = false, fo = true, lhs =
  Const ("...", ...) $ Const ("...", "bool") $ ..., name =
  "HOL.simp_thms_11", ...}]}),
                               ("HOL.False",
                                 Net {atoms =
{("HOL.True", Leaf [{elhs = "...", extra = false, fo = true, ...}])}, comb =
Leaf [], var =
Leaf
 [{elhs = "...", extra = false, fo = true, lhs =
   Const ("...", "bool => bool => bool") $ ... $ ..., ...}]}),
                               ("Num.num.One",
                                 Net {atoms = {}, comb =
Net {atoms = {("Num.num.Bit0", ...), ...}, comb = Leaf [...], var =
     Leaf [...]},
var = Leaf []}),
                               ("Filter.at_bot",
                                 Net {atoms =
{("Orderings.bot_class.bot", Leaf [...])}, comb = Leaf [], var = Leaf []}),
                               ("Filter.at_top",
                                 Net {atoms =
{("Orderings.bot_class.bot", ...)}, comb = Leaf [...], var = Leaf [...]}),
                               ("List.list.Nil",
                                 Net {atoms = {}, comb = ..., var = ...}),
                               ("Filter.cofinite",
                                 Net {atoms = {...}, ...}),
                               ("Option.option.None", ...), ...},
                             comb =
                             Net {atoms =
                                  {("HOL.Not",
                                     Net
{atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Net {atoms = {...}, ...}, var = Leaf [...]}}),
                                    ("Int.nat",
Net {atoms = {}, comb = Leaf [], var =
     Net {atoms = {...}, comb = ..., var = ...}}),
                                    ("Map.dom",
Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {...}, ...}}),
                                    ("Nat.Suc",
Net {atoms = {...}, comb = ..., var = ...}),
                                    ("Set.Pow", Net {atoms = {}, ...}),
                                    ("List.rev", ...), ...},
                                  comb =
                                  Net {atoms =
 {("List.upt",
    Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}}),
   ("List.zip", Net {atoms = {}, comb = ..., var = ...}),
   ("List.drop", Net {atoms = {}, ...}), ("List.take", ...), ...},
 comb =
 Net {atoms =
      {("Fun.fun_upd", Net {atoms = {}, ...}), ("Map.map_add", ...), ...},
      comb = Net {atoms = {...}, comb = ..., var = ...}, var = Leaf []},
 var = Leaf []},
                                  var = Leaf []},
                             var =
                             Net {atoms =
                                  {("HOL.True",
                                     Leaf
[{elhs = "... ... ...", extra = false, fo = true, lhs =
  Const ("...", ...) $ Var ((...), "bool") $ ..., name = "HOL.simp_thms_12",
  ...}]),
                                    ("HOL.False",
Leaf
 [{elhs = "...", extra = false, fo = true, lhs =
   Const ("...", "bool => bool => bool") $ ... $ ..., ...}]),
                                    ("Groups.one_class.one",
Leaf [{elhs = "...", extra = false, fo = true, ...}])},
                                  comb =
                                  Net {atoms =
 {("HOL.Not", Net {atoms = {}, comb = Leaf [...], var = Leaf [...]}),
   ("Map.map_of", Net {atoms = {}, comb = ..., var = ...}),
   ("Groups.uminus_class.uminus", Net {atoms = {}, ...})},
 comb =
 Net {atoms =
      {("List.append", Net {atoms = {}, ...}), ("Map.map_add", ...), ...},
      comb = Leaf [], var = Leaf []},
 var = Leaf []},
                                  var =
                                  Leaf
                                   [{elhs = "?a1 ... ?b1", extra = false,
                                     fo = true, lhs =
                                     Const ("HOL.eq", "...") $
 Var (("...", 1), ...) $ Var ((...), "?'a1 word"),
                                     name = "local.uint_arith_simps_3",
                                     perm = false, thm = "... ... ..."},
                                    {elhs = "... ... ...", extra = false,
                                     fo = true, lhs =
                                     Const ("...", ...) $
 Var ((...), "?'a1") $ ...,
                                     name = "HOL.simp_thms_6", ...}]}}),
                       ("HOL.Let",
                         Net {atoms =
                              {("Groups.one_class.one",
                                 Net {atoms = {}, comb = Leaf [], var =
Leaf
 [{elhs = "...", extra = false, fo = true, lhs =
   Const ("...", "?'b1 => (?'b1 => ?'a) => ?'a") $ ... $ ..., ...}]}),
                                ("Groups.zero_class.zero",
                                  Net {atoms = {}, comb = Leaf [], var =
 Leaf [{elhs = "...", extra = false, fo = true, ...}]})},
                              comb =
                              Net {atoms =
                                   {("Nat.Suc",
Net {atoms = {}, comb = Leaf [], var =
     Net {atoms = {}, comb = ..., var = ...}}),
                                     ("Num.numeral_class.numeral",
 Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}}),
                                     ("Groups.uminus_class.uminus",
 Net {atoms = {}, comb = ..., var = ...})},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []}),
                       ("Int.sub",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {}, comb = Leaf [], var =
                                   Leaf
                                    [{elhs = "...", extra = false, fo =
true, lhs = Const ("...", "num => num => int") $ ... $ ..., ...}]}}),
                       ("Num.pow",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms =
                                   {("Num.num.One",
Leaf [{elhs = ..., extra = false, ...}])},
                                   comb =
                                   Net {atoms =
  {("Num.num.Bit0", ...), ...}, comb = Leaf [...], var = Leaf [...]},
                                   var = Leaf []}}),
                       ("Set.Bex",
                         Net {atoms =
                              {("Orderings.bot_class.bot",
                                 Net {atoms = {}, comb = Leaf [...], var =
Leaf [...]}),
                                ("Orderings.top_class.top",
                                  Net {atoms = {}, comb = ..., var = ...})},
                              comb =
                              Net {atoms =
                                   {("Set.Collect", Net {atoms = {}, ...}),
                                     ("List.list.set", ...), ...},
                                   comb =
                                   Net {atoms = {...}, comb = ..., var =
  ...},
                                   var = Leaf []},
                              var =
                              Net {atoms = {}, comb =
                                   Net {atoms = {...}, comb = ..., var =
  ...},
                                   var =
                                   Leaf
                                    [{elhs = ..., extra = false, ...},
                                     ...]}}),
                       ("Fun.comp",
                         Net {atoms =
                              {("Fun.id",
                                 Net {atoms = {}, comb = ..., var = ...}),
                                ("Option.option.the",
                                  Net {atoms = {...}, ...}),
                                ("Product_Type.prod.fst", ...), ...},
                              comb =
                              Net {atoms = {("List.list.map", ...), ...},
                                   comb = Net {atoms = {...}, ...}, var =
                                   Leaf [...]},
                              var =
                              Net {atoms = {("Fun.id", ...)}, comb =
                                   Leaf [...], var = Leaf [...]}}),
                       ("GCD.bezw",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {...}, comb = ..., var = ...}}),
                       ("HOL.conj",
                         Net {atoms = {("HOL.True", ...), ...}, comb =
                              Net {atoms = {...}, ...}, var =
                              Net {atoms = {...}, ...}}),
                       ("HOL.disj",
                         Net {atoms = {...}, comb = ..., var = ...}),
                       ("List.nth", Net {atoms = {}, ...}),
                       ("List.upt", ...), ...},
                     comb =
                     Net {atoms =
                          {("HOL.If",
                             Net {atoms =
                                  {("HOL.True",
                                     Net
{atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Leaf [...], var = Leaf [...]}}),
                                    ("HOL.False",
Net {atoms = {}, comb = Leaf [], var =
     Net {atoms = {}, comb = ..., var = ...}})},
                                  comb =
                                  Net {atoms = {}, comb =
 Net {atoms = {("HOL.eq", Net {atoms = {}, ...})}, comb = Leaf [], var =
      Leaf []},
 var = Leaf []},
                                  var =
                                  Net {atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Leaf [], var =
      Leaf [{elhs = ..., extra = false, ...}]}}}),
                            ("Fun.comp",
                              Net {atoms = {}, comb = Leaf [], var =
                                   Net {atoms = {}, comb = Leaf [], var =
  Net {atoms = {}, comb = Leaf [...], var = Leaf [...]}}}),
                            ("Fun.fcomp",
                              Net {atoms = {}, comb = Leaf [], var =
                                   Net {atoms = {}, comb = Leaf [], var =
  Net {atoms = {}, comb = ..., var = ...}}}),
                            ("List.foldl",
                              Net {atoms = {}, comb = Leaf [], var =
                                   Net {atoms = {}, comb = Leaf [...], var =
  Net {atoms = {...}, ...}}}),
                            ("List.foldr",
                              Net {atoms = {}, comb = Leaf [], var =
                                   Net {atoms = {}, comb = ..., var =
  ...}}),
                            ("Nat.compow",
                              Net {atoms =
                                   {("Groups.zero_class.zero", ...)}, comb =
                                   Leaf [...], var = Leaf [...]}),
                            ("Fun.fun_upd",
                              Net {atoms = {}, comb = ..., var = ...}),
                            ("Map.map_add", Net {atoms = {}, ...}),
                            ("Fun.bij_betw", ...), ...},
                          comb =
                          Net {atoms =
                               {("Fun.fun_upd",
                                  Net {atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Leaf [], var =
      Net {atoms = {}, comb = ..., var = ...}}}),
                                 ("Fun.map_fun",
                                   Net {atoms = {}, comb = Leaf [], var =
  Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}}}),
                                 ("Map.map_upds",
                                   Net {atoms = {}, comb = Leaf [], var =
  Net {atoms = {}, comb = ..., var = ...}}),
                                 ("BNF_Def.rel_sum",
                                   Net {atoms = {}, comb = Leaf [...], var =
  Net {atoms = {}, ...}}),
                                 ("Fun.override_on",
                                   Net {atoms = {}, comb = ..., var = ...}),
                                 ("Num.num.rec_num", Net {atoms = {}, ...}),
                                 ("Num.num.case_num", ...), ...},
                               comb =
                               Net {atoms =
                                    {("Enum.finite_4.rec_finite_4",
 Net {atoms = {}, comb = Leaf [], var =
      Net {atoms = {}, comb = ..., var = ...}}),
("Enum.finite_4.case_finite_4",
  Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}})},
                                    comb =
                                    Net {atoms =
   {("Enum.finite_5.rec_finite_5", Net {atoms = {}, comb = ..., var = ...}),
     ("Enum.finite_5.case_finite_5", Net {atoms = {}, ...})},
   comb =
   Net {atoms = {}, comb = Net {atoms = {...}, ...}, var = Leaf [...]},
   var = Leaf []},
                                    var = Leaf []},
                               var = Leaf []},
                          var = Leaf []},
                     var = Leaf []},
                var = Leaf []},
           var =
           Leaf
            [{elhs = "%u. EX x y. u = (x, y) & ?P1 x y", extra = false, fo =
              false, lhs =
              Abs ("u", "?'a1 * ?'b1",
                Const ("HOL.Ex", "(?'a1 => bool) => bool") $
                  Abs ("x", "?'a1",
                    Const ("HOL.Ex", "...") $ Abs ("y", "...", ...))),
              name = "Product_Type.split_eta_SetCompr2", perm = false, thm =
              "%u. EX x y. u = (x, y) & ?P1 x y == %(x, y). ?P1 x y"},
             {elhs = "%u. EX x y. u = (x, y) & ?y (x, y)", extra = false,
              fo = true, lhs =
              Abs ("u", "?'a1 * ?'b1",
                Const ("HOL.Ex", "(?'a1 ... bool) => bool") $
                  Abs ("x", "?'a1",
                    Const ("HOL.Ex", "...") $ Abs ("y", ..., ...))),
              name = "Product_Type.split_eta_SetCompr", perm = false, thm =
              "%u. EX x y. u = (x, y) & ?y (x, y) == ?y"},
             {elhs = "%a. ?y ()", extra = false, fo = true, lhs =
              Abs ("", "unit",
                Var (("y", 0), "unit => ?'a1") $
                  Const ("Product_Type.Unity", "unit")),
              name = "Product_Type.unit_abs_eta_conv", perm = false, thm =
              "%a. ?y () == ?y"},
             {elhs = "%A f. Inf (f ` A)", extra = false, fo = true, lhs =
              Abs ("A", "?'a1 set",
                Abs ("f", "?'a1 => bool",
                  Const ("Complete_Lattices.Inf_class.Inf", "...") $
                    (Const ("...",
                            "(?'a1 => bool) => ?'a1 set => bool set") $
                      ... $ ...))),
              name = "Complete_Lattices.INF_bool_eq", perm = false, thm =
              "%A f. Inf (f ` A) == Ball"},
             {elhs = "%A f. Sup (f ` A)", extra = false, fo = true, lhs =
              Abs ("A", "?'a1 set",
                Abs ("f", "?'a1 ... bool",
                  Const ("...", ...) $ (... $ ... $ ...))),
              name = "Complete_Lattices.SUP_bool_eq", perm = false, thm =
              "%A f. Sup (f ... A) == Bex"}]}},
     {congs =
      ({((true, "HOL.If"),
          "?b == ?c ==> if ?b then ?x else ?y == if ?c then ?x else ?y"),
         ((true, "Set.Bex"),
           "[| ?A == ?B; !!x. x : ?B =simp=> ?P x == ?Q x |]
            ==> EX x:?A. ?P x == EX x:?B. ?Q x"),
         ((true, "Set.Ball"),
           "[| ?A == ?B; !!x. x : ?B =simp=> ?P x == ?Q x |]
            ==> ALL x:?A. ?P x == ALL x:?B. ?Q x"),
         ((true, "Set.image"),
           "[| ?M == ?N; !!x. x : ?N =simp=> ?f x == ?g x |]
            ==> ?f ` ?M == ?g ` ?N"),
         ((true, "HOL.implies"),
           "[| ?P == ?P'; ?P' ==> ?Q == ?Q' |]
            ==> ?P --> ?Q == ?P' --> ?Q'"),
         ((true, "HOL.NO_MATCH"),
           "NO_MATCH ?pat ?val == NO_MATCH ?pat ?val"),
         ((true, "HOL.ASSUMPTION"), "ASSUMPTION ?A == ASSUMPTION ?A"),
         ((true, "HOL.simp_implies"),
           "[| PROP ?P == PROP ?P'; PROP ?P' ==> PROP ?Q ... PROP ?Q' |]
            ==> (PROP ?P ... PROP ?Q) == (PROP ?P' ... PROP ?Q')"),
         ((true, "Nat.nat.case_nat"),
           "?M == ?M' ==>
            case ?M of ... ... ... | ... ... ... ==
            case ?M' of ... ... ... | ... ... ..."),
         ((true, "Num.num.case_num"),
           "?num ... ?num' ==>
            ... ... ... ... ... ... ... ... ...
            ... ... ... ... ... ... ... ..."),
         ((true, "List.successively"),
           "... ...... ... ... ==> ... ... ..."),
         ((true, "List.list.case_list"), "... ... ..."),
         ((true, "String.char.case_char"), "..."),
         ((true, "Sum_Type.sum.case_sum"), "..."),
         ((true, "Nitpick.word.case_word"), ...), ((true, "..."), ...),
         ...},
       [(true, "Power.power_class.power"),
        (true, "Phantom_Type.phantom.case_phantom"),
        (true, "Nitpick.word.case_word"),
        (true, "Nitpick.pair_box.case_pair_box"),
        (true, "Nitpick.fun_box.case_fun_box"),
        (true, "Record.tuple_isomorphism.case_tuple_isomorphism"),
        (true, "Extraction.sumbool.case_sumbool"),
        (true, "Quickcheck_Exhaustive.three_valued.case_three_valued"),
        (true, "Quickcheck_Exhaustive.unknown.case_unknown"),
        (true, "Quickcheck_Narrowing.cfun.case_cfun"),
        (true, "Quickcheck_Narrowing.ffun.case_ffun"),
        (true, "Quickcheck_Narrowing.property.case_property"),
        (true, "Quickcheck_Narrowing.narrowing_cons.case_narrowing_cons"),
        (true, "Quickcheck_Narrowing.narrowing_term.case_narrowing_term"),
        (true, "Quickcheck_Narrowing.narrowing_type.case_narrowing_type"),
        (true, "..."), ...]),
      loop_tacs =
      [("split asm HOL.If :: (HOL.bool, (_, (_, _)fun)fun)fun", fn),
       ("split asm Rings.zero_neq_one_class.of_bool :: (HOL.bool, _)fun",
        fn),
       ("split Rings.zero_neq_one_class.of_bool :: (HOL.bool, _)fun", fn),
       ("split HOL.If :: (HOL.bool, (_, (_, _)fun)fun)fun", fn)],
      mk_rews =
      {mk = fn, mk_cong = fn, mk_eq_True = fn, mk_sym = fn, reorient = fn},
      procs =
      Net {atoms = {}, comb =
           Net {atoms =
                {("HOL.Ex",
                   Net {atoms = {}, comb = Leaf [], var =
                        Leaf
                         [Proc
                           {lhs =
                            Const ("HOL.Ex", "(...) ... bool") $
                              Abs ("x", "?'a",
                                Var ((...), "?'a => bool") $ ...),
                            name = "HOL.defined_Ex", proc = fn, stamp =
                            Stamp 91198}]}),
                  ("HOL.All",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [Proc
                            {lhs =
                             Const ("HOL.All", "... ... ...") $
                               Abs ("x", "...", ... $ ...),
                             name = "HOL.defined_All", proc = fn, stamp =
                             Stamp 91244}]}),
                  ("HOL.Not",
                    Net {atoms = {}, comb =
                         Net {atoms = {}, comb =
                              Net {atoms =
                                   {("Orderings.ord_class.less",
Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}})},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []},
                         var = Leaf []}),
                  ("Nat.Suc",
                    Net {atoms = {}, comb =
                         Net {atoms = {}, comb =
                              Net {atoms =
                                   {("Groups.plus_class.plus",
Net {atoms = {}, comb = ..., var = ...})},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []},
                         var = Leaf []}),
                  ("Pure.all",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [Proc
                            {lhs =
                             Const ("...", ...) $ Abs ("...", "?'a", ...),
                             name = "HOL.defined_all", proc = fn, stamp =
                             Stamp 91290}]}),
                  ("Set.Collect",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [Proc
                            {lhs =
                             Const ("...", "(?'a => bool) => ?'a set") $
                               ...,
                             name = "Product_Type.Collect_mem", proc = fn,
                             stamp = Stamp 616364},
                           Proc
                            {lhs = ... $ ..., name = "Set.defined_Collect",
                             proc = fn, stamp = Stamp 299868}]}),
                  ("List.list.set",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf
                          [Proc
                            {lhs = ... $ ..., name =
                             "List.list_to_set_comprehension", proc = fn,
                             stamp = Stamp 2625594}]}),
                  ("Product_Type.prod.case_prod",
                    Net {atoms = {}, comb = Leaf [], var =
                         Leaf [Proc {lhs = ..., name = "...", ...}]})},
                comb =
                Net {atoms =
                     {("HOL.eq",
                        Net {atoms =
                             {("Groups.one_class.one",
                                Net {atoms = {}, comb = Leaf [], var =
                                     Leaf
[Proc
  {lhs = Const ("...", "?'a => ?'a => bool") $ ... $ ..., name =
   "Groups.reorient_one", proc = fn, stamp = Stamp 171260}]}),
                               ("Groups.zero_class.zero",
                                 Net {atoms = {}, comb = Leaf [], var =
Leaf
 [Proc
   {lhs = ... $ ... $ ..., name = "Groups.reorient_zero", proc = fn, stamp =
    Stamp 171216}]})},
                             comb =
                             Net {atoms =
                                  {("Nat.Suc",
                                     Net
{atoms = {}, comb = Leaf [], var =
 Net {atoms = {}, comb = Leaf [...], var = Leaf [...]}}),
                                    ("Num.numeral_class.numeral",
Net {atoms = {}, comb = Leaf [], var =
     Net {atoms = {}, comb = ..., var = ...}}),
                                    ("Groups.uminus_class.uminus",
Net {atoms = {}, comb = Net {atoms = {...}, ...}, var =
     Net {atoms = {}, ...}})},
                                  comb =
                                  Net {atoms =
 {("Groups.plus_class.plus",
    Net {atoms = {}, comb = Leaf [...], var = Net {atoms = {}, ...}}),
   ("Groups.minus_class.minus", Net {atoms = {}, comb = ..., var = ...}),
   ("Groups.times_class.times", Net {atoms = {}, ...})},
 comb = Leaf [], var = Leaf []},
                                  var = Leaf []},
                             var =
                             Net {atoms = {}, comb =
                                  Net {atoms =
 {("Nat.Suc", Net {atoms = {}, comb = Leaf [...], var = Leaf [...]}),
   ("Groups.uminus_class.uminus", Net {atoms = {}, comb = ..., var = ...})},
 comb =
 Net {atoms =
      {("Groups.plus_class.plus", Net {atoms = {}, ...}),
        ("Groups.minus_class.minus", ...), ...},
      comb = Leaf [], var = Leaf []},
 var = Leaf []},
                                  var =
                                  Leaf
                                   [Proc
                                     {lhs =
Const ("...", ...) $ Var ((...), "?'a") $ ..., name = "record_eq", proc =
fn, stamp = Stamp 4153886},
                                    Proc
                                     {lhs =
Const ("...", "?'a list => ?'a list => bool") $ ... $ ..., name =
"List.list_neq", proc = fn, stamp = Stamp 2645062},
                                    Proc
                                     {lhs = ... $ ... $ ..., name =
"List.list_eq", proc = fn, stamp = Stamp 2633172},
                                    Proc {lhs = ..., name = "...", ...},
                                    Proc {lhs = ..., ...}, ...]}}),
                       ("HOL.Let",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {}, comb = Leaf [], var =
                                   Leaf
                                    [Proc
{lhs = Const ("...", "?'a => (?'a => ?'b) => ?'b") $ ... $ ..., name =
 "HOL.let_simp", proc = fn, stamp = Stamp 91526}]}}),
                       ("Set.Bex",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {}, comb = Leaf [], var =
                                   Leaf
                                    [Proc
{lhs = ... $ ... $ ..., name = "Set.defined_Bex", proc = fn, stamp =
 Stamp 303020}]}}),
                       ("Pure.imp",
                         Net {atoms = {}, comb =
                              Net {atoms =
                                   {("HOL.Trueprop",
Net {atoms = {...}, comb = ..., var = ...})},
                                   comb = Leaf [], var = Leaf []},
                              var = Leaf []}),
                       ("Set.Ball",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {}, comb = Leaf [], var =
                                   Leaf [Proc {lhs = ..., ...}]}}),
                       ("HOL.NO_MATCH",
                         Net {atoms = {}, comb = Leaf [], var =
                              Net {atoms = {}, comb = Leaf [...], var =
                                   Leaf [...]}}),
                       ("Rings.dvd_class.dvd",
                         Net {atoms = {}, comb =
                              Net {atoms = {}, comb = ..., var = ...}, var =
                              Net {atoms = {}, comb = ..., var = ...}}),
                       ("Groups.plus_class.plus",
                         Net {atoms = {}, comb = Leaf [...], var =
                              Net {atoms = {}, ...}}),
                       ("Lattices.inf_class.inf",
                         Net {atoms = {}, comb = ..., var = ...}),
                       ("Lattices.sup_class.sup", Net {atoms = {}, ...}),
                       ("Groups.minus_class.minus", ...), ...},
                     comb =
                     Net {atoms =
                          {("Fun.fun_upd",
                             Net {atoms = {}, comb =
                                  Net {atoms = {}, comb =
 Net {atoms = {}, comb = Net {atoms = {...}, comb = ..., var = ...}, var =
      Leaf []},
 var = Leaf []},
                                  var = Leaf []})},
                          comb = Leaf [], var = Leaf []},
                     var = Leaf []},
                var = Leaf []},
           var =
           Leaf
            [Proc
              {lhs = Var (("x", 0), "?'a"), name = "record", proc = fn,
               stamp = Stamp 4153844},
             Proc
              {lhs = Var (("x", 0), "?'a"), name = "record_upd", proc = fn,
               stamp = Stamp 4153854},
             Proc
              {lhs = Var (("x", 0), "unit"), name = "Product_Type.unit_eq",
               proc = fn, stamp = Stamp 562196}]},
      solvers =
      ([Solver {id = Stamp 1038750, name = "Rtranclp", solver = fn},
        Solver {id = Stamp 1038748, name = "Tranclp", solver = fn},
        Solver {id = Stamp 1038746, name = "Rtrancl", solver = fn},
        Solver {id = Stamp 1038744, name = "Trancl", solver = fn},
        Solver {id = Stamp 781564, name = "lin_arith", solver = fn},
        Solver {id = Stamp 132670, name = "Transitivity", solver = fn},
        Solver {id = Stamp 102528, name = "ASSUMPTION", solver = fn},
        Solver {id = Stamp 90936, name = "HOL unsafe", solver = fn}],
       [Solver {id = Stamp 90938, name = "HOL safe", solver = fn}]),
      subgoal_tac = fn, term_ord = fn}):
   simpset
val uint_arith_tacs = fn: Proof.context -> tactic list
val uint_arith_tac = fn: Proof.context -> int -> tactic
signature PARAMETRICITY =
  sig
    val add_dflt: thm -> Context.generic -> Context.generic
    val add_dflt_attr: attribute
    val adjust_arity: int -> thm -> thm
    val adjust_arity_tac: int -> Proof.context -> tactic'
    val asm_param_tac: Proof.context -> tactic'
    val cfg_single_step: bool Config.T
    val cfg_use_asm: bool Config.T
    val del_dflt: thm -> Context.generic -> Context.generic
    val del_dflt_attr: attribute
    val dest_param_goal: int -> thm -> param_ruleT
    val dest_param_rule: thm -> param_ruleT
    val dest_param_term: term -> param_ruleT
    val fo_rule: thm -> thm
    val get_dflt: Proof.context -> param_net
    val net_add: thm -> param_net -> param_net
    val net_add_int: Context.generic -> thm -> param_net -> param_net
    val net_del: thm -> param_net -> param_net
    val net_del_int: Context.generic -> thm -> param_net -> param_net
    val net_empty: param_net
    val net_tac: param_net -> Proof.context -> tactic'
    type param_net
    type param_ruleT =
       {R: term, arity: int, lhs: term, rhs: term, rhs_head: term}
    val param_rule_tac: Proof.context -> thm -> tactic'
    val param_rules_tac: Proof.context -> thm list -> tactic'
    val prepare_tac: Proof.context -> tactic'
    val safe_fun_relD_tac: Proof.context -> tactic'
    val setup: theory -> theory
    val unlambda_tac: Proof.context -> tactic'
  end
structure Parametricity: PARAMETRICITY
val cnv_relAPP = fn: term -> term
val to_relAPP_conv = fn: Proof.context -> conv
val to_relAPP_attr = fn: attribute
### theory "Automatic_Refinement.Param_Tool"
### 0.147s elapsed time, 0.594s cpu time, 0.000s GC time
Loading theory "Automatic_Refinement.Param_HOL" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops" via "Automatic_Refinement.Parametricity")
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
consts
  is_Inl :: "'a + 'b => bool"
consts
  is_Inr :: "'b + 'a => bool"
consts
  list_all2_alt :: "('a => 'b => bool) => 'a list => 'b list => bool"
### Cannot skip proof of schematic goal statement
locale word_rotate
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### theory "Collections.SetIteratorOperations"
### 1.747s elapsed time, 6.786s cpu time, 0.428s GC time
Loading theory "Collections.Assoc_List" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "HOL-ODE-Numerics.GenCF_No_Comp" via "Collections.Impl_Array_Map" via "Collections.Diff_Array")
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
signature SMT_WORD =
  sig
    val add_word_shift': term * string -> Context.generic -> Context.generic
  end
structure SMT_Word: SMT_WORD
### theory "HOL-Library.Word"
### 7.402s elapsed time, 28.080s cpu time, 5.648s GC time
Loading theory "Collections.Proper_Iterator" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "HOL-ODE-Numerics.GenCF_No_Comp" via "Collections.Impl_List_Set" via "Collections.Iterator" via "Collections.It_to_It")
consts
  list_all_rec :: "('a => bool) => 'a list => bool"
consts
  list_ex_rec :: "('a => bool) => 'a list => bool"
### theory "Automatic_Refinement.Param_HOL"
### 0.826s elapsed time, 3.232s cpu time, 0.184s GC time
Loading theory "Automatic_Refinement.Parametricity" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel" via "Automatic_Refinement.Autoref_Id_Ops")
### theory "Automatic_Refinement.Parametricity"
### 0.028s elapsed time, 0.112s cpu time, 0.000s GC time
Loading theory "Automatic_Refinement.Autoref_Id_Ops" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate" via "Automatic_Refinement.Autoref_Fix_Rel")
structure Icf_Proper_Iterator:
  sig
    val add: attribute
    val add_thm: thm -> Context.generic -> Context.generic
    val del: attribute
    val del_thm: thm -> Context.generic -> Context.generic
    val get: Proof.context -> thm list
    structure icf_proper_iteratorI: NAMED_THMS
    val setup: theory -> theory
  end
instantiation
  assoc_list :: (equal, equal) equal
  equal_assoc_list == equal_class.equal ::
    ('a, 'b) assoc_list => ('a, 'b) assoc_list => bool
instantiation
  assoc_list :: (type, type) size
  size_assoc_list == size :: ('a, 'b) assoc_list => nat
consts
  map_ran ::
    "('key => 'val => 'val') => ('key * 'val) list => ('key * 'val') list"
### theory "Collections.Assoc_List"
### 0.497s elapsed time, 1.937s cpu time, 0.169s GC time
Loading theory "Collections.Diff_Array" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "HOL-ODE-Numerics.GenCF_No_Comp" via "Collections.Impl_Array_Map")
### theory "Collections.Proper_Iterator"
### 0.473s elapsed time, 1.866s cpu time, 0.092s GC time
Loading theory "Collections.It_to_It" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "HOL-ODE-Numerics.GenCF_No_Comp" via "Collections.Impl_List_Set" via "Collections.Iterator")
locale proper_it_loc
  fixes
    it ::
      "'s => ('x list => bool)
             => ('x => 'x list => 'x list) => 'x list => 'x list"
    and
    it' ::
      "'s => ('\<sigma> => bool)
             => ('x => '\<sigma> => '\<sigma>) => '\<sigma> => '\<sigma>"
  assumes "proper_it_loc it it'"
### theory "Collections.It_to_It"
### 0.103s elapsed time, 0.415s cpu time, 0.000s GC time
Loading theory "Collections.SetIteratorGA" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "HOL-ODE-Numerics.GenCF_No_Comp" via "Collections.Impl_List_Set" via "Collections.Iterator")
val limit_depth = fn: int -> term -> term
val depth_of = fn: term -> int
val depth_of_lhs = fn: thm -> int
val depth_of_rhs = fn: thm -> int
val pretty_rewrite = fn: Proof.context -> thm -> thm -> Pretty.T
val index_rewr_thms = fn: thm list -> thm Item_Net.T
val net_rewr_tac = fn:
   thm Item_Net.T -> (term -> term) -> (conv -> 'a -> conv) -> 'a -> tactic'
signature AUTOREF_ID_OPS =
  sig
    val cfg_ss_id_op: bool Config.T
    val cfg_trace_failed_id: bool Config.T
    val cfg_trace_id_tags: bool Config.T
    val cfg_trace_intf_unif: bool Config.T
    val cfg_trace_patterns: bool Config.T
    val cfg_use_id_tags: bool Config.T
    val decl_derived_typing:
       bool -> term -> term -> Context.generic -> Context.generic
    val dest_const_intf: term -> term * term
    val dest_const_intf_thm: thm -> term * term
    val has_typ_thms: Proof.context -> term -> bool
    val id_phase: Autoref_Phases.phase
    val id_tac: Proof.context -> tactic'
    val mk_const_intf: term -> term -> term
    val mk_const_intf_thm: Proof.context -> term -> term -> thm
    val setup: theory -> theory
    val typ_thms_of_seq: Proof.context -> term -> thm Seq.seq
  end
structure Autoref_Id_Ops: AUTOREF_ID_OPS
signature AUTOREF_REL_INF =
  sig
    val cfg_sbias: int Config.T
    val roi_phase: Autoref_Phases.phase
    val roi_step_tac: Proof.context -> tactic'
    val roi_tac: Proof.context -> tactic'
    val setup: theory -> theory
  end
structure Autoref_Rel_Inf: AUTOREF_REL_INF
### theory "Automatic_Refinement.Autoref_Id_Ops"
### 0.801s elapsed time, 3.117s cpu time, 0.246s GC time
Loading theory "Automatic_Refinement.Autoref_Fix_Rel" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool" via "Automatic_Refinement.Autoref_Translate")
structure Autoref_Rules: NAMED_THMS
consts
  array_length :: "'a array => nat"
consts
  array_get :: "'a array => nat => 'a"
consts
  array_set :: "'a array => nat => 'a => 'a array"
consts
  array_grow :: "'a array => nat => 'a => 'a array"
consts
  array_shrink :: "'a array => nat => 'a array"
consts
  list_of_array :: "'a array => 'a list"
consts
  assoc_list_of_array :: "'a array => (nat * 'a) list"
### Rewrite rule not in simpset:
### Wellfounded.accp assoc_list_of_array_code_rel (?a1, ?n1) ==>
### assoc_list_of_array_code ?a1 ?n1 ==
### if array_length ?a1 <= ?n1 then []
### else (?n1, array_get ?a1 ?n1) # assoc_list_of_array_code ?a1 (?n1 + 1)
### theory "Collections.SetIteratorGA"
### 0.720s elapsed time, 2.793s cpu time, 0.258s GC time
Loading theory "Word_Lib.Bit_Comprehension" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "HOL-ODE-Numerics.GenCF_No_Comp" via "Collections.Impl_Array_Hash_Map" via "Collections.Intf_Hash" via "Collections.HashCode" via "Native_Word.Uint32" via "Native_Word.Code_Target_Word_Base" via "Native_Word.Bits_Integer")
### ML warning (line 350 of "$AFP/Automatic_Refinement/Tool/Autoref_Fix_Rel.thy"):
### Value identifier (phi) has not been referenced.
signature AUTOREF_FIX_REL =
  sig
    val add_hom_rule: thm -> Context.generic -> Context.generic
    val add_tyrel_rule: thm -> Context.generic -> Context.generic
    val analyze: Proof.context -> int -> int -> thm -> bool
    val compute_hom_net: thm_pairs -> Proof.context -> hom_net
    type constraint = (term * term) list * (term * term)
    val constraint_of_thm: Proof.context -> thm -> constraint
    val constraints_of_goal: int -> thm -> (term * term) list
    val constraints_of_term: term -> (term * term) list
    val declare_prio:
       string -> term -> prio_relpos -> local_theory -> local_theory
    val del_hom_rule: thm -> Context.generic -> Context.generic
    val del_tyrel_rule: thm -> Context.generic -> Context.generic
    val delete_prio: string -> local_theory -> local_theory
    val get_hom_rules: Proof.context -> thm list
    val get_tyrel_rules: Proof.context -> thm list
    val guess_relators_tac: Proof.context -> itactic
    type hom_net = (int * thm) Net.net
    val insert_CONSTRAINTS_tac: Proof.context -> tactic'
    val insert_tyrel_tac: Proof.context -> int -> int -> tactic'
    val internal_hom_tac: Proof.context -> itactic
    val internal_solve_tac: Proof.context -> itactic
    val internal_spec_tac: Proof.context -> itactic
    val mk_CONSTRAINT: term * term -> term
    val mk_CONSTRAINT_rl: Proof.context -> constraint -> thm
    val phase: Autoref_Phases.phase
    val pretty_constraint: Proof.context -> constraint -> Pretty.T
    val pretty_constraints: Proof.context -> constraint list -> Pretty.T
    val pretty_failure: Proof.context -> int -> int -> thm -> Pretty.T
    val pretty_thm_pair:
       Proof.context -> constraint option * thm -> Pretty.T
    val pretty_thm_pairs: Proof.context -> thm_pairs -> Pretty.T
    val print_prios: Proof.context -> unit
    datatype prio_relpos
    = PR_AFTER of string | PR_BEFORE of string | PR_FIRST | PR_LAST
    val setup: theory -> theory
    val solve_step_tac: Proof.context -> tactic'
    val solve_tyrel_tac: Proof.context -> tactic'
    type thm_pairs = (constraint option * thm) list
    val thm_pairsD_get: Proof.context -> thm_pairs
    val thm_pairsD_init: Proof.context -> Proof.context
    val try_solve_tac: Proof.context -> tactic'
    val tyrel_tac: Proof.context -> itactic
  end
structure Autoref_Fix_Rel: AUTOREF_FIX_REL
### theory "Automatic_Refinement.Autoref_Fix_Rel"
### 0.382s elapsed time, 1.501s cpu time, 0.105s GC time
Loading theory "Automatic_Refinement.Autoref_Translate" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool")
signature AUTOREF_TACTICALS =
  sig
    val COND'': (int -> thm -> bool) -> tactic' -> tactic' -> tactic'
    val IF_SOLVED: tactic' -> tactic' -> tactic' -> tactic'
    val REPEAT_INTERVAL: tactic' -> itactic
    val REPEAT_ON_SUBGOAL: tactic' -> tactic'
    val is_defer_cond: int -> thm -> bool
    val is_prefer_cond: int -> thm -> bool
  end
signature AUTOREF_TRANSLATE =
  sig
    val add_post_rule: thm -> Context.generic -> Context.generic
    val compute_trans_net:
       Autoref_Fix_Rel.thm_pairs -> Proof.context -> trans_net
    val delete_post_rule: thm -> Context.generic -> Context.generic
    val get_post_rules: Proof.context -> thm list
    val setup: theory -> theory
    val side_dbg_tac: Proof.context -> tactic'
    val side_tac: Proof.context -> tactic'
    val trans_analyze: Proof.context -> int -> int -> thm -> bool
    val trans_dbg_step_tac: Proof.context -> tactic'
    type trans_net = (int * thm) Net.net
    val trans_phase: Autoref_Phases.phase
    val trans_pretty_failure: Proof.context -> int -> int -> thm -> Pretty.T
    val trans_step_only_tac: Proof.context -> tactic'
    val trans_step_tac: Proof.context -> tactic'
    val trans_tac: Proof.context -> itactic
  end
structure Autoref_Tacticals: AUTOREF_TACTICALS
structure Autoref_Translate: AUTOREF_TRANSLATE
### theory "Automatic_Refinement.Autoref_Translate"
### 0.156s elapsed time, 0.593s cpu time, 0.067s GC time
Loading theory "Automatic_Refinement.Autoref_Gen_Algo" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool")
structure Autoref_Gen_Algo:
  sig
    val decl_setup: morphism -> Context.generic -> Context.generic
    structure ga_side_thms: NAMED_SORTED_THMS
    val setup: theory -> theory
    val side_ga_op_tac: Proof.context -> int -> tactic
    val side_ga_tac: Proof.context -> int -> tactic
    val transform_ga_rule: Context.generic -> thm -> thm list
  end
### theory "Automatic_Refinement.Autoref_Gen_Algo"
### 0.061s elapsed time, 0.242s cpu time, 0.000s GC time
Loading theory "Automatic_Refinement.Autoref_Relator_Interface" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement" via "Automatic_Refinement.Autoref_Tool")
signature AUTOREF_RELATOR_INTERFACE =
  sig
    val declare_rel_intf: thm -> Context.generic -> Context.generic
    val delete_rel_intf: thm -> Context.generic -> Context.generic
    val get_rel_intfs: Proof.context -> thm list
    val intf_of_rel: Proof.context -> term -> term
    val itype_of_rule: Proof.context -> thm -> (term * term) option
    val list_invented_intf: term -> term list
    val mk_intfAPP: term -> term -> term
    val setup: theory -> theory
    val warn_invented_intf: Proof.context -> term -> unit
  end
structure Autoref_Relator_Interface: AUTOREF_RELATOR_INTERFACE
### theory "Automatic_Refinement.Autoref_Relator_Interface"
### 0.091s elapsed time, 0.329s cpu time, 0.077s GC time
Loading theory "Automatic_Refinement.Autoref_Tool" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement")
### theory "Collections.Diff_Array"
### 1.313s elapsed time, 5.117s cpu time, 0.402s GC time
Loading theory "Word_Lib.More_Divides" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "HOL-ODE-Numerics.GenCF_No_Comp" via "Collections.Impl_Array_Hash_Map" via "Collections.Intf_Hash" via "Collections.HashCode" via "Native_Word.Uint32" via "Native_Word.Code_Target_Word_Base" via "Native_Word.Bits_Integer" via "Native_Word.Code_Symbolic_Bits_Int" via "Word_Lib.Least_significant_bit" via "Word_Lib.More_Word")
structure Autoref_Debug:
  sig
    val print_thm_pairs: Proof.context -> unit
    val print_thm_pairs_matching: Proof.context -> cterm -> unit
  end
locale autoref_syn
### theory "Word_Lib.More_Divides"
### 0.183s elapsed time, 0.710s cpu time, 0.077s GC time
Loading theory "Word_Lib.Signed_Division_Word" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "HOL-ODE-Numerics.GenCF_No_Comp" via "Collections.Impl_Array_Hash_Map" via "Collections.Intf_Hash" via "Collections.HashCode" via "Native_Word.Uint32" via "Native_Word.Code_Target_Word_Base")
instantiation
  word :: (len) signed_division
  signed_divide_word == signed_divide :: 'a word => 'a word => 'a word
  signed_modulo_word == signed_modulo :: 'a word => 'a word => 'a word
### theory "Automatic_Refinement.Autoref_Tool"
### 0.648s elapsed time, 2.544s cpu time, 0.152s GC time
Loading theory "Automatic_Refinement.Autoref_Bindings_HOL" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc" via "Automatic_Refinement.Automatic_Refinement")
structure Autoref_Struct_Expand:
  sig
    structure autoref_struct_expand: NAMED_THMS
    val decl_setup: morphism -> Context.generic -> Context.generic
    val expand_tac: Proof.context -> int -> tactic
    val setup: theory -> theory
  end
### theory "Word_Lib.Signed_Division_Word"
### 0.477s elapsed time, 1.858s cpu time, 0.151s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Examples_IntegralTemplates" via "Draft.ExtrEqs")
### Adding overloaded interface type to constant: ?x ::\<^sub>i i_bool
### Adding overloaded interface type to constant: ?x ::\<^sub>i i_bool
### Adding overloaded interface type to constant: ?x ::\<^sub>i i_bool
### Adding overloaded interface type to constant: ?x ::\<^sub>i i_bool
class bit_comprehension = ring_bit_operations +
  fixes set_bits :: "(nat => bool) => 'a"
  assumes "set_bits_bit_eq": "!!a. set_bits (bit a) = a"
instantiation
  int :: bit_comprehension
  set_bits_int == set_bits :: (nat => bool) => int
instantiation
  word :: (len) bit_comprehension
  set_bits_word == set_bits :: (nat => bool) => 'a word
Proofs for inductive predicate(s) "wf_set_bits_int"
  Proving monotonicity ...
### theory "Word_Lib.Bit_Comprehension"
### 1.273s elapsed time, 4.959s cpu time, 0.373s GC time
Loading theory "Affine_Arithmetic.Optimize_Float" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Enclosure_Operations" via "Affine_Arithmetic.Print")
### Code generator: dropping subsumed code equation
### bitlen ?x == if 0 < ?x then bitlen (?x div 2) + 1 else 0
### Code generator: dropping subsumed code equation
### Float ?m1.0 ?e1.0 + Float ?m2.0 ?e2.0 ==
### if ?m1.0 = 0 then Float ?m2.0 ?e2.0
### else if ?m2.0 = 0 then Float ?m1.0 ?e1.0
###      else if ?e1.0 <= ?e2.0
###           then Float (?m1.0 + ?m2.0 * 2 ^ nat (?e2.0 - ?e1.0)) ?e1.0
###           else Float (?m2.0 + ?m1.0 * 2 ^ nat (?e1.0 - ?e2.0)) ?e2.0
### Code generator: dropping subsumed code equation
### real_of_float (Float ?m ?e) ==
### if 0 <= ?e then real_of_int ?m * 2 ^ nat ?e
### else real_of_int ?m / 2 ^ nat (- ?e)
### Code generator: dropping subsumed code equation
### float_down ?p (Float ?m ?e) ==
### if ?p + ?e < 0 then Float (div_twopow ?m (nat (- (?p + ?e)))) (- ?p)
### else Float ?m ?e
### Code generator: dropping subsumed code equation
### lapprox_posrat ?prec ?x ?y ==
### let l = rat_precision ?prec (int ?x) (int ?y);
###     x = if 0 <= l then ?x * 2 ^ nat l div ?y
###         else ?x div 2 ^ nat (- l) div ?y
### in normfloat (Float (int x) (- l))
### Code generator: dropping subsumed code equation
### rapprox_posrat ?prec ?x ?y ==
### let l = rat_precision ?prec (int ?x) (int ?y);
###     (r, s) =
###       if 0 <= l then (int ?x * 2 ^ nat l, int ?y)
###       else (int ?x, int ?y * 2 ^ nat (- l));
###     d = r div s; m = r mod s
### in normfloat (Float (d + (if m = 0 | ?y = 0 then 0 else 1)) (- l))
### Code generator: dropping subsumed code equation
### float_round_down ?prec (Float ?m ?e) ==
### let d = bitlen \<bar>?m\<bar> - int ?prec - 1
### in if 0 < d then Float (div_twopow ?m (nat d)) (?e + d) else Float ?m ?e
### Code generator: dropping subsumed code equation
### int_floor_fl (Float ?m ?e) ==
### if 0 <= ?e then ?m * 2 ^ nat ?e else ?m div 2 ^ nat (- ?e)
### Code generator: dropping subsumed code equation
### floor_fl (Float ?m ?e) ==
### if 0 <= ?e then Float ?m ?e else Float (?m div 2 ^ nat (- ?e)) 0
### theory "Affine_Arithmetic.Optimize_Float"
### 0.318s elapsed time, 1.251s cpu time, 0.082s GC time
Loading theory "Affine_Arithmetic.Float_Real" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Example_Utilities" via "HOL-ODE-Numerics.Init_ODE_Solver" via "HOL-ODE-Numerics.Concrete_Reachability_Analysis_C1" via "HOL-ODE-Numerics.Concrete_Reachability_Analysis" via "HOL-ODE-Numerics.Abstract_Reachability_Analysis" via "Affine_Arithmetic.Affine_Arithmetic" via "Affine_Arithmetic.Ex_Affine_Approximation")
### Cannot skip proof of schematic goal statement
### Code generator: dropping subsumed code equation
### 0 == Ratreal 0
### Code generator: dropping subsumed code equation
### 1 == Ratreal 1
### Constructor as head in equation, in theorem:
### real_of_float (Float ?m ?e) ==
### if 0 <= ?e then real_of_int ?m * 2 ^ nat ?e
### else real_of_int ?m / real_of_int (Optimize_Integer.power_int 2 (- ?e))
### theory "Affine_Arithmetic.Float_Real"
### 0.128s elapsed time, 0.488s cpu time, 0.101s GC time
Loading theory "Affine_Arithmetic.Counterclockwise" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Enclosure_Operations" via "Affine_Arithmetic.Print" via "Affine_Arithmetic.Affine_Code" via "Affine_Arithmetic.Intersection" via "Affine_Arithmetic.Polygon" via "Affine_Arithmetic.Counterclockwise_2D_Strict" via "Affine_Arithmetic.Counterclockwise_Vector")
### Cannot skip proof of schematic goal statement
locale linorder_list0
  fixes le :: "'a => 'a => bool"
Proofs for inductive predicate(s) "sortedP"
### theory "HOL-Library.BigO"
### 0.846s elapsed time, 3.337s cpu time, 0.183s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Examples_IntegralTemplates")
  Proving monotonicity ...
### Cannot skip proof of schematic goal statement
locale linorder_list
  fixes le :: "'a => 'a => bool"
    and S :: "'a set"
  assumes "linorder_list le S"
locale ccw_system0
  fixes ccw :: "'a => 'a => 'a => bool"
    and S :: "'a set"
locale ccw_system12
  fixes ccw :: "'a => 'a => 'a => bool"
    and S :: "'a set"
  assumes "ccw_system12 ccw S"
locale ccw_system123
  fixes ccw :: "'a => 'a => 'a => bool"
    and S :: "'a set"
  assumes "ccw_system123 ccw S"
locale ccw_system4
  fixes ccw :: "'a => 'a => 'a => bool"
    and S :: "'a set"
  assumes "ccw_system4 ccw S"
locale ccw_system1235'
  fixes ccw :: "'a => 'a => 'a => bool"
    and S :: "'a set"
  assumes "ccw_system1235' ccw S"
locale ccw_system1235
  fixes ccw :: "'a => 'a => 'a => bool"
    and S :: "'a set"
  assumes "ccw_system1235 ccw S"
locale ccw_system
  fixes ccw :: "'a => 'a => 'a => bool"
    and S :: "'a set"
  assumes "ccw_system ccw S"
### theory "Affine_Arithmetic.Counterclockwise"
### 0.519s elapsed time, 2.054s cpu time, 0.110s GC time
Loading theory "Affine_Arithmetic.Counterclockwise_Vector" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Enclosure_Operations" via "Affine_Arithmetic.Print" via "Affine_Arithmetic.Affine_Code" via "Affine_Arithmetic.Intersection" via "Affine_Arithmetic.Polygon" via "Affine_Arithmetic.Counterclockwise_2D_Strict")
Found termination order: "{}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
locale ccw_vector_space
  fixes ccw :: "'a => 'a => 'a => bool"
    and S :: "'a set"
  assumes "ccw_vector_space ccw S"
### Ignoring duplicate rewrite rule:
### balance Empty ?s1 ?t1 Empty == Branch B Empty ?s1 ?t1 Empty
### Ignoring duplicate rewrite rule:
### balance (Branch B ?va1 ?vb1 ?vc1 ?vd1) ?s1 ?t1 Empty ==
### Branch B (Branch B ?va1 ?vb1 ?vc1 ?vd1) ?s1 ?t1 Empty
### Ignoring duplicate rewrite rule:
### balance Empty ?s1 ?t1 (Branch B ?va1 ?vb1 ?vc1 ?vd1) ==
### Branch B Empty ?s1 ?t1 (Branch B ?va1 ?vb1 ?vc1 ?vd1)
locale ccw_convex
  fixes ccw :: "'a => 'a => 'a => bool"
    and S :: "'a set"
    and oriented :: "'a => 'a => bool"
  assumes "ccw_convex ccw S oriented"
### theory "Affine_Arithmetic.Counterclockwise_Vector"
### 0.202s elapsed time, 0.787s cpu time, 0.138s GC time
Loading theory "Affine_Arithmetic.Counterclockwise_2D_Strict" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Enclosure_Operations" via "Affine_Arithmetic.Print" via "Affine_Arithmetic.Affine_Code" via "Affine_Arithmetic.Intersection" via "Affine_Arithmetic.Polygon")
### Cannot skip proof of schematic goal statement
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
### Cannot skip proof of schematic goal statement
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.756s elapsed time, 2.950s cpu time, 0.378s GC time
Loading theory "HOL-ODE-Numerics.Transfer_Analysis" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Transfer_ODE")
consts
  paint :: "color => ('a, 'b) rbt => ('a, 'b) rbt"
Found termination order: "{}"
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
### Cannot skip proof of schematic goal statement
### Adding overloaded interface type to constant: ?a ::\<^sub>i i_of_rel Id
### Cannot skip proof of schematic goal statement
### theory "Affine_Arithmetic.Counterclockwise_2D_Strict"
### 0.649s elapsed time, 2.520s cpu time, 0.301s GC time
Loading theory "Affine_Arithmetic.Counterclockwise_2D_Arbitrary" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Enclosure_Operations" via "Affine_Arithmetic.Print" via "Affine_Arithmetic.Affine_Code" via "Affine_Arithmetic.Intersection")
### theory "HOL-ODE-Numerics.Transfer_Analysis"
### 0.399s elapsed time, 1.540s cpu time, 0.171s GC time
Loading theory "Affine_Arithmetic.Polygon" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Enclosure_Operations" via "Affine_Arithmetic.Print" via "Affine_Arithmetic.Affine_Code" via "Affine_Arithmetic.Intersection")
### Cannot skip proof of schematic goal statement
Found termination order: "{}"
consts
  polychain_of :: "'a => 'a list => ('a * 'a) list"
### Cannot skip proof of schematic goal statement
consts
  dirvec :: "'a * 'a => 'a"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
### Cannot skip proof of schematic goal statement
### theory "Affine_Arithmetic.Polygon"
### 0.417s elapsed time, 1.618s cpu time, 0.179s GC time
Loading theory "Affine_Arithmetic.Affine_Form" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Enclosure_Operations" via "Affine_Arithmetic.Print" via "Affine_Arithmetic.Affine_Code" via "Affine_Arithmetic.Affine_Approximation")
### Cannot skip proof of schematic goal statement
### theory "Affine_Arithmetic.Counterclockwise_2D_Arbitrary"
### 0.553s elapsed time, 2.133s cpu time, 0.306s GC time
Loading theory "Affine_Arithmetic.Floatarith_Expression" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Enclosure_Operations" via "Affine_Arithmetic.Print" via "Affine_Arithmetic.Affine_Code" via "Affine_Arithmetic.Affine_Approximation" via "Affine_Arithmetic.Straight_Line_Program")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "Automatic_Refinement.Autoref_Bindings_HOL"
### 2.751s elapsed time, 10.727s cpu time, 1.115s GC time
Loading theory "Automatic_Refinement.Automatic_Refinement" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc")
### theory "Automatic_Refinement.Automatic_Refinement"
### 0.042s elapsed time, 0.174s cpu time, 0.000s GC time
Loading theory "Collections.Intf_Comp" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "HOL-ODE-Numerics.GenCF_No_Comp" via "Collections.Impl_List_Map")
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
locale linorder_on
  fixes D :: "'a set"
    and cmp :: "'a => 'a => comp_res"
  assumes "linorder_on D cmp"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
consts
  cmp_lex' :: "('a => 'b => comp_res) => 'a list => 'b list => comp_res"
Found termination order: "{}"
consts
  interpret_floatariths :: "floatarith list => real list => real list"
instantiation
  floatarith :: {inverse,minus,one,plus,times,uminus,zero}
  zero_floatarith == zero_class.zero :: floatarith
  uminus_floatarith == uminus :: floatarith => floatarith
  times_floatarith == times :: floatarith => floatarith => floatarith
  plus_floatarith == plus :: floatarith => floatarith => floatarith
  one_floatarith == one_class.one :: floatarith
  minus_floatarith == minus :: floatarith => floatarith => floatarith
  inverse_floatarith == inverse :: floatarith => floatarith
  divide_floatarith == divide :: floatarith => floatarith => floatarith
Found termination order: "{}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  pdevs :: (equal) equal
  equal_pdevs == equal_class.equal :: 'a pdevs => 'a pdevs => bool
consts
  Sum\<^sub>e :: "('a => 'b) => 'a list => 'b"
class order = preorder +
  assumes "order_antisym": "!!x y. [| x <= y; y <= x |] ==> x = y"
locale eq_linorder_on
  fixes D :: "'a set"
    and cmp :: "'a => 'a => comp_res"
  assumes "eq_linorder_on D cmp"
Found termination order: "{}"
### theory "Collections.Intf_Comp"
### 1.303s elapsed time, 5.055s cpu time, 0.510s GC time
Loading theory "Collections.Idx_Iterator" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "HOL-ODE-Numerics.GenCF_No_Comp" via "Collections.Impl_List_Set" via "Collections.Iterator")
Found termination order: "{}"
Found termination order: "(%p. size (fst (snd (snd p)))) <*mlex*> {}"
### theory "Collections.Idx_Iterator"
### 0.446s elapsed time, 1.704s cpu time, 0.194s GC time
Loading theory "HOL-ODE-Numerics.One_Step_Method" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Example_Utilities" via "HOL-ODE-Numerics.Init_ODE_Solver" via "HOL-ODE-Numerics.Concrete_Reachability_Analysis_C1" via "HOL-ODE-Numerics.Concrete_Reachability_Analysis" via "HOL-ODE-Numerics.Abstract_Reachability_Analysis" via "HOL-ODE-Numerics.Runge_Kutta")
class order = preorder +
  assumes "order_antisym": "!!x y. [| x <= y; y <= x |] ==> x = y"
locale grid
  fixes t :: "nat => real"
  assumes "grid t"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
locale consistent_one_step
  fixes t0 :: "real"
    and t1 :: "real"
    and x :: "real => 'a"
    and incr :: "real => real => 'a => 'a"
    and p :: "nat"
    and B :: "real"
    and r :: "real"
    and L :: "real"
  assumes "consistent_one_step t0 t1 x incr p B r L"
Found termination order: "size <*mlex*> {}"
locale max_step
  fixes t :: "nat => real"
    and t1 :: "real"
    and p :: "nat"
    and L :: "real"
    and B :: "real"
    and r :: "real"
  assumes "max_step t t1 p L B r"
locale convergent_one_step
  fixes t0 :: "real"
    and t1 :: "real"
    and x :: "real => 'a"
    and incr :: "real => real => 'a => 'a"
    and p :: "nat"
    and B :: "real"
    and r :: "real"
    and L :: "real"
    and t :: "nat => real"
  assumes "convergent_one_step t0 t1 x incr p B r L t"
Found termination order:
  "(%p. size (snd p)) <*mlex*> (%p. size (fst p)) <*mlex*> {}"
locale disturbed_one_step
  fixes t :: "nat => real"
    and t1 :: "real"
    and s :: "real => real => 'a => 'a"
    and s0 :: "'a"
    and x :: "real => 'a"
    and incr :: "real => real => 'a => 'a"
    and p :: "nat"
    and B :: "real"
    and L :: "real"
  assumes "disturbed_one_step t t1 s s0 x incr p B L"
locale stable_one_step
  fixes t1 :: "real"
    and x :: "real => 'a"
    and incr :: "real => real => 'a => 'a"
    and p :: "nat"
    and B :: "real"
    and r :: "real"
    and L :: "real"
    and t :: "nat => real"
    and s :: "real => real => 'a => 'a"
    and s0 :: "'a"
  assumes "stable_one_step t1 x incr p B r L t s s0"
consts
  max_Var_floatarith :: "floatarith => nat"
### theory "Affine_Arithmetic.Affine_Form"
### 2.649s elapsed time, 10.246s cpu time, 1.101s GC time
Loading theory "Affine_Arithmetic.Intersection" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Enclosure_Operations" via "Affine_Arithmetic.Print" via "Affine_Arithmetic.Affine_Code")
locale rounded_one_step
  fixes t :: "nat => real"
    and t1 :: "real"
    and x :: "real => 'a"
    and incr :: "real => real => 'a => 'a"
    and p :: "nat"
    and B :: "real"
    and r :: "real"
    and L :: "real"
    and incr' :: "real => real => 'a => 'a"
    and x0' :: "'a"
  assumes "rounded_one_step t t1 x incr p B r L incr' x0'"
consts
  max_Var_floatariths :: "floatarith list => nat"
### theory "HOL-ODE-Numerics.One_Step_Method"
### 0.658s elapsed time, 2.542s cpu time, 0.271s GC time
Loading theory "HOL-ODE-Numerics.Runge_Kutta" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Example_Utilities" via "HOL-ODE-Numerics.Init_ODE_Solver" via "HOL-ODE-Numerics.Concrete_Reachability_Analysis_C1" via "HOL-ODE-Numerics.Concrete_Reachability_Analysis" via "HOL-ODE-Numerics.Abstract_Reachability_Analysis")
consts
  max_Var_form :: "form => nat"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd (snd p))))))) <*mlex*> {}"
consts
  rk_eval_dynamic ::
    "(nat => nat => real)
     => (nat => real)
        => (real * 'a => 'a) => real => real => 'a => nat => nat => 'a"
locale derivative_on_prod
  fixes T :: "real set"
    and X :: "'a set"
    and f :: "real => 'a => 'a"
    and f' :: "real * 'a => real * 'a => 'a"
  assumes "derivative_on_prod T X f f'"
consts
  fresh_floatarith :: "floatarith => nat => bool"
consts
  fresh_floatariths :: "floatarith list => nat => bool"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### ML warning (line 976 of "$AFP/Affine_Arithmetic/Floatarith_Expression.thy"):
### Pattern is not exhaustive.
### ML warning (line 978 of "$AFP/Affine_Arithmetic/Floatarith_Expression.thy"):
### Pattern is not exhaustive.
### ML warning (line 1013 of "$AFP/Affine_Arithmetic/Floatarith_Expression.thy"):
### Pattern is not exhaustive.
### ML warning (line 1031 of "$AFP/Affine_Arithmetic/Floatarith_Expression.thy"):
### Pattern is not exhaustive.
val mk_congeq = fn: Proof.context -> term list -> thm -> string list * thm
val mk_congs = fn:
   Proof.context ->
     thm list -> (string list * thm) list * (typ * ('a list * 'b list)) list
val interpret_floatariths_congs = fn: Proof.context -> thm list
val preproc_form_conv = fn: Proof.context -> conv
val reify_floatariths_tac = fn: Proof.context -> int -> tactic
### Cannot skip proof of schematic goal statement
val interpret_floatariths_step_tac = fn: Proof.context -> int -> tactic
locale derivative_norm_bounded
  fixes T :: "real set"
    and X :: "'a set"
    and f :: "real => 'a => 'a"
    and f' :: "real * 'a => real * 'a => 'a"
    and B :: "real"
    and B' :: "real"
  assumes "derivative_norm_bounded T X f f' B B'"
locale grid_from
  fixes t :: "nat => real"
    and t0 :: "real"
  assumes "grid_from t t0"
Found termination order: "length <*mlex*> {}"
locale euler_consistent
  fixes T :: "real set"
    and f :: "real => 'a => 'a"
    and X :: "'a set"
    and X' :: "'a set"
    and B :: "real"
    and f' :: "real * 'a => real * 'a => 'a"
    and B' :: "real"
    and solution :: "real => 'a"
    and t0 :: "real"
    and x0 :: "'a"
    and r :: "real"
    and e :: "real"
  assumes "euler_consistent T f X X' B f' B' solution t0 x0 r e"
locale max_step1
  fixes t :: "nat => real"
    and t1 :: "real"
    and L :: "real"
    and B :: "real"
    and r :: "real"
  assumes "max_step1 t t1 L B r"
locale euler_convergent
  fixes X' :: "'a set"
    and B :: "real"
    and f' :: "real * 'a => real * 'a => 'a"
    and B' :: "real"
    and solution :: "real => 'a"
    and t0 :: "real"
    and x0 :: "'a"
    and r :: "real"
    and e :: "real"
    and T :: "real set"
    and f :: "real => 'a => 'a"
    and X :: "'a set"
    and t :: "nat => real"
  assumes "euler_convergent X' B f' B' solution t0 x0 r e T f X t"
locale ivp_rectangle_bounded_derivative
  fixes t0 :: "real"
    and T :: "real set"
    and x0 :: "'a"
    and b :: "real"
    and f :: "real => 'a => 'a"
    and X :: "'a set"
    and B :: "real"
    and f' :: "real * 'a => real * 'a => 'a"
    and B' :: "real"
    and r :: "real"
    and e :: "real"
  assumes "ivp_rectangle_bounded_derivative t0 T x0 b f B f' B' r e"
  defines "X == cball x0 b"
locale euler_on_rectangle
  fixes t0 :: "real"
    and T :: "real set"
    and x0 :: "'a"
    and f :: "real => 'a => 'a"
    and X :: "'a set"
    and t :: "nat => real"
    and e :: "real"
    and b :: "real"
    and r :: "real"
    and B :: "real"
    and f' :: "real * 'a => real * 'a => 'a"
    and B' :: "real"
  assumes "euler_on_rectangle t0 T x0 f t e b r B f' B'"
  defines "X == cball x0 b"
locale euler_on_rectangle
  fixes t0 :: "real"
    and T :: "real set"
    and x0 :: "'a"
    and f :: "real => 'a => 'a"
    and X :: "'a set"
    and t :: "nat => real"
    and e :: "real"
    and b :: "real"
    and r :: "real"
    and B :: "real"
    and f' :: "real * 'a => real * 'a => 'a"
    and B' :: "real"
  assumes "euler_on_rectangle t0 T x0 f t e b r B f' B'"
  defines "X == cball x0 b"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale euler_rounded_on_rectangle
  fixes t0 :: "real"
    and T :: "real set"
    and x0 :: "'a"
    and f :: "real => 'a => 'a"
    and X :: "'a set"
    and t :: "nat => real"
    and t0' :: "real"
    and e1' :: "real"
    and e2' :: "real"
    and x0' :: "'a"
    and b :: "real"
    and r :: "real"
    and B :: "real"
    and f' :: "real * 'a => real * 'a => 'a"
    and B' :: "real"
    and g :: "real => 'a => 'a"
    and e :: "int"
  assumes
    "euler_rounded_on_rectangle t0 T x0 f t t0' e1' e2' x0' b r B f' B' g e"
  defines "X == cball x0 b"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
locale euler_rounded_on_rectangle
  fixes t0 :: "real"
    and T :: "real set"
    and x0 :: "'a"
    and f :: "real => 'a => 'a"
    and X :: "'a set"
    and t :: "nat => real"
    and t0' :: "real"
    and e1' :: "real"
    and e2' :: "real"
    and x0' :: "'a"
    and b :: "real"
    and r :: "real"
    and B :: "real"
    and f' :: "real * 'a => real * 'a => 'a"
    and B' :: "real"
    and g :: "real => 'a => 'a"
    and e :: "int"
  assumes
    "euler_rounded_on_rectangle t0 T x0 f t t0' e1' e2' x0' b r B f' B' g e"
  defines "X == cball x0 b"
consts
  bound_intersect_2d ::
    "nat
     => ((real * real) * real * real) list => real => (real * real) option"
### theory "HOL-ODE-Numerics.Runge_Kutta"
### 3.664s elapsed time, 13.794s cpu time, 1.680s GC time
Loading theory "HOL-ODE-Numerics.Transfer_ODE" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector")
Found termination order: "(%p. length (fst (snd p))) <*mlex*> {}"
consts
  freshs_floatarith :: "floatarith => nat list => bool"
Found termination order:
  "case_sum (%p. size (fst (snd p)))
    (case_sum (%p. size (snd (snd (snd (snd p)))))
      (%p. size (snd p))) <*mlex*>
   case_sum (%x. Suc 0) (%x. 0) <*mlex*>
   case_sum (%x. 0) (case_sum (%x. Suc 0) (%x. 0)) <*mlex*> {}"
### theory "Affine_Arithmetic.Intersection"
### 3.953s elapsed time, 14.847s cpu time, 1.843s GC time
Loading theory "Native_Word.Code_Int_Integer_Conversion" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "HOL-ODE-Numerics.GenCF_No_Comp" via "Collections.Impl_Array_Hash_Map" via "Collections.Intf_Hash" via "Collections.HashCode" via "Native_Word.Uint32" via "Native_Word.Code_Target_Word_Base" via "Native_Word.Bits_Integer")
### theory "Native_Word.Code_Int_Integer_Conversion"
### 0.032s elapsed time, 0.128s cpu time, 0.000s GC time
Loading theory "Refine_Monadic.Refine_Chapter" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic")
### theory "Refine_Monadic.Refine_Chapter"
### 0.026s elapsed time, 0.098s cpu time, 0.000s GC time
Loading theory "Refine_Monadic.Refine_Mono_Prover" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.Refine_Misc")
signature REFINE_MONO_PROVER =
  sig
    val add_mono_thm: thm -> Context.generic -> Context.generic
    val decl_setup: morphism -> Context.generic -> Context.generic
    val declare_mono_triggers:
       thm list -> morphism -> Context.generic -> Context.generic
    val del_mono_thm: thm -> Context.generic -> Context.generic
    val gen_split_cases_tac: pat_extractor -> Proof.context -> tactic'
    val get_mono_thms: Proof.context -> thm list
    val mono_tac: Proof.context -> tactic'
    type pat_extractor =
       term ->
         (term * ((Proof.context -> conv) -> Proof.context -> conv)) option
    val setup: theory -> theory
    val split_cases_tac: Proof.context -> tactic'
    val untriggered_mono_tac: Proof.context -> tactic'
  end
structure Refine_Mono_Prover: REFINE_MONO_PROVER
locale mono_setup_loc
  fixes le :: "'a => 'a => bool"
  assumes "mono_setup_loc le"
### theory "Refine_Monadic.Refine_Mono_Prover"
### 0.168s elapsed time, 0.624s cpu time, 0.053s GC time
Loading theory "Refine_Monadic.Refine_Misc" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic")
Found termination order: "size <*mlex*> {}"
locale galois_connection
  fixes \<alpha> :: "'a => 'b"
    and \<gamma> :: "'b => 'a"
  assumes "galois_connection \<alpha> \<gamma>"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-ODE-Numerics.Transfer_ODE"
### 0.982s elapsed time, 3.643s cpu time, 0.440s GC time
Loading theory "Show.Show" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Enclosure_Operations" via "Affine_Arithmetic.Print" via "Show.Show_Instances")
Found termination order: "size <*mlex*> {}"
consts
  isnFDERIV ::
    "nat
     => floatarith list => nat list => nat list => real list => nat => bool"
### Ignoring duplicate rewrite rule:
### map_to_set Map.empty == {}
### theory "Refine_Monadic.Refine_Misc"
### 0.707s elapsed time, 2.591s cpu time, 0.365s GC time
Loading theory "Refine_Monadic.RefineG_Domain" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.RefineG_Recursion")
class show = type +
  fixes shows_prec :: "nat => 'a => char list => char list"
    and shows_list :: "'a list => char list => char list"
  assumes
    "shows_prec_append":
      "!!p x r s. shows_prec p x (r @ s) = shows_prec p x r @ s"
    and
    "shows_list_append":
      "!!xs r s. shows_list xs (r @ s) = shows_list xs r @ s"
consts
  isnFDERIV_approx ::
    "nat
     => nat
        => floatarith list
           => nat list
              => nat list => float interval option list => nat => bool"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
consts
  rbt_map_entry :: "'a => ('b => 'b) => ('a, 'b) rbt => ('a, 'b) rbt"
instantiation
  char :: show
  shows_prec_char == shows_prec :: nat => char => char list => char list
  shows_list_char == shows_list :: char list => char list => char list
consts
  map :: "('a => 'b => 'c) => ('a, 'b) rbt => ('a, 'c) rbt"
signature SHOW_GENERATOR =
  sig
    val generate_showsp: string -> local_theory -> local_theory
    val register_foreign_partial_and_full_showsp:
       string ->
         int ->
           term ->
             term ->
               thm option ->
                 term ->
                   thm option ->
                     bool list -> thm -> local_theory -> local_theory
    val register_foreign_showsp:
       typ -> term -> thm -> local_theory -> local_theory
    val show_instance: string -> theory -> theory
  end
structure Show_Generator: SHOW_GENERATOR
instantiation
  list :: (show) show
  shows_prec_list == shows_prec :: nat => 'a list => char list => char list
  shows_list_list == shows_list :: 'a list list => char list => char list
instantiation
  String.literal :: show
  shows_prec_literal == shows_prec ::
    nat => String.literal => char list => char list
  shows_list_literal == shows_list ::
    String.literal list => char list => char list
### theory "Show.Show"
### 1.057s elapsed time, 3.743s cpu time, 0.709s GC time
Loading theory "Refine_Monadic.RefineG_Transfer" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic" via "Refine_Monadic.RefineG_Recursion")
### theory "Refine_Monadic.RefineG_Domain"
### 0.805s elapsed time, 2.836s cpu time, 0.568s GC time
Loading theory "Show.Show_Instances" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Enclosure_Operations" via "Affine_Arithmetic.Print")
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
structure RefineG_Transfer:
  sig
    structure Post_Processors: THEORY_DATA
    structure Post_Simp: GENERIC_DATA
    val add_post_processor:
       Symtab.key -> (Proof.context -> tactic') -> theory -> theory
    val add_post_simps: thm list -> Context.generic -> Context.generic
    val align_tac: Proof.context -> tactic'
    val del_post_simps: thm list -> Context.generic -> Context.generic
    val delete_post_processor: Symtab.key -> theory -> theory
    val get_post_processors:
       theory -> (Symtab.key * (Proof.context -> tactic')) list
    val get_post_simp_rules: Context.generic -> thm list
    val get_post_ss: Proof.context -> Proof.context
    val post_process_tac: Proof.context -> tactic'
    val post_simps_op:
       (Proof.context * 'a -> Proof.context) ->
         'a -> Context.generic -> Context.generic
    structure post_subst: NAMED_THMS
    val post_subst_tac: Proof.context -> int -> tactic
    val post_transfer_tac: thm list -> Proof.context -> int -> tactic
    val setup: theory -> theory
    structure transfer: NAMED_THMS
    val transfer_tac: thm list -> Proof.context -> int -> thm -> thm Seq.seq
  end
locale transfer
  fixes \<alpha> :: "'c => 'a"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale ordered_transfer
  fixes \<alpha> :: "'c => 'a"
locale dist_transfer
  fixes \<alpha> :: "'c => 'a"
  assumes "dist_transfer \<alpha>"
locale ccpo_transfer
  fixes \<alpha> :: "'c => 'a"
locale dist_ccpo_transfer
  fixes \<alpha> :: "'c => 'a"
  assumes "dist_ccpo_transfer \<alpha>"
### theory "Refine_Monadic.RefineG_Transfer"
### 0.237s elapsed time, 0.808s cpu time, 0.151s GC time
Loading theory "Refine_Monadic.RefineG_Assert" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic")
locale generic_Assert
  fixes bind :: "'mu => (unit => 'ma) => 'ma"
    and return :: "unit => 'mu"
    and ASSERT :: "bool => 'mu"
    and ASSUME :: "bool => 'mu"
  assumes "generic_Assert bind return ASSERT ASSUME"
consts
  showsp_bool :: "nat => bool => char list => char list"
locale transfer_generic_Assert
  fixes cbind :: "'muc => (unit => 'mac) => 'mac"
    and creturn :: "unit => 'muc"
    and cASSERT :: "bool => 'muc"
    and cASSUME :: "bool => 'muc"
    and abind :: "'mua => (unit => 'maa) => 'maa"
    and areturn :: "unit => 'mua"
    and aASSERT :: "bool => 'mua"
    and aASSUME :: "bool => 'mua"
    and \<alpha> :: "'mac => 'maa"
  assumes
    "transfer_generic_Assert cbind creturn cASSERT cASSUME abind areturn
      aASSERT aASSUME"
consts
  pshowsp_prod ::
    "nat
     => (char list => char list) * (char list => char list)
        => char list => char list"
locale transfer_generic_Assert_remove
  fixes abind :: "'mua => (unit => 'maa) => 'maa"
    and areturn :: "unit => 'mua"
    and aASSERT :: "bool => 'mua"
    and aASSUME :: "bool => 'mua"
    and \<alpha> :: "'mac => 'maa"
  assumes "transfer_generic_Assert_remove abind areturn aASSERT aASSUME"
### theory "Refine_Monadic.RefineG_Assert"
### 0.205s elapsed time, 0.671s cpu time, 0.154s GC time
Loading theory "Refine_Monadic.RefineG_Recursion" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Basic")
Found termination order: "{}"
Found termination order: "(%p. size (fst (snd (snd p)))) <*mlex*> {}"
### Ignoring duplicate rewrite rule:
### flat_ord ?b1 ?b1 ?x1 == True
### theory "Refine_Monadic.RefineG_Recursion"
### 1.751s elapsed time, 6.336s cpu time, 4.850s GC time
Loading theory "Refine_Monadic.RefineG_While" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_While")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
deriving "show" instance for type "Option.option"
generating show function for type "Option.option"
deriving "show" instance for type "Sum_Type.sum"
generating show function for type "Sum_Type.sum"
deriving "show" instance for type "Product_Type.prod"
deriving "show" instance for type "Product_Type.unit"
deriving "show" instance for type "HOL.bool"
deriving "show" instance for type "Nat.nat"
deriving "show" instance for type "Int.int"
deriving "show" instance for type "Rat.rat"
locale generic_WHILE
  fixes bind :: "'m => ('a => 'm) => 'm"
    and return :: "'a => 'm"
    and WHILEIT :: "('a => bool) => ('a => bool) => ('a => 'm) => 'a => 'm"
    and WHILEI :: "('a => bool) => ('a => bool) => ('a => 'm) => 'a => 'm"
    and WHILET :: "('a => bool) => ('a => 'm) => 'a => 'm"
    and WHILE :: "('a => bool) => ('a => 'm) => 'a => 'm"
  assumes "generic_WHILE bind return WHILEIT WHILEI WHILET WHILE"
locale transfer_WHILE
  fixes cbind :: "'mc => ('a => 'mc) => 'mc"
    and creturn :: "'a => 'mc"
    and
    cWHILEIT :: "('a => bool) => ('a => bool) => ('a => 'mc) => 'a => 'mc"
    and
    cWHILEI :: "('a => bool) => ('a => bool) => ('a => 'mc) => 'a => 'mc"
    and cWHILET :: "('a => bool) => ('a => 'mc) => 'a => 'mc"
    and cWHILE :: "('a => bool) => ('a => 'mc) => 'a => 'mc"
    and abind :: "'ma => ('a => 'ma) => 'ma"
    and areturn :: "'a => 'ma"
    and
    aWHILEIT :: "('a => bool) => ('a => bool) => ('a => 'ma) => 'a => 'ma"
    and
    aWHILEI :: "('a => bool) => ('a => bool) => ('a => 'ma) => 'a => 'ma"
    and aWHILET :: "('a => bool) => ('a => 'ma) => 'a => 'ma"
    and aWHILE :: "('a => bool) => ('a => 'ma) => 'a => 'ma"
    and \<alpha> :: "'mc => 'ma"
  assumes
    "transfer_WHILE cbind creturn cWHILEIT cWHILEI cWHILET cWHILE abind
      areturn aWHILEIT aWHILEI aWHILET aWHILE \<alpha>"
locale generic_WHILE_rules
  fixes bind :: "'a => ('b => 'a) => 'a"
    and return :: "'b => 'a"
    and SPEC :: "('b => bool) => 'a"
    and WHILEIT :: "('b => bool) => ('b => bool) => ('b => 'a) => 'b => 'a"
    and WHILEI :: "('b => bool) => ('b => bool) => ('b => 'a) => 'b => 'a"
    and WHILET :: "('b => bool) => ('b => 'a) => 'b => 'a"
    and WHILE :: "('b => bool) => ('b => 'a) => 'b => 'a"
  assumes "generic_WHILE_rules bind return SPEC WHILEIT WHILEI WHILET WHILE"
### theory "Show.Show_Instances"
### 2.670s elapsed time, 9.615s cpu time, 5.354s GC time
Loading theory "Refine_Monadic.Refine_Basic" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic")
### theory "Refine_Monadic.RefineG_While"
### 0.481s elapsed time, 1.825s cpu time, 0.199s GC time
Loading theory "Refine_Monadic.Refine_Det" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Foreach" via "Refine_Monadic.Refine_Pfun")
instantiation
  nres :: (type) complete_lattice
  Inf_nres == Inf :: 'a nres set => 'a nres
  Sup_nres == Sup :: 'a nres set => 'a nres
  bot_nres == bot :: 'a nres
  sup_nres == sup :: 'a nres => 'a nres => 'a nres
  top_nres == top :: 'a nres
  inf_nres == inf :: 'a nres => 'a nres => 'a nres
  less_eq_nres == less_eq :: 'a nres => 'a nres => bool
  less_nres == less :: 'a nres => 'a nres => bool
Found termination order: "{}"
Found termination order: "{}"
instantiation
  dres :: (type) complete_lattice
  Inf_dres == Inf :: 'a dres set => 'a dres
  Sup_dres == Sup :: 'a dres set => 'a dres
  bot_dres == bot :: 'a dres
  sup_dres == sup :: 'a dres => 'a dres => 'a dres
  top_dres == top :: 'a dres
  inf_dres == inf :: 'a dres => 'a dres => 'a dres
  less_eq_dres == less_eq :: 'a dres => 'a dres => bool
  less_dres == less :: 'a dres => 'a dres => bool
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
structure refine_pw_simps: NAMED_THMS
Found termination order: "{}"
### No equation for constructor "FAILi"
consts
  the_RES :: "'a nres => 'a set"
Found termination order: "{}"
structure Refine:
  sig
    val no_prod_split: bool Config.T
    val post_tac: Proof.context -> tactic'
    val rcg_tac: thm list -> Proof.context -> tactic'
    structure refine: NAMED_THMS
    structure refine0: NAMED_THMS
    structure refine2: NAMED_THMS
    structure vcg: NAMED_THMS
    structure vcg_cons: NAMED_THMS
  end
### theory "Refine_Monadic.Refine_Det"
### 1.949s elapsed time, 7.328s cpu time, 0.937s GC time
Loading theory "Word_Lib.More_Arithmetic" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "HOL-ODE-Numerics.GenCF_No_Comp" via "Collections.Impl_Array_Hash_Map" via "Collections.Intf_Hash" via "Collections.HashCode" via "Native_Word.Uint32" via "Native_Word.Code_Target_Word_Base" via "Native_Word.Bits_Integer" via "Native_Word.Code_Symbolic_Bits_Int" via "Word_Lib.Least_significant_bit" via "Word_Lib.More_Word")
### theory "Word_Lib.More_Arithmetic"
### 0.095s elapsed time, 0.347s cpu time, 0.042s GC time
Loading theory "Word_Lib.More_Word" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "HOL-ODE-Numerics.GenCF_No_Comp" via "Collections.Impl_Array_Hash_Map" via "Collections.Intf_Hash" via "Collections.HashCode" via "Native_Word.Uint32" via "Native_Word.Code_Target_Word_Base" via "Native_Word.Bits_Integer" via "Native_Word.Code_Symbolic_Bits_Int" via "Word_Lib.Least_significant_bit")
### theory "Affine_Arithmetic.Floatarith_Expression"
### 13.326s elapsed time, 49.704s cpu time, 10.287s GC time
val mk_2elem_list = fn: term -> term -> term
val mk_compr = fn: term -> term -> term
val test1 = "[1, 2]": cterm
val test2 = "{x: {1, 2, 3}. 2 < x}": cterm
val test3 =
   Const ("Groups.plus_class.plus", "nat => nat => nat") $ Bound 0 $
     Bound 0:
   term
val dest_pair_singleton = fn: term -> term
val dest_nat_pair_singleton = fn: term -> term * term
val dest_pair_singleton_T = fn: term -> (term * typ) * (term * typ)
val dest_pair_lambda = fn: term -> string * typ * string * typ * term * term
val foo = fn: term -> term * term * int * term * term
"True"
  :: "bool"
(if ?x <= ?y then if ?x = ?y then ?P else ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x <= ?y then if ?y = ?x then ?P else ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x <= ?y then if ?y <= ?x then ?P else ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x <= ?y then if ?x < ?y then ?Q else ?P else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x < ?y then ?Q else if ?x <= ?y then ?P else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x < ?y then ?Q else if ?y < ?x then ?R else ?P) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x < ?y then ?Q else if ?x = ?y then ?P else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x < ?y then ?Q else if ?y = ?x then ?P else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x = ?y then ?P else if ?y < ?x then ?R else ?Q) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x = ?y then ?P else if ?x < ?y then ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x = ?y then ?P else if ?y <= ?x then ?R else ?Q) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x = ?y then ?P else if ?x <= ?y then ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
\<Sqinter> (Sup ` ?A) = \<Squnion> (Inf ` {f ` ?A |f. ALL Y:?A. f Y : Y})
(0 < length ?xs) = (?xs ~= [])
"merge"
  :: "'a"
val it = "foo == ANNOT foo bar": thm
val it = "foo == foo ::: bar": thm
"set_rel"
  :: "('a * 'b) set => ('a set * 'b set) set"
val it = "Ra \<times>\<^sub>r \<langle>Rb\<rangle>option_rel": cterm
val it =
   "\<langle>Id\<rangle>option_rel \<rightarrow>
    \<langle>Id\<rangle>list_rel":
   cterm
"list_update"
  :: "'a list => nat => 'a => 'a list"
val it = 4: int
val it = "(1::'a) # \<dots> # \<dots>": cterm
val it = [2, 3, 4, 5]: int list
"(o)"
  :: "('a => 'b) => ('c => 'a) => 'c => 'b"
linorder_on (?f ` ?D) ?cmp ==> linorder_on ?D (cmp_img ?f ?cmp)
"cmp_lex"
  :: "('a => 'b => comp_res) => 'a list => 'b list => comp_res"
"cmp_prod"
  :: "('a => 'b => comp_res)
      => ('c => 'd => comp_res) => 'a * 'c => 'b * 'd => comp_res"
theorem flatf_fp_induct_pointwise:
  fixes pre :: "'a => 'b => bool"
    and post :: "'a => 'b => 'c => bool"
    and b :: "'c"
    and B :: "('b => 'c) => 'b => 'c"
    and a :: "'a"
    and x :: "'b"
  assumes "!!a x. pre a x ==> post a x b"
    and "flatf_mono b B"
    and "pre a x"
    and
    "!!f a x.
        [| !!a' x'. pre a' x' ==> post a' x' (f x'); pre a x;
           flatf_ord b f (flatf_fp b B) |]
        ==> post a x (B f x)"
  shows "post a x (flatf_fp b B x)"
### theory "Refine_Monadic.Refine_Basic"
### 2.664s elapsed time, 10.012s cpu time, 1.221s GC time
Loading theory "Refine_Monadic.Refine_Leof" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic")
Loading theory "Refine_Monadic.Refine_Heuristics" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic")
Found termination order:
  "case_sum (%p. size (fst p)) (%p. size (fst p)) <*mlex*> {}"
structure refine_heuristics_simps: NAMED_THMS
### ML warning (line 65 of "$AFP/Refine_Monadic/Refine_Heuristics.thy"):
### Value identifier (ctxt) has not been referenced.
structure Refine_dref_type:
  sig
    structure RELATES_rules: NAMED_THMS
    val has_schematic: term -> bool
    val match_goal_shape_tac:
       (term -> bool) -> Proof.context -> int -> thm -> thm Seq.seq
    val output_failed_msg: Proof.context -> term -> unit
    structure pattern_rules: NAMED_THMS
    val tracing: bool Config.T
    val type_tac: Proof.context -> tactic
  end
### theory "Refine_Monadic.Refine_Heuristics"
### 0.175s elapsed time, 0.655s cpu time, 0.108s GC time
Loading theory "Refine_Monadic.Refine_Pfun" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Foreach")
### theory "Refine_Monadic.Refine_Leof"
### 0.182s elapsed time, 0.679s cpu time, 0.108s GC time
Loading theory "Refine_Monadic.Refine_More_Comb" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic")
Found termination order: "size <*mlex*> {}"
### theory "Refine_Monadic.Refine_More_Comb"
### 0.239s elapsed time, 0.911s cpu time, 0.084s GC time
Loading theory "Refine_Monadic.Refine_While" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic")
### theory "Refine_Monadic.Refine_Pfun"
### 0.314s elapsed time, 1.186s cpu time, 0.134s GC time
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "{}"
### theory "Word_Lib.More_Word"
### 1.603s elapsed time, 5.821s cpu time, 0.746s GC time
Loading theory "Word_Lib.Bit_Shifts_Infix_Syntax" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "HOL-ODE-Numerics.GenCF_No_Comp" via "Collections.Impl_Array_Hash_Map" via "Collections.Intf_Hash" via "Collections.HashCode" via "Native_Word.Uint32" via "Native_Word.Code_Target_Word_Base" via "Native_Word.Bits_Integer" via "Native_Word.Code_Symbolic_Bits_Int" via "Word_Lib.Generic_set_bit" via "Word_Lib.Most_significant_bit")
Loading theory "Word_Lib.Least_significant_bit" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "HOL-ODE-Numerics.GenCF_No_Comp" via "Collections.Impl_Array_Hash_Map" via "Collections.Intf_Hash" via "Collections.HashCode" via "Native_Word.Uint32" via "Native_Word.Code_Target_Word_Base" via "Native_Word.Bits_Integer" via "Native_Word.Code_Symbolic_Bits_Int")
class semiring_bit_operations = semiring_bits +
  fixes "and" :: "'a => 'a => 'a"
    and or :: "'a => 'a => 'a"
    and xor :: "'a => 'a => 'a"
    and mask :: "nat => 'a"
    and set_bit :: "nat => 'a => 'a"
    and unset_bit :: "nat => 'a => 'a"
    and flip_bit :: "nat => 'a => 'a"
    and push_bit :: "nat => 'a => 'a"
    and drop_bit :: "nat => 'a => 'a"
    and take_bit :: "nat => 'a => 'a"
  assumes "bit_and_iff": "!!a b n. bit (and a b) n = (bit a n & bit b n)"
    and "bit_or_iff": "!!a b n. bit (or a b) n = (bit a n | bit b n)"
    and "bit_xor_iff": "!!a b n. bit (xor a b) n = (bit a n ~= bit b n)"
    and "mask_eq_exp_minus_1": "!!n. mask n = (2::'a) ^ n - (1::'a)"
    and "set_bit_eq_or": "!!n a. set_bit n a = or a (push_bit n (1::'a))"
    and
    "bit_unset_bit_iff":
      "!!m a n. bit (unset_bit m a) n = (bit a n & m ~= n)"
    and
    "flip_bit_eq_xor": "!!n a. flip_bit n a = xor a (push_bit n (1::'a))"
    and "push_bit_eq_mult": "!!n a. push_bit n a = a * (2::'a) ^ n"
    and "drop_bit_eq_div": "!!n a. drop_bit n a = a div (2::'a) ^ n"
    and "take_bit_eq_mod": "!!n a. take_bit n a = a mod (2::'a) ^ n"
Proofs for inductive predicate(s) "rwof"
  Proving monotonicity ...
consts
  bounded_WHILE' ::
    "nat => ('a => bool) => ('a => 'a nres) => 'a nres => 'a nres"
consts
  bounded_WHILE ::
    "nat => ('a => bool) => ('a => 'a nres) => 'a nres => 'a nres"
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
class semiring_bit_operations = semiring_bits +
  fixes "and" :: "'a => 'a => 'a"
    and or :: "'a => 'a => 'a"
    and xor :: "'a => 'a => 'a"
    and mask :: "nat => 'a"
    and set_bit :: "nat => 'a => 'a"
    and unset_bit :: "nat => 'a => 'a"
    and flip_bit :: "nat => 'a => 'a"
    and push_bit :: "nat => 'a => 'a"
    and drop_bit :: "nat => 'a => 'a"
    and take_bit :: "nat => 'a => 'a"
  assumes "bit_and_iff": "!!a b n. bit (and a b) n = (bit a n & bit b n)"
    and "bit_or_iff": "!!a b n. bit (or a b) n = (bit a n | bit b n)"
    and "bit_xor_iff": "!!a b n. bit (xor a b) n = (bit a n ~= bit b n)"
    and "mask_eq_exp_minus_1": "!!n. mask n = (2::'a) ^ n - (1::'a)"
    and "set_bit_eq_or": "!!n a. set_bit n a = or a (push_bit n (1::'a))"
    and
    "bit_unset_bit_iff":
      "!!m a n. bit (unset_bit m a) n = (bit a n & m ~= n)"
    and
    "flip_bit_eq_xor": "!!n a. flip_bit n a = xor a (push_bit n (1::'a))"
    and "push_bit_eq_mult": "!!n a. push_bit n a = a * (2::'a) ^ n"
    and "drop_bit_eq_div": "!!n a. drop_bit n a = a div (2::'a) ^ n"
    and "take_bit_eq_mod": "!!n a. take_bit n a = a mod (2::'a) ^ n"
### theory "Refine_Monadic.Refine_While"
### 2.669s elapsed time, 9.692s cpu time, 5.673s GC time
Loading theory "Refine_Monadic.Refine_Transfer" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic" via "Refine_Monadic.Refine_Foreach")
class lsb = semiring_bits +
  fixes lsb :: "'a => bool"
  assumes "lsb_odd": "lsb = odd"
instantiation
  int :: lsb
  lsb_int == lsb :: int => bool
instantiation
  word :: (len) lsb
  lsb_word == lsb :: 'a word => bool
### theory "Word_Lib.Least_significant_bit"
### 2.212s elapsed time, 8.159s cpu time, 5.436s GC time
### Missing patterns in function definition:
### the_res dSUCCEEDi = undefined
### the_res dFAILi = undefined
class ring_bit_operations = semiring_bit_operations + ring_parity +
  fixes not :: "'a => 'a"
  assumes
    "bit_not_iff_eq":
      "!!a n. bit (not a) n = ((2::'a) ^ n ~= (0::'a) & ~ bit a n)"
  assumes "minus_eq_not_minus_1": "!!a. - a = not (a - (1::'a))"
Found termination order: "{}"
### theory "Refine_Monadic.Refine_Transfer"
### 0.412s elapsed time, 1.300s cpu time, 0.116s GC time
Loading theory "Refine_Monadic.Autoref_Monadic" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic")
Loading theory "Refine_Monadic.Refine_Automation" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic")
structure Autoref_Monadic:
  sig
    val autoref_monadic_tac: Proof.context -> int -> tactic
    val cfg_plain: bool Config.T
  end
### theory "Refine_Monadic.Autoref_Monadic"
### 0.047s elapsed time, 0.185s cpu time, 0.000s GC time
Loading theory "Refine_Monadic.Refine_Foreach" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "Refine_Monadic.Refine_Monadic")
signature REFINE_AUTOMATION =
  sig
    val add_cd_pattern: cterm -> Context.generic -> Context.generic
    val add_extraction: string -> extraction -> theory -> theory
    val add_vc_rec_thm: thm -> Context.generic -> Context.generic
    val add_vc_solve_thm: thm -> Context.generic -> Context.generic
    val define_concrete_fun:
       extraction list option ->
         binding ->
           Token.src list ->
             indexname list ->
               thm ->
                 cterm list -> local_theory -> (thm * thm) * local_theory
    val del_cd_pattern: cterm -> Context.generic -> Context.generic
    val del_vc_rec_thm: thm -> Context.generic -> Context.generic
    val del_vc_solve_thm: thm -> Context.generic -> Context.generic
    val extract_as_def:
       (string * typ) list ->
         string -> term -> local_theory -> (term * thm) * local_theory
    val extract_recursion_eqs:
       extraction list -> string -> thm -> local_theory -> local_theory
    type extraction =
       {gen_tac: local_theory -> tactic', gen_thm: thm, pattern: term}
    val get_cd_patterns: Proof.context -> cterm list
    val get_vc_rec_thms: Proof.context -> thm list
    val get_vc_solve_thms: Proof.context -> thm list
    val mk_qualified: string -> bstring -> binding
    val prepare_cd_pattern: Proof.context -> cterm -> cterm
    val prepare_code_thms_cmd:
       string list -> thm -> local_theory -> local_theory
    val setup: theory -> theory
    val vc_solve_modifiers: Method.modifier parser list
    val vc_solve_tac: Proof.context -> bool -> tactic'
  end
structure Refine_Automation: REFINE_AUTOMATION
val it = (): unit
val it = (): unit
### theory "Refine_Monadic.Refine_Automation"
### 0.251s elapsed time, 0.942s cpu time, 0.092s GC time
class ring_bit_operations = semiring_bit_operations + ring_parity +
  fixes not :: "'a => 'a"
  assumes
    "bit_not_iff_eq":
      "!!a n. bit (not a) n = ((2::'a) ^ n ~= (0::'a) & ~ bit a n)"
  assumes "minus_eq_not_minus_1": "!!a. - a = not (a - (1::'a))"
### theory "Word_Lib.Bit_Shifts_Infix_Syntax"
### 2.873s elapsed time, 10.331s cpu time, 5.606s GC time
Loading theory "Word_Lib.Most_significant_bit" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "HOL-ODE-Numerics.GenCF_No_Comp" via "Collections.Impl_Array_Hash_Map" via "Collections.Intf_Hash" via "Collections.HashCode" via "Native_Word.Uint32" via "Native_Word.Code_Target_Word_Base" via "Native_Word.Bits_Integer" via "Native_Word.Code_Symbolic_Bits_Int" via "Word_Lib.Generic_set_bit")
class msb = type +
  fixes msb :: "'a => bool"
instantiation
  int :: msb
  msb_int == msb :: int => bool
instantiation
  word :: (len) msb
  msb_word == msb :: 'a word => bool
### theory "Word_Lib.Most_significant_bit"
### 0.149s elapsed time, 0.438s cpu time, 0.036s GC time
Loading theory "Word_Lib.Generic_set_bit" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "HOL-ODE-Numerics.GenCF_No_Comp" via "Collections.Impl_Array_Hash_Map" via "Collections.Intf_Hash" via "Collections.HashCode" via "Native_Word.Uint32" via "Native_Word.Code_Target_Word_Base" via "Native_Word.Bits_Integer" via "Native_Word.Code_Symbolic_Bits_Int")
locale trimono_spec
class set_bit = semiring_bits +
  fixes set_bit :: "'a => nat => bool => 'a"
  assumes
    "bit_set_bit_iff_2n":
      "!!a m b n.
          bit (set_bit_class.set_bit a m b) n =
          ((if m = n then b else bit a n) & (2::'a) ^ n ~= (0::'a))"
instantiation
  int :: set_bit
  set_bit_int == set_bit_class.set_bit :: int => nat => bool => int
instantiation
  word :: (len) set_bit
  set_bit_word == set_bit_class.set_bit :: 'a word => nat => bool => 'a word
### theory "Word_Lib.Generic_set_bit"
### 0.715s elapsed time, 2.108s cpu time, 0.242s GC time
Loading theory "Native_Word.Code_Symbolic_Bits_Int" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "HOL-ODE-Numerics.GenCF_No_Comp" via "Collections.Impl_Array_Hash_Map" via "Collections.Intf_Hash" via "Collections.HashCode" via "Native_Word.Uint32" via "Native_Word.Code_Target_Word_Base" via "Native_Word.Bits_Integer")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### Ambiguous input (line 1808 of "~~/src/HOL/Library/RBT_Impl.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" sorted)
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" fst) ("_position" xs)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" sorted)
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" fst) ("_position" ys)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map_of)
###         ("_cargs"
###           ("_applC" ("_position" sunion_with)
###             ("_cargs" ("_position" f)
###               ("_cargs" ("_position" xs) ("_position" ys))))
###           ("_position" k)))
###       ("_case_syntax"
###         ("_applC" ("_position" map_of)
###           ("_cargs" ("_position" xs) ("_position" k)))
###         ("_case2"
###           ("_case1" ("_position" None)
###             ("_applC" ("_position" map_of)
###               ("_cargs" ("_position" ys) ("_position" k))))
###           ("_case1" ("_applC" ("_position" Some) ("_position" v))
###             ("_case_syntax"
###               ("_applC" ("_position" map_of)
###                 ("_cargs" ("_position" ys) ("_position" k)))
###               ("_case2"
###                 ("_case1" ("_position" None)
###                   ("_applC" ("_position" Some) ("_position" v)))
###                 ("_case1" ("_applC" ("_position" Some) ("_position" w))
###                   ("_applC" ("_position" Some)
###                     ("_applC" ("_position" f)
###                       ("_cargs" ("_position" k)
###                         ("_cargs" ("_position" v)
###                           ("_position" w))))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" sorted)
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" fst) ("_position" xs)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" sorted)
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" fst) ("_position" ys)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map_of)
###         ("_cargs"
###           ("_applC" ("_position" sunion_with)
###             ("_cargs" ("_position" f)
###               ("_cargs" ("_position" xs) ("_position" ys))))
###           ("_position" k)))
###       ("_case_syntax"
###         ("_applC" ("_position" map_of)
###           ("_cargs" ("_position" xs) ("_position" k)))
###         ("_case2"
###           ("_case1" ("_position" None)
###             ("_applC" ("_position" map_of)
###               ("_cargs" ("_position" ys) ("_position" k))))
###           ("_case2"
###             ("_case1" ("_applC" ("_position" Some) ("_position" v))
###               ("_case_syntax"
###                 ("_applC" ("_position" map_of)
###                   ("_cargs" ("_position" ys) ("_position" k)))
###                 ("_case1" ("_position" None)
###                   ("_applC" ("_position" Some) ("_position" v)))))
###             ("_case1" ("_applC" ("_position" Some) ("_position" w))
###               ("_applC" ("_position" Some)
###                 ("_applC" ("_position" f)
###                   ("_cargs" ("_position" k)
###                     ("_cargs" ("_position" v) ("_position" w))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Native_Word.Code_Symbolic_Bits_Int"
### 0.495s elapsed time, 1.546s cpu time, 0.143s GC time
Loading theory "Native_Word.Bits_Integer" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "HOL-ODE-Numerics.GenCF_No_Comp" via "Collections.Impl_Array_Hash_Map" via "Collections.Intf_Hash" via "Collections.HashCode" via "Native_Word.Uint32" via "Native_Word.Code_Target_Word_Base")
[| RETURN ?tsl <= ?tsl';
   !!x \<sigma>. RETURN (?f x \<sigma>) <= ?f' x \<sigma> |]
==> RETURN (foldli ?tsl ?c ?f ?\<sigma>)
    <= LIST_FOREACH' ?tsl' ?c ?f' ?\<sigma>
[| ?\<sigma> ~= dSUCCEED; !!x \<sigma>. ?f x \<sigma> ~= dSUCCEED |]
==> foldli ?l ?c (%x s. s >>= ?f x) ?\<sigma> ~= dSUCCEED
(!!x s. nres_of (?f x s) <= ?f' x s) ==>
nres_of
 (foldli ?l (case_dres False False ?c) (%x s. s >>= ?f x) (dRETURN ?s))
<= nfoldli ?l ?c ?f' ?s
(!!x s. RETURN (?f x s) <= ?f' x s) ==>
RETURN (foldli ?l ?c ?f ?s) <= nfoldli ?l ?c ?f' ?s
[| ?\<Phi>; ?\<Phi> ==> RETURN ?M <= ?M' |]
==> RETURN ?M <= ASSUME ?\<Phi> >>= (%_. ?M')
(?\<Phi> ==> RETURN ?M <= ?M') ==> RETURN ?M <= ASSERT ?\<Phi> >>= (%_. ?M')
[| RETURN ?x <= ?M; !!x. RETURN (?f x) <= ?F x |]
==> RETURN (Let ?x ?f) <= ?M >>= ?F
RETURN ?a <= RETURN ?a
[| !!x. ?fr x = ?b ?fr x;
   !!F f x. (!!x. RETURN (f x) <= F x) ==> RETURN (?b f x) <= ?B F x |]
==> RETURN (?fr ?x) <= REC\<^sub>T ?B ?x
[| !!s. RETURN (?fn s) <= ?fn' s;
   !!n rec rec' s.
      (!!s. RETURN (rec s) <= rec' s) ==>
      RETURN (?fs n rec s) <= ?fs' n rec' s |]
==> RETURN (rec_nat ?fn ?fs ?n ?s) <= rec_nat ?fn' ?fs' ?n ?s
[| !!s. RETURN (?fn s) <= ?fn' s;
   !!x l rec rec' s.
      (!!s. RETURN (rec s) <= rec' s) ==>
      RETURN (?fc x l rec s) <= ?fc' x l rec' s |]
==> RETURN (rec_list ?fn ?fc ?l ?s) <= rec_list ?fn' ?fc' ?l ?s
[| RETURN ?fn <= ?Fn; !!x xs. RETURN (?fc x xs) <= ?Fc x xs |]
==> RETURN (case ?l of [] => ?fn | x # xa => ?fc x xa)
    <= (case ?l of [] => ?Fn | x # xa => ?Fc x xa)
[| !!l. RETURN (?fl l) <= ?Fl l; !!r. RETURN (?fr r) <= ?Fr r |]
==> RETURN (case ?x of Inl x => ?fl x | Inr x => ?fr x)
    <= (case ?x of Inl x => ?Fl x | Inr x => ?Fr x)
[| RETURN ?fa <= ?Fa; !!x. RETURN (?fb x) <= ?Fb x |]
==> RETURN (case ?x of None => ?fa | Some x => ?fb x)
    <= (case ?x of None => ?Fa | Some x => ?Fb x)
(!!x. RETURN (?f x) <= ?F x) ==> RETURN (Let ?x ?f) <= Let ?x ?F
(!!a b. RETURN (?f a b) <= ?F a b) ==>
RETURN (case ?x of (x, xa) => ?f x xa) <= (case ?x of (x, xa) => ?F x xa)
[| ?b ==> RETURN ?s1.0 <= ?S1.0; ~ ?b ==> RETURN ?s2.0 <= ?S2.0 |]
==> RETURN (if ?b then ?s1.0 else ?s2.0) <= (if ?b then ?S1.0 else ?S2.0)
(!!x. nres_of (?f x) <= ?F x) ==>
nres_of (dWHILET ?b ?f ?x) <= WHILE\<^sub>T ?b ?F ?x
(!!x. nres_of (?f x) <= ?F x) ==>
nres_of (dWHILE ?b ?f ?x) <= WHILE ?b ?F ?x
(!!x. nres_of (?f x) <= ?F x) ==>
nres_of (dWHILEI ?I ?b ?f ?x) <= WHILE\<^bsup>?I\<^esup> ?b ?F ?x
(!!x. nres_of (?f x) <= ?F x) ==>
nres_of (dWHILEIT ?I ?b ?f ?x) <= WHILE\<^sub>T\<^bsup>?I\<^esup> ?b ?F ?x
[| ?\<Phi>; ?\<Phi> ==> nres_of ?M <= ?M' |]
==> nres_of ?M <= ASSUME ?\<Phi> >>= (%_. ?M')
(?\<Phi> ==> nres_of ?M <= ?M') ==>
nres_of ?M <= ASSERT ?\<Phi> >>= (%_. ?M')
[| nres_of ?m <= ?M; !!x. nres_of (?f x) <= ?F x |]
==> nres_of (?m >>= ?f) <= ?M >>= ?F
nres_of (dRETURN ?x) <= RETURN ?x
nres_of dSUCCEED <= SUCCEED
nres_of dFAIL <= FAIL
nres_of ?x <= nres_of ?x
[| !!F f x. (!!x. nres_of (f x) <= F x) ==> nres_of (?b f x) <= ?B F x;
   trimono ?b |]
==> nres_of (REC ?b ?x) <= REC ?B ?x
[| !!F f x. (!!x. nres_of (f x) <= F x) ==> nres_of (?b f x) <= ?B F x;
   trimono ?b |]
==> nres_of (REC\<^sub>T ?b ?x) <= REC\<^sub>T ?B ?x
[| !!x. ?fr x = ?b ?fr x;
   !!F f x. (!!x. nres_of (f x) <= F x) ==> nres_of (?b f x) <= ?B F x |]
==> nres_of (?fr ?x) <= REC\<^sub>T ?B ?x
[| !!s. nres_of (?fn s) <= ?fn' s;
   !!n rec rec' s.
      (!!s. nres_of (rec s) <= rec' s) ==>
      nres_of (?fs n rec s) <= ?fs' n rec' s |]
==> nres_of (rec_nat ?fn ?fs ?n ?s) <= rec_nat ?fn' ?fs' ?n ?s
[| !!s. nres_of (?fn s) <= ?fn' s;
   !!x l rec rec' s.
      (!!s. nres_of (rec s) <= rec' s) ==>
      nres_of (?fc x l rec s) <= ?fc' x l rec' s |]
==> nres_of (rec_list ?fn ?fc ?l ?s) <= rec_list ?fn' ?fc' ?l ?s
[| nres_of ?fn <= ?Fn; !!x xs. nres_of (?fc x xs) <= ?Fc x xs |]
==> nres_of (case ?l of [] => ?fn | x # xa => ?fc x xa)
    <= (case ?l of [] => ?Fn | x # xa => ?Fc x xa)
[| !!l. nres_of (?fl l) <= ?Fl l; !!r. nres_of (?fr r) <= ?Fr r |]
==> nres_of (case ?x of Inl x => ?fl x | Inr x => ?fr x)
    <= (case ?x of Inl x => ?Fl x | Inr x => ?Fr x)
[| nres_of ?fa <= ?Fa; !!x. nres_of (?fb x) <= ?Fb x |]
==> nres_of (case ?x of None => ?fa | Some x => ?fb x)
    <= (case ?x of None => ?Fa | Some x => ?Fb x)
(!!x. nres_of (?f x) <= ?F x) ==> nres_of (Let ?x ?f) <= Let ?x ?F
(!!a b. nres_of (?f a b) <= ?F a b) ==>
nres_of (case ?x of (x, xa) => ?f x xa) <= (case ?x of (x, xa) => ?F x xa)
[| ?b ==> nres_of ?s1.0 <= ?S1.0; ~ ?b ==> nres_of ?s2.0 <= ?S2.0 |]
==> nres_of (if ?b then ?s1.0 else ?s2.0) <= (if ?b then ?S1.0 else ?S2.0)
(!!x. RETURN (?f x) <= ?F x) ==>
RETURN (while ?b ?f ?x) <= WHILE\<^sub>T ?b ?F ?x
(!!x. RETURN (?f x) <= ?F x) ==>
RETURN (while ?b ?f ?x) <= WHILE\<^sub>T\<^bsup>?I\<^esup> ?b ?F ?x
(!!x. ?f x ~= dSUCCEED) ==> dWHILET ?b ?f ?s ~= dSUCCEED
(!!x. ?f x ~= dSUCCEED) ==> dWHILEIT ?I ?b ?f ?s ~= dSUCCEED
(!!f x. (!!x. f x ~= dSUCCEED) ==> ?B f x ~= dSUCCEED) ==>
REC\<^sub>T ?B ?x ~= dSUCCEED
[| ?fn ~= dSUCCEED; !!x xs. ?fc x xs ~= dSUCCEED |]
==> (case ?x of [] => ?fn | x # xa => ?fc x xa) ~= dSUCCEED
[| ?fn ~= dSUCCEED; !!v. ?fs v ~= dSUCCEED |]
==> (case ?x of None => ?fn | Some x => ?fs x) ~= dSUCCEED
(!!x1 x2. ?g x1 x2 ~= dSUCCEED) ==>
(case ?p of (x, xa) => ?g x xa) ~= dSUCCEED
(!!x. ?f x ~= dSUCCEED) ==> Let ?x ?f ~= dSUCCEED
[| ?m1.0 ~= dSUCCEED; ?m2.0 ~= dSUCCEED |]
==> (if ?b then ?m1.0 else ?m2.0) ~= dSUCCEED
dASSERT ?\<Phi> ~= dSUCCEED
[| ?m ~= dSUCCEED; !!x. ?f x ~= dSUCCEED |] ==> ?m >>= ?f ~= dSUCCEED
dRETURN ?x ~= dSUCCEED
dFAIL ~= dSUCCEED
(!!x. dRETURN (?f x) <= ?F x) ==>
dRETURN (while ?b ?f ?x) <= dWHILET ?b ?F ?x
(!!x. dRETURN (?f x) <= ?F x) ==>
dRETURN (while ?b ?f ?x) <= dWHILEIT ?I ?b ?F ?x
### theory "Refine_Monadic.Refine_Foreach"
### 1.788s elapsed time, 5.518s cpu time, 0.552s GC time
Loading theory "Refine_Monadic.Refine_Monadic" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp")
Found termination order: "{}"
instantiation
  integer :: lsb
  lsb_integer == lsb :: integer => bool
instantiation
  integer :: msb
  msb_integer == msb :: integer => bool
instantiation
  integer :: set_bit
  set_bit_integer == set_bit_class.set_bit ::
    integer => nat => bool => integer
### Code generator: dropping subsumed code equation
### not ?k == - ?k - 1
### Code generator: dropping subsumed code equation
### and ?k ?l ==
### if ?k = 0 | ?l = 0 then 0
### else if ?k = - 1 then ?l
###      else if ?l = - 1 then ?k
###           else ?k mod 2 * (?l mod 2) + 2 * and (?k div 2) (?l div 2)
### Code generator: dropping subsumed code equation
### or ?k ?l ==
### if ?k = - 1 | ?l = - 1 then - 1
### else if ?k = 0 then ?l
###      else if ?l = 0 then ?k
###           else max (?k mod 2) (?l mod 2) + 2 * or (?k div 2) (?l div 2)
### Code generator: dropping subsumed code equation
### xor ?k ?l ==
### if ?k = - 1 then not ?l
### else if ?l = - 1 then not ?k
###      else if ?k = 0 then ?l
###           else if ?l = 0 then ?k
###                else \<bar>?k mod 2 - ?l mod 2\<bar> +
###                     2 * xor (?k div 2) (?l div 2)
Found termination order: "{}"
locale Refine_Monadic_Syntax
### theory "Refine_Monadic.Refine_Monadic"
### 0.819s elapsed time, 2.510s cpu time, 0.293s GC time
Loading theory "Collections.Gen_Iterator" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "HOL-ODE-Numerics.GenCF_No_Comp" via "Collections.Impl_List_Set" via "Collections.Iterator")
Loading theory "Collections.Intf_Map" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "HOL-ODE-Numerics.GenCF_No_Comp" via "Collections.Impl_List_Map" via "Collections.Gen_Map")
### theory "Native_Word.Bits_Integer"
### 0.972s elapsed time, 2.978s cpu time, 0.332s GC time
Loading theory "Collections.Intf_Set" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "HOL-ODE-Numerics.GenCF_No_Comp" via "Collections.Impl_List_Set")
### theory "Collections.Intf_Set"
### 0.306s elapsed time, 1.152s cpu time, 0.132s GC time
Loading theory "Collections.Impl_Cfun_Set" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "HOL-ODE-Numerics.GenCF_No_Comp")
### theory "Collections.Intf_Map"
### 0.343s elapsed time, 1.297s cpu time, 0.132s GC time
"op_map_restrict"
  :: "('a * 'b => bool) => ('a => 'b option) => 'a => 'b option"
Found termination order: "{}"
### theory "Collections.Impl_Cfun_Set"
### 0.104s elapsed time, 0.347s cpu time, 0.059s GC time
### theory "Collections.Gen_Iterator"
### 0.584s elapsed time, 1.880s cpu time, 0.247s GC time
Loading theory "Collections.Iterator" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "HOL-ODE-Numerics.GenCF_No_Comp" via "Collections.Impl_List_Set")
Found termination order: "{}"
### theory "Collections.Iterator"
### 0.487s elapsed time, 1.086s cpu time, 0.149s GC time
Loading theory "Collections.Gen_Map" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "HOL-ODE-Numerics.GenCF_No_Comp" via "Collections.Impl_List_Map")
Loading theory "Collections.Gen_Set" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "HOL-ODE-Numerics.GenCF_No_Comp")
Loading theory "Collections.Gen_Map2Set" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "HOL-ODE-Numerics.GenCF_No_Comp")
Found termination order:
  "(%p. size (snd p)) <*mlex*> (%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
### theory "Collections.Gen_Map"
### 0.592s elapsed time, 2.256s cpu time, 0.255s GC time
Loading theory "Collections.Impl_List_Map" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "HOL-ODE-Numerics.GenCF_No_Comp")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Collections.Gen_Map2Set"
### 0.761s elapsed time, 2.887s cpu time, 0.337s GC time
Loading theory "Collections.Impl_List_Set" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "HOL-ODE-Numerics.GenCF_No_Comp")
consts
  list_map_lookup ::
    "('k => 'k => bool) => 'k => ('k * 'v) list => 'v option"
consts
  list_map_update_aux ::
    "('k => 'k => bool)
     => 'k => 'v => ('k * 'v) list => ('k * 'v) list => ('k * 'v) list"
consts
  list_map_delete_aux ::
    "('k => 'k => bool)
     => 'k => ('k * 'v) list => ('k * 'v) list => ('k * 'v) list"
### Adding overloaded interface type to constant: a ::\<^sub>i i_of_rel Id
### Adding overloaded interface type to constant: b ::\<^sub>i i_of_rel Id
### Adding overloaded interface type to constant: {} ::\<^sub>i i_of_rel Rs
### Adding overloaded interface type to constant:
###   insert ::\<^sub>i
###   i_nat \<rightarrow>\<^sub>i i_of_rel Rs \<rightarrow>\<^sub>i i_of_rel Rs
### Cannot skip proof of schematic goal statement
Found termination order: "{}"
consts
  glist_member :: "('a => 'a => bool) => 'a => 'a list => bool"
consts
  rev_append :: "'a list => 'a list => 'a list"
consts
  glist_delete_aux ::
    "('a => 'a => bool) => 'a => 'a list => 'a list => 'a list"
Found termination order: "size <*mlex*> {}"
### Cannot skip proof of schematic goal statement
### Adding overloaded interface type to constant:
###   atLeastLessThan ::\<^sub>i
###   i_nat \<rightarrow>\<^sub>i i_nat \<rightarrow>\<^sub>i ?Rs
### Adding overloaded interface type to constant:
###   atLeastLessThan ::\<^sub>i
###   i_nat \<rightarrow>\<^sub>i i_nat \<rightarrow>\<^sub>i ?Rs
### Adding overloaded interface type to constant:
###   atLeastLessThan ::\<^sub>i
###   i_nat \<rightarrow>\<^sub>i i_nat \<rightarrow>\<^sub>i ?Rs
### Adding overloaded interface type to constant:
###   atLeastLessThan ::\<^sub>i
###   i_nat \<rightarrow>\<^sub>i i_nat \<rightarrow>\<^sub>i ?Rs
### theory "Collections.Gen_Set"
### 1.329s elapsed time, 5.002s cpu time, 0.680s GC time
is_map_to_list ?Rk ?Rv ?Rm ?tsl ==
is_map_to_sorted_list (%_ _. True) ?Rk ?Rv ?Rm ?tsl
[| is_map_to_sorted_list ?ordR ?Rk ?Rv ?Rm ?tsl;
   (?m, ?m') : \<langle>?Rk, ?Rv\<rangle>?Rm;
   !!l'. [| (?tsl ?m, l')
            : \<langle>?Rk \<times>\<^sub>r ?Rv\<rangle>list_rel;
            RETURN l'
            <= it_to_sorted_list (key_rel ?ordR) (map_to_set ?m') |]
         ==> ?thesis |]
==> ?thesis
List.insert ?x ?xs = (if ?x : set ?xs then ?xs else ?x # ?xs)
### theory "Collections.Impl_List_Set"
### 0.577s elapsed time, 2.148s cpu time, 0.343s GC time
consts
  list_map_pick_remove :: "'a list => 'a * 'a list"
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
\<langle>?Rk, ?Rv\<rangle>list_map_rel =
\<langle>?Rk \<times>\<^sub>r ?Rv\<rangle>list_rel O
br map_of list_map_invar
### theory "Collections.Impl_List_Map"
### 0.818s elapsed time, 2.928s cpu time, 0.483s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### Ambiguous input (line 2563 of "~~/src/HOL/Library/RBT_Impl.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" rbt_lookup)
###       ("_cargs"
###         ("_applC" ("_position" fold)
###           ("_cargs"
###             ("_applC" ("_position" rbt_insert_with_key) ("_position" f))
###             ("_cargs" ("_position" t1) ("_position" t2))))
###         ("_position" k)))
###     ("_case_syntax"
###       ("_applC" ("_position" rbt_lookup)
###         ("_cargs" ("_position" t1) ("_position" k)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" rbt_lookup)
###             ("_cargs" ("_position" t2) ("_position" k))))
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("_case_syntax"
###             ("_applC" ("_position" rbt_lookup)
###               ("_cargs" ("_position" t2) ("_position" k)))
###             ("_case2"
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Some) ("_position" v)))
###               ("_case1" ("_applC" ("_position" Some) ("_position" w))
###                 ("_applC" ("_position" Some)
###                   ("_applC" ("_position" f)
###                     ("_cargs" ("_position" k)
###                       ("_cargs" ("_position" w) ("_position" v)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" rbt_lookup)
###       ("_cargs"
###         ("_applC" ("_position" fold)
###           ("_cargs"
###             ("_applC" ("_position" rbt_insert_with_key) ("_position" f))
###             ("_cargs" ("_position" t1) ("_position" t2))))
###         ("_position" k)))
###     ("_case_syntax"
###       ("_applC" ("_position" rbt_lookup)
###         ("_cargs" ("_position" t1) ("_position" k)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" rbt_lookup)
###             ("_cargs" ("_position" t2) ("_position" k))))
###         ("_case2"
###           ("_case1" ("_applC" ("_position" Some) ("_position" v))
###             ("_case_syntax"
###               ("_applC" ("_position" rbt_lookup)
###                 ("_cargs" ("_position" t2) ("_position" k)))
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Some) ("_position" v)))))
###           ("_case1" ("_applC" ("_position" Some) ("_position" w))
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" f)
###                 ("_cargs" ("_position" k)
###                   ("_cargs" ("_position" w) ("_position" v)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### Ambiguous input (line 2939 of "~~/src/HOL/Library/RBT_Impl.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" rbt_sorted) ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" rbt_sorted) ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" rbt_lookup)
###         ("_cargs"
###           ("_applC" ("_position" rbt_union_with_key)
###             ("_cargs" ("_position" f)
###               ("_cargs" ("_position" t1) ("_position" t2))))
###           ("_position" k)))
###       ("_case_syntax"
###         ("_applC" ("_position" rbt_lookup)
###           ("_cargs" ("_position" t1) ("_position" k)))
###         ("_case2"
###           ("_case1" ("_position" None)
###             ("_applC" ("_position" rbt_lookup)
###               ("_cargs" ("_position" t2) ("_position" k))))
###           ("_case1" ("_applC" ("_position" Some) ("_position" v))
###             ("_case_syntax"
###               ("_applC" ("_position" rbt_lookup)
###                 ("_cargs" ("_position" t2) ("_position" k)))
###               ("_case2"
###                 ("_case1" ("_position" None)
###                   ("_applC" ("_position" Some) ("_position" v)))
###                 ("_case1" ("_applC" ("_position" Some) ("_position" w))
###                   ("_applC" ("_position" Some)
###                     ("_applC" ("_position" f)
###                       ("_cargs" ("_position" k)
###                         ("_cargs" ("_position" v)
###                           ("_position" w))))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" rbt_sorted) ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" rbt_sorted) ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" rbt_lookup)
###         ("_cargs"
###           ("_applC" ("_position" rbt_union_with_key)
###             ("_cargs" ("_position" f)
###               ("_cargs" ("_position" t1) ("_position" t2))))
###           ("_position" k)))
###       ("_case_syntax"
###         ("_applC" ("_position" rbt_lookup)
###           ("_cargs" ("_position" t1) ("_position" k)))
###         ("_case2"
###           ("_case1" ("_position" None)
###             ("_applC" ("_position" rbt_lookup)
###               ("_cargs" ("_position" t2) ("_position" k))))
###           ("_case2"
###             ("_case1" ("_applC" ("_position" Some) ("_position" v))
###               ("_case_syntax"
###                 ("_applC" ("_position" rbt_lookup)
###                   ("_cargs" ("_position" t2) ("_position" k)))
###                 ("_case1" ("_position" None)
###                   ("_applC" ("_position" Some) ("_position" v)))))
###             ("_case1" ("_applC" ("_position" Some) ("_position" w))
###               ("_applC" ("_position" Some)
###                 ("_applC" ("_position" f)
###                   ("_cargs" ("_position" k)
###                     ("_cargs" ("_position" v) ("_position" w))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2972 of "~~/src/HOL/Library/RBT_Impl.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" rbt_sorted) ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" rbt_sorted) ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" rbt_lookup)
###         ("_cargs"
###           ("_applC" ("_position" rbt_inter_with_key)
###             ("_cargs" ("_position" f)
###               ("_cargs" ("_position" t1) ("_position" t2))))
###           ("_position" k)))
###       ("_case_syntax"
###         ("_applC" ("_position" rbt_lookup)
###           ("_cargs" ("_position" t1) ("_position" k)))
###         ("_case2" ("_case1" ("_position" None) ("_position" None))
###           ("_case1" ("_applC" ("_position" Some) ("_position" v))
###             ("_case_syntax"
###               ("_applC" ("_position" rbt_lookup)
###                 ("_cargs" ("_position" t2) ("_position" k)))
###               ("_case2" ("_case1" ("_position" None) ("_position" None))
###                 ("_case1" ("_applC" ("_position" Some) ("_position" w))
###                   ("_applC" ("_position" Some)
###                     ("_applC" ("_position" f)
###                       ("_cargs" ("_position" k)
###                         ("_cargs" ("_position" v)
###                           ("_position" w))))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" rbt_sorted) ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" rbt_sorted) ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" rbt_lookup)
###         ("_cargs"
###           ("_applC" ("_position" rbt_inter_with_key)
###             ("_cargs" ("_position" f)
###               ("_cargs" ("_position" t1) ("_position" t2))))
###           ("_position" k)))
###       ("_case_syntax"
###         ("_applC" ("_position" rbt_lookup)
###           ("_cargs" ("_position" t1) ("_position" k)))
###         ("_case2" ("_case1" ("_position" None) ("_position" None))
###           ("_case2"
###             ("_case1" ("_applC" ("_position" Some) ("_position" v))
###               ("_case_syntax"
###                 ("_applC" ("_position" rbt_lookup)
###                   ("_cargs" ("_position" t2) ("_position" k)))
###                 ("_case1" ("_position" None) ("_position" None))))
###             ("_case1" ("_applC" ("_position" Some) ("_position" w))
###               ("_applC" ("_position" Some)
###                 ("_applC" ("_position" f)
###                   ("_cargs" ("_position" k)
###                     ("_cargs" ("_position" v) ("_position" w))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Code generator: dropping subsumed code equation
### keys (Branch ?c ?l ?k ?v ?r) == keys ?l @ ?k # keys ?r
### Code generator: dropping subsumed code equation
### keys Empty == []
### theory "HOL-Library.RBT_Impl"
### 65.924s elapsed time, 213.585s cpu time, 102.483s GC time
Loading theory "HOL-Library.RBT" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Enclosure_Operations" via "Affine_Arithmetic.Print" via "Affine_Arithmetic.Affine_Code" via "Affine_Arithmetic.Affine_Approximation" via "Affine_Arithmetic.Straight_Line_Program" via "HOL-Library.RBT_Mapping")
Loading theory "Collections.RBT_add" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "HOL-ODE-Numerics.GenCF_No_Comp" via "Collections.Impl_RBT_Map")
consts
  rm_iterateoi ::
    "('k, 'v) rbt
     => ('\<sigma> => bool)
        => ('k * 'v => '\<sigma> => '\<sigma>) => '\<sigma> => '\<sigma>"
consts
  rm_reverse_iterateoi ::
    "('k, 'v) rbt
     => ('\<sigma> => bool)
        => ('k * 'v => '\<sigma> => '\<sigma>) => '\<sigma> => '\<sigma>"
### theory "HOL-Library.RBT"
### 0.451s elapsed time, 1.348s cpu time, 0.113s GC time
Loading theory "HOL-Library.RBT_Mapping" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Enclosure_Operations" via "Affine_Arithmetic.Print" via "Affine_Arithmetic.Affine_Code" via "Affine_Arithmetic.Affine_Approximation" via "Affine_Arithmetic.Straight_Line_Program")
### theory "HOL-Library.RBT_Mapping"
### 0.225s elapsed time, 0.674s cpu time, 0.071s GC time
consts
  bheight_aux :: "('a, 'b) rbt => nat => nat"
### theory "Collections.RBT_add"
### 1.126s elapsed time, 2.960s cpu time, 0.285s GC time
Loading theory "Collections.Impl_RBT_Map" (required by "Draft.Examples_IntegralTemplates" via "Draft.Examples_Integral" via "HOL-ODE-Numerics.ODE_Numerics" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" via "HOL-ODE-Numerics.Refine_Rigorous_Numerics" via "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" via "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" via "HOL-ODE-Numerics.Refine_Vector_List" via "HOL-ODE-Numerics.Autoref_Misc" via "HOL-ODE-Numerics.Refine_Dflt_No_Comp" via "HOL-ODE-Numerics.GenCF_No_Comp")
Proofs for inductive predicate(s) "color_relp"
  Proving monotonicity ...
[| (?x, color.R) : color_rel; ?x = color.R ==> ?P |] ==> ?P
[| (?x, color.B) : color_rel; ?x = color.B ==> ?P |] ==> ?P
[| (color.R, ?y) : color_rel; ?y = color.R ==> ?P |] ==> ?P
[| (color.B, ?y) : color_rel; ?y = color.B ==> ?P |] ==> ?P
Proofs for inductive predicate(s) "rbt_rel_auxp"
  Proving monotonicity ...
"rbt_insert"
  :: "'a => 'b => ('a, 'b) rbt => ('a, 'b) rbt"
"balance_left"
  :: "('a, 'b) rbt => 'a => 'b => ('a, 'b) rbt => ('a, 'b) rbt"
"balance_right"
  :: "('a, 'b) rbt => 'a => 'b => ('a, 'b) rbt => ('a, 'b) rbt"
"ord.rbt_insert_with_key"
  :: "('a => 'a => bool)
      => ('a => 'b => 'b => 'b) => 'a => 'b => ('a, 'b) rbt => ('a, 'b) rbt"
"RBT_Impl.skip_red"
  :: "('a, 'b) rbt => ('a, 'b) rbt"
"case_rbt"
  :: "'a => (color => ('b, 'c) rbt => 'b => 'c => ('b, 'c) rbt => 'a)
            => ('b, 'c) rbt => 'a"
"rm_iterateoi"
  :: "('a, 'b) rbt => ('c => bool) => ('a * 'b => 'c => 'c) => 'c => 'c"
"bheight"
  :: "('a, 'b) rbt => nat"
"ord.rbt_less"
  :: "('a => 'a => bool) => 'a => ('a, 'b) rbt => bool"
"ord.rbt_greater"
  :: "('a => 'a => bool) => 'a => ('a, 'b) rbt => bool"
### theory "Collections.Impl_RBT_Map"
### 3.595s elapsed time, 3.902s cpu time, 0.431s GC time
*** Failed to load theory "Collections.Impl_Array_Stack" (unresolved "Collections.Diff_Array")
*** Failed to load theory "Native_Word.Code_Target_Bits_Int" (unresolved "Native_Word.Bits_Integer")
*** Failed to load theory "Collections.Code_Target_ICF" (unresolved "Native_Word.Code_Target_Bits_Int")
*** Failed to load theory "Native_Word.Code_Target_Word_Base" (unresolved "Native_Word.Bits_Integer")
*** Failed to load theory "Native_Word.Word_Type_Copies" (unresolved "Native_Word.Code_Target_Word_Base")
*** Failed to load theory "Native_Word.Uint" (unresolved "Native_Word.Code_Target_Word_Base", "Native_Word.Word_Type_Copies")
*** Failed to load theory "Native_Word.Uint32" (unresolved "Native_Word.Code_Target_Word_Base", "Native_Word.Word_Type_Copies")
*** Failed to load theory "Collections.HashCode" (unresolved "Native_Word.Uint32")
*** Failed to load theory "Collections.Intf_Hash" (unresolved "Collections.Code_Target_ICF", "Collections.HashCode")
*** Failed to load theory "Collections.Gen_Hash" (unresolved "Collections.Intf_Hash")
*** Failed to load theory "Deriving.Hash_Generator" (unresolved "Collections.HashCode")
*** Failed to load theory "Deriving.Hash_Instances" (unresolved "Deriving.Hash_Generator")
*** Failed to load theory "Deriving.Derive" (unresolved "Deriving.Hash_Instances")
*** Failed to load theory "Collections.Array_Iterator" (unresolved "Collections.Diff_Array")
*** Failed to load theory "Collections.Impl_Array_Map" (unresolved "Collections.Diff_Array")
*** Failed to load theory "Collections.Impl_Bit_Set" (unresolved "Native_Word.Bits_Integer")
*** Failed to load theory "Collections.Impl_Uv_Set" (unresolved "Native_Word.Uint")
*** Failed to load theory "Collections.Impl_Array_Hash_Map" (unresolved "Collections.Array_Iterator", "Collections.Code_Target_ICF", "Collections.Diff_Array", "Collections.HashCode", "Collections.Intf_Hash")
*** Failed to load theory "Affine_Arithmetic.Straight_Line_Program" (unresolved "Deriving.Derive")
*** Failed to load theory "Affine_Arithmetic.Affine_Approximation" (unresolved "Affine_Arithmetic.Straight_Line_Program")
*** Failed to load theory "Affine_Arithmetic.Affine_Code" (unresolved "Affine_Arithmetic.Affine_Approximation")
*** Failed to load theory "Affine_Arithmetic.Print" (unresolved "Affine_Arithmetic.Affine_Code")
*** Failed to load theory "Affine_Arithmetic.Ex_Affine_Approximation" (unresolved "Affine_Arithmetic.Affine_Code", "Affine_Arithmetic.Print")
*** Failed to load theory "Affine_Arithmetic.Ex_Ineqs" (unresolved "Affine_Arithmetic.Affine_Code", "Affine_Arithmetic.Print")
*** Failed to load theory "Affine_Arithmetic.Ex_Inter" (unresolved "Affine_Arithmetic.Affine_Code", "Affine_Arithmetic.Print")
*** Failed to load theory "Affine_Arithmetic.Affine_Arithmetic" (unresolved "Affine_Arithmetic.Affine_Code", "Affine_Arithmetic.Ex_Affine_Approximation", "Affine_Arithmetic.Ex_Ineqs", "Affine_Arithmetic.Ex_Inter", "Affine_Arithmetic.Straight_Line_Program")
*** Failed to load theory "HOL-ODE-Numerics.GenCF_No_Comp" (unresolved "Collections.Code_Target_ICF", "Collections.Gen_Hash", "Collections.Impl_Array_Hash_Map", "Collections.Impl_Array_Map", "Collections.Impl_Array_Stack", "Collections.Impl_Bit_Set", "Collections.Impl_Uv_Set")
*** Failed to load theory "HOL-ODE-Numerics.Refine_Dflt_No_Comp" (unresolved "Collections.Code_Target_ICF", "HOL-ODE-Numerics.GenCF_No_Comp")
*** Failed to load theory "HOL-ODE-Numerics.Autoref_Misc" (unresolved "HOL-ODE-Numerics.Refine_Dflt_No_Comp")
*** Failed to load theory "HOL-ODE-Numerics.Refine_Folds" (unresolved "HOL-ODE-Numerics.Autoref_Misc")
*** Failed to load theory "HOL-ODE-Numerics.Enclosure_Operations" (unresolved "Affine_Arithmetic.Print", "HOL-ODE-Numerics.Autoref_Misc")
*** Failed to load theory "HOL-ODE-Numerics.Weak_Set" (unresolved "HOL-ODE-Numerics.Autoref_Misc")
*** Failed to load theory "HOL-ODE-Numerics.Refine_String" (unresolved "HOL-ODE-Numerics.Autoref_Misc")
*** Failed to load theory "HOL-ODE-Numerics.Refine_Parallel" (unresolved "HOL-ODE-Numerics.Autoref_Misc", "HOL-ODE-Numerics.Weak_Set")
*** Failed to load theory "HOL-ODE-Numerics.Refine_Default" (unresolved "HOL-ODE-Numerics.Enclosure_Operations", "HOL-ODE-Numerics.Weak_Set")
*** Failed to load theory "HOL-ODE-Numerics.Refine_Unions" (unresolved "HOL-ODE-Numerics.Enclosure_Operations", "HOL-ODE-Numerics.Weak_Set")
*** Failed to load theory "HOL-ODE-Numerics.Refine_Vector_List" (unresolved "HOL-ODE-Numerics.Autoref_Misc", "HOL-ODE-Numerics.Enclosure_Operations", "HOL-ODE-Numerics.Weak_Set")
*** Failed to load theory "HOL-ODE-Numerics.Refine_Intersection" (unresolved "HOL-ODE-Numerics.Refine_Unions")
*** Failed to load theory "HOL-ODE-Numerics.Refine_Phantom" (unresolved "HOL-ODE-Numerics.Autoref_Misc", "HOL-ODE-Numerics.Refine_Unions")
*** Failed to load theory "HOL-ODE-Numerics.Refine_Invar" (unresolved "HOL-ODE-Numerics.Refine_Intersection", "HOL-ODE-Numerics.Refine_Unions")
*** Failed to load theory "HOL-ODE-Numerics.Refine_Info" (unresolved "HOL-ODE-Numerics.Refine_Unions", "HOL-ODE-Numerics.Refine_Vector_List")
*** Failed to load theory "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector" (unresolved "HOL-ODE-Numerics.Refine_Vector_List")
*** Failed to load theory "HOL-ODE-Numerics.Refine_Hyperplane" (unresolved "Affine_Arithmetic.Print", "HOL-ODE-Numerics.Autoref_Misc", "HOL-ODE-Numerics.Refine_Vector_List")
*** Failed to load theory "HOL-ODE-Numerics.Refine_Interval" (unresolved "HOL-ODE-Numerics.Refine_Hyperplane", "HOL-ODE-Numerics.Refine_Invar", "HOL-ODE-Numerics.Refine_Unions", "HOL-ODE-Numerics.Refine_Vector_List")
*** Failed to load theory "HOL-ODE-Numerics.Abstract_Rigorous_Numerics" (unresolved "HOL-ODE-Numerics.Enclosure_Operations", "HOL-ODE-Numerics.Refine_Hyperplane", "HOL-ODE-Numerics.Refine_Info", "HOL-ODE-Numerics.Refine_Interval", "HOL-ODE-Numerics.Refine_Invar", "HOL-ODE-Numerics.Refine_Unions", "HOL-ODE-Numerics.Refine_Vector_List", "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector")
*** Failed to load theory "HOL-ODE-Numerics.Refine_ScaleR2" (unresolved "HOL-ODE-Numerics.Refine_Interval", "HOL-ODE-Numerics.Refine_String", "HOL-ODE-Numerics.Refine_Unions")
*** Failed to load theory "HOL-ODE-Numerics.Concrete_Rigorous_Numerics" (unresolved "HOL-ODE-Numerics.Abstract_Rigorous_Numerics")
*** Failed to load theory "HOL-ODE-Numerics.Refine_Rigorous_Numerics" (unresolved "HOL-ODE-Numerics.Abstract_Rigorous_Numerics")
*** Failed to load theory "HOL-ODE-Numerics.Abstract_Reachability_Analysis" (unresolved "Affine_Arithmetic.Affine_Arithmetic", "HOL-ODE-Numerics.Abstract_Rigorous_Numerics", "HOL-ODE-Numerics.Refine_Folds", "HOL-ODE-Numerics.Refine_String")
*** Failed to load theory "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform" (unresolved "HOL-ODE-Numerics.Refine_Rigorous_Numerics")
*** Failed to load theory "HOL-ODE-Numerics.Concrete_Reachability_Analysis" (unresolved "HOL-ODE-Numerics.Abstract_Reachability_Analysis", "HOL-ODE-Numerics.Concrete_Rigorous_Numerics")
*** Failed to load theory "HOL-ODE-Numerics.Refine_Reachability_Analysis" (unresolved "HOL-ODE-Numerics.Abstract_Reachability_Analysis", "HOL-ODE-Numerics.Refine_Rigorous_Numerics")
*** Failed to load theory "HOL-ODE-Numerics.Abstract_Reachability_Analysis_C1" (unresolved "HOL-ODE-Numerics.Abstract_Reachability_Analysis", "HOL-ODE-Numerics.Refine_Default", "HOL-ODE-Numerics.Refine_Parallel", "HOL-ODE-Numerics.Refine_Phantom", "HOL-ODE-Numerics.Refine_ScaleR2", "HOL-ODE-Numerics.Weak_Set")
*** Failed to load theory "HOL-ODE-Numerics.Concrete_Reachability_Analysis_C1" (unresolved "HOL-ODE-Numerics.Abstract_Reachability_Analysis_C1", "HOL-ODE-Numerics.Concrete_Reachability_Analysis")
*** Failed to load theory "HOL-ODE-Numerics.Refine_Reachability_Analysis_C1" (unresolved "HOL-ODE-Numerics.Abstract_Reachability_Analysis_C1", "HOL-ODE-Numerics.Refine_Reachability_Analysis")
*** Failed to load theory "HOL-ODE-Numerics.Init_ODE_Solver" (unresolved "HOL-ODE-Numerics.Concrete_Reachability_Analysis_C1", "HOL-ODE-Numerics.Refine_Reachability_Analysis_C1", "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform")
*** Failed to load theory "HOL-ODE-Numerics.Example_Utilities" (unresolved "HOL-ODE-Numerics.Init_ODE_Solver")
*** Failed to load theory "HOL-ODE-Numerics.ODE_Numerics" (unresolved "Affine_Arithmetic.Print", "HOL-ODE-Numerics.Example_Utilities", "HOL-ODE-Numerics.Refine_Rigorous_Numerics_Aform", "HOL-ODE-Numerics.Transfer_Euclidean_Space_Vector")
*** Failed to load theory "Draft.Examples_Integral" (unresolved "HOL-ODE-Numerics.ODE_Numerics")
*** Failed to load theory "Draft.Examples_IntegralTemplates" (unresolved "Draft.Examples_Integral")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "4")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 653 of "$AFP/Native_Word/Bits_Integer.thy")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "2")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 1067 of "$AFP/Collections/Lib/Diff_Array.thy")
Exception- TOPLEVEL_ERROR raised
