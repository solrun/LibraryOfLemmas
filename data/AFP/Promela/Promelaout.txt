Loading theory "Draft.PromelaAST" (required by "Draft.PromelaTemplates" via "Draft.Promela" via "Draft.PromelaDatastructures")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.PromelaTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.PromelaTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.PromelaTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.169s elapsed time, 0.680s cpu time, 0.057s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.PromelaTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.219s elapsed time, 0.881s cpu time, 0.057s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.PromelaTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
### theory "HOL-Library.Stream"
### 1.132s elapsed time, 4.282s cpu time, 0.919s GC time
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Loading theory "Draft.PromelaStatistics" (required by "Draft.PromelaTemplates" via "Draft.Promela")
### theory "Draft.PromelaStatistics"
### 0.037s elapsed time, 0.147s cpu time, 0.000s GC time
### theory "HOL-Library.BigO"
### 0.945s elapsed time, 3.531s cpu time, 0.862s GC time
Found termination order: "size <*mlex*> {}"
val it = fn: 'a list -> 'a
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.920s elapsed time, 5.759s cpu time, 1.104s GC time
Loading theory "Draft.Templates" (required by "Draft.PromelaTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.259s elapsed time, 0.793s cpu time, 0.665s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.PromelaTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.565s elapsed time, 1.175s cpu time, 0.138s GC time
### theory "Draft.PromelaAST"
### 9.882s elapsed time, 16.516s cpu time, 3.579s GC time
Loading theory "Draft.PromelaDatastructures" (required by "Draft.PromelaTemplates" via "Draft.Promela")
consts
  ppBinOp :: "AST.binOp => binOp"
consts
  ppUnOp :: "AST.unOp => unOp"
val it = fn: 'a list -> 'a
consts
  enforceChan :: "varRef + chanRef => chanRef"
Found termination order: "{}"
Found termination order: "{}"
Found termination order:
  "case_sum (%p. size (snd p))
    (case_sum (%p. size (snd p)) (%p. size (snd p))) <*mlex*>
   {}"
consts
  ppVarType :: "AST.varType => varType"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order:
  "case_sum (%p. size (snd p)) (%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
consts
  extractLTLs ::
    "AST.module list => (String.literal, String.literal) assoc_list"
consts
  printBinOp :: "binOp => char list"
consts
  printUnOp :: "unOp => char list"
Found termination order:
  "case_sum (case_sum (%p. size (snd p)) (%p. size (snd (snd p))))
    (case_sum (%p. size (snd p))
      (case_sum (%p. size (snd p)) (%p. size (snd p)))) <*mlex*>
   case_sum (case_sum (%x. 0) (%x. Suc 0)) (%x. 0) <*mlex*> {}"
Found termination order: "{}"
consts
  printCond :: "(integer => char list) => edgeCond => char list"
consts
  printEffect :: "(integer => char list) => edgeEffect => char list"
consts
  printIndex :: "(integer => char list) => edgeIndex => char list"
Found termination order: "{}"
instantiation
  assoc_list :: (hashable, hashable) hashable
  hashcode_assoc_list == hashcode :: ('a, 'b) assoc_list => uint32
  def_hashmap_size_assoc_list == def_hashmap_size ::
    ('a, 'b) assoc_list itself => nat
instantiation
  assoc_list :: (linorder, linorder) linorder
  less_eq_assoc_list == less_eq ::
    ('a, 'b) assoc_list => ('a, 'b) assoc_list => bool
  less_assoc_list == less ::
    ('a, 'b) assoc_list => ('a, 'b) assoc_list => bool
deriving "linorder" instance for type "IArray.iarray"
generating comparator for type "IArray.iarray"
instantiation
  lexlist :: (hashable) hashable
  hashcode_lexlist == hashcode :: 'a lexlist => uint32
  def_hashmap_size_lexlist == def_hashmap_size :: 'a lexlist itself => nat
consts
  walk_iarray' :: "('b => 'a => 'b) => 'a iarray => 'b => nat => nat => 'b"
instantiation
  iarray :: (hashable) hashable
  hashcode_iarray == hashcode :: 'a iarray => uint32
  def_hashmap_size_iarray == def_hashmap_size :: 'a iarray itself => nat
instantiation
  array :: (linorder) linorder
  less_eq_array == less_eq :: 'a array => 'a array => bool
  less_array == less :: 'a array => 'a array => bool
consts
  walk_array' :: "('b => 'a => 'b) => 'a array => 'b => nat => nat => 'b"
instantiation
  array :: (hashable) hashable
  hashcode_array == hashcode :: 'a array => uint32
  def_hashmap_size_array == def_hashmap_size :: 'a array itself => nat
deriving "linorder" instance for type "PromelaDatastructures.varType"
generating comparator for type "PromelaDatastructures.varType"
deriving "linorder" instance for type "PromelaDatastructures.variable"
generating comparator for type "PromelaDatastructures.variable"
instantiation
  varType :: hashable
  hashcode_varType == hashcode :: varType => uint32
  def_hashmap_size_varType == def_hashmap_size :: varType itself => nat
Found termination order: "{}"
instantiation
  variable :: hashable
  hashcode_variable == hashcode :: variable => uint32
  def_hashmap_size_variable == def_hashmap_size :: variable itself => nat
Found termination order: "{}"
Found termination order: "{}"
instantiation
  channel :: linorder
  less_eq_channel == less_eq :: channel => channel => bool
  less_channel == less :: channel => channel => bool
instantiation
  channel :: hashable
  hashcode_channel == hashcode :: channel => uint32
  def_hashmap_size_channel == def_hashmap_size :: channel itself => nat
Found termination order: "{}"
instantiation
  pState_ext :: (linorder) linorder
  less_eq_pState_ext == less_eq ::
    'a pState_scheme => 'a pState_scheme => bool
  less_pState_ext == less :: 'a pState_scheme => 'a pState_scheme => bool
instantiation
  pState_ext :: (hashable) hashable
  hashcode_pState_ext == hashcode :: 'a pState_scheme => uint32
  def_hashmap_size_pState_ext == def_hashmap_size ::
    'a pState_scheme itself => nat
instantiation
  gState_ext :: (linorder) linorder
  less_eq_gState_ext == less_eq ::
    'a gState_scheme => 'a gState_scheme => bool
  less_gState_ext == less :: 'a gState_scheme => 'a gState_scheme => bool
instantiation
  gState_ext :: (hashable) hashable
  hashcode_gState_ext == hashcode :: 'a gState_scheme => uint32
  def_hashmap_size_gState_ext == def_hashmap_size ::
    'a gState_scheme itself => nat
### theory "Draft.PromelaDatastructures"
### 48.702s elapsed time, 78.193s cpu time, 39.025s GC time
Loading theory "Draft.PromelaInvariants" (required by "Draft.PromelaTemplates" via "Draft.Promela")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
consts
  procArgName :: "procArg => String.literal"
consts
  varDeclName :: "varDecl => String.literal"
consts
  procVarDeclName :: "procVarDecl => String.literal"
Found termination order: "{}"
### theory "Draft.PromelaInvariants"
### 0.698s elapsed time, 0.869s cpu time, 0.076s GC time
Loading theory "Draft.Promela" (required by "Draft.PromelaTemplates")
Found termination order: "{}"
consts
  checkVarValue :: "varType => integer => integer"
Found termination order: "{}"
Found termination order:
  "case_sum (%p. size (snd (snd p)))
    (case_sum (%p. size_list size (fst (snd (snd (snd p)))))
      (%p. size_list size (fst (snd (snd p))))) <*mlex*>
   case_sum (%x. 0) (case_sum (%x. Suc 0) (%x. 0)) <*mlex*> {}"
Found termination order: "{}"
consts
  withChannel ::
    "chanRef => (nat => channel => 'a) => 'b gState_scheme => pState => 'a"
consts
  toVariable ::
    "'a gState_scheme
     => pState => varDecl => String.literal * variable * channel list"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order:
  "case_sum (%p. size (fst p)) (%p. size (fst p)) <*mlex*> {}"
consts
  resolveLabels ::
    "edge list list
     => (String.literal, nat) assoc_list => edge list => edge list"
consts
  toProcess ::
    "nat
     => proc
        => (integer * edge list) iarray *
           nat *
           String.literal *
           (String.literal, nat) assoc_list *
           nat * edgeIndex * procArg list * varDecl list"
Found termination order: "(%p. length (fst (snd p))) <*mlex*> {}"
consts
  evalCond :: "edgeCond => gState\<^sub>I => pState => bool"
Found termination order: "{}"
consts
  evalEffect ::
    "edgeEffect
     => program => gState\<^sub>I => pState => gState\<^sub>I * pState"
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
Proofs for inductive predicate(s) "reachable_statesp"
  Proving monotonicity ...
### Cannot skip proof of schematic goal statement
Found termination order: "{}"
### theory "Draft.Promela"
### 22.083s elapsed time, 28.727s cpu time, 7.201s GC time
*** Failed to load theory "Draft.PromelaTemplates" (unresolved "Draft.Promela")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "192")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 2634 of "$AFP/Promela/Promela.thy")
Exception- TOPLEVEL_ERROR raised
