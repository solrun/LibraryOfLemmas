Loading theory "Draft.PromelaAST" (required by "Draft.PromelaInvariantsTemplates" via "Draft.PromelaInvariants" via "Draft.PromelaDatastructures")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.PromelaInvariantsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.PromelaInvariantsTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.PromelaInvariantsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.165s elapsed time, 0.662s cpu time, 0.059s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.PromelaInvariantsTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.306s elapsed time, 1.197s cpu time, 0.163s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.PromelaInvariantsTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.092s elapsed time, 4.102s cpu time, 0.969s GC time
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.043s elapsed time, 3.674s cpu time, 0.861s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.111s elapsed time, 6.146s cpu time, 1.206s GC time
Loading theory "Draft.Templates" (required by "Draft.PromelaInvariantsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.104s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.PromelaInvariantsTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.796s elapsed time, 1.891s cpu time, 0.822s GC time
### theory "Draft.PromelaAST"
### 10.180s elapsed time, 17.162s cpu time, 3.922s GC time
Loading theory "Draft.PromelaDatastructures" (required by "Draft.PromelaInvariantsTemplates" via "Draft.PromelaInvariants")
consts
  ppBinOp :: "AST.binOp => binOp"
consts
  ppUnOp :: "AST.unOp => unOp"
val it = fn: 'a list -> 'a
consts
  enforceChan :: "varRef + chanRef => chanRef"
Found termination order: "{}"
Found termination order: "{}"
Found termination order:
  "case_sum (%p. size (snd p))
    (case_sum (%p. size (snd p)) (%p. size (snd p))) <*mlex*>
   {}"
consts
  ppVarType :: "AST.varType => varType"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order:
  "case_sum (%p. size (snd p)) (%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
consts
  extractLTLs ::
    "AST.module list => (String.literal, String.literal) assoc_list"
consts
  printBinOp :: "binOp => char list"
consts
  printUnOp :: "unOp => char list"
Found termination order:
  "case_sum (case_sum (%p. size (snd p)) (%p. size (snd (snd p))))
    (case_sum (%p. size (snd p))
      (case_sum (%p. size (snd p)) (%p. size (snd p)))) <*mlex*>
   case_sum (case_sum (%x. 0) (%x. Suc 0)) (%x. 0) <*mlex*> {}"
Found termination order: "{}"
consts
  printCond :: "(integer => char list) => edgeCond => char list"
consts
  printEffect :: "(integer => char list) => edgeEffect => char list"
consts
  printIndex :: "(integer => char list) => edgeIndex => char list"
Found termination order: "{}"
instantiation
  assoc_list :: (hashable, hashable) hashable
  hashcode_assoc_list == hashcode :: ('a, 'b) assoc_list => uint32
  def_hashmap_size_assoc_list == def_hashmap_size ::
    ('a, 'b) assoc_list itself => nat
instantiation
  assoc_list :: (linorder, linorder) linorder
  less_eq_assoc_list == less_eq ::
    ('a, 'b) assoc_list => ('a, 'b) assoc_list => bool
  less_assoc_list == less ::
    ('a, 'b) assoc_list => ('a, 'b) assoc_list => bool
deriving "linorder" instance for type "IArray.iarray"
generating comparator for type "IArray.iarray"
instantiation
  lexlist :: (hashable) hashable
  hashcode_lexlist == hashcode :: 'a lexlist => uint32
  def_hashmap_size_lexlist == def_hashmap_size :: 'a lexlist itself => nat
consts
  walk_iarray' :: "('b => 'a => 'b) => 'a iarray => 'b => nat => nat => 'b"
instantiation
  iarray :: (hashable) hashable
  hashcode_iarray == hashcode :: 'a iarray => uint32
  def_hashmap_size_iarray == def_hashmap_size :: 'a iarray itself => nat
instantiation
  array :: (linorder) linorder
  less_eq_array == less_eq :: 'a array => 'a array => bool
  less_array == less :: 'a array => 'a array => bool
consts
  walk_array' :: "('b => 'a => 'b) => 'a array => 'b => nat => nat => 'b"
instantiation
  array :: (hashable) hashable
  hashcode_array == hashcode :: 'a array => uint32
  def_hashmap_size_array == def_hashmap_size :: 'a array itself => nat
deriving "linorder" instance for type "PromelaDatastructures.varType"
generating comparator for type "PromelaDatastructures.varType"
deriving "linorder" instance for type "PromelaDatastructures.variable"
generating comparator for type "PromelaDatastructures.variable"
instantiation
  varType :: hashable
  hashcode_varType == hashcode :: varType => uint32
  def_hashmap_size_varType == def_hashmap_size :: varType itself => nat
Found termination order: "{}"
instantiation
  variable :: hashable
  hashcode_variable == hashcode :: variable => uint32
  def_hashmap_size_variable == def_hashmap_size :: variable itself => nat
Found termination order: "{}"
Found termination order: "{}"
instantiation
  channel :: linorder
  less_eq_channel == less_eq :: channel => channel => bool
  less_channel == less :: channel => channel => bool
instantiation
  channel :: hashable
  hashcode_channel == hashcode :: channel => uint32
  def_hashmap_size_channel == def_hashmap_size :: channel itself => nat
Found termination order: "{}"
instantiation
  pState_ext :: (linorder) linorder
  less_eq_pState_ext == less_eq ::
    'a pState_scheme => 'a pState_scheme => bool
  less_pState_ext == less :: 'a pState_scheme => 'a pState_scheme => bool
instantiation
  pState_ext :: (hashable) hashable
  hashcode_pState_ext == hashcode :: 'a pState_scheme => uint32
  def_hashmap_size_pState_ext == def_hashmap_size ::
    'a pState_scheme itself => nat
instantiation
  gState_ext :: (linorder) linorder
  less_eq_gState_ext == less_eq ::
    'a gState_scheme => 'a gState_scheme => bool
  less_gState_ext == less :: 'a gState_scheme => 'a gState_scheme => bool
instantiation
  gState_ext :: (hashable) hashable
  hashcode_gState_ext == hashcode :: 'a gState_scheme => uint32
  def_hashmap_size_gState_ext == def_hashmap_size ::
    'a gState_scheme itself => nat
### theory "Draft.PromelaDatastructures"
### 49.310s elapsed time, 81.315s cpu time, 42.596s GC time
Loading theory "Draft.PromelaInvariants" (required by "Draft.PromelaInvariantsTemplates")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
consts
  procArgName :: "procArg => String.literal"
consts
  varDeclName :: "varDecl => String.literal"
consts
  procVarDeclName :: "procVarDecl => String.literal"
Found termination order: "{}"
### theory "Draft.PromelaInvariants"
### 0.748s elapsed time, 0.932s cpu time, 0.091s GC time
Loading theory "Draft.PromelaInvariantsTemplates"
val templateLemmas =
   [("PromelaInvariants.statesNames_finite", "finite (statesNames ?s)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("PromelaInvariants.edgeDecls_finite", "finite (edgeDecls ?e)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("PromelaInvariants.edgeSet_finite", "finite (edgeSet ?s)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("PromelaInvariants.trans_gState_progress_rel",
     "trans (gState_progress_rel ?prog)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("PromelaInvariants.process_names_finite",
     "finite (process_names ?ss ?p)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("PromelaInvariants.pStates_finite",
     "finite (Collect (pState_inv ?prog))",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))
         )),
    ("PromelaInvariants.vardicts_finite",
     "finite (Collect (vardict_inv ?ss ?p))",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))
         )),
    ("PromelaInvariants.gState_progress_rel_trancl_id",
     "(gState_progress_rel ?prog)^+ = gState_progress_rel ?prog",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("PromelaInvariants.refl_on_gState_progress_rel",
     "refl_on (Collect (gState_inv ?prog)) (gState_progress_rel ?prog)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           template_app (template_hole 0, template_var 0))
         )),
    ("PromelaInvariants.lm_to_list_Assoc_List_set",
     "set (lm.to_list ?l) = Assoc_List.set ?l",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("PromelaInvariants.gStates_finite",
     "finite ((gState_progress_rel ?prog)^* `` {?g})",
     template_predicate
      (
         template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1))),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)))
         )),
    ("PromelaInvariants.dom_lm_\<alpha>_Assoc_List_set",
     "dom (lm.\<alpha> ?v) = fst ` Assoc_List.set ?v",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("PromelaInvariants.ran_lm_\<alpha>_Assoc_List_set",
     "ran (lm.\<alpha> ?v) = snd ` Assoc_List.set ?v",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("PromelaInvariants.lm_ball_Assoc_List_set",
     "lm.ball ?m ?P = (ALL x:Assoc_List.set ?m. ?P x)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_hole 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         t_empty))),
    ("PromelaInvariants.gState_progress_refl",
     "gState_inv ?prog ?g ==> (?g, ?g) : gState_progress_rel ?prog",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("PromelaInvariants.gState_progress_rel_gState_invI1",
     "(?g, ?g') : gState_progress_rel ?prog ==> gState_inv ?prog ?g",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 2)
           ))),
    ("PromelaInvariants.gState_progress_rel_gState_invI2",
     "(?g, ?g') : gState_progress_rel ?prog ==> gState_inv ?prog ?g'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("PromelaInvariants.cl_inv_vars_update",
     "cl_inv (?g, ?p) ==> cl_inv (?g, pState.vars_update ?vs ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("PromelaInvariants.cl_inv_vars_update",
     "cl_inv (?g, ?p) ==> cl_inv (gState.vars_update ?vs ?g, ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2)),
               template_var 1))
           ))),
    ("PromelaInvariants.foldli_set",
     "set (foldli ?list (%_. True) (#) ?xs) = set ?xs Un set ?list",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 1), t_empty),
             template_hole 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 4, template_var 0)),
         template_app (template_hole 4, template_var 1)))),
    ("PromelaInvariants.Assoc_List_set_eq_lookup",
     "((?k, ?v) : Assoc_List.set ?vs) =
      (Assoc_List.lookup ?vs ?k = Some ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 2),
         template_app (template_hole 0, template_var 1)))),
    ("PromelaInvariants.cl_inv_lengthD",
     "cl_inv (?g, ?p) ==>
      length (pState.channels ?p) <= length (gState.channels ?g)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 1))))),
    ("PromelaInvariants.cl_inv_procs_update",
     "cl_inv (?g, ?p) ==> cl_inv (?g(| procs := ?ps |), ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, t_empty),
                   template_var 2)),
               template_var 1))
           ))),
    ("PromelaInvariants.cl_inv_handshake_update",
     "cl_inv (?g, ?p) ==> cl_inv (?g(| handshake := ?h |), ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, t_empty),
                   template_var 2)),
               template_var 1))
           ))),
    ("PromelaInvariants.cl_inv_hsdata_update",
     "cl_inv (?g, ?p) ==> cl_inv (?g(| hsdata := ?h |), ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, t_empty),
                   template_var 2)),
               template_var 1))
           ))),
    ("PromelaInvariants.cl_invI",
     "length (pState.channels ?p) <= length (gState.channels ?g) ==>
      cl_inv (?g, ?p)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 5,
            template_app (template_hole 4, template_var 1)),
          template_app
           (template_hole 3,
            template_app (template_hole 2, template_var 0)))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("PromelaInvariants.lm_ball_eq_ran",
     "lm.ball ?v (%(k, v). ?P v) = (ran (lm.\<alpha> ?v) <= Collect ?P)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, template_hole 5), template_var 1),
         template_app (template_hole 4, t_empty)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 5),
               template_var 1))),
         template_app (template_hole 0, template_var 0)))),
    ("PromelaInvariants.cl_inv_channels_update",
     "cl_inv (?g, ?p) ==>
      cl_inv (gState.channels_update (%cs. cs[?i := ?c]) ?g, ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, t_empty),
                   template_var 3)),
               template_var 2))
           ))),
    ("PromelaInvariants.foldli_conj",
     "foldli ?list id (%kv \<sigma>. ?P kv) ?b =
      (?b & (ALL x:set ?list. ?P x))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_hole 3),
           t_empty),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           t_empty)))),
    ("PromelaInvariants.lm_ball_lm_to_map_map_weaken",
     "ALL x:?f ` set ?xs. ?P x ==> lm.ball (lm.to_map (map ?f ?xs)) ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_app (template_hole 4, template_var 1))),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app (template_hole 1, template_hole 2),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1))),
             template_var 0)
           ))),
    ("PromelaInvariants.program_inv_length_states",
     "[| program_inv ?prog; ?n < IArray.length (states ?prog) |]
      ==> 0 < IArray.length (states ?prog !! ?n)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_var 1)))],
       template_inequation
        (less_than, template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 3, template_var 1)),
             template_var 0))))),
    ("PromelaInvariants.gState_progress_rel_rtrancl_absorb",
     "gState_inv ?prog ?g ==>
      (gState_progress_rel ?prog)^* `` {?g} =
      gState_progress_rel ?prog `` {?g}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1))),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 2, template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("PromelaInvariants.cl_inv_trans",
     "[| length (gState.channels ?g) <= length (gState.channels ?g');
         cl_inv (?g, ?p) |]
      ==> cl_inv (?g', ?p)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_var 2)),
          template_app
           (template_hole 6,
            template_app (template_hole 4, template_var 1))),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("PromelaInvariants.lm_to_map_vardict_inv",
     "ALL (k, v):set ?xs. k : process_names ?ss ?proc & variable_inv v ==>
      vardict_inv ?ss ?proc (lm.to_map ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 2)),
              template_app (template_hole 7, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 2))
           ))),
    ("PromelaInvariants.gState_progress_rel_trans",
     "[| (?x, ?y) : gState_progress_rel ?prog;
         (?y, ?z) : gState_progress_rel ?prog |]
      ==> (?x, ?z) : gState_progress_rel ?prog",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_app (template_hole 0, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 0)),
              template_app (template_hole 0, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("PromelaInvariants.gState_progress_rel_channels_update",
     "[| gState_inv ?prog ?g; channel_inv ?c;
         ?i < length (gState.channels ?g) |]
      ==> (?g, gState.channels_update (%cs. cs[?i := ?c]) ?g)
          : gState_progress_rel ?prog",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 8, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_var 2)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_app (template_hole 2, t_empty),
                   template_var 2))),
             template_app (template_hole 0, template_var 3))
           ))),
    ("PromelaInvariants.gState_progress_rel_channels_update_step",
     "[| gState_inv ?prog ?g; (?g, ?g') : gState_progress_rel ?prog;
         channel_inv ?c; ?i < length (gState.channels ?g') |]
      ==> (?g, gState.channels_update (%cs. cs[?i := ?c]) ?g')
          : gState_progress_rel ?prog",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 2)),
              template_app (template_hole 6, template_var 4))
            ),
        template_predicate (template_app (template_hole 5, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 3,
            template_app (template_hole 2, template_var 2)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 3),
                 template_app
                  (template_app (template_hole 1, t_empty),
                   template_var 2))),
             template_app (template_hole 6, template_var 4))
           ))),
    ("PromelaInvariants.gState_progress_relI",
     "[| gState_inv ?prog ?g; gState_inv ?prog ?g';
         length (gState.channels ?g) <= length (gState.channels ?g');
         dom (lm.\<alpha> (gState.vars ?g)) =
         dom (lm.\<alpha> (gState.vars ?g')) |]
      ==> (?g, ?g') : gState_progress_rel ?prog",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_var 0)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 9,
            template_app (template_hole 8, template_var 1)),
          template_app
           (template_hole 9,
            template_app (template_hole 8, template_var 0))),
        template_equation
         (template_app
           (template_hole 6,
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_app (template_hole 3, template_var 1))),
          template_app
           (template_hole 6,
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_app (template_hole 3, template_var 0))))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app (template_hole 0, template_var 2))
           ))),
    ("PromelaInvariants.program_invI",
     "[| 0 < IArray.length (states ?prog);
         IArray.length (states ?prog) = IArray.length (processes ?prog);
         !!s. s : set (IArray.list_of (states ?prog)) ==>
              0 < IArray.length s;
         !!sidx.
            sidx : ran (lm.\<alpha> (proc_data ?prog)) ==>
            sidx < IArray.length (processes ?prog) &
            fst (processes ?prog !! sidx) = sidx;
         !!sidx start procArgs args.
            (sidx, start, procArgs, args)
            : set (IArray.list_of (processes ?prog)) ==>
            EX s. start = Index s &
                  s < IArray.length (states ?prog !! sidx) |]
      ==> program_inv ?prog",
     template_implication
      ([template_inequation
         (less_than, template_hole 33,
          template_app
           (template_hole 32,
            template_app (template_hole 31, template_var 0))),
        template_equation
         (template_app
           (template_hole 32,
            template_app (template_hole 31, template_var 0)),
          template_app
           (template_hole 29,
            template_app (template_hole 28, template_var 0))),
        template_predicate (template_app (template_hole 27, t_empty)),
        template_predicate (template_app (template_hole 22, t_empty)),
        template_predicate (template_app (template_hole 22, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0))))]:
   (string * thm * template) list
### theory "Draft.PromelaInvariantsTemplates"
### 3.779s elapsed time, 6.088s cpu time, 2.858s GC time
val it = (): unit
