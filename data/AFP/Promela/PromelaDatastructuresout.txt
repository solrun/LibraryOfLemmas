Loading theory "Draft.PromelaAST" (required by "Draft.PromelaDatastructuresTemplates" via "Draft.PromelaDatastructures")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.PromelaDatastructuresTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.PromelaDatastructuresTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.PromelaDatastructuresTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.150s elapsed time, 0.603s cpu time, 0.055s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.PromelaDatastructuresTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.221s elapsed time, 0.884s cpu time, 0.055s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.PromelaDatastructuresTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.054s elapsed time, 3.981s cpu time, 0.819s GC time
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.939s elapsed time, 3.410s cpu time, 0.804s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.891s elapsed time, 5.562s cpu time, 1.062s GC time
Loading theory "Draft.Templates" (required by "Draft.PromelaDatastructuresTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.050s elapsed time, 0.098s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.PromelaDatastructuresTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.742s elapsed time, 1.764s cpu time, 0.722s GC time
### theory "Draft.PromelaAST"
### 9.819s elapsed time, 16.105s cpu time, 3.390s GC time
Loading theory "Draft.PromelaDatastructures" (required by "Draft.PromelaDatastructuresTemplates")
consts
  ppBinOp :: "AST.binOp => binOp"
consts
  ppUnOp :: "AST.unOp => unOp"
val it = fn: 'a list -> 'a
consts
  enforceChan :: "varRef + chanRef => chanRef"
Found termination order: "{}"
Found termination order: "{}"
Found termination order:
  "case_sum (%p. size (snd p))
    (case_sum (%p. size (snd p)) (%p. size (snd p))) <*mlex*>
   {}"
consts
  ppVarType :: "AST.varType => varType"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order:
  "case_sum (%p. size (snd p)) (%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
consts
  extractLTLs ::
    "AST.module list => (String.literal, String.literal) assoc_list"
consts
  printBinOp :: "binOp => char list"
consts
  printUnOp :: "unOp => char list"
Found termination order:
  "case_sum (case_sum (%p. size (snd p)) (%p. size (snd (snd p))))
    (case_sum (%p. size (snd p))
      (case_sum (%p. size (snd p)) (%p. size (snd p)))) <*mlex*>
   case_sum (case_sum (%x. 0) (%x. Suc 0)) (%x. 0) <*mlex*> {}"
Found termination order: "{}"
consts
  printCond :: "(integer => char list) => edgeCond => char list"
consts
  printEffect :: "(integer => char list) => edgeEffect => char list"
consts
  printIndex :: "(integer => char list) => edgeIndex => char list"
Found termination order: "{}"
instantiation
  assoc_list :: (hashable, hashable) hashable
  hashcode_assoc_list == hashcode :: ('a, 'b) assoc_list => uint32
  def_hashmap_size_assoc_list == def_hashmap_size ::
    ('a, 'b) assoc_list itself => nat
instantiation
  assoc_list :: (linorder, linorder) linorder
  less_eq_assoc_list == less_eq ::
    ('a, 'b) assoc_list => ('a, 'b) assoc_list => bool
  less_assoc_list == less ::
    ('a, 'b) assoc_list => ('a, 'b) assoc_list => bool
deriving "linorder" instance for type "IArray.iarray"
generating comparator for type "IArray.iarray"
instantiation
  lexlist :: (hashable) hashable
  hashcode_lexlist == hashcode :: 'a lexlist => uint32
  def_hashmap_size_lexlist == def_hashmap_size :: 'a lexlist itself => nat
consts
  walk_iarray' :: "('b => 'a => 'b) => 'a iarray => 'b => nat => nat => 'b"
instantiation
  iarray :: (hashable) hashable
  hashcode_iarray == hashcode :: 'a iarray => uint32
  def_hashmap_size_iarray == def_hashmap_size :: 'a iarray itself => nat
instantiation
  array :: (linorder) linorder
  less_eq_array == less_eq :: 'a array => 'a array => bool
  less_array == less :: 'a array => 'a array => bool
consts
  walk_array' :: "('b => 'a => 'b) => 'a array => 'b => nat => nat => 'b"
instantiation
  array :: (hashable) hashable
  hashcode_array == hashcode :: 'a array => uint32
  def_hashmap_size_array == def_hashmap_size :: 'a array itself => nat
deriving "linorder" instance for type "PromelaDatastructures.varType"
generating comparator for type "PromelaDatastructures.varType"
deriving "linorder" instance for type "PromelaDatastructures.variable"
generating comparator for type "PromelaDatastructures.variable"
instantiation
  varType :: hashable
  hashcode_varType == hashcode :: varType => uint32
  def_hashmap_size_varType == def_hashmap_size :: varType itself => nat
Found termination order: "{}"
instantiation
  variable :: hashable
  hashcode_variable == hashcode :: variable => uint32
  def_hashmap_size_variable == def_hashmap_size :: variable itself => nat
Found termination order: "{}"
Found termination order: "{}"
instantiation
  channel :: linorder
  less_eq_channel == less_eq :: channel => channel => bool
  less_channel == less :: channel => channel => bool
instantiation
  channel :: hashable
  hashcode_channel == hashcode :: channel => uint32
  def_hashmap_size_channel == def_hashmap_size :: channel itself => nat
Found termination order: "{}"
instantiation
  pState_ext :: (linorder) linorder
  less_eq_pState_ext == less_eq ::
    'a pState_scheme => 'a pState_scheme => bool
  less_pState_ext == less :: 'a pState_scheme => 'a pState_scheme => bool
instantiation
  pState_ext :: (hashable) hashable
  hashcode_pState_ext == hashcode :: 'a pState_scheme => uint32
  def_hashmap_size_pState_ext == def_hashmap_size ::
    'a pState_scheme itself => nat
instantiation
  gState_ext :: (linorder) linorder
  less_eq_gState_ext == less_eq ::
    'a gState_scheme => 'a gState_scheme => bool
  less_gState_ext == less :: 'a gState_scheme => 'a gState_scheme => bool
instantiation
  gState_ext :: (hashable) hashable
  hashcode_gState_ext == hashcode :: 'a gState_scheme => uint32
  def_hashmap_size_gState_ext == def_hashmap_size ::
    'a gState_scheme itself => nat
### theory "Draft.PromelaDatastructures"
### 36.811s elapsed time, 46.061s cpu time, 8.346s GC time
Loading theory "Draft.PromelaDatastructuresTemplates"
val templateLemmas =
   [("PromelaDatastructures.comparator_varType_pointwise",
     "peq_comp comparator_varType ?x\<^sub>0",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("PromelaDatastructures.comparator_variable_pointwise",
     "peq_comp comparator_variable ?x\<^sub>0",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("PromelaDatastructures.comparator_varType_pointwise",
     "psym_comp comparator_varType ?x\<^sub>0",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("PromelaDatastructures.comparator_variable_pointwise",
     "psym_comp comparator_variable ?x\<^sub>0",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("PromelaDatastructures.comparator_varType_pointwise",
     "ptrans_comp comparator_varType ?x\<^sub>0",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("PromelaDatastructures.comparator_variable_pointwise",
     "ptrans_comp comparator_variable ?x\<^sub>0",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("PromelaDatastructures.comparator_varType_simps",
     "comparator_varType VTChan (VTBounded ?y ?ya) = Gt",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("PromelaDatastructures.comparator_varType_simps",
     "comparator_varType (VTBounded ?x ?xa) VTChan = Lt",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("PromelaDatastructures.comparator_iarray",
     "comparator ?comp\<^sub>'\<^sub>a ==>
      comparator (comparator_iarray ?comp\<^sub>'\<^sub>a)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("PromelaDatastructures.walk_array_foldl",
     "walk_array ?f ?a ?x = foldl ?f ?x (list_of_array ?a)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("PromelaDatastructures.walk_iarray_foldl",
     "walk_iarray ?f ?a ?x = foldl ?f ?x (IArray.list_of ?a)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("PromelaDatastructures.walk_array_foldl'",
     "walk_array ?f (Array ?xs) ?x = foldl ?f ?x ?xs",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("PromelaDatastructures.walk_iarray_foldl'",
     "walk_iarray ?f (IArray ?xs) ?x = foldl ?f ?x ?xs",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("PromelaDatastructures.comparator_variable_simps",
     "comparator_variable (Var ?x ?xa) (VArray ?yb ?yc ?yd) = Lt",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 4),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_hole 0)),
    ("PromelaDatastructures.comparator_variable_simps",
     "comparator_variable (VArray ?x ?xa ?xb) (Var ?y ?ya) = Gt",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("PromelaDatastructures.pState2HASH_eq",
     "pState2HASH ?x = pState2HASH ?y ==> ?x = ?y",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("PromelaDatastructures.gState2HASH_eq",
     "gState2HASH ?x = gState2HASH ?y ==> ?x = ?y",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("PromelaDatastructures.comparator_iarray_simps",
     "comparator_iarray ?comp\<^sub>'\<^sub>a (IArray ?x) (IArray ?y) =
      comparator_list ?comp\<^sub>'\<^sub>a ?x ?y",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("PromelaDatastructures.AL_update_idem",
     "Assoc_List.lookup ?ls ?k = Some ?v ==>
      Assoc_List.update ?k ?v ?ls = ?ls",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2),
         template_var 2))),
    ("PromelaDatastructures.walk_array_Cons",
     "walk_array ?f (Array (?a # ?xs)) ?b =
      walk_array ?f (Array ?xs) (?f ?b ?a)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app (template_hole 1, template_var 1)),
         template_app
          (template_app (template_var 3, template_var 0),
           template_var 2)))),
    ("PromelaDatastructures.walk_iarray_Cons",
     "walk_iarray ?f (IArray (?a # ?xs)) ?b =
      walk_iarray ?f (IArray ?xs) (?f ?b ?a)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app (template_hole 1, template_var 1)),
         template_app
          (template_app (template_var 3, template_var 0),
           template_var 2)))),
    ("PromelaDatastructures.AL_update_delete_idem",
     "Assoc_List.lookup ?ls ?k = None ==>
      Assoc_List.delete ?k (Assoc_List.update ?k ?v ?ls) = ?ls",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_hole 3)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)),
         template_var 2))),
    ("PromelaDatastructures.walk_array_append",
     "walk_array ?f (Array (?xs @ [?x])) ?b =
      ?f (walk_array ?f (Array ?xs) ?b) ?x",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 3),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0)))),
         template_var 0),
       template_app
        (template_app
          (template_var 3,
           template_app
            (template_app
              (template_app (template_hole 4, template_var 3),
               template_app (template_hole 3, template_var 2)),
             template_var 0)),
         template_var 1))),
    ("PromelaDatastructures.walk_iarray_append",
     "walk_iarray ?f (IArray (?xs @ [?x])) ?b =
      ?f (walk_iarray ?f (IArray ?xs) ?b) ?x",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 3),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0)))),
         template_var 0),
       template_app
        (template_app
          (template_var 3,
           template_app
            (template_app
              (template_app (template_hole 4, template_var 3),
               template_app (template_hole 3, template_var 2)),
             template_var 0)),
         template_var 1))),
    ("PromelaDatastructures.comparator_varType_simps",
     "comparator_varType (VTBounded ?x ?xa) (VTBounded ?y ?ya) =
      (case comparator_of ?x ?y of Eq => comparator_of ?xa ?ya | Lt => Lt
       | Gt => Gt)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 0)),
             template_hole 1),
           template_hole 0),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_var 1)))),
    ("PromelaDatastructures.comparator_variable_simps",
     "comparator_variable (Var ?x ?xa) (Var ?y ?ya) =
      (case comparator_varType ?x ?y of Eq => comparator_of ?xa ?ya
       | Lt => Lt | Gt => Gt)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 0)),
             template_hole 2),
           template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 1)))),
    ("PromelaDatastructures.AL_update_update_idem",
     "Assoc_List.lookup ?ls ?k = Some ?v ==>
      Assoc_List.update ?k ?v (Assoc_List.update ?k ?v2.0 ?ls) = ?ls",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 3), template_var 2),
          template_app (template_hole 2, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 3)),
         template_var 3))),
    ("PromelaDatastructures.comparator_iarray_pointwise",
     "(!!x\<^sub>0\<^sub>_\<^sub>0.
          x\<^sub>0\<^sub>_\<^sub>0 : set_iarray ?x\<^sub>0 ==>
          peq_comp ?comp\<^sub>'\<^sub>a x\<^sub>0\<^sub>_\<^sub>0) ==>
      peq_comp (comparator_iarray ?comp\<^sub>'\<^sub>a) ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("PromelaDatastructures.comparator_iarray_pointwise",
     "(!!x\<^sub>0\<^sub>_\<^sub>0.
          x\<^sub>0\<^sub>_\<^sub>0 : set_iarray ?x\<^sub>0 ==>
          psym_comp ?comp\<^sub>'\<^sub>a x\<^sub>0\<^sub>_\<^sub>0) ==>
      psym_comp (comparator_iarray ?comp\<^sub>'\<^sub>a) ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("PromelaDatastructures.comparator_iarray_pointwise",
     "(!!x\<^sub>0\<^sub>_\<^sub>0.
          x\<^sub>0\<^sub>_\<^sub>0 : set_iarray ?x\<^sub>0 ==>
          ptrans_comp ?comp\<^sub>'\<^sub>a x\<^sub>0\<^sub>_\<^sub>0) ==>
      ptrans_comp (comparator_iarray ?comp\<^sub>'\<^sub>a) ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("PromelaDatastructures.walk_array'_Cons",
     "walk_array' ?f (Array (?a # ?xs)) ?x ?l (Suc ?p) =
      walk_array' ?f (Array ?xs) ?x ?l ?p",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 5),
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 3))),
             template_var 2),
           template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 5),
               template_app (template_hole 2, template_var 3)),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("PromelaDatastructures.walk_iarray'_Cons",
     "walk_iarray' ?f (IArray (?a # ?xs)) ?x ?l (Suc ?p) =
      walk_iarray' ?f (IArray ?xs) ?x ?l ?p",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 5),
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 3))),
             template_var 2),
           template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 5),
               template_app (template_hole 2, template_var 3)),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("PromelaDatastructures.comparator_variable_simps",
     "comparator_variable (VArray ?x ?xa ?xb) (VArray ?yb ?yc ?yd) =
      (case comparator_varType ?x ?yb of
       Eq =>
         case comparator_of ?xa ?yc of
         Eq => comparator_iarray comparator_of ?xb ?yd | Lt => Lt | Gt => Gt
       | Lt => Lt | Gt => Gt)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_app (template_hole 7, template_var 5),
               template_var 4),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_app (template_hole 5, template_hole 4),
                           template_var 3),
                         template_var 0)),
                     template_hole 3),
                   template_hole 2),
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 1))),
             template_hole 3),
           template_hole 2),
         template_app
          (template_app (template_hole 0, template_var 5),
           template_var 2)))),
    ("PromelaDatastructures.cvm_fold_cong",
     "[| ?cvm = ?cvm'; ?stepss = ?stepss';
         !!x d. x : set ?stepss ==> ?g d x = ?g' d x |]
      ==> cvm_fold ?g ?cvm ?stepss = cvm_fold ?g' ?cvm' ?stepss'",
     template_implication
      ([template_equation (template_var 5, template_var 4),
        template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 5),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 4),
           template_var 2)))),
    ("PromelaDatastructures.printList_cong",
     "[| ?xs = ?xs'; ?l = ?l'; ?r = ?r'; ?sep = ?sep';
         !!x. x : set ?xs ==> ?f x = ?f' x |]
      ==> printList ?f ?xs ?l ?r ?sep = printList ?f' ?xs' ?l' ?r' ?sep'",
     template_implication
      ([template_equation (template_var 9, template_var 8),
        template_equation (template_var 7, template_var 6),
        template_equation (template_var 5, template_var 4),
        template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 9),
               template_var 7),
             template_var 5),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 8),
               template_var 6),
             template_var 4),
           template_var 2))))]:
   (string * thm * template) list
### theory "Draft.PromelaDatastructuresTemplates"
### 2.997s elapsed time, 3.618s cpu time, 0.378s GC time
val it = (): unit
