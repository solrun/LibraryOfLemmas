Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Num_ClassTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.Num_ClassTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Num_ClassTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Num_ClassTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.128s elapsed time, 0.523s cpu time, 0.049s GC time
Loading theory "Draft.HOLCF_Main" (required by "Draft.Num_ClassTemplates" via "Draft.Num_Class" via "Draft.Type_Classes")
### theory "HOL-Library.Set_Algebras"
### 0.203s elapsed time, 0.824s cpu time, 0.049s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Num_ClassTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.094s elapsed time, 4.191s cpu time, 0.838s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.000s elapsed time, 3.698s cpu time, 0.825s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.HOLCF_Main"
### 1.332s elapsed time, 4.572s cpu time, 0.894s GC time
Loading theory "Draft.Numeral_Cpo" (required by "Draft.Num_ClassTemplates" via "Draft.Num_Class" via "Draft.Data_Integer")
Loading theory "Draft.Type_Classes" (required by "Draft.Num_ClassTemplates" via "Draft.Num_Class")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
class Eq = domain +
  fixes eq :: "'a -> 'a -> tr"
Found termination order: "size <*mlex*> {}"
class plus_cpo = plus + cpo +
  assumes "cont_plus1": "!!y. cont (%x. x + y)"
  assumes "cont_plus2": "!!x. cont ((+) x)"
### Ambiguous input (line 13 of "$AFP/HOLCF-Prelude/Numeral_Cpo.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^const>Groups.plus_class.plus")
###   ("_Lambda" ("_cargs" ("_position" x) ("_position" y))
###     ("\<^const>Groups.plus_class.plus" ("_position" x) ("_position" y))))
### ("\<^const>Pure.eq" ("\<^fixed>plus_section")
###   ("_Lambda" ("_cargs" ("_position" x) ("_position" y))
###     ("\<^const>Groups.plus_class.plus" ("_position" x) ("_position" y))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
class Eq_strict = Eq +
  assumes
    "eq_strict": "!!x. eq$x$\<bottom> = \<bottom>"
      "!!y. eq$\<bottom>$y = \<bottom>"
class Eq_sym = Eq_strict +
  assumes "eq_sym": "!!x y. eq$x$y = eq$y$x"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class minus_cpo = minus + cpo +
  assumes "cont_minus1": "!!y. cont (%x. x - y)"
  assumes "cont_minus2": "!!x. cont ((-) x)"
### Ambiguous input (line 29 of "$AFP/HOLCF-Prelude/Numeral_Cpo.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^const>Groups.minus_class.minus")
###   ("_Lambda" ("_cargs" ("_position" x) ("_position" y))
###     ("\<^const>Groups.minus_class.minus" ("_position" x) ("_position" y))))
### ("\<^const>Pure.eq" ("\<^fixed>minus_section")
###   ("_Lambda" ("_cargs" ("_position" x) ("_position" y))
###     ("\<^const>Groups.minus_class.minus" ("_position" x) ("_position" y))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
class Eq_equiv = Eq_sym +
  assumes "eq_self_neq_FF": "!!x. eq$x$x ~= FF"
    and
    "eq_trans": "!!x y z. [| eq$x$y = TT; eq$y$z = TT |] ==> eq$x$z = TT"
class Eq_eq = Eq_sym +
  assumes "eq_self_neq_FF'": "!!x. eq$x$x ~= FF"
    and "eq_TT_dest": "!!x y. eq$x$y = TT ==> x = y"
class times_cpo = times + cpo +
  assumes "cont_times1": "!!y. cont (%x. x * y)"
  assumes "cont_times2": "!!x. cont ((*) x)"
instantiation
  u :: ({zero,cpo}) zero
  zero_u == zero_class.zero :: 'a\<^sub>\<bottom>
instantiation
  u :: ({one,cpo}) one
  one_u == one_class.one :: 'a\<^sub>\<bottom>
instantiation
  u :: (plus_cpo) plus
  plus_u == plus ::
    'a\<^sub>\<bottom> => 'a\<^sub>\<bottom> => 'a\<^sub>\<bottom>
instantiation
  u :: (minus_cpo) minus
  minus_u == minus ::
    'a\<^sub>\<bottom> => 'a\<^sub>\<bottom> => 'a\<^sub>\<bottom>
Found termination order: "size <*mlex*> {}"
instantiation
  u :: (times_cpo) times
  times_u == times ::
    'a\<^sub>\<bottom> => 'a\<^sub>\<bottom> => 'a\<^sub>\<bottom>
### theory "Draft.Numeral_Cpo"
### 0.499s elapsed time, 1.510s cpu time, 0.121s GC time
instantiation
  lift :: (countable) Eq_eq
  eq_lift == eq :: 'a lift -> 'a lift -> tr
### theory "HOL-Library.Tree"
### 2.061s elapsed time, 6.802s cpu time, 1.064s GC time
Loading theory "Draft.Templates" (required by "Draft.Num_ClassTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.080s elapsed time, 0.206s cpu time, 0.055s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Num_ClassTemplates")
Proving isomorphism properties of domain Ordering ...
Proving induction properties of domain Ordering ...
Proving finiteness rule for domain Ordering ...
class Ord = Eq +
  fixes compare :: "'a -> 'a -> Ordering"
class Ord_strict = Ord +
  assumes
    "compare_strict": "!!y. compare$\<bottom>$y = \<bottom>"
      "!!x. compare$x$\<bottom> = \<bottom>"
class Ord_linear = Ord_strict +
  assumes "eq_conv_compare": "!!x y. eq$x$y = is_EQ$(compare$x$y)"
    and
    "oppOrdering_compare": "!!x y. oppOrdering$(compare$x$y) = compare$y$x"
    and "compare_EQ_dest": "!!x y. compare$x$y = EQ ==> x = y"
    and "compare_self_below_EQ": "!!x. compare$x$x << EQ"
    and
    "compare_LT_trans":
      "!!x y z.
          [| compare$x$y = LT; compare$y$z = LT |] ==> compare$x$z = LT"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.557s elapsed time, 1.152s cpu time, 0.069s GC time
instantiation
  lift :: ({countable,linorder}) Ord_linear
  compare_lift == compare :: 'a lift -> 'a lift -> Ordering
### theory "Draft.Type_Classes"
### 1.265s elapsed time, 3.106s cpu time, 0.245s GC time
Loading theory "Draft.Data_Bool" (required by "Draft.Num_ClassTemplates" via "Draft.Num_Class" via "Draft.Data_Integer")
### theory "Draft.Data_Bool"
### 0.052s elapsed time, 0.060s cpu time, 0.000s GC time
Loading theory "Draft.Data_Integer" (required by "Draft.Num_ClassTemplates" via "Draft.Num_Class")
Loading theory "Draft.Data_Tuple" (required by "Draft.Num_ClassTemplates" via "Draft.Num_Class")
Proving isomorphism properties of domain Unit ...
Proving induction properties of domain Unit ...
Proving finiteness rule for domain Unit ...
Proving isomorphism properties of domain Integer ...
Proving induction properties of domain Integer ...
Proving finiteness rule for domain Integer ...
instantiation
  Integer :: {minus,one,plus,times,uminus,zero}
  zero_Integer == zero_class.zero :: Integer
  uminus_Integer == uminus :: Integer => Integer
  times_Integer == times :: Integer => Integer => Integer
  plus_Integer == plus :: Integer => Integer => Integer
  one_Integer == one_class.one :: Integer
  minus_Integer == minus :: Integer => Integer => Integer
Proving isomorphism properties of domain Tuple2 ...
instantiation
  Integer :: Ord_linear
  compare_Integer == compare :: Integer -> Integer -> Ordering
  eq_Integer == eq :: Integer -> Integer -> tr
Proving induction properties of domain Tuple2 ...
Proving finiteness rule for domain Tuple2 ...
### theory "Draft.Data_Integer"
### 0.557s elapsed time, 1.133s cpu time, 0.054s GC time
Proving isomorphism properties of domain Tuple3 ...
Proving induction properties of domain Tuple3 ...
Proving finiteness rule for domain Tuple3 ...
instantiation
  \<langle>\<rangle> :: Ord_linear
  compare_Unit == compare ::
    \<langle>\<rangle> -> \<langle>\<rangle> -> Ordering
  eq_Unit == eq :: \<langle>\<rangle> -> \<langle>\<rangle> -> tr
instantiation
  Tuple2 :: (Eq, Eq) Eq_strict
  eq_Tuple2 == eq ::
    \<langle>'a, 'b\<rangle> -> \<langle>'a, 'b\<rangle> -> tr
instantiation
  Tuple2 :: (Ord, Ord) Ord_strict
  compare_Tuple2 == compare ::
    \<langle>'a, 'b\<rangle> -> \<langle>'a, 'b\<rangle> -> Ordering
instantiation
  Tuple3 :: (Eq, Eq, Eq) Eq_strict
  eq_Tuple3 == eq ::
    \<langle>'a, 'b, 'c\<rangle> -> \<langle>'a, 'b, 'c\<rangle> -> tr
instantiation
  Tuple3 :: (Ord, Ord, Ord) Ord_strict
  compare_Tuple3 == compare ::
    \<langle>'a, 'b, 'c\<rangle> -> \<langle>'a, 'b, 'c\<rangle> -> Ordering
### theory "Draft.Data_Tuple"
### 0.951s elapsed time, 1.576s cpu time, 0.112s GC time
Loading theory "Draft.Num_Class" (required by "Draft.Num_ClassTemplates")
class Num_syn = minus + one + plus + times + zero + Eq +
  fixes negate :: "'a -> 'a"
    and abs :: "'a -> 'a"
    and signum :: "'a -> 'a"
    and fromInteger :: "Integer -> 'a"
class Num_strict = Num +
  assumes
    "plus_strict": "!!x. x + \<bottom> = \<bottom>"
      "!!x. \<bottom> + x = \<bottom>"
  assumes
    "minus_strict": "!!x. x - \<bottom> = \<bottom>"
      "!!x. \<bottom> - x = \<bottom>"
  assumes
    "mult_strict": "!!x. x * \<bottom> = \<bottom>"
      "!!x. \<bottom> * x = \<bottom>"
  assumes "negate_strict": "negate$\<bottom> = \<bottom>"
  assumes "abs_strict": "Num_syn_class.abs$\<bottom> = \<bottom>"
  assumes "signum_strict": "signum$\<bottom> = \<bottom>"
  assumes "fromInteger_strict": "fromInteger$\<bottom> = \<bottom>"
class Num_faithful = Num_syn +
  assumes
    "abs_signum_eq": "!!x. eq$(Num_syn_class.abs$x * signum$x)$x << TT"
class Integral = Num +
  fixes div :: "'a -> 'a -> 'a"
    and mod :: "'a -> 'a -> 'a"
    and toInteger :: "'a -> Integer"
class Integral_strict = Integral +
  assumes
    "div_strict": "!!x. div$x$\<bottom> = \<bottom>"
      "!!x. div$\<bottom>$x = \<bottom>"
  assumes
    "mod_strict": "!!x. mod$x$\<bottom> = \<bottom>"
      "!!x. mod$\<bottom>$x = \<bottom>"
  assumes "toInteger_strict": "toInteger$\<bottom> = \<bottom>"
class Integral_faithful = Integral + Num_faithful +
  assumes "!!y x. eq$y$(0::'a) = FF ==> div$x$y * y + mod$x$y = x"
instantiation
  Integer :: Num_syn
  negate_Integer == negate :: Integer -> Integer
  abs_Integer == Num_syn_class.abs :: Integer -> Integer
  signum_Integer == signum :: Integer -> Integer
  fromInteger_Integer == fromInteger :: Integer -> Integer
instantiation
  Integer :: Integral
  div_Integer == div :: Integer -> Integer -> Integer
  mod_Integer == mod :: Integer -> Integer -> Integer
  toInteger_Integer == toInteger :: Integer -> Integer
### theory "Draft.Num_Class"
### 1.152s elapsed time, 1.222s cpu time, 0.090s GC time
Loading theory "Draft.Num_ClassTemplates"
val templateLemmas =
   [("Num_Class.Integer_Integral_simps", "fromInteger$?i = ?i",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Num_Class.Integer_Integral_simps",
     "div$(MkI$?x)$(MkI$?y) = MkI$(?x div ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1))),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Num_Class.Integer_Integral_simps",
     "mod$(MkI$?x)$(MkI$?y) = MkI$(?x mod ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1))),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0))))]:
   (string * thm * template) list
### theory "Draft.Num_ClassTemplates"
### 0.437s elapsed time, 0.601s cpu time, 0.073s GC time
val it = (): unit
