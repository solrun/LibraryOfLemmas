Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Sieve_PrimesTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.Sieve_PrimesTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Sieve_PrimesTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Sieve_PrimesTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.138s elapsed time, 0.571s cpu time, 0.061s GC time
Loading theory "Draft.HOLCF_Main" (required by "Draft.Sieve_PrimesTemplates" via "Draft.Sieve_Primes" via "Draft.Num_Class" via "Draft.Type_Classes")
### theory "HOL-Library.Set_Algebras"
### 0.209s elapsed time, 0.855s cpu time, 0.061s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Sieve_PrimesTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  left :: "'a tree => 'a tree"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  right :: "'a tree => 'a tree"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.072s elapsed time, 4.093s cpu time, 0.798s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.937s elapsed time, 3.469s cpu time, 0.737s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.HOLCF_Main"
### 1.230s elapsed time, 4.249s cpu time, 0.795s GC time
Loading theory "Draft.Data_Function" (required by "Draft.Sieve_PrimesTemplates" via "Draft.Sieve_Primes" via "Draft.HOLCF_Prelude")
Loading theory "Draft.Numeral_Cpo" (required by "Draft.Sieve_PrimesTemplates" via "Draft.Sieve_Primes" via "Draft.Num_Class" via "Draft.Data_Integer")
Loading theory "Draft.Type_Classes" (required by "Draft.Sieve_PrimesTemplates" via "Draft.Sieve_Primes" via "Draft.Num_Class")
Found termination order: "size <*mlex*> {}"
class Eq = domain +
  fixes eq :: "'a -> 'a -> tr"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
class Eq_strict = Eq +
  assumes
    "eq_strict": "!!x. eq$x$\<bottom> = \<bottom>"
      "!!y. eq$\<bottom>$y = \<bottom>"
### theory "Draft.Data_Function"
### 0.157s elapsed time, 0.611s cpu time, 0.064s GC time
class plus_cpo = plus + cpo +
  assumes "cont_plus1": "!!y. cont (%x. x + y)"
  assumes "cont_plus2": "!!x. cont ((+) x)"
### Ambiguous input (line 13 of "$AFP/HOLCF-Prelude/Numeral_Cpo.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^const>Groups.plus_class.plus")
###   ("_Lambda" ("_cargs" ("_position" x) ("_position" y))
###     ("\<^const>Groups.plus_class.plus" ("_position" x) ("_position" y))))
### ("\<^const>Pure.eq" ("\<^fixed>plus_section")
###   ("_Lambda" ("_cargs" ("_position" x) ("_position" y))
###     ("\<^const>Groups.plus_class.plus" ("_position" x) ("_position" y))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
class Eq_sym = Eq_strict +
  assumes "eq_sym": "!!x y. eq$x$y = eq$y$x"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class Eq_equiv = Eq_sym +
  assumes "eq_self_neq_FF": "!!x. eq$x$x ~= FF"
    and
    "eq_trans": "!!x y z. [| eq$x$y = TT; eq$y$z = TT |] ==> eq$x$z = TT"
class minus_cpo = minus + cpo +
  assumes "cont_minus1": "!!y. cont (%x. x - y)"
  assumes "cont_minus2": "!!x. cont ((-) x)"
### Ambiguous input (line 29 of "$AFP/HOLCF-Prelude/Numeral_Cpo.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^const>Groups.minus_class.minus")
###   ("_Lambda" ("_cargs" ("_position" x) ("_position" y))
###     ("\<^const>Groups.minus_class.minus" ("_position" x) ("_position" y))))
### ("\<^const>Pure.eq" ("\<^fixed>minus_section")
###   ("_Lambda" ("_cargs" ("_position" x) ("_position" y))
###     ("\<^const>Groups.minus_class.minus" ("_position" x) ("_position" y))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
class Eq_eq = Eq_sym +
  assumes "eq_self_neq_FF'": "!!x. eq$x$x ~= FF"
    and "eq_TT_dest": "!!x y. eq$x$y = TT ==> x = y"
class times_cpo = times + cpo +
  assumes "cont_times1": "!!y. cont (%x. x * y)"
  assumes "cont_times2": "!!x. cont ((*) x)"
instantiation
  u :: ({zero,cpo}) zero
  zero_u == zero_class.zero :: 'a\<^sub>\<bottom>
instantiation
  u :: ({one,cpo}) one
  one_u == one_class.one :: 'a\<^sub>\<bottom>
instantiation
  u :: (plus_cpo) plus
  plus_u == plus ::
    'a\<^sub>\<bottom> => 'a\<^sub>\<bottom> => 'a\<^sub>\<bottom>
instantiation
  u :: (minus_cpo) minus
  minus_u == minus ::
    'a\<^sub>\<bottom> => 'a\<^sub>\<bottom> => 'a\<^sub>\<bottom>
instantiation
  u :: (times_cpo) times
  times_u == times ::
    'a\<^sub>\<bottom> => 'a\<^sub>\<bottom> => 'a\<^sub>\<bottom>
Found termination order: "size <*mlex*> {}"
instantiation
  lift :: (countable) Eq_eq
  eq_lift == eq :: 'a lift -> 'a lift -> tr
### theory "Draft.Numeral_Cpo"
### 0.534s elapsed time, 1.758s cpu time, 0.132s GC time
### theory "HOL-Library.Tree"
### 2.023s elapsed time, 6.809s cpu time, 0.987s GC time
Loading theory "Draft.Templates" (required by "Draft.Sieve_PrimesTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.077s elapsed time, 0.198s cpu time, 0.063s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Sieve_PrimesTemplates")
Proving isomorphism properties of domain Ordering ...
Proving induction properties of domain Ordering ...
Proving finiteness rule for domain Ordering ...
class Ord = Eq +
  fixes compare :: "'a -> 'a -> Ordering"
class Ord_strict = Ord +
  assumes
    "compare_strict": "!!y. compare$\<bottom>$y = \<bottom>"
      "!!x. compare$x$\<bottom> = \<bottom>"
class Ord_linear = Ord_strict +
  assumes "eq_conv_compare": "!!x y. eq$x$y = is_EQ$(compare$x$y)"
    and
    "oppOrdering_compare": "!!x y. oppOrdering$(compare$x$y) = compare$y$x"
    and "compare_EQ_dest": "!!x y. compare$x$y = EQ ==> x = y"
    and "compare_self_below_EQ": "!!x. compare$x$x << EQ"
    and
    "compare_LT_trans":
      "!!x y z.
          [| compare$x$y = LT; compare$y$z = LT |] ==> compare$x$z = LT"
instantiation
  lift :: ({countable,linorder}) Ord_linear
  compare_lift == compare :: 'a lift -> 'a lift -> Ordering
### theory "Draft.Type_Classes"
### 1.269s elapsed time, 3.296s cpu time, 0.257s GC time
Loading theory "Draft.Data_Bool" (required by "Draft.Sieve_PrimesTemplates" via "Draft.Sieve_Primes" via "Draft.Num_Class" via "Draft.Data_Integer")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.538s elapsed time, 1.105s cpu time, 0.062s GC time
### theory "Draft.Data_Bool"
### 0.055s elapsed time, 0.075s cpu time, 0.000s GC time
Loading theory "Draft.Data_Integer" (required by "Draft.Sieve_PrimesTemplates" via "Draft.Sieve_Primes" via "Draft.Num_Class")
Loading theory "Draft.Data_Tuple" (required by "Draft.Sieve_PrimesTemplates" via "Draft.Sieve_Primes" via "Draft.Num_Class")
Proving isomorphism properties of domain Unit ...
Proving induction properties of domain Unit ...
Proving finiteness rule for domain Unit ...
Proving isomorphism properties of domain Integer ...
Proving induction properties of domain Integer ...
Proving finiteness rule for domain Integer ...
instantiation
  Integer :: {minus,one,plus,times,uminus,zero}
  zero_Integer == zero_class.zero :: Integer
  uminus_Integer == uminus :: Integer => Integer
  times_Integer == times :: Integer => Integer => Integer
  plus_Integer == plus :: Integer => Integer => Integer
  one_Integer == one_class.one :: Integer
  minus_Integer == minus :: Integer => Integer => Integer
Proving isomorphism properties of domain Tuple2 ...
instantiation
  Integer :: Ord_linear
  compare_Integer == compare :: Integer -> Integer -> Ordering
  eq_Integer == eq :: Integer -> Integer -> tr
Proving induction properties of domain Tuple2 ...
Proving finiteness rule for domain Tuple2 ...
### theory "Draft.Data_Integer"
### 0.569s elapsed time, 1.174s cpu time, 0.102s GC time
Proving isomorphism properties of domain Tuple3 ...
Proving induction properties of domain Tuple3 ...
Proving finiteness rule for domain Tuple3 ...
instantiation
  \<langle>\<rangle> :: Ord_linear
  compare_Unit == compare ::
    \<langle>\<rangle> -> \<langle>\<rangle> -> Ordering
  eq_Unit == eq :: \<langle>\<rangle> -> \<langle>\<rangle> -> tr
instantiation
  Tuple2 :: (Eq, Eq) Eq_strict
  eq_Tuple2 == eq ::
    \<langle>'a, 'b\<rangle> -> \<langle>'a, 'b\<rangle> -> tr
instantiation
  Tuple2 :: (Ord, Ord) Ord_strict
  compare_Tuple2 == compare ::
    \<langle>'a, 'b\<rangle> -> \<langle>'a, 'b\<rangle> -> Ordering
instantiation
  Tuple3 :: (Eq, Eq, Eq) Eq_strict
  eq_Tuple3 == eq ::
    \<langle>'a, 'b, 'c\<rangle> -> \<langle>'a, 'b, 'c\<rangle> -> tr
instantiation
  Tuple3 :: (Ord, Ord, Ord) Ord_strict
  compare_Tuple3 == compare ::
    \<langle>'a, 'b, 'c\<rangle> -> \<langle>'a, 'b, 'c\<rangle> -> Ordering
### theory "Draft.Data_Tuple"
### 0.957s elapsed time, 1.570s cpu time, 0.102s GC time
Loading theory "Draft.Data_List" (required by "Draft.Sieve_PrimesTemplates" via "Draft.Sieve_Primes" via "Draft.HOLCF_Prelude")
Loading theory "Draft.Num_Class" (required by "Draft.Sieve_PrimesTemplates" via "Draft.Sieve_Primes")
class Num_syn = minus + one + plus + times + zero + Eq +
  fixes negate :: "'a -> 'a"
    and abs :: "'a -> 'a"
    and signum :: "'a -> 'a"
    and fromInteger :: "Integer -> 'a"
Proving isomorphism properties of domain list ...
class Num_strict = Num +
  assumes
    "plus_strict": "!!x. x + \<bottom> = \<bottom>"
      "!!x. \<bottom> + x = \<bottom>"
  assumes
    "minus_strict": "!!x. x - \<bottom> = \<bottom>"
      "!!x. \<bottom> - x = \<bottom>"
  assumes
    "mult_strict": "!!x. x * \<bottom> = \<bottom>"
      "!!x. \<bottom> * x = \<bottom>"
  assumes "negate_strict": "negate$\<bottom> = \<bottom>"
  assumes "abs_strict": "Num_syn_class.abs$\<bottom> = \<bottom>"
  assumes "signum_strict": "signum$\<bottom> = \<bottom>"
  assumes "fromInteger_strict": "fromInteger$\<bottom> = \<bottom>"
Proving induction properties of domain list ...
class Num_faithful = Num_syn +
  assumes
    "abs_signum_eq": "!!x. eq$(Num_syn_class.abs$x * signum$x)$x << TT"
instantiation
  list :: (Eq) Eq_strict
  eq_list == eq :: ['a] -> ['a] -> tr
class Integral = Num +
  fixes div :: "'a -> 'a -> 'a"
    and mod :: "'a -> 'a -> 'a"
    and toInteger :: "'a -> Integer"
instantiation
  list :: (Ord) Ord_strict
  compare_list == compare :: ['a] -> ['a] -> Ordering
class Integral_strict = Integral +
  assumes
    "div_strict": "!!x. div$x$\<bottom> = \<bottom>"
      "!!x. div$\<bottom>$x = \<bottom>"
  assumes
    "mod_strict": "!!x. mod$x$\<bottom> = \<bottom>"
      "!!x. mod$\<bottom>$x = \<bottom>"
  assumes "toInteger_strict": "toInteger$\<bottom> = \<bottom>"
class Integral_faithful = Integral + Num_faithful +
  assumes "!!y x. eq$y$(0::'a) = FF ==> div$x$y * y + mod$x$y = x"
instantiation
  Integer :: Num_syn
  negate_Integer == negate :: Integer -> Integer
  abs_Integer == Num_syn_class.abs :: Integer -> Integer
  signum_Integer == signum :: Integer -> Integer
  fromInteger_Integer == fromInteger :: Integer -> Integer
instantiation
  Integer :: Integral
  div_Integer == div :: Integer -> Integer -> Integer
  mod_Integer == mod :: Integer -> Integer -> Integer
  toInteger_Integer == toInteger :: Integer -> Integer
### theory "Draft.Num_Class"
### 1.342s elapsed time, 2.762s cpu time, 0.193s GC time
### Ambiguous input (line 272 of "$AFP/HOLCF-Prelude/Data_List.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" reverse)
###     ("\<^const>Cfun.cfun.Rep_cfun"
###       ("\<^const>Cfun.cfun.Rep_cfun" ("_position" foldl)
###         ("\<^const>Cfun.cfun.Rep_cfun" ("_position" flip)
###           ("_Cons_section")))
###       ("\<^const>Data_List.list.Nil_cont_syntax"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" reverse)
###     ("\<^const>Cfun.cfun.Rep_cfun"
###       ("\<^const>Cfun.cfun.Rep_cfun" ("_position" foldl)
###         ("\<^const>Cfun.cfun.Rep_cfun" ("_position" flip)
###           ("\<^const>Data_List.list.Cons_cont_syntax")))
###       ("\<^const>Data_List.list.Nil_cont_syntax"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
class Enum = domain +
  fixes toEnum :: "Integer -> 'a"
    and fromEnum :: "'a -> Integer"
instantiation
  Integer :: Enum
  toEnum_Integer == toEnum :: Integer -> Integer
  fromEnum_Integer == fromEnum :: Integer -> Integer
Proofs for inductive predicate(s) "finite_list"
  Proving monotonicity ...
Proofs for inductive predicate(s) "listmem"
  Proving monotonicity ...
Proofs for inductive predicate(s) "distinct"
  Proving monotonicity ...
### Ambiguous input (line 595 of "$AFP/HOLCF-Prelude/Data_List.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Cfun.cfun.Rep_cfun"
###       ("\<^const>Cfun.cfun.Rep_cfun"
###         ("\<^const>Cfun.cfun.Rep_cfun" ("_position" foldr)
###           ("\<^const>Data_List.list.Cons_cont_syntax"))
###         ("\<^const>Data_List.list.Nil_cont_syntax"))
###       ("_position" xs))
###     ("_position" xs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Cfun.cfun.Rep_cfun"
###       ("\<^const>Cfun.cfun.Rep_cfun"
###         ("\<^const>Cfun.cfun.Rep_cfun" ("_position" foldr)
###           ("_Cons_section"))
###         ("\<^const>Data_List.list.Nil_cont_syntax"))
###       ("_position" xs))
###     ("_position" xs)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1519 of "$AFP/HOLCF-Prelude/Data_List.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Cfun.cfun.Rep_cfun"
###       ("\<^const>Cfun.cfun.Rep_cfun"
###         ("\<^const>Cfun.cfun.Rep_cfun" ("_position" foldl)
###           ("\<^const>Cfun.cfun.Rep_cfun" ("_position" flip)
###             ("_Cons_section")))
###         ("_position" ys))
###       ("_position" xs))
###     ("\<^const>Data_List.append_syn"
###       ("\<^const>Cfun.cfun.Rep_cfun"
###         ("\<^const>Cfun.cfun.Rep_cfun"
###           ("\<^const>Cfun.cfun.Rep_cfun" ("_position" foldl)
###             ("\<^const>Cfun.cfun.Rep_cfun" ("_position" flip)
###               ("_Cons_section")))
###           ("\<^const>Data_List.list.Nil_cont_syntax"))
###         ("_position" xs))
###       ("_position" ys))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Cfun.cfun.Rep_cfun"
###       ("\<^const>Cfun.cfun.Rep_cfun"
###         ("\<^const>Cfun.cfun.Rep_cfun" ("_position" foldl)
###           ("\<^const>Cfun.cfun.Rep_cfun" ("_position" flip)
###             ("\<^const>Data_List.list.Cons_cont_syntax")))
###         ("_position" ys))
###       ("_position" xs))
###     ("\<^const>Data_List.append_syn"
###       ("\<^const>Cfun.cfun.Rep_cfun"
###         ("\<^const>Cfun.cfun.Rep_cfun"
###           ("\<^const>Cfun.cfun.Rep_cfun" ("_position" foldl)
###             ("\<^const>Cfun.cfun.Rep_cfun" ("_position" flip)
###               ("_Cons_section")))
###           ("\<^const>Data_List.list.Nil_cont_syntax"))
###         ("_position" xs))
###       ("_position" ys))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Cfun.cfun.Rep_cfun"
###       ("\<^const>Cfun.cfun.Rep_cfun"
###         ("\<^const>Cfun.cfun.Rep_cfun" ("_position" foldl)
###           ("\<^const>Cfun.cfun.Rep_cfun" ("_position" flip)
###             ("_Cons_section")))
###         ("_position" ys))
###       ("_position" xs))
###     ("\<^const>Data_List.append_syn"
###       ("\<^const>Cfun.cfun.Rep_cfun"
###         ("\<^const>Cfun.cfun.Rep_cfun"
###           ("\<^const>Cfun.cfun.Rep_cfun" ("_position" foldl)
###             ("\<^const>Cfun.cfun.Rep_cfun" ("_position" flip)
###               ("\<^const>Data_List.list.Cons_cont_syntax")))
###           ("\<^const>Data_List.list.Nil_cont_syntax"))
###         ("_position" xs))
###       ("_position" ys))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Cfun.cfun.Rep_cfun"
###       ("\<^const>Cfun.cfun.Rep_cfun"
###         ("\<^const>Cfun.cfun.Rep_cfun" ("_position" foldl)
###           ("\<^const>Cfun.cfun.Rep_cfun" ("_position" flip)
###             ("\<^const>Data_List.list.Cons_cont_syntax")))
###         ("_position" ys))
###       ("_position" xs))
###     ("\<^const>Data_List.append_syn"
###       ("\<^const>Cfun.cfun.Rep_cfun"
###         ("\<^const>Cfun.cfun.Rep_cfun"
###           ("\<^const>Cfun.cfun.Rep_cfun" ("_position" foldl)
###             ("\<^const>Cfun.cfun.Rep_cfun" ("_position" flip)
###               ("\<^const>Data_List.list.Cons_cont_syntax")))
###           ("\<^const>Data_List.list.Nil_cont_syntax"))
###         ("_position" xs))
###       ("_position" ys))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Data_List"
### 3.069s elapsed time, 4.594s cpu time, 0.363s GC time
Loading theory "Draft.Data_Maybe" (required by "Draft.Sieve_PrimesTemplates" via "Draft.Sieve_Primes" via "Draft.HOLCF_Prelude")
Proving isomorphism properties of domain Maybe ...
Proving induction properties of domain Maybe ...
Proving finiteness rule for domain Maybe ...
instantiation
  Maybe :: (Eq) Eq_strict
  eq_Maybe == eq :: 'a Maybe -> 'a Maybe -> tr
instantiation
  Maybe :: (Ord) Ord_strict
  compare_Maybe == compare :: 'a Maybe -> 'a Maybe -> Ordering
### theory "Draft.Data_Maybe"
### 0.521s elapsed time, 0.600s cpu time, 0.081s GC time
Loading theory "Draft.HOLCF_Prelude" (required by "Draft.Sieve_PrimesTemplates" via "Draft.Sieve_Primes")
### theory "Draft.HOLCF_Prelude"
### 0.025s elapsed time, 0.031s cpu time, 0.000s GC time
Loading theory "Draft.Sieve_Primes" (required by "Draft.Sieve_PrimesTemplates")
### theory "Draft.Sieve_Primes"
### 0.835s elapsed time, 1.467s cpu time, 0.872s GC time
*** Failed to load theory "Draft.Sieve_PrimesTemplates" (unresolved "Draft.Sieve_Primes")
*** Unknown ancestor theory "HOLCF-Prelude.HOLCF_Main" (line 24 of "$AFP/HOLCF-Prelude/examples/Sieve_Primes.thy")
*** At command "text" (line 22 of "$AFP/HOLCF-Prelude/examples/Sieve_Primes.thy")
Exception- TOPLEVEL_ERROR raised
