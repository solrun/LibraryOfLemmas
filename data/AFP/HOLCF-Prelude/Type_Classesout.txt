Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Type_ClassesTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.Type_ClassesTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Tree" (required by "Draft.Type_ClassesTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Type_ClassesTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.131s elapsed time, 0.537s cpu time, 0.053s GC time
Loading theory "Draft.HOLCF_Main" (required by "Draft.Type_ClassesTemplates" via "Draft.Type_Classes")
### theory "HOL-Library.Set_Algebras"
### 0.212s elapsed time, 0.863s cpu time, 0.053s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Type_ClassesTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.973s elapsed time, 3.737s cpu time, 0.721s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.896s elapsed time, 3.285s cpu time, 0.702s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.HOLCF_Main"
### 1.203s elapsed time, 4.116s cpu time, 0.760s GC time
Loading theory "Draft.Type_Classes" (required by "Draft.Type_ClassesTemplates")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
class Eq = domain +
  fixes eq :: "'a -> 'a -> tr"
Found termination order: "size <*mlex*> {}"
class Eq_strict = Eq +
  assumes
    "eq_strict": "!!x. eq$x$\<bottom> = \<bottom>"
      "!!y. eq$\<bottom>$y = \<bottom>"
class Eq_sym = Eq_strict +
  assumes "eq_sym": "!!x y. eq$x$y = eq$y$x"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class Eq_equiv = Eq_sym +
  assumes "eq_self_neq_FF": "!!x. eq$x$x ~= FF"
    and
    "eq_trans": "!!x y z. [| eq$x$y = TT; eq$y$z = TT |] ==> eq$x$z = TT"
class Eq_eq = Eq_sym +
  assumes "eq_self_neq_FF'": "!!x. eq$x$x ~= FF"
    and "eq_TT_dest": "!!x y. eq$x$y = TT ==> x = y"
Found termination order: "size <*mlex*> {}"
instantiation
  lift :: (countable) Eq_eq
  eq_lift == eq :: 'a lift -> 'a lift -> tr
### theory "HOL-Library.Tree"
### 1.879s elapsed time, 5.780s cpu time, 0.923s GC time
Loading theory "Draft.Templates" (required by "Draft.Type_ClassesTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.128s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Type_ClassesTemplates")
Proving isomorphism properties of domain Ordering ...
Proving induction properties of domain Ordering ...
Proving finiteness rule for domain Ordering ...
class Ord = Eq +
  fixes compare :: "'a -> 'a -> Ordering"
class Ord_strict = Ord +
  assumes
    "compare_strict": "!!y. compare$\<bottom>$y = \<bottom>"
      "!!x. compare$x$\<bottom> = \<bottom>"
class Ord_linear = Ord_strict +
  assumes "eq_conv_compare": "!!x y. eq$x$y = is_EQ$(compare$x$y)"
    and
    "oppOrdering_compare": "!!x y. oppOrdering$(compare$x$y) = compare$y$x"
    and "compare_EQ_dest": "!!x y. compare$x$y = EQ ==> x = y"
    and "compare_self_below_EQ": "!!x. compare$x$x << EQ"
    and
    "compare_LT_trans":
      "!!x y z.
          [| compare$x$y = LT; compare$y$z = LT |] ==> compare$x$z = LT"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.539s elapsed time, 1.115s cpu time, 0.069s GC time
instantiation
  lift :: ({countable,linorder}) Ord_linear
  compare_lift == compare :: 'a lift -> 'a lift -> Ordering
### theory "Draft.Type_Classes"
### 1.171s elapsed time, 2.420s cpu time, 0.179s GC time
Loading theory "Draft.Type_ClassesTemplates"
val templateLemmas =
   [("Type_Classes.thenOrdering_simps",
     "thenOrdering$\<bottom>$?y = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0)),
         template_var 0),
       template_hole 0)),
    ("Type_Classes.thenOrdering_simps", "thenOrdering$EQ$?y = ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0)),
         template_var 0),
       template_var 0)),
    ("Type_Classes.thenOrdering_simps", "thenOrdering$GT$?y = GT",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0)),
         template_var 0),
       template_hole 0)),
    ("Type_Classes.thenOrdering_simps", "thenOrdering$LT$?y = LT",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0)),
         template_var 0),
       template_hole 0)),
    ("Type_Classes.thenOrdering_EQ_iff",
     "(thenOrdering$?x$?y = EQ) = (?x = EQ & ?y = EQ)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 1)),
           template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_hole 1))
           ))),
    ("Type_Classes.is_EQ_thenOrdering",
     "is_EQ$(thenOrdering$?x$?y) = (is_EQ$?x andalso is_EQ$?y)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_hole 6),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_var 1))),
         template_app
          (template_app (template_hole 7, template_hole 6),
           template_var 0)))),
    ("Type_Classes.oppOrdering_thenOrdering",
     "oppOrdering$(thenOrdering$?x$?y) =
      thenOrdering$(oppOrdering$?x)$(oppOrdering$?y)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 1))),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)))),
    ("Type_Classes.thenOrdering_GT_iff",
     "(thenOrdering$?x$?y = GT) = (?x = GT | ?x = EQ & ?y = GT)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_var 1)),
           template_var 0),
         template_hole 3),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 7, template_var 1),
                 template_hole 3)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 7, template_var 1),
                   template_hole 0)),
               template_app
                (template_app (template_hole 7, template_var 0),
                 template_hole 3)))
           ))),
    ("Type_Classes.thenOrdering_LT_iff",
     "(thenOrdering$?x$?y = LT) = (?x = LT | ?x = EQ & ?y = LT)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_var 1)),
           template_var 0),
         template_hole 3),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 7, template_var 1),
                 template_hole 3)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 7, template_var 1),
                   template_hole 0)),
               template_app
                (template_app (template_hole 7, template_var 0),
                 template_hole 3)))
           ))),
    ("Type_Classes.thenOrdering_below_EQ_iff",
     "(thenOrdering$?x$?y << EQ) =
      (?x << EQ & (?x = \<bottom> | ?y << EQ))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_hole 5),
                      template_var 1)),
                  template_var 0)),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 8, template_var 1),
                 template_hole 4)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 0)),
               template_app
                (template_app (template_hole 8, template_var 0),
                 template_hole 4)))
           ))),
    ("Type_Classes.lt_le", "lt$?x$?y = (le$?x$?y andalso neq$?x$?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_hole 1),
                   template_var 1)),
               template_var 0))),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 0),
               template_var 1)),
           template_var 0))))]:
   (string * thm * template) list
### theory "Draft.Type_ClassesTemplates"
### 0.409s elapsed time, 0.569s cpu time, 0.065s GC time
val it = (): unit
