Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Data_BoolTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.Data_BoolTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Data_BoolTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Data_BoolTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.126s elapsed time, 0.502s cpu time, 0.052s GC time
Loading theory "Draft.HOLCF_Main" (required by "Draft.Data_BoolTemplates" via "Draft.Data_Bool" via "Draft.Type_Classes")
### theory "HOL-Library.Set_Algebras"
### 0.251s elapsed time, 1.010s cpu time, 0.052s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Data_BoolTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.182s elapsed time, 4.503s cpu time, 0.904s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.093s elapsed time, 3.988s cpu time, 0.923s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.HOLCF_Main"
### 1.331s elapsed time, 4.743s cpu time, 0.923s GC time
Loading theory "Draft.Type_Classes" (required by "Draft.Data_BoolTemplates" via "Draft.Data_Bool")
Found termination order: "size <*mlex*> {}"
class Eq = domain +
  fixes eq :: "'a -> 'a -> tr"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
class Eq_strict = Eq +
  assumes
    "eq_strict": "!!x. eq$x$\<bottom> = \<bottom>"
      "!!y. eq$\<bottom>$y = \<bottom>"
Found termination order: "size <*mlex*> {}"
class Eq_sym = Eq_strict +
  assumes "eq_sym": "!!x y. eq$x$y = eq$y$x"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class Eq_equiv = Eq_sym +
  assumes "eq_self_neq_FF": "!!x. eq$x$x ~= FF"
    and
    "eq_trans": "!!x y z. [| eq$x$y = TT; eq$y$z = TT |] ==> eq$x$z = TT"
class Eq_eq = Eq_sym +
  assumes "eq_self_neq_FF'": "!!x. eq$x$x ~= FF"
    and "eq_TT_dest": "!!x y. eq$x$y = TT ==> x = y"
Found termination order: "size <*mlex*> {}"
instantiation
  lift :: (countable) Eq_eq
  eq_lift == eq :: 'a lift -> 'a lift -> tr
### theory "HOL-Library.Tree"
### 2.027s elapsed time, 6.427s cpu time, 1.069s GC time
Loading theory "Draft.Templates" (required by "Draft.Data_BoolTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.060s elapsed time, 0.143s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Data_BoolTemplates")
Proving isomorphism properties of domain Ordering ...
Proving induction properties of domain Ordering ...
Proving finiteness rule for domain Ordering ...
class Ord = Eq +
  fixes compare :: "'a -> 'a -> Ordering"
class Ord_strict = Ord +
  assumes
    "compare_strict": "!!y. compare$\<bottom>$y = \<bottom>"
      "!!x. compare$x$\<bottom> = \<bottom>"
class Ord_linear = Ord_strict +
  assumes "eq_conv_compare": "!!x y. eq$x$y = is_EQ$(compare$x$y)"
    and
    "oppOrdering_compare": "!!x y. oppOrdering$(compare$x$y) = compare$y$x"
    and "compare_EQ_dest": "!!x y. compare$x$y = EQ ==> x = y"
    and "compare_self_below_EQ": "!!x. compare$x$x << EQ"
    and
    "compare_LT_trans":
      "!!x y z.
          [| compare$x$y = LT; compare$y$z = LT |] ==> compare$x$z = LT"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.541s elapsed time, 1.115s cpu time, 0.055s GC time
instantiation
  lift :: ({countable,linorder}) Ord_linear
  compare_lift == compare :: 'a lift -> 'a lift -> Ordering
### theory "Draft.Type_Classes"
### 1.196s elapsed time, 2.468s cpu time, 0.150s GC time
Loading theory "Draft.Data_Bool" (required by "Draft.Data_BoolTemplates")
### theory "Draft.Data_Bool"
### 0.068s elapsed time, 0.112s cpu time, 0.051s GC time
Loading theory "Draft.Data_BoolTemplates"
val templateLemmas =
   [("Data_Bool.neg_neg", "neg$(neg$?x) = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_var 0)),
    ("Data_Bool.neg_eq_bottom_iff",
     "(neg$?x = \<bottom>) = (?x = \<bottom>)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 0),
         template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("Data_Bool.neg_eq_FF_iff", "(neg$?x = FF) = (?x = TT)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_hole 2), template_var 0),
         template_hole 1),
       template_equation (template_var 0, template_hole 0))),
    ("Data_Bool.neg_eq_TT_iff", "(neg$?x = TT) = (?x = FF)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_hole 2), template_var 0),
         template_hole 1),
       template_equation (template_var 0, template_hole 0))),
    ("Data_Bool.neg_eq_simps", "neg$?x = \<bottom> ==> ?x = \<bottom>",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_hole 1),
            template_var 0),
          template_hole 0)],
       template_equation (template_var 0, template_hole 0))),
    ("Data_Bool.neg_eq_simps", "neg$?x = FF ==> ?x = TT",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_hole 2),
            template_var 0),
          template_hole 1)],
       template_equation (template_var 0, template_hole 0))),
    ("Data_Bool.neg_eq_simps", "neg$?x = TT ==> ?x = FF",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_hole 2),
            template_var 0),
          template_hole 1)],
       template_equation (template_var 0, template_hole 0))),
    ("Data_Bool.neg_eq", "(neg$?x = neg$?y) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 1),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Data_Bool.andalso_eq_TT_iff",
     "((?x andalso ?y) = TT) = (?x = TT & ?y = TT)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 1)),
           template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_hole 1))
           ))),
    ("Data_Bool.orelse_eq_FF_iff",
     "((?x orelse ?y) = FF) = (?x = FF & ?y = FF)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 1)),
           template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_hole 1))
           ))),
    ("Data_Bool.neg_andalso",
     "neg$(?x andalso ?y) = (neg$?x orelse neg$?y)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 2, template_hole 0),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 1))),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_var 0)))),
    ("Data_Bool.neg_orelse", "neg$(?x orelse ?y) = (neg$?x andalso neg$?y)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 2, template_hole 0),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 1))),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_var 0)))),
    ("Data_Bool.andalso_eq_bottom_iff",
     "((?x andalso ?y) = \<bottom>) =
      (?x = \<bottom> | ?x = TT & ?y = \<bottom>)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_var 1)),
           template_var 0),
         template_hole 3),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 7, template_var 1),
                 template_hole 3)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 7, template_var 1),
                   template_hole 0)),
               template_app
                (template_app (template_hole 7, template_var 0),
                 template_hole 3)))
           ))),
    ("Data_Bool.andalso_eq_FF_iff",
     "((?x andalso ?y) = FF) = (?x = FF | ?x = TT & ?y = FF)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_var 1)),
           template_var 0),
         template_hole 3),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 7, template_var 1),
                 template_hole 3)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 7, template_var 1),
                   template_hole 0)),
               template_app
                (template_app (template_hole 7, template_var 0),
                 template_hole 3)))
           ))),
    ("Data_Bool.andalso_assoc",
     "((?x andalso ?y) andalso ?z) = (?x andalso ?y andalso ?z)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 2)),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_var 0)))),
    ("Data_Bool.orelse_assoc",
     "((?x orelse ?y) orelse ?z) = (?x orelse ?y orelse ?z)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 2)),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_var 0)))),
    ("Data_Bool.eq_eqI",
     "[| ?x = \<bottom> ==> ?y = \<bottom>;
         ?y = \<bottom> ==> ?x = \<bottom>; ?x = TT ==> ?y = TT;
         ?y = TT ==> ?x = TT |]
      ==> ?x = ?y",
     template_implication
      ([template_implication
         ([template_equation (template_var 1, template_hole 1)],
          template_equation (template_var 0, template_hole 1)),
        template_implication
         ([template_equation (template_var 0, template_hole 1)],
          template_equation (template_var 1, template_hole 1)),
        template_implication
         ([template_equation (template_var 1, template_hole 0)],
          template_equation (template_var 0, template_hole 0)),
        template_implication
         ([template_equation (template_var 0, template_hole 0)],
          template_equation (template_var 1, template_hole 0))],
       template_equation (template_var 1, template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Data_BoolTemplates"
### 0.400s elapsed time, 0.511s cpu time, 0.000s GC time
val it = (): unit
