   [("Pairing_Heap_Tree.mset_link", "mset_tree (link ?t) = mset_tree ?t",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Pairing_Heap_Tree.mset_pass\<^sub>1",
     "mset_tree (pass\<^sub>1 ?h) = mset_tree ?h",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Pairing_Heap_Tree.mset_pass\<^sub>2",
     "mset_tree (pass\<^sub>2 ?h) = mset_tree ?h",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Pairing_Heap_Tree.is_root_del_min",
     "is_root ?h ==> is_root (del_min ?h)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Pairing_Heap_Tree.pheap_pass1",
     "pheap ?h ==> pheap (pass\<^sub>1 ?h)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Pairing_Heap_Tree.pheap_pass2",
     "pheap ?h ==> pheap (pass\<^sub>2 ?h)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Pairing_Heap_Tree.is_root_insert",
     "is_root ?h ==> is_root (Pairing_Heap_Tree.insert ?x ?h)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Pairing_Heap_Tree.get_min_in",
     "?h ~= \<langle>\<rangle> ==> get_min ?h : set_tree ?h",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Pairing_Heap_Tree.pheap_del_min",
     "[| is_root ?h; pheap ?h |] ==> pheap (del_min ?h)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Pairing_Heap_Tree.pheap_insert",
     "[| is_root ?h; pheap ?h |]
      ==> pheap (Pairing_Heap_Tree.insert ?x ?h)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Pairing_Heap_Tree.is_root_merge",
     "[| is_root ?h1.0; is_root ?h2.0 |] ==> is_root (merge ?h1.0 ?h2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Pairing_Heap_Tree.pheap_link",
     "[| ?t ~= \<langle>\<rangle>; pheap ?t |] ==> pheap (link ?t)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 2)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Pairing_Heap_Tree.pass\<^sub>2_struct",
     "EX l a.
         pass\<^sub>2 \<langle>?hs1.0, ?x, ?hs\<rangle> =
         \<langle>l, a, \<langle>\<rangle>\<rangle>",
     template_predicate (template_app (template_hole 5, t_empty))),
    ("Pairing_Heap_Tree.pass\<^sub>1_struct",
     "EX l a r.
         pass\<^sub>1 \<langle>?hs1.0, ?x, ?hs\<rangle> =
         \<langle>l, a, r\<rangle>",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("Pairing_Heap_Tree.link_struct",
     "EX l a.
         link \<langle>?hsx, ?x, \<langle>?hsy, ?y, ?hs\<rangle>\<rangle> =
         \<langle>l, a, ?hs\<rangle>",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("Pairing_Heap_Tree.mset_merge",
     "[| is_root ?h1.0; is_root ?h2.0 |]
      ==> mset_tree (merge ?h1.0 ?h2.0) =
          mset_tree ?h1.0 + mset_tree ?h2.0",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Pairing_Heap_Tree.get_min_min",
     "[| is_root ?h; pheap ?h; ?x : set_tree ?h |] ==> get_min ?h <= ?x",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_var 1))
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_var 0))),
    ("Pairing_Heap_Tree.pheap_merge",
     "[| is_root ?h1.0; is_root ?h2.0; pheap ?h1.0; pheap ?h2.0 |]
      ==> pheap (merge ?h1.0 ?h2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Pairing_Heap_Tree.mset_del_min",
     "[| is_root ?h; ?t ~= \<langle>\<rangle> |]
      ==> mset_tree (del_min ?h) = mset_tree ?h - {#get_min ?h#}",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_equation
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 5, template_var 1)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_hole 0)))))]
