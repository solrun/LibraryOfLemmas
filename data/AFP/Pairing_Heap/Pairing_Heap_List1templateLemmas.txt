   [("Pairing_Heap_List1.pass12_merge_pairs",
     "pass\<^sub>2 (pass\<^sub>1 ?hs) = merge_pairs ?hs",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Pairing_Heap_List1.pheap_del_min", "pheap ?h ==> pheap (del_min ?h)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Pairing_Heap_List1.mset_heap_empty_iff",
     "(mset_heap ?h = {#}) = (?h = Empty)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Pairing_Heap_List1.pheap_insert",
     "pheap ?h ==> pheap (Pairing_Heap_List1.insert ?x ?h)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Pairing_Heap_List1.mset_merge_pairs",
     "mset_heap (merge_pairs ?hs) =
      \<Sum>\<^sub># (image_mset mset_heap (mset ?hs))",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 4),
           template_app (template_hole 0, template_var 0))))),
    ("Pairing_Heap_List1.mset_merge",
     "mset_heap (merge ?h1.0 ?h2.0) = mset_heap ?h1.0 + mset_heap ?h2.0",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Pairing_Heap_List1.mset_insert",
     "mset_heap (Pairing_Heap_List1.insert ?a ?h) = {#?a#} + mset_heap ?h",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_app (template_hole 4, template_var 0)))),
    ("Pairing_Heap_List1.pheap_merge_pairs",
     "ALL h:set ?hs. pheap h ==> pheap (merge_pairs ?hs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Pairing_Heap_List1.get_min_in",
     "?h ~= Empty ==> get_min ?h :# mset_heap ?h",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Pairing_Heap_List1.pheap_merge",
     "[| pheap ?h1.0; pheap ?h2.0 |] ==> pheap (merge ?h1.0 ?h2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Pairing_Heap_List1.mset_del_min",
     "?h ~= Empty ==>
      mset_heap (del_min ?h) = mset_heap ?h - {#get_min ?h#}",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_equation
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 5, template_var 0)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_hole 0))))),
    ("Pairing_Heap_List1.get_min",
     "[| pheap ?h; ?h ~= Empty |] ==> get_min ?h = Min_mset (mset_heap ?h)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("Pairing_Heap_List1.get_min_min",
     "[| ?h ~= Empty; pheap ?h; ?x :# mset_heap ?h |] ==> get_min ?h <= ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 6)),
        template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)))
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_var 0)))]
