Loading theory "Draft.JHelper" (required by "Draft.Ribbons_StratifiedTemplates" via "Draft.Ribbons_Stratified" via "Draft.Ribbons_Interfaces" via "Draft.Proofchain")
Loading theory "Draft.Ribbons_Basic" (required by "Draft.Ribbons_StratifiedTemplates" via "Draft.Ribbons_Stratified" via "Draft.Ribbons_Interfaces")
Loading theory "Draft.Templates" (required by "Draft.Ribbons_StratifiedTemplates" via "Draft.ExtrEqs")
### theory "Draft.JHelper"
### 0.051s elapsed time, 0.189s cpu time, 0.000s GC time
Loading theory "Draft.Proofchain" (required by "Draft.Ribbons_StratifiedTemplates" via "Draft.Ribbons_Stratified" via "Draft.Ribbons_Interfaces")
Proofs for inductive predicate(s) "prov_triple"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.068s elapsed time, 0.236s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Ribbons_StratifiedTemplates")
  Proving monotonicity ...
### theory "Draft.Ribbons_Basic"
### 0.116s elapsed time, 0.371s cpu time, 0.026s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.531s elapsed time, 1.124s cpu time, 0.100s GC time
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Missing patterns in function definition:
### !!v b. nthtriple \<lbrace> v \<rbrace> b = undefined
### !!va v. nthtriple \<lbrace> va \<rbrace> (Suc v) = undefined
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Proofchain"
### 0.993s elapsed time, 1.676s cpu time, 0.156s GC time
Loading theory "Draft.Ribbons_Interfaces" (required by "Draft.Ribbons_StratifiedTemplates" via "Draft.Ribbons_Stratified")
Proofs for inductive predicate(s) "equiv_int"
  Proving monotonicity ...
"\<Otimes>P|\<in>|Ps. f"
  :: "interface"
"iter_hcomp Ps f"
  :: "interface"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Ribbons_Interfaces"
### 0.797s elapsed time, 0.908s cpu time, 0.138s GC time
Loading theory "Draft.Ribbons_Stratified" (required by "Draft.Ribbons_StratifiedTemplates")
Found termination order: "case_sum size size <*mlex*> {}"
Found termination order: "case_sum size size <*mlex*> {}"
Proofs for inductive predicate(s) "prov_sdia", "prov_row", "prov_cell"
  Proving monotonicity ...
### theory "Draft.Ribbons_Stratified"
### 1.715s elapsed time, 2.058s cpu time, 0.480s GC time
Loading theory "Draft.Ribbons_StratifiedTemplates"
val templateLemmas =
   [("Ribbons_Stratified.wr_sdia_is_wr_com",
     "wr_cell ?\<gamma> = wr_com (com_cell ?\<gamma>)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Ribbons_Stratified.wr_sdia_is_wr_com",
     "wr_sdia ?D = wr_com (com_sdia ?D)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Ribbons_Stratified.wr_sdia_is_wr_com",
     "wr_cell (fst ?\<rho>) = wr_com (com_cell (fst ?\<rho>))",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_hole 0,
           template_app (template_hole 2, template_var 0))))),
    ("Ribbons_Stratified.soundness_strat",
     "prov_sdia ?D ?P ?Q ==> prov_triple (asn ?P, com_sdia ?D, asn ?Q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)),
                 template_app (template_hole 2, template_var 0))))
           ))),
    ("Ribbons_Stratified.wr_sdia_is_wr_com",
     "(UN \<rho>:set ?\<rho>s. wr_cell (fst \<rho>)) =
      wr_com
       (foldr (;;) (map (%(\<gamma>, F). com_cell \<gamma>) ?\<rho>s)
         Skip)",
     template_equation
      (template_app
        (template_hole 11,
         template_app
          (template_app (template_hole 10, t_empty),
           template_app (template_hole 7, template_var 0))),
       template_app
        (template_hole 6,
         template_app
          (template_app
            (template_app (template_hole 5, template_hole 4),
             template_app
              (template_app
                (template_hole 3, template_app (template_hole 2, t_empty)),
               template_var 0)),
           template_hole 0)))),
    ("Ribbons_Stratified.soundness_strat_helper",
     "(prov_sdia ?D ?P ?Q --> prov_triple (asn ?P, com_sdia ?D, asn ?Q)) &
      (prov_row ?\<rho> ?P ?Q -->
       prov_triple (asn ?P, com_cell (fst ?\<rho>), asn ?Q)) &
      (prov_cell ?\<gamma> ?P ?Q -->
       prov_triple (asn ?P, com_cell ?\<gamma>, asn ?Q))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_app (template_hole 9, template_var 4),
                     template_var 3),
                   template_var 2)),
               template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_var 3)),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app (template_hole 4, template_var 4)),
                     template_app (template_hole 6, template_var 2)))))),
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app
                      (template_app (template_hole 3, template_var 1),
                       template_var 3),
                     template_var 2)),
                 template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app (template_hole 6, template_var 3)),
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_hole 2,
                           template_app (template_hole 1, template_var 1))),
                       template_app (template_hole 6, template_var 2)))))),
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 3),
                   template_var 2)),
               template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_var 3)),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app (template_hole 2, template_var 0)),
                     template_app (template_hole 6, template_var 2)))))))
         ))]:
   (string * thm * template) list
### theory "Draft.Ribbons_StratifiedTemplates"
### 0.381s elapsed time, 0.529s cpu time, 0.066s GC time
val it = (): unit
