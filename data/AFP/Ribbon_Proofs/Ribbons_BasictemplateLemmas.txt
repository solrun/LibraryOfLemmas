   [("Ribbons_Basic.skip_seq", "Skip ;; ?c = ?c",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Ribbons_Basic.seq_skip", "?c ;; Skip = ?c",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Ribbons_Basic.emp_star", "Emp \<star> ?p = ?p",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Ribbons_Basic.star_emp", "?p \<star> Emp = ?p",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Ribbons_Basic.rd_com_loop", "rd_com (Loop ?c) = rd_com ?c",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Ribbons_Basic.wr_com_loop", "wr_com (Loop ?c) = wr_com ?c",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Ribbons_Basic.rd_exists", "rd_ass (Exists ?x ?p) = rd_ass ?p",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Ribbons_Basic.star_comm", "?p \<star> ?q = ?q \<star> ?p",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Ribbons_Basic.rd_star",
     "rd_ass (?p \<star> ?q) = rd_ass ?p Un rd_ass ?q",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Ribbons_Basic.rd_com_choose",
     "rd_com (Choose ?c1.0 ?c2.0) = rd_com ?c1.0 Un rd_com ?c2.0",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Ribbons_Basic.rd_com_seq",
     "rd_com (?c1.0 ;; ?c2.0) = rd_com ?c1.0 Un rd_com ?c2.0",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Ribbons_Basic.wr_com_choose",
     "wr_com (Choose ?c1.0 ?c2.0) = wr_com ?c1.0 Un wr_com ?c2.0",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Ribbons_Basic.wr_com_seq",
     "wr_com (?c1.0 ;; ?c2.0) = wr_com ?c1.0 Un wr_com ?c2.0",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Ribbons_Basic.seq_assoc",
     "?c1.0 ;; ?c2.0 ;; ?c3.0 = (?c1.0 ;; ?c2.0) ;; ?c3.0",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Ribbons_Basic.star_rot",
     "?q \<star> ?p \<star> ?r = ?p \<star> ?q \<star> ?r",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Ribbons_Basic.star_assoc",
     "(?p \<star> ?q) \<star> ?r = ?p \<star> ?q \<star> ?r",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Ribbons_Basic.seq_lemma",
     "[| prov_triple (?p1.0, ?c1.0, ?q1.0);
         prov_triple (?p2.0, ?c2.0, ?q2.0); ?q1.0 = ?p2.0 |]
      ==> prov_triple (?p1.0, ?c1.0 ;; ?c2.0, ?q2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 5),
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 2),
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)))
            ),
        template_equation (template_var 3, template_var 2)],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 5),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 1)),
                 template_var 0)))
           ))),
    ("Ribbons_Basic.loop_lemma",
     "[| prov_triple (?p1.0, ?c, ?q1.0); ?p = ?p1.0; ?p1.0 = ?q1.0;
         ?q1.0 = ?q |]
      ==> prov_triple (?p, Loop ?c, ?q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 4),
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)))
            ),
        template_equation (template_var 1, template_var 4),
        template_equation (template_var 4, template_var 2),
        template_equation (template_var 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 0, template_var 3)),
                 template_var 0)))
           ))),
    ("Ribbons_Basic.choice_lemma",
     "[| prov_triple (?p1.0, ?c1.0, ?q1.0);
         prov_triple (?p2.0, ?c2.0, ?q2.0); ?p = ?p1.0; ?p1.0 = ?p2.0;
         ?q = ?q1.0; ?q1.0 = ?q2.0 |]
      ==> prov_triple (?p, Choose ?c1.0 ?c2.0, ?q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 7),
                template_app
                 (template_app (template_hole 2, template_var 6),
                  template_var 5)))
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 4),
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)))
            ),
        template_equation (template_var 1, template_var 7),
        template_equation (template_var 7, template_var 4),
        template_equation (template_var 0, template_var 5),
        template_equation (template_var 5, template_var 2)],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 0, template_var 6),
                     template_var 3)),
                 template_var 0)))
           )))]
