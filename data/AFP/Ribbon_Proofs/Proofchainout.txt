Loading theory "Draft.JHelper" (required by "Draft.ProofchainTemplates" via "Draft.Proofchain")
Loading theory "Draft.Templates" (required by "Draft.ProofchainTemplates" via "Draft.ExtrEqs")
### theory "Draft.JHelper"
### 0.050s elapsed time, 0.138s cpu time, 0.000s GC time
Loading theory "Draft.Proofchain" (required by "Draft.ProofchainTemplates")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.076s elapsed time, 0.188s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ProofchainTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.583s elapsed time, 1.195s cpu time, 0.107s GC time
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Missing patterns in function definition:
### !!v b. nthtriple \<lbrace> v \<rbrace> b = undefined
### !!va v. nthtriple \<lbrace> va \<rbrace> (Suc v) = undefined
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Proofchain"
### 1.075s elapsed time, 1.767s cpu time, 0.166s GC time
Loading theory "Draft.ProofchainTemplates"
val templateLemmas =
   [("Proofchain.len_comlist_chainlen",
     "length (comlist ?\<Pi>) = chainlen ?\<Pi>",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Proofchain.post_snoc", "post (cSnoc ?\<Pi> ?x ?P) = ?P",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_var 0)),
    ("Proofchain.pre_snoc", "pre (cSnoc ?\<Pi> ?x ?P) = pre ?\<Pi>",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 2))),
    ("Proofchain.chainmap_preserves_length",
     "chainlen (chainmap ?f ?g ?\<Pi>) = chainlen ?\<Pi>",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Proofchain.post_chainmap",
     "post (chainmap ?f ?g ?\<Pi>) = ?f (post ?\<Pi>)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_var 2, template_app (template_hole 0, template_var 0)))),
    ("Proofchain.pre_chainmap",
     "pre (chainmap ?f ?g ?\<Pi>) = ?f (pre ?\<Pi>)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_var 2, template_app (template_hole 0, template_var 0)))),
    ("Proofchain.len_snoc",
     "chainlen (cSnoc ?\<Pi> ?x ?P) = 1 + chainlen ?\<Pi>",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_app (template_hole 3, template_var 2)))),
    ("Proofchain.chain_all_mono",
     "?x <= ?y ==> chain_all ?x <= chain_all ?y",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Proofchain.comlist_snoc",
     "comlist (cSnoc ?\<Pi> ?x ?p) = comlist ?\<Pi> @ [?x]",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 4, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("Proofchain.chain_all_nthtriple",
     "chain_all ?\<phi> ?\<Pi> =
      (ALL i<chainlen ?\<Pi>. ?\<phi> (nthtriple ?\<Pi> i))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app (template_hole 4, t_empty))),
    ("Proofchain.snds_of_triples_form_comlist",
     "?i < chainlen ?\<Pi> ==>
      snd3 (nthtriple ?\<Pi> ?i) = comlist ?\<Pi> ! ?i",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 1)))),
    ("Proofchain.nthtriple_chainmap",
     "?i < chainlen ?\<Pi> ==>
      nthtriple (chainmap ?f ?g ?\<Pi>) ?i =
      (?f (fst3 (nthtriple ?\<Pi> ?i)), ?g (snd3 (nthtriple ?\<Pi> ?i)),
       ?f (thd3 (nthtriple ?\<Pi> ?i)))",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 9, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_app (template_hole 6, template_var 1),
                 template_var 0),
               template_var 2)),
           template_var 3),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_var 1,
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 3)))),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_var 0,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 3)))),
             template_app
              (template_var 1,
               template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 3))))))))]:
   (string * thm * template) list
### theory "Draft.ProofchainTemplates"
### 0.321s elapsed time, 0.433s cpu time, 0.000s GC time
val it = (): unit
