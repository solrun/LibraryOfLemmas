Loading theory "Draft.JHelper" (required by "Draft.Ribbons_GraphicalTemplates" via "Draft.Ribbons_Graphical" via "Draft.Ribbons_Interfaces" via "Draft.Proofchain")
Loading theory "Draft.Ribbons_Basic" (required by "Draft.Ribbons_GraphicalTemplates" via "Draft.Ribbons_Graphical" via "Draft.Ribbons_Interfaces")
Loading theory "Draft.Templates" (required by "Draft.Ribbons_GraphicalTemplates" via "Draft.ExtrEqs")
### theory "Draft.JHelper"
### 0.051s elapsed time, 0.181s cpu time, 0.000s GC time
Loading theory "Draft.Proofchain" (required by "Draft.Ribbons_GraphicalTemplates" via "Draft.Ribbons_Graphical" via "Draft.Ribbons_Interfaces")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.084s elapsed time, 0.278s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Ribbons_GraphicalTemplates")
Proofs for inductive predicate(s) "prov_triple"
  Proving monotonicity ...
### theory "Draft.Ribbons_Basic"
### 0.140s elapsed time, 0.432s cpu time, 0.031s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.581s elapsed time, 1.233s cpu time, 0.107s GC time
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Missing patterns in function definition:
### !!v b. nthtriple \<lbrace> v \<rbrace> b = undefined
### !!va v. nthtriple \<lbrace> va \<rbrace> (Suc v) = undefined
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Proofchain"
### 1.069s elapsed time, 1.833s cpu time, 0.154s GC time
Loading theory "Draft.Ribbons_Interfaces" (required by "Draft.Ribbons_GraphicalTemplates" via "Draft.Ribbons_Graphical")
Proofs for inductive predicate(s) "equiv_int"
  Proving monotonicity ...
"\<Otimes>P|\<in>|Ps. f"
  :: "interface"
"iter_hcomp Ps f"
  :: "interface"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Ribbons_Interfaces"
### 0.839s elapsed time, 0.936s cpu time, 0.119s GC time
Loading theory "Draft.Ribbons_Graphical" (required by "Draft.Ribbons_GraphicalTemplates")
Found termination order: "{}"
"this is^V = (a test)^V"
  :: "bool"
Found termination order: "{}"
Found termination order: "{}"
Proofs for inductive predicate(s) "wf_ass", "wf_com", "wf_dia"
  Proving monotonicity ...
consts
  top_ass :: "assertion_gadget => interface"
  top_dia :: "diagram => interface"
consts
  bot_ass :: "assertion_gadget => interface"
  bot_dia :: "diagram => interface"
Proofs for inductive predicate(s) "prov_dia", "prov_com", "prov_ass"
  Proving monotonicity ...
Proofs for inductive predicate(s) "coms_dia", "coms_ass", "coms_com"
  Proving monotonicity ...
### theory "Draft.Ribbons_Graphical"
### 1.699s elapsed time, 2.038s cpu time, 0.503s GC time
Loading theory "Draft.Ribbons_GraphicalTemplates"
val templateLemmas =
   [("Ribbons_Graphical.initials_in_vertices",
     "initials ?G |\<subseteq>| ?G^V",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Ribbons_Graphical.terminals_in_vertices",
     "terminals ?G |\<subseteq>| ?G^V",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Ribbons_Graphical.linearityD", "linearity ?E ==> distinct ?E",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Ribbons_Graphical.no_edges_imp_all_nodes_initial",
     "initials (Graph ?V ?\<Lambda> []) = ?V",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0)),
       template_var 1)),
    ("Ribbons_Graphical.no_edges_imp_all_nodes_terminal",
     "terminals (Graph ?V ?\<Lambda> []) = ?V",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0)),
       template_var 1)),
    ("Ribbons_Graphical.linsD", "?\<pi> : lins ?G ==> distinct ?\<pi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Ribbons_Graphical.wf_dia_inv",
     "wf_dia (Graph ?V ?\<Lambda> ?E) ==> acyclicity ?E",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Ribbons_Graphical.wf_dia_inv",
     "wf_dia (Graph ?V ?\<Lambda> ?E) ==> linearity ?E",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Ribbons_Graphical.skip_inv", "[| prov_ass (Rib ?p); ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app (template_hole 0, template_var 1))
            ),
        template_predicate (template_var 0)],
       template_predicate (template_var 0))),
    ("Ribbons_Graphical.wf_dia_inv",
     "wf_dia (Graph ?V ?\<Lambda> ?E) ==> ALL e:set ?E. wf_com (snd3 e)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             t_empty)
           ))),
    ("Ribbons_Graphical.wf_dia_inv",
     "wf_dia (Graph ?V ?\<Lambda> ?E) ==>
      ALL v:fset ?V. wf_ass (?\<Lambda> v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             t_empty)
           ))),
    ("Ribbons_Graphical.coms_skip_inv",
     "[| coms_ass (Rib ?p) ?c; ?c = Skip ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 1, template_hole 0)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Ribbons_Graphical.coms_basic_inv",
     "[| coms_com (Com ?c') ?c; ?c = ?c' ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 1, template_var 2)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Ribbons_Graphical.linsD",
     "?\<pi> : lins ?G ==> set ?\<pi> = fset ?G^V <+> set ?G^E",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app (template_hole 7, template_var 0))
            )],
       template_equation
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0))),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("Ribbons_Graphical.coms_exists_inv",
     "[| coms_ass (Exists_dia ?x ?G) ?c; coms_dia ?G ?c ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Ribbons_Graphical.wf_dia_inv",
     "wf_dia (Graph ?V ?\<Lambda> ?E) ==>
      ALL e:set ?E. fst3 e |\<union>| thd3 e |\<subseteq>| ?V",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)),
             t_empty)
           ))),
    ("Ribbons_Graphical.exists_inv",
     "[| prov_ass (Exists_dia ?x ?G);
         !!uu_ uv_. prov_dia ?G uu_ uv_ ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Ribbons_Graphical.basic_inv",
     "[| prov_com (Com ?c) ?P ?Q;
         prov_triple (asn ?P, ?c, asn ?Q) ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 2)),
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_app (template_hole 1, template_var 1))))
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Ribbons_Graphical.loop_inv",
     "[| prov_com (Loop_dia ?G) ?P ?Q;
         [| ?Q = ?P; prov_dia ?G ?P ?P |] ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 1, template_var 2)],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 2),
                   template_var 2)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Ribbons_Graphical.coms_loop_inv",
     "[| coms_com (Loop_dia ?G) ?c;
         !!c. [| ?c = Loop c; coms_dia ?G c |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Ribbons_Graphical.choice_inv",
     "[| prov_com (Choose_dia ?G ?H) ?P ?Q;
         [| prov_dia ?G ?P ?Q; prov_dia ?H ?P ?Q |] ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 2),
                 template_var 1)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 2),
                   template_var 1)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Ribbons_Graphical.coms_choice_inv",
     "[| coms_com (Choose_dia ?G ?H) ?c;
         !!c d.
            [| ?c = Choose c d; coms_dia ?G c; coms_dia ?H d |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Ribbons_Graphical.linearityD",
     "[| linearity ?E; ?e : set ?E; ?f : set ?E; ?e ~= ?f |]
      ==> fst3 ?e |\<inter>| fst3 ?f = {||} &
          thd3 ?e |\<inter>| thd3 ?f = {||}",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app (template_hole 8, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 0),
              template_app (template_hole 8, template_var 2))
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 1)),
                     template_app (template_hole 2, template_var 0))),
                 template_hole 1)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 0, template_var 1)),
                   template_app (template_hole 0, template_var 0))),
               template_hole 1))
           ))),
    ("Ribbons_Graphical.linearityD2",
     "linearity ?E ==>
      ALL e f.
         e : set ?E & f : set ?E & e ~= f -->
         fst3 e |\<inter>| fst3 f = {||} & thd3 e |\<inter>| thd3 f = {||}",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 0))],
       template_predicate (template_app (template_hole 11, t_empty)))),
    ("Ribbons_Graphical.linsD",
     "?\<pi> : lins ?G ==>
      ALL i j v e.
         i < length ?\<pi> &
         j < length ?\<pi> &
         ?\<pi> ! i = Inl v & ?\<pi> ! j = Inr e & v |\<in>| fst3 e -->
         i < j",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 1),
              template_app (template_hole 13, template_var 0))
            )],
       template_predicate (template_app (template_hole 12, t_empty)))),
    ("Ribbons_Graphical.linsD",
     "?\<pi> : lins ?G ==>
      ALL j k w e.
         j < length ?\<pi> &
         k < length ?\<pi> &
         ?\<pi> ! j = Inr e & ?\<pi> ! k = Inl w & w |\<in>| thd3 e -->
         j < k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 1),
              template_app (template_hole 13, template_var 0))
            )],
       template_predicate (template_app (template_hole 12, t_empty)))),
    ("Ribbons_Graphical.wf_dia_inv'",
     "[| wf_dia (Graph ?V ?\<Lambda> ?E);
         [| ALL e:set ?E. wf_com (snd3 e);
            ALL v:fset ?V. wf_ass (?\<Lambda> v); acyclicity ?E;
            linearity ?E;
            ALL e:set ?E.
               fst3 e |\<subseteq>| ?V & thd3 e |\<subseteq>| ?V |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 14,
              template_app
               (template_app
                 (template_app (template_hole 13, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_hole 12,
                   template_app (template_hole 11, template_var 1)),
                 t_empty)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app (template_hole 7, template_var 3)),
                   t_empty)
                 )],
            template_implication
             ([template_predicate
                (template_app (template_hole 5, template_var 1))],
              template_implication
               ([template_predicate
                  (template_app (template_hole 4, template_var 1))],
                template_implication
                 ([template_predicate
                    (
                       template_app
                        (template_app
                          (template_hole 12,
                           template_app (template_hole 11, template_var 1)),
                         t_empty)
                       )],
                  template_predicate (template_var 0))))))],
       template_predicate (template_var 0))),
    ("Ribbons_Graphical.coms_mono_helper",
     "(ALL i<length ?\<pi>.
          (case ?\<pi> ! i of Inl x => (?coms_ass o ?\<Lambda>) x
           | Inr x => (?coms_com o snd3) x)
           (?cs ! i)) =
      ((ALL i.
           i < length ?\<pi> & (EX v. ?\<pi> ! i = Inl v) -->
           ?coms_ass (?\<Lambda> (projl (?\<pi> ! i))) (?cs ! i)) &
       (ALL i.
           i < length ?\<pi> & (EX e. ?\<pi> ! i = Inr e) -->
           ?coms_com (snd3 (projr (?\<pi> ! i))) (?cs ! i)))",
     template_equation
      (template_app (template_hole 17, t_empty),
       template_app
        (template_app
          (template_hole 7, template_app (template_hole 17, t_empty)),
         template_app (template_hole 17, t_empty)))),
    ("Ribbons_Graphical.coms_main_inv",
     "[| coms_dia ?G ?c;
         !!\<pi> V \<Lambda> E cs.
            [| ?G = Graph V \<Lambda> E; ?c = foldr (;;) cs Skip;
               \<pi> : lins (Graph V \<Lambda> E); length cs = length \<pi>;
               ALL i<length \<pi>.
                  (case \<pi> ! i of Inl x => (coms_ass o \<Lambda>) x
                   | Inr x => (coms_com o snd3) x)
                   (cs ! i) |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 27, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 26, t_empty))],
       template_predicate (template_var 0))),
    ("Ribbons_Graphical.main_inv",
     "[| prov_dia (Graph ?V ?\<Lambda> ?E) ?P ?Q;
         [| ?P =
            (\<Otimes>v|\<in>|initials
                               (Graph ?V ?\<Lambda>
                                 ?E). top_ass (?\<Lambda> v));
            ?Q =
            (\<Otimes>v|\<in>|terminals
                               (Graph ?V ?\<Lambda>
                                 ?E). bot_ass (?\<Lambda> v));
            wf_dia (Graph ?V ?\<Lambda> ?E);
            !!v. v : fset ?V ==> prov_ass (?\<Lambda> v);
            !!e. e : set ?E ==>
                 prov_com (snd3 e)
                  (\<Otimes>v|\<in>|fst3 e. bot_ass (?\<Lambda> v))
                  (\<Otimes>v|\<in>|thd3 e. top_ass (?\<Lambda> v)) |]
         ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 19,
                  template_app
                   (template_app
                     (template_app (template_hole 18, template_var 5),
                      template_var 4),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 2,
             template_app
              (template_app
                (template_hole 16,
                 template_app
                  (template_hole 15,
                   template_app
                    (template_app
                      (template_app (template_hole 18, template_var 5),
                       template_var 4),
                     template_var 3))),
               t_empty))],
          template_implication
           ([template_equation
              (template_var 1,
               template_app
                (template_app
                  (template_hole 16,
                   template_app
                    (template_hole 13,
                     template_app
                      (template_app
                        (template_app (template_hole 18, template_var 5),
                         template_var 4),
                       template_var 3))),
                 t_empty))],
            template_implication
             ([template_predicate
                (
                   template_app
                    (template_hole 11,
                     template_app
                      (template_app
                        (template_app (template_hole 18, template_var 5),
                         template_var 4),
                       template_var 3))
                   )],
              template_implication
               ([template_predicate
                  (template_app (template_hole 10, t_empty))],
                template_implication
                 ([template_predicate
                    (template_app (template_hole 6, t_empty))],
                  template_predicate (template_var 0))))))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Ribbons_GraphicalTemplates"
### 0.408s elapsed time, 0.540s cpu time, 0.061s GC time
val it = (): unit
