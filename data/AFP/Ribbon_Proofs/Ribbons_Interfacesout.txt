Loading theory "Draft.Ribbons_Basic" (required by "Draft.Ribbons_InterfacesTemplates" via "Draft.Ribbons_Interfaces")
Loading theory "Draft.JHelper" (required by "Draft.Ribbons_InterfacesTemplates" via "Draft.Ribbons_Interfaces" via "Draft.Proofchain")
Loading theory "Draft.Templates" (required by "Draft.Ribbons_InterfacesTemplates" via "Draft.ExtrEqs")
### theory "Draft.JHelper"
### 0.057s elapsed time, 0.201s cpu time, 0.000s GC time
Loading theory "Draft.Proofchain" (required by "Draft.Ribbons_InterfacesTemplates" via "Draft.Ribbons_Interfaces")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.066s elapsed time, 0.229s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Ribbons_InterfacesTemplates")
Proofs for inductive predicate(s) "prov_triple"
  Proving monotonicity ...
### theory "Draft.Ribbons_Basic"
### 0.127s elapsed time, 0.402s cpu time, 0.028s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.537s elapsed time, 1.155s cpu time, 0.112s GC time
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Missing patterns in function definition:
### !!v b. nthtriple \<lbrace> v \<rbrace> b = undefined
### !!va v. nthtriple \<lbrace> va \<rbrace> (Suc v) = undefined
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Proofchain"
### 0.984s elapsed time, 1.675s cpu time, 0.170s GC time
Loading theory "Draft.Ribbons_Interfaces" (required by "Draft.Ribbons_InterfacesTemplates")
Proofs for inductive predicate(s) "equiv_int"
  Proving monotonicity ...
"\<Otimes>P|\<in>|Ps. f"
  :: "interface"
"iter_hcomp Ps f"
  :: "interface"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Ribbons_Interfaces"
### 0.787s elapsed time, 0.895s cpu time, 0.135s GC time
Loading theory "Draft.Ribbons_InterfacesTemplates"
val templateLemmas =
   [("Ribbons_Interfaces.asn_simps", "asn (Ribbon ?p) = ?p",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Ribbons_Interfaces.hcomp_emp", "(?P \<otimes> \<epsilon>) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Ribbons_Interfaces.emp_hcomp", "(\<epsilon> \<otimes> ?P) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Ribbons_Interfaces.rd_int_is_rd_ass", "rd_ass (asn ?P) = rd_int ?P",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Ribbons_Interfaces.hcomp_comm",
     "(?P \<otimes> ?Q) = (?Q \<otimes> ?P)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Ribbons_Interfaces.iter_hcomp_empty",
     "iter_hcomp {||} ?p = \<epsilon>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), t_empty),
       template_hole 0)),
    ("Ribbons_Interfaces.asn_simps",
     "asn (Exists_int ?x ?P) = Exists ?x (asn ?P)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Ribbons_Interfaces.asn_simps",
     "asn (?P \<otimes> ?Q) = asn ?P \<star> asn ?Q",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Ribbons_Interfaces.hcomp_assoc",
     "(?P \<otimes> (?Q \<otimes> ?R)) = ((?P \<otimes> ?Q) \<otimes> ?R)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Ribbons_Interfaces.equiv_int_cong_hcomp",
     "[| ?P \<simeq> ?Q; ?P' \<simeq> ?Q' |]
      ==> ?P \<otimes>\<^sub>c ?P' \<simeq> ?Q \<otimes>\<^sub>c ?Q'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Ribbons_Interfaces.iter_hcomp_insert",
     "?v |\<notin>| ?ws ==>
      iter_hcomp (finsert ?v ?ws) ?p = (?p ?v \<otimes> iter_hcomp ?ws ?p)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           t_empty),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_var 0, template_var 2)),
           template_app
            (template_app (template_hole 2, template_var 1), t_empty))))),
    ("Ribbons_Interfaces.iter_hcomp_cong",
     "ALL v:fset ?vs. ?\<phi> v = ?\<phi>' v ==>
      iter_hcomp ?vs ?\<phi> = iter_hcomp ?vs ?\<phi>'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 2)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), t_empty),
         template_app
          (template_app (template_hole 0, template_var 2), t_empty)))),
    ("Ribbons_Interfaces.iter_hcomp_union",
     "?vs |\<inter>| ?ws = {||} ==>
      iter_hcomp (?vs |\<union>| ?ws) ?p =
      (iter_hcomp ?vs ?p \<otimes> iter_hcomp ?ws ?p)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           t_empty),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 2), t_empty)),
           template_app
            (template_app (template_hole 2, template_var 1), t_empty))))),
    ("Ribbons_Interfaces.seq_fold",
     "[| length ?cs = chainlen ?\<Pi>; ?p1.0 = asn (pre ?\<Pi>);
         ?p2.0 = asn (post ?\<Pi>);
         !!i. i < chainlen ?\<Pi> ==>
              prov_triple
               (asn (fst3 (nthtriple ?\<Pi> i)), ?cs ! i,
                asn (thd3 (nthtriple ?\<Pi> i))) |]
      ==> prov_triple (?p1.0, foldr (;;) ?cs Skip, ?p2.0)",
     template_implication
      ([template_equation
         (template_app (template_hole 17, template_var 3),
          template_app (template_hole 16, template_var 2)),
        template_equation
         (template_var 1,
          template_app
           (template_hole 14,
            template_app (template_hole 13, template_var 2))),
        template_equation
         (template_var 0,
          template_app
           (template_hole 14,
            template_app (template_hole 12, template_var 2))),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_var 1),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_app (template_hole 2, template_hole 1),
                       template_var 3),
                     template_hole 0)),
                 template_var 0)))
           )))]:
   (string * thm * template) list
### theory "Draft.Ribbons_InterfacesTemplates"
### 0.343s elapsed time, 0.450s cpu time, 0.000s GC time
val it = (): unit
