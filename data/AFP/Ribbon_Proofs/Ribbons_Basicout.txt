Loading theory "Draft.Ribbons_Basic" (required by "Draft.Ribbons_BasicTemplates")
Loading theory "Draft.Templates" (required by "Draft.Ribbons_BasicTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.062s elapsed time, 0.159s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Ribbons_BasicTemplates")
Proofs for inductive predicate(s) "prov_triple"
  Proving monotonicity ...
### theory "Draft.Ribbons_Basic"
### 0.110s elapsed time, 0.256s cpu time, 0.000s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.460s elapsed time, 0.532s cpu time, 0.028s GC time
Loading theory "Draft.Ribbons_BasicTemplates"
val templateLemmas =
   [("Ribbons_Basic.skip_seq", "Skip ;; ?c = ?c",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Ribbons_Basic.seq_skip", "?c ;; Skip = ?c",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Ribbons_Basic.emp_star", "Emp \<star> ?p = ?p",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Ribbons_Basic.star_emp", "?p \<star> Emp = ?p",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Ribbons_Basic.rd_com_loop", "rd_com (Loop ?c) = rd_com ?c",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Ribbons_Basic.wr_com_loop", "wr_com (Loop ?c) = wr_com ?c",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Ribbons_Basic.rd_exists", "rd_ass (Exists ?x ?p) = rd_ass ?p",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Ribbons_Basic.star_comm", "?p \<star> ?q = ?q \<star> ?p",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Ribbons_Basic.rd_star",
     "rd_ass (?p \<star> ?q) = rd_ass ?p Un rd_ass ?q",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Ribbons_Basic.rd_com_choose",
     "rd_com (Choose ?c1.0 ?c2.0) = rd_com ?c1.0 Un rd_com ?c2.0",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Ribbons_Basic.rd_com_seq",
     "rd_com (?c1.0 ;; ?c2.0) = rd_com ?c1.0 Un rd_com ?c2.0",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Ribbons_Basic.wr_com_choose",
     "wr_com (Choose ?c1.0 ?c2.0) = wr_com ?c1.0 Un wr_com ?c2.0",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Ribbons_Basic.wr_com_seq",
     "wr_com (?c1.0 ;; ?c2.0) = wr_com ?c1.0 Un wr_com ?c2.0",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Ribbons_Basic.seq_assoc",
     "?c1.0 ;; ?c2.0 ;; ?c3.0 = (?c1.0 ;; ?c2.0) ;; ?c3.0",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Ribbons_Basic.star_rot",
     "?q \<star> ?p \<star> ?r = ?p \<star> ?q \<star> ?r",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Ribbons_Basic.star_assoc",
     "(?p \<star> ?q) \<star> ?r = ?p \<star> ?q \<star> ?r",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Ribbons_Basic.seq_lemma",
     "[| prov_triple (?p1.0, ?c1.0, ?q1.0);
         prov_triple (?p2.0, ?c2.0, ?q2.0); ?q1.0 = ?p2.0 |]
      ==> prov_triple (?p1.0, ?c1.0 ;; ?c2.0, ?q2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 5),
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 2),
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)))
            ),
        template_equation (template_var 3, template_var 2)],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 5),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 1)),
                 template_var 0)))
           ))),
    ("Ribbons_Basic.loop_lemma",
     "[| prov_triple (?p1.0, ?c, ?q1.0); ?p = ?p1.0; ?p1.0 = ?q1.0;
         ?q1.0 = ?q |]
      ==> prov_triple (?p, Loop ?c, ?q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 4),
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)))
            ),
        template_equation (template_var 1, template_var 4),
        template_equation (template_var 4, template_var 2),
        template_equation (template_var 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 0, template_var 3)),
                 template_var 0)))
           ))),
    ("Ribbons_Basic.choice_lemma",
     "[| prov_triple (?p1.0, ?c1.0, ?q1.0);
         prov_triple (?p2.0, ?c2.0, ?q2.0); ?p = ?p1.0; ?p1.0 = ?p2.0;
         ?q = ?q1.0; ?q1.0 = ?q2.0 |]
      ==> prov_triple (?p, Choose ?c1.0 ?c2.0, ?q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 7),
                template_app
                 (template_app (template_hole 2, template_var 6),
                  template_var 5)))
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 4),
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)))
            ),
        template_equation (template_var 1, template_var 7),
        template_equation (template_var 7, template_var 4),
        template_equation (template_var 0, template_var 5),
        template_equation (template_var 5, template_var 2)],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 0, template_var 6),
                     template_var 3)),
                 template_var 0)))
           )))]:
   (string * thm * template) list
### theory "Draft.Ribbons_BasicTemplates"
### 0.346s elapsed time, 0.490s cpu time, 0.053s GC time
val it = (): unit
