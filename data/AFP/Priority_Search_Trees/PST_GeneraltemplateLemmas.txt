   [("PST_General.is_min2_Empty", "~ is_min2 ?x {}",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)
             )
         )),
    ("PST_General.is_min2_singleton", "is_min2 ?a {?b} = (?b = ?a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_hole 1))
            )],
       template_equation (template_var 0, template_var 1))),
    ("PST_General.invpst_mkNode",
     "invpst (mkNode ?c ?l ?a ?r) = (invpst ?l & invpst ?r)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 2)),
         template_app (template_hole 2, template_var 0)))),
    ("PST_General.is_min2_min2_insI",
     "is_min2 ?y ?ys ==> is_min2 (min2 ?x ?y) (insert ?x ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("PST_General.pst_getmin_ismin",
     "[| invpst ?t; ?t ~= \<langle>\<rangle> |]
      ==> is_min2 (pst_getmin ?t) (Tree2.set_tree ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("PST_General.is_min2_mergeI",
     "[| is_min2 ?x ?xs; is_min2 ?y ?ys |]
      ==> is_min2 (min2 ?x ?y) (?xs Un ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("PST_General.is_min2_insert",
     "is_min2 ?x (insert ?y ?ys) =
      (?y = ?x & (ALL z:?ys. snd ?x <= snd z) |
       snd ?x <= snd ?y & is_min2 ?x ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   t_empty))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 2)),
                   template_app (template_hole 0, template_var 1))),
               template_app
                (template_app (template_hole 7, template_var 2),
                 template_var 0)))
           ))),
    ("PST_General.is_min2_union",
     "is_min2 ?x (?ys Un ?zs) =
      (is_min2 ?x ?ys & (ALL z:?zs. snd ?x <= snd z) |
       (ALL y:?ys. snd ?x <= snd y) & is_min2 ?x ?zs)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 6, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 2, template_var 0), t_empty))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1), t_empty)),
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 0)))))]
