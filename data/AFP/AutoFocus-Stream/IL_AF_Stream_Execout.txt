Loading theory "HOL-Library.Function_Algebras" (required by "Draft.IL_AF_Stream_ExecMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.IL_AF_Stream_ExecMoreTemplates" via "Draft.IL_AF_Stream_Exec" via "Draft.IL_AF_Stream" via "Nat-Interval-Logic.IL_TemporalOperators" via "Nat-Interval-Logic.IL_IntervalOperators" via "Nat-Interval-Logic.IL_Interval" via "List-Infinite.InfiniteSet2" via "List-Infinite.SetInterval2")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.IL_AF_Stream_ExecMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.IL_AF_Stream_ExecMoreTemplates" via "Draft.IL_AF_Stream_Exec" via "Draft.IL_AF_Stream" via "Nat-Interval-Logic.IL_TemporalOperators" via "Nat-Interval-Logic.IL_IntervalOperators" via "Nat-Interval-Logic.IL_Interval" via "List-Infinite.InfiniteSet2" via "List-Infinite.SetInterval2" via "List-Infinite.Util_NatInf" via "HOL-Library.Extended_Nat" via "HOL-Library.Countable")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.113s elapsed time, 0.462s cpu time, 0.042s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.IL_AF_Stream_ExecMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
consts
  enumerate :: "'a set => nat => 'a"
### theory "HOL-Library.Nat_Bijection"
### 0.338s elapsed time, 1.348s cpu time, 0.118s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.IL_AF_Stream_ExecMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Infinite_Set"
### 0.340s elapsed time, 1.355s cpu time, 0.118s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.IL_AF_Stream_ExecMoreTemplates" via "Draft.IL_AF_Stream_Exec" via "Draft.AF_Stream_Exec" via "List-Infinite.ListInf_Prefix")
### theory "HOL-Library.Set_Algebras"
### 0.245s elapsed time, 0.974s cpu time, 0.076s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.IL_AF_Stream_ExecMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.443s elapsed time, 1.755s cpu time, 0.217s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.IL_AF_Stream_ExecMoreTemplates" via "Draft.IL_AF_Stream_Exec" via "Draft.IL_AF_Stream" via "Nat-Interval-Logic.IL_TemporalOperators" via "Nat-Interval-Logic.IL_IntervalOperators" via "Nat-Interval-Logic.IL_Interval" via "List-Infinite.InfiniteSet2" via "List-Infinite.SetInterval2" via "List-Infinite.Util_NatInf" via "HOL-Library.Extended_Nat")
consts
  prefixes :: "'a list => 'a list list"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### Additional type variable(s) in locale specification "countable": 'a
consts
  snth :: "'a stream => nat => 'a"
consts
  left :: "'a tree => 'a tree"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  right :: "'a tree => 'a tree"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Proofs for inductive predicate(s) "finite_item"
consts
  suffixes :: "'a list => 'a list list"
  Proving monotonicity ...
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "list_emb"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
### theory "HOL-Library.Stream"
### 1.168s elapsed time, 4.424s cpu time, 0.909s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.IL_AF_Stream_ExecMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.412s elapsed time, 5.391s cpu time, 0.958s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.IL_AF_Stream_ExecMoreTemplates" via "Draft.IL_AF_Stream_Exec" via "Draft.IL_AF_Stream" via "Nat-Interval-Logic.IL_TemporalOperators" via "Nat-Interval-Logic.IL_IntervalOperators" via "Nat-Interval-Logic.IL_Interval" via "List-Infinite.InfiniteSet2" via "List-Infinite.SetInterval2" via "List-Infinite.Util_NatInf" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices")
Found termination order: "size <*mlex*> {}"
consts
  sublists :: "'a list => 'a list list"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "HOL-Library.Sublist"
### 1.679s elapsed time, 6.432s cpu time, 1.118s GC time
Loading theory "List-Infinite.Util_MinMax" (required by "Draft.IL_AF_Stream_ExecMoreTemplates" via "Draft.IL_AF_Stream_Exec" via "Draft.IL_AF_Stream" via "Nat-Interval-Logic.IL_TemporalOperators" via "Nat-Interval-Logic.IL_IntervalOperators" via "Nat-Interval-Logic.IL_Interval" via "List-Infinite.InfiniteSet2" via "List-Infinite.SetInterval2")
Found termination order: "size <*mlex*> {}"
### theory "List-Infinite.Util_MinMax"
### 0.049s elapsed time, 0.196s cpu time, 0.000s GC time
Loading theory "List-Infinite.Util_Nat" (required by "Draft.IL_AF_Stream_ExecMoreTemplates" via "Draft.IL_AF_Stream_Exec" via "Draft.IL_AF_Stream" via "Nat-Interval-Logic.IL_TemporalOperators" via "Nat-Interval-Logic.IL_IntervalOperators" via "Nat-Interval-Logic.IL_Interval" via "List-Infinite.InfiniteSet2" via "List-Infinite.SetInterval2" via "List-Infinite.Util_Div")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
### theory "List-Infinite.Util_Nat"
### 0.204s elapsed time, 0.786s cpu time, 0.167s GC time
Loading theory "List-Infinite.Util_Div" (required by "Draft.IL_AF_Stream_ExecMoreTemplates" via "Draft.IL_AF_Stream_Exec" via "Draft.IL_AF_Stream" via "Nat-Interval-Logic.IL_TemporalOperators" via "Nat-Interval-Logic.IL_IntervalOperators" via "Nat-Interval-Logic.IL_Interval" via "List-Infinite.InfiniteSet2" via "List-Infinite.SetInterval2")
### theory "HOL-Library.Countable_Set"
### 0.508s elapsed time, 1.998s cpu time, 0.228s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.IL_AF_Stream_ExecMoreTemplates" via "Draft.IL_AF_Stream_Exec" via "Draft.IL_AF_Stream" via "Nat-Interval-Logic.IL_TemporalOperators" via "Nat-Interval-Logic.IL_IntervalOperators" via "Nat-Interval-Logic.IL_Interval" via "List-Infinite.InfiniteSet2" via "List-Infinite.SetInterval2" via "List-Infinite.Util_NatInf" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
### theory "HOL-Library.BigO"
### 1.166s elapsed time, 4.396s cpu time, 1.253s GC time
Loading theory "List-Infinite.Util_Set" (required by "Draft.IL_AF_Stream_ExecMoreTemplates" via "Draft.IL_AF_Stream_Exec" via "Draft.IL_AF_Stream" via "Nat-Interval-Logic.IL_TemporalOperators" via "Nat-Interval-Logic.IL_IntervalOperators" via "Nat-Interval-Logic.IL_Interval" via "List-Infinite.InfiniteSet2" via "List-Infinite.SetInterval2")
Found termination order: "size <*mlex*> {}"
### theory "List-Infinite.Util_Set"
### 0.095s elapsed time, 0.365s cpu time, 0.047s GC time
?m + Suc ?n = Suc (?m + ?n)
?m + 1 = Suc ?m
?b - ?a - Suc 0 = ?b - Suc ?a
(?k * ?m = ?k * ?n) = (?m = ?n | ?k = 0)
(?m * ?k = ?n * ?k) = (?m = ?n | ?k = 0)
0 < ?k ==> (?k * ?m = ?k * ?n) = (?m = ?n)
0 < ?k ==> (?m * ?k = ?n * ?k) = (?m = ?n)
?i + ?j < ?k ==> ?i < ?k
?i + ?j < ?k ==> ?j < ?k
(0 < ?n - ?m) = (?m < ?n)
((0::?'a) < ?b - ?a) = (?a < ?b)
((0::?'a) <= ?b - ?a) = (?a <= ?b)
?a <= ?b ==> ?c <= ?b + ?c - ?a
?k <= ?n ==> ?m + ?k - ?n <= ?m
?k < ?n ==> ?m < ?n + ?m - ?k
[| ?k < ?n; 0 < ?m |] ==> ?m + ?k - ?n < ?m
(?j - ?k <= ?i) = (?j <= ?i + ?k)
?k <= ?j ==> (?i <= ?j - ?k) = (?i + ?k <= ?j)
(?i < ?j - ?k) = (?i + ?k < ?j)
?j - ?k < ?i ==> ?j < ?i + ?k
0 < ?i ==> (?j - ?k < ?i) = (?j < ?i + ?k)
[| ?i <= ?k; ?j <= ?k |] ==> (?k - ?j <= ?i) = (?k - ?i <= ?j)
[| 0 < ?i; ?k - ?i < ?j |] ==> ?k - ?j < ?i
[| 0 < ?i; 0 < ?j |] ==> (?k - ?j < ?i) = (?k - ?i < ?j)
?i < ?j - ?m ==> ?i < ?j
?i <= ?j - ?m ==> ?i <= ?j
[| ?i < ?j - ?m; ?n <= ?m |] ==> ?i < ?j - ?n
[| ?i <= ?j - ?m; ?n <= ?m |] ==> ?i <= ?j - ?n
?j < ?k ==> ?j - ?n < ?k
?j <= ?k ==> ?j - ?n <= ?k
(?m < Suc ?n) = (?m <= ?n)
0 < ?n ==> (?m < ?n) = (?m <= ?n - Suc 0)
?m < ?n ==> ?m <= ?n - Suc 0
[| 0 < ?n; ?m <= ?n - Suc 0 |] ==> ?m < ?n
(Suc ?m <= ?n) = (?m < ?n)
0 < ?m ==> (?m - Suc 0 < ?n) = (?m <= ?n)
?m - Suc 0 < ?n ==> ?m <= ?n
[| 0 < ?m; ?m <= ?n |] ==> ?m - Suc 0 < ?n
[| 0 < ?n; ?n + ?i - ?j = ?n |] ==> ?i = ?j
?n < ?m ==> ?n + (?m - Suc ?n) = ?m - Suc 0
(?k + ?m < ?k + ?n) = (?m < ?n)
(?k + ?m <= ?k + ?n) = (?m <= ?n)
(?b + ?a = ?c + ?a) = (?b = ?c)
(?a + ?b = ?a + ?c) = (?b = ?c)
[| ?k <= ?m; ?k <= ?n |] ==> (?m - ?k = ?n - ?k) = (?m = ?n)
[| ?k <= ?m; ?k <= ?n |] ==> (?m - ?k < ?n - ?k) = (?m < ?n)
[| ?k <= ?m; ?k <= ?n |] ==> (?m - ?k <= ?n - ?k) = (?m <= ?n)
?k - ?m < ?k - ?n ==> ?n < ?m
?n - ?k < ?m - ?k ==> ?n < ?m
[| ?k - ?m <= ?k - ?n; ?m < ?k |] ==> ?n <= ?m
[| ?k - ?m <= ?k - ?n; ?n <= ?k |] ==> ?n <= ?m
[| ?m - ?k <= ?n - ?k; ?k < ?m |] ==> ?m <= ?n
[| ?m - ?k <= ?n - ?k; ?k <= ?n |] ==> ?m <= ?n
[| ?k - ?m = ?k - ?n; ?m < ?k |] ==> ?m = ?n
[| ?k - ?m = ?k - ?n; ?n < ?k |] ==> ?m = ?n
[| ?m - ?k = ?n - ?k; ?k < ?m |] ==> ?m = ?n
[| ?m - ?k = ?n - ?k; ?k < ?n |] ==> ?m = ?n
[| ?k <= ?m; ?k <= ?n |] ==> (?m - ?k = ?n - ?k) = (?m = ?n)
[| ?m <= ?k; ?n <= ?k |] ==> (?k - ?m = ?k - ?n) = (?m = ?n)
(?b + ?a = ?c + ?a) = (?b = ?c)
(?a + ?b = ?a + ?c) = (?b = ?c)
?m <= ?n ==> ?m - ?l <= ?n - ?l
?m = ?n ==> ?m - ?k = ?n - ?k
### theory "HOL-Library.Tree"
### 2.581s elapsed time, 9.750s cpu time, 2.271s GC time
Loading theory "Draft.Templates" (required by "Draft.IL_AF_Stream_ExecMoreTemplates" via "Draft.ExtrEqs")
?b * (?a div ?b) = ?a - ?a mod ?b
(?n mod ?m = 0) = (?n div ?m * ?m = ?n)
?n div ?m * ?m <= ?n
0 < ?m ==> ?n < Suc (?n div ?m) * ?m
?m ~= Suc 0 ==> Suc 0 mod ?m = Suc 0
[| ?m ~= Suc 0; ?P (Suc 0) |] ==> ?P (Suc 0 mod ?m)
?m ~= Suc 0 ==> ?f (Suc 0 mod ?m) = ?f (Suc 0)
(Suc ?a mod ?m = Suc ?b mod ?m) = (?a mod ?m = ?b mod ?m)
((?a + ?k) mod ?m = (?b + ?k) mod ?m) = (?a mod ?m = ?b mod ?m)
?k <= ?a ==> ((?a - ?k) mod ?m = ?b mod ?m) = (?a mod ?m = (?b + ?k) mod ?m)
?a + ?b <= ?n ==>
((?n - ?a) mod ?m = ?b mod ?m) = ((?n - (?a + ?b)) mod ?m = 0)
[| ?a <= ?n; ?b <= ?n |]
==> ((?n - ?a) mod ?m = ?b mod ?m) = ((?n - ?b) mod ?m = ?a mod ?m)
[| ?a <= ?b; ?b mod ?m < ?a mod ?m |] ==> ?a div ?m < ?b div ?m
### theory "List-Infinite.Util_Div"
### 0.668s elapsed time, 2.398s cpu time, 0.987s GC time
?a <= ?b ==> (?b - ?a) mod ?m = (?b - ?a mod ?m) mod ?m
[| ?x mod ?m = ?y mod ?m; ?x <= ?t; ?y <= ?t |]
==> (?t - ?x) mod ?m = (?t - ?y) mod ?m
(?a mod ?c + ?b mod ?c) mod ?c = (?a + ?b) mod ?c
(?a + ?b) mod ?m =
(if ?a mod ?m + ?b mod ?m < ?m then ?a mod ?m + ?b mod ?m
 else ?a mod ?m + ?b mod ?m - ?m)
(?m + ?b mod ?m - ?a mod ?m) mod ?m =
(if ?a mod ?m <= ?b mod ?m then ?b mod ?m - ?a mod ?m
 else ?m + ?b mod ?m - ?a mod ?m)
?a mod ?m <= ?b mod ?m ==>
(?m + ?b mod ?m - ?a mod ?m) mod ?m = ?b mod ?m - ?a mod ?m
?b mod ?m < ?a mod ?m ==>
(?m + ?b mod ?m - ?a mod ?m) mod ?m = ?m + ?b mod ?m - ?a mod ?m
[| 0 <= ?x; 0 <= ?y |] ==> nat (?x mod ?y) = nat ?x mod nat ?y
int (?a mod ?b) = int ?a mod int ?b
?a <= ?b ==>
(?b - ?a) mod ?m =
(if ?a mod ?m <= ?b mod ?m then ?b mod ?m - ?a mod ?m
 else ?m + ?b mod ?m - ?a mod ?m)
?a <= ?b ==> (?b - ?a) mod ?m = (?m + ?b mod ?m - ?a mod ?m) mod ?m
[| ?a <= ?b; ?a mod ?m <= ?b mod ?m |]
==> (?b - ?a) mod ?m = ?b mod ?m - ?a mod ?m
[| ?a <= ?b; ?b mod ?m < ?a mod ?m |]
==> (?b - ?a) mod ?m = ?m + ?b mod ?m - ?a mod ?m
(?a mod - ?m = ?b mod - ?m) = (?a mod ?m = ?b mod ?m)
?a mod ?m = ?b mod ?m ==> (?b - ?a) mod ?m = 0
?a mod ?m = ?b mod ?m ==> (?b - ?a) mod ?m = 0
[| ?a mod ?m ~= ?b mod ?m; ?a <= ?b |] ==> 0 < (?b - ?a) mod ?m
[| (?b - ?a) mod ?m = 0; ?a <= ?b |] ==> ?a mod ?m = ?b mod ?m
(?b - ?a) mod ?m = 0 ==> ?a mod ?m = ?b mod ?m
(?a mod ?m = ?b mod ?m) = ((?b - ?a) mod ?m = 0)
?a <= ?b ==> (?a mod ?m = ?b mod ?m) = ((?b - ?a) mod ?m = 0)
((?n + ?k) mod ?m = ?n mod ?m) = (?k mod ?m = 0)
[| ?x < ?y; ?x mod ?m = ?y mod ?m |] ==> ?x + ?m <= ?y
0 < ?n ==> (?m - ?n) mod ?m = ?m - ?n
?m <= ?n ==> (?n - ?m) mod ?m = ?n mod ?m
?k * ?m <= ?n ==> (?n - ?k * ?m) mod ?m = ?n mod ?m
?m * ?k <= ?n ==> (?n - ?m * ?k) mod ?m = ?n mod ?m
?a mod ?m = ?b mod ?m ==> ?a * ?k mod (?m * ?k) = ?b * ?k mod (?m * ?k)
?x mod (?m * ?k) = ?y * ?k mod (?m * ?k) ==> ?x mod ?k = 0
?x mod (?m * ?k) = ?y * ?k mod (?m * ?k) ==> ?x div ?k * ?k = ?x
[| ?x mod (?m * ?k) = ?y * ?k mod (?m * ?k); 0 < ?k |]
==> ?x div ?k mod ?m = ?y mod ?m
0 < ?n ==> (?m - ?n) div ?m = 0
(?n - ?m) div ?m = ?n div ?m - Suc 0
(?n - ?k * ?m) div ?m = ?n div ?m - ?k
(?n - ?m * ?k) div ?m = ?n div ?m - ?k
[| ?k * ?m <= ?n; ?n < Suc ?k * ?m |] ==> ?n div ?m = ?k
[| ?n div ?m = ?k; 0 < ?m |] ==> ?k * ?m <= ?n & ?n < Suc ?k * ?m
0 < ?m ==> (?k * ?m <= ?n & ?n < Suc ?k * ?m) = (?n div ?m = ?k)
(?n - ?n mod ?m) div ?m = ?n div ?m
[| ?x <= ?y; ?y - ?x < ?m |] ==> ?x = ?y - (?y - ?x) mod ?m
[| ?x <= ?y; ?m <= ?y - ?x; 0 < ?m |] ==> ?x < ?y - (?y - ?x) mod ?m
?x <= ?y ==> ?x <= ?y - (?y - ?x) mod ?m
(?n - Suc (?n mod ?m)) div ?m = ?n div ?m - Suc 0
[| ?n mod ?m < ?r; ?r <= ?m + ?n mod ?m |]
==> (?n - ?r) div ?m = ?n div ?m - Suc 0
[| ?n mod ?m = 0; 0 < ?r; ?r <= ?m |]
==> (?n - ?r) div ?m = ?n div ?m - Suc 0
[| ?n mod ?m = 0; ?r < ?m |] ==> (?n - Suc ?r) div ?m = ?n div ?m - Suc 0
?n mod ?m = 0 ==> (?n - Suc 0) div ?m = ?n div ?m - Suc 0
[| ?n mod ?m < ?r; ?r <= ?m; ?r <= ?n |]
==> (?n - ?r) mod ?m = ?m + ?n mod ?m - ?r
[| 0 < ?n; ?n mod ?m = 0 |] ==> (?n - Suc 0) mod ?m = ?m - Suc 0
[| ?a < ?b; 0 < ?m; ?a mod ?m = ?b mod ?m |]
==> Suc ((?b - Suc ?a) mod ?m) = ?m
0 < ?n ==>
(?n - Suc 0) mod ?m =
(if ?n mod ?m = 0 then ?m - Suc 0 else ?n mod ?m - Suc 0)
0 < ?n ==> Suc ((?n - Suc 0) mod ?m) mod ?m = ?n mod ?m
(?t - ?r) mod ?m <= ?t
?r <= ?t ==> (?t - (?t - ?r) mod ?m) mod ?m = ?r mod ?m
?r <= ?t ==> (?k * ?m + ?t - (?t - ?r) mod ?m) mod ?m = ?r mod ?m
0 < ?m ==> (?n div ?m <= ?k) = (?n <= Suc ?k * ?m - Suc 0)
(?b - ?a) div ?m =
?b div ?m - ?a div ?m - (if ?a mod ?m <= ?b mod ?m then 0 else Suc 0)
(?b - ?a) div ?m =
?b div ?m - ?a div ?m - (?m + ?a mod ?m - Suc (?b mod ?m)) div ?m
?a mod ?m <= ?b mod ?m ==> (?b - ?a) div ?m = ?b div ?m - ?a div ?m
?b mod ?m < ?a mod ?m ==> (?b - ?a) div ?m = ?b div ?m - Suc (?a div ?m)
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.068s elapsed time, 0.207s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.IL_AF_Stream_ExecMoreTemplates")
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.560s elapsed time, 1.177s cpu time, 0.127s GC time
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
### theory "HOL-Library.Countable_Complete_Lattices"
### 1.971s elapsed time, 4.228s cpu time, 1.187s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.IL_AF_Stream_ExecMoreTemplates" via "Draft.IL_AF_Stream_Exec" via "Draft.IL_AF_Stream" via "Nat-Interval-Logic.IL_TemporalOperators" via "Nat-Interval-Logic.IL_IntervalOperators" via "Nat-Interval-Logic.IL_Interval" via "List-Infinite.InfiniteSet2" via "List-Infinite.SetInterval2" via "List-Infinite.Util_NatInf" via "HOL-Library.Extended_Nat")
### theory "HOL-Library.Order_Continuity"
### 0.388s elapsed time, 0.406s cpu time, 0.000s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.IL_AF_Stream_ExecMoreTemplates" via "Draft.IL_AF_Stream_Exec" via "Draft.IL_AF_Stream" via "Nat-Interval-Logic.IL_TemporalOperators" via "Nat-Interval-Logic.IL_IntervalOperators" via "Nat-Interval-Logic.IL_Interval" via "List-Infinite.InfiniteSet2" via "List-Infinite.SetInterval2" via "List-Infinite.Util_NatInf")
class infinity = type +
  fixes infinity :: "'a"
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### theory "HOL-Library.Extended_Nat"
### 0.485s elapsed time, 0.543s cpu time, 0.081s GC time
Loading theory "List-Infinite.Util_NatInf" (required by "Draft.IL_AF_Stream_ExecMoreTemplates" via "Draft.IL_AF_Stream_Exec" via "Draft.IL_AF_Stream" via "Nat-Interval-Logic.IL_TemporalOperators" via "Nat-Interval-Logic.IL_IntervalOperators" via "Nat-Interval-Logic.IL_Interval" via "List-Infinite.InfiniteSet2" via "List-Infinite.SetInterval2")
instantiation
  enat :: modulo
  modulo_enat == modulo :: enat => enat => enat
  divide_enat == divide :: enat => enat => enat
### theory "List-Infinite.Util_NatInf"
### 0.102s elapsed time, 0.102s cpu time, 0.000s GC time
Loading theory "List-Infinite.SetInterval2" (required by "Draft.IL_AF_Stream_ExecMoreTemplates" via "Draft.IL_AF_Stream_Exec" via "Draft.IL_AF_Stream" via "Nat-Interval-Logic.IL_TemporalOperators" via "Nat-Interval-Logic.IL_IntervalOperators" via "Nat-Interval-Logic.IL_Interval" via "List-Infinite.InfiniteSet2")
locale distrib_lattice
  fixes inf :: "'a => 'a => 'a"
    and less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
    and sup :: "'a => 'a => 'a"
  assumes "class.distrib_lattice inf less_eq less sup"
### theory "List-Infinite.SetInterval2"
### 1.316s elapsed time, 2.151s cpu time, 1.124s GC time
Loading theory "List-Infinite.InfiniteSet2" (required by "Draft.IL_AF_Stream_ExecMoreTemplates" via "Draft.IL_AF_Stream_Exec" via "Draft.IL_AF_Stream" via "Nat-Interval-Logic.IL_TemporalOperators" via "Nat-Interval-Logic.IL_IntervalOperators" via "Nat-Interval-Logic.IL_Interval")
Loading theory "List-Infinite.SetIntervalCut" (required by "Draft.IL_AF_Stream_ExecMoreTemplates" via "Draft.IL_AF_Stream_Exec" via "Draft.IL_AF_Stream" via "Nat-Interval-Logic.IL_TemporalOperators" via "Nat-Interval-Logic.IL_IntervalOperators" via "Nat-Interval-Logic.IL_Interval" via "List-Infinite.SetIntervalStep")
### theory "List-Infinite.InfiniteSet2"
### 0.107s elapsed time, 0.215s cpu time, 0.000s GC time
### theory "List-Infinite.SetIntervalCut"
### 0.503s elapsed time, 0.674s cpu time, 0.091s GC time
Loading theory "List-Infinite.List2" (required by "Draft.IL_AF_Stream_ExecMoreTemplates" via "Draft.IL_AF_Stream_Exec" via "Draft.IL_AF_Stream" via "Draft.AF_Stream" via "Draft.ListSlice" via "List-Infinite.ListInf")
Loading theory "List-Infinite.SetIntervalStep" (required by "Draft.IL_AF_Stream_ExecMoreTemplates" via "Draft.IL_AF_Stream_Exec" via "Draft.IL_AF_Stream" via "Nat-Interval-Logic.IL_TemporalOperators" via "Nat-Interval-Logic.IL_IntervalOperators" via "Nat-Interval-Logic.IL_Interval")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
"False"
  :: "bool"
"True"
  :: "bool"
consts
  sublist_list :: "'a list => nat list => 'a list"
consts
  sublist_list_if :: "'a list => nat list => 'a list"
"[10, 10, 20, 30]"
  :: "int list"
consts
  inext_nth :: "nat set => nat => nat"
"[10, 10, 20, 30, [] ! 4]"
  :: "int list"
"[10, 20, 30]"
  :: "int list"
consts
  map_list :: "('a => 'b) list => 'a list => 'b list"
"[10, 20, 30]"
  :: "int list"
consts
  map2 :: "('a => 'b => 'c) => 'a list => 'b list => 'c list"
"[10, 10, 20, 30]"
  :: "int list"
consts
  iprev_nth :: "nat set => nat => nat"
"[10, 10, 20, 30]"
  :: "int list"
### theory "List-Infinite.List2"
### 0.994s elapsed time, 3.250s cpu time, 1.456s GC time
Loading theory "List-Infinite.ListInf" (required by "Draft.IL_AF_Stream_ExecMoreTemplates" via "Draft.IL_AF_Stream_Exec" via "Draft.IL_AF_Stream" via "Draft.AF_Stream" via "Draft.ListSlice")
### theory "List-Infinite.SetIntervalStep"
### 1.080s elapsed time, 3.466s cpu time, 1.548s GC time
Loading theory "Nat-Interval-Logic.IL_Interval" (required by "Draft.IL_AF_Stream_ExecMoreTemplates" via "Draft.IL_AF_Stream_Exec" via "Draft.IL_AF_Stream" via "Nat-Interval-Logic.IL_TemporalOperators" via "Nat-Interval-Logic.IL_IntervalOperators")
### theory "Nat-Interval-Logic.IL_Interval"
### 0.893s elapsed time, 1.940s cpu time, 0.327s GC time
Loading theory "Nat-Interval-Logic.IL_IntervalOperators" (required by "Draft.IL_AF_Stream_ExecMoreTemplates" via "Draft.IL_AF_Stream_Exec" via "Draft.IL_AF_Stream" via "Nat-Interval-Logic.IL_TemporalOperators")
### theory "List-Infinite.ListInf"
### 1.140s elapsed time, 2.478s cpu time, 0.420s GC time
Loading theory "Draft.ListSlice" (required by "Draft.IL_AF_Stream_ExecMoreTemplates" via "Draft.IL_AF_Stream_Exec" via "Draft.IL_AF_Stream" via "Draft.AF_Stream")
Loading theory "List-Infinite.ListInf_Prefix" (required by "Draft.IL_AF_Stream_ExecMoreTemplates" via "Draft.IL_AF_Stream_Exec" via "Draft.AF_Stream_Exec")
consts
  list_slice_aux :: "'a list => nat => nat => 'a list list"
?x < ?n div ?m ==> ?x * ?m + ?m <= ?n
### theory "Draft.ListSlice"
### 0.194s elapsed time, 0.607s cpu time, 0.124s GC time
Loading theory "Draft.AF_Stream" (required by "Draft.IL_AF_Stream_ExecMoreTemplates" via "Draft.IL_AF_Stream_Exec" via "Draft.IL_AF_Stream")
consts
  equal_pair_count :: "('a * 'a) list => nat"
### Partially applied constant "ListInf_Prefix.inf_prefix" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<sqinter>) (set (?x # ?xs)) ==
### fold (\<sqinter>) ?xs ?x
### No equation for constructor "NoMsg"
consts
  the_af :: "'a message_af => 'a"
overloading
  is_NoMsg \<equiv> is_NoMsg :: 'a message_af => bool
consts
  is_NoMsg :: "'a message_af => bool"
overloading
  is_NoMsg \<equiv> is_NoMsg :: 'a * 'b => bool
overloading
  is_NoMsg \<equiv> is_NoMsg :: 'a set => bool
### theory "List-Infinite.ListInf_Prefix"
### 0.822s elapsed time, 2.739s cpu time, 0.529s GC time
"5"
  :: "int"
Proofs for inductive predicate(s) "i_set_indp"
"0"
  :: "int"
  Proving monotonicity ...
Proofs for inductive predicate(s) "i_set0_indp"
"5"
  :: "int"
  Proving monotonicity ...
"4"
  :: "int"
Proofs for inductive predicate(s) "NatMultiplesp"
  Proving monotonicity ...
overloading
  is_NoMsg \<equiv> is_NoMsg :: 'a SomeRecordExample_scheme => bool
Proofs for inductive predicate(s) "i_set_contp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "i_set_cont_minp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "i_set_multp"
  Proving monotonicity ...
consts
  untime :: "'a message_af list => 'a list"
consts
  untime_length_cnt :: "'a message_af list => nat"
consts
  f_expand :: "'a message_af list => nat => 'a message_af list"
### theory "Nat-Interval-Logic.IL_IntervalOperators"
### 1.529s elapsed time, 4.622s cpu time, 0.713s GC time
Loading theory "Nat-Interval-Logic.IL_TemporalOperators" (required by "Draft.IL_AF_Stream_ExecMoreTemplates" via "Draft.IL_AF_Stream_Exec" via "Draft.IL_AF_Stream")
consts
  f_expand_Suc :: "'a message_af list => nat => 'a message_af list"
instantiation
  bool :: {one,plus,times,zero,order}
  zero_bool == zero_class.zero :: bool
  times_bool == times :: bool => bool => bool
  plus_bool == plus :: bool => bool => bool
  one_bool == one_class.one :: bool
"False"
  :: "bool"
"True"
  :: "bool"
"True"
  :: "bool"
consts
  last_message :: "'a message_af list => 'a message_af"
consts
  last_message_hold_init ::
    "'a message_af list => 'a message_af => 'a message_af list"
### theory "Draft.AF_Stream"
### 1.884s elapsed time, 5.288s cpu time, 0.889s GC time
Loading theory "Draft.AF_Stream_Exec" (required by "Draft.IL_AF_Stream_ExecMoreTemplates" via "Draft.IL_AF_Stream_Exec")
### theory "Nat-Interval-Logic.IL_TemporalOperators"
### 0.850s elapsed time, 1.959s cpu time, 0.401s GC time
Loading theory "Draft.IL_AF_Stream" (required by "Draft.IL_AF_Stream_ExecMoreTemplates" via "Draft.IL_AF_Stream_Exec")
consts
  f_join_aux :: "'a list => nat => nat set => 'a list"
consts
  f_Exec_Comp ::
    "('input => 'comp => 'comp) => 'input list => 'comp => 'comp"
consts
  f_Exec_Comp_Stream ::
    "('input => 'comp => 'comp) => 'input list => 'comp => 'comp list"
consts
  f_Exec_Comp_Stream_Init ::
    "('input => 'comp => 'comp) => 'input list => 'comp => 'comp list"
### theory "Draft.IL_AF_Stream"
### 0.621s elapsed time, 1.335s cpu time, 0.197s GC time
consts
  is_Pointwise_Output_Shrink_list ::
    "('comp list => 'comp) => ('comp => 'output message_af) list => bool"
### theory "Draft.AF_Stream_Exec"
### 1.922s elapsed time, 2.993s cpu time, 0.498s GC time
Loading theory "Draft.IL_AF_Stream_Exec" (required by "Draft.IL_AF_Stream_ExecMoreTemplates")
[| 0 < ?k; ?m ~= NoMsg;
   ?s =
   ?output_fun o i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c |]
==> (i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c ?t =
     ?m) =
    (?s t2 = NoMsg. t2 \<S> t1 [?t * ?k\<dots>,?k - Suc 0]. ?s t1 = ?m)
0 < ?k ==>
(i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c ?t =
 NoMsg) =
(\<box> t1 [?t * ?k\<dots>,?k - Suc 0].
    (?output_fun o i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c)
     t1 =
    NoMsg)
[| 0 < ?k; ?m ~= NoMsg;
   ?s =
   ?output_fun o i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c |]
==> (i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c ?t =
     ?m) =
    (\<diamond> t1 [?t * ?k\<dots>,?k - Suc 0].
        ?s t1 = ?m &
        (\<box> t2 [?t * ?k\<dots>,?k - Suc 0] \<down>> t1. ?s t2 = NoMsg))
[| 0 < ?k;
   State_Idle ?localState ?output_fun ?trans_fun
    (i_Exec_Comp_Stream_Acc_LocalState ?k ?localState ?trans_fun ?input ?c
      ?t);
   ?t0.0 = ?t * ?k;
   ?s = i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c |]
==> (i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c ?t =
     NoMsg) =
    (?output_fun (?s t1) = NoMsg. t1 \<U> t2 [0\<dots>] \<oplus> ?t0.0.
     ?output_fun (?s t2) = NoMsg &
     State_Idle ?localState ?output_fun ?trans_fun (?localState (?s t2)))
[| 0 < ?k;
   ?s =
   ?output_fun o i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c |]
==> (i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c ?t =
     ?m) =
    ((?m = NoMsg -->
      (\<box> t1 [?t * ?k\<dots>,?k - Suc 0]. ?s t1 = NoMsg)) &
     (?m ~= NoMsg -->
      (?s t2 = NoMsg. t2 \<S> t1 [?t * ?k\<dots>,?k - Suc 0]. ?s t1 = ?m)))
### theory "Draft.IL_AF_Stream_Exec"
### 0.592s elapsed time, 0.649s cpu time, 0.073s GC time
Loading theory "Draft.IL_AF_Stream_ExecMoreTemplates"
[| Suc 0 < ?k;
   State_Idle ?localState ?output_fun ?trans_fun
    (i_Exec_Comp_Stream_Acc_LocalState ?k ?localState ?trans_fun ?input ?c
      ?t);
   ?m ~= NoMsg; ?t0.0 = ?t * ?k;
   ?s = i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c |]
==> (i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c ?t =
     ?m) =
    (\<diamond> t1 [0\<dots>,?k - Suc 0] \<oplus> ?t0.0.
        ?output_fun (?s t1) = ?m &
        (State_Idle ?localState ?output_fun ?trans_fun
          (?localState (?s t1)) |
         (\<circle> t2 t1 [0\<dots>].
             ?output_fun (?s t3) = NoMsg. t3 \<U> t4 [0\<dots>] \<oplus> t2.
             ?output_fun (?s t4) = NoMsg &
             State_Idle ?localState ?output_fun ?trans_fun
              (?localState (?s t4)))))
[| Suc 0 < ?k;
   State_Idle ?localState ?output_fun ?trans_fun
    (i_Exec_Comp_Stream_Acc_LocalState ?k ?localState ?trans_fun ?input ?c
      ?t);
   ?m ~= NoMsg; ?t0.0 = ?t * ?k;
   ?s = i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c |]
==> (i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c ?t =
     ?m) =
    (~ State_Idle ?localState ?output_fun ?trans_fun (?localState (?s t2)).
     t2 \<U> t1 [0\<dots>] \<oplus> ?t0.0.
     ?output_fun (?s t1) = ?m &
     (State_Idle ?localState ?output_fun ?trans_fun (?localState (?s t1)) |
      (\<circle> t3 t1 [0\<dots>].
          ?output_fun (?s t4) = NoMsg. t4 \<U> t5 [0\<dots>] \<oplus> t3.
          ?output_fun (?s t5) = NoMsg &
          State_Idle ?localState ?output_fun ?trans_fun
           (?localState (?s t5)))))
[| Suc 0 < ?k;
   State_Idle ?localState ?output_fun ?trans_fun
    (i_Exec_Comp_Stream_Acc_LocalState ?k ?localState ?trans_fun ?input ?c
      ?t);
   ?m ~= NoMsg; ?t0.0 = ?t * ?k;
   ?s = i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c |]
==> (i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c ?t =
     ?m) =
    ((\<diamond> t1 [0\<dots>,?k - Suc 0] \<oplus> ?t0.0.
         ?output_fun (?s t1) = ?m &
         State_Idle ?localState ?output_fun ?trans_fun
          (?localState (?s t1))) |
     (\<diamond> t1 [0\<dots>,?k - Suc 0] \<oplus> ?t0.0.
         ?output_fun (?s t1) = ?m &
         (\<circle> t2 t1 [0\<dots>].
             ?output_fun (?s t3) = NoMsg. t3 \<U> t4 [0\<dots>] \<oplus> t2.
             ?output_fun (?s t4) = NoMsg &
             State_Idle ?localState ?output_fun ?trans_fun
              (?localState (?s t4)))))
[| Suc 0 < ?k;
   State_Idle ?localState ?output_fun ?trans_fun
    (i_Exec_Comp_Stream_Acc_LocalState ?k ?localState ?trans_fun ?input ?c
      ?t);
   ?m ~= NoMsg; ?t0.0 = ?t * ?k;
   ?s = i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c |]
==> (i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c ?t =
     ?m) =
    ((~ State_Idle ?localState ?output_fun ?trans_fun (?localState (?s t2)).
      t2 \<U> t1 [0\<dots>] \<oplus> ?t0.0.
      ?output_fun (?s t1) = ?m &
      State_Idle ?localState ?output_fun ?trans_fun (?localState (?s t1))) |
     (~ State_Idle ?localState ?output_fun ?trans_fun (?localState (?s t2)).
      t2 \<U> t1 [0\<dots>] \<oplus> ?t0.0.
      ?output_fun (?s t1) = ?m &
      (\<circle> t3 t1 [0\<dots>].
          ?output_fun (?s t4) = NoMsg. t4 \<U> t5 [0\<dots>] \<oplus> t3.
          ?output_fun (?s t5) = NoMsg &
          State_Idle ?localState ?output_fun ?trans_fun
           (?localState (?s t5)))))
[| Suc 0 < ?k;
   State_Idle ?localState ?output_fun ?trans_fun
    (i_Exec_Comp_Stream_Acc_LocalState ?k ?localState ?trans_fun ?input ?c
      ?t);
   ?m ~= NoMsg; ?t0.0 = ?t * ?k;
   ?s = i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c;
   \<diamond> t1 [0\<dots>,?k - Suc 0] \<oplus> ?t0.0.
      ?output_fun (?s t1) = ?m &
      State_Idle ?localState ?output_fun ?trans_fun (?localState (?s t1)) |]
==> i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c ?t =
    ?m
[| Suc 0 < ?k;
   State_Idle ?localState ?output_fun ?trans_fun
    (i_Exec_Comp_Stream_Acc_LocalState ?k ?localState ?trans_fun ?input ?c
      ?t);
   ?t0.0 = ?t * ?k;
   ?s = i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c |]
==> (i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c ?t =
     ?m) =
    ((?m = NoMsg -->
      (?output_fun (?s t1) = NoMsg. t1 \<U> t2 [0\<dots>] \<oplus> ?t0.0.
       ?output_fun (?s t2) = NoMsg &
       State_Idle ?localState ?output_fun ?trans_fun
        (?localState (?s t2)))) &
     (?m ~= NoMsg -->
      (\<diamond> t1 [0\<dots>,?k - Suc 0] \<oplus> ?t0.0.
          ?output_fun (?s t1) = ?m &
          (State_Idle ?localState ?output_fun ?trans_fun
            (?localState (?s t1)) |
           (\<circle> t2 t1 [0\<dots>].
               ?output_fun (?s t3) = NoMsg.
               t3 \<U> t4 [0\<dots>] \<oplus> t2.
               ?output_fun (?s t4) = NoMsg &
               State_Idle ?localState ?output_fun ?trans_fun
                (?localState (?s t4)))))))
[| Suc 0 < ?k;
   State_Idle ?localState ?output_fun ?trans_fun
    (i_Exec_Comp_Stream_Acc_LocalState ?k ?localState ?trans_fun ?input ?c
      ?t);
   ?t0.0 = ?t * ?k;
   ?s = i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c |]
==> (i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c ?t =
     ?m) =
    ((?m = NoMsg -->
      (?output_fun (?s t1) = NoMsg. t1 \<U> t2 [0\<dots>] \<oplus> ?t0.0.
       ?output_fun (?s t2) = NoMsg &
       State_Idle ?localState ?output_fun ?trans_fun
        (?localState (?s t2)))) &
     (?m ~= NoMsg -->
      (~ State_Idle ?localState ?output_fun ?trans_fun
          (?localState (?s t2)).
       t2 \<U> t1 [0\<dots>] \<oplus> ?t0.0.
       ?output_fun (?s t1) = ?m &
       (State_Idle ?localState ?output_fun ?trans_fun
         (?localState (?s t1)) |
        (\<circle> t3 t1 [0\<dots>].
            ?output_fun (?s t4) = NoMsg. t4 \<U> t5 [0\<dots>] \<oplus> t3.
            ?output_fun (?s t5) = NoMsg &
            State_Idle ?localState ?output_fun ?trans_fun
             (?localState (?s t5)))))))
[| Suc 0 < ?k;
   State_Idle ?localState ?output_fun ?trans_fun
    (i_Exec_Comp_Stream_Acc_LocalState ?k ?localState ?trans_fun ?input ?c
      ?t);
   ?m ~= NoMsg; ?t0.0 = ?t * ?k;
   ?s = i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c;
   \<diamond> t1 [0\<dots>,?k - Suc 0] \<oplus> ?t0.0.
      ?output_fun (?s t1) = ?m &
      (\<circle> t2 t1 [0\<dots>].
          ?output_fun (?s t3) = NoMsg. t3 \<U> t4 [0\<dots>] \<oplus> t2.
          ?output_fun (?s t4) = NoMsg &
          State_Idle ?localState ?output_fun ?trans_fun
           (?localState (?s t4))) |]
==> i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c ?t =
    ?m
[| Suc 0 < ?k;
   State_Idle ?localState ?output_fun ?trans_fun
    (i_Exec_Comp_Stream_Acc_LocalState ?k ?localState ?trans_fun ?input ?c
      ?t);
   ?m ~= NoMsg; ?t0.0 = ?t * ?k;
   ?s = i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c;
   ~ State_Idle ?localState ?output_fun ?trans_fun (?localState (?s t2)).
   t2 \<U> t1 [0\<dots>] \<oplus> ?t0.0.
   ?output_fun (?s t1) = ?m &
   State_Idle ?localState ?output_fun ?trans_fun (?localState (?s t1)) |]
==> i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c ?t =
    ?m
[| Suc 0 < ?k;
   State_Idle ?localState ?output_fun ?trans_fun
    (i_Exec_Comp_Stream_Acc_LocalState ?k ?localState ?trans_fun ?input ?c
      ?t);
   ?m ~= NoMsg; ?t0.0 = ?t * ?k;
   ?s = i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c;
   ~ State_Idle ?localState ?output_fun ?trans_fun (?localState (?s t2)).
   t2 \<U> t1 [0\<dots>] \<oplus> ?t0.0.
   ?output_fun (?s t1) = ?m &
   (\<circle> t3 t1 [0\<dots>].
       ?output_fun (?s t4) = NoMsg. t4 \<U> t5 [0\<dots>] \<oplus> t3.
       ?output_fun (?s t5) = NoMsg &
       State_Idle ?localState ?output_fun ?trans_fun
        (?localState (?s t5))) |]
==> i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c ?t =
    ?m
val templateLemmas =
   [("IL_AF_Stream_Exec.i_Exec_Comp_Stream_Acc_Output__eq_NoMsg_iAll_conv",
     "0 < ?k ==>
      (i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c
        ?t =
       NoMsg) =
      (\<box> t1 [?t * ?k\<dots>,?k - Suc 0].
          (?output_fun o
           i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c)
           t1 =
          NoMsg)",
     template_implication
      ([template_inequation (less_than, template_hole 12, template_var 5)],
       template_equation
        (template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 9, template_var 5),
                       template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0)),
           template_hole 8),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_var 5)),
               template_app
                (template_app (template_hole 4, template_var 5),
                 template_app (template_hole 3, template_hole 12)))),
           t_empty)))),
    ("IL_AF_Stream_Exec.i_Exec_Stream_Pre_Post2_iAll",
     "[| ?result = i_Exec_Comp_Stream ?trans_fun ?input ?c;
         ALL x_n c_n. ?P c_n --> ?Q x_n (?trans_fun x_n c_n) |]
      ==> \<box> t ?I.
             ?P (?result\<^bsup>\<leftarrow> ?c\<^esup> t) -->
             ?Q (?input t) (?result t)",
     template_implication
      ([template_equation
         (template_var 6,
          template_app
           (template_app
             (template_app (template_hole 5, template_var 5),
              template_var 4),
            template_var 3)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0), t_empty)
           ))),
    ("IL_AF_Stream_Exec.i_Exec_Comp_Stream_Acc_Output__Init__eq_NoMsg_iAll_conv",
     "0 < ?k ==>
      (i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c
        ?t =
       NoMsg) =
      (\<box> t1 [Suc (?t * ?k)\<dots>,?k - Suc 0].
          (?output_fun o
           i_Exec_Comp_Stream_Init ?trans_fun (?input \<odot> ?k) ?c)
           t1 =
          NoMsg)",
     template_implication
      ([template_inequation (less_than, template_hole 12, template_var 5)],
       template_equation
        (template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 9, template_var 5),
                       template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0)),
           template_hole 8),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_var 5))),
               template_app
                (template_app (template_hole 3, template_var 5),
                 template_app (template_hole 5, template_hole 12)))),
           t_empty)))),
    ("IL_AF_Stream_Exec.i_Exec_Comp_Stream_Acc_Output__eq_NoMsg_iAll_conv2",
     "0 < ?k ==>
      (i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c
        ?t =
       NoMsg) =
      (\<box> t1 [\<dots>?k - Suc 0] \<oplus> ?t * ?k.
          (?output_fun o
           i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c)
           t1 =
          NoMsg)",
     template_implication
      ([template_inequation (less_than, template_hole 13, template_var 5)],
       template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 10, template_var 5),
                       template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0)),
           template_hole 9),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 5),
                     template_app (template_hole 4, template_hole 13)))),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 5))),
           t_empty)))),
    ("IL_AF_Stream_Exec.i_Exec_Stream_Pre_Post1_iAll",
     "[| ?result = i_Exec_Comp_Stream ?trans_fun ?input ?c;
         ALL x_n c_n. ?P1.0 x_n & ?P2.0 c_n --> ?Q (?trans_fun x_n c_n) |]
      ==> \<box> t ?I.
             ?P1.0 (?input t) &
             ?P2.0 (?result\<^bsup>\<leftarrow> ?c\<^esup> t) -->
             ?Q (?result t)",
     template_implication
      ([template_equation
         (template_var 7,
          template_app
           (template_app
             (template_app (template_hole 6, template_var 6),
              template_var 5),
            template_var 4)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0), t_empty)
           ))),
    ("IL_AF_Stream_Exec.i_Exec_Stream_Pre_Post3_iAll_iNext",
     "[| ?result = i_Exec_Comp_Stream ?trans_fun ?input ?c;
         ALL x_n c_n. ?P c_n --> ?Q x_n (?trans_fun x_n c_n);
         ALL t:?I. inext t ?I' = Suc t |]
      ==> \<box> t ?I.
             ?P (?result t) -->
             (\<circle> t1 t ?I'. ?Q (?input t1) (?result t1))",
     template_implication
      ([template_equation
         (template_var 7,
          template_app
           (template_app
             (template_app (template_hole 9, template_var 6),
              template_var 5),
            template_var 4)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("IL_AF_Stream_Exec.i_Exec_Stream_Init_Pre_Post2_iAll_iNext",
     "[| ?result = i_Exec_Comp_Stream_Init ?trans_fun ?input ?c;
         ALL x_n c_n. ?P x_n c_n --> ?Q (?trans_fun x_n c_n);
         ALL t:?I. inext t ?I' = Suc t |]
      ==> \<box> t ?I.
             ?P (?input t) (?result t) -->
             (\<circle> t1 t ?I'. ?Q (?result t1))",
     template_implication
      ([template_equation
         (template_var 7,
          template_app
           (template_app
             (template_app (template_hole 9, template_var 6),
              template_var 5),
            template_var 4)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("IL_AF_Stream_Exec.i_Exec_Stream_Init_Pre_Post3_iAll_iNext",
     "[| ?result = i_Exec_Comp_Stream_Init ?trans_fun ?input ?c;
         ALL x_n c_n. ?P c_n --> ?Q x_n (?trans_fun x_n c_n);
         ALL t:?I. inext t ?I' = Suc t |]
      ==> \<box> t ?I.
             ?P (?result t) -->
             (\<circle> t1 t ?I'.
                 ?Q (?input\<^bsup>\<leftarrow> NoMsg\<^esup> t1)
                  (?result t1))",
     template_implication
      ([template_equation
         (template_var 7,
          template_app
           (template_app
             (template_app (template_hole 11, template_var 6),
              template_var 5),
            template_var 4)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1), t_empty)
           ))),
    ("IL_AF_Stream_Exec.i_Exec_Comp_Stream_Acc_Output__eq_Msg_iSince_conv",
     "[| 0 < ?k; ?m ~= NoMsg;
         ?s =
         ?output_fun o
         i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c |]
      ==> (i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c
            ?t =
           ?m) =
          (?s t2 = NoMsg. t2 \<S> t1 [?t * ?k\<dots>,?k - Suc 0].
           ?s t1 = ?m)",
     template_implication
      ([template_inequation (less_than, template_hole 14, template_var 7),
        template_negation
         (template_equation (template_var 6, template_hole 11)),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 9, template_var 4),
            template_app
             (template_app
               (template_app (template_hole 8, template_var 3),
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 7)),
              template_var 1)))],
       template_equation
        (template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 5, template_var 7),
                       template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0)),
           template_var 6),
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 7)),
                 template_app
                  (template_app (template_hole 1, template_var 7),
                   template_app (template_hole 0, template_hole 14)))),
             t_empty),
           t_empty)))),
    ("IL_AF_Stream_Exec.i_Exec_Comp_Stream_Acc_Output__eq_Msg_iSince_conv2",
     "[| 0 < ?k; ?m ~= NoMsg;
         ?s =
         ?output_fun o
         i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c |]
      ==> (i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c
            ?t =
           ?m) =
          (?s t2 = NoMsg. t2 \<S> t1 [\<dots>?k - Suc 0] \<oplus> ?t * ?k.
           ?s t1 = ?m)",
     template_implication
      ([template_inequation (less_than, template_hole 15, template_var 7),
        template_negation
         (template_equation (template_var 6, template_hole 12)),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 10, template_var 4),
            template_app
             (template_app
               (template_app (template_hole 9, template_var 3),
                template_app
                 (template_app (template_hole 8, template_var 2),
                  template_var 7)),
              template_var 1)))],
       template_equation
        (template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 6, template_var 7),
                       template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0)),
           template_var 6),
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 7),
                       template_app (template_hole 1, template_hole 15)))),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 7))),
             t_empty),
           t_empty)))),
    ("IL_AF_Stream_Exec.i_Exec_Comp_Stream_Acc_Output__Init__eq_Msg_iSince_conv",
     "[| 0 < ?k; ?m ~= NoMsg;
         ?s =
         ?output_fun o
         i_Exec_Comp_Stream_Init ?trans_fun (?input \<odot> ?k) ?c |]
      ==> (i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c
            ?t =
           ?m) =
          (?s t2 = NoMsg. t2 \<S> t1 [Suc (?t * ?k)\<dots>,?k - Suc 0].
           ?s t1 = ?m)",
     template_implication
      ([template_inequation (less_than, template_hole 14, template_var 7),
        template_negation
         (template_equation (template_var 6, template_hole 11)),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 9, template_var 4),
            template_app
             (template_app
               (template_app (template_hole 8, template_var 3),
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 7)),
              template_var 1)))],
       template_equation
        (template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 5, template_var 7),
                       template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0)),
           template_var 6),
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_var 7))),
                 template_app
                  (template_app (template_hole 0, template_var 7),
                   template_app (template_hole 2, template_hole 14)))),
             t_empty),
           t_empty)))),
    ("IL_AF_Stream_Exec.i_Exec_Stream_Init_Pre_Post1_iAll_iNext",
     "[| ?result = i_Exec_Comp_Stream_Init ?trans_fun ?input ?c;
         ALL x_n c_n. ?P1.0 x_n & ?P2.0 c_n --> ?Q (?trans_fun x_n c_n);
         ALL t:?I. inext t ?I' = Suc t |]
      ==> \<box> t ?I.
             ?P1.0 (?input t) & ?P2.0 (?result t) -->
             (\<circle> t1 t ?I'. ?Q (?result t1))",
     template_implication
      ([template_equation
         (template_var 8,
          template_app
           (template_app
             (template_app (template_hole 10, template_var 7),
              template_var 6),
            template_var 5)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("IL_AF_Stream_Exec.i_Exec_Comp_Stream_Acc_Output__eq_Msg_with_State_Idle_imp",
     "[| 0 < ?k; ?s = i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c;
         ?t0.0 = ?t * ?k; ?t1.0 : [0\<dots>,?k - Suc 0] \<oplus> ?t0.0;
         State_Idle ?localState ?output_fun ?trans_fun
          (?localState (?s ?t1.0));
         ?output_fun (?s ?t1.0) ~= NoMsg |]
      ==> i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c
           ?t =
          ?output_fun (?s ?t1.0)",
     template_implication
      ([template_inequation (less_than, template_hole 15, template_var 9),
        template_equation
         (template_var 8,
          template_app
           (template_app
             (template_app (template_hole 13, template_var 7),
              template_app
               (template_app (template_hole 12, template_var 6),
                template_var 9)),
            template_var 5)),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 10, template_var 3),
            template_var 9)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_hole 15),
                    template_app
                     (template_app (template_hole 6, template_var 9),
                      template_app (template_hole 5, template_hole 15)))),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0),
                template_var 7),
              template_app
               (template_var 1,
                template_app (template_var 8, template_var 2)))
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_var 0,
                template_app (template_var 8, template_var 2)),
              template_hole 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 9),
                   template_var 0),
                 template_var 7),
               template_var 6),
             template_var 5),
           template_var 3),
         template_app
          (template_var 0,
           template_app (template_var 8, template_var 2))))),
    ("IL_AF_Stream_Exec.i_Exec_Comp_Stream_Acc_Output__eq_Msg_iEx_iAll_cut_greater_conv",
     "[| 0 < ?k; ?m ~= NoMsg;
         ?s =
         ?output_fun o
         i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c |]
      ==> (i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c
            ?t =
           ?m) =
          (\<diamond> t1 [?t * ?k\<dots>,?k - Suc 0].
              ?s t1 = ?m &
              (\<box> t2 [?t * ?k\<dots>,?k - Suc 0] \<down>> t1.
                  ?s t2 = NoMsg))",
     template_implication
      ([template_inequation (less_than, template_hole 17, template_var 7),
        template_negation
         (template_equation (template_var 6, template_hole 14)),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 12, template_var 4),
            template_app
             (template_app
               (template_app (template_hole 11, template_var 3),
                template_app
                 (template_app (template_hole 10, template_var 2),
                  template_var 7)),
              template_var 1)))],
       template_equation
        (template_app
          (template_app
            (template_hole 15,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 8, template_var 7),
                       template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0)),
           template_var 6),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_var 7)),
               template_app
                (template_app (template_hole 4, template_var 7),
                 template_app (template_hole 3, template_hole 17)))),
           t_empty)))),
    ("IL_AF_Stream_Exec.i_Exec_Comp_Stream_Acc_Output__eq_Msg_iEx_iAll_cut_greater_conv2",
     "[| 0 < ?k; ?m ~= NoMsg;
         ?s =
         ?output_fun o
         i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c |]
      ==> (i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c
            ?t =
           ?m) =
          (\<diamond> t1 [\<dots>?k - Suc 0] \<oplus> ?t * ?k.
              ?s t1 = ?m &
              (\<box> t2 ([\<dots>?k - Suc 0] \<oplus> ?t * ?k) \<down>> t1.
                  ?s t2 = NoMsg))",
     template_implication
      ([template_inequation (less_than, template_hole 18, template_var 7),
        template_negation
         (template_equation (template_var 6, template_hole 15)),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 13, template_var 4),
            template_app
             (template_app
               (template_app (template_hole 12, template_var 3),
                template_app
                 (template_app (template_hole 11, template_var 2),
                  template_var 7)),
              template_var 1)))],
       template_equation
        (template_app
          (template_app
            (template_hole 16,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 9, template_var 7),
                       template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0)),
           template_var 6),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 7),
                     template_app (template_hole 4, template_hole 18)))),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 7))),
           t_empty)))),
    ("IL_AF_Stream_Exec.i_Exec_Comp_Stream_Acc_Output__eq_NoMsg_iAll_start_event_conv",
     "[| 0 < ?k; !!t. ?event t = (t mod ?k = 0); ?t0.0 = ?t * ?k;
         ?s =
         ?output_fun o
         i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c |]
      ==> (i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c
            ?t =
           NoMsg) =
          (?s ?t0.0 = NoMsg &
           (\<circle> t' ?t0.0 [0\<dots>].
               ?s t1 = NoMsg. t1 \<U> t2 [0\<dots>] \<oplus> t'.
               ?event t2))",
     template_implication
      ([template_inequation (less_than, template_hole 17, template_var 8),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_equation
         (template_var 6,
          template_app
           (template_app (template_hole 12, template_var 5),
            template_var 8)),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 10, template_var 3),
            template_app
             (template_app
               (template_app (template_hole 9, template_var 2),
                template_app
                 (template_app (template_hole 8, template_var 1),
                  template_var 8)),
              template_var 0)))],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 6, template_var 8),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0),
             template_var 5),
           template_hole 5),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_var 4, template_var 6)),
                   template_hole 5)),
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 6),
                   template_app (template_hole 2, template_hole 17)),
                 t_empty))
             )))),
    ("IL_AF_Stream_Exec.i_Exec_Comp_Stream_Acc_Output__eq_iAll_iSince_conv",
     "[| 0 < ?k;
         ?s =
         ?output_fun o
         i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c |]
      ==> (i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c
            ?t =
           ?m) =
          ((?m = NoMsg -->
            (\<box> t1 [?t * ?k\<dots>,?k - Suc 0]. ?s t1 = NoMsg)) &
           (?m ~= NoMsg -->
            (?s t2 = NoMsg. t2 \<S> t1 [?t * ?k\<dots>,?k - Suc 0].
             ?s t1 = ?m)))",
     template_implication
      ([template_inequation (less_than, template_hole 17, template_var 7),
        template_equation
         (template_var 6,
          template_app
           (template_app (template_hole 15, template_var 5),
            template_app
             (template_app
               (template_app (template_hole 14, template_var 4),
                template_app
                 (template_app (template_hole 13, template_var 3),
                  template_var 7)),
              template_var 2)))],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 10, template_var 7),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 11, template_var 0),
                       template_hole 7)),
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_hole 5,
                           template_app
                            (template_app (template_hole 4, template_var 1),
                             template_var 7)),
                         template_app
                          (template_app (template_hole 3, template_var 7),
                           template_app
                            (template_hole 2, template_hole 17)))),
                     t_empty))),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 11, template_var 0),
                       template_hole 7))),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 0,
                       template_app
                        (template_app
                          (template_hole 5,
                           template_app
                            (template_app (template_hole 4, template_var 1),
                             template_var 7)),
                         template_app
                          (template_app (template_hole 3, template_var 7),
                           template_app
                            (template_hole 2, template_hole 17)))),
                     t_empty),
                   t_empty)))
             )))),
    ("IL_AF_Stream_Exec.i_Exec_Comp_Stream_Acc_Output__eq_NoMsg_State_Idle_conv",
     "[| 0 < ?k;
         State_Idle ?localState ?output_fun ?trans_fun
          (i_Exec_Comp_Stream_Acc_LocalState ?k ?localState ?trans_fun
            ?input ?c ?t);
         ?t0.0 = ?t * ?k;
         ?s = i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c |]
      ==> (i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c
            ?t =
           NoMsg) =
          (?output_fun (?s t1) = NoMsg.
           t1 \<U> t2 [0\<dots>] \<oplus> ?t0.0.
           ?output_fun (?s t2) = NoMsg &
           State_Idle ?localState ?output_fun ?trans_fun
            (?localState (?s t2)))",
     template_implication
      ([template_inequation (less_than, template_hole 15, template_var 8),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 14, template_var 7),
                  template_var 6),
                template_var 5),
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 13, template_var 8),
                        template_var 7),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2))
            ),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 11, template_var 2),
            template_var 8)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_app (template_hole 9, template_var 5),
              template_app
               (template_app (template_hole 8, template_var 4),
                template_var 8)),
            template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 5, template_var 8),
                       template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2)),
           template_hole 4),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_hole 15)),
                 template_var 1)),
             t_empty),
           t_empty)))),
    ("IL_AF_Stream_Exec.i_Exec_Comp_Stream_Acc_Output__eq_iAll_iSince_conv2",
     "[| 0 < ?k;
         ?s =
         ?output_fun o
         i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c |]
      ==> (i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c
            ?t =
           ?m) =
          ((?m = NoMsg -->
            (\<box> t1 [\<dots>?k - Suc 0] \<oplus> ?t * ?k.
                ?s t1 = NoMsg)) &
           (?m ~= NoMsg -->
            (?s t2 = NoMsg. t2 \<S> t1 [\<dots>?k - Suc 0] \<oplus> ?t * ?k.
             ?s t1 = ?m)))",
     template_implication
      ([template_inequation (less_than, template_hole 18, template_var 7),
        template_equation
         (template_var 6,
          template_app
           (template_app (template_hole 16, template_var 5),
            template_app
             (template_app
               (template_app (template_hole 15, template_var 4),
                template_app
                 (template_app (template_hole 14, template_var 3),
                  template_var 7)),
              template_var 2)))],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 11, template_var 7),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app (template_hole 12, template_var 0),
                       template_hole 8)),
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app
                          (template_hole 6,
                           template_app
                            (template_hole 5,
                             template_app
                              (template_app
                                (template_hole 4, template_var 7),
                               template_app
                                (template_hole 3, template_hole 18)))),
                         template_app
                          (template_app (template_hole 2, template_var 1),
                           template_var 7))),
                     t_empty))),
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 12, template_var 0),
                       template_hole 8))),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 0,
                       template_app
                        (template_app
                          (template_hole 6,
                           template_app
                            (template_hole 5,
                             template_app
                              (template_app
                                (template_hole 4, template_var 7),
                               template_app
                                (template_hole 3, template_hole 18)))),
                         template_app
                          (template_app (template_hole 2, template_var 1),
                           template_var 7))),
                     t_empty),
                   t_empty)))
             )))),
    ("IL_AF_Stream_Exec.i_Exec_Comp_Stream_Acc_Output__Init__eq_NoMsg_iAll_start_event2_conv",
     "[| Suc 0 < ?k; !!t. ?event t = (t mod ?k = Suc 0);
         ?t0.0 = Suc (?t * ?k);
         ?s =
         ?output_fun o
         i_Exec_Comp_Stream_Init ?trans_fun (?input \<odot> ?k) ?c |]
      ==> (i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c
            ?t =
           NoMsg) =
          (?s ?t0.0 = NoMsg &
           (\<circle> t' ?t0.0 [0\<dots>].
               ?s t1 = NoMsg. t1 \<U> t2 [0\<dots>] \<oplus> t'.
               ?event t2))",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 18, template_hole 17),
          template_var 8),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_equation
         (template_var 6,
          template_app
           (template_hole 18,
            template_app
             (template_app (template_hole 12, template_var 5),
              template_var 8))),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 10, template_var 3),
            template_app
             (template_app
               (template_app (template_hole 9, template_var 2),
                template_app
                 (template_app (template_hole 8, template_var 1),
                  template_var 8)),
              template_var 0)))],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 6, template_var 8),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0),
             template_var 5),
           template_hole 5),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_var 4, template_var 6)),
                   template_hole 5)),
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 6),
                   template_app (template_hole 2, template_hole 17)),
                 t_empty))
             )))),
    ("IL_AF_Stream_Exec.i_Exec_Comp_Stream_Acc_Output__Init__eq_NoMsg_iAll_start_event_conv",
     "[| 0 < ?k; !!t. ?event t = ((t + ?k - Suc 0) mod ?k = 0);
         ?t0.0 = Suc (?t * ?k);
         ?s =
         ?output_fun o
         i_Exec_Comp_Stream_Init ?trans_fun (?input \<odot> ?k) ?c |]
      ==> (i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c
            ?t =
           NoMsg) =
          (?s ?t0.0 = NoMsg &
           (\<circle> t' ?t0.0 [0\<dots>].
               ?s t1 = NoMsg. t1 \<U> t2 [0\<dots>] \<oplus> t'.
               ?event t2))",
     template_implication
      ([template_inequation (less_than, template_hole 20, template_var 8),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_equation
         (template_var 6,
          template_app
           (template_hole 13,
            template_app
             (template_app (template_hole 12, template_var 5),
              template_var 8))),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 10, template_var 3),
            template_app
             (template_app
               (template_app (template_hole 9, template_var 2),
                template_app
                 (template_app (template_hole 8, template_var 1),
                  template_var 8)),
              template_var 0)))],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 6, template_var 8),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0),
             template_var 5),
           template_hole 5),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_var 4, template_var 6)),
                   template_hole 5)),
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 6),
                   template_app (template_hole 2, template_hole 20)),
                 t_empty))
             )))),
    ("IL_AF_Stream_Exec.i_Exec_Comp_Stream_Acc_Output__Init__eq_NoMsg_iAll_finish_event_conv",
     "[| Suc 0 < ?k; !!t. ?event t = (t mod ?k = 0); ?t0.0 = Suc (?t * ?k);
         ?s =
         ?output_fun o
         i_Exec_Comp_Stream_Init ?trans_fun (?input \<odot> ?k) ?c |]
      ==> (i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c
            ?t =
           NoMsg) =
          (?s ?t0.0 = NoMsg &
           (\<circle> t' ?t0.0 [0\<dots>].
               ?s t1 = NoMsg. t1 \<U> t2 [0\<dots>] \<oplus> t'.
               ?event t2 & ?s t2 = NoMsg))",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 18, template_hole 17),
          template_var 8),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_equation
         (template_var 6,
          template_app
           (template_hole 18,
            template_app
             (template_app (template_hole 12, template_var 5),
              template_var 8))),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 10, template_var 3),
            template_app
             (template_app
               (template_app (template_hole 9, template_var 2),
                template_app
                 (template_app (template_hole 8, template_var 1),
                  template_var 8)),
              template_var 0)))],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 6, template_var 8),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0),
             template_var 5),
           template_hole 5),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_var 4, template_var 6)),
                   template_hole 5)),
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 6),
                   template_app (template_hole 2, template_hole 17)),
                 t_empty))
             )))),
    ("IL_AF_Stream_Exec.i_Exec_Comp_Stream_Acc_Output__eq_Msg_State_Idle_iEx_imp1",
     "[| Suc 0 < ?k;
         State_Idle ?localState ?output_fun ?trans_fun
          (i_Exec_Comp_Stream_Acc_LocalState ?k ?localState ?trans_fun
            ?input ?c ?t);
         ?m ~= NoMsg; ?t0.0 = ?t * ?k;
         ?s = i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c;
         \<diamond> t1 [0\<dots>,?k - Suc 0] \<oplus> ?t0.0.
            ?output_fun (?s t1) = ?m &
            State_Idle ?localState ?output_fun ?trans_fun
             (?localState (?s t1)) |]
      ==> i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c
           ?t =
          ?m",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 17, template_hole 16),
          template_var 9),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 15, template_var 8),
                  template_var 7),
                template_var 6),
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 14, template_var 9),
                        template_var 8),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3))
            ),
        template_negation
         (template_equation (template_var 2, template_hole 11)),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 9, template_var 3),
            template_var 9)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_app (template_hole 7, template_var 6),
              template_app
               (template_app (template_hole 6, template_var 5),
                template_var 9)),
            template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_hole 16),
                      template_app
                       (template_app (template_hole 2, template_var 9),
                        template_app
                         (template_hole 17, template_hole 16)))),
                  template_var 1)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 9),
                   template_var 7),
                 template_var 6),
               template_var 5),
             template_var 4),
           template_var 3),
         template_var 2))),
    ("IL_AF_Stream_Exec.i_Exec_Comp_Stream_Acc_Output__eq_NoMsg_iAll_finish_event_conv",
     "[| Suc 0 < ?k; !!t. ?event t = (t mod ?k = ?k - Suc 0);
         ?t0.0 = ?t * ?k;
         ?s =
         ?output_fun o
         i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c |]
      ==> (i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c
            ?t =
           NoMsg) =
          (?s ?t0.0 = NoMsg &
           (\<circle> t' ?t0.0 [0\<dots>].
               ?s t1 = NoMsg. t1 \<U> t2 [0\<dots>] \<oplus> t'.
               ?event t2 & ?s t2 = NoMsg))",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 19, template_hole 18),
          template_var 8),
        template_predicate (template_app (template_hole 17, t_empty)),
        template_equation
         (template_var 6,
          template_app
           (template_app (template_hole 12, template_var 5),
            template_var 8)),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 10, template_var 3),
            template_app
             (template_app
               (template_app (template_hole 9, template_var 2),
                template_app
                 (template_app (template_hole 8, template_var 1),
                  template_var 8)),
              template_var 0)))],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 6, template_var 8),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0),
             template_var 5),
           template_hole 5),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_var 4, template_var 6)),
                   template_hole 5)),
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 6),
                   template_app (template_hole 2, template_hole 18)),
                 t_empty))
             )))),
    ("IL_AF_Stream_Exec.i_Exec_Comp_Stream_Acc_Output__eq_Msg_State_Idle_iUntil_imp1",
     "[| Suc 0 < ?k;
         State_Idle ?localState ?output_fun ?trans_fun
          (i_Exec_Comp_Stream_Acc_LocalState ?k ?localState ?trans_fun
            ?input ?c ?t);
         ?m ~= NoMsg; ?t0.0 = ?t * ?k;
         ?s = i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c;
         ~ State_Idle ?localState ?output_fun ?trans_fun
            (?localState (?s t2)).
         t2 \<U> t1 [0\<dots>] \<oplus> ?t0.0.
         ?output_fun (?s t1) = ?m &
         State_Idle ?localState ?output_fun ?trans_fun
          (?localState (?s t1)) |]
      ==> i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c
           ?t =
          ?m",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 16, template_hole 15),
          template_var 9),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 14, template_var 8),
                  template_var 7),
                template_var 6),
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 13, template_var 9),
                        template_var 8),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3))
            ),
        template_negation
         (template_equation (template_var 2, template_hole 10)),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 8, template_var 3),
            template_var 9)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_app (template_hole 6, template_var 6),
              template_app
               (template_app (template_hole 5, template_var 5),
                template_var 9)),
            template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app
                     (template_hole 3,
                      template_app (template_hole 2, template_hole 15)),
                    template_var 1)),
                t_empty),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 9),
                   template_var 7),
                 template_var 6),
               template_var 5),
             template_var 4),
           template_var 3),
         template_var 2))),
    ("IL_AF_Stream_Exec.i_Exec_Comp_Stream_Acc_Output__eq_Msg_State_Idle_iEx_imp2",
     "[| Suc 0 < ?k;
         State_Idle ?localState ?output_fun ?trans_fun
          (i_Exec_Comp_Stream_Acc_LocalState ?k ?localState ?trans_fun
            ?input ?c ?t);
         ?m ~= NoMsg; ?t0.0 = ?t * ?k;
         ?s = i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c;
         \<diamond> t1 [0\<dots>,?k - Suc 0] \<oplus> ?t0.0.
            ?output_fun (?s t1) = ?m &
            (\<circle> t2 t1 [0\<dots>].
                ?output_fun (?s t3) = NoMsg.
                t3 \<U> t4 [0\<dots>] \<oplus> t2.
                ?output_fun (?s t4) = NoMsg &
                State_Idle ?localState ?output_fun ?trans_fun
                 (?localState (?s t4))) |]
      ==> i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c
           ?t =
          ?m",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 20, template_hole 19),
          template_var 9),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 18, template_var 8),
                  template_var 7),
                template_var 6),
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 17, template_var 9),
                        template_var 8),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3))
            ),
        template_negation
         (template_equation (template_var 2, template_hole 14)),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 12, template_var 3),
            template_var 9)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_app (template_hole 10, template_var 6),
              template_app
               (template_app (template_hole 9, template_var 5),
                template_var 9)),
            template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_hole 19),
                      template_app
                       (template_app (template_hole 5, template_var 9),
                        template_app
                         (template_hole 20, template_hole 19)))),
                  template_var 1)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 9),
                   template_var 7),
                 template_var 6),
               template_var 5),
             template_var 4),
           template_var 3),
         template_var 2))),
    ("IL_AF_Stream_Exec.i_Exec_Comp_Stream_Acc_Output__eq_Msg_before_State_Idle_imp2",
     "[| Suc 0 < ?k;
         State_Idle ?localState ?output_fun ?trans_fun
          (i_Exec_Comp_Stream_Acc_LocalState ?k ?localState ?trans_fun
            ?input ?c ?t);
         ?m ~= NoMsg; ?t0.0 = ?t * ?k;
         ?s = i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c;
         ?t1.0 : [0\<dots>,?k - Suc 0] \<oplus> ?t0.0;
         ?output_fun (?s ?t1.0) = ?m;
         \<circle> t2 ?t1.0 [0\<dots>].
            ?output_fun (?s t3) = NoMsg. t3 \<U> t4 [0\<dots>] \<oplus> t2.
            ?output_fun (?s t4) = NoMsg &
            State_Idle ?localState ?output_fun ?trans_fun
             (?localState (?s t4)) |]
      ==> i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c
           ?t =
          ?m",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 20, template_hole 19),
          template_var 10),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 18, template_var 9),
                  template_var 8),
                template_var 7),
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 17, template_var 10),
                        template_var 9),
                      template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4))
            ),
        template_negation
         (template_equation (template_var 3, template_hole 14)),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 12, template_var 4),
            template_var 10)),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_app (template_hole 10, template_var 7),
              template_app
               (template_app (template_hole 9, template_var 6),
                template_var 10)),
            template_var 5)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_hole 19),
                    template_app
                     (template_app (template_hole 5, template_var 10),
                      template_app (template_hole 20, template_hole 19)))),
                template_var 2))
            ),
        template_equation
         (template_app
           (template_var 8, template_app (template_var 1, template_var 0)),
          template_var 3),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 0),
                template_app (template_hole 3, template_hole 19)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 10),
                   template_var 8),
                 template_var 7),
               template_var 6),
             template_var 5),
           template_var 4),
         template_var 3))),
    ("IL_AF_Stream_Exec.i_Exec_Comp_Stream_Acc_Output__eq_Msg_with_State_Idle_conv2",
     "[| 0 < ?k;
         State_Idle ?localState ?output_fun ?trans_fun
          (i_Exec_Comp_Stream_Acc_LocalState ?k ?localState ?trans_fun
            ?input ?c ?t);
         ?m ~= NoMsg; ?t0.0 = ?t * ?k;
         ?s = i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c;
         ?t1.0 : [0\<dots>,?k - Suc 0] \<oplus> ?t0.0;
         State_Idle ?localState ?output_fun ?trans_fun
          (?localState (?s ?t1.0));
         ?output_fun (?s ?t1.0) ~= NoMsg |]
      ==> (i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c
            ?t =
           ?m) =
          (\<diamond> t1 [0\<dots>,?k - Suc 0] \<oplus> ?t0.0.
              ?output_fun (?s t1) = ?m &
              State_Idle ?localState ?output_fun ?trans_fun
               (?localState (?s t1)))",
     template_implication
      ([template_inequation (less_than, template_hole 19, template_var 10),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 18, template_var 9),
                  template_var 8),
                template_var 7),
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 17, template_var 10),
                        template_var 9),
                      template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4))
            ),
        template_negation
         (template_equation (template_var 3, template_hole 14)),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 12, template_var 4),
            template_var 10)),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_app (template_hole 10, template_var 7),
              template_app
               (template_app (template_hole 9, template_var 6),
                template_var 10)),
            template_var 5)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_hole 19),
                    template_app
                     (template_app (template_hole 5, template_var 10),
                      template_app (template_hole 4, template_hole 19)))),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 18, template_var 9),
                  template_var 8),
                template_var 7),
              template_app
               (template_var 9,
                template_app (template_var 1, template_var 0)))
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_var 8,
                template_app (template_var 1, template_var 0)),
              template_hole 14)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 15,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 2, template_var 10),
                       template_var 8),
                     template_var 7),
                   template_var 6),
                 template_var 5),
               template_var 4)),
           template_var 3),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_hole 19),
                   template_app
                    (template_app (template_hole 5, template_var 10),
                     template_app (template_hole 4, template_hole 19)))),
               template_var 2)),
           t_empty)))),
    ("IL_AF_Stream_Exec.i_Exec_Comp_Stream_Acc_Output__eq_Msg_before_State_Idle_imp",
     "[| Suc 0 < ?k;
         State_Idle ?localState ?output_fun ?trans_fun
          (i_Exec_Comp_Stream_Acc_LocalState ?k ?localState ?trans_fun
            ?input ?c ?t);
         ?m ~= NoMsg; ?t0.0 = ?t * ?k;
         ?s = i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c;
         ~ State_Idle ?localState ?output_fun ?trans_fun
            (?localState (?s t1)).
         t1 \<U> t2 [0\<dots>] \<oplus> ?t0.0.
         ?output_fun (?s t2) = ?m &
         (\<circle> t3 t2 [0\<dots>].
             ?output_fun (?s t4) = NoMsg. t4 \<U> t5 [0\<dots>] \<oplus> t3.
             ?output_fun (?s t5) = NoMsg &
             State_Idle ?localState ?output_fun ?trans_fun
              (?localState (?s t5))) |]
      ==> i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c
           ?t =
          ?m",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 17, template_hole 16),
          template_var 9),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 15, template_var 8),
                  template_var 7),
                template_var 6),
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 14, template_var 9),
                        template_var 8),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3))
            ),
        template_negation
         (template_equation (template_var 2, template_hole 11)),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 9, template_var 3),
            template_var 9)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_app (template_hole 7, template_var 6),
              template_app
               (template_app (template_hole 6, template_var 5),
                template_var 9)),
            template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_hole 16)),
                    template_var 1)),
                t_empty),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 9),
                   template_var 7),
                 template_var 6),
               template_var 5),
             template_var 4),
           template_var 3),
         template_var 2))),
    ("IL_AF_Stream_Exec.i_Exec_Comp_Stream_Acc_Output__eq_Msg_State_Idle_conv2",
     "[| Suc 0 < ?k;
         State_Idle ?localState ?output_fun ?trans_fun
          (i_Exec_Comp_Stream_Acc_LocalState ?k ?localState ?trans_fun
            ?input ?c ?t);
         ?m ~= NoMsg; ?t0.0 = ?t * ?k;
         ?s = i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c |]
      ==> (i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c
            ?t =
           ?m) =
          (\<diamond> t1 [0\<dots>,?k - Suc 0] \<oplus> ?t0.0.
              ?output_fun (?s t1) = ?m &
              (State_Idle ?localState ?output_fun ?trans_fun
                (?localState (?s t1)) |
               (\<circle> t2 t1 [0\<dots>].
                   ?output_fun (?s t3) = NoMsg.
                   t3 \<U> t4 [0\<dots>] \<oplus> t2.
                   ?output_fun (?s t4) = NoMsg &
                   State_Idle ?localState ?output_fun ?trans_fun
                    (?localState (?s t4)))))",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 22, template_hole 21),
          template_var 9),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 20, template_var 8),
                  template_var 7),
                template_var 6),
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 19, template_var 9),
                        template_var 8),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3))
            ),
        template_negation
         (template_equation (template_var 2, template_hole 16)),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 14, template_var 3),
            template_var 9)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_app (template_hole 12, template_var 6),
              template_app
               (template_app (template_hole 11, template_var 5),
                template_var 9)),
            template_var 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 17,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 9, template_var 9),
                       template_var 7),
                     template_var 6),
                   template_var 5),
                 template_var 4),
               template_var 3)),
           template_var 2),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_hole 21),
                   template_app
                    (template_app (template_hole 5, template_var 9),
                     template_app (template_hole 22, template_hole 21)))),
               template_var 1)),
           t_empty)))),
    ("IL_AF_Stream_Exec.i_Exec_Comp_Stream_Acc_Output__eq_Msg_with_State_Idle_conv",
     "[| 0 < ?k;
         State_Idle ?localState ?output_fun ?trans_fun
          (i_Exec_Comp_Stream_Acc_LocalState ?k ?localState ?trans_fun
            ?input ?c ?t);
         ?m ~= NoMsg; ?t0.0 = ?t * ?k;
         ?s = i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c;
         ?t1.0 : [0\<dots>,?k - Suc 0] \<oplus> ?t0.0;
         State_Idle ?localState ?output_fun ?trans_fun
          (?localState (?s ?t1.0));
         ?output_fun (?s ?t1.0) ~= NoMsg |]
      ==> (i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c
            ?t =
           ?m) =
          (~ State_Idle ?localState ?output_fun ?trans_fun
              (?localState (?s t2)).
           t2 \<U> t1 [0\<dots>] \<oplus> ?t0.0.
           ?output_fun (?s t1) = ?m &
           State_Idle ?localState ?output_fun ?trans_fun
            (?localState (?s t1)))",
     template_implication
      ([template_inequation (less_than, template_hole 20, template_var 10),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 19, template_var 9),
                  template_var 8),
                template_var 7),
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 18, template_var 10),
                        template_var 9),
                      template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4))
            ),
        template_negation
         (template_equation (template_var 3, template_hole 15)),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 13, template_var 4),
            template_var 10)),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_app (template_hole 11, template_var 7),
              template_app
               (template_app (template_hole 10, template_var 6),
                template_var 10)),
            template_var 5)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 0),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_hole 20),
                    template_app
                     (template_app (template_hole 6, template_var 10),
                      template_app (template_hole 5, template_hole 20)))),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 19, template_var 9),
                  template_var 8),
                template_var 7),
              template_app
               (template_var 9,
                template_app (template_var 1, template_var 0)))
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_var 8,
                template_app (template_var 1, template_var 0)),
              template_hole 15)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 16,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 3, template_var 10),
                       template_var 8),
                     template_var 7),
                   template_var 6),
                 template_var 5),
               template_var 4)),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 8,
                   template_app (template_hole 1, template_hole 20)),
                 template_var 2)),
             t_empty),
           t_empty)))),
    ("IL_AF_Stream_Exec.i_Exec_Comp_Stream_Acc_Output__eq_Msg_State_Idle_conv",
     "[| Suc 0 < ?k;
         State_Idle ?localState ?output_fun ?trans_fun
          (i_Exec_Comp_Stream_Acc_LocalState ?k ?localState ?trans_fun
            ?input ?c ?t);
         ?m ~= NoMsg; ?t0.0 = ?t * ?k;
         ?s = i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c |]
      ==> (i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c
            ?t =
           ?m) =
          (~ State_Idle ?localState ?output_fun ?trans_fun
              (?localState (?s t2)).
           t2 \<U> t1 [0\<dots>] \<oplus> ?t0.0.
           ?output_fun (?s t1) = ?m &
           (State_Idle ?localState ?output_fun ?trans_fun
             (?localState (?s t1)) |
            (\<circle> t3 t1 [0\<dots>].
                ?output_fun (?s t4) = NoMsg.
                t4 \<U> t5 [0\<dots>] \<oplus> t3.
                ?output_fun (?s t5) = NoMsg &
                State_Idle ?localState ?output_fun ?trans_fun
                 (?localState (?s t5)))))",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 19, template_hole 18),
          template_var 9),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 17, template_var 8),
                  template_var 7),
                template_var 6),
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 16, template_var 9),
                        template_var 8),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3))
            ),
        template_negation
         (template_equation (template_var 2, template_hole 13)),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 11, template_var 3),
            template_var 9)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_app (template_hole 9, template_var 6),
              template_app
               (template_app (template_hole 8, template_var 5),
                template_var 9)),
            template_var 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 14,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 6, template_var 9),
                       template_var 7),
                     template_var 6),
                   template_var 5),
                 template_var 4),
               template_var 3)),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 18)),
                 template_var 1)),
             t_empty),
           t_empty)))),
    ("IL_AF_Stream_Exec.i_Exec_Comp_Stream_Acc_Output__Init__eq_Msg_iUntil_finish_event_conv",
     "[| Suc 0 < ?k; ?m ~= NoMsg; !!t. ?event t = (t mod ?k = 0);
         ?t0.0 = Suc (?t * ?k);
         ?s =
         ?output_fun o
         i_Exec_Comp_Stream_Init ?trans_fun (?input \<odot> ?k) ?c |]
      ==> (i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c
            ?t =
           ?m) =
          ((~ ?event t1. t1 \<U> t2 [0\<dots>] \<oplus> ?t0.0.
            ?event t2 & ?s t2 = ?m) |
           (~ ?event t1. t1 \<U> t2 [0\<dots>] \<oplus> ?t0.0.
            ~ ?event t2 &
            ?s t2 = ?m &
            (\<circle> t' t2 [0\<dots>].
                ?s t3 = NoMsg. t3 \<U> t4 [0\<dots>] \<oplus> t'.
                ?event t4 & ?s t4 = NoMsg)))",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 20, template_hole 19),
          template_var 9),
        template_negation
         (template_equation (template_var 8, template_hole 16)),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_equation
         (template_var 6,
          template_app
           (template_hole 20,
            template_app
             (template_app (template_hole 11, template_var 5),
              template_var 9))),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 9, template_var 3),
            template_app
             (template_app
               (template_app (template_hole 8, template_var 2),
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_var 9)),
              template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_hole 17,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 6, template_var 9),
                       template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0),
               template_var 5)),
           template_var 8),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_hole 19)),
                     template_var 6)),
                 t_empty),
               t_empty)),
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 19)),
                   template_var 6)),
               t_empty),
             t_empty))))),
    ("IL_AF_Stream_Exec.i_Exec_Comp_Stream_Acc_Output__eq_Msg_iUntil_finish_event_conv",
     "[| 0 < ?k; ?m ~= NoMsg; !!t. ?event t = (t mod ?k = ?k - Suc 0);
         ?t0.0 = ?t * ?k;
         ?s =
         ?output_fun o
         i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c |]
      ==> (i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c
            ?t =
           ?m) =
          ((~ ?event t1. t1 \<U> t2 [0\<dots>] \<oplus> ?t0.0.
            ?event t2 & ?s t2 = ?m) |
           (~ ?event t1. t1 \<U> t2 [0\<dots>] \<oplus> ?t0.0.
            ~ ?event t2 &
            ?s t2 = ?m &
            (\<circle> t' t2 [0\<dots>].
                ?s t3 = NoMsg. t3 \<U> t4 [0\<dots>] \<oplus> t'.
                ?event t4 & ?s t4 = NoMsg)))",
     template_implication
      ([template_inequation (less_than, template_hole 21, template_var 9),
        template_negation
         (template_equation (template_var 8, template_hole 18)),
        template_predicate (template_app (template_hole 17, t_empty)),
        template_equation
         (template_var 6,
          template_app
           (template_app (template_hole 11, template_var 5),
            template_var 9)),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 9, template_var 3),
            template_app
             (template_app
               (template_app (template_hole 8, template_var 2),
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_var 9)),
              template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_hole 19,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 6, template_var 9),
                       template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0),
               template_var 5)),
           template_var 8),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_hole 21)),
                     template_var 6)),
                 t_empty),
               t_empty)),
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 21)),
                   template_var 6)),
               t_empty),
             t_empty))))),
    ("IL_AF_Stream_Exec.i_Exec_Comp_Stream_Acc_Output__eq_Msg_iUntil_start_event_conv",
     "[| 0 < ?k; ?m ~= NoMsg; !!t. ?event t = (t mod ?k = 0);
         ?t0.0 = ?t * ?k;
         ?s =
         ?output_fun o
         i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c |]
      ==> (i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c
            ?t =
           ?m) =
          (?s ?t0.0 = ?m &
           (\<circle> t' ?t0.0 [0\<dots>].
               ?s t1 = NoMsg. t1 \<U> t2 [0\<dots>] \<oplus> t'.
               ?event t2) |
           (\<circle> t' ?t0.0 [0\<dots>].
               ~ ?event t1. t1 \<U> t2 [0\<dots>] \<oplus> t'.
               ?s t2 = ?m &
               ~ ?event t2 &
               (\<circle> t'' t2 [0\<dots>].
                   ?s t3 = NoMsg. t3 \<U> t4 [0\<dots>] \<oplus> t''.
                   ?event t4)))",
     template_implication
      ([template_inequation (less_than, template_hole 19, template_var 9),
        template_negation
         (template_equation (template_var 8, template_hole 16)),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_equation
         (template_var 6,
          template_app
           (template_app (template_hole 11, template_var 5),
            template_var 9)),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 9, template_var 3),
            template_app
             (template_app
               (template_app (template_hole 8, template_var 2),
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_var 9)),
              template_var 0)))],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 6, template_var 9),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0),
             template_var 5),
           template_var 8),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 17,
                         template_app (template_var 4, template_var 6)),
                       template_var 8)),
                   template_app
                    (template_app
                      (template_app (template_hole 3, template_var 6),
                       template_app (template_hole 2, template_hole 19)),
                     t_empty))),
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 6),
                   template_app (template_hole 2, template_hole 19)),
                 t_empty))
             )))),
    ("IL_AF_Stream_Exec.i_Exec_Comp_Stream_Acc_Output__Init__eq_Msg_iUntil_start_event2_conv",
     "[| Suc 0 < ?k; ?m ~= NoMsg; !!t. ?event t = (t mod ?k = Suc 0);
         ?t0.0 = Suc (?t * ?k);
         ?s =
         ?output_fun o
         i_Exec_Comp_Stream_Init ?trans_fun (?input \<odot> ?k) ?c |]
      ==> (i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c
            ?t =
           ?m) =
          (?s ?t0.0 = ?m &
           (\<circle> t' ?t0.0 [0\<dots>].
               ?s t1 = NoMsg. t1 \<U> t2 [0\<dots>] \<oplus> t'.
               ?event t2) |
           (\<circle> t' ?t0.0 [0\<dots>].
               ~ ?event t1. t1 \<U> t2 [0\<dots>] \<oplus> t'.
               ?s t2 = ?m &
               ~ ?event t2 &
               (\<circle> t'' t2 [0\<dots>].
                   ?s t3 = NoMsg. t3 \<U> t4 [0\<dots>] \<oplus> t''.
                   ?event t4)))",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 20, template_hole 19),
          template_var 9),
        template_negation
         (template_equation (template_var 8, template_hole 16)),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_equation
         (template_var 6,
          template_app
           (template_hole 20,
            template_app
             (template_app (template_hole 11, template_var 5),
              template_var 9))),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 9, template_var 3),
            template_app
             (template_app
               (template_app (template_hole 8, template_var 2),
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_var 9)),
              template_var 0)))],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 6, template_var 9),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0),
             template_var 5),
           template_var 8),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 17,
                         template_app (template_var 4, template_var 6)),
                       template_var 8)),
                   template_app
                    (template_app
                      (template_app (template_hole 3, template_var 6),
                       template_app (template_hole 2, template_hole 19)),
                     t_empty))),
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 6),
                   template_app (template_hole 2, template_hole 19)),
                 t_empty))
             )))),
    ("IL_AF_Stream_Exec.i_Exec_Comp_Stream_Acc_Output__eq_Msg_State_Idle_conv2'",
     "[| Suc 0 < ?k;
         State_Idle ?localState ?output_fun ?trans_fun
          (i_Exec_Comp_Stream_Acc_LocalState ?k ?localState ?trans_fun
            ?input ?c ?t);
         ?m ~= NoMsg; ?t0.0 = ?t * ?k;
         ?s = i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c |]
      ==> (i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c
            ?t =
           ?m) =
          ((\<diamond> t1 [0\<dots>,?k - Suc 0] \<oplus> ?t0.0.
               ?output_fun (?s t1) = ?m &
               State_Idle ?localState ?output_fun ?trans_fun
                (?localState (?s t1))) |
           (\<diamond> t1 [0\<dots>,?k - Suc 0] \<oplus> ?t0.0.
               ?output_fun (?s t1) = ?m &
               (\<circle> t2 t1 [0\<dots>].
                   ?output_fun (?s t3) = NoMsg.
                   t3 \<U> t4 [0\<dots>] \<oplus> t2.
                   ?output_fun (?s t4) = NoMsg &
                   State_Idle ?localState ?output_fun ?trans_fun
                    (?localState (?s t4)))))",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 22, template_hole 21),
          template_var 9),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 20, template_var 8),
                  template_var 7),
                template_var 6),
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 19, template_var 9),
                        template_var 8),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3))
            ),
        template_negation
         (template_equation (template_var 2, template_hole 16)),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 14, template_var 3),
            template_var 9)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_app (template_hole 12, template_var 6),
              template_app
               (template_app (template_hole 11, template_var 5),
                template_var 9)),
            template_var 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 17,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 9, template_var 9),
                       template_var 7),
                     template_var 6),
                   template_var 5),
                 template_var 4),
               template_var 3)),
           template_var 2),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_hole 21),
                       template_app
                        (template_app (template_hole 4, template_var 9),
                         template_app
                          (template_hole 22, template_hole 21)))),
                   template_var 1)),
               t_empty)),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_hole 21),
                     template_app
                      (template_app (template_hole 4, template_var 9),
                       template_app (template_hole 22, template_hole 21)))),
                 template_var 1)),
             t_empty))))),
    ("IL_AF_Stream_Exec.i_Exec_Comp_Stream_Acc_Output__Init__eq_Msg_iUntil_start_event_conv",
     "[| 0 < ?k; ?m ~= NoMsg; !!t. ?event t = ((t + ?k - Suc 0) mod ?k = 0);
         ?t0.0 = Suc (?t * ?k);
         ?s =
         ?output_fun o
         i_Exec_Comp_Stream_Init ?trans_fun (?input \<odot> ?k) ?c |]
      ==> (i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c
            ?t =
           ?m) =
          (?s ?t0.0 = ?m &
           (\<circle> t' ?t0.0 [0\<dots>].
               ?s t1 = NoMsg. t1 \<U> t2 [0\<dots>] \<oplus> t'.
               ?event t2) |
           (\<circle> t' ?t0.0 [0\<dots>].
               ~ ?event t1. t1 \<U> t2 [0\<dots>] \<oplus> t'.
               ?s t2 = ?m &
               ~ ?event t2 &
               (\<circle> t'' t2 [0\<dots>].
                   ?s t3 = NoMsg. t3 \<U> t4 [0\<dots>] \<oplus> t''.
                   ?event t4)))",
     template_implication
      ([template_inequation (less_than, template_hole 22, template_var 9),
        template_negation
         (template_equation (template_var 8, template_hole 19)),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_equation
         (template_var 6,
          template_app
           (template_hole 12,
            template_app
             (template_app (template_hole 11, template_var 5),
              template_var 9))),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 9, template_var 3),
            template_app
             (template_app
               (template_app (template_hole 8, template_var 2),
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_var 9)),
              template_var 0)))],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 6, template_var 9),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0),
             template_var 5),
           template_var 8),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 20,
                         template_app (template_var 4, template_var 6)),
                       template_var 8)),
                   template_app
                    (template_app
                      (template_app (template_hole 3, template_var 6),
                       template_app (template_hole 2, template_hole 22)),
                     t_empty))),
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 6),
                   template_app (template_hole 2, template_hole 22)),
                 t_empty))
             )))),
    ("IL_AF_Stream_Exec.i_Exec_Comp_Stream_Acc_Output__eq_Msg_before_State_Idle_conv2",
     "[| Suc 0 < ?k;
         State_Idle ?localState ?output_fun ?trans_fun
          (i_Exec_Comp_Stream_Acc_LocalState ?k ?localState ?trans_fun
            ?input ?c ?t);
         ?m ~= NoMsg; ?t0.0 = ?t * ?k;
         ?s = i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c;
         \<box> t1 [0\<dots>,?k - Suc 0] \<oplus> ?t0.0.
            ~ (State_Idle ?localState ?output_fun ?trans_fun
                (?localState (?s t1)) &
               ?output_fun (?s t1) ~= NoMsg) |]
      ==> (i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c
            ?t =
           ?m) =
          (\<diamond> t1 [0\<dots>,?k - Suc 0] \<oplus> ?t0.0.
              ?output_fun (?s t1) = ?m &
              (\<circle> t2 t1 [0\<dots>].
                  ?output_fun (?s t3) = NoMsg.
                  t3 \<U> t4 [0\<dots>] \<oplus> t2.
                  ?output_fun (?s t4) = NoMsg &
                  State_Idle ?localState ?output_fun ?trans_fun
                   (?localState (?s t4))))",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 22, template_hole 21),
          template_var 9),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 20, template_var 8),
                  template_var 7),
                template_var 6),
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 19, template_var 9),
                        template_var 8),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3))
            ),
        template_negation
         (template_equation (template_var 2, template_hole 16)),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 14, template_var 3),
            template_var 9)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_app (template_hole 12, template_var 6),
              template_app
               (template_app (template_hole 11, template_var 5),
                template_var 9)),
            template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_hole 21),
                      template_app
                       (template_app (template_hole 7, template_var 9),
                        template_app
                         (template_hole 22, template_hole 21)))),
                  template_var 1)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 17,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 4, template_var 9),
                       template_var 7),
                     template_var 6),
                   template_var 5),
                 template_var 4),
               template_var 3)),
           template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_hole 21),
                   template_app
                    (template_app (template_hole 7, template_var 9),
                     template_app (template_hole 22, template_hole 21)))),
               template_var 1)),
           t_empty)))),
    ("IL_AF_Stream_Exec.i_Exec_Comp_Stream_Acc_Output__eq_Msg_before_State_Idle_conv",
     "[| Suc 0 < ?k;
         State_Idle ?localState ?output_fun ?trans_fun
          (i_Exec_Comp_Stream_Acc_LocalState ?k ?localState ?trans_fun
            ?input ?c ?t);
         ?m ~= NoMsg; ?t0.0 = ?t * ?k;
         ?s = i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c;
         \<box> t1 [0\<dots>,?k - Suc 0] \<oplus> ?t0.0.
            ~ (State_Idle ?localState ?output_fun ?trans_fun
                (?localState (?s t1)) &
               ?output_fun (?s t1) ~= NoMsg) |]
      ==> (i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c
            ?t =
           ?m) =
          (~ State_Idle ?localState ?output_fun ?trans_fun
              (?localState (?s t1)).
           t1 \<U> t2 [0\<dots>] \<oplus> ?t0.0.
           ?output_fun (?s t2) = ?m &
           (\<circle> t3 t2 [0\<dots>].
               ?output_fun (?s t4) = NoMsg.
               t4 \<U> t5 [0\<dots>] \<oplus> t3.
               ?output_fun (?s t5) = NoMsg &
               State_Idle ?localState ?output_fun ?trans_fun
                (?localState (?s t5))))",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 21, template_hole 20),
          template_var 9),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 19, template_var 8),
                  template_var 7),
                template_var 6),
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 18, template_var 9),
                        template_var 8),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3))
            ),
        template_negation
         (template_equation (template_var 2, template_hole 15)),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 13, template_var 3),
            template_var 9)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_app (template_hole 11, template_var 6),
              template_app
               (template_app (template_hole 10, template_var 5),
                template_var 9)),
            template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_hole 20),
                      template_app
                       (template_app (template_hole 6, template_var 9),
                        template_app
                         (template_hole 21, template_hole 20)))),
                  template_var 1)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 16,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 3, template_var 9),
                       template_var 7),
                     template_var 6),
                   template_var 5),
                 template_var 4),
               template_var 3)),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 8,
                   template_app (template_hole 1, template_hole 20)),
                 template_var 1)),
             t_empty),
           t_empty)))),
    ("IL_AF_Stream_Exec.i_Exec_Comp_Stream_Acc_Output__eq_Msg_State_Idle_conv'",
     "[| Suc 0 < ?k;
         State_Idle ?localState ?output_fun ?trans_fun
          (i_Exec_Comp_Stream_Acc_LocalState ?k ?localState ?trans_fun
            ?input ?c ?t);
         ?m ~= NoMsg; ?t0.0 = ?t * ?k;
         ?s = i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c |]
      ==> (i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c
            ?t =
           ?m) =
          ((~ State_Idle ?localState ?output_fun ?trans_fun
               (?localState (?s t2)).
            t2 \<U> t1 [0\<dots>] \<oplus> ?t0.0.
            ?output_fun (?s t1) = ?m &
            State_Idle ?localState ?output_fun ?trans_fun
             (?localState (?s t1))) |
           (~ State_Idle ?localState ?output_fun ?trans_fun
               (?localState (?s t2)).
            t2 \<U> t1 [0\<dots>] \<oplus> ?t0.0.
            ?output_fun (?s t1) = ?m &
            (\<circle> t3 t1 [0\<dots>].
                ?output_fun (?s t4) = NoMsg.
                t4 \<U> t5 [0\<dots>] \<oplus> t3.
                ?output_fun (?s t5) = NoMsg &
                State_Idle ?localState ?output_fun ?trans_fun
                 (?localState (?s t5)))))",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 19, template_hole 18),
          template_var 9),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 17, template_var 8),
                  template_var 7),
                template_var 6),
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 16, template_var 9),
                        template_var 8),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3))
            ),
        template_negation
         (template_equation (template_var 2, template_hole 13)),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 11, template_var 3),
            template_var 9)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_app (template_hole 9, template_var 6),
              template_app
               (template_app (template_hole 8, template_var 5),
                template_var 9)),
            template_var 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 14,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 6, template_var 9),
                       template_var 7),
                     template_var 6),
                   template_var 5),
                 template_var 4),
               template_var 3)),
           template_var 2),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_hole 18)),
                     template_var 1)),
                 t_empty),
               t_empty)),
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 18)),
                   template_var 1)),
               t_empty),
             t_empty))))),
    ("IL_AF_Stream_Exec.i_Exec_Comp_Stream_Acc_Output__eq_iAll_iUntil_State_Idle_conv2",
     "[| Suc 0 < ?k;
         State_Idle ?localState ?output_fun ?trans_fun
          (i_Exec_Comp_Stream_Acc_LocalState ?k ?localState ?trans_fun
            ?input ?c ?t);
         ?t0.0 = ?t * ?k;
         ?s = i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c |]
      ==> (i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c
            ?t =
           ?m) =
          ((?m = NoMsg -->
            (?output_fun (?s t1) = NoMsg.
             t1 \<U> t2 [0\<dots>] \<oplus> ?t0.0.
             ?output_fun (?s t2) = NoMsg &
             State_Idle ?localState ?output_fun ?trans_fun
              (?localState (?s t2)))) &
           (?m ~= NoMsg -->
            (\<diamond> t1 [0\<dots>,?k - Suc 0] \<oplus> ?t0.0.
                ?output_fun (?s t1) = ?m &
                (State_Idle ?localState ?output_fun ?trans_fun
                  (?localState (?s t1)) |
                 (\<circle> t2 t1 [0\<dots>].
                     ?output_fun (?s t3) = NoMsg.
                     t3 \<U> t4 [0\<dots>] \<oplus> t2.
                     ?output_fun (?s t4) = NoMsg &
                     State_Idle ?localState ?output_fun ?trans_fun
                      (?localState (?s t4)))))))",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 23, template_hole 22),
          template_var 9),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 21, template_var 8),
                  template_var 7),
                template_var 6),
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 20, template_var 9),
                        template_var 8),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3))
            ),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 18, template_var 3),
            template_var 9)),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_app (template_hole 16, template_var 6),
              template_app
               (template_app (template_hole 15, template_var 5),
                template_var 9)),
            template_var 4))],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 12, template_var 9),
                     template_var 7),
                   template_var 6),
                 template_var 5),
               template_var 4),
             template_var 3),
           template_var 0),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app (template_hole 13, template_var 0),
                       template_hole 9)),
                   template_app
                    (template_app
                      (template_app
                        (template_hole 8,
                         template_app
                          (template_app
                            (template_hole 7,
                             template_app
                              (template_hole 6, template_hole 22)),
                           template_var 2)),
                       t_empty),
                     t_empty))),
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 13, template_var 0),
                       template_hole 9))),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app
                          (template_app (template_hole 3, template_hole 22),
                           template_app
                            (template_app (template_hole 2, template_var 9),
                             template_app
                              (template_hole 23, template_hole 22)))),
                       template_var 2)),
                   t_empty)))
             )))),
    ("IL_AF_Stream_Exec.i_Exec_Comp_Stream_Acc_Output__eq_iUntil_State_Idle_conv",
     "[| Suc 0 < ?k;
         State_Idle ?localState ?output_fun ?trans_fun
          (i_Exec_Comp_Stream_Acc_LocalState ?k ?localState ?trans_fun
            ?input ?c ?t);
         ?t0.0 = ?t * ?k;
         ?s = i_Exec_Comp_Stream ?trans_fun (?input \<odot> ?k) ?c |]
      ==> (i_Exec_Comp_Stream_Acc_Output ?k ?output_fun ?trans_fun ?input ?c
            ?t =
           ?m) =
          ((?m = NoMsg -->
            (?output_fun (?s t1) = NoMsg.
             t1 \<U> t2 [0\<dots>] \<oplus> ?t0.0.
             ?output_fun (?s t2) = NoMsg &
             State_Idle ?localState ?output_fun ?trans_fun
              (?localState (?s t2)))) &
           (?m ~= NoMsg -->
            (~ State_Idle ?localState ?output_fun ?trans_fun
                (?localState (?s t2)).
             t2 \<U> t1 [0\<dots>] \<oplus> ?t0.0.
             ?output_fun (?s t1) = ?m &
             (State_Idle ?localState ?output_fun ?trans_fun
               (?localState (?s t1)) |
              (\<circle> t3 t1 [0\<dots>].
                  ?output_fun (?s t4) = NoMsg.
                  t4 \<U> t5 [0\<dots>] \<oplus> t3.
                  ?output_fun (?s t5) = NoMsg &
                  State_Idle ?localState ?output_fun ?trans_fun
                   (?localState (?s t5)))))))",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 20, template_hole 19),
          template_var 9),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 18, template_var 8),
                  template_var 7),
                template_var 6),
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 17, template_var 9),
                        template_var 8),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3))
            ),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 15, template_var 3),
            template_var 9)),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_app (template_hole 13, template_var 6),
              template_app
               (template_app (template_hole 12, template_var 5),
                template_var 9)),
            template_var 4))],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 9, template_var 9),
                     template_var 7),
                   template_var 6),
                 template_var 5),
               template_var 4),
             template_var 3),
           template_var 0),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 10, template_var 0),
                       template_hole 6)),
                   template_app
                    (template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_app
                            (template_hole 4,
                             template_app
                              (template_hole 3, template_hole 19)),
                           template_var 2)),
                       t_empty),
                     t_empty))),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 10, template_var 0),
                       template_hole 6))),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app
                          (template_hole 4,
                           template_app
                            (template_hole 3, template_hole 19)),
                         template_var 2)),
                     t_empty),
                   t_empty)))
             ))))]:
   (string * thm * template) list
### theory "Draft.IL_AF_Stream_ExecMoreTemplates"
### 0.550s elapsed time, 0.815s cpu time, 0.144s GC time
val it = (): unit
