Loading theory "Draft.Szpilrajn" (required by "Draft.SzpilrajnMoreTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SzpilrajnMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SzpilrajnMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SzpilrajnMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.123s elapsed time, 0.517s cpu time, 0.042s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SzpilrajnMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.206s elapsed time, 0.846s cpu time, 0.042s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SzpilrajnMoreTemplates" via "Draft.ExtrEqs")
locale experiment5331110
### theory "Draft.Szpilrajn"
### 0.308s elapsed time, 1.232s cpu time, 0.133s GC time
### theory "HOL-Library.Nat_Bijection"
### 0.324s elapsed time, 1.292s cpu time, 0.133s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SzpilrajnMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.750s elapsed time, 2.379s cpu time, 0.301s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.969s elapsed time, 2.793s cpu time, 0.731s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.831s elapsed time, 4.326s cpu time, 0.909s GC time
Loading theory "Draft.Templates" (required by "Draft.SzpilrajnMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.050s elapsed time, 0.068s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SzpilrajnMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.468s elapsed time, 0.523s cpu time, 0.066s GC time
Loading theory "Draft.SzpilrajnMoreTemplates"
val templateLemmas =
   [("Szpilrajn.asym_asym_factor", "asym (asym_factor ?r)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Szpilrajn.irrefl_asym_factor", "irrefl (asym_factor ?r)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Szpilrajn.sym_sym_factor", "sym (sym_factor ?r)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Szpilrajn.preorder_rtrancl", "Szpilrajn.preorder (?r^*)",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Szpilrajn.disjnt_sym_asym_factor",
     "disjnt (sym_factor ?r) (asym_factor ?r)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0))
         )),
    ("Szpilrajn.asym_factor_id",
     "asym_factor (asym_factor ?r) = asym_factor ?r",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Szpilrajn.sym_factor_idem",
     "sym_factor (sym_factor ?r) = sym_factor ?r",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Szpilrajn.strict_partial_orderD",
     "strict_partial_order ?r ==> irrefl ?r",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Szpilrajn.strict_partial_orderD",
     "strict_partial_order ?r ==> trans ?r",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Szpilrajn.strict_partial_order_acyclic",
     "strict_partial_order ?r ==> acyclic ?r",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Szpilrajn.consistent_if_strongly_consistent",
     "strongly_consistent ?r ==> consistent ?r",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Szpilrajn.refl_not_in_asym_factor", "(?x, ?x) ~: asym_factor ?r",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 1)),
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("Szpilrajn.asym_factor_rtrancl",
     "asym_factor (?r^*) = asym_factor (?r^+)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 2, template_app (template_hole 0, template_var 0)))),
    ("Szpilrajn.sym_asym_factor_Un", "sym_factor ?r Un asym_factor ?r = ?r",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Szpilrajn.trans_asym_factor", "trans ?r ==> trans (asym_factor ?r)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Szpilrajn.trans_sym_factor", "trans ?r ==> trans (sym_factor ?r)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Szpilrajn.consistent_asym_factor",
     "consistent ?r ==> consistent (asym_factor ?r)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Szpilrajn.acyclic_asym_factor_if_consistent",
     "consistent ?r ==> acyclic (asym_factor ?r)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Szpilrajn.acyclic_asym_factor",
     "acyclic ?r ==> acyclic (asym_factor ?r)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Szpilrajn.linear_order_onD", "linear_order_on ?A ?r ==> antisym ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Szpilrajn.linear_order_onD", "linear_order_on ?A ?r ==> trans ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Szpilrajn.preorder_onD", "preorder_on ?A ?r ==> trans ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Szpilrajn.consistent_if_preorder_on",
     "preorder_on ?A ?r ==> consistent ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Szpilrajn.total_preorder_onD", "total_preorder_on ?A ?r ==> trans ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Szpilrajn.asym_factor_asym_rel", "asym ?r ==> asym_factor ?r = ?r",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 0))),
    ("Szpilrajn.sym_factor_absorb_if_sym", "sym ?r ==> sym_factor ?r = ?r",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 0))),
    ("Szpilrajn.linear_order_onD",
     "linear_order_on ?A ?r ==> refl_on ?A ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Szpilrajn.linear_order_onD",
     "linear_order_on ?A ?r ==> total_on ?A ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Szpilrajn.preorder_onD", "preorder_on ?A ?r ==> refl_on ?A ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Szpilrajn.extends_if_strict_extends",
     "strict_extends ?r_ext ?ext ==> extends ?r_ext ?ext",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Szpilrajn.total_preorder_onD",
     "total_preorder_on ?A ?r ==> refl_on ?A ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Szpilrajn.total_preorder_onD",
     "total_preorder_on ?A ?r ==> total_on ?A ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Szpilrajn.sym_factor_reflc", "sym_factor (?r^=) = (sym_factor ?r)^=",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 2, template_var 0)),
         template_hole 0))),
    ("Szpilrajn.refl_on_sym_factor",
     "refl_on ?A ?r ==> refl_on ?A (sym_factor ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Szpilrajn.antisym_Diff_if_strict_extends",
     "strict_extends ?R ?r ==> antisym (?R - ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Szpilrajn.Field_sym_asym_factor_Un",
     "Field (sym_factor ?r) Un Field (asym_factor ?r) = Field ?r",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_hole 2,
           template_app (template_hole 0, template_var 0))),
       template_app (template_hole 2, template_var 0))),
    ("Szpilrajn.sym_factor_mono",
     "?r <= ?s ==> sym_factor ?r <= sym_factor ?s",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Szpilrajn.strict_extends_if_strict_extends_reflc",
     "strict_extends ?r_ext (?r^=) ==> strict_extends ?r_ext ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app (template_hole 1, template_var 0),
                template_hole 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1), template_var 0)
           ))),
    ("Szpilrajn.antisym_if_irrefl_trans",
     "[| irrefl ?r; trans ?r |] ==> antisym ?r",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Szpilrajn.asym_if_irrefl_trans",
     "[| irrefl ?r; trans ?r |] ==> asym ?r",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Szpilrajn.strict_partial_orderI",
     "[| trans ?r; irrefl ?r |] ==> strict_partial_order ?r",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Szpilrajn.consistent_Restr",
     "consistent ?r ==> consistent (Restr ?r ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 0), t_empty)))
           ))),
    ("Szpilrajn.consistent_if_extends_trans",
     "[| extends ?r_ext ?r; trans ?r_ext |] ==> consistent ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Szpilrajn.strict_extends_antisym",
     "[| strict_extends ?R ?r; antisym ?r |] ==> antisym ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Szpilrajn.strongly_consistent_if_trans_strict_extension",
     "[| strict_extends ?r_ext ?r; trans ?r_ext |]
      ==> strongly_consistent ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Szpilrajn.order_extension_iff_consistent",
     "(EX r_ext. extends r_ext ?r & total_preorder r_ext) = consistent ?r",
     template_equation
      (template_app (template_hole 5, t_empty),
       template_app (template_hole 0, template_var 0))),
    ("Szpilrajn.strongly_consistentI",
     "sym_factor (?r^+) <= sym_factor (?r^=) ==> strongly_consistent ?r",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_var 0)),
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Szpilrajn.irrefl_trans_asym_factor_id",
     "[| irrefl ?r; trans ?r |] ==> asym_factor ?r = ?r",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 0))),
    ("Szpilrajn.preorder_onI",
     "[| refl_on ?A ?r; trans ?r |] ==> preorder_on ?A ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Szpilrajn.Szpilrajn",
     "strict_partial_order ?r ==>
      EX r_ext. strict_linear_order r_ext & ?r <= r_ext",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Szpilrajn.acyclic_order_extension",
     "acyclic ?r ==> EX r_ext. strict_linear_order r_ext & ?r <= r_ext",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Szpilrajn.trancl_subs_extends_if_trans",
     "[| extends ?r_ext ?r; trans ?r_ext |] ==> ?r^+ <= ?r_ext",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_var 1))),
    ("Szpilrajn.partial_order_extension",
     "partial_order_on ?A ?r ==>
      EX r_ext. linear_order_on ?A r_ext & ?r <= r_ext",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Szpilrajn.strict_extends_preorder_on",
     "preorder_on ?A ?base_r ==>
      EX r. total_preorder_on ?A r & strict_extends r ?base_r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Szpilrajn.asym_factor_Restr",
     "asym_factor (Restr ?r ?A) = Restr (asym_factor ?r) ?A",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0), t_empty))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 2, template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0), t_empty)))),
    ("Szpilrajn.sym_factor_Restr",
     "sym_factor (Restr ?r ?A) = Restr (sym_factor ?r) ?A",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0), t_empty))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 2, template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0), t_empty)))),
    ("Szpilrajn.asym_factor_tranclE",
     "(?a, ?b) : (asym_factor ?r)^+ ==> (?a, ?b) : ?r^+",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Szpilrajn.extendsI",
     "[| ?r <= ?R; asym_factor ?r <= asym_factor ?R |] ==> extends ?R ?r",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_inequation
         (less_equals, template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Szpilrajn.partial_order_onI",
     "[| refl_on ?A ?r; trans ?r; antisym ?r |] ==> partial_order_on ?A ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Szpilrajn.trans_if_refl_total_consistent",
     "[| refl ?r; total ?r; consistent ?r |] ==> trans ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 3),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Szpilrajn.total_preorder_onI",
     "[| refl_on ?A ?r; trans ?r; total_on ?A ?r |]
      ==> total_preorder_on ?A ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Szpilrajn.asym_factorE",
     "[| (?x, ?y) : asym_factor ?r; (?x, ?y) : ?r ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_app (template_hole 0, template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 2)),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Szpilrajn.order_extension_if_consistent",
     "[| consistent ?r;
         !!r_ext.
            [| extends r_ext ?r; total_preorder r_ext |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Szpilrajn.strict_order_extension_if_consistent",
     "[| strongly_consistent ?r;
         !!r_ext.
            [| strict_extends r_ext ?r; total_preorder r_ext |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Szpilrajn.sym_factorI",
     "[| (?x, ?y) : ?r; (?y, ?x) : ?r |] ==> (?x, ?y) : sym_factor ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Szpilrajn.strict_extends_diff_Id",
     "[| irrefl ?r; trans ?r; strict_extends ?r_ext (?r^=) |]
      ==> strict_extends (?r_ext - Id) ?r",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_hole 1)),
             template_var 1)
           ))),
    ("Szpilrajn.extendsE",
     "[| extends ?R ?r;
         [| ?r <= ?R; asym_factor ?r <= asym_factor ?R |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_inequation
            (less_equals, template_var 1, template_var 2)],
          template_implication
           ([template_inequation
              (less_equals, template_app (template_hole 0, template_var 1),
               template_app (template_hole 0, template_var 2))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Szpilrajn.asym_factorI",
     "[| (?x, ?y) : ?r; (?y, ?x) ~: ?r |] ==> (?x, ?y) : asym_factor ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 1),
                      template_var 2)),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Szpilrajn.linear_order_onI",
     "[| refl_on ?A ?r; trans ?r; antisym ?r; total_on ?A ?r |]
      ==> linear_order_on ?A ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Szpilrajn.consistentI",
     "(!!x y. (x, y) : ?r^+ ==> (y, x) ~: asym_factor ?r) ==>
      consistent ?r",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Szpilrajn.strict_extendsI",
     "[| ?r <= ?R; asym_factor ?r <= asym_factor ?R;
         sym_factor ?R <= (sym_factor ?r)^= |]
      ==> strict_extends ?R ?r",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 1),
          template_app (template_hole 4, template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 3, template_var 0),
          template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 3, template_var 1)),
            template_hole 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Szpilrajn.strict_extends_antisym_Restr",
     "[| strict_extends ?R ?r; antisym (Restr ?r ?A) |]
      ==> antisym (?R - ?r Un Restr ?r ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 1),
                template_app
                 (template_app (template_hole 2, template_var 0), t_empty)))
            )],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   t_empty))))
           ))),
    ("Szpilrajn.sym_factorE",
     "[| (?x, ?y) : sym_factor ?r;
         [| (?x, ?y) : ?r; (?y, ?x) : ?r |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_app (template_hole 0, template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 2)),
                 template_var 1)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 2),
                       template_var 3)),
                   template_var 1)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Szpilrajn.strict_extendsE",
     "[| strict_extends ?R ?r;
         [| ?r <= ?R; asym_factor ?r <= asym_factor ?R;
            sym_factor ?R <= (sym_factor ?r)^= |]
         ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_inequation
            (less_equals, template_var 1, template_var 2)],
          template_implication
           ([template_inequation
              (less_equals, template_app (template_hole 3, template_var 1),
               template_app (template_hole 3, template_var 2))],
            template_implication
             ([template_inequation
                (less_equals,
                 template_app (template_hole 2, template_var 2),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 2, template_var 1)),
                   template_hole 0))],
              template_predicate (template_var 0))))],
       template_predicate (template_var 0))),
    ("Szpilrajn.can_extend_preorder",
     "[| preorder_on ?A ?r; ?y : ?A; ?x : ?A; (?y, ?x) ~: ?r |]
      ==> preorder_on ?A ((insert (?x, ?y) ?r)^+)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_var 3)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 1),
                      template_var 0)),
                  template_var 2)
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 3),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 1)),
                 template_var 2)))
           ))),
    ("Szpilrajn.can_extend_preorder",
     "[| preorder_on ?A ?r; ?y : ?A; ?x : ?A; (?y, ?x) ~: ?r |]
      ==> strict_extends ((insert (?x, ?y) ?r)^+) ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_var 3)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 1),
                      template_var 0)),
                  template_var 2)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_var 1)),
                   template_var 2))),
             template_var 2)
           ))),
    ("Szpilrajn.general_order_extension_iff_consistent",
     "[| !!x y. [| x : ?S; y : ?S; x ~= y |] ==> (x, y) ~: ?Q^+;
         total_preorder_on ?S ?Ord |]
      ==> (EX Ext.
              extends Ext ?Q & total_preorder Ext & Restr Ext ?S = ?Ord) =
          consistent ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 7, t_empty),
         template_app (template_hole 0, template_var 1)))),
    ("Szpilrajn.Zorns_po_lemma_nonempty",
     "[| Partial_order ?r;
         !!C. [| C : Chains ?r; C ~= {} |]
              ==> EX u:Field ?r. ALL a:C. (a, u) : ?r;
         ?r ~= {} |]
      ==> EX m:Field ?r. ALL a:Field ?r. (m, a) : ?r --> a = m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app (template_hole 14, template_var 0)),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 14, template_var 0)),
             t_empty)
           )))]:
   (string * thm * template) list
### theory "Draft.SzpilrajnMoreTemplates"
### 0.270s elapsed time, 0.366s cpu time, 0.000s GC time
val it = (): unit
