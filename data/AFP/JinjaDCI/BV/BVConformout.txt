Loading theory "Draft.Auxiliary" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.WellForm" via "Draft.TypeRel" via "Draft.Decl" via "Draft.Type")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.BVConformMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.BVConformMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.BVConformMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Auxiliary"
### 0.140s elapsed time, 0.569s cpu time, 0.033s GC time
Loading theory "Draft.Type" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.WellForm" via "Draft.TypeRel" via "Draft.Decl")
### theory "HOL-Library.Function_Algebras"
### 0.144s elapsed time, 0.584s cpu time, 0.033s GC time
Loading theory "HOL-Library.Transitive_Closure_Table" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.WellForm" via "Draft.TypeRel")
Proofs for inductive predicate(s) "rtrancl_path"
  Proving monotonicity ...
Found termination order: "size_list size <*mlex*> {}"
Proofs for inductive predicate(s) "rtrancl_tab"
  Proving monotonicity ...
### theory "HOL-Library.Set_Algebras"
### 0.250s elapsed time, 1.008s cpu time, 0.033s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.BVConformMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.325s elapsed time, 1.296s cpu time, 0.121s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.BVConformMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Transitive_Closure_Table"
### 0.327s elapsed time, 1.275s cpu time, 0.158s GC time
Loading theory "HOL-Library.While_Combinator" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Jinja.Semilattices" via "Jinja.Err" via "Jinja.Semilat")
Found termination order: "{}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
Found termination order: "{}"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
### theory "Draft.Type"
### 0.701s elapsed time, 2.754s cpu time, 0.293s GC time
Loading theory "Draft.Decl" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.WellForm" via "Draft.TypeRel")
consts
  right :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "{}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### theory "HOL-Library.While_Combinator"
### 0.424s elapsed time, 1.675s cpu time, 0.136s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.BVConformMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
### theory "Draft.Decl"
### 0.070s elapsed time, 0.282s cpu time, 0.000s GC time
Loading theory "Draft.TypeRel" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.WellForm")
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "subcls1p"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
  Proving monotonicity ...
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  supercls_lst :: "'m prog => char list list => bool"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Proofs for inductive predicate(s) "widen"
  Proving monotonicity ...
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.113s elapsed time, 4.243s cpu time, 0.843s GC time
Loading theory "Jinja.Semilat" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Jinja.Semilattices" via "Jinja.Err")
Proofs for inductive predicate(s) "Methods"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
locale Semilat
  fixes A :: "'a set"
    and r :: "'a => 'a => bool"
    and f :: "'a => 'a => 'a"
  assumes "Semilat A r f"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Fields"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Jinja.Semilat"
### 0.288s elapsed time, 1.144s cpu time, 0.067s GC time
Loading theory "Jinja.Err" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Jinja.Semilattices")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.TypeRel"
### 0.987s elapsed time, 3.742s cpu time, 0.806s GC time
Loading theory "Draft.Value" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.WellForm" via "Draft.SystemClasses" via "Draft.Exceptions" via "Draft.Objects")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.053s elapsed time, 3.998s cpu time, 0.886s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### No equation for constructor "Err"
consts
  ok_val :: "'a err => 'a"
consts
  strict :: "('a => 'b err) => 'a err => 'b err"
Found termination order: "size <*mlex*> {}"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Addr"
consts
  the_Intg :: "val => int"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_Addr :: "val => nat"
consts
  default_val :: "ty => val"
### theory "Draft.Value"
### 0.456s elapsed time, 1.453s cpu time, 0.192s GC time
Loading theory "Draft.Objects" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.WellForm" via "Draft.SystemClasses" via "Draft.Exceptions")
### theory "Jinja.Err"
### 0.640s elapsed time, 2.155s cpu time, 0.295s GC time
Loading theory "Jinja.Listn" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Jinja.Semilattices")
Loading theory "Jinja.Opt" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Jinja.Semilattices")
consts
  coalesce :: "'a err list => 'a list err"
### theory "HOL-Library.Tree"
### 2.232s elapsed time, 8.273s cpu time, 1.358s GC time
Loading theory "Draft.Templates" (required by "Draft.BVConformMoreTemplates" via "Draft.ExtrEqs")
consts
  typeof_h :: "heap => val => ty option"
### theory "Jinja.Opt"
### 0.166s elapsed time, 0.656s cpu time, 0.066s GC time
Loading theory "Jinja.Product" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Jinja.Semilattices")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.070s elapsed time, 0.277s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.BVConformMoreTemplates")
### theory "Jinja.Product"
### 0.153s elapsed time, 0.599s cpu time, 0.063s GC time
### theory "Jinja.Listn"
### 0.340s elapsed time, 1.315s cpu time, 0.129s GC time
Loading theory "Jinja.Semilattices" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType")
Proofs for inductive predicate(s) "iprog"
  Proving monotonicity ...
### theory "Jinja.Semilattices"
### 0.275s elapsed time, 0.840s cpu time, 0.108s GC time
### theory "Draft.Objects"
### 0.665s elapsed time, 2.284s cpu time, 0.237s GC time
Loading theory "Draft.Exceptions" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.WellForm" via "Draft.SystemClasses")
Loading theory "Draft.JVMState" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVMExceptions" via "Draft.JVMInstructions")
### theory "Draft.Exceptions"
### 0.167s elapsed time, 0.507s cpu time, 0.047s GC time
Loading theory "Draft.Conform" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform")
Loading theory "Draft.SystemClasses" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.WellForm")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.646s elapsed time, 2.069s cpu time, 0.219s GC time
### Ambiguous input (line 34 of "$AFP/JinjaDCI/Common/Conform.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>hconf" ("_position" P) ("_position" h))
###   ("\<^const>HOL.conj"
###     ("_tuple"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" obj))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###             ("_applC" ("_position" Some) ("_position" obj)))
###           ("_position" P)))
###       ("_tuple_arg" ("\<^fixed>hconf" ("_position" h) ("_position" obj))))
###     ("_applC" ("_position" preallocated) ("_position" h))))
### ("\<^const>Pure.eq" ("\<^fixed>hconf" ("_position" P) ("_position" h))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" obj))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some) ("_position" obj)))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" h)
###           ("_position" obj))))
###     ("_applC" ("_position" preallocated) ("_position" h))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 39 of "$AFP/JinjaDCI/Common/Conform.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>shconf" ("_position" P) ("_position" h) ("_position" sh))
###   ("_tuple"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" C) ("_idts" ("_position" sfs) ("_position" i)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" C))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" sfs) ("_tuple_arg" ("_position" i)))))
###         ("_position" P)))
###     ("_tuple_arg"
###       ("\<^fixed>shconf" ("_position" h) ("_position" C)
###         ("_position" sfs)))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>shconf" ("_position" P) ("_position" h) ("_position" sh))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" C) ("_idts" ("_position" sfs) ("_position" i)))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" C))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" sfs) ("_tuple_arg" ("_position" i)))))
###       ("\<^const>Conform.soconf" ("_position" P) ("_position" h)
###         ("_position" C) ("_position" sfs)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.SystemClasses"
### 0.073s elapsed time, 0.228s cpu time, 0.000s GC time
Loading theory "Draft.WellForm" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType")
### theory "Draft.Conform"
### 0.197s elapsed time, 0.611s cpu time, 0.051s GC time
### theory "Draft.WellForm"
### 0.281s elapsed time, 0.712s cpu time, 0.092s GC time
Loading theory "Draft.SemiType" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### No equation for constructor "Void"
### No equation for constructor "Boolean"
### No equation for constructor "Integer"
### No equation for constructor "NT"
consts
  the_Class :: "ty => char list"
Found termination order: "{}"
### theory "Draft.SemiType"
### 0.243s elapsed time, 0.505s cpu time, 0.044s GC time
Loading theory "Draft.JVM_SemiType" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.JVMState"
### 0.896s elapsed time, 2.236s cpu time, 0.228s GC time
Loading theory "Draft.JVMInstructions" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVMExceptions")
### theory "Draft.JVM_SemiType"
### 0.231s elapsed time, 0.482s cpu time, 0.045s GC time
### theory "Draft.JVMInstructions"
### 1.720s elapsed time, 2.641s cpu time, 1.138s GC time
Loading theory "Draft.JVMExceptions" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect")
consts
  match_ex_table ::
    "'m prog => char list => nat => ex_table => (nat * nat) option"
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd (snd (snd p))))))
         (fst (snd (snd (snd p))))) <*mlex*>
   {}"
### theory "Draft.JVMExceptions"
### 0.660s elapsed time, 0.730s cpu time, 0.083s GC time
Loading theory "Draft.JVMExecInstr" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.JVMExec")
Loading theory "Draft.Effect" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform" via "Draft.BVSpec")
Found termination order: "{}"
locale prog
  fixes P :: "'a prog"
locale jvm_method
  fixes P :: "'a prog"
    and mxs :: "nat"
    and mxl\<^sub>0 :: "nat"
    and Ts :: "ty list"
    and T\<^sub>r :: "ty"
    and "is" :: "bytecode"
    and xt :: "ex_table"
    and mxl :: "nat"
  defines "mxl == 1 + length Ts + mxl\<^sub>0"
consts
  succs :: "instr => ty list * ty err list => nat => nat list"
### Missing patterns in function definition:
### the_class Void = undefined
### the_class Boolean = undefined
### the_class Integer = undefined
### (1 more)
Found termination order: "{}"
### Missing patterns in function definition:
### !!vb v ve. eff\<^sub>i (Store vb, v, [], ve) = undefined
### !!vb vc v vf. eff\<^sub>i (Getfield vb vc, v, [], vf) = undefined
### !!vb vc v vf. eff\<^sub>i (Putfield vb vc, v, [], vf) = undefined
### (11 more)
consts
  exec_instr ::
    "instr
     => jvm_prog
        => heap
           => val list
              => val list
                 => char list
                    => char list
                       => nat
                          => init_call_status
                             => frame list => sheap => jvm_state"
### theory "Draft.JVMExecInstr"
### 0.830s elapsed time, 1.800s cpu time, 0.241s GC time
Loading theory "Draft.JVMExec" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Proofs for inductive predicate(s) "exec_1p"
  Proving monotonicity ...
### theory "Draft.JVMExec"
### 2.301s elapsed time, 6.070s cpu time, 1.927s GC time
Found termination order: "{}"
locale eff
  fixes P :: "'a prog"
    and mxs :: "nat"
    and mxl\<^sub>0 :: "nat"
    and Ts :: "ty list"
    and T\<^sub>r :: "ty"
    and "is" :: "bytecode"
    and xt :: "ex_table"
    and mxl :: "nat"
    and
    eff\<^sub>i :: "instr => ty list * ty err list => ty list * ty err list"
    and app\<^sub>i :: "instr => nat => ty list * ty err list => bool"
    and
    eff ::
      "instr
       => nat
          => (ty list * ty err list) option
             => (nat * (ty list * ty err list) option) list"
    and app :: "instr => nat => (ty list * ty err list) option => bool"
    and
    norm_eff ::
      "instr
       => nat
          => ty list * ty err list
             => (nat * (ty list * ty err list) option) list"
    and xcpt_app :: "instr => nat => ty list * ty err list => bool"
    and
    xcpt_eff ::
      "instr
       => nat
          => ty list * ty err list
             => (nat * (ty list * ty err list) option) list"
    and mpc :: "nat"
  defines "mxl == 1 + length Ts + mxl\<^sub>0"
    and "mpc == length is"
    and "!!i \<tau>. eff\<^sub>i i \<tau> == eff\<^sub>i (i, P, \<tau>)"
    and
    "!!i pc \<tau>.
        app\<^sub>i i pc \<tau> ==
        app\<^sub>i (i, P, pc, mxs, T\<^sub>r, \<tau>)"
    and "!!i pc \<tau>. xcpt_eff i pc \<tau> == xcpt_eff i P pc \<tau> xt"
    and "!!i pc \<tau>. norm_eff i pc \<tau> == norm_eff i P pc \<tau>"
    and "!!i pc. eff i pc == eff i P pc xt"
    and
    "!!i pc \<tau>. xcpt_app i pc \<tau> == xcpt_app i P pc mxs xt \<tau>"
    and "!!i pc. app i pc == app i P mxs T\<^sub>r pc mpc xt"
### theory "Draft.Effect"
### 8.392s elapsed time, 17.514s cpu time, 4.526s GC time
Loading theory "Draft.BVSpec" (required by "Draft.BVConformMoreTemplates" via "Draft.BVConform")
### theory "Draft.BVSpec"
### 0.112s elapsed time, 0.174s cpu time, 0.026s GC time
Loading theory "Draft.BVConform" (required by "Draft.BVConformMoreTemplates")
Found termination order: "{}"
Found termination order: "{}"
consts
  conf_fs ::
    "jvm_prog
     => heap
        => sheap
           => (char list
               => char list => (ty list * ty err list) option list)
              => char list => char list => nat => ty => frame list => bool"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 429 of "$AFP/JinjaDCI/BV/BVConform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" xp)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" xp)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.BVConform"
### 1.960s elapsed time, 2.293s cpu time, 0.190s GC time
Loading theory "Draft.BVConformMoreTemplates"
val templateLemmas =
   [("BVConform.confT_Err", "?P,?h |- ?x :<=T Err",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("BVConform.confTs_Err",
     "?P,?h |- replicate ?n ?v [:<=T] replicate ?n Err",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0))
         )),
    ("BVConform.confT_OK",
     "(?P,?h |- ?x :<=T OK ?T) = (?P,?h \<turnstile> ?x :\<le> ?T)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("BVConform.conf_clinit_Cons",
     "conf_clinit ?P ?sh (?f # ?frs) ==> conf_clinit ?P ?sh ?frs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("BVConform.reg_widen_Err",
     "?P |- replicate ?n Err [<=T] ?LT = (?LT = replicate ?n Err)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 2)),
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_hole 1)),
              template_var 0)
            )],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_hole 1)))),
    ("BVConform.confTs_map",
     "(?P,?h |- ?vs [:<=T] map OK ?Ts) =
      (?P,?h \<turnstile> ?vs [:\<le>] ?Ts)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0))),
    ("BVConform.conf_clinit_Cons_Cons",
     "conf_clinit ?P ?sh (?f' # ?f # ?frs) ==>
      conf_clinit ?P ?sh (?f' # ?frs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 0, template_var 2),
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("BVConform.confT_hext",
     "[| ?P,?h |- ?x :<=T ?T; ?h \<unlhd> ?h' |] ==> ?P,?h' |- ?x :<=T ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("BVConform.confT_widen",
     "[| ?P,?h |- ?x :<=T ?T; ?P |- ?T <=T ?T' |] ==> ?P,?h |- ?x :<=T ?T'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 4),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("BVConform.confTs_hext",
     "[| ?P,?h |- ?loc [:<=T] ?LT; ?h \<unlhd> ?h' |]
      ==> ?P,?h' |- ?loc [:<=T] ?LT",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 0)),
               template_var 2),
             template_var 1)
           ))),
    ("BVConform.confTs_widen",
     "[| ?P,?h |- ?loc [:<=T] ?LT; ?P |- ?LT [<=T] ?LT' |]
      ==> ?P,?h |- ?loc [:<=T] ?LT'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 1,
                  template_app (template_hole 0, template_var 4)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 4),
                   template_var 3)),
               template_var 2),
             template_var 0)
           ))),
    ("BVConform.confT_cases",
     "(?P,?h |- ?x :<=T ?X) =
      (?X = Err | (EX T. ?X = OK T & ?P,?h \<turnstile> ?x :\<le> T))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_hole 4)),
             template_app (template_hole 3, t_empty))
           ))),
    ("BVConform.correct_state_Cons",
     "?P,?\<Phi> |- (?xp, ?h, ?f # ?frs, ?sh) [ok] ==>
      ?P,?\<Phi> |- (?xp, ?h, ?frs, ?sh) [ok]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 6),
                template_var 5),
              template_app
               (template_app (template_hole 3, template_var 4),
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_app
                   (template_app
                     (template_hole 1,
                      template_app
                       (template_app (template_hole 0, template_var 2),
                        template_var 1)),
                    template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 6),
               template_var 5),
             template_app
              (template_app (template_hole 3, template_var 4),
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0))))
           ))),
    ("BVConform.conf_clinit_shupd'",
     "[| conf_clinit ?P ?sh ?frs; ?sh ?C = \<lfloor>(?sfs, ?i)\<rfloor> |]
      ==> conf_clinit ?P (?sh(?C |-> (?sfs', ?i))) ?frs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_equation
         (template_app (template_var 5, template_var 3),
          template_app
           (template_hole 2,
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 6),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 3),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 1)))),
             template_var 4)
           ))),
    ("BVConform.conf_clinit_shupd",
     "[| conf_clinit ?P ?sh ?frs; distinct (?C # clinit_classes ?frs) |]
      ==> conf_clinit ?P (?sh(?C |-> (?sfs, ?i))) ?frs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 2),
                template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_hole 3),
                    template_var 3))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 8, template_var 5),
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 4),
                   template_var 2),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)))),
             template_var 3)
           ))),
    ("BVConform.conf_clinit_nProc_dist",
     "[| conf_clinit ?P ?sh ?frs;
         ALL sfs. ?sh ?C ~= \<lfloor>(sfs, Processing)\<rfloor> |]
      ==> distinct (?C # clinit_classes ?frs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 1))))
           ))),
    ("BVConform.conf_fs_hext",
     "[| conf_fs ?P ?h ?sh ?\<Phi> ?C ?M ?n ?T\<^sub>r ?frs;
         ?h \<unlhd> ?h' |]
      ==> conf_fs ?P ?h' ?sh ?\<Phi> ?C ?M ?n ?T\<^sub>r ?frs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app (template_hole 1, template_var 9),
                            template_var 8),
                          template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 8),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 1, template_var 9),
                           template_var 0),
                         template_var 7),
                       template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("BVConform.conf_clinit_Cons_nclinit",
     "[| conf_clinit ?P ?sh ?frs; ?M ~= clinit |]
      ==> conf_clinit ?P ?sh ((?stk, ?loc, ?C, ?M, ?pc, No_ics) # ?frs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_negation
         (template_equation (template_var 4, template_hole 7))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 10, template_var 7),
               template_var 6),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 3),
                   template_app
                    (template_app (template_hole 4, template_var 2),
                     template_app
                      (template_app (template_hole 3, template_var 1),
                       template_app
                        (template_app (template_hole 2, template_var 4),
                         template_app
                          (template_app (template_hole 1, template_var 0),
                           template_hole 0)))))),
               template_var 5))
           ))),
    ("BVConform.confTs_Cons1",
     "(?P,?h |- ?x # ?xs [:<=T] ?ys) =
      (EX z zs.
          ?ys = z # zs & ?P,?h |- ?x :<=T z & ?P,?h |- ?xs [:<=T] zs)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 4),
               template_var 3)),
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 4, t_empty))),
    ("BVConform.conf_clinit_diff'",
     "conf_clinit ?P ?sh ((?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs) ==>
      conf_clinit ?P ?sh ((?stk', ?loc', ?C, ?M, ?pc', No_ics) # ?frs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 11),
                template_var 10),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 9),
                    template_app
                     (template_app (template_hole 4, template_var 8),
                      template_app
                       (template_app (template_hole 3, template_var 7),
                        template_app
                         (template_app (template_hole 2, template_var 6),
                          template_app
                           (template_app (template_hole 1, template_var 5),
                            template_var 4)))))),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, template_var 11),
               template_var 10),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_app
                      (template_app (template_hole 3, template_var 7),
                       template_app
                        (template_app (template_hole 2, template_var 6),
                         template_app
                          (template_app (template_hole 1, template_var 0),
                           template_hole 0)))))),
               template_var 3))
           ))),
    ("BVConform.conf_clinit_diff",
     "conf_clinit ?P ?sh ((?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs) ==>
      conf_clinit ?P ?sh ((?stk', ?loc', ?C, ?M, ?pc', ?ics) # ?frs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 11),
                template_var 10),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 9),
                    template_app
                     (template_app (template_hole 3, template_var 8),
                      template_app
                       (template_app (template_hole 2, template_var 7),
                        template_app
                         (template_app (template_hole 1, template_var 6),
                          template_app
                           (template_app (template_hole 0, template_var 5),
                            template_var 4)))))),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, template_var 11),
               template_var 10),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_app
                      (template_app (template_hole 2, template_var 7),
                       template_app
                        (template_app (template_hole 1, template_var 6),
                         template_app
                          (template_app (template_hole 0, template_var 0),
                           template_var 4)))))),
               template_var 3))
           ))),
    ("BVConform.conf_f_shupd'",
     "[| conf_f ?P ?h ?sh (?ST, ?LT) ?ins ?f;
         ?sh ?C = \<lfloor>(?sfs, ?i)\<rfloor> |]
      ==> conf_f ?P ?h (?sh(?C |-> (?sfs', ?i))) (?ST, ?LT) ?ins ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 5, template_var 10),
                      template_var 9),
                    template_var 8),
                  template_app
                   (template_app (template_hole 4, template_var 7),
                    template_var 6)),
                template_var 5),
              template_var 4)
            ),
        template_equation
         (template_app (template_var 8, template_var 3),
          template_app
           (template_hole 2,
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 5, template_var 10),
                     template_var 9),
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 8),
                       template_var 3),
                     template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_var 0),
                         template_var 1)))),
                 template_app
                  (template_app (template_hole 4, template_var 7),
                   template_var 6)),
               template_var 5),
             template_var 4)
           ))),
    ("BVConform.confTs_confT_sup",
     "[| ?P,?h |- ?loc [:<=T] ?LT; ?n < length ?LT; ?LT ! ?n = OK ?T;
         subtype ?P ?T ?T' |]
      ==> ?P,?h \<turnstile> ?loc ! ?n :\<le> ?T'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 8, template_var 6),
                    template_var 5)),
                template_var 4),
              template_var 3)
            ),
        template_inequation
         (less_than, template_var 2,
          template_app (template_hole 6, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 2),
          template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 6),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 6),
                 template_var 5),
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 2)),
             template_var 0)
           ))),
    ("BVConform.conf_fs_shupd'",
     "[| conf_fs ?P ?h ?sh ?\<Phi> ?C\<^sub>0 ?M ?n ?T ?frs;
         ?sh ?C = \<lfloor>(?sfs, ?i)\<rfloor> |]
      ==> conf_fs ?P ?h (?sh(?C |-> (?sfs', ?i))) ?\<Phi> ?C\<^sub>0 ?M ?n
           ?T ?frs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app (template_hole 4, template_var 12),
                            template_var 11),
                          template_var 10),
                        template_var 9),
                      template_var 8),
                    template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_equation
         (template_app (template_var 10, template_var 3),
          template_app
           (template_hole 2,
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 4, template_var 12),
                           template_var 11),
                         template_app
                          (template_app
                            (template_app
                              (template_hole 0, template_var 10),
                             template_var 3),
                           template_app
                            (template_hole 2,
                             template_app
                              (template_app
                                (template_hole 1, template_var 0),
                               template_var 1)))),
                       template_var 9),
                     template_var 8),
                   template_var 7),
                 template_var 6),
               template_var 5),
             template_var 4)
           ))),
    ("BVConform.conf_fs_shupd",
     "[| conf_fs ?P ?h ?sh ?\<Phi> ?C\<^sub>0 ?M ?n ?T ?frs;
         distinct (?C # clinit_classes ?frs) |]
      ==> conf_fs ?P ?h (?sh(?C |-> (?sfs, ?i))) ?\<Phi> ?C\<^sub>0 ?M ?n ?T
           ?frs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app (template_hole 8, template_var 11),
                            template_var 10),
                          template_var 9),
                        template_var 8),
                      template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 2),
                template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_hole 3),
                    template_var 3))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 8, template_var 11),
                           template_var 10),
                         template_app
                          (template_app
                            (template_app (template_hole 2, template_var 9),
                             template_var 2),
                           template_app
                            (template_hole 1,
                             template_app
                              (template_app
                                (template_hole 0, template_var 1),
                               template_var 0)))),
                       template_var 8),
                     template_var 7),
                   template_var 6),
                 template_var 5),
               template_var 4),
             template_var 3)
           ))),
    ("BVConform.valid_ics_shupd",
     "[| ?P,?h,?sh \<turnstile>\<^sub>i (?C, ?M, ?pc, ?ics);
         distinct (?C' # ics_classes ?ics) |]
      ==> ?P,?h,?sh(?C' |->
          (?sfs, ?i')) \<turnstile>\<^sub>i (?C, ?M, ?pc, ?ics)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 9),
                  template_var 8),
                template_var 7),
              template_app
               (template_app (template_hole 8, template_var 6),
                template_app
                 (template_app (template_hole 7, template_var 5),
                  template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3))))
            ),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 2),
                template_app (template_hole 3, template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 9, template_var 9),
                 template_var 8),
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 7),
                   template_var 2),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)))),
             template_app
              (template_app (template_hole 8, template_var 6),
               template_app
                (template_app (template_hole 7, template_var 5),
                 template_app
                  (template_app (template_hole 6, template_var 4),
                   template_var 3))))
           ))),
    ("BVConform.correct_state_Throwing_ex",
     "[| ?P,?\<Phi> |- (?xp, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs,
                        ?sh) [ok];
         ?ics = Throwing ?Cs ?a |]
      ==> EX obj. ?h ?a = \<lfloor>obj\<rfloor>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 14, template_var 13),
                template_var 12),
              template_app
               (template_app (template_hole 13, template_var 11),
                template_app
                 (template_app (template_hole 12, template_var 10),
                  template_app
                   (template_app
                     (template_hole 11,
                      template_app
                       (template_app
                         (template_hole 10,
                          template_app
                           (template_app (template_hole 9, template_var 9),
                            template_app
                             (template_app
                               (template_hole 8, template_var 8),
                              template_app
                               (template_app
                                 (template_hole 7, template_var 7),
                                template_app
                                 (template_app
                                   (template_hole 6, template_var 6),
                                  template_app
                                   (template_app
                                     (template_hole 5, template_var 5),
                                    template_var 4)))))),
                        template_var 3)),
                    template_var 2))))
            ),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("BVConform.conf_clinit_Throwing",
     "conf_clinit ?P ?sh
       ((?stk, ?loc, ?C, ?M, ?pc, Throwing (?C' # ?Cs) ?xcp) # ?fs) ==>
      conf_clinit ?P ?sh
       ((?stk, ?loc, ?C, ?M, ?pc, Throwing ?Cs ?xcp) # ?fs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 10),
                template_var 9),
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 8),
                    template_app
                     (template_app (template_hole 5, template_var 7),
                      template_app
                       (template_app (template_hole 4, template_var 6),
                        template_app
                         (template_app (template_hole 3, template_var 5),
                          template_app
                           (template_app (template_hole 2, template_var 4),
                            template_app
                             (template_app
                               (template_hole 1,
                                template_app
                                 (template_app
                                   (template_hole 0, template_var 3),
                                  template_var 2)),
                              template_var 1))))))),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 8, template_var 10),
               template_var 9),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 8),
                   template_app
                    (template_app (template_hole 5, template_var 7),
                     template_app
                      (template_app (template_hole 4, template_var 6),
                       template_app
                        (template_app (template_hole 3, template_var 5),
                         template_app
                          (template_app (template_hole 2, template_var 4),
                           template_app
                            (template_app (template_hole 1, template_var 2),
                             template_var 1))))))),
               template_var 0))
           ))),
    ("BVConform.correct_state_shupd",
     "[| ?P,?\<Phi> |- (?xp, ?h, ?frs, ?sh) [ok];
         ?sh ?C = \<lfloor>(?sfs, ?i)\<rfloor>;
         distinct (?C # clinit_classes ?frs) |]
      ==> ?P,?\<Phi> |- (?xp, ?h, ?frs, ?sh(?C |-> (?sfs, ?i'))) [ok]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 12, template_var 9),
                template_var 8),
              template_app
               (template_app (template_hole 11, template_var 7),
                template_app
                 (template_app (template_hole 10, template_var 6),
                  template_app
                   (template_app (template_hole 9, template_var 5),
                    template_var 4))))
            ),
        template_equation
         (template_app (template_var 4, template_var 3),
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1))),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 3),
                template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_hole 1),
                    template_var 5))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 12, template_var 9),
               template_var 8),
             template_app
              (template_app (template_hole 11, template_var 7),
               template_app
                (template_app (template_hole 10, template_var 6),
                 template_app
                  (template_app (template_hole 9, template_var 5),
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 4),
                       template_var 3),
                     template_app
                      (template_hole 7,
                       template_app
                        (template_app (template_hole 6, template_var 2),
                         template_var 0)))))))
           ))),
    ("BVConform.conf_f_shupd",
     "[| conf_f ?P ?h ?sh (?ST, ?LT) ?ins ?f;
         ?i = Processing |
         distinct (?C # ics_classes (ics_of ?f)) &
         (curr_method ?f = clinit --> ?C ~= curr_class ?f) |]
      ==> conf_f ?P ?h (?sh(?C |-> (?sfs, ?i))) (?ST, ?LT) ?ins ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 18, template_var 9),
                      template_var 8),
                    template_var 7),
                  template_app
                   (template_app (template_hole 17, template_var 6),
                    template_var 5)),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app (template_hole 15, template_var 2),
                  template_hole 14)),
              template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_hole 12,
                    template_app
                     (template_app (template_hole 11, template_var 1),
                      template_app
                       (template_hole 10,
                        template_app (template_hole 9, template_var 3))))),
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app
                       (template_hole 7,
                        template_app (template_hole 6, template_var 3)),
                      template_hole 5)),
                  template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 7, template_var 1),
                      template_app (template_hole 3, template_var 3))))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 18, template_var 9),
                     template_var 8),
                   template_app
                    (template_app
                      (template_app (template_hole 2, template_var 7),
                       template_var 1),
                     template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 0, template_var 0),
                         template_var 2)))),
                 template_app
                  (template_app (template_hole 17, template_var 6),
                   template_var 5)),
               template_var 4),
             template_var 3)
           ))),
    ("BVConform.conf_clinit_Called_Throwing",
     "conf_clinit ?P ?sh
       ((?stk', ?loc', ?C', clinit, ?pc', ?ics') #
        (?stk, ?loc, ?C, ?M, ?pc, Called ?Cs) # ?fs) ==>
      conf_clinit ?P ?sh
       ((?stk, ?loc, ?C, ?M, ?pc, Throwing (?C' # ?Cs) ?xcp) # ?fs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 14),
                template_var 13),
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 8, template_var 12),
                    template_app
                     (template_app (template_hole 7, template_var 11),
                      template_app
                       (template_app (template_hole 6, template_var 10),
                        template_app
                         (template_app (template_hole 5, template_hole 4),
                          template_app
                           (template_app (template_hole 3, template_var 9),
                            template_var 8)))))),
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 7),
                      template_app
                       (template_app (template_hole 7, template_var 6),
                        template_app
                         (template_app (template_hole 6, template_var 5),
                          template_app
                           (template_app (template_hole 5, template_var 4),
                            template_app
                             (template_app
                               (template_hole 3, template_var 3),
                              template_app
                               (template_hole 2, template_var 2))))))),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 10, template_var 14),
               template_var 13),
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_var 7),
                   template_app
                    (template_app (template_hole 7, template_var 6),
                     template_app
                      (template_app (template_hole 6, template_var 5),
                       template_app
                        (template_app (template_hole 5, template_var 4),
                         template_app
                          (template_app (template_hole 3, template_var 3),
                           template_app
                            (template_app
                              (template_hole 1,
                               template_app
                                (template_app
                                  (template_hole 0, template_var 10),
                                 template_var 2)),
                             template_var 0))))))),
               template_var 1))
           ))),
    ("BVConform.conf_clinit_Invoke",
     "[| conf_clinit ?P ?sh ((?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs);
         ?M' ~= clinit |]
      ==> conf_clinit ?P ?sh
           ((?stk', ?loc', ?C', ?M', ?pc', No_ics) #
            (?stk, ?loc, ?C, ?M, ?pc, No_ics) # ?frs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 13),
                template_var 12),
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 8, template_var 11),
                    template_app
                     (template_app (template_hole 7, template_var 10),
                      template_app
                       (template_app (template_hole 6, template_var 9),
                        template_app
                         (template_app (template_hole 5, template_var 8),
                          template_app
                           (template_app (template_hole 4, template_var 7),
                            template_var 6)))))),
                template_var 5))
            ),
        template_negation
         (template_equation (template_var 4, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 10, template_var 13),
               template_var 12),
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_var 3),
                   template_app
                    (template_app (template_hole 7, template_var 2),
                     template_app
                      (template_app (template_hole 6, template_var 1),
                       template_app
                        (template_app (template_hole 5, template_var 4),
                         template_app
                          (template_app (template_hole 4, template_var 0),
                           template_hole 0)))))),
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, template_var 11),
                     template_app
                      (template_app (template_hole 7, template_var 10),
                       template_app
                        (template_app (template_hole 6, template_var 9),
                         template_app
                          (template_app (template_hole 5, template_var 8),
                           template_app
                            (template_app (template_hole 4, template_var 7),
                             template_hole 0)))))),
                 template_var 5)))
           ))),
    ("BVConform.conf_clinit_Called",
     "[| conf_clinit ?P ?sh
          ((?stk, ?loc, ?C, ?M, ?pc, Called (?C' # ?Cs)) # ?frs);
         ?P \<turnstile> ?C' sees clinit, Static :  []\<rightarrow>Void = (?mxs',
                                     ?mxl', ?ins', ?xt') in ?C' |]
      ==> conf_clinit ?P ?sh
           (create_init_frame ?P ?C' #
            (?stk, ?loc, ?C, ?M, ?pc, Called ?Cs) # ?frs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 17, template_var 13),
                template_var 12),
              template_app
               (template_app
                 (template_hole 16,
                  template_app
                   (template_app (template_hole 15, template_var 11),
                    template_app
                     (template_app (template_hole 14, template_var 10),
                      template_app
                       (template_app (template_hole 13, template_var 9),
                        template_app
                         (template_app (template_hole 12, template_var 8),
                          template_app
                           (template_app (template_hole 11, template_var 7),
                            template_app
                             (template_hole 10,
                              template_app
                               (template_app
                                 (template_hole 9, template_var 6),
                                template_var 5)))))))),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 8, template_var 13),
                          template_var 6),
                        template_hole 7),
                      template_hole 6),
                    template_hole 5),
                  template_hole 4),
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_app
                   (template_app (template_hole 2, template_var 2),
                    template_app
                     (template_app (template_hole 1, template_var 1),
                      template_var 0)))),
              template_var 6)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 17, template_var 13),
               template_var 12),
             template_app
              (template_app
                (template_hole 16,
                 template_app
                  (template_app (template_hole 0, template_var 13),
                   template_var 6)),
               template_app
                (template_app
                  (template_hole 16,
                   template_app
                    (template_app (template_hole 15, template_var 11),
                     template_app
                      (template_app (template_hole 14, template_var 10),
                       template_app
                        (template_app (template_hole 13, template_var 9),
                         template_app
                          (template_app (template_hole 12, template_var 8),
                           template_app
                            (template_app
                              (template_hole 11, template_var 7),
                             template_app
                              (template_hole 10, template_var 5))))))),
                 template_var 4)))
           ))),
    ("BVConform.Called_context_Called_set",
     "Called_context ?P ?D ?i ==> ?i : Called_set",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 9, template_var 0),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app (template_hole 7, t_empty)),
                       template_app (template_hole 7, t_empty))),
                   template_app (template_hole 7, t_empty))),
               template_app (template_hole 7, t_empty)))
           ))),
    ("BVConform.conf_f_Throwing",
     "[| conf_f ?P ?h ?sh (?ST, ?LT) ?is
          (?stk, ?loc, ?C, ?M, ?pc, Called ?Cs);
         is_class ?P ?C'; ?h ?xcp = \<lfloor>?obj\<rfloor>;
         ?sh ?C' = \<lfloor>(?sfs, Processing)\<rfloor> |]
      ==> conf_f ?P ?h ?sh (?ST, ?LT) ?is
           (?stk, ?loc, ?C, ?M, ?pc, Throwing (?C' # ?Cs) ?xcp)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 16, template_var 15),
                      template_var 14),
                    template_var 13),
                  template_app
                   (template_app (template_hole 15, template_var 12),
                    template_var 11)),
                template_var 10),
              template_app
               (template_app (template_hole 14, template_var 9),
                template_app
                 (template_app (template_hole 13, template_var 8),
                  template_app
                   (template_app (template_hole 12, template_var 7),
                    template_app
                     (template_app (template_hole 11, template_var 6),
                      template_app
                       (template_app (template_hole 10, template_var 5),
                        template_app (template_hole 9, template_var 4)))))))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 15),
              template_var 3)
            ),
        template_equation
         (template_app (template_var 14, template_var 2),
          template_app (template_hole 6, template_var 1)),
        template_equation
         (template_app (template_var 13, template_var 3),
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 16, template_var 15),
                     template_var 14),
                   template_var 13),
                 template_app
                  (template_app (template_hole 15, template_var 12),
                   template_var 11)),
               template_var 10),
             template_app
              (template_app (template_hole 14, template_var 9),
               template_app
                (template_app (template_hole 13, template_var 8),
                 template_app
                  (template_app (template_hole 12, template_var 7),
                   template_app
                    (template_app (template_hole 11, template_var 6),
                     template_app
                      (template_app (template_hole 10, template_var 5),
                       template_app
                        (template_app
                          (template_hole 1,
                           template_app
                            (template_app (template_hole 0, template_var 3),
                             template_var 4)),
                         template_var 2)))))))
           ))),
    ("BVConform.conf_clinit_shupd_Called",
     "[| conf_clinit ?P ?sh
          ((?stk, ?loc, ?C, ?M, ?pc, Calling ?C' ?Cs) # ?frs);
         distinct
          (?C' #
           clinit_classes
            ((?stk, ?loc, ?C, ?M, ?pc, Calling ?C' ?Cs) # ?frs));
         is_class ?P ?C' |]
      ==> conf_clinit ?P (?sh(?C' |-> (?sfs, Processing)))
           ((?stk, ?loc, ?C, ?M, ?pc, Called (?C' # ?Cs)) # ?frs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 18, template_var 10),
                template_var 9),
              template_app
               (template_app
                 (template_hole 17,
                  template_app
                   (template_app (template_hole 16, template_var 8),
                    template_app
                     (template_app (template_hole 15, template_var 7),
                      template_app
                       (template_app (template_hole 14, template_var 6),
                        template_app
                         (template_app (template_hole 13, template_var 5),
                          template_app
                           (template_app (template_hole 12, template_var 4),
                            template_app
                             (template_app
                               (template_hole 11, template_var 3),
                              template_var 2))))))),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 10,
              template_app
               (template_app (template_hole 9, template_var 3),
                template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_hole 6),
                    template_app
                     (template_app
                       (template_hole 17,
                        template_app
                         (template_app (template_hole 16, template_var 8),
                          template_app
                           (template_app (template_hole 15, template_var 7),
                            template_app
                             (template_app
                               (template_hole 14, template_var 6),
                              template_app
                               (template_app
                                 (template_hole 13, template_var 5),
                                template_app
                                 (template_app
                                   (template_hole 12, template_var 4),
                                  template_app
                                   (template_app
                                     (template_hole 11, template_var 3),
                                    template_var 2))))))),
                      template_var 1)))))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 10),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 18, template_var 10),
               template_app
                (template_app
                  (template_app (template_hole 4, template_var 9),
                   template_var 3),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_hole 1)))),
             template_app
              (template_app
                (template_hole 17,
                 template_app
                  (template_app (template_hole 16, template_var 8),
                   template_app
                    (template_app (template_hole 15, template_var 7),
                     template_app
                      (template_app (template_hole 14, template_var 6),
                       template_app
                        (template_app (template_hole 13, template_var 5),
                         template_app
                          (template_app (template_hole 12, template_var 4),
                           template_app
                            (template_hole 0,
                             template_app
                              (template_app
                                (template_hole 9, template_var 3),
                               template_var 2)))))))),
               template_var 1))
           ))),
    ("BVConform.conf_clinit_shupd_Calling",
     "[| conf_clinit ?P ?sh
          ((?stk, ?loc, ?C, ?M, ?pc, Calling ?C' ?Cs) # ?frs);
         distinct
          (?C' #
           clinit_classes
            ((?stk, ?loc, ?C, ?M, ?pc, Calling ?C' ?Cs) # ?frs));
         is_class ?P ?C' |]
      ==> conf_clinit ?P (?sh(?C' |-> (?sfs, Processing)))
           ((?stk, ?loc, ?C, ?M, ?pc,
             Calling (fst (the (class ?P ?C'))) (?C' # ?Cs)) #
            ?frs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 20, template_var 10),
                template_var 9),
              template_app
               (template_app
                 (template_hole 19,
                  template_app
                   (template_app (template_hole 18, template_var 8),
                    template_app
                     (template_app (template_hole 17, template_var 7),
                      template_app
                       (template_app (template_hole 16, template_var 6),
                        template_app
                         (template_app (template_hole 15, template_var 5),
                          template_app
                           (template_app (template_hole 14, template_var 4),
                            template_app
                             (template_app
                               (template_hole 13, template_var 3),
                              template_var 2))))))),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 12,
              template_app
               (template_app (template_hole 11, template_var 3),
                template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_hole 8),
                    template_app
                     (template_app
                       (template_hole 19,
                        template_app
                         (template_app (template_hole 18, template_var 8),
                          template_app
                           (template_app (template_hole 17, template_var 7),
                            template_app
                             (template_app
                               (template_hole 16, template_var 6),
                              template_app
                               (template_app
                                 (template_hole 15, template_var 5),
                                template_app
                                 (template_app
                                   (template_hole 14, template_var 4),
                                  template_app
                                   (template_app
                                     (template_hole 13, template_var 3),
                                    template_var 2))))))),
                      template_var 1)))))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 10),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 20, template_var 10),
               template_app
                (template_app
                  (template_app (template_hole 6, template_var 9),
                   template_var 3),
                 template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_hole 3)))),
             template_app
              (template_app
                (template_hole 19,
                 template_app
                  (template_app (template_hole 18, template_var 8),
                   template_app
                    (template_app (template_hole 17, template_var 7),
                     template_app
                      (template_app (template_hole 16, template_var 6),
                       template_app
                        (template_app (template_hole 15, template_var 5),
                         template_app
                          (template_app (template_hole 14, template_var 4),
                           template_app
                            (template_app
                              (template_hole 13,
                               template_app
                                (template_hole 2,
                                 template_app
                                  (template_hole 1,
                                   template_app
                                    (template_app
(template_hole 0, template_var 10),
                                     template_var 3)))),
                             template_app
                              (template_app
                                (template_hole 11, template_var 3),
                               template_var 2)))))))),
               template_var 1))
           )))]:
   (string * thm * template) list
### theory "Draft.BVConformMoreTemplates"
### 0.525s elapsed time, 0.713s cpu time, 0.073s GC time
val it = (): unit
