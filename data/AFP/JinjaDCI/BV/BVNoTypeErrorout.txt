Loading theory "Draft.Auxiliary" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.JVMDefensive" via "Draft.JVMExec" via "Draft.JVMExecInstr" via "Draft.JVMInstructions" via "Draft.JVMState" via "Draft.Objects" via "Draft.TypeRel" via "Draft.Decl" via "Draft.Type")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.157s elapsed time, 0.647s cpu time, 0.050s GC time
Loading theory "HOL-Library.Transitive_Closure_Table" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.JVMDefensive" via "Draft.JVMExec" via "Draft.JVMExecInstr" via "Draft.JVMInstructions" via "Draft.JVMState" via "Draft.Objects" via "Draft.TypeRel")
### theory "Draft.Auxiliary"
### 0.196s elapsed time, 0.806s cpu time, 0.050s GC time
Loading theory "Draft.Type" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.JVMDefensive" via "Draft.JVMExec" via "Draft.JVMExecInstr" via "Draft.JVMInstructions" via "Draft.JVMState" via "Draft.Objects" via "Draft.TypeRel" via "Draft.Decl")
Proofs for inductive predicate(s) "rtrancl_path"
  Proving monotonicity ...
Found termination order: "size_list size <*mlex*> {}"
Proofs for inductive predicate(s) "rtrancl_tab"
  Proving monotonicity ...
### theory "HOL-Library.Set_Algebras"
### 0.273s elapsed time, 1.112s cpu time, 0.050s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.400s elapsed time, 1.601s cpu time, 0.152s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Transitive_Closure_Table"
### 0.358s elapsed time, 1.418s cpu time, 0.103s GC time
Loading theory "HOL-Library.While_Combinator" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Jinja.Semilattices" via "Jinja.Err" via "Jinja.Semilat")
Found termination order: "{}"
Found termination order: "{}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "{}"
consts
  snth :: "'a stream => nat => 'a"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  stake :: "nat => 'a stream => 'a list"
### theory "HOL-Library.While_Combinator"
### 0.477s elapsed time, 1.883s cpu time, 0.232s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.ExtrEqs")
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
### theory "Draft.Type"
### 1.116s elapsed time, 4.232s cpu time, 0.872s GC time
Loading theory "Draft.Decl" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.JVMDefensive" via "Draft.JVMExec" via "Draft.JVMExecInstr" via "Draft.JVMInstructions" via "Draft.JVMState" via "Draft.Objects" via "Draft.TypeRel")
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Decl"
### 0.097s elapsed time, 0.379s cpu time, 0.042s GC time
Loading theory "Draft.TypeRel" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.JVMDefensive" via "Draft.JVMExec" via "Draft.JVMExecInstr" via "Draft.JVMInstructions" via "Draft.JVMState" via "Draft.Objects")
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.187s elapsed time, 4.525s cpu time, 0.811s GC time
Loading theory "Jinja.Semilat" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Jinja.Semilattices" via "Jinja.Err")
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "subcls1p"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  supercls_lst :: "'m prog => char list list => bool"
Proofs for inductive predicate(s) "widen"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
locale Semilat
  fixes A :: "'a set"
    and r :: "'a => 'a => bool"
    and f :: "'a => 'a => 'a"
  assumes "Semilat A r f"
Proofs for inductive predicate(s) "Methods"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Fields"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "Jinja.Semilat"
### 0.445s elapsed time, 1.742s cpu time, 0.258s GC time
Loading theory "Jinja.Err" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Jinja.Semilattices")
### theory "HOL-Library.BigO"
### 1.084s elapsed time, 4.114s cpu time, 0.837s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.TypeRel"
### 0.875s elapsed time, 3.303s cpu time, 0.355s GC time
Loading theory "Draft.Value" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.JVMDefensive" via "Draft.JVMExec" via "Draft.JVMExecInstr" via "Draft.JVMInstructions" via "Draft.JVMState" via "Draft.Objects")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### No equation for constructor "Err"
consts
  ok_val :: "'a err => 'a"
consts
  strict :: "('a => 'b err) => 'a err => 'b err"
Found termination order: "size <*mlex*> {}"
### theory "Jinja.Err"
### 0.939s elapsed time, 2.967s cpu time, 1.053s GC time
Loading theory "Jinja.Listn" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Jinja.Semilattices")
Loading theory "Jinja.Opt" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Jinja.Semilattices")
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Addr"
consts
  the_Intg :: "val => int"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_Addr :: "val => nat"
consts
  default_val :: "ty => val"
### theory "Draft.Value"
### 0.751s elapsed time, 2.380s cpu time, 0.957s GC time
Loading theory "Draft.Objects" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.JVMDefensive" via "Draft.JVMExec" via "Draft.JVMExecInstr" via "Draft.JVMInstructions" via "Draft.JVMState")
consts
  coalesce :: "'a err list => 'a list err"
### theory "HOL-Library.Tree"
### 2.796s elapsed time, 10.124s cpu time, 2.225s GC time
Loading theory "Draft.Templates" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.ExtrEqs")
### theory "Jinja.Opt"
### 0.194s elapsed time, 0.771s cpu time, 0.107s GC time
Loading theory "Jinja.Product" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Jinja.Semilattices")
consts
  typeof_h :: "heap => val => ty option"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.135s elapsed time, 0.527s cpu time, 0.107s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.BVNoTypeErrorMoreTemplates")
### theory "Jinja.Product"
### 0.174s elapsed time, 0.690s cpu time, 0.080s GC time
### theory "Jinja.Listn"
### 0.378s elapsed time, 1.478s cpu time, 0.188s GC time
Loading theory "Jinja.Semilattices" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType")
### theory "Jinja.Semilattices"
### 0.259s elapsed time, 0.779s cpu time, 0.000s GC time
Proofs for inductive predicate(s) "iprog"
  Proving monotonicity ...
### theory "Draft.Objects"
### 0.719s elapsed time, 2.351s cpu time, 0.267s GC time
Loading theory "Draft.Exceptions" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.JVMDefensive" via "Draft.JVMExec" via "Draft.JVMExecInstr" via "Draft.JVMExceptions")
Loading theory "Draft.JVMState" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.JVMDefensive" via "Draft.JVMExec" via "Draft.JVMExecInstr" via "Draft.JVMInstructions")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.697s elapsed time, 2.128s cpu time, 0.160s GC time
### theory "Draft.Exceptions"
### 0.247s elapsed time, 0.668s cpu time, 0.079s GC time
Loading theory "Draft.Conform" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.JVMDefensive")
Loading theory "Draft.SystemClasses" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.WellForm")
### Ambiguous input (line 34 of "$AFP/JinjaDCI/Common/Conform.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>hconf" ("_position" P) ("_position" h))
###   ("\<^const>HOL.conj"
###     ("_tuple"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" obj))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###             ("_applC" ("_position" Some) ("_position" obj)))
###           ("_position" P)))
###       ("_tuple_arg" ("\<^fixed>hconf" ("_position" h) ("_position" obj))))
###     ("_applC" ("_position" preallocated) ("_position" h))))
### ("\<^const>Pure.eq" ("\<^fixed>hconf" ("_position" P) ("_position" h))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" obj))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some) ("_position" obj)))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" h)
###           ("_position" obj))))
###     ("_applC" ("_position" preallocated) ("_position" h))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 39 of "$AFP/JinjaDCI/Common/Conform.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>shconf" ("_position" P) ("_position" h) ("_position" sh))
###   ("_tuple"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" C) ("_idts" ("_position" sfs) ("_position" i)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" C))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" sfs) ("_tuple_arg" ("_position" i)))))
###         ("_position" P)))
###     ("_tuple_arg"
###       ("\<^fixed>shconf" ("_position" h) ("_position" C)
###         ("_position" sfs)))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>shconf" ("_position" P) ("_position" h) ("_position" sh))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" C) ("_idts" ("_position" sfs) ("_position" i)))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" C))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" sfs) ("_tuple_arg" ("_position" i)))))
###       ("\<^const>Conform.soconf" ("_position" P) ("_position" h)
###         ("_position" C) ("_position" sfs)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.SystemClasses"
### 0.106s elapsed time, 0.314s cpu time, 0.000s GC time
Loading theory "Draft.WellForm" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType")
### theory "Draft.Conform"
### 0.290s elapsed time, 0.886s cpu time, 0.086s GC time
### theory "Draft.WellForm"
### 0.337s elapsed time, 0.866s cpu time, 0.086s GC time
Loading theory "Draft.SemiType" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### No equation for constructor "Void"
### No equation for constructor "Boolean"
### No equation for constructor "Integer"
### No equation for constructor "NT"
consts
  the_Class :: "ty => char list"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.SemiType"
### 0.623s elapsed time, 1.732s cpu time, 1.183s GC time
Loading theory "Draft.JVM_SemiType" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect")
Found termination order: "{}"
### theory "Draft.JVMState"
### 1.385s elapsed time, 3.746s cpu time, 1.349s GC time
Loading theory "Draft.JVMInstructions" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.JVMDefensive" via "Draft.JVMExec" via "Draft.JVMExecInstr")
### theory "Draft.JVM_SemiType"
### 0.302s elapsed time, 0.659s cpu time, 0.106s GC time
### theory "Draft.JVMInstructions"
### 1.650s elapsed time, 2.159s cpu time, 0.394s GC time
Loading theory "Draft.JVMExceptions" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.JVMDefensive" via "Draft.JVMExec" via "Draft.JVMExecInstr")
consts
  match_ex_table ::
    "'m prog => char list => nat => ex_table => (nat * nat) option"
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd (snd (snd p))))))
         (fst (snd (snd (snd p))))) <*mlex*>
   {}"
### theory "Draft.JVMExceptions"
### 0.776s elapsed time, 0.853s cpu time, 0.087s GC time
Loading theory "Draft.JVMExecInstr" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.JVMDefensive" via "Draft.JVMExec")
Loading theory "Draft.Effect" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec")
Found termination order: "{}"
locale prog
  fixes P :: "'a prog"
locale jvm_method
  fixes P :: "'a prog"
    and mxs :: "nat"
    and mxl\<^sub>0 :: "nat"
    and Ts :: "ty list"
    and T\<^sub>r :: "ty"
    and "is" :: "bytecode"
    and xt :: "ex_table"
    and mxl :: "nat"
  defines "mxl == 1 + length Ts + mxl\<^sub>0"
consts
  succs :: "instr => ty list * ty err list => nat => nat list"
### Missing patterns in function definition:
### the_class Void = undefined
### the_class Boolean = undefined
### the_class Integer = undefined
### (1 more)
Found termination order: "{}"
### Missing patterns in function definition:
### !!vb v ve. eff\<^sub>i (Store vb, v, [], ve) = undefined
### !!vb vc v vf. eff\<^sub>i (Getfield vb vc, v, [], vf) = undefined
### !!vb vc v vf. eff\<^sub>i (Putfield vb vc, v, [], vf) = undefined
### (11 more)
consts
  exec_instr ::
    "instr
     => jvm_prog
        => heap
           => val list
              => val list
                 => char list
                    => char list
                       => nat
                          => init_call_status
                             => frame list => sheap => jvm_state"
### theory "Draft.JVMExecInstr"
### 1.556s elapsed time, 4.018s cpu time, 1.968s GC time
Loading theory "Draft.JVMExec" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.JVMDefensive")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Proofs for inductive predicate(s) "exec_1p"
  Proving monotonicity ...
### theory "Draft.JVMExec"
### 2.218s elapsed time, 5.339s cpu time, 0.546s GC time
Loading theory "Draft.JVMDefensive" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
consts
  check_instr ::
    "instr
     => jvm_prog
        => heap
           => val list
              => val list
                 => char list
                    => char list => nat => frame list => sheap => bool"
Proofs for inductive predicate(s) "exec_1_dp"
  Proving monotonicity ...
### theory "Draft.JVMDefensive"
### 1.147s elapsed time, 2.480s cpu time, 0.337s GC time
Found termination order: "{}"
locale eff
  fixes P :: "'a prog"
    and mxs :: "nat"
    and mxl\<^sub>0 :: "nat"
    and Ts :: "ty list"
    and T\<^sub>r :: "ty"
    and "is" :: "bytecode"
    and xt :: "ex_table"
    and mxl :: "nat"
    and
    eff\<^sub>i :: "instr => ty list * ty err list => ty list * ty err list"
    and app\<^sub>i :: "instr => nat => ty list * ty err list => bool"
    and
    eff ::
      "instr
       => nat
          => (ty list * ty err list) option
             => (nat * (ty list * ty err list) option) list"
    and app :: "instr => nat => (ty list * ty err list) option => bool"
    and
    norm_eff ::
      "instr
       => nat
          => ty list * ty err list
             => (nat * (ty list * ty err list) option) list"
    and xcpt_app :: "instr => nat => ty list * ty err list => bool"
    and
    xcpt_eff ::
      "instr
       => nat
          => ty list * ty err list
             => (nat * (ty list * ty err list) option) list"
    and mpc :: "nat"
  defines "mxl == 1 + length Ts + mxl\<^sub>0"
    and "mpc == length is"
    and "!!i \<tau>. eff\<^sub>i i \<tau> == eff\<^sub>i (i, P, \<tau>)"
    and
    "!!i pc \<tau>.
        app\<^sub>i i pc \<tau> ==
        app\<^sub>i (i, P, pc, mxs, T\<^sub>r, \<tau>)"
    and "!!i pc \<tau>. xcpt_eff i pc \<tau> == xcpt_eff i P pc \<tau> xt"
    and "!!i pc \<tau>. norm_eff i pc \<tau> == norm_eff i P pc \<tau>"
    and "!!i pc. eff i pc == eff i P pc xt"
    and
    "!!i pc \<tau>. xcpt_app i pc \<tau> == xcpt_app i P pc mxs xt \<tau>"
    and "!!i pc. app i pc == app i P mxs T\<^sub>r pc mpc xt"
### theory "Draft.Effect"
### 9.210s elapsed time, 20.250s cpu time, 3.250s GC time
Loading theory "Draft.BVSpec" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.BVSpecTypeSafe" via "Draft.BVConform")
### theory "Draft.BVSpec"
### 0.099s elapsed time, 0.138s cpu time, 0.000s GC time
Loading theory "Draft.BVConform" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.BVSpecTypeSafe")
Found termination order: "{}"
Found termination order: "{}"
consts
  conf_fs ::
    "jvm_prog
     => heap
        => sheap
           => (char list
               => char list => (ty list * ty err list) option list)
              => char list => char list => nat => ty => frame list => bool"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 429 of "$AFP/JinjaDCI/BV/BVConform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" xp)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" xp)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.BVConform"
### 1.958s elapsed time, 2.337s cpu time, 0.231s GC time
Loading theory "Draft.ClassAdd" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.BVSpecTypeSafe" via "Draft.StartProg")
### Ambiguous input (line 622 of "$AFP/JinjaDCI/BV/ClassAdd.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" h)
###     ("_position" obj)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" h)
###     ("_position" obj)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 624 of "$AFP/JinjaDCI/BV/ClassAdd.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state"
###     ("_applC" ("_position" class_add)
###       ("_cargs" ("_position" P)
###         ("_tuple" ("_position" C) ("_tuple_arg" ("_position" cdec)))))
###     ("_position" h) ("_position" obj)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf"
###     ("_applC" ("_position" class_add)
###       ("_cargs" ("_position" P)
###         ("_tuple" ("_position" C) ("_tuple_arg" ("_position" cdec)))))
###     ("_position" h) ("_position" obj)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.ClassAdd"
### 0.419s elapsed time, 0.533s cpu time, 0.154s GC time
Loading theory "Draft.StartProg" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError" via "Draft.BVSpecTypeSafe")
Found termination order: "{}"
### theory "Draft.StartProg"
### 0.186s elapsed time, 0.186s cpu time, 0.000s GC time
Loading theory "Draft.BVSpecTypeSafe" (required by "Draft.BVNoTypeErrorMoreTemplates" via "Draft.BVNoTypeError")
### Ambiguous input (line 78 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder" ("_position" f)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>)
###         ("_tuple" ("_position" None)
###           ("_tuple_args" ("_position" h)
###             ("_tuple_args"
###               ("\<^const>List.list.Cons" ("_position" f) ("_position" frs))
###               ("_tuple_arg" ("_position" sh)))))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" curr_method) ("_position" f))
###           ("_position" clinit)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>)
###           ("_applC" ("_position" find_handler)
###             ("_cargs" ("_position" P)
###               ("_cargs" ("_position" xcp)
###                 ("_cargs" ("_position" h)
###                   ("_cargs" ("_position" frs) ("_position" sh)))))))))))
### ("\<^const>Pure.all_binder" ("_position" f)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_tuple" ("_position" None)
###           ("_tuple_args" ("_position" h)
###             ("_tuple_args"
###               ("\<^const>List.list.Cons" ("_position" f) ("_position" frs))
###               ("_tuple_arg" ("_position" sh)))))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" curr_method) ("_position" f))
###           ("_position" clinit)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>)
###           ("_applC" ("_position" find_handler)
###             ("_cargs" ("_position" P)
###               ("_cargs" ("_position" xcp)
###                 ("_cargs" ("_position" h)
###                   ("_cargs" ("_position" frs) ("_position" sh)))))))))))
### ("\<^const>Pure.all_binder" ("_position" f)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>)
###         ("_tuple" ("_position" None)
###           ("_tuple_args" ("_position" h)
###             ("_tuple_args"
###               ("\<^const>List.list.Cons" ("_position" f) ("_position" frs))
###               ("_tuple_arg" ("_position" sh)))))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" curr_method) ("_position" f))
###           ("_position" clinit)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_applC" ("_position" find_handler)
###             ("_cargs" ("_position" P)
###               ("_cargs" ("_position" xcp)
###                 ("_cargs" ("_position" h)
###                   ("_cargs" ("_position" frs) ("_position" sh)))))))))))
### ("\<^const>Pure.all_binder" ("_position" f)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_tuple" ("_position" None)
###           ("_tuple_args" ("_position" h)
###             ("_tuple_args"
###               ("\<^const>List.list.Cons" ("_position" f) ("_position" frs))
###               ("_tuple_arg" ("_position" sh)))))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" curr_method) ("_position" f))
###           ("_position" clinit)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_applC" ("_position" find_handler)
###             ("_cargs" ("_position" P)
###               ("_cargs" ("_position" xcp)
###                 ("_cargs" ("_position" h)
###                   ("_cargs" ("_position" frs) ("_position" sh)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 192 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" fst)
###           ("_applC" ("_position" exec_instr)
###             ("_cargs"
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_cargs" ("_position" P)
###                 ("_cargs" ("_position" h)
###                   ("_cargs" ("_position" stk)
###                     ("_cargs" ("_position" vars)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("_position" M)
###                           ("_cargs" ("_position" pc)
###                             ("_cargs" ("_position" ics)
###                               ("_cargs" ("_position" frs)
###                                 ("_position" sh)))))))))))))
###         ("_applC" ("_position" Some) ("_position" xcp))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###           ("_position" mxs) ("_applC" ("_position" size) ("_position" ins))
###           ("_position" xt)
###           ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###           ("_position" pc)
###           ("_applC" ("_position" \<Phi>)
###             ("_cargs" ("_position" C) ("_position" M)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###             ("_tuple" ("_position" None)
###               ("_tuple_args" ("_position" h)
###                 ("_tuple_args"
###                   ("\<^const>List.list.Cons"
###                     ("_tuple" ("_position" stk)
###                       ("_tuple_args" ("_position" loc)
###                         ("_tuple_args" ("_position" C)
###                           ("_tuple_args" ("_position" M)
###                             ("_tuple_args" ("_position" pc)
###                               ("_tuple_arg" ("_position" ics)))))))
###                     ("_position" frs))
###                   ("_tuple_arg" ("_position" sh))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" obj)
###       ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" xcp))
###         ("_applC" ("_position" Some) ("_position" obj))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" fst)
###           ("_applC" ("_position" exec_instr)
###             ("_cargs"
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_cargs" ("_position" P)
###                 ("_cargs" ("_position" h)
###                   ("_cargs" ("_position" stk)
###                     ("_cargs" ("_position" vars)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("_position" M)
###                           ("_cargs" ("_position" pc)
###                             ("_cargs" ("_position" ics)
###                               ("_cargs" ("_position" frs)
###                                 ("_position" sh)))))))))))))
###         ("_applC" ("_position" Some) ("_position" xcp))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###           ("_position" mxs) ("_applC" ("_position" size) ("_position" ins))
###           ("_position" xt)
###           ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###           ("_position" pc)
###           ("_applC" ("_position" \<Phi>)
###             ("_cargs" ("_position" C) ("_position" M)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>BVConform.correct_state" ("_position" P)
###             ("_position" \<Phi>)
###             ("_tuple" ("_position" None)
###               ("_tuple_args" ("_position" h)
###                 ("_tuple_args"
###                   ("\<^const>List.list.Cons"
###                     ("_tuple" ("_position" stk)
###                       ("_tuple_args" ("_position" loc)
###                         ("_tuple_args" ("_position" C)
###                           ("_tuple_args" ("_position" M)
###                             ("_tuple_args" ("_position" pc)
###                               ("_tuple_arg" ("_position" ics)))))))
###                     ("_position" frs))
###                   ("_tuple_arg" ("_position" sh))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" obj)
###       ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" xcp))
###         ("_applC" ("_position" Some) ("_position" obj))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 222 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 265 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 266 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 622 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 626 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 753 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 757 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 809 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 813 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 885 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 887 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1016 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1019 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1104 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" No_ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" No_ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1107 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1153 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1155 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1357 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1375 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1392 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1424 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### EX z zs. ?ys = z # zs & subtype ?P ?x z & ?P \<turnstile> ?xs [\<le>] zs ==>
### ?P \<turnstile> (?x # ?xs) [\<le>] ?ys
### Ignoring duplicate safe elimination (elim!)
### [| ?P \<turnstile> (?x # ?xs) [\<le>] ?ys;
###    EX z zs.
###       ?ys = z # zs & subtype ?P ?x z & ?P \<turnstile> ?xs [\<le>] zs ==>
###    PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe introduction (intro!)
### EX z zs. ?ys = z # zs & subtype ?P ?x z & ?P \<turnstile> ?xs [\<le>] zs ==>
### ?P \<turnstile> (?x # ?xs) [\<le>] ?ys
### Ignoring duplicate safe elimination (elim!)
### [| ?P \<turnstile> (?x # ?xs) [\<le>] ?ys;
###    EX z zs.
###       ?ys = z # zs & subtype ?P ?x z & ?P \<turnstile> ?xs [\<le>] zs ==>
###    PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate rewrite rule:
### ?P1 \<turnstile> (?x1 # ?xs1) [\<le>] ?ys1 ==
### EX z zs.
###    ?ys1 = z # zs & subtype ?P1 ?x1 z & ?P1 \<turnstile> ?xs1 [\<le>] zs
### Ambiguous input (line 1447 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1450 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1521 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1525 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1584 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" No_ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" No_ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1588 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1630 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1633 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1711 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1715 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1786 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" No_ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" No_ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1790 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1827 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" is_class)
###         ("_cargs" ("_position" P) ("_position" C))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" wf_prog)
###           ("_cargs" ("_position" wt) ("_position" P))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" h)
###       ("_applC" ("_position" blank)
###         ("_cargs" ("_position" P) ("_position" C))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" is_class)
###         ("_cargs" ("_position" P) ("_position" C))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" wf_prog)
###           ("_cargs" ("_position" wt) ("_position" P))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" h)
###       ("_applC" ("_position" blank)
###         ("_cargs" ("_position" P) ("_position" C))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1842 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1845 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1901 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" No_ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" No_ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1904 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1949 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1966 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1982 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1998 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2015 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2031 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2054 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2055 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2204 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_tuple" ("_position" None)
###         ("_tuple_args" ("_position" h)
###           ("_tuple_args"
###             ("\<^const>List.list.Cons"
###               ("_tuple" ("_position" stk)
###                 ("_tuple_args" ("_position" loc)
###                   ("_tuple_args" ("_position" C)
###                     ("_tuple_args" ("_position" M)
###                       ("_tuple_args" ("_position" pc)
###                         ("_tuple_arg" ("_position" ics)))))))
###               ("_position" frs))
###             ("_tuple_arg" ("_position" sh)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" m)
###           ("_idts" ("_position" Ts) ("_position" T))))
###       ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###         ("_position" M) ("_position" b) ("_position" Ts) ("_position" T)
###         ("_position" m) ("_position" C)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_tuple" ("_position" None)
###         ("_tuple_args" ("_position" h)
###           ("_tuple_args"
###             ("\<^const>List.list.Cons"
###               ("_tuple" ("_position" stk)
###                 ("_tuple_args" ("_position" loc)
###                   ("_tuple_args" ("_position" C)
###                     ("_tuple_args" ("_position" M)
###                       ("_tuple_args" ("_position" pc)
###                         ("_tuple_arg" ("_position" ics)))))))
###               ("_position" frs))
###             ("_tuple_arg" ("_position" sh)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" m)
###           ("_idts" ("_position" Ts) ("_position" T))))
###       ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###         ("_position" M) ("_position" b) ("_position" Ts) ("_position" T)
###         ("_position" m) ("_position" C)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2209 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder" ("_position" \<sigma>)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###           ("_position" P)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###             ("_position" \<sigma>)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>JVMExec.exec_1'" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>'))
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>) ("_position" \<sigma>'))))))
### ("\<^const>Pure.all_binder" ("_position" \<sigma>)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###           ("_position" P)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>BVConform.correct_state" ("_position" P)
###             ("_position" \<Phi>) ("_position" \<sigma>)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>JVMExec.exec_1'" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>'))
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>) ("_position" \<sigma>'))))))
### ("\<^const>Pure.all_binder" ("_position" \<sigma>)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###           ("_position" P)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###             ("_position" \<sigma>)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>JVMExec.exec_1'" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>'))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_position" \<sigma>'))))))
### ("\<^const>Pure.all_binder" ("_position" \<sigma>)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###           ("_position" P)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>BVConform.correct_state" ("_position" P)
###             ("_position" \<Phi>) ("_position" \<sigma>)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>JVMExec.exec_1'" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>'))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_position" \<sigma>'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2243 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_args" ("_position" frs)
###                 ("_tuple_arg" ("_position" sh)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" xp) ("_position" None)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" frs)
###               ("\<^const>List.list.Nil")))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" \<sigma>')
###       ("\<^const>HOL.conj"
###         ("\<^const>JVMExec.exec_1'" ("_position" P)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_args" ("_position" frs)
###                 ("_tuple_arg" ("_position" sh)))))
###           ("_position" \<sigma>'))
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>) ("_position" \<sigma>'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_args" ("_position" frs)
###                 ("_tuple_arg" ("_position" sh)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" xp) ("_position" None)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" frs)
###               ("\<^const>List.list.Nil")))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" \<sigma>')
###       ("\<^const>HOL.conj"
###         ("\<^const>JVMExec.exec_1'" ("_position" P)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_args" ("_position" frs)
###                 ("_tuple_arg" ("_position" sh)))))
###           ("_position" \<sigma>'))
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>) ("_position" \<sigma>'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_args" ("_position" frs)
###                 ("_tuple_arg" ("_position" sh)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" xp) ("_position" None)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" frs)
###               ("\<^const>List.list.Nil")))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" \<sigma>')
###       ("\<^const>HOL.conj"
###         ("\<^const>JVMExec.exec_1'" ("_position" P)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_args" ("_position" frs)
###                 ("_tuple_arg" ("_position" sh)))))
###           ("_position" \<sigma>'))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_position" \<sigma>'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_args" ("_position" frs)
###                 ("_tuple_arg" ("_position" sh)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" xp) ("_position" None)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" frs)
###               ("\<^const>List.list.Nil")))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" \<sigma>')
###       ("\<^const>HOL.conj"
###         ("\<^const>JVMExec.exec_1'" ("_position" P)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_args" ("_position" frs)
###                 ("_tuple_arg" ("_position" sh)))))
###           ("_position" \<sigma>'))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_position" \<sigma>'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2248 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMExec.exec_all" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>) ("_position" \<sigma>))
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>) ("_position" \<sigma>')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMExec.exec_all" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_position" \<sigma>))
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>) ("_position" \<sigma>')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMExec.exec_all" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>) ("_position" \<sigma>))
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_position" \<sigma>')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMExec.exec_all" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_position" \<sigma>))
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_position" \<sigma>')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2288 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state"
###     ("_applC" ("_position" start_prog)
###       ("_cargs" ("_position" P) ("_cargs" ("_position" C) ("_position" M))))
###     ("_position" \<Phi>')
###     ("_applC" ("_position" start_state) ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf"
###     ("_applC" ("_position" start_prog)
###       ("_cargs" ("_position" P) ("_cargs" ("_position" C) ("_position" M))))
###     ("_position" \<Phi>')
###     ("_applC" ("_position" start_state) ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2330 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>JVMExec.exec_all"
###       ("_applC" ("_position" start_prog)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C) ("_position" M))))
###       ("_applC" ("_position" start_state) ("_position" P))
###       ("_position" \<sigma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state"
###       ("_applC" ("_position" start_prog)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C) ("_position" M))))
###       ("_position" \<Phi>') ("_position" \<sigma>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>JVMExec.exec_all"
###       ("_applC" ("_position" start_prog)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C) ("_position" M))))
###       ("_applC" ("_position" start_state) ("_position" P))
###       ("_position" \<sigma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf"
###       ("_applC" ("_position" start_prog)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C) ("_position" M))))
###       ("_position" \<Phi>') ("_position" \<sigma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.BVSpecTypeSafe"
### 0.908s elapsed time, 1.074s cpu time, 0.223s GC time
Loading theory "Draft.BVNoTypeError" (required by "Draft.BVNoTypeErrorMoreTemplates")
### Ambiguous input (line 86 of "$AFP/JinjaDCI/BV/BVNoTypeError.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 276 of "$AFP/JinjaDCI/BV/BVNoTypeError.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###       ("_position" P)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>) ("_position" \<sigma>)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMExec.exec_all" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMDefensive.exec_all_d" ("_position" P)
###           ("_applC" ("_position" Normal) ("_position" \<sigma>))
###           ("_applC" ("_position" Normal) ("_position" \<sigma>')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###       ("_position" P)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_position" \<sigma>)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMExec.exec_all" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMDefensive.exec_all_d" ("_position" P)
###           ("_applC" ("_position" Normal) ("_position" \<sigma>))
###           ("_applC" ("_position" Normal) ("_position" \<sigma>')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 305 of "$AFP/JinjaDCI/BV/BVNoTypeError.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale BVNoTypeError.cnf
  fixes P :: "jvm_prog"
    and
    \<Phi> ::
      "char list => char list => (ty list * ty err list) option list"
    and \<sigma> :: "jvm_state"
  assumes "cnf P \<Phi> \<sigma>"
locale start
  fixes P :: "jvm_prog"
    and C :: "char list"
    and M :: "char list"
    and \<sigma> :: "jvm_state type_error"
    and T :: "'a"
    and b :: "jvm_method"
    and P\<^sub>0 :: "jvm_prog"
  assumes "start P C M b"
  defines "\<sigma> == Normal (start_state P)"
    and "P\<^sub>0 == class_add P (start_class C M)"
### theory "Draft.BVNoTypeError"
### 0.306s elapsed time, 0.306s cpu time, 0.000s GC time
Loading theory "Draft.BVNoTypeErrorMoreTemplates"
val templateLemmas =
   [("BVNoTypeError.is_BoolI",
     "?P,?h \<turnstile> ?v :\<le> Boolean ==> is_Bool ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1),
                template_var 0),
              template_hole 1)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("BVNoTypeError.is_IntgI",
     "?P,?h \<turnstile> ?v :\<le> Integer ==> is_Intg ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1),
                template_var 0),
              template_hole 1)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("BVNoTypeError.not_TypeError_eq",
     "(?x ~= TypeError) = (EX t. ?x = Normal t)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app (template_hole 1, t_empty))),
    ("BVNoTypeError.typeof_NoneD",
     "typeof ?v = \<lfloor>?x\<rfloor> ==> ~ is_Addr ?v",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, t_empty), template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 1))
           ))),
    ("BVNoTypeError.is_RefI",
     "[| ?P,?h \<turnstile> ?v :\<le> ?T; is_refT ?T |] ==> is_Ref ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("BVNoTypeError.has_methodI",
     "?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = ?m in ?D ==>
      ?P \<turnstile> ?C has ?M, ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 1, template_var 7),
                          template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 7),
                 template_var 6),
               template_var 5),
             template_var 4)
           ))),
    ("BVNoTypeError.no_type_error",
     "[| wf_jvm_prog\<^bsub>?\<Phi>\<^esub> ?P;
         ?P,?\<Phi> |- ?\<sigma> [ok] |]
      ==> exec_d ?P ?\<sigma> ~= TypeError",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_var 2),
              template_var 0)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("BVNoTypeError.welltyped_commutes",
     "[| wf_jvm_prog\<^bsub>?\<Phi>\<^esub> ?P;
         ?P,?\<Phi> |- ?\<sigma> [ok] |]
      ==> ?P |- Normal ?\<sigma> -jvmd-> Normal ?\<sigma>' = ?P |-
          ?\<sigma> -jvm-> ?\<sigma>'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 3),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("BVNoTypeError.wt_jvm_prog_states_Static",
     "[| wf_jvm_prog\<^bsub>?\<Phi>\<^esub> ?P;
         ?P \<turnstile> ?C sees ?M, Static :  ?Ts\<rightarrow>?T = (?mxs,
                               ?mxl, ?ins, ?et) in ?C;
         ?\<Phi> ?C ?M ! ?pc = ?\<tau>; ?pc < length ?ins |]
      ==> OK ?\<tau> : states ?P ?mxs (length ?Ts + ?mxl)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 11),
              template_var 10)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 13, template_var 10),
                          template_var 9),
                        template_var 8),
                      template_hole 12),
                    template_var 7),
                  template_var 6),
                template_app
                 (template_app (template_hole 11, template_var 5),
                  template_app
                   (template_app (template_hole 10, template_var 4),
                    template_app
                     (template_app (template_hole 9, template_var 3),
                      template_var 2)))),
              template_var 9)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app (template_var 11, template_var 9),
                template_var 8)),
            template_var 1),
          template_var 0),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 5, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 2, template_var 10),
                 template_var 5),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 7)),
                 template_var 4)))
           ))),
    ("BVNoTypeError.wt_jvm_prog_states_NonStatic",
     "[| wf_jvm_prog\<^bsub>?\<Phi>\<^esub> ?P;
         ?P \<turnstile> ?C sees ?M, NonStatic :  ?Ts\<rightarrow>?T = (?mxs,
                                  ?mxl, ?ins, ?et) in ?C;
         ?\<Phi> ?C ?M ! ?pc = ?\<tau>; ?pc < length ?ins |]
      ==> OK ?\<tau> : states ?P ?mxs (1 + length ?Ts + ?mxl)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 11),
              template_var 10)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 14, template_var 10),
                          template_var 9),
                        template_var 8),
                      template_hole 13),
                    template_var 7),
                  template_var 6),
                template_app
                 (template_app (template_hole 12, template_var 5),
                  template_app
                   (template_app (template_hole 11, template_var 4),
                    template_app
                     (template_app (template_hole 10, template_var 3),
                      template_var 2)))),
              template_var 9)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 8,
              template_app
               (template_app (template_var 11, template_var 9),
                template_var 8)),
            template_var 1),
          template_var 0),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 6, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 3, template_var 10),
                 template_var 5),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_app (template_hole 0, template_var 7))),
                 template_var 4)))
           ))),
    ("BVNoTypeError.welltyped_initial_commutes",
     "[| wf_jvm_prog ?P; ~ is_class ?P Start;
         ?P \<turnstile> ?C sees ?M, Static :  []\<rightarrow>Void = ?b in ?C;
         ?M ~= clinit;
         !!b' Ts' T' m' D'.
            ?P \<turnstile> Object sees start_m, b' :  Ts'\<rightarrow>T' = m' in D' ==>
            b' = Static & Ts' = [] & T' = Void |]
      ==> class_add ?P
           (start_class ?C
             ?M) |- Normal (start_state ?P) -jvmd-> Normal ?\<sigma>' =
          class_add ?P (start_class ?C ?M) |- start_state ?P -jvm->
          ?\<sigma>'",
     template_implication
      ([template_predicate
         (template_app (template_hole 27, template_var 4)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 25, template_var 4),
                  template_hole 24)
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 23, template_var 4),
                          template_var 3),
                        template_var 2),
                      template_hole 22),
                    template_hole 21),
                  template_hole 20),
                template_var 1),
              template_var 3)
            ),
        template_negation
         (template_equation (template_var 2, template_hole 18)),
        template_predicate (template_app (template_hole 17, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_var 2)),
                 template_var 4)),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 4))),
           template_app (template_hole 2, template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_var 2)),
                 template_var 4)),
             template_app (template_hole 1, template_var 4)),
           template_var 0))))]:
   (string * thm * template) list
### theory "Draft.BVNoTypeErrorMoreTemplates"
### 0.544s elapsed time, 0.797s cpu time, 0.176s GC time
val it = (): unit
