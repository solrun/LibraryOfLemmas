Loading theory "Draft.Auxiliary" (required by "Draft.BVSpecTypeSafeMoreTemplates" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.WellForm" via "Draft.TypeRel" via "Draft.Decl" via "Draft.Type")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.BVSpecTypeSafeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.BVSpecTypeSafeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.BVSpecTypeSafeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.136s elapsed time, 0.553s cpu time, 0.052s GC time
Loading theory "HOL-Library.Transitive_Closure_Table" (required by "Draft.BVSpecTypeSafeMoreTemplates" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.WellForm" via "Draft.TypeRel")
### theory "Draft.Auxiliary"
### 0.163s elapsed time, 0.666s cpu time, 0.052s GC time
Loading theory "Draft.Type" (required by "Draft.BVSpecTypeSafeMoreTemplates" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.WellForm" via "Draft.TypeRel" via "Draft.Decl")
Proofs for inductive predicate(s) "rtrancl_path"
  Proving monotonicity ...
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.211s elapsed time, 0.856s cpu time, 0.052s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.BVSpecTypeSafeMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Proofs for inductive predicate(s) "rtrancl_tab"
  Proving monotonicity ...
### theory "HOL-Library.Nat_Bijection"
### 0.332s elapsed time, 1.320s cpu time, 0.154s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.BVSpecTypeSafeMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Transitive_Closure_Table"
### 0.359s elapsed time, 1.410s cpu time, 0.188s GC time
Loading theory "HOL-Library.While_Combinator" (required by "Draft.BVSpecTypeSafeMoreTemplates" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Jinja.Semilattices" via "Jinja.Err" via "Jinja.Semilat")
Found termination order: "{}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
consts
  left :: "'a tree => 'a tree"
  Proving monotonicity ...
consts
  right :: "'a tree => 'a tree"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.While_Combinator"
### 0.424s elapsed time, 1.674s cpu time, 0.162s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.BVSpecTypeSafeMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Type"
### 0.965s elapsed time, 3.626s cpu time, 0.916s GC time
Loading theory "Draft.Decl" (required by "Draft.BVSpecTypeSafeMoreTemplates" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.WellForm" via "Draft.TypeRel")
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Decl"
### 0.078s elapsed time, 0.312s cpu time, 0.000s GC time
Loading theory "Draft.TypeRel" (required by "Draft.BVSpecTypeSafeMoreTemplates" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.WellForm")
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Proofs for inductive predicate(s) "subcls1p"
  Proving monotonicity ...
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.100s elapsed time, 4.177s cpu time, 0.861s GC time
Loading theory "Jinja.Semilat" (required by "Draft.BVSpecTypeSafeMoreTemplates" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Jinja.Semilattices" via "Jinja.Err")
consts
  supercls_lst :: "'m prog => char list list => bool"
Proofs for inductive predicate(s) "widen"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Methods"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
locale Semilat
  fixes A :: "'a set"
    and r :: "'a => 'a => bool"
    and f :: "'a => 'a => 'a"
  assumes "Semilat A r f"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Fields"
  Proving monotonicity ...
### theory "Jinja.Semilat"
### 0.325s elapsed time, 1.282s cpu time, 0.166s GC time
Loading theory "Jinja.Err" (required by "Draft.BVSpecTypeSafeMoreTemplates" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Jinja.Semilattices")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.885s elapsed time, 3.488s cpu time, 0.426s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.TypeRel"
### 0.828s elapsed time, 3.234s cpu time, 0.426s GC time
Loading theory "Draft.Value" (required by "Draft.BVSpecTypeSafeMoreTemplates" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.WellForm" via "Draft.SystemClasses" via "Draft.Exceptions" via "Draft.Objects")
### No equation for constructor "Err"
consts
  ok_val :: "'a err => 'a"
Found termination order: "size <*mlex*> {}"
consts
  strict :: "('a => 'b err) => 'a err => 'b err"
### theory "Jinja.Err"
### 0.928s elapsed time, 3.064s cpu time, 1.139s GC time
Loading theory "Jinja.Listn" (required by "Draft.BVSpecTypeSafeMoreTemplates" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Jinja.Semilattices")
Loading theory "Jinja.Opt" (required by "Draft.BVSpecTypeSafeMoreTemplates" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Jinja.Semilattices")
### theory "HOL-Library.Tree"
### 2.510s elapsed time, 9.131s cpu time, 2.268s GC time
Loading theory "Draft.Templates" (required by "Draft.BVSpecTypeSafeMoreTemplates" via "Draft.ExtrEqs")
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Addr"
consts
  the_Intg :: "val => int"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_Addr :: "val => nat"
consts
  default_val :: "ty => val"
### theory "Draft.Value"
### 0.704s elapsed time, 2.218s cpu time, 0.926s GC time
Loading theory "Draft.Objects" (required by "Draft.BVSpecTypeSafeMoreTemplates" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.WellForm" via "Draft.SystemClasses" via "Draft.Exceptions")
consts
  coalesce :: "'a err list => 'a list err"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.098s elapsed time, 0.400s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.BVSpecTypeSafeMoreTemplates")
consts
  typeof_h :: "heap => val => ty option"
### theory "Jinja.Opt"
### 0.177s elapsed time, 0.698s cpu time, 0.087s GC time
Loading theory "Jinja.Product" (required by "Draft.BVSpecTypeSafeMoreTemplates" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Jinja.Semilattices")
### theory "Jinja.Product"
### 0.109s elapsed time, 0.433s cpu time, 0.000s GC time
### theory "Jinja.Listn"
### 0.355s elapsed time, 1.365s cpu time, 0.189s GC time
Loading theory "Jinja.Semilattices" (required by "Draft.BVSpecTypeSafeMoreTemplates" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType")
Proofs for inductive predicate(s) "iprog"
  Proving monotonicity ...
### theory "Jinja.Semilattices"
### 0.267s elapsed time, 0.813s cpu time, 0.062s GC time
### theory "Draft.Objects"
### 0.579s elapsed time, 2.007s cpu time, 0.251s GC time
Loading theory "Draft.Exceptions" (required by "Draft.BVSpecTypeSafeMoreTemplates" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.WellForm" via "Draft.SystemClasses")
Loading theory "Draft.JVMState" (required by "Draft.BVSpecTypeSafeMoreTemplates" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVMExceptions" via "Draft.JVMInstructions")
### theory "Draft.Exceptions"
### 0.155s elapsed time, 0.466s cpu time, 0.000s GC time
Loading theory "Draft.Conform" (required by "Draft.BVSpecTypeSafeMoreTemplates" via "Draft.BVSpecTypeSafe" via "Draft.BVConform")
Loading theory "Draft.SystemClasses" (required by "Draft.BVSpecTypeSafeMoreTemplates" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.WellForm")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.675s elapsed time, 2.230s cpu time, 0.251s GC time
### Ambiguous input (line 34 of "$AFP/JinjaDCI/Common/Conform.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>hconf" ("_position" P) ("_position" h))
###   ("\<^const>HOL.conj"
###     ("_tuple"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" obj))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###             ("_applC" ("_position" Some) ("_position" obj)))
###           ("_position" P)))
###       ("_tuple_arg" ("\<^fixed>hconf" ("_position" h) ("_position" obj))))
###     ("_applC" ("_position" preallocated) ("_position" h))))
### ("\<^const>Pure.eq" ("\<^fixed>hconf" ("_position" P) ("_position" h))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" obj))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some) ("_position" obj)))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" h)
###           ("_position" obj))))
###     ("_applC" ("_position" preallocated) ("_position" h))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 39 of "$AFP/JinjaDCI/Common/Conform.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>shconf" ("_position" P) ("_position" h) ("_position" sh))
###   ("_tuple"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" C) ("_idts" ("_position" sfs) ("_position" i)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" C))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" sfs) ("_tuple_arg" ("_position" i)))))
###         ("_position" P)))
###     ("_tuple_arg"
###       ("\<^fixed>shconf" ("_position" h) ("_position" C)
###         ("_position" sfs)))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>shconf" ("_position" P) ("_position" h) ("_position" sh))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" C) ("_idts" ("_position" sfs) ("_position" i)))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" C))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" sfs) ("_tuple_arg" ("_position" i)))))
###       ("\<^const>Conform.soconf" ("_position" P) ("_position" h)
###         ("_position" C) ("_position" sfs)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.SystemClasses"
### 0.107s elapsed time, 0.351s cpu time, 0.078s GC time
Loading theory "Draft.WellForm" (required by "Draft.BVSpecTypeSafeMoreTemplates" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType")
### theory "Draft.Conform"
### 0.200s elapsed time, 0.626s cpu time, 0.078s GC time
### theory "Draft.WellForm"
### 0.273s elapsed time, 0.673s cpu time, 0.070s GC time
Loading theory "Draft.SemiType" (required by "Draft.BVSpecTypeSafeMoreTemplates" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### No equation for constructor "Void"
### No equation for constructor "Boolean"
### No equation for constructor "Integer"
### No equation for constructor "NT"
consts
  the_Class :: "ty => char list"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.SemiType"
### 0.566s elapsed time, 1.559s cpu time, 1.047s GC time
Loading theory "Draft.JVM_SemiType" (required by "Draft.BVSpecTypeSafeMoreTemplates" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect")
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.JVMState"
### 1.235s elapsed time, 3.342s cpu time, 1.249s GC time
Loading theory "Draft.JVMInstructions" (required by "Draft.BVSpecTypeSafeMoreTemplates" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVMExceptions")
### theory "Draft.JVM_SemiType"
### 0.234s elapsed time, 0.494s cpu time, 0.054s GC time
### theory "Draft.JVMInstructions"
### 1.391s elapsed time, 1.660s cpu time, 0.209s GC time
Loading theory "Draft.JVMExceptions" (required by "Draft.BVSpecTypeSafeMoreTemplates" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect")
consts
  match_ex_table ::
    "'m prog => char list => nat => ex_table => (nat * nat) option"
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd (snd (snd p))))))
         (fst (snd (snd (snd p))))) <*mlex*>
   {}"
### theory "Draft.JVMExceptions"
### 0.988s elapsed time, 1.858s cpu time, 1.200s GC time
Loading theory "Draft.JVMExecInstr" (required by "Draft.BVSpecTypeSafeMoreTemplates" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.JVMExec")
Loading theory "Draft.Effect" (required by "Draft.BVSpecTypeSafeMoreTemplates" via "Draft.BVSpecTypeSafe" via "Draft.BVConform" via "Draft.BVSpec")
Found termination order: "{}"
locale prog
  fixes P :: "'a prog"
locale jvm_method
  fixes P :: "'a prog"
    and mxs :: "nat"
    and mxl\<^sub>0 :: "nat"
    and Ts :: "ty list"
    and T\<^sub>r :: "ty"
    and "is" :: "bytecode"
    and xt :: "ex_table"
    and mxl :: "nat"
  defines "mxl == 1 + length Ts + mxl\<^sub>0"
consts
  succs :: "instr => ty list * ty err list => nat => nat list"
### Missing patterns in function definition:
### the_class Void = undefined
### the_class Boolean = undefined
### the_class Integer = undefined
### (1 more)
Found termination order: "{}"
### Missing patterns in function definition:
### !!vb v ve. eff\<^sub>i (Store vb, v, [], ve) = undefined
### !!vb vc v vf. eff\<^sub>i (Getfield vb vc, v, [], vf) = undefined
### !!vb vc v vf. eff\<^sub>i (Putfield vb vc, v, [], vf) = undefined
### (11 more)
consts
  exec_instr ::
    "instr
     => jvm_prog
        => heap
           => val list
              => val list
                 => char list
                    => char list
                       => nat
                          => init_call_status
                             => frame list => sheap => jvm_state"
### theory "Draft.JVMExecInstr"
### 0.946s elapsed time, 2.049s cpu time, 0.267s GC time
Loading theory "Draft.JVMExec" (required by "Draft.BVSpecTypeSafeMoreTemplates" via "Draft.BVSpecTypeSafe" via "Draft.BVConform")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Proofs for inductive predicate(s) "exec_1p"
  Proving monotonicity ...
### theory "Draft.JVMExec"
### 1.862s elapsed time, 4.525s cpu time, 0.517s GC time
Found termination order: "{}"
locale eff
  fixes P :: "'a prog"
    and mxs :: "nat"
    and mxl\<^sub>0 :: "nat"
    and Ts :: "ty list"
    and T\<^sub>r :: "ty"
    and "is" :: "bytecode"
    and xt :: "ex_table"
    and mxl :: "nat"
    and
    eff\<^sub>i :: "instr => ty list * ty err list => ty list * ty err list"
    and app\<^sub>i :: "instr => nat => ty list * ty err list => bool"
    and
    eff ::
      "instr
       => nat
          => (ty list * ty err list) option
             => (nat * (ty list * ty err list) option) list"
    and app :: "instr => nat => (ty list * ty err list) option => bool"
    and
    norm_eff ::
      "instr
       => nat
          => ty list * ty err list
             => (nat * (ty list * ty err list) option) list"
    and xcpt_app :: "instr => nat => ty list * ty err list => bool"
    and
    xcpt_eff ::
      "instr
       => nat
          => ty list * ty err list
             => (nat * (ty list * ty err list) option) list"
    and mpc :: "nat"
  defines "mxl == 1 + length Ts + mxl\<^sub>0"
    and "mpc == length is"
    and "!!i \<tau>. eff\<^sub>i i \<tau> == eff\<^sub>i (i, P, \<tau>)"
    and
    "!!i pc \<tau>.
        app\<^sub>i i pc \<tau> ==
        app\<^sub>i (i, P, pc, mxs, T\<^sub>r, \<tau>)"
    and "!!i pc \<tau>. xcpt_eff i pc \<tau> == xcpt_eff i P pc \<tau> xt"
    and "!!i pc \<tau>. norm_eff i pc \<tau> == norm_eff i P pc \<tau>"
    and "!!i pc. eff i pc == eff i P pc xt"
    and
    "!!i pc \<tau>. xcpt_app i pc \<tau> == xcpt_app i P pc mxs xt \<tau>"
    and "!!i pc. app i pc == app i P mxs T\<^sub>r pc mpc xt"
### theory "Draft.Effect"
### 7.222s elapsed time, 14.307s cpu time, 1.458s GC time
Loading theory "Draft.BVSpec" (required by "Draft.BVSpecTypeSafeMoreTemplates" via "Draft.BVSpecTypeSafe" via "Draft.BVConform")
### theory "Draft.BVSpec"
### 0.083s elapsed time, 0.116s cpu time, 0.000s GC time
Loading theory "Draft.BVConform" (required by "Draft.BVSpecTypeSafeMoreTemplates" via "Draft.BVSpecTypeSafe")
Found termination order: "{}"
Found termination order: "{}"
consts
  conf_fs ::
    "jvm_prog
     => heap
        => sheap
           => (char list
               => char list => (ty list * ty err list) option list)
              => char list => char list => nat => ty => frame list => bool"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 429 of "$AFP/JinjaDCI/BV/BVConform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" xp)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" xp)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.BVConform"
### 1.631s elapsed time, 1.954s cpu time, 0.233s GC time
Loading theory "Draft.ClassAdd" (required by "Draft.BVSpecTypeSafeMoreTemplates" via "Draft.BVSpecTypeSafe" via "Draft.StartProg")
### Ambiguous input (line 622 of "$AFP/JinjaDCI/BV/ClassAdd.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" h)
###     ("_position" obj)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" h)
###     ("_position" obj)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 624 of "$AFP/JinjaDCI/BV/ClassAdd.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state"
###     ("_applC" ("_position" class_add)
###       ("_cargs" ("_position" P)
###         ("_tuple" ("_position" C) ("_tuple_arg" ("_position" cdec)))))
###     ("_position" h) ("_position" obj)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf"
###     ("_applC" ("_position" class_add)
###       ("_cargs" ("_position" P)
###         ("_tuple" ("_position" C) ("_tuple_arg" ("_position" cdec)))))
###     ("_position" h) ("_position" obj)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.ClassAdd"
### 0.337s elapsed time, 0.389s cpu time, 0.071s GC time
Loading theory "Draft.StartProg" (required by "Draft.BVSpecTypeSafeMoreTemplates" via "Draft.BVSpecTypeSafe")
Found termination order: "{}"
### theory "Draft.StartProg"
### 0.153s elapsed time, 0.153s cpu time, 0.000s GC time
Loading theory "Draft.BVSpecTypeSafe" (required by "Draft.BVSpecTypeSafeMoreTemplates")
### Ambiguous input (line 78 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder" ("_position" f)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>)
###         ("_tuple" ("_position" None)
###           ("_tuple_args" ("_position" h)
###             ("_tuple_args"
###               ("\<^const>List.list.Cons" ("_position" f) ("_position" frs))
###               ("_tuple_arg" ("_position" sh)))))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" curr_method) ("_position" f))
###           ("_position" clinit)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>)
###           ("_applC" ("_position" find_handler)
###             ("_cargs" ("_position" P)
###               ("_cargs" ("_position" xcp)
###                 ("_cargs" ("_position" h)
###                   ("_cargs" ("_position" frs) ("_position" sh)))))))))))
### ("\<^const>Pure.all_binder" ("_position" f)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_tuple" ("_position" None)
###           ("_tuple_args" ("_position" h)
###             ("_tuple_args"
###               ("\<^const>List.list.Cons" ("_position" f) ("_position" frs))
###               ("_tuple_arg" ("_position" sh)))))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" curr_method) ("_position" f))
###           ("_position" clinit)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>)
###           ("_applC" ("_position" find_handler)
###             ("_cargs" ("_position" P)
###               ("_cargs" ("_position" xcp)
###                 ("_cargs" ("_position" h)
###                   ("_cargs" ("_position" frs) ("_position" sh)))))))))))
### ("\<^const>Pure.all_binder" ("_position" f)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>)
###         ("_tuple" ("_position" None)
###           ("_tuple_args" ("_position" h)
###             ("_tuple_args"
###               ("\<^const>List.list.Cons" ("_position" f) ("_position" frs))
###               ("_tuple_arg" ("_position" sh)))))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" curr_method) ("_position" f))
###           ("_position" clinit)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_applC" ("_position" find_handler)
###             ("_cargs" ("_position" P)
###               ("_cargs" ("_position" xcp)
###                 ("_cargs" ("_position" h)
###                   ("_cargs" ("_position" frs) ("_position" sh)))))))))))
### ("\<^const>Pure.all_binder" ("_position" f)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_tuple" ("_position" None)
###           ("_tuple_args" ("_position" h)
###             ("_tuple_args"
###               ("\<^const>List.list.Cons" ("_position" f) ("_position" frs))
###               ("_tuple_arg" ("_position" sh)))))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" curr_method) ("_position" f))
###           ("_position" clinit)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_applC" ("_position" find_handler)
###             ("_cargs" ("_position" P)
###               ("_cargs" ("_position" xcp)
###                 ("_cargs" ("_position" h)
###                   ("_cargs" ("_position" frs) ("_position" sh)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 192 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" fst)
###           ("_applC" ("_position" exec_instr)
###             ("_cargs"
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_cargs" ("_position" P)
###                 ("_cargs" ("_position" h)
###                   ("_cargs" ("_position" stk)
###                     ("_cargs" ("_position" vars)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("_position" M)
###                           ("_cargs" ("_position" pc)
###                             ("_cargs" ("_position" ics)
###                               ("_cargs" ("_position" frs)
###                                 ("_position" sh)))))))))))))
###         ("_applC" ("_position" Some) ("_position" xcp))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###           ("_position" mxs) ("_applC" ("_position" size) ("_position" ins))
###           ("_position" xt)
###           ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###           ("_position" pc)
###           ("_applC" ("_position" \<Phi>)
###             ("_cargs" ("_position" C) ("_position" M)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###             ("_tuple" ("_position" None)
###               ("_tuple_args" ("_position" h)
###                 ("_tuple_args"
###                   ("\<^const>List.list.Cons"
###                     ("_tuple" ("_position" stk)
###                       ("_tuple_args" ("_position" loc)
###                         ("_tuple_args" ("_position" C)
###                           ("_tuple_args" ("_position" M)
###                             ("_tuple_args" ("_position" pc)
###                               ("_tuple_arg" ("_position" ics)))))))
###                     ("_position" frs))
###                   ("_tuple_arg" ("_position" sh))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" obj)
###       ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" xcp))
###         ("_applC" ("_position" Some) ("_position" obj))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" fst)
###           ("_applC" ("_position" exec_instr)
###             ("_cargs"
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_cargs" ("_position" P)
###                 ("_cargs" ("_position" h)
###                   ("_cargs" ("_position" stk)
###                     ("_cargs" ("_position" vars)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("_position" M)
###                           ("_cargs" ("_position" pc)
###                             ("_cargs" ("_position" ics)
###                               ("_cargs" ("_position" frs)
###                                 ("_position" sh)))))))))))))
###         ("_applC" ("_position" Some) ("_position" xcp))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###           ("_position" mxs) ("_applC" ("_position" size) ("_position" ins))
###           ("_position" xt)
###           ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###           ("_position" pc)
###           ("_applC" ("_position" \<Phi>)
###             ("_cargs" ("_position" C) ("_position" M)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>BVConform.correct_state" ("_position" P)
###             ("_position" \<Phi>)
###             ("_tuple" ("_position" None)
###               ("_tuple_args" ("_position" h)
###                 ("_tuple_args"
###                   ("\<^const>List.list.Cons"
###                     ("_tuple" ("_position" stk)
###                       ("_tuple_args" ("_position" loc)
###                         ("_tuple_args" ("_position" C)
###                           ("_tuple_args" ("_position" M)
###                             ("_tuple_args" ("_position" pc)
###                               ("_tuple_arg" ("_position" ics)))))))
###                     ("_position" frs))
###                   ("_tuple_arg" ("_position" sh))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" obj)
###       ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" xcp))
###         ("_applC" ("_position" Some) ("_position" obj))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 222 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 265 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 266 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 622 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 626 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 753 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 757 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 809 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 813 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 885 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 887 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1016 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1019 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1104 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" No_ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" No_ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1107 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1153 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1155 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1357 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1375 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1392 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1424 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### EX z zs. ?ys = z # zs & subtype ?P ?x z & ?P \<turnstile> ?xs [\<le>] zs ==>
### ?P \<turnstile> (?x # ?xs) [\<le>] ?ys
### Ignoring duplicate safe elimination (elim!)
### [| ?P \<turnstile> (?x # ?xs) [\<le>] ?ys;
###    EX z zs.
###       ?ys = z # zs & subtype ?P ?x z & ?P \<turnstile> ?xs [\<le>] zs ==>
###    PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe introduction (intro!)
### EX z zs. ?ys = z # zs & subtype ?P ?x z & ?P \<turnstile> ?xs [\<le>] zs ==>
### ?P \<turnstile> (?x # ?xs) [\<le>] ?ys
### Ignoring duplicate safe elimination (elim!)
### [| ?P \<turnstile> (?x # ?xs) [\<le>] ?ys;
###    EX z zs.
###       ?ys = z # zs & subtype ?P ?x z & ?P \<turnstile> ?xs [\<le>] zs ==>
###    PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate rewrite rule:
### ?P1 \<turnstile> (?x1 # ?xs1) [\<le>] ?ys1 ==
### EX z zs.
###    ?ys1 = z # zs & subtype ?P1 ?x1 z & ?P1 \<turnstile> ?xs1 [\<le>] zs
### Ambiguous input (line 1447 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1450 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1521 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1525 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1584 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" No_ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" No_ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1588 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1630 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1633 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1711 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1715 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1786 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" No_ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" No_ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1790 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1827 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" is_class)
###         ("_cargs" ("_position" P) ("_position" C))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" wf_prog)
###           ("_cargs" ("_position" wt) ("_position" P))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" h)
###       ("_applC" ("_position" blank)
###         ("_cargs" ("_position" P) ("_position" C))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" is_class)
###         ("_cargs" ("_position" P) ("_position" C))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" wf_prog)
###           ("_cargs" ("_position" wt) ("_position" P))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" h)
###       ("_applC" ("_position" blank)
###         ("_cargs" ("_position" P) ("_position" C))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1842 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1845 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1901 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" No_ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" No_ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1904 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1949 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1966 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1982 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1998 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2015 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2031 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2054 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2055 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2204 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_tuple" ("_position" None)
###         ("_tuple_args" ("_position" h)
###           ("_tuple_args"
###             ("\<^const>List.list.Cons"
###               ("_tuple" ("_position" stk)
###                 ("_tuple_args" ("_position" loc)
###                   ("_tuple_args" ("_position" C)
###                     ("_tuple_args" ("_position" M)
###                       ("_tuple_args" ("_position" pc)
###                         ("_tuple_arg" ("_position" ics)))))))
###               ("_position" frs))
###             ("_tuple_arg" ("_position" sh)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" m)
###           ("_idts" ("_position" Ts) ("_position" T))))
###       ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###         ("_position" M) ("_position" b) ("_position" Ts) ("_position" T)
###         ("_position" m) ("_position" C)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_tuple" ("_position" None)
###         ("_tuple_args" ("_position" h)
###           ("_tuple_args"
###             ("\<^const>List.list.Cons"
###               ("_tuple" ("_position" stk)
###                 ("_tuple_args" ("_position" loc)
###                   ("_tuple_args" ("_position" C)
###                     ("_tuple_args" ("_position" M)
###                       ("_tuple_args" ("_position" pc)
###                         ("_tuple_arg" ("_position" ics)))))))
###               ("_position" frs))
###             ("_tuple_arg" ("_position" sh)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" m)
###           ("_idts" ("_position" Ts) ("_position" T))))
###       ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###         ("_position" M) ("_position" b) ("_position" Ts) ("_position" T)
###         ("_position" m) ("_position" C)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2209 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder" ("_position" \<sigma>)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###           ("_position" P)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###             ("_position" \<sigma>)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>JVMExec.exec_1'" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>'))
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>) ("_position" \<sigma>'))))))
### ("\<^const>Pure.all_binder" ("_position" \<sigma>)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###           ("_position" P)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>BVConform.correct_state" ("_position" P)
###             ("_position" \<Phi>) ("_position" \<sigma>)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>JVMExec.exec_1'" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>'))
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>) ("_position" \<sigma>'))))))
### ("\<^const>Pure.all_binder" ("_position" \<sigma>)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###           ("_position" P)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###             ("_position" \<sigma>)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>JVMExec.exec_1'" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>'))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_position" \<sigma>'))))))
### ("\<^const>Pure.all_binder" ("_position" \<sigma>)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###           ("_position" P)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>BVConform.correct_state" ("_position" P)
###             ("_position" \<Phi>) ("_position" \<sigma>)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>JVMExec.exec_1'" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>'))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_position" \<sigma>'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2243 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_args" ("_position" frs)
###                 ("_tuple_arg" ("_position" sh)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" xp) ("_position" None)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" frs)
###               ("\<^const>List.list.Nil")))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" \<sigma>')
###       ("\<^const>HOL.conj"
###         ("\<^const>JVMExec.exec_1'" ("_position" P)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_args" ("_position" frs)
###                 ("_tuple_arg" ("_position" sh)))))
###           ("_position" \<sigma>'))
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>) ("_position" \<sigma>'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_args" ("_position" frs)
###                 ("_tuple_arg" ("_position" sh)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" xp) ("_position" None)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" frs)
###               ("\<^const>List.list.Nil")))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" \<sigma>')
###       ("\<^const>HOL.conj"
###         ("\<^const>JVMExec.exec_1'" ("_position" P)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_args" ("_position" frs)
###                 ("_tuple_arg" ("_position" sh)))))
###           ("_position" \<sigma>'))
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>) ("_position" \<sigma>'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_args" ("_position" frs)
###                 ("_tuple_arg" ("_position" sh)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" xp) ("_position" None)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" frs)
###               ("\<^const>List.list.Nil")))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" \<sigma>')
###       ("\<^const>HOL.conj"
###         ("\<^const>JVMExec.exec_1'" ("_position" P)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_args" ("_position" frs)
###                 ("_tuple_arg" ("_position" sh)))))
###           ("_position" \<sigma>'))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_position" \<sigma>'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_args" ("_position" frs)
###                 ("_tuple_arg" ("_position" sh)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" xp) ("_position" None)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" frs)
###               ("\<^const>List.list.Nil")))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" \<sigma>')
###       ("\<^const>HOL.conj"
###         ("\<^const>JVMExec.exec_1'" ("_position" P)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_args" ("_position" frs)
###                 ("_tuple_arg" ("_position" sh)))))
###           ("_position" \<sigma>'))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_position" \<sigma>'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2248 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMExec.exec_all" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>) ("_position" \<sigma>))
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>) ("_position" \<sigma>')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMExec.exec_all" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_position" \<sigma>))
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>) ("_position" \<sigma>')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMExec.exec_all" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>) ("_position" \<sigma>))
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_position" \<sigma>')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMExec.exec_all" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_position" \<sigma>))
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_position" \<sigma>')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2288 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state"
###     ("_applC" ("_position" start_prog)
###       ("_cargs" ("_position" P) ("_cargs" ("_position" C) ("_position" M))))
###     ("_position" \<Phi>')
###     ("_applC" ("_position" start_state) ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf"
###     ("_applC" ("_position" start_prog)
###       ("_cargs" ("_position" P) ("_cargs" ("_position" C) ("_position" M))))
###     ("_position" \<Phi>')
###     ("_applC" ("_position" start_state) ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2330 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>JVMExec.exec_all"
###       ("_applC" ("_position" start_prog)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C) ("_position" M))))
###       ("_applC" ("_position" start_state) ("_position" P))
###       ("_position" \<sigma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state"
###       ("_applC" ("_position" start_prog)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C) ("_position" M))))
###       ("_position" \<Phi>') ("_position" \<sigma>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>JVMExec.exec_all"
###       ("_applC" ("_position" start_prog)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C) ("_position" M))))
###       ("_applC" ("_position" start_state) ("_position" P))
###       ("_position" \<sigma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf"
###       ("_applC" ("_position" start_prog)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C) ("_position" M))))
###       ("_position" \<Phi>') ("_position" \<sigma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.BVSpecTypeSafe"
### 0.774s elapsed time, 0.942s cpu time, 0.230s GC time
Loading theory "Draft.BVSpecTypeSafeMoreTemplates"
val templateLemmas =
   [("BVSpecTypeSafe.obj_ty_blank", "obj_ty (blank ?P ?C) = Class ?C",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("BVSpecTypeSafe.hconf_start",
     "wf_prog ?wf_mb ?P ==> ?P \<turnstile> start_heap ?P \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 0))
           ))),
    ("BVSpecTypeSafe.oconf_blank2",
     "[| is_class ?P ?C; wf_prog ?wt ?P |]
      ==> ?P,?h \<turnstile> blank ?P ?C \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2))
           ))),
    ("BVSpecTypeSafe.conf_sys_xcpt",
     "[| preallocated ?h; ?C : sys_xcpts |]
      ==> ?P,?h \<turnstile> Addr (addr_of_sys_xcpt ?C) :\<le> Class ?C",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 2),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1))),
             template_app (template_hole 0, template_var 1))
           ))),
    ("BVSpecTypeSafe.widen_rules",
     "[| ?P,?h |- ?x :<=T ?T; ?P |- ?T <=T ?T' |] ==> ?P,?h |- ?x :<=T ?T'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 4),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("BVSpecTypeSafe.widen_rules",
     "[| ?P,?h \<turnstile> ?v :\<le> ?T; subtype ?P ?T ?T' |]
      ==> ?P,?h \<turnstile> ?v :\<le> ?T'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 4),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("BVSpecTypeSafe.shconf_start",
     "~ is_class ?P Start ==>
      ?P,start_heap
          ?P \<turnstile>\<^sub>s [Start |-> (Map.empty, Done)] \<surd>",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 9, template_var 0),
                  template_hole 8)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, template_var 0),
               template_app (template_hole 6, template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 5, t_empty), template_hole 8),
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, t_empty),
                   template_hole 0))))
           ))),
    ("BVSpecTypeSafe.defs1",
     "norm_eff ?i ?P ?pc ?\<tau> =
      map (%pc'. (pc', \<lfloor>eff\<^sub>i (?i, ?P, ?\<tau>)\<rfloor>))
       (succs ?i ?\<tau> ?pc)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 7, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 6, t_empty),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_var 1)))),
    ("BVSpecTypeSafe.widen_rules",
     "[| ?P,?h |- ?loc [:<=T] ?LT; ?P |- ?LT [<=T] ?LT' |]
      ==> ?P,?h |- ?loc [:<=T] ?LT'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 1,
                  template_app (template_hole 0, template_var 4)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 4),
                   template_var 3)),
               template_var 2),
             template_var 0)
           ))),
    ("BVSpecTypeSafe.widen_rules",
     "[| ?P,?h \<turnstile> ?vs [:\<le>] ?Ts;
         ?P \<turnstile> ?Ts [\<le>] ?Ts' |]
      ==> ?P,?h \<turnstile> ?vs [:\<le>] ?Ts'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 1,
                  template_app (template_hole 0, template_var 4)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 4),
                   template_var 3)),
               template_var 2),
             template_var 0)
           ))),
    ("BVSpecTypeSafe.BV_correct",
     "[| wf_jvm_prog\<^bsub>?\<Phi>\<^esub> ?P;
         ?P |- ?\<sigma> -jvm-> ?\<sigma>'; ?P,?\<Phi> |- ?\<sigma> [ok] |]
      ==> ?P,?\<Phi> |- ?\<sigma>' [ok]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 3),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 3),
             template_var 0)
           ))),
    ("BVSpecTypeSafe.defs1",
     "eff ?i ?P ?pc ?et ?t =
      (case ?t of None => []
       | \<lfloor>\<tau>\<rfloor> =>
           norm_eff ?i ?P ?pc \<tau> @ xcpt_eff ?i ?P ?pc \<tau> ?et)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 5, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 4, template_hole 3), t_empty),
         template_var 0))),
    ("BVSpecTypeSafe.BV_correct_1",
     "[| wf_jvm_prog\<^bsub>?\<Phi>\<^esub> ?P;
         ?P,?\<Phi> |- ?\<sigma> [ok];
         ?P \<turnstile> ?\<sigma> -jvm\<rightarrow>\<^sub>1 ?\<sigma>' |]
      ==> ?P,?\<Phi> |- ?\<sigma>' [ok]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)),
              template_app (template_hole 0, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 3),
             template_var 0)
           ))),
    ("BVSpecTypeSafe.progress",
     "[| ?xp = None; ?frs ~= [] |]
      ==> EX \<sigma>'. ?P \<turnstile>
             (?xp, ?h, ?frs, ?sh) -jvm\<rightarrow>\<^sub>1 \<sigma>'",
     template_implication
      ([template_equation (template_var 4, template_hole 10),
        template_negation
         (template_equation (template_var 3, template_hole 7))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("BVSpecTypeSafe.widens_Cons",
     "?P \<turnstile> (?x # ?xs) [\<le>] ?ys =
      (EX z zs.
          ?ys = z # zs & subtype ?P ?x z & ?P \<turnstile> ?xs [\<le>] zs)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 3)),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 3, t_empty))),
    ("BVSpecTypeSafe.defs1",
     "xcpt_app ?i ?P ?pc ?mxs ?xt ?\<tau> =
      (ALL (f, t, C, h, d):set (relevant_entries ?P ?i ?pc ?xt).
          is_class ?P C & d <= length (fst ?\<tau>) & d < ?mxs)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 13, template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 12,
           template_app
            (template_hole 11,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 10, template_var 4),
                   template_var 5),
                 template_var 3),
               template_var 1))),
         template_app (template_hole 9, t_empty)))),
    ("BVSpecTypeSafe.Cast_conf2",
     "[| wf_prog ?ok ?P; ?P,?h \<turnstile> ?v :\<le> ?T; is_refT ?T;
         cast_ok ?P ?C ?h ?v; subtype ?P (Class ?C) ?T'; is_class ?P ?C |]
      ==> ?P,?h \<turnstile> ?v :\<le> ?T'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 1),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 5),
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 5),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_var 5),
                 template_var 4),
               template_var 3),
             template_var 0)
           ))),
    ("BVSpecTypeSafe.correct_state_impl_Some_method",
     "?P,?\<Phi> |- (None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs,
                     ?sh) [ok] ==>
      EX b m Ts T.
         ?P \<turnstile> ?C sees ?M, b :  Ts\<rightarrow>T = m in ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 15, template_var 10),
                template_var 9),
              template_app
               (template_app (template_hole 14, template_hole 13),
                template_app
                 (template_app (template_hole 12, template_var 8),
                  template_app
                   (template_app
                     (template_hole 11,
                      template_app
                       (template_app
                         (template_hole 10,
                          template_app
                           (template_app (template_hole 9, template_var 7),
                            template_app
                             (template_app
                               (template_hole 8, template_var 6),
                              template_app
                               (template_app
                                 (template_hole 7, template_var 5),
                                template_app
                                 (template_app
                                   (template_hole 6, template_var 4),
                                  template_app
                                   (template_app
                                     (template_hole 5, template_var 3),
                                    template_var 2)))))),
                        template_var 1)),
                    template_var 0))))
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("BVSpecTypeSafe.uncaught_xcpt_correct",
     "[| wf_jvm_prog\<^bsub>?\<Phi>\<^esub> ?P;
         ?h ?xcp = \<lfloor>?obj\<rfloor>;
         ?P,?\<Phi> |- (None, ?h, ?f # ?frs, ?sh) [ok];
         curr_method ?f ~= clinit |]
      ==> ?P,?\<Phi> |- find_handler ?P ?xcp ?h ?frs ?sh [ok]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 7),
              template_var 6)
            ),
        template_equation
         (template_app (template_var 5, template_var 4),
          template_app (template_hole 11, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 6),
                template_var 7),
              template_app
               (template_app (template_hole 9, template_hole 8),
                template_app
                 (template_app (template_hole 7, template_var 5),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app (template_hole 5, template_var 2),
                        template_var 1)),
                    template_var 0))))
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 2, template_var 2),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 10, template_var 6),
               template_var 7),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 6),
                     template_var 4),
                   template_var 5),
                 template_var 1),
               template_var 0))
           ))),
    ("BVSpecTypeSafe.match_ex_table_SomeD",
     "match_ex_table ?P ?C ?pc ?xt = \<lfloor>(?pc', ?d')\<rfloor> ==>
      EX (f, t, D, h, d):set ?xt.
         matches_ex_entry ?P ?C ?pc (f, t, D, h, d) & h = ?pc' & d = ?d'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 14, template_var 5),
                template_var 4),
              template_var 3),
            template_var 2),
          template_app
           (template_hole 13,
            template_app
             (template_app (template_hole 12, template_var 1),
              template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app (template_hole 10, template_var 2)),
             template_app (template_hole 9, t_empty))
           ))),
    ("BVSpecTypeSafe.progress_conform",
     "[| wf_jvm_prog\<^bsub>?\<Phi>\<^esub> ?P;
         ?P,?\<Phi> |- (?xp, ?h, ?frs, ?sh) [ok]; ?xp = None; ?frs ~= [] |]
      ==> EX \<sigma>'.
             ?P \<turnstile> (?xp, ?h, ?frs, ?sh) -jvm\<rightarrow>\<^sub>1
             \<sigma>' & ?P,?\<Phi> |- \<sigma>' [ok]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 4),
                template_var 5),
              template_app
               (template_app (template_hole 12, template_var 3),
                template_app
                 (template_app (template_hole 11, template_var 2),
                  template_app
                   (template_app (template_hole 10, template_var 1),
                    template_var 0))))
            ),
        template_equation (template_var 3, template_hole 8),
        template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("BVSpecTypeSafe.defs1",
     "app ?i ?P ?mxs ?T\<^sub>r ?pc ?mpc ?xt ?t =
      (case ?t of None => True
       | \<lfloor>\<tau>\<rfloor> =>
           app\<^sub>i (?i, ?P, ?pc, ?mxs, ?T\<^sub>r, \<tau>) &
           xcpt_app ?i ?P ?pc ?mxs ?xt \<tau> &
           (ALL (pc', \<tau>'):set (eff ?i ?P ?pc ?xt ?t). pc' < ?mpc))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 15, template_var 7),
                     template_var 6),
                   template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 14, template_hole 13), t_empty),
         template_var 0))),
    ("BVSpecTypeSafe.Invoke_handlers",
     "match_ex_table ?P ?C ?pc ?xt = \<lfloor>(?pc', ?d')\<rfloor> ==>
      EX (f, t, D, h, d):set (relevant_entries ?P (Invoke ?n ?M) ?pc ?xt).
         ?P \<turnstile> ?C \<preceq>\<^sup>* D &
         ?pc : {f..<t} & ?pc' = h & ?d' = d",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 18, template_var 7),
                template_var 6),
              template_var 5),
            template_var 4),
          template_app
           (template_hole 17,
            template_app
             (template_app (template_hole 16, template_var 3),
              template_var 2)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 15,
               template_app
                (template_hole 14,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 13, template_var 7),
                       template_app
                        (template_app (template_hole 12, template_var 1),
                         template_var 0)),
                     template_var 5),
                   template_var 4))),
             template_app (template_hole 11, t_empty))
           ))),
    ("BVSpecTypeSafe.Invokestatic_handlers",
     "match_ex_table ?P ?C ?pc ?xt = \<lfloor>(?pc', ?d')\<rfloor> ==>
      EX (f, t, D, h, d)
         :set (relevant_entries ?P (Invokestatic ?C\<^sub>0 ?n ?M) ?pc ?xt).
         ?P \<turnstile> ?C \<preceq>\<^sup>* D &
         ?pc : {f..<t} & ?pc' = h & ?d' = d",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 18, template_var 8),
                template_var 7),
              template_var 6),
            template_var 5),
          template_app
           (template_hole 17,
            template_app
             (template_app (template_hole 16, template_var 4),
              template_var 3)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 15,
               template_app
                (template_hole 14,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 13, template_var 8),
                       template_app
                        (template_app
                          (template_app (template_hole 12, template_var 2),
                           template_var 1),
                         template_var 0)),
                     template_var 6),
                   template_var 5))),
             template_app (template_hole 11, t_empty))
           ))),
    ("BVSpecTypeSafe.BV_correct_initial",
     "[| wf_jvm_prog\<^bsub>?\<Phi>\<^esub> ?P; ~ is_class ?P Start;
         ?P \<turnstile> ?C sees ?M, Static :  []\<rightarrow>Void = ?m in ?C;
         ?M ~= clinit; ?\<Phi>' Start start_m = start_\<phi>\<^sub>m |]
      ==> class_add ?P (start_class ?C ?M),?\<Phi>' |- start_state ?P [ok]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 21, template_var 5),
              template_var 4)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 19, template_var 4),
                  template_hole 18)
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 17, template_var 4),
                          template_var 3),
                        template_var 2),
                      template_hole 16),
                    template_hole 15),
                  template_hole 14),
                template_var 1),
              template_var 3)
            ),
        template_negation
         (template_equation (template_var 2, template_hole 12)),
        template_equation
         (template_app
           (template_app (template_var 0, template_hole 18),
            template_hole 10),
          template_app
           (template_app
             (template_hole 9,
              template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_hole 15),
                  template_hole 6))),
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_hole 8,
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app (template_hole 5, template_hole 14),
                        template_hole 15)),
                    template_hole 6))),
              template_hole 4)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 3),
                       template_var 2)),
                   template_var 4)),
               template_var 0),
             template_app (template_hole 0, template_var 4))
           ))),
    ("BVSpecTypeSafe.exec_instr_xcpt_h",
     "[| fst (exec_instr (?ins ! ?pc) ?P ?h ?stk ?vars ?C ?M ?pc ?ics ?frs
               ?sh) =
         \<lfloor>?xcp\<rfloor>;
         ?P,?T,?mxs,length
                     ?ins,?xt \<turnstile> ?ins ! ?pc,?pc :: ?\<Phi> ?C ?M;
         ?P,?\<Phi> |- (None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs,
                        ?sh) [ok] |]
      ==> EX obj. ?h ?xcp = \<lfloor>obj\<rfloor>",
     template_implication
      ([template_equation
         (template_app
           (template_hole 19,
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_app
                                 (template_hole 18,
                                  template_app
                                   (template_app
                                     (template_hole 17, template_var 16),
                                    template_var 15)),
                                template_var 14),
                              template_var 13),
                            template_var 12),
                          template_var 11),
                        template_var 10),
                      template_var 9),
                    template_var 15),
                  template_var 8),
                template_var 7),
              template_var 6)),
          template_app (template_hole 16, template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 15, template_var 14),
                          template_var 4),
                        template_var 3),
                      template_app (template_hole 14, template_var 16)),
                    template_var 2),
                  template_app
                   (template_app (template_hole 17, template_var 16),
                    template_var 15)),
                template_var 15),
              template_app
               (template_app (template_var 1, template_var 10),
                template_var 9))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 14),
                template_var 1),
              template_app
               (template_app (template_hole 12, template_hole 11),
                template_app
                 (template_app (template_hole 10, template_var 13),
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_app
                         (template_hole 8,
                          template_app
                           (template_app (template_hole 7, template_var 12),
                            template_app
                             (template_app
                               (template_hole 6, template_var 0),
                              template_app
                               (template_app
                                 (template_hole 5, template_var 10),
                                template_app
                                 (template_app
                                   (template_hole 4, template_var 9),
                                  template_app
                                   (template_app
                                     (template_hole 3, template_var 15),
                                    template_var 8)))))),
                        template_var 7)),
                    template_var 6))))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("BVSpecTypeSafe.step_correct",
     "[| wf_jvm_prog\<^bsub>?\<Phi>\<^esub> ?P;
         ?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = (?mxs,
                           ?mxl\<^sub>0, ?ins, ?xt) in ?C;
         \<lfloor>?\<sigma>'\<rfloor> =
         exec (?P, None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs, ?sh);
         ?P,?\<Phi> |- (None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs,
                        ?sh) [ok] |]
      ==> ?P,?\<Phi> |- ?\<sigma>' [ok]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 18),
              template_var 17)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 18, template_var 17),
                          template_var 16),
                        template_var 15),
                      template_var 14),
                    template_var 13),
                  template_var 12),
                template_app
                 (template_app (template_hole 17, template_var 11),
                  template_app
                   (template_app (template_hole 16, template_var 10),
                    template_app
                     (template_app (template_hole 15, template_var 9),
                      template_var 8)))),
              template_var 16)
            ),
        template_equation
         (template_app (template_hole 13, template_var 7),
          template_app
           (template_hole 12,
            template_app
             (template_app (template_hole 11, template_var 17),
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_app
                 (template_app (template_hole 8, template_var 6),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app
                         (template_hole 6,
                          template_app
                           (template_app (template_hole 5, template_var 5),
                            template_app
                             (template_app
                               (template_hole 4, template_var 4),
                              template_app
                               (template_app
                                 (template_hole 3, template_var 16),
                                template_app
                                 (template_app
                                   (template_hole 2, template_var 15),
                                  template_app
                                   (template_app
                                     (template_hole 1, template_var 3),
                                    template_var 2)))))),
                        template_var 1)),
                    template_var 0)))))),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 17),
                template_var 18),
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_app
                 (template_app (template_hole 8, template_var 6),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app
                         (template_hole 6,
                          template_app
                           (template_app (template_hole 5, template_var 5),
                            template_app
                             (template_app
                               (template_hole 4, template_var 4),
                              template_app
                               (template_app
                                 (template_hole 3, template_var 16),
                                template_app
                                 (template_app
                                   (template_hole 2, template_var 15),
                                  template_app
                                   (template_app
                                     (template_hole 1, template_var 3),
                                    template_var 2)))))),
                        template_var 1)),
                    template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 17),
               template_var 18),
             template_var 7)
           ))),
    ("BVSpecTypeSafe.exec_step_xcpt_h",
     "[| fst (exec_step ?P ?h ?stk ?vars ?C ?M ?pc ?ics ?frs ?sh) =
         \<lfloor>?xcp\<rfloor>;
         instrs_of ?P ?C ?M = ?ins;
         ?P,?T,?mxs,length
                     ?ins,?xt \<turnstile> ?ins ! ?pc,?pc :: ?\<Phi> ?C ?M;
         ?P,?\<Phi> |- (None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs,
                        ?sh) [ok] |]
      ==> EX obj. ?h ?xcp = \<lfloor>obj\<rfloor>",
     template_implication
      ([template_equation
         (template_app
           (template_hole 28,
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 27, template_var 16),
                              template_var 15),
                            template_var 14),
                          template_var 13),
                        template_var 12),
                      template_var 11),
                    template_var 10),
                  template_var 9),
                template_var 8),
              template_var 7)),
          template_app (template_hole 26, template_var 6)),
        template_equation
         (template_app
           (template_hole 24,
            template_app
             (template_hole 23,
              template_app
               (template_hole 22,
                template_app
                 (template_hole 21,
                  template_app
                   (template_hole 20,
                    template_app
                     (template_hole 19,
                      template_app
                       (template_hole 18,
                        template_app
                         (template_app
                           (template_app
                             (template_hole 17, template_var 16),
                            template_var 12),
                          template_var 11)))))))),
          template_var 5),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 16, template_var 16),
                          template_var 4),
                        template_var 3),
                      template_app (template_hole 15, template_var 5)),
                    template_var 2),
                  template_app
                   (template_app (template_hole 14, template_var 5),
                    template_var 10)),
                template_var 10),
              template_app
               (template_app (template_var 1, template_var 12),
                template_var 11))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 16),
                template_var 1),
              template_app
               (template_app (template_hole 12, template_hole 11),
                template_app
                 (template_app (template_hole 10, template_var 15),
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_app
                         (template_hole 8,
                          template_app
                           (template_app (template_hole 7, template_var 14),
                            template_app
                             (template_app
                               (template_hole 6, template_var 0),
                              template_app
                               (template_app
                                 (template_hole 5, template_var 12),
                                template_app
                                 (template_app
                                   (template_hole 4, template_var 11),
                                  template_app
                                   (template_app
                                     (template_hole 3, template_var 10),
                                    template_var 9)))))),
                        template_var 8)),
                    template_var 7))))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("BVSpecTypeSafe.Return_correct",
     "[| wf_jvm_prog\<^bsub>?\<Phi>\<^esub> ?P;
         ?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = (?mxs,
                           ?mxl\<^sub>0, ?ins, ?xt) in ?C;
         ?ins ! ?pc = Return;
         ?P,?T,?mxs,length
                     ?ins,?xt \<turnstile> ?ins ! ?pc,?pc :: ?\<Phi> ?C ?M;
         \<lfloor>?\<sigma>'\<rfloor> =
         exec (?P, None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs, ?sh);
         ?P,?\<Phi> |- (None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs,
                        ?sh) [ok] |]
      ==> ?P,?\<Phi> |- ?\<sigma>' [ok]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 24, template_var 18),
              template_var 17)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 23, template_var 17),
                          template_var 16),
                        template_var 15),
                      template_var 14),
                    template_var 13),
                  template_var 12),
                template_app
                 (template_app (template_hole 22, template_var 11),
                  template_app
                   (template_app (template_hole 21, template_var 10),
                    template_app
                     (template_app (template_hole 20, template_var 9),
                      template_var 8)))),
              template_var 16)
            ),
        template_equation
         (template_app
           (template_app (template_hole 18, template_var 9),
            template_var 7),
          template_hole 17),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 16, template_var 17),
                          template_var 12),
                        template_var 11),
                      template_app (template_hole 15, template_var 9)),
                    template_var 8),
                  template_app
                   (template_app (template_hole 18, template_var 9),
                    template_var 7)),
                template_var 7),
              template_app
               (template_app (template_var 18, template_var 16),
                template_var 15))
            ),
        template_equation
         (template_app (template_hole 13, template_var 6),
          template_app
           (template_hole 12,
            template_app
             (template_app (template_hole 11, template_var 17),
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_app
                 (template_app (template_hole 8, template_var 5),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app
                         (template_hole 6,
                          template_app
                           (template_app (template_hole 5, template_var 4),
                            template_app
                             (template_app
                               (template_hole 4, template_var 3),
                              template_app
                               (template_app
                                 (template_hole 3, template_var 16),
                                template_app
                                 (template_app
                                   (template_hole 2, template_var 15),
                                  template_app
                                   (template_app
                                     (template_hole 1, template_var 7),
                                    template_var 2)))))),
                        template_var 1)),
                    template_var 0)))))),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 17),
                template_var 18),
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_app
                 (template_app (template_hole 8, template_var 5),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app
                         (template_hole 6,
                          template_app
                           (template_app (template_hole 5, template_var 4),
                            template_app
                             (template_app
                               (template_hole 4, template_var 3),
                              template_app
                               (template_app
                                 (template_hole 3, template_var 16),
                                template_app
                                 (template_app
                                   (template_hole 2, template_var 15),
                                  template_app
                                   (template_app
                                     (template_hole 1, template_var 7),
                                    template_var 2)))))),
                        template_var 1)),
                    template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 17),
               template_var 18),
             template_var 6)
           ))),
    ("BVSpecTypeSafe.Calling_correct",
     "[| wf_jvm_prog\<^bsub>?\<Phi>\<^esub> ?P;
         ?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = (?mxs,
                           ?mxl\<^sub>0, ?ins, ?xt) in ?C;
         \<lfloor>?\<sigma>'\<rfloor> =
         exec (?P, None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs, ?sh);
         ?P,?\<Phi> |- (None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs,
                        ?sh) [ok];
         fst (exec_step ?P ?h ?stk ?loc ?C ?M ?pc ?ics ?frs ?sh) = None;
         ?ics = Calling ?C' ?Cs |]
      ==> ?P,?\<Phi> |- ?\<sigma>' [ok]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 24, template_var 20),
              template_var 19)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 23, template_var 19),
                          template_var 18),
                        template_var 17),
                      template_var 16),
                    template_var 15),
                  template_var 14),
                template_app
                 (template_app (template_hole 22, template_var 13),
                  template_app
                   (template_app (template_hole 21, template_var 12),
                    template_app
                     (template_app (template_hole 20, template_var 11),
                      template_var 10)))),
              template_var 18)
            ),
        template_equation
         (template_app (template_hole 18, template_var 9),
          template_app
           (template_hole 17,
            template_app
             (template_app (template_hole 16, template_var 19),
              template_app
               (template_app (template_hole 15, template_hole 14),
                template_app
                 (template_app (template_hole 13, template_var 8),
                  template_app
                   (template_app
                     (template_hole 12,
                      template_app
                       (template_app
                         (template_hole 11,
                          template_app
                           (template_app (template_hole 10, template_var 7),
                            template_app
                             (template_app
                               (template_hole 9, template_var 6),
                              template_app
                               (template_app
                                 (template_hole 8, template_var 18),
                                template_app
                                 (template_app
                                   (template_hole 7, template_var 17),
                                  template_app
                                   (template_app
                                     (template_hole 6, template_var 5),
                                    template_var 4)))))),
                        template_var 3)),
                    template_var 2)))))),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 19),
                template_var 20),
              template_app
               (template_app (template_hole 15, template_hole 14),
                template_app
                 (template_app (template_hole 13, template_var 8),
                  template_app
                   (template_app
                     (template_hole 12,
                      template_app
                       (template_app
                         (template_hole 11,
                          template_app
                           (template_app (template_hole 10, template_var 7),
                            template_app
                             (template_app
                               (template_hole 9, template_var 6),
                              template_app
                               (template_app
                                 (template_hole 8, template_var 18),
                                template_app
                                 (template_app
                                   (template_hole 7, template_var 17),
                                  template_app
                                   (template_app
                                     (template_hole 6, template_var 5),
                                    template_var 4)))))),
                        template_var 3)),
                    template_var 2))))
            ),
        template_equation
         (template_app
           (template_hole 3,
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 2, template_var 19),
                              template_var 8),
                            template_var 7),
                          template_var 6),
                        template_var 18),
                      template_var 17),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)),
          template_hole 14),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 0, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 19),
               template_var 20),
             template_var 9)
           ))),
    ("BVSpecTypeSafe.CmpEq_correct",
     "[| wf_prog ?wt ?P;
         ?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = (?mxs,
                           ?mxl\<^sub>0, ?ins, ?xt) in ?C;
         ?ins ! ?pc = CmpEq;
         ?P,?T,?mxs,length
                     ?ins,?xt \<turnstile> ?ins ! ?pc,?pc :: ?\<Phi> ?C ?M;
         \<lfloor>?\<sigma>'\<rfloor> =
         exec (?P, None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs, ?sh);
         ?P,?\<Phi> |- (None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs,
                        ?sh) [ok] |]
      ==> ?P,?\<Phi> |- ?\<sigma>' [ok]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 24, template_var 19),
              template_var 18)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 23, template_var 18),
                          template_var 17),
                        template_var 16),
                      template_var 15),
                    template_var 14),
                  template_var 13),
                template_app
                 (template_app (template_hole 22, template_var 12),
                  template_app
                   (template_app (template_hole 21, template_var 11),
                    template_app
                     (template_app (template_hole 20, template_var 10),
                      template_var 9)))),
              template_var 17)
            ),
        template_equation
         (template_app
           (template_app (template_hole 18, template_var 10),
            template_var 8),
          template_hole 17),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 16, template_var 18),
                          template_var 13),
                        template_var 12),
                      template_app (template_hole 15, template_var 10)),
                    template_var 9),
                  template_app
                   (template_app (template_hole 18, template_var 10),
                    template_var 8)),
                template_var 8),
              template_app
               (template_app (template_var 7, template_var 17),
                template_var 16))
            ),
        template_equation
         (template_app (template_hole 13, template_var 6),
          template_app
           (template_hole 12,
            template_app
             (template_app (template_hole 11, template_var 18),
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_app
                 (template_app (template_hole 8, template_var 5),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app
                         (template_hole 6,
                          template_app
                           (template_app (template_hole 5, template_var 4),
                            template_app
                             (template_app
                               (template_hole 4, template_var 3),
                              template_app
                               (template_app
                                 (template_hole 3, template_var 17),
                                template_app
                                 (template_app
                                   (template_hole 2, template_var 16),
                                  template_app
                                   (template_app
                                     (template_hole 1, template_var 8),
                                    template_var 2)))))),
                        template_var 1)),
                    template_var 0)))))),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 18),
                template_var 7),
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_app
                 (template_app (template_hole 8, template_var 5),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app
                         (template_hole 6,
                          template_app
                           (template_app (template_hole 5, template_var 4),
                            template_app
                             (template_app
                               (template_hole 4, template_var 3),
                              template_app
                               (template_app
                                 (template_hole 3, template_var 17),
                                template_app
                                 (template_app
                                   (template_hole 2, template_var 16),
                                  template_app
                                   (template_app
                                     (template_hole 1, template_var 8),
                                    template_var 2)))))),
                        template_var 1)),
                    template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 18),
               template_var 7),
             template_var 6)
           ))),
    ("BVSpecTypeSafe.IAdd_correct",
     "[| wf_prog ?wt ?P;
         ?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = (?mxs,
                           ?mxl\<^sub>0, ?ins, ?xt) in ?C;
         ?ins ! ?pc = IAdd;
         ?P,?T,?mxs,length
                     ?ins,?xt \<turnstile> ?ins ! ?pc,?pc :: ?\<Phi> ?C ?M;
         \<lfloor>?\<sigma>'\<rfloor> =
         exec (?P, None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs, ?sh);
         ?P,?\<Phi> |- (None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs,
                        ?sh) [ok] |]
      ==> ?P,?\<Phi> |- ?\<sigma>' [ok]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 24, template_var 19),
              template_var 18)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 23, template_var 18),
                          template_var 17),
                        template_var 16),
                      template_var 15),
                    template_var 14),
                  template_var 13),
                template_app
                 (template_app (template_hole 22, template_var 12),
                  template_app
                   (template_app (template_hole 21, template_var 11),
                    template_app
                     (template_app (template_hole 20, template_var 10),
                      template_var 9)))),
              template_var 17)
            ),
        template_equation
         (template_app
           (template_app (template_hole 18, template_var 10),
            template_var 8),
          template_hole 17),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 16, template_var 18),
                          template_var 13),
                        template_var 12),
                      template_app (template_hole 15, template_var 10)),
                    template_var 9),
                  template_app
                   (template_app (template_hole 18, template_var 10),
                    template_var 8)),
                template_var 8),
              template_app
               (template_app (template_var 7, template_var 17),
                template_var 16))
            ),
        template_equation
         (template_app (template_hole 13, template_var 6),
          template_app
           (template_hole 12,
            template_app
             (template_app (template_hole 11, template_var 18),
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_app
                 (template_app (template_hole 8, template_var 5),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app
                         (template_hole 6,
                          template_app
                           (template_app (template_hole 5, template_var 4),
                            template_app
                             (template_app
                               (template_hole 4, template_var 3),
                              template_app
                               (template_app
                                 (template_hole 3, template_var 17),
                                template_app
                                 (template_app
                                   (template_hole 2, template_var 16),
                                  template_app
                                   (template_app
                                     (template_hole 1, template_var 8),
                                    template_var 2)))))),
                        template_var 1)),
                    template_var 0)))))),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 18),
                template_var 7),
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_app
                 (template_app (template_hole 8, template_var 5),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app
                         (template_hole 6,
                          template_app
                           (template_app (template_hole 5, template_var 4),
                            template_app
                             (template_app
                               (template_hole 4, template_var 3),
                              template_app
                               (template_app
                                 (template_hole 3, template_var 17),
                                template_app
                                 (template_app
                                   (template_hole 2, template_var 16),
                                  template_app
                                   (template_app
                                     (template_hole 1, template_var 8),
                                    template_var 2)))))),
                        template_var 1)),
                    template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 18),
               template_var 7),
             template_var 6)
           ))),
    ("BVSpecTypeSafe.Pop_correct",
     "[| wf_prog ?wt ?P;
         ?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = (?mxs,
                           ?mxl\<^sub>0, ?ins, ?xt) in ?C;
         ?ins ! ?pc = Pop;
         ?P,?T,?mxs,length
                     ?ins,?xt \<turnstile> ?ins ! ?pc,?pc :: ?\<Phi> ?C ?M;
         \<lfloor>?\<sigma>'\<rfloor> =
         exec (?P, None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs, ?sh);
         ?P,?\<Phi> |- (None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs,
                        ?sh) [ok] |]
      ==> ?P,?\<Phi> |- ?\<sigma>' [ok]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 24, template_var 19),
              template_var 18)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 23, template_var 18),
                          template_var 17),
                        template_var 16),
                      template_var 15),
                    template_var 14),
                  template_var 13),
                template_app
                 (template_app (template_hole 22, template_var 12),
                  template_app
                   (template_app (template_hole 21, template_var 11),
                    template_app
                     (template_app (template_hole 20, template_var 10),
                      template_var 9)))),
              template_var 17)
            ),
        template_equation
         (template_app
           (template_app (template_hole 18, template_var 10),
            template_var 8),
          template_hole 17),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 16, template_var 18),
                          template_var 13),
                        template_var 12),
                      template_app (template_hole 15, template_var 10)),
                    template_var 9),
                  template_app
                   (template_app (template_hole 18, template_var 10),
                    template_var 8)),
                template_var 8),
              template_app
               (template_app (template_var 7, template_var 17),
                template_var 16))
            ),
        template_equation
         (template_app (template_hole 13, template_var 6),
          template_app
           (template_hole 12,
            template_app
             (template_app (template_hole 11, template_var 18),
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_app
                 (template_app (template_hole 8, template_var 5),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app
                         (template_hole 6,
                          template_app
                           (template_app (template_hole 5, template_var 4),
                            template_app
                             (template_app
                               (template_hole 4, template_var 3),
                              template_app
                               (template_app
                                 (template_hole 3, template_var 17),
                                template_app
                                 (template_app
                                   (template_hole 2, template_var 16),
                                  template_app
                                   (template_app
                                     (template_hole 1, template_var 8),
                                    template_var 2)))))),
                        template_var 1)),
                    template_var 0)))))),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 18),
                template_var 7),
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_app
                 (template_app (template_hole 8, template_var 5),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app
                         (template_hole 6,
                          template_app
                           (template_app (template_hole 5, template_var 4),
                            template_app
                             (template_app
                               (template_hole 4, template_var 3),
                              template_app
                               (template_app
                                 (template_hole 3, template_var 17),
                                template_app
                                 (template_app
                                   (template_hole 2, template_var 16),
                                  template_app
                                   (template_app
                                     (template_hole 1, template_var 8),
                                    template_var 2)))))),
                        template_var 1)),
                    template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 18),
               template_var 7),
             template_var 6)
           ))),
    ("BVSpecTypeSafe.Throw_correct",
     "[| wf_prog ?wt ?P;
         ?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = (?mxs,
                           ?mxl\<^sub>0, ?ins, ?xt) in ?C;
         ?ins ! ?pc = Throw;
         \<lfloor>?\<sigma>'\<rfloor> =
         exec (?P, None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs, ?sh);
         ?P,?\<Phi> |- (None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs,
                        ?sh) [ok];
         fst (exec_step ?P ?h ?stk ?loc ?C ?M ?pc ?ics ?frs ?sh) = None |]
      ==> ?P,?\<Phi> |- ?\<sigma>' [ok]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 25, template_var 19),
              template_var 18)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 24, template_var 18),
                          template_var 17),
                        template_var 16),
                      template_var 15),
                    template_var 14),
                  template_var 13),
                template_app
                 (template_app (template_hole 23, template_var 12),
                  template_app
                   (template_app (template_hole 22, template_var 11),
                    template_app
                     (template_app (template_hole 21, template_var 10),
                      template_var 9)))),
              template_var 17)
            ),
        template_equation
         (template_app
           (template_app (template_hole 19, template_var 10),
            template_var 8),
          template_hole 18),
        template_equation
         (template_app (template_hole 16, template_var 7),
          template_app
           (template_hole 15,
            template_app
             (template_app (template_hole 14, template_var 18),
              template_app
               (template_app (template_hole 13, template_hole 12),
                template_app
                 (template_app (template_hole 11, template_var 6),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app
                         (template_hole 9,
                          template_app
                           (template_app (template_hole 8, template_var 5),
                            template_app
                             (template_app
                               (template_hole 7, template_var 4),
                              template_app
                               (template_app
                                 (template_hole 6, template_var 17),
                                template_app
                                 (template_app
                                   (template_hole 5, template_var 16),
                                  template_app
                                   (template_app
                                     (template_hole 4, template_var 8),
                                    template_var 3)))))),
                        template_var 2)),
                    template_var 1)))))),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 18),
                template_var 0),
              template_app
               (template_app (template_hole 13, template_hole 12),
                template_app
                 (template_app (template_hole 11, template_var 6),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app
                         (template_hole 9,
                          template_app
                           (template_app (template_hole 8, template_var 5),
                            template_app
                             (template_app
                               (template_hole 7, template_var 4),
                              template_app
                               (template_app
                                 (template_hole 6, template_var 17),
                                template_app
                                 (template_app
                                   (template_hole 5, template_var 16),
                                  template_app
                                   (template_app
                                     (template_hole 4, template_var 8),
                                    template_var 3)))))),
                        template_var 2)),
                    template_var 1))))
            ),
        template_equation
         (template_app
           (template_hole 1,
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 0, template_var 18),
                              template_var 6),
                            template_var 5),
                          template_var 4),
                        template_var 17),
                      template_var 16),
                    template_var 8),
                  template_var 3),
                template_var 2),
              template_var 1)),
          template_hole 12)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 18),
               template_var 0),
             template_var 7)
           ))),
    ("BVSpecTypeSafe.Called_correct",
     "[| wf_jvm_prog\<^bsub>?\<Phi>\<^esub> ?P;
         ?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = (?mxs,
                           ?mxl\<^sub>0, ?ins, ?xt) in ?C;
         \<lfloor>?\<sigma>'\<rfloor> =
         exec (?P, None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs, ?sh);
         ?P,?\<Phi> |- (None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs,
                        ?sh) [ok];
         fst (exec_step ?P ?h ?stk ?loc ?C ?M ?pc ?ics ?frs ?sh) = None;
         ?ics = Called (?C' # ?Cs) |]
      ==> ?P,?\<Phi> |- ?\<sigma>' [ok]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 25, template_var 20),
              template_var 19)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 24, template_var 19),
                          template_var 18),
                        template_var 17),
                      template_var 16),
                    template_var 15),
                  template_var 14),
                template_app
                 (template_app (template_hole 23, template_var 13),
                  template_app
                   (template_app (template_hole 22, template_var 12),
                    template_app
                     (template_app (template_hole 21, template_var 11),
                      template_var 10)))),
              template_var 18)
            ),
        template_equation
         (template_app (template_hole 19, template_var 9),
          template_app
           (template_hole 18,
            template_app
             (template_app (template_hole 17, template_var 19),
              template_app
               (template_app (template_hole 16, template_hole 15),
                template_app
                 (template_app (template_hole 14, template_var 8),
                  template_app
                   (template_app
                     (template_hole 13,
                      template_app
                       (template_app
                         (template_hole 12,
                          template_app
                           (template_app (template_hole 11, template_var 7),
                            template_app
                             (template_app
                               (template_hole 10, template_var 6),
                              template_app
                               (template_app
                                 (template_hole 9, template_var 18),
                                template_app
                                 (template_app
                                   (template_hole 8, template_var 17),
                                  template_app
                                   (template_app
                                     (template_hole 7, template_var 5),
                                    template_var 4)))))),
                        template_var 3)),
                    template_var 2)))))),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 19),
                template_var 20),
              template_app
               (template_app (template_hole 16, template_hole 15),
                template_app
                 (template_app (template_hole 14, template_var 8),
                  template_app
                   (template_app
                     (template_hole 13,
                      template_app
                       (template_app
                         (template_hole 12,
                          template_app
                           (template_app (template_hole 11, template_var 7),
                            template_app
                             (template_app
                               (template_hole 10, template_var 6),
                              template_app
                               (template_app
                                 (template_hole 9, template_var 18),
                                template_app
                                 (template_app
                                   (template_hole 8, template_var 17),
                                  template_app
                                   (template_app
                                     (template_hole 7, template_var 5),
                                    template_var 4)))))),
                        template_var 3)),
                    template_var 2))))
            ),
        template_equation
         (template_app
           (template_hole 4,
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 3, template_var 19),
                              template_var 8),
                            template_var 7),
                          template_var 6),
                        template_var 18),
                      template_var 17),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)),
          template_hole 15),
        template_equation
         (template_var 4,
          template_app
           (template_hole 1,
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, template_var 19),
               template_var 20),
             template_var 9)
           ))),
    ("BVSpecTypeSafe.Goto_correct",
     "[| wf_prog ?wt ?P;
         ?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = (?mxs,
                           ?mxl\<^sub>0, ?ins, ?xt) in ?C;
         ?ins ! ?pc = Goto ?branch;
         ?P,?T,?mxs,length
                     ?ins,?xt \<turnstile> ?ins ! ?pc,?pc :: ?\<Phi> ?C ?M;
         \<lfloor>?\<sigma>'\<rfloor> =
         exec (?P, None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs, ?sh);
         ?P,?\<Phi> |- (None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs,
                        ?sh) [ok] |]
      ==> ?P,?\<Phi> |- ?\<sigma>' [ok]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 24, template_var 20),
              template_var 19)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 23, template_var 19),
                          template_var 18),
                        template_var 17),
                      template_var 16),
                    template_var 15),
                  template_var 14),
                template_app
                 (template_app (template_hole 22, template_var 13),
                  template_app
                   (template_app (template_hole 21, template_var 12),
                    template_app
                     (template_app (template_hole 20, template_var 11),
                      template_var 10)))),
              template_var 18)
            ),
        template_equation
         (template_app
           (template_app (template_hole 18, template_var 11),
            template_var 9),
          template_app (template_hole 17, template_var 8)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 16, template_var 19),
                          template_var 14),
                        template_var 13),
                      template_app (template_hole 15, template_var 11)),
                    template_var 10),
                  template_app
                   (template_app (template_hole 18, template_var 11),
                    template_var 9)),
                template_var 9),
              template_app
               (template_app (template_var 7, template_var 18),
                template_var 17))
            ),
        template_equation
         (template_app (template_hole 13, template_var 6),
          template_app
           (template_hole 12,
            template_app
             (template_app (template_hole 11, template_var 19),
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_app
                 (template_app (template_hole 8, template_var 5),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app
                         (template_hole 6,
                          template_app
                           (template_app (template_hole 5, template_var 4),
                            template_app
                             (template_app
                               (template_hole 4, template_var 3),
                              template_app
                               (template_app
                                 (template_hole 3, template_var 18),
                                template_app
                                 (template_app
                                   (template_hole 2, template_var 17),
                                  template_app
                                   (template_app
                                     (template_hole 1, template_var 9),
                                    template_var 2)))))),
                        template_var 1)),
                    template_var 0)))))),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 19),
                template_var 7),
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_app
                 (template_app (template_hole 8, template_var 5),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app
                         (template_hole 6,
                          template_app
                           (template_app (template_hole 5, template_var 4),
                            template_app
                             (template_app
                               (template_hole 4, template_var 3),
                              template_app
                               (template_app
                                 (template_hole 3, template_var 18),
                                template_app
                                 (template_app
                                   (template_hole 2, template_var 17),
                                  template_app
                                   (template_app
                                     (template_hole 1, template_var 9),
                                    template_var 2)))))),
                        template_var 1)),
                    template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 19),
               template_var 7),
             template_var 6)
           ))),
    ("BVSpecTypeSafe.IfFalse_correct",
     "[| wf_prog ?wt ?P;
         ?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = (?mxs,
                           ?mxl\<^sub>0, ?ins, ?xt) in ?C;
         ?ins ! ?pc = IfFalse ?branch;
         ?P,?T,?mxs,length
                     ?ins,?xt \<turnstile> ?ins ! ?pc,?pc :: ?\<Phi> ?C ?M;
         \<lfloor>?\<sigma>'\<rfloor> =
         exec (?P, None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs, ?sh);
         ?P,?\<Phi> |- (None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs,
                        ?sh) [ok] |]
      ==> ?P,?\<Phi> |- ?\<sigma>' [ok]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 24, template_var 20),
              template_var 19)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 23, template_var 19),
                          template_var 18),
                        template_var 17),
                      template_var 16),
                    template_var 15),
                  template_var 14),
                template_app
                 (template_app (template_hole 22, template_var 13),
                  template_app
                   (template_app (template_hole 21, template_var 12),
                    template_app
                     (template_app (template_hole 20, template_var 11),
                      template_var 10)))),
              template_var 18)
            ),
        template_equation
         (template_app
           (template_app (template_hole 18, template_var 11),
            template_var 9),
          template_app (template_hole 17, template_var 8)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 16, template_var 19),
                          template_var 14),
                        template_var 13),
                      template_app (template_hole 15, template_var 11)),
                    template_var 10),
                  template_app
                   (template_app (template_hole 18, template_var 11),
                    template_var 9)),
                template_var 9),
              template_app
               (template_app (template_var 7, template_var 18),
                template_var 17))
            ),
        template_equation
         (template_app (template_hole 13, template_var 6),
          template_app
           (template_hole 12,
            template_app
             (template_app (template_hole 11, template_var 19),
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_app
                 (template_app (template_hole 8, template_var 5),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app
                         (template_hole 6,
                          template_app
                           (template_app (template_hole 5, template_var 4),
                            template_app
                             (template_app
                               (template_hole 4, template_var 3),
                              template_app
                               (template_app
                                 (template_hole 3, template_var 18),
                                template_app
                                 (template_app
                                   (template_hole 2, template_var 17),
                                  template_app
                                   (template_app
                                     (template_hole 1, template_var 9),
                                    template_var 2)))))),
                        template_var 1)),
                    template_var 0)))))),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 19),
                template_var 7),
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_app
                 (template_app (template_hole 8, template_var 5),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app
                         (template_hole 6,
                          template_app
                           (template_app (template_hole 5, template_var 4),
                            template_app
                             (template_app
                               (template_hole 4, template_var 3),
                              template_app
                               (template_app
                                 (template_hole 3, template_var 18),
                                template_app
                                 (template_app
                                   (template_hole 2, template_var 17),
                                  template_app
                                   (template_app
                                     (template_hole 1, template_var 9),
                                    template_var 2)))))),
                        template_var 1)),
                    template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 19),
               template_var 7),
             template_var 6)
           ))),
    ("BVSpecTypeSafe.Load_correct",
     "[| wf_prog ?wt ?P;
         ?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = (?mxs,
                           ?mxl\<^sub>0, ?ins, ?xt) in ?C;
         ?ins ! ?pc = Load ?idx;
         ?P,?T,?mxs,length
                     ?ins,?xt \<turnstile> ?ins ! ?pc,?pc :: ?\<Phi> ?C ?M;
         \<lfloor>?\<sigma>'\<rfloor> =
         exec (?P, None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs, ?sh);
         ?P,?\<Phi> |- (None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs,
                        ?sh) [ok] |]
      ==> ?P,?\<Phi> |- ?\<sigma>' [ok]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 24, template_var 20),
              template_var 19)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 23, template_var 19),
                          template_var 18),
                        template_var 17),
                      template_var 16),
                    template_var 15),
                  template_var 14),
                template_app
                 (template_app (template_hole 22, template_var 13),
                  template_app
                   (template_app (template_hole 21, template_var 12),
                    template_app
                     (template_app (template_hole 20, template_var 11),
                      template_var 10)))),
              template_var 18)
            ),
        template_equation
         (template_app
           (template_app (template_hole 18, template_var 11),
            template_var 9),
          template_app (template_hole 17, template_var 8)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 16, template_var 19),
                          template_var 14),
                        template_var 13),
                      template_app (template_hole 15, template_var 11)),
                    template_var 10),
                  template_app
                   (template_app (template_hole 18, template_var 11),
                    template_var 9)),
                template_var 9),
              template_app
               (template_app (template_var 7, template_var 18),
                template_var 17))
            ),
        template_equation
         (template_app (template_hole 13, template_var 6),
          template_app
           (template_hole 12,
            template_app
             (template_app (template_hole 11, template_var 19),
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_app
                 (template_app (template_hole 8, template_var 5),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app
                         (template_hole 6,
                          template_app
                           (template_app (template_hole 5, template_var 4),
                            template_app
                             (template_app
                               (template_hole 4, template_var 3),
                              template_app
                               (template_app
                                 (template_hole 3, template_var 18),
                                template_app
                                 (template_app
                                   (template_hole 2, template_var 17),
                                  template_app
                                   (template_app
                                     (template_hole 1, template_var 9),
                                    template_var 2)))))),
                        template_var 1)),
                    template_var 0)))))),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 19),
                template_var 7),
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_app
                 (template_app (template_hole 8, template_var 5),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app
                         (template_hole 6,
                          template_app
                           (template_app (template_hole 5, template_var 4),
                            template_app
                             (template_app
                               (template_hole 4, template_var 3),
                              template_app
                               (template_app
                                 (template_hole 3, template_var 18),
                                template_app
                                 (template_app
                                   (template_hole 2, template_var 17),
                                  template_app
                                   (template_app
                                     (template_hole 1, template_var 9),
                                    template_var 2)))))),
                        template_var 1)),
                    template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 19),
               template_var 7),
             template_var 6)
           ))),
    ("BVSpecTypeSafe.Push_correct",
     "[| wf_prog ?wt ?P;
         ?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = (?mxs,
                           ?mxl\<^sub>0, ?ins, ?xt) in ?C;
         ?ins ! ?pc = Push ?v;
         ?P,?T,?mxs,length
                     ?ins,?xt \<turnstile> ?ins ! ?pc,?pc :: ?\<Phi> ?C ?M;
         \<lfloor>?\<sigma>'\<rfloor> =
         exec (?P, None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs, ?sh);
         ?P,?\<Phi> |- (None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs,
                        ?sh) [ok] |]
      ==> ?P,?\<Phi> |- ?\<sigma>' [ok]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 24, template_var 20),
              template_var 19)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 23, template_var 19),
                          template_var 18),
                        template_var 17),
                      template_var 16),
                    template_var 15),
                  template_var 14),
                template_app
                 (template_app (template_hole 22, template_var 13),
                  template_app
                   (template_app (template_hole 21, template_var 12),
                    template_app
                     (template_app (template_hole 20, template_var 11),
                      template_var 10)))),
              template_var 18)
            ),
        template_equation
         (template_app
           (template_app (template_hole 18, template_var 11),
            template_var 9),
          template_app (template_hole 17, template_var 8)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 16, template_var 19),
                          template_var 14),
                        template_var 13),
                      template_app (template_hole 15, template_var 11)),
                    template_var 10),
                  template_app
                   (template_app (template_hole 18, template_var 11),
                    template_var 9)),
                template_var 9),
              template_app
               (template_app (template_var 7, template_var 18),
                template_var 17))
            ),
        template_equation
         (template_app (template_hole 13, template_var 6),
          template_app
           (template_hole 12,
            template_app
             (template_app (template_hole 11, template_var 19),
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_app
                 (template_app (template_hole 8, template_var 5),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app
                         (template_hole 6,
                          template_app
                           (template_app (template_hole 5, template_var 4),
                            template_app
                             (template_app
                               (template_hole 4, template_var 3),
                              template_app
                               (template_app
                                 (template_hole 3, template_var 18),
                                template_app
                                 (template_app
                                   (template_hole 2, template_var 17),
                                  template_app
                                   (template_app
                                     (template_hole 1, template_var 9),
                                    template_var 2)))))),
                        template_var 1)),
                    template_var 0)))))),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 19),
                template_var 7),
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_app
                 (template_app (template_hole 8, template_var 5),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app
                         (template_hole 6,
                          template_app
                           (template_app (template_hole 5, template_var 4),
                            template_app
                             (template_app
                               (template_hole 4, template_var 3),
                              template_app
                               (template_app
                                 (template_hole 3, template_var 18),
                                template_app
                                 (template_app
                                   (template_hole 2, template_var 17),
                                  template_app
                                   (template_app
                                     (template_hole 1, template_var 9),
                                    template_var 2)))))),
                        template_var 1)),
                    template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 19),
               template_var 7),
             template_var 6)
           ))),
    ("BVSpecTypeSafe.Store_correct",
     "[| wf_prog ?wt ?P;
         ?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = (?mxs,
                           ?mxl\<^sub>0, ?ins, ?xt) in ?C;
         ?ins ! ?pc = Store ?idx;
         ?P,?T,?mxs,length
                     ?ins,?xt \<turnstile> ?ins ! ?pc,?pc :: ?\<Phi> ?C ?M;
         \<lfloor>?\<sigma>'\<rfloor> =
         exec (?P, None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs, ?sh);
         ?P,?\<Phi> |- (None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs,
                        ?sh) [ok] |]
      ==> ?P,?\<Phi> |- ?\<sigma>' [ok]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 24, template_var 20),
              template_var 19)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 23, template_var 19),
                          template_var 18),
                        template_var 17),
                      template_var 16),
                    template_var 15),
                  template_var 14),
                template_app
                 (template_app (template_hole 22, template_var 13),
                  template_app
                   (template_app (template_hole 21, template_var 12),
                    template_app
                     (template_app (template_hole 20, template_var 11),
                      template_var 10)))),
              template_var 18)
            ),
        template_equation
         (template_app
           (template_app (template_hole 18, template_var 11),
            template_var 9),
          template_app (template_hole 17, template_var 8)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 16, template_var 19),
                          template_var 14),
                        template_var 13),
                      template_app (template_hole 15, template_var 11)),
                    template_var 10),
                  template_app
                   (template_app (template_hole 18, template_var 11),
                    template_var 9)),
                template_var 9),
              template_app
               (template_app (template_var 7, template_var 18),
                template_var 17))
            ),
        template_equation
         (template_app (template_hole 13, template_var 6),
          template_app
           (template_hole 12,
            template_app
             (template_app (template_hole 11, template_var 19),
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_app
                 (template_app (template_hole 8, template_var 5),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app
                         (template_hole 6,
                          template_app
                           (template_app (template_hole 5, template_var 4),
                            template_app
                             (template_app
                               (template_hole 4, template_var 3),
                              template_app
                               (template_app
                                 (template_hole 3, template_var 18),
                                template_app
                                 (template_app
                                   (template_hole 2, template_var 17),
                                  template_app
                                   (template_app
                                     (template_hole 1, template_var 9),
                                    template_var 2)))))),
                        template_var 1)),
                    template_var 0)))))),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 19),
                template_var 7),
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_app
                 (template_app (template_hole 8, template_var 5),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app
                         (template_hole 6,
                          template_app
                           (template_app (template_hole 5, template_var 4),
                            template_app
                             (template_app
                               (template_hole 4, template_var 3),
                              template_app
                               (template_app
                                 (template_hole 3, template_var 18),
                                template_app
                                 (template_app
                                   (template_hole 2, template_var 17),
                                  template_app
                                   (template_app
                                     (template_hole 1, template_var 9),
                                    template_var 2)))))),
                        template_var 1)),
                    template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 19),
               template_var 7),
             template_var 6)
           ))),
    ("BVSpecTypeSafe.Throwing_correct",
     "[| wf_jvm_prog\<^bsub>?\<Phi>\<^esub> ?P;
         ?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = (?mxs,
                           ?mxl\<^sub>0, ?ins, ?xt) in ?C;
         \<lfloor>?\<sigma>'\<rfloor> =
         exec (?P, None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs, ?sh);
         ?P,?\<Phi> |- (None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs,
                        ?sh) [ok];
         fst (exec_step ?P ?h ?stk ?loc ?C ?M ?pc ?ics ?frs ?sh) = None;
         ?ics = Throwing (?C' # ?Cs) ?a |]
      ==> ?P,?\<Phi> |- ?\<sigma>' [ok]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 25, template_var 21),
              template_var 20)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 24, template_var 20),
                          template_var 19),
                        template_var 18),
                      template_var 17),
                    template_var 16),
                  template_var 15),
                template_app
                 (template_app (template_hole 23, template_var 14),
                  template_app
                   (template_app (template_hole 22, template_var 13),
                    template_app
                     (template_app (template_hole 21, template_var 12),
                      template_var 11)))),
              template_var 19)
            ),
        template_equation
         (template_app (template_hole 19, template_var 10),
          template_app
           (template_hole 18,
            template_app
             (template_app (template_hole 17, template_var 20),
              template_app
               (template_app (template_hole 16, template_hole 15),
                template_app
                 (template_app (template_hole 14, template_var 9),
                  template_app
                   (template_app
                     (template_hole 13,
                      template_app
                       (template_app
                         (template_hole 12,
                          template_app
                           (template_app (template_hole 11, template_var 8),
                            template_app
                             (template_app
                               (template_hole 10, template_var 7),
                              template_app
                               (template_app
                                 (template_hole 9, template_var 19),
                                template_app
                                 (template_app
                                   (template_hole 8, template_var 18),
                                  template_app
                                   (template_app
                                     (template_hole 7, template_var 6),
                                    template_var 5)))))),
                        template_var 4)),
                    template_var 3)))))),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 20),
                template_var 21),
              template_app
               (template_app (template_hole 16, template_hole 15),
                template_app
                 (template_app (template_hole 14, template_var 9),
                  template_app
                   (template_app
                     (template_hole 13,
                      template_app
                       (template_app
                         (template_hole 12,
                          template_app
                           (template_app (template_hole 11, template_var 8),
                            template_app
                             (template_app
                               (template_hole 10, template_var 7),
                              template_app
                               (template_app
                                 (template_hole 9, template_var 19),
                                template_app
                                 (template_app
                                   (template_hole 8, template_var 18),
                                  template_app
                                   (template_app
                                     (template_hole 7, template_var 6),
                                    template_var 5)))))),
                        template_var 4)),
                    template_var 3))))
            ),
        template_equation
         (template_app
           (template_hole 4,
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 3, template_var 20),
                              template_var 9),
                            template_var 8),
                          template_var 7),
                        template_var 19),
                      template_var 18),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)),
          template_hole 15),
        template_equation
         (template_var 5,
          template_app
           (template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1)),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, template_var 20),
               template_var 21),
             template_var 10)
           ))),
    ("BVSpecTypeSafe.Called_set_handlers",
     "[| match_ex_table ?P ?C ?pc ?xt = \<lfloor>(?pc', ?d')\<rfloor>;
         ?i : Called_set |]
      ==> EX (f, t, D, h, d):set (relevant_entries ?P ?i ?pc ?xt).
             ?P \<turnstile> ?C \<preceq>\<^sup>* D &
             ?pc : {f..<t} & ?pc' = h & ?d' = d",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 27, template_var 6),
                template_var 5),
              template_var 4),
            template_var 3),
          template_app
           (template_hole 26,
            template_app
             (template_app (template_hole 25, template_var 2),
              template_var 1))),
        template_predicate
         (
            template_app
             (template_app (template_hole 24, template_var 0),
              template_app
               (template_app
                 (template_hole 23,
                  template_app
                   (template_app
                     (template_hole 23,
                      template_app
                       (template_app
                         (template_hole 23,
                          template_app (template_hole 22, t_empty)),
                        template_app (template_hole 22, t_empty))),
                    template_app (template_hole 22, t_empty))),
                template_app (template_hole 22, t_empty)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_hole 13,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 12, template_var 6),
                       template_var 0),
                     template_var 4),
                   template_var 3))),
             template_app (template_hole 11, t_empty))
           ))),
    ("BVSpecTypeSafe.xcpt_correct",
     "[| wf_jvm_prog\<^bsub>?\<Phi>\<^esub> ?P;
         ?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = (?mxs,
                           ?mxl\<^sub>0, ?ins, ?xt) in ?C;
         ?P,?T,?mxs,length
                     ?ins,?xt \<turnstile> ?ins ! ?pc,?pc :: ?\<Phi> ?C ?M;
         fst (exec_step ?P ?h ?stk ?loc ?C ?M ?pc ?ics ?frs ?sh) =
         \<lfloor>?xcp\<rfloor>;
         \<lfloor>?\<sigma>'\<rfloor> =
         exec (?P, None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs, ?sh);
         ?P,?\<Phi> |- (None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs,
                        ?sh) [ok] |]
      ==> ?P,?\<Phi> |- ?\<sigma>' [ok]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 26, template_var 19),
              template_var 18)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 25, template_var 18),
                          template_var 17),
                        template_var 16),
                      template_var 15),
                    template_var 14),
                  template_var 13),
                template_app
                 (template_app (template_hole 24, template_var 12),
                  template_app
                   (template_app (template_hole 23, template_var 11),
                    template_app
                     (template_app (template_hole 22, template_var 10),
                      template_var 9)))),
              template_var 17)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 21, template_var 18),
                          template_var 13),
                        template_var 12),
                      template_app (template_hole 20, template_var 10)),
                    template_var 9),
                  template_app
                   (template_app (template_hole 19, template_var 10),
                    template_var 8)),
                template_var 8),
              template_app
               (template_app (template_var 19, template_var 17),
                template_var 16))
            ),
        template_equation
         (template_app
           (template_hole 17,
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 16, template_var 18),
                              template_var 7),
                            template_var 6),
                          template_var 5),
                        template_var 17),
                      template_var 16),
                    template_var 8),
                  template_var 4),
                template_var 3),
              template_var 2)),
          template_app (template_hole 15, template_var 1)),
        template_equation
         (template_app (template_hole 13, template_var 0),
          template_app
           (template_hole 12,
            template_app
             (template_app (template_hole 11, template_var 18),
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_app
                 (template_app (template_hole 8, template_var 7),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app
                         (template_hole 6,
                          template_app
                           (template_app (template_hole 5, template_var 6),
                            template_app
                             (template_app
                               (template_hole 4, template_var 5),
                              template_app
                               (template_app
                                 (template_hole 3, template_var 17),
                                template_app
                                 (template_app
                                   (template_hole 2, template_var 16),
                                  template_app
                                   (template_app
                                     (template_hole 1, template_var 8),
                                    template_var 4)))))),
                        template_var 3)),
                    template_var 2)))))),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 18),
                template_var 19),
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_app
                 (template_app (template_hole 8, template_var 7),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app
                         (template_hole 6,
                          template_app
                           (template_app (template_hole 5, template_var 6),
                            template_app
                             (template_app
                               (template_hole 4, template_var 5),
                              template_app
                               (template_app
                                 (template_hole 3, template_var 17),
                                template_app
                                 (template_app
                                   (template_hole 2, template_var 16),
                                  template_app
                                   (template_app
                                     (template_hole 1, template_var 8),
                                    template_var 4)))))),
                        template_var 3)),
                    template_var 2))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 18),
               template_var 19),
             template_var 0)
           ))),
    ("BVSpecTypeSafe.Checkcast_correct",
     "[| wf_jvm_prog\<^bsub>?\<Phi>\<^esub> ?P;
         ?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = (?mxs,
                           ?mxl\<^sub>0, ?ins, ?xt) in ?C;
         ?ins ! ?pc = Checkcast ?D;
         ?P,?T,?mxs,length
                     ?ins,?xt \<turnstile> ?ins ! ?pc,?pc :: ?\<Phi> ?C ?M;
         \<lfloor>?\<sigma>'\<rfloor> =
         exec (?P, None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs, ?sh);
         ?P,?\<Phi> |- (None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs,
                        ?sh) [ok];
         fst (exec_step ?P ?h ?stk ?loc ?C ?M ?pc ?ics ?frs ?sh) = None |]
      ==> ?P,?\<Phi> |- ?\<sigma>' [ok]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 27, template_var 19),
              template_var 18)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 26, template_var 18),
                          template_var 17),
                        template_var 16),
                      template_var 15),
                    template_var 14),
                  template_var 13),
                template_app
                 (template_app (template_hole 25, template_var 12),
                  template_app
                   (template_app (template_hole 24, template_var 11),
                    template_app
                     (template_app (template_hole 23, template_var 10),
                      template_var 9)))),
              template_var 17)
            ),
        template_equation
         (template_app
           (template_app (template_hole 21, template_var 10),
            template_var 8),
          template_app (template_hole 20, template_var 7)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 19, template_var 18),
                          template_var 13),
                        template_var 12),
                      template_app (template_hole 18, template_var 10)),
                    template_var 9),
                  template_app
                   (template_app (template_hole 21, template_var 10),
                    template_var 8)),
                template_var 8),
              template_app
               (template_app (template_var 19, template_var 17),
                template_var 16))
            ),
        template_equation
         (template_app (template_hole 16, template_var 6),
          template_app
           (template_hole 15,
            template_app
             (template_app (template_hole 14, template_var 18),
              template_app
               (template_app (template_hole 13, template_hole 12),
                template_app
                 (template_app (template_hole 11, template_var 5),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app
                         (template_hole 9,
                          template_app
                           (template_app (template_hole 8, template_var 4),
                            template_app
                             (template_app
                               (template_hole 7, template_var 3),
                              template_app
                               (template_app
                                 (template_hole 6, template_var 17),
                                template_app
                                 (template_app
                                   (template_hole 5, template_var 16),
                                  template_app
                                   (template_app
                                     (template_hole 4, template_var 8),
                                    template_var 2)))))),
                        template_var 1)),
                    template_var 0)))))),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 18),
                template_var 19),
              template_app
               (template_app (template_hole 13, template_hole 12),
                template_app
                 (template_app (template_hole 11, template_var 5),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app
                         (template_hole 9,
                          template_app
                           (template_app (template_hole 8, template_var 4),
                            template_app
                             (template_app
                               (template_hole 7, template_var 3),
                              template_app
                               (template_app
                                 (template_hole 6, template_var 17),
                                template_app
                                 (template_app
                                   (template_hole 5, template_var 16),
                                  template_app
                                   (template_app
                                     (template_hole 4, template_var 8),
                                    template_var 2)))))),
                        template_var 1)),
                    template_var 0))))
            ),
        template_equation
         (template_app
           (template_hole 1,
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 0, template_var 18),
                              template_var 5),
                            template_var 4),
                          template_var 3),
                        template_var 17),
                      template_var 16),
                    template_var 8),
                  template_var 2),
                template_var 1),
              template_var 0)),
          template_hole 12)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 18),
               template_var 19),
             template_var 6)
           ))),
    ("BVSpecTypeSafe.Invoke_correct",
     "[| wf_jvm_prog\<^bsub>?\<Phi>\<^esub> ?P;
         ?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = (?mxs,
                           ?mxl\<^sub>0, ?ins, ?xt) in ?C;
         ?ins ! ?pc = Invoke ?M' ?n;
         ?P,?T,?mxs,length
                     ?ins,?xt \<turnstile> ?ins ! ?pc,?pc :: ?\<Phi> ?C ?M;
         \<lfloor>?\<sigma>'\<rfloor> =
         exec (?P, None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs, ?sh);
         ?P,?\<Phi> |- (None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs,
                        ?sh) [ok];
         fst (exec_step ?P ?h ?stk ?loc ?C ?M ?pc ?ics ?frs ?sh) = None |]
      ==> ?P,?\<Phi> |- ?\<sigma>' [ok]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 27, template_var 20),
              template_var 19)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 26, template_var 19),
                          template_var 18),
                        template_var 17),
                      template_var 16),
                    template_var 15),
                  template_var 14),
                template_app
                 (template_app (template_hole 25, template_var 13),
                  template_app
                   (template_app (template_hole 24, template_var 12),
                    template_app
                     (template_app (template_hole 23, template_var 11),
                      template_var 10)))),
              template_var 18)
            ),
        template_equation
         (template_app
           (template_app (template_hole 21, template_var 11),
            template_var 9),
          template_app
           (template_app (template_hole 20, template_var 8),
            template_var 7)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 19, template_var 19),
                          template_var 14),
                        template_var 13),
                      template_app (template_hole 18, template_var 11)),
                    template_var 10),
                  template_app
                   (template_app (template_hole 21, template_var 11),
                    template_var 9)),
                template_var 9),
              template_app
               (template_app (template_var 20, template_var 18),
                template_var 17))
            ),
        template_equation
         (template_app (template_hole 16, template_var 6),
          template_app
           (template_hole 15,
            template_app
             (template_app (template_hole 14, template_var 19),
              template_app
               (template_app (template_hole 13, template_hole 12),
                template_app
                 (template_app (template_hole 11, template_var 5),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app
                         (template_hole 9,
                          template_app
                           (template_app (template_hole 8, template_var 4),
                            template_app
                             (template_app
                               (template_hole 7, template_var 3),
                              template_app
                               (template_app
                                 (template_hole 6, template_var 18),
                                template_app
                                 (template_app
                                   (template_hole 5, template_var 17),
                                  template_app
                                   (template_app
                                     (template_hole 4, template_var 9),
                                    template_var 2)))))),
                        template_var 1)),
                    template_var 0)))))),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 19),
                template_var 20),
              template_app
               (template_app (template_hole 13, template_hole 12),
                template_app
                 (template_app (template_hole 11, template_var 5),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app
                         (template_hole 9,
                          template_app
                           (template_app (template_hole 8, template_var 4),
                            template_app
                             (template_app
                               (template_hole 7, template_var 3),
                              template_app
                               (template_app
                                 (template_hole 6, template_var 18),
                                template_app
                                 (template_app
                                   (template_hole 5, template_var 17),
                                  template_app
                                   (template_app
                                     (template_hole 4, template_var 9),
                                    template_var 2)))))),
                        template_var 1)),
                    template_var 0))))
            ),
        template_equation
         (template_app
           (template_hole 1,
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 0, template_var 19),
                              template_var 5),
                            template_var 4),
                          template_var 3),
                        template_var 18),
                      template_var 17),
                    template_var 9),
                  template_var 2),
                template_var 1),
              template_var 0)),
          template_hole 12)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 19),
               template_var 20),
             template_var 6)
           ))),
    ("BVSpecTypeSafe.Getfield_correct",
     "[| wf_prog ?wt ?P;
         ?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = (?mxs,
                           ?mxl\<^sub>0, ?ins, ?xt) in ?C;
         ?ins ! ?pc = Getfield ?F ?D;
         ?P,?T,?mxs,length
                     ?ins,?xt \<turnstile> ?ins ! ?pc,?pc :: ?\<Phi> ?C ?M;
         \<lfloor>?\<sigma>'\<rfloor> =
         exec (?P, None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs, ?sh);
         ?P,?\<Phi> |- (None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs,
                        ?sh) [ok];
         fst (exec_step ?P ?h ?stk ?loc ?C ?M ?pc ?ics ?frs ?sh) = None |]
      ==> ?P,?\<Phi> |- ?\<sigma>' [ok]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 27, template_var 21),
              template_var 20)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 26, template_var 20),
                          template_var 19),
                        template_var 18),
                      template_var 17),
                    template_var 16),
                  template_var 15),
                template_app
                 (template_app (template_hole 25, template_var 14),
                  template_app
                   (template_app (template_hole 24, template_var 13),
                    template_app
                     (template_app (template_hole 23, template_var 12),
                      template_var 11)))),
              template_var 19)
            ),
        template_equation
         (template_app
           (template_app (template_hole 21, template_var 12),
            template_var 10),
          template_app
           (template_app (template_hole 20, template_var 9),
            template_var 8)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 19, template_var 20),
                          template_var 15),
                        template_var 14),
                      template_app (template_hole 18, template_var 12)),
                    template_var 11),
                  template_app
                   (template_app (template_hole 21, template_var 12),
                    template_var 10)),
                template_var 10),
              template_app
               (template_app (template_var 7, template_var 19),
                template_var 18))
            ),
        template_equation
         (template_app (template_hole 16, template_var 6),
          template_app
           (template_hole 15,
            template_app
             (template_app (template_hole 14, template_var 20),
              template_app
               (template_app (template_hole 13, template_hole 12),
                template_app
                 (template_app (template_hole 11, template_var 5),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app
                         (template_hole 9,
                          template_app
                           (template_app (template_hole 8, template_var 4),
                            template_app
                             (template_app
                               (template_hole 7, template_var 3),
                              template_app
                               (template_app
                                 (template_hole 6, template_var 19),
                                template_app
                                 (template_app
                                   (template_hole 5, template_var 18),
                                  template_app
                                   (template_app
                                     (template_hole 4, template_var 10),
                                    template_var 2)))))),
                        template_var 1)),
                    template_var 0)))))),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 20),
                template_var 7),
              template_app
               (template_app (template_hole 13, template_hole 12),
                template_app
                 (template_app (template_hole 11, template_var 5),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app
                         (template_hole 9,
                          template_app
                           (template_app (template_hole 8, template_var 4),
                            template_app
                             (template_app
                               (template_hole 7, template_var 3),
                              template_app
                               (template_app
                                 (template_hole 6, template_var 19),
                                template_app
                                 (template_app
                                   (template_hole 5, template_var 18),
                                  template_app
                                   (template_app
                                     (template_hole 4, template_var 10),
                                    template_var 2)))))),
                        template_var 1)),
                    template_var 0))))
            ),
        template_equation
         (template_app
           (template_hole 1,
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 0, template_var 20),
                              template_var 5),
                            template_var 4),
                          template_var 3),
                        template_var 19),
                      template_var 18),
                    template_var 10),
                  template_var 2),
                template_var 1),
              template_var 0)),
          template_hole 12)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 20),
               template_var 7),
             template_var 6)
           ))),
    ("BVSpecTypeSafe.Putfield_correct",
     "[| wf_prog ?wt ?P;
         ?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = (?mxs,
                           ?mxl\<^sub>0, ?ins, ?xt) in ?C;
         ?ins ! ?pc = Putfield ?F ?D;
         ?P,?T,?mxs,length
                     ?ins,?xt \<turnstile> ?ins ! ?pc,?pc :: ?\<Phi> ?C ?M;
         \<lfloor>?\<sigma>'\<rfloor> =
         exec (?P, None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs, ?sh);
         ?P,?\<Phi> |- (None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs,
                        ?sh) [ok];
         fst (exec_step ?P ?h ?stk ?loc ?C ?M ?pc ?ics ?frs ?sh) = None |]
      ==> ?P,?\<Phi> |- ?\<sigma>' [ok]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 27, template_var 21),
              template_var 20)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 26, template_var 20),
                          template_var 19),
                        template_var 18),
                      template_var 17),
                    template_var 16),
                  template_var 15),
                template_app
                 (template_app (template_hole 25, template_var 14),
                  template_app
                   (template_app (template_hole 24, template_var 13),
                    template_app
                     (template_app (template_hole 23, template_var 12),
                      template_var 11)))),
              template_var 19)
            ),
        template_equation
         (template_app
           (template_app (template_hole 21, template_var 12),
            template_var 10),
          template_app
           (template_app (template_hole 20, template_var 9),
            template_var 8)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 19, template_var 20),
                          template_var 15),
                        template_var 14),
                      template_app (template_hole 18, template_var 12)),
                    template_var 11),
                  template_app
                   (template_app (template_hole 21, template_var 12),
                    template_var 10)),
                template_var 10),
              template_app
               (template_app (template_var 7, template_var 19),
                template_var 18))
            ),
        template_equation
         (template_app (template_hole 16, template_var 6),
          template_app
           (template_hole 15,
            template_app
             (template_app (template_hole 14, template_var 20),
              template_app
               (template_app (template_hole 13, template_hole 12),
                template_app
                 (template_app (template_hole 11, template_var 5),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app
                         (template_hole 9,
                          template_app
                           (template_app (template_hole 8, template_var 4),
                            template_app
                             (template_app
                               (template_hole 7, template_var 3),
                              template_app
                               (template_app
                                 (template_hole 6, template_var 19),
                                template_app
                                 (template_app
                                   (template_hole 5, template_var 18),
                                  template_app
                                   (template_app
                                     (template_hole 4, template_var 10),
                                    template_var 2)))))),
                        template_var 1)),
                    template_var 0)))))),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 20),
                template_var 7),
              template_app
               (template_app (template_hole 13, template_hole 12),
                template_app
                 (template_app (template_hole 11, template_var 5),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app
                         (template_hole 9,
                          template_app
                           (template_app (template_hole 8, template_var 4),
                            template_app
                             (template_app
                               (template_hole 7, template_var 3),
                              template_app
                               (template_app
                                 (template_hole 6, template_var 19),
                                template_app
                                 (template_app
                                   (template_hole 5, template_var 18),
                                  template_app
                                   (template_app
                                     (template_hole 4, template_var 10),
                                    template_var 2)))))),
                        template_var 1)),
                    template_var 0))))
            ),
        template_equation
         (template_app
           (template_hole 1,
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 0, template_var 20),
                              template_var 5),
                            template_var 4),
                          template_var 3),
                        template_var 19),
                      template_var 18),
                    template_var 10),
                  template_var 2),
                template_var 1),
              template_var 0)),
          template_hole 12)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 20),
               template_var 7),
             template_var 6)
           ))),
    ("BVSpecTypeSafe.New_Init_correct",
     "[| wf_prog ?wt ?P;
         ?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = (?mxs,
                           ?mxl\<^sub>0, ?ins, ?xt) in ?C;
         ?ins ! ?pc = New ?X;
         ?P,?T,?mxs,length
                     ?ins,?xt \<turnstile> ?ins ! ?pc,?pc :: ?\<Phi> ?C ?M;
         \<lfloor>?\<sigma>'\<rfloor> =
         exec (?P, None, ?h, (?stk, ?loc, ?C, ?M, ?pc, No_ics) # ?frs, ?sh);
         ?P,?\<Phi> |- (None, ?h, (?stk, ?loc, ?C, ?M, ?pc, No_ics) # ?frs,
                        ?sh) [ok];
         fst (exec_step ?P ?h ?stk ?loc ?C ?M ?pc No_ics ?frs ?sh) = None;
         ALL sfs. ?sh ?X ~= \<lfloor>(sfs, Done)\<rfloor> |]
      ==> ?P,?\<Phi> |- ?\<sigma>' [ok]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 34, template_var 19),
              template_var 18)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 33, template_var 18),
                          template_var 17),
                        template_var 16),
                      template_var 15),
                    template_var 14),
                  template_var 13),
                template_app
                 (template_app (template_hole 32, template_var 12),
                  template_app
                   (template_app (template_hole 31, template_var 11),
                    template_app
                     (template_app (template_hole 30, template_var 10),
                      template_var 9)))),
              template_var 17)
            ),
        template_equation
         (template_app
           (template_app (template_hole 28, template_var 10),
            template_var 8),
          template_app (template_hole 27, template_var 7)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 26, template_var 18),
                          template_var 13),
                        template_var 12),
                      template_app (template_hole 25, template_var 10)),
                    template_var 9),
                  template_app
                   (template_app (template_hole 28, template_var 10),
                    template_var 8)),
                template_var 8),
              template_app
               (template_app (template_var 6, template_var 17),
                template_var 16))
            ),
        template_equation
         (template_app (template_hole 23, template_var 5),
          template_app
           (template_hole 22,
            template_app
             (template_app (template_hole 21, template_var 18),
              template_app
               (template_app (template_hole 20, template_hole 19),
                template_app
                 (template_app (template_hole 18, template_var 4),
                  template_app
                   (template_app
                     (template_hole 17,
                      template_app
                       (template_app
                         (template_hole 16,
                          template_app
                           (template_app (template_hole 15, template_var 3),
                            template_app
                             (template_app
                               (template_hole 14, template_var 2),
                              template_app
                               (template_app
                                 (template_hole 13, template_var 17),
                                template_app
                                 (template_app
                                   (template_hole 12, template_var 16),
                                  template_app
                                   (template_app
                                     (template_hole 11, template_var 8),
                                    template_hole 10)))))),
                        template_var 1)),
                    template_var 0)))))),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 18),
                template_var 6),
              template_app
               (template_app (template_hole 20, template_hole 19),
                template_app
                 (template_app (template_hole 18, template_var 4),
                  template_app
                   (template_app
                     (template_hole 17,
                      template_app
                       (template_app
                         (template_hole 16,
                          template_app
                           (template_app (template_hole 15, template_var 3),
                            template_app
                             (template_app
                               (template_hole 14, template_var 2),
                              template_app
                               (template_app
                                 (template_hole 13, template_var 17),
                                template_app
                                 (template_app
                                   (template_hole 12, template_var 16),
                                  template_app
                                   (template_app
                                     (template_hole 11, template_var 8),
                                    template_hole 10)))))),
                        template_var 1)),
                    template_var 0))))
            ),
        template_equation
         (template_app
           (template_hole 7,
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 6, template_var 18),
                              template_var 4),
                            template_var 3),
                          template_var 2),
                        template_var 17),
                      template_var 16),
                    template_var 8),
                  template_hole 10),
                template_var 1),
              template_var 0)),
          template_hole 19),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 9, template_var 18),
               template_var 6),
             template_var 5)
           ))),
    ("BVSpecTypeSafe.typesafe",
     "[| wf_jvm_prog\<^bsub>?\<Phi>\<^esub> ?P; ~ is_class ?P Start;
         ?P \<turnstile> ?C sees ?M, Static :  []\<rightarrow>Void = ?m in ?C;
         ?M ~= clinit; !!C. C ~= Start ==> ?\<Phi>' C = ?\<Phi> C;
         ?\<Phi>' Start start_m = start_\<phi>\<^sub>m;
         ?\<Phi>' Start clinit = start_\<phi>\<^sub>m;
         !!b' Ts' T' m' D'.
            ?P \<turnstile> Object sees start_m, b' :  Ts'\<rightarrow>T' = m' in D' ==>
            b' = Static & Ts' = [] & T' = Void;
         class_add ?P (start_class ?C ?M) |- start_state ?P -jvm->
         ?\<sigma> |]
      ==> class_add ?P (start_class ?C ?M),?\<Phi>' |- ?\<sigma> [ok]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 33, template_var 6),
              template_var 5)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 31, template_var 5),
                  template_hole 30)
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 29, template_var 5),
                          template_var 4),
                        template_var 3),
                      template_hole 28),
                    template_hole 27),
                  template_hole 26),
                template_var 2),
              template_var 4)
            ),
        template_negation
         (template_equation (template_var 3, template_hole 24)),
        template_predicate (template_app (template_hole 23, t_empty)),
        template_equation
         (template_app
           (template_app (template_var 1, template_hole 30),
            template_hole 20),
          template_app
           (template_app
             (template_hole 19,
              template_app
               (template_hole 18,
                template_app
                 (template_app (template_hole 17, template_hole 27),
                  template_hole 16))),
            template_app
             (template_app
               (template_hole 19,
                template_app
                 (template_hole 18,
                  template_app
                   (template_app
                     (template_hole 17,
                      template_app
                       (template_app (template_hole 15, template_hole 26),
                        template_hole 27)),
                    template_hole 16))),
              template_hole 14))),
        template_equation
         (template_app
           (template_app (template_var 1, template_hole 30),
            template_hole 24),
          template_app
           (template_app
             (template_hole 19,
              template_app
               (template_hole 18,
                template_app
                 (template_app (template_hole 17, template_hole 27),
                  template_hole 16))),
            template_app
             (template_app
               (template_hole 19,
                template_app
                 (template_hole 18,
                  template_app
                   (template_app
                     (template_hole 17,
                      template_app
                       (template_app (template_hole 15, template_hole 26),
                        template_hole 27)),
                    template_hole 16))),
              template_hole 14))),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app
                     (template_hole 3,
                      template_app
                       (template_app (template_hole 2, template_var 4),
                        template_var 3)),
                    template_var 5)),
                template_app (template_hole 1, template_var 5)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 4),
                       template_var 3)),
                   template_var 5)),
               template_var 1),
             template_var 0)
           ))),
    ("BVSpecTypeSafe.Getstatic_Init_correct",
     "[| wf_prog ?wt ?P;
         ?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = (?mxs,
                           ?mxl\<^sub>0, ?ins, ?xt) in ?C;
         ?ins ! ?pc = Getstatic ?C' ?F ?D;
         ?P,?T,?mxs,length
                     ?ins,?xt \<turnstile> ?ins ! ?pc,?pc :: ?\<Phi> ?C ?M;
         \<lfloor>?\<sigma>'\<rfloor> =
         exec (?P, None, ?h, (?stk, ?loc, ?C, ?M, ?pc, No_ics) # ?frs, ?sh);
         ?P,?\<Phi> |- (None, ?h, (?stk, ?loc, ?C, ?M, ?pc, No_ics) # ?frs,
                        ?sh) [ok];
         fst (exec_step ?P ?h ?stk ?loc ?C ?M ?pc No_ics ?frs ?sh) = None;
         ALL sfs.
            ?sh (fst (field ?P ?D ?F)) ~= \<lfloor>(sfs, Done)\<rfloor> |]
      ==> ?P,?\<Phi> |- ?\<sigma>' [ok]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 36, template_var 21),
              template_var 20)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 35, template_var 20),
                          template_var 19),
                        template_var 18),
                      template_var 17),
                    template_var 16),
                  template_var 15),
                template_app
                 (template_app (template_hole 34, template_var 14),
                  template_app
                   (template_app (template_hole 33, template_var 13),
                    template_app
                     (template_app (template_hole 32, template_var 12),
                      template_var 11)))),
              template_var 19)
            ),
        template_equation
         (template_app
           (template_app (template_hole 30, template_var 12),
            template_var 10),
          template_app
           (template_app
             (template_app (template_hole 29, template_var 9),
              template_var 8),
            template_var 7)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 28, template_var 20),
                          template_var 15),
                        template_var 14),
                      template_app (template_hole 27, template_var 12)),
                    template_var 11),
                  template_app
                   (template_app (template_hole 30, template_var 12),
                    template_var 10)),
                template_var 10),
              template_app
               (template_app (template_var 6, template_var 19),
                template_var 18))
            ),
        template_equation
         (template_app (template_hole 25, template_var 5),
          template_app
           (template_hole 24,
            template_app
             (template_app (template_hole 23, template_var 20),
              template_app
               (template_app (template_hole 22, template_hole 21),
                template_app
                 (template_app (template_hole 20, template_var 4),
                  template_app
                   (template_app
                     (template_hole 19,
                      template_app
                       (template_app
                         (template_hole 18,
                          template_app
                           (template_app (template_hole 17, template_var 3),
                            template_app
                             (template_app
                               (template_hole 16, template_var 2),
                              template_app
                               (template_app
                                 (template_hole 15, template_var 19),
                                template_app
                                 (template_app
                                   (template_hole 14, template_var 18),
                                  template_app
                                   (template_app
                                     (template_hole 13, template_var 10),
                                    template_hole 12)))))),
                        template_var 1)),
                    template_var 0)))))),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 20),
                template_var 6),
              template_app
               (template_app (template_hole 22, template_hole 21),
                template_app
                 (template_app (template_hole 20, template_var 4),
                  template_app
                   (template_app
                     (template_hole 19,
                      template_app
                       (template_app
                         (template_hole 18,
                          template_app
                           (template_app (template_hole 17, template_var 3),
                            template_app
                             (template_app
                               (template_hole 16, template_var 2),
                              template_app
                               (template_app
                                 (template_hole 15, template_var 19),
                                template_app
                                 (template_app
                                   (template_hole 14, template_var 18),
                                  template_app
                                   (template_app
                                     (template_hole 13, template_var 10),
                                    template_hole 12)))))),
                        template_var 1)),
                    template_var 0))))
            ),
        template_equation
         (template_app
           (template_hole 9,
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 8, template_var 20),
                              template_var 4),
                            template_var 3),
                          template_var 2),
                        template_var 19),
                      template_var 18),
                    template_var 10),
                  template_hole 12),
                template_var 1),
              template_var 0)),
          template_hole 21),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 11, template_var 20),
               template_var 6),
             template_var 5)
           ))),
    ("BVSpecTypeSafe.Putstatic_Init_correct",
     "[| wf_prog ?wt ?P;
         ?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = (?mxs,
                           ?mxl\<^sub>0, ?ins, ?xt) in ?C;
         ?ins ! ?pc = Putstatic ?C' ?F ?D;
         ?P,?T,?mxs,length
                     ?ins,?xt \<turnstile> ?ins ! ?pc,?pc :: ?\<Phi> ?C ?M;
         \<lfloor>?\<sigma>'\<rfloor> =
         exec (?P, None, ?h, (?stk, ?loc, ?C, ?M, ?pc, No_ics) # ?frs, ?sh);
         ?P,?\<Phi> |- (None, ?h, (?stk, ?loc, ?C, ?M, ?pc, No_ics) # ?frs,
                        ?sh) [ok];
         fst (exec_step ?P ?h ?stk ?loc ?C ?M ?pc No_ics ?frs ?sh) = None;
         ALL sfs.
            ?sh (fst (field ?P ?D ?F)) ~= \<lfloor>(sfs, Done)\<rfloor> |]
      ==> ?P,?\<Phi> |- ?\<sigma>' [ok]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 36, template_var 21),
              template_var 20)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 35, template_var 20),
                          template_var 19),
                        template_var 18),
                      template_var 17),
                    template_var 16),
                  template_var 15),
                template_app
                 (template_app (template_hole 34, template_var 14),
                  template_app
                   (template_app (template_hole 33, template_var 13),
                    template_app
                     (template_app (template_hole 32, template_var 12),
                      template_var 11)))),
              template_var 19)
            ),
        template_equation
         (template_app
           (template_app (template_hole 30, template_var 12),
            template_var 10),
          template_app
           (template_app
             (template_app (template_hole 29, template_var 9),
              template_var 8),
            template_var 7)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 28, template_var 20),
                          template_var 15),
                        template_var 14),
                      template_app (template_hole 27, template_var 12)),
                    template_var 11),
                  template_app
                   (template_app (template_hole 30, template_var 12),
                    template_var 10)),
                template_var 10),
              template_app
               (template_app (template_var 6, template_var 19),
                template_var 18))
            ),
        template_equation
         (template_app (template_hole 25, template_var 5),
          template_app
           (template_hole 24,
            template_app
             (template_app (template_hole 23, template_var 20),
              template_app
               (template_app (template_hole 22, template_hole 21),
                template_app
                 (template_app (template_hole 20, template_var 4),
                  template_app
                   (template_app
                     (template_hole 19,
                      template_app
                       (template_app
                         (template_hole 18,
                          template_app
                           (template_app (template_hole 17, template_var 3),
                            template_app
                             (template_app
                               (template_hole 16, template_var 2),
                              template_app
                               (template_app
                                 (template_hole 15, template_var 19),
                                template_app
                                 (template_app
                                   (template_hole 14, template_var 18),
                                  template_app
                                   (template_app
                                     (template_hole 13, template_var 10),
                                    template_hole 12)))))),
                        template_var 1)),
                    template_var 0)))))),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 20),
                template_var 6),
              template_app
               (template_app (template_hole 22, template_hole 21),
                template_app
                 (template_app (template_hole 20, template_var 4),
                  template_app
                   (template_app
                     (template_hole 19,
                      template_app
                       (template_app
                         (template_hole 18,
                          template_app
                           (template_app (template_hole 17, template_var 3),
                            template_app
                             (template_app
                               (template_hole 16, template_var 2),
                              template_app
                               (template_app
                                 (template_hole 15, template_var 19),
                                template_app
                                 (template_app
                                   (template_hole 14, template_var 18),
                                  template_app
                                   (template_app
                                     (template_hole 13, template_var 10),
                                    template_hole 12)))))),
                        template_var 1)),
                    template_var 0))))
            ),
        template_equation
         (template_app
           (template_hole 9,
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 8, template_var 20),
                              template_var 4),
                            template_var 3),
                          template_var 2),
                        template_var 19),
                      template_var 18),
                    template_var 10),
                  template_hole 12),
                template_var 1),
              template_var 0)),
          template_hole 21),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 11, template_var 20),
               template_var 6),
             template_var 5)
           ))),
    ("BVSpecTypeSafe.New_nInit_correct",
     "[| wf_prog ?wt ?P;
         ?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = (?mxs,
                           ?mxl\<^sub>0, ?ins, ?xt) in ?C;
         ?ins ! ?pc = New ?X;
         ?P,?T,?mxs,length
                     ?ins,?xt \<turnstile> ?ins ! ?pc,?pc :: ?\<Phi> ?C ?M;
         \<lfloor>?\<sigma>'\<rfloor> =
         exec (?P, None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs, ?sh);
         ?P,?\<Phi> |- (None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs,
                        ?sh) [ok];
         fst (exec_step ?P ?h ?stk ?loc ?C ?M ?pc ?ics ?frs ?sh) = None;
         ?ics = Called [] |
         ?ics = No_ics & (EX sfs. ?sh ?X = \<lfloor>(sfs, Done)\<rfloor>) |]
      ==> ?P,?\<Phi> |- ?\<sigma>' [ok]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 38, template_var 20),
              template_var 19)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 37, template_var 19),
                          template_var 18),
                        template_var 17),
                      template_var 16),
                    template_var 15),
                  template_var 14),
                template_app
                 (template_app (template_hole 36, template_var 13),
                  template_app
                   (template_app (template_hole 35, template_var 12),
                    template_app
                     (template_app (template_hole 34, template_var 11),
                      template_var 10)))),
              template_var 18)
            ),
        template_equation
         (template_app
           (template_app (template_hole 32, template_var 11),
            template_var 9),
          template_app (template_hole 31, template_var 8)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 30, template_var 19),
                          template_var 14),
                        template_var 13),
                      template_app (template_hole 29, template_var 11)),
                    template_var 10),
                  template_app
                   (template_app (template_hole 32, template_var 11),
                    template_var 9)),
                template_var 9),
              template_app
               (template_app (template_var 7, template_var 18),
                template_var 17))
            ),
        template_equation
         (template_app (template_hole 27, template_var 6),
          template_app
           (template_hole 26,
            template_app
             (template_app (template_hole 25, template_var 19),
              template_app
               (template_app (template_hole 24, template_hole 23),
                template_app
                 (template_app (template_hole 22, template_var 5),
                  template_app
                   (template_app
                     (template_hole 21,
                      template_app
                       (template_app
                         (template_hole 20,
                          template_app
                           (template_app (template_hole 19, template_var 4),
                            template_app
                             (template_app
                               (template_hole 18, template_var 3),
                              template_app
                               (template_app
                                 (template_hole 17, template_var 18),
                                template_app
                                 (template_app
                                   (template_hole 16, template_var 17),
                                  template_app
                                   (template_app
                                     (template_hole 15, template_var 9),
                                    template_var 2)))))),
                        template_var 1)),
                    template_var 0)))))),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 14, template_var 19),
                template_var 7),
              template_app
               (template_app (template_hole 24, template_hole 23),
                template_app
                 (template_app (template_hole 22, template_var 5),
                  template_app
                   (template_app
                     (template_hole 21,
                      template_app
                       (template_app
                         (template_hole 20,
                          template_app
                           (template_app (template_hole 19, template_var 4),
                            template_app
                             (template_app
                               (template_hole 18, template_var 3),
                              template_app
                               (template_app
                                 (template_hole 17, template_var 18),
                                template_app
                                 (template_app
                                   (template_hole 16, template_var 17),
                                  template_app
                                   (template_app
                                     (template_hole 15, template_var 9),
                                    template_var 2)))))),
                        template_var 1)),
                    template_var 0))))
            ),
        template_equation
         (template_app
           (template_hole 12,
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 11, template_var 19),
                              template_var 5),
                            template_var 4),
                          template_var 3),
                        template_var 18),
                      template_var 17),
                    template_var 9),
                  template_var 2),
                template_var 1),
              template_var 0)),
          template_hole 23),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_app (template_hole 8, template_hole 7))),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 9, template_var 2),
                    template_hole 5)),
                template_app (template_hole 4, t_empty)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 14, template_var 19),
               template_var 7),
             template_var 6)
           ))),
    ("BVSpecTypeSafe.Invokestatic_Init_correct",
     "[| wf_jvm_prog\<^bsub>?\<Phi>\<^esub> ?P;
         ?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = (?mxs,
                           ?mxl\<^sub>0, ?ins, ?xt) in ?C;
         ?ins ! ?pc = Invokestatic ?D ?M' ?n; ?M' ~= clinit;
         ?P,?T,?mxs,length
                     ?ins,?xt \<turnstile> ?ins ! ?pc,?pc :: ?\<Phi> ?C ?M;
         \<lfloor>?\<sigma>'\<rfloor> =
         exec (?P, None, ?h, (?stk, ?loc, ?C, ?M, ?pc, No_ics) # ?frs, ?sh);
         ?P,?\<Phi> |- (None, ?h, (?stk, ?loc, ?C, ?M, ?pc, No_ics) # ?frs,
                        ?sh) [ok];
         fst (exec_step ?P ?h ?stk ?loc ?C ?M ?pc No_ics ?frs ?sh) = None;
         ALL sfs.
            ?sh (fst (method ?P ?D ?M')) ~= \<lfloor>(sfs, Done)\<rfloor> |]
      ==> ?P,?\<Phi> |- ?\<sigma>' [ok]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 38, template_var 20),
              template_var 19)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 37, template_var 19),
                          template_var 18),
                        template_var 17),
                      template_var 16),
                    template_var 15),
                  template_var 14),
                template_app
                 (template_app (template_hole 36, template_var 13),
                  template_app
                   (template_app (template_hole 35, template_var 12),
                    template_app
                     (template_app (template_hole 34, template_var 11),
                      template_var 10)))),
              template_var 18)
            ),
        template_equation
         (template_app
           (template_app (template_hole 32, template_var 11),
            template_var 9),
          template_app
           (template_app
             (template_app (template_hole 31, template_var 8),
              template_var 7),
            template_var 6)),
        template_negation
         (template_equation (template_var 7, template_hole 28)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 27, template_var 19),
                          template_var 14),
                        template_var 13),
                      template_app (template_hole 26, template_var 11)),
                    template_var 10),
                  template_app
                   (template_app (template_hole 32, template_var 11),
                    template_var 9)),
                template_var 9),
              template_app
               (template_app (template_var 20, template_var 18),
                template_var 17))
            ),
        template_equation
         (template_app (template_hole 24, template_var 5),
          template_app
           (template_hole 23,
            template_app
             (template_app (template_hole 22, template_var 19),
              template_app
               (template_app (template_hole 21, template_hole 20),
                template_app
                 (template_app (template_hole 19, template_var 4),
                  template_app
                   (template_app
                     (template_hole 18,
                      template_app
                       (template_app
                         (template_hole 17,
                          template_app
                           (template_app (template_hole 16, template_var 3),
                            template_app
                             (template_app
                               (template_hole 15, template_var 2),
                              template_app
                               (template_app
                                 (template_hole 14, template_var 18),
                                template_app
                                 (template_app
                                   (template_hole 13, template_var 17),
                                  template_app
                                   (template_app
                                     (template_hole 12, template_var 9),
                                    template_hole 11)))))),
                        template_var 1)),
                    template_var 0)))))),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 19),
                template_var 20),
              template_app
               (template_app (template_hole 21, template_hole 20),
                template_app
                 (template_app (template_hole 19, template_var 4),
                  template_app
                   (template_app
                     (template_hole 18,
                      template_app
                       (template_app
                         (template_hole 17,
                          template_app
                           (template_app (template_hole 16, template_var 3),
                            template_app
                             (template_app
                               (template_hole 15, template_var 2),
                              template_app
                               (template_app
                                 (template_hole 14, template_var 18),
                                template_app
                                 (template_app
                                   (template_hole 13, template_var 17),
                                  template_app
                                   (template_app
                                     (template_hole 12, template_var 9),
                                    template_hole 11)))))),
                        template_var 1)),
                    template_var 0))))
            ),
        template_equation
         (template_app
           (template_hole 8,
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 7, template_var 19),
                              template_var 4),
                            template_var 3),
                          template_var 2),
                        template_var 18),
                      template_var 17),
                    template_var 9),
                  template_hole 11),
                template_var 1),
              template_var 0)),
          template_hole 20),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 10, template_var 19),
               template_var 20),
             template_var 5)
           ))),
    ("BVSpecTypeSafe.Getstatic_nInit_correct",
     "[| wf_prog ?wt ?P;
         ?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = (?mxs,
                           ?mxl\<^sub>0, ?ins, ?xt) in ?C;
         ?ins ! ?pc = Getstatic ?C' ?F ?D;
         ?P,?T,?mxs,length
                     ?ins,?xt \<turnstile> ?ins ! ?pc,?pc :: ?\<Phi> ?C ?M;
         \<lfloor>?\<sigma>'\<rfloor> =
         exec (?P, None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs, ?sh);
         ?P,?\<Phi> |- (None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs,
                        ?sh) [ok];
         fst (exec_step ?P ?h ?stk ?loc ?C ?M ?pc ?ics ?frs ?sh) = None;
         ?ics = Called [] |
         ?ics = No_ics &
         (EX sfs.
             ?sh (fst (field ?P ?D ?F)) = \<lfloor>(sfs, Done)\<rfloor>) |]
      ==> ?P,?\<Phi> |- ?\<sigma>' [ok]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 40, template_var 22),
              template_var 21)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 39, template_var 21),
                          template_var 20),
                        template_var 19),
                      template_var 18),
                    template_var 17),
                  template_var 16),
                template_app
                 (template_app (template_hole 38, template_var 15),
                  template_app
                   (template_app (template_hole 37, template_var 14),
                    template_app
                     (template_app (template_hole 36, template_var 13),
                      template_var 12)))),
              template_var 20)
            ),
        template_equation
         (template_app
           (template_app (template_hole 34, template_var 13),
            template_var 11),
          template_app
           (template_app
             (template_app (template_hole 33, template_var 10),
              template_var 9),
            template_var 8)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 32, template_var 21),
                          template_var 16),
                        template_var 15),
                      template_app (template_hole 31, template_var 13)),
                    template_var 12),
                  template_app
                   (template_app (template_hole 34, template_var 13),
                    template_var 11)),
                template_var 11),
              template_app
               (template_app (template_var 7, template_var 20),
                template_var 19))
            ),
        template_equation
         (template_app (template_hole 29, template_var 6),
          template_app
           (template_hole 28,
            template_app
             (template_app (template_hole 27, template_var 21),
              template_app
               (template_app (template_hole 26, template_hole 25),
                template_app
                 (template_app (template_hole 24, template_var 5),
                  template_app
                   (template_app
                     (template_hole 23,
                      template_app
                       (template_app
                         (template_hole 22,
                          template_app
                           (template_app (template_hole 21, template_var 4),
                            template_app
                             (template_app
                               (template_hole 20, template_var 3),
                              template_app
                               (template_app
                                 (template_hole 19, template_var 20),
                                template_app
                                 (template_app
                                   (template_hole 18, template_var 19),
                                  template_app
                                   (template_app
                                     (template_hole 17, template_var 11),
                                    template_var 2)))))),
                        template_var 1)),
                    template_var 0)))))),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 16, template_var 21),
                template_var 7),
              template_app
               (template_app (template_hole 26, template_hole 25),
                template_app
                 (template_app (template_hole 24, template_var 5),
                  template_app
                   (template_app
                     (template_hole 23,
                      template_app
                       (template_app
                         (template_hole 22,
                          template_app
                           (template_app (template_hole 21, template_var 4),
                            template_app
                             (template_app
                               (template_hole 20, template_var 3),
                              template_app
                               (template_app
                                 (template_hole 19, template_var 20),
                                template_app
                                 (template_app
                                   (template_hole 18, template_var 19),
                                  template_app
                                   (template_app
                                     (template_hole 17, template_var 11),
                                    template_var 2)))))),
                        template_var 1)),
                    template_var 0))))
            ),
        template_equation
         (template_app
           (template_hole 14,
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 13, template_var 21),
                              template_var 5),
                            template_var 4),
                          template_var 3),
                        template_var 20),
                      template_var 19),
                    template_var 11),
                  template_var 2),
                template_var 1),
              template_var 0)),
          template_hole 25),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 2),
                  template_app (template_hole 10, template_hole 9))),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 11, template_var 2),
                    template_hole 7)),
                template_app (template_hole 6, t_empty)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 16, template_var 21),
               template_var 7),
             template_var 6)
           ))),
    ("BVSpecTypeSafe.Putstatic_nInit_correct",
     "[| wf_prog ?wt ?P;
         ?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = (?mxs,
                           ?mxl\<^sub>0, ?ins, ?xt) in ?C;
         ?ins ! ?pc = Putstatic ?C' ?F ?D;
         ?P,?T,?mxs,length
                     ?ins,?xt \<turnstile> ?ins ! ?pc,?pc :: ?\<Phi> ?C ?M;
         \<lfloor>?\<sigma>'\<rfloor> =
         exec (?P, None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs, ?sh);
         ?P,?\<Phi> |- (None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs,
                        ?sh) [ok];
         fst (exec_step ?P ?h ?stk ?loc ?C ?M ?pc ?ics ?frs ?sh) = None;
         ?ics = Called [] |
         ?ics = No_ics &
         (EX sfs.
             ?sh (fst (field ?P ?D ?F)) = \<lfloor>(sfs, Done)\<rfloor>) |]
      ==> ?P,?\<Phi> |- ?\<sigma>' [ok]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 40, template_var 22),
              template_var 21)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 39, template_var 21),
                          template_var 20),
                        template_var 19),
                      template_var 18),
                    template_var 17),
                  template_var 16),
                template_app
                 (template_app (template_hole 38, template_var 15),
                  template_app
                   (template_app (template_hole 37, template_var 14),
                    template_app
                     (template_app (template_hole 36, template_var 13),
                      template_var 12)))),
              template_var 20)
            ),
        template_equation
         (template_app
           (template_app (template_hole 34, template_var 13),
            template_var 11),
          template_app
           (template_app
             (template_app (template_hole 33, template_var 10),
              template_var 9),
            template_var 8)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 32, template_var 21),
                          template_var 16),
                        template_var 15),
                      template_app (template_hole 31, template_var 13)),
                    template_var 12),
                  template_app
                   (template_app (template_hole 34, template_var 13),
                    template_var 11)),
                template_var 11),
              template_app
               (template_app (template_var 7, template_var 20),
                template_var 19))
            ),
        template_equation
         (template_app (template_hole 29, template_var 6),
          template_app
           (template_hole 28,
            template_app
             (template_app (template_hole 27, template_var 21),
              template_app
               (template_app (template_hole 26, template_hole 25),
                template_app
                 (template_app (template_hole 24, template_var 5),
                  template_app
                   (template_app
                     (template_hole 23,
                      template_app
                       (template_app
                         (template_hole 22,
                          template_app
                           (template_app (template_hole 21, template_var 4),
                            template_app
                             (template_app
                               (template_hole 20, template_var 3),
                              template_app
                               (template_app
                                 (template_hole 19, template_var 20),
                                template_app
                                 (template_app
                                   (template_hole 18, template_var 19),
                                  template_app
                                   (template_app
                                     (template_hole 17, template_var 11),
                                    template_var 2)))))),
                        template_var 1)),
                    template_var 0)))))),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 16, template_var 21),
                template_var 7),
              template_app
               (template_app (template_hole 26, template_hole 25),
                template_app
                 (template_app (template_hole 24, template_var 5),
                  template_app
                   (template_app
                     (template_hole 23,
                      template_app
                       (template_app
                         (template_hole 22,
                          template_app
                           (template_app (template_hole 21, template_var 4),
                            template_app
                             (template_app
                               (template_hole 20, template_var 3),
                              template_app
                               (template_app
                                 (template_hole 19, template_var 20),
                                template_app
                                 (template_app
                                   (template_hole 18, template_var 19),
                                  template_app
                                   (template_app
                                     (template_hole 17, template_var 11),
                                    template_var 2)))))),
                        template_var 1)),
                    template_var 0))))
            ),
        template_equation
         (template_app
           (template_hole 14,
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 13, template_var 21),
                              template_var 5),
                            template_var 4),
                          template_var 3),
                        template_var 20),
                      template_var 19),
                    template_var 11),
                  template_var 2),
                template_var 1),
              template_var 0)),
          template_hole 25),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 2),
                  template_app (template_hole 10, template_hole 9))),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 11, template_var 2),
                    template_hole 7)),
                template_app (template_hole 6, t_empty)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 16, template_var 21),
               template_var 7),
             template_var 6)
           ))),
    ("BVSpecTypeSafe.Invokestatic_nInit_correct",
     "[| wf_jvm_prog\<^bsub>?\<Phi>\<^esub> ?P;
         ?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = (?mxs,
                           ?mxl\<^sub>0, ?ins, ?xt) in ?C;
         ?ins ! ?pc = Invokestatic ?D ?M' ?n; ?M' ~= clinit;
         ?P,?T,?mxs,length
                     ?ins,?xt \<turnstile> ?ins ! ?pc,?pc :: ?\<Phi> ?C ?M;
         \<lfloor>?\<sigma>'\<rfloor> =
         exec (?P, None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs, ?sh);
         ?P,?\<Phi> |- (None, ?h, (?stk, ?loc, ?C, ?M, ?pc, ?ics) # ?frs,
                        ?sh) [ok];
         fst (exec_step ?P ?h ?stk ?loc ?C ?M ?pc ?ics ?frs ?sh) = None;
         ?ics = Called [] |
         ?ics = No_ics &
         (EX sfs.
             ?sh (fst (method ?P ?D ?M')) =
             \<lfloor>(sfs, Done)\<rfloor>) |]
      ==> ?P,?\<Phi> |- ?\<sigma>' [ok]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 43, template_var 21),
              template_var 20)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 42, template_var 20),
                          template_var 19),
                        template_var 18),
                      template_var 17),
                    template_var 16),
                  template_var 15),
                template_app
                 (template_app (template_hole 41, template_var 14),
                  template_app
                   (template_app (template_hole 40, template_var 13),
                    template_app
                     (template_app (template_hole 39, template_var 12),
                      template_var 11)))),
              template_var 19)
            ),
        template_equation
         (template_app
           (template_app (template_hole 37, template_var 12),
            template_var 10),
          template_app
           (template_app
             (template_app (template_hole 36, template_var 9),
              template_var 8),
            template_var 7)),
        template_negation
         (template_equation (template_var 8, template_hole 33)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 32, template_var 20),
                          template_var 15),
                        template_var 14),
                      template_app (template_hole 31, template_var 12)),
                    template_var 11),
                  template_app
                   (template_app (template_hole 37, template_var 12),
                    template_var 10)),
                template_var 10),
              template_app
               (template_app (template_var 21, template_var 19),
                template_var 18))
            ),
        template_equation
         (template_app (template_hole 29, template_var 6),
          template_app
           (template_hole 28,
            template_app
             (template_app (template_hole 27, template_var 20),
              template_app
               (template_app (template_hole 26, template_hole 25),
                template_app
                 (template_app (template_hole 24, template_var 5),
                  template_app
                   (template_app
                     (template_hole 23,
                      template_app
                       (template_app
                         (template_hole 22,
                          template_app
                           (template_app (template_hole 21, template_var 4),
                            template_app
                             (template_app
                               (template_hole 20, template_var 3),
                              template_app
                               (template_app
                                 (template_hole 19, template_var 19),
                                template_app
                                 (template_app
                                   (template_hole 18, template_var 18),
                                  template_app
                                   (template_app
                                     (template_hole 17, template_var 10),
                                    template_var 2)))))),
                        template_var 1)),
                    template_var 0)))))),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 16, template_var 20),
                template_var 21),
              template_app
               (template_app (template_hole 26, template_hole 25),
                template_app
                 (template_app (template_hole 24, template_var 5),
                  template_app
                   (template_app
                     (template_hole 23,
                      template_app
                       (template_app
                         (template_hole 22,
                          template_app
                           (template_app (template_hole 21, template_var 4),
                            template_app
                             (template_app
                               (template_hole 20, template_var 3),
                              template_app
                               (template_app
                                 (template_hole 19, template_var 19),
                                template_app
                                 (template_app
                                   (template_hole 18, template_var 18),
                                  template_app
                                   (template_app
                                     (template_hole 17, template_var 10),
                                    template_var 2)))))),
                        template_var 1)),
                    template_var 0))))
            ),
        template_equation
         (template_app
           (template_hole 14,
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 13, template_var 20),
                              template_var 5),
                            template_var 4),
                          template_var 3),
                        template_var 19),
                      template_var 18),
                    template_var 10),
                  template_var 2),
                template_var 1),
              template_var 0)),
          template_hole 25),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 2),
                  template_app (template_hole 10, template_hole 9))),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 11, template_var 2),
                    template_hole 7)),
                template_app (template_hole 6, t_empty)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 16, template_var 20),
               template_var 21),
             template_var 6)
           )))]:
   (string * thm * template) list
### theory "Draft.BVSpecTypeSafeMoreTemplates"
### 0.524s elapsed time, 0.668s cpu time, 0.082s GC time
val it = (): unit
