Loading theory "Draft.Auxiliary" (required by "Draft.StartProgMoreTemplates" via "Draft.StartProg" via "Draft.ClassAdd" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.WellForm" via "Draft.TypeRel" via "Draft.Decl" via "Draft.Type")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.StartProgMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.StartProgMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.StartProgMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.169s elapsed time, 0.671s cpu time, 0.042s GC time
Loading theory "HOL-Library.Transitive_Closure_Table" (required by "Draft.StartProgMoreTemplates" via "Draft.StartProg" via "Draft.ClassAdd" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.WellForm" via "Draft.TypeRel")
### theory "Draft.Auxiliary"
### 0.173s elapsed time, 0.697s cpu time, 0.042s GC time
Loading theory "Draft.Type" (required by "Draft.StartProgMoreTemplates" via "Draft.StartProg" via "Draft.ClassAdd" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.WellForm" via "Draft.TypeRel" via "Draft.Decl")
Proofs for inductive predicate(s) "rtrancl_path"
  Proving monotonicity ...
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.241s elapsed time, 0.962s cpu time, 0.042s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.StartProgMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Proofs for inductive predicate(s) "rtrancl_tab"
  Proving monotonicity ...
### theory "HOL-Library.Nat_Bijection"
### 0.385s elapsed time, 1.521s cpu time, 0.143s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.StartProgMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Transitive_Closure_Table"
### 0.510s elapsed time, 2.018s cpu time, 0.194s GC time
Loading theory "HOL-Library.While_Combinator" (required by "Draft.StartProgMoreTemplates" via "Draft.StartProg" via "Draft.ClassAdd" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Jinja.Semilattices" via "Jinja.Err" via "Jinja.Semilat")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "{}"
consts
  snth :: "'a stream => nat => 'a"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
### theory "Draft.Type"
### 0.790s elapsed time, 3.113s cpu time, 0.356s GC time
Loading theory "Draft.Decl" (required by "Draft.StartProgMoreTemplates" via "Draft.StartProg" via "Draft.ClassAdd" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.WellForm" via "Draft.TypeRel")
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Decl"
### 0.076s elapsed time, 0.304s cpu time, 0.000s GC time
Loading theory "Draft.TypeRel" (required by "Draft.StartProgMoreTemplates" via "Draft.StartProg" via "Draft.ClassAdd" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.WellForm")
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.While_Combinator"
### 0.689s elapsed time, 2.553s cpu time, 0.781s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.StartProgMoreTemplates" via "Draft.ExtrEqs")
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  flat :: "'a list stream => 'a stream"
Proofs for inductive predicate(s) "subcls1p"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  supercls_lst :: "'m prog => char list list => bool"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Proofs for inductive predicate(s) "widen"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.315s elapsed time, 5.022s cpu time, 1.048s GC time
Loading theory "Jinja.Semilat" (required by "Draft.StartProgMoreTemplates" via "Draft.StartProg" via "Draft.ClassAdd" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Jinja.Semilattices" via "Jinja.Err")
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Methods"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
locale Semilat
  fixes A :: "'a set"
    and r :: "'a => 'a => bool"
    and f :: "'a => 'a => 'a"
  assumes "Semilat A r f"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Fields"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Jinja.Semilat"
### 0.468s elapsed time, 1.850s cpu time, 0.252s GC time
Loading theory "Jinja.Err" (required by "Draft.StartProgMoreTemplates" via "Draft.StartProg" via "Draft.ClassAdd" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Jinja.Semilattices")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.918s elapsed time, 3.626s cpu time, 0.425s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.TypeRel"
### 1.369s elapsed time, 5.174s cpu time, 1.165s GC time
Loading theory "Draft.Value" (required by "Draft.StartProgMoreTemplates" via "Draft.StartProg" via "Draft.ClassAdd" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.WellForm" via "Draft.SystemClasses" via "Draft.Exceptions" via "Draft.Objects")
Found termination order: "size <*mlex*> {}"
### No equation for constructor "Err"
consts
  ok_val :: "'a err => 'a"
consts
  strict :: "('a => 'b err) => 'a err => 'b err"
### theory "HOL-Library.Tree"
### 2.887s elapsed time, 10.572s cpu time, 2.586s GC time
Loading theory "Draft.Templates" (required by "Draft.StartProgMoreTemplates" via "Draft.ExtrEqs")
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Addr"
consts
  the_Intg :: "val => int"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_Addr :: "val => nat"
consts
  default_val :: "ty => val"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.065s elapsed time, 0.194s cpu time, 0.000s GC time
### theory "Draft.Value"
### 0.780s elapsed time, 2.435s cpu time, 1.065s GC time
Loading theory "Draft.Objects" (required by "Draft.StartProgMoreTemplates" via "Draft.StartProg" via "Draft.ClassAdd" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.WellForm" via "Draft.SystemClasses" via "Draft.Exceptions")
Loading theory "Draft.ExtrEqs" (required by "Draft.StartProgMoreTemplates")
### theory "Jinja.Err"
### 1.041s elapsed time, 3.380s cpu time, 1.185s GC time
Loading theory "Jinja.Listn" (required by "Draft.StartProgMoreTemplates" via "Draft.StartProg" via "Draft.ClassAdd" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Jinja.Semilattices")
Loading theory "Jinja.Opt" (required by "Draft.StartProgMoreTemplates" via "Draft.StartProg" via "Draft.ClassAdd" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Jinja.Semilattices")
consts
  coalesce :: "'a err list => 'a list err"
consts
  typeof_h :: "heap => val => ty option"
### theory "Jinja.Opt"
### 0.133s elapsed time, 0.531s cpu time, 0.097s GC time
Loading theory "Jinja.Product" (required by "Draft.StartProgMoreTemplates" via "Draft.StartProg" via "Draft.ClassAdd" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Jinja.Semilattices")
### theory "Jinja.Product"
### 0.190s elapsed time, 0.757s cpu time, 0.108s GC time
### theory "Jinja.Listn"
### 0.377s elapsed time, 1.440s cpu time, 0.205s GC time
Loading theory "Jinja.Semilattices" (required by "Draft.StartProgMoreTemplates" via "Draft.StartProg" via "Draft.ClassAdd" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType")
Proofs for inductive predicate(s) "iprog"
  Proving monotonicity ...
### theory "Draft.Objects"
### 0.657s elapsed time, 2.297s cpu time, 0.274s GC time
Loading theory "Draft.Exceptions" (required by "Draft.StartProgMoreTemplates" via "Draft.StartProg" via "Draft.ClassAdd" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.WellForm" via "Draft.SystemClasses")
Loading theory "Draft.JVMState" (required by "Draft.StartProgMoreTemplates" via "Draft.StartProg" via "Draft.ClassAdd" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVMExceptions" via "Draft.JVMInstructions")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.705s elapsed time, 2.479s cpu time, 0.274s GC time
### theory "Jinja.Semilattices"
### 0.305s elapsed time, 0.973s cpu time, 0.069s GC time
### theory "Draft.Exceptions"
### 0.177s elapsed time, 0.461s cpu time, 0.000s GC time
Loading theory "Draft.Conform" (required by "Draft.StartProgMoreTemplates" via "Draft.StartProg" via "Draft.ClassAdd" via "Draft.BVConform")
Loading theory "Draft.SystemClasses" (required by "Draft.StartProgMoreTemplates" via "Draft.StartProg" via "Draft.ClassAdd" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType" via "Draft.WellForm")
### Ambiguous input (line 34 of "$AFP/JinjaDCI/Common/Conform.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>hconf" ("_position" P) ("_position" h))
###   ("\<^const>HOL.conj"
###     ("_tuple"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" obj))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###             ("_applC" ("_position" Some) ("_position" obj)))
###           ("_position" P)))
###       ("_tuple_arg" ("\<^fixed>hconf" ("_position" h) ("_position" obj))))
###     ("_applC" ("_position" preallocated) ("_position" h))))
### ("\<^const>Pure.eq" ("\<^fixed>hconf" ("_position" P) ("_position" h))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" obj))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some) ("_position" obj)))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" h)
###           ("_position" obj))))
###     ("_applC" ("_position" preallocated) ("_position" h))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.SystemClasses"
### 0.101s elapsed time, 0.314s cpu time, 0.080s GC time
Loading theory "Draft.WellForm" (required by "Draft.StartProgMoreTemplates" via "Draft.StartProg" via "Draft.ClassAdd" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType" via "Draft.SemiType")
### Ambiguous input (line 39 of "$AFP/JinjaDCI/Common/Conform.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>shconf" ("_position" P) ("_position" h) ("_position" sh))
###   ("_tuple"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" C) ("_idts" ("_position" sfs) ("_position" i)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" C))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" sfs) ("_tuple_arg" ("_position" i)))))
###         ("_position" P)))
###     ("_tuple_arg"
###       ("\<^fixed>shconf" ("_position" h) ("_position" C)
###         ("_position" sfs)))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>shconf" ("_position" P) ("_position" h) ("_position" sh))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" C) ("_idts" ("_position" sfs) ("_position" i)))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" C))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" sfs) ("_tuple_arg" ("_position" i)))))
###       ("\<^const>Conform.soconf" ("_position" P) ("_position" h)
###         ("_position" C) ("_position" sfs)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Conform"
### 0.232s elapsed time, 0.710s cpu time, 0.080s GC time
### theory "Draft.WellForm"
### 0.679s elapsed time, 2.046s cpu time, 1.318s GC time
Loading theory "Draft.SemiType" (required by "Draft.StartProgMoreTemplates" via "Draft.StartProg" via "Draft.ClassAdd" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVM_SemiType")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### No equation for constructor "Void"
### No equation for constructor "Boolean"
### No equation for constructor "Integer"
### No equation for constructor "NT"
consts
  the_Class :: "ty => char list"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.SemiType"
### 0.303s elapsed time, 0.608s cpu time, 0.000s GC time
Loading theory "Draft.JVM_SemiType" (required by "Draft.StartProgMoreTemplates" via "Draft.StartProg" via "Draft.ClassAdd" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect")
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.JVMState"
### 1.405s elapsed time, 3.785s cpu time, 1.532s GC time
Loading theory "Draft.JVMInstructions" (required by "Draft.StartProgMoreTemplates" via "Draft.StartProg" via "Draft.ClassAdd" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect" via "Draft.JVMExceptions")
### theory "Draft.JVM_SemiType"
### 0.223s elapsed time, 0.451s cpu time, 0.000s GC time
### theory "Draft.JVMInstructions"
### 1.625s elapsed time, 1.978s cpu time, 0.301s GC time
Loading theory "Draft.JVMExceptions" (required by "Draft.StartProgMoreTemplates" via "Draft.StartProg" via "Draft.ClassAdd" via "Draft.BVConform" via "Draft.BVSpec" via "Draft.Effect")
consts
  match_ex_table ::
    "'m prog => char list => nat => ex_table => (nat * nat) option"
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd (snd (snd p))))))
         (fst (snd (snd (snd p))))) <*mlex*>
   {}"
### theory "Draft.JVMExceptions"
### 1.212s elapsed time, 2.286s cpu time, 1.484s GC time
Loading theory "Draft.JVMExecInstr" (required by "Draft.StartProgMoreTemplates" via "Draft.StartProg" via "Draft.ClassAdd" via "Draft.BVConform" via "Draft.JVMExec")
Loading theory "Draft.Effect" (required by "Draft.StartProgMoreTemplates" via "Draft.StartProg" via "Draft.ClassAdd" via "Draft.BVConform" via "Draft.BVSpec")
Found termination order: "{}"
locale prog
  fixes P :: "'a prog"
locale jvm_method
  fixes P :: "'a prog"
    and mxs :: "nat"
    and mxl\<^sub>0 :: "nat"
    and Ts :: "ty list"
    and T\<^sub>r :: "ty"
    and "is" :: "bytecode"
    and xt :: "ex_table"
    and mxl :: "nat"
  defines "mxl == 1 + length Ts + mxl\<^sub>0"
consts
  succs :: "instr => ty list * ty err list => nat => nat list"
### Missing patterns in function definition:
### the_class Void = undefined
### the_class Boolean = undefined
### the_class Integer = undefined
### (1 more)
Found termination order: "{}"
### Missing patterns in function definition:
### !!vb v ve. eff\<^sub>i (Store vb, v, [], ve) = undefined
### !!vb vc v vf. eff\<^sub>i (Getfield vb vc, v, [], vf) = undefined
### !!vb vc v vf. eff\<^sub>i (Putfield vb vc, v, [], vf) = undefined
### (11 more)
consts
  exec_instr ::
    "instr
     => jvm_prog
        => heap
           => val list
              => val list
                 => char list
                    => char list
                       => nat
                          => init_call_status
                             => frame list => sheap => jvm_state"
### theory "Draft.JVMExecInstr"
### 1.070s elapsed time, 2.298s cpu time, 0.276s GC time
Loading theory "Draft.JVMExec" (required by "Draft.StartProgMoreTemplates" via "Draft.StartProg" via "Draft.ClassAdd" via "Draft.BVConform")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Proofs for inductive predicate(s) "exec_1p"
  Proving monotonicity ...
### theory "Draft.JVMExec"
### 2.235s elapsed time, 5.499s cpu time, 0.671s GC time
Found termination order: "{}"
locale eff
  fixes P :: "'a prog"
    and mxs :: "nat"
    and mxl\<^sub>0 :: "nat"
    and Ts :: "ty list"
    and T\<^sub>r :: "ty"
    and "is" :: "bytecode"
    and xt :: "ex_table"
    and mxl :: "nat"
    and
    eff\<^sub>i :: "instr => ty list * ty err list => ty list * ty err list"
    and app\<^sub>i :: "instr => nat => ty list * ty err list => bool"
    and
    eff ::
      "instr
       => nat
          => (ty list * ty err list) option
             => (nat * (ty list * ty err list) option) list"
    and app :: "instr => nat => (ty list * ty err list) option => bool"
    and
    norm_eff ::
      "instr
       => nat
          => ty list * ty err list
             => (nat * (ty list * ty err list) option) list"
    and xcpt_app :: "instr => nat => ty list * ty err list => bool"
    and
    xcpt_eff ::
      "instr
       => nat
          => ty list * ty err list
             => (nat * (ty list * ty err list) option) list"
    and mpc :: "nat"
  defines "mxl == 1 + length Ts + mxl\<^sub>0"
    and "mpc == length is"
    and "!!i \<tau>. eff\<^sub>i i \<tau> == eff\<^sub>i (i, P, \<tau>)"
    and
    "!!i pc \<tau>.
        app\<^sub>i i pc \<tau> ==
        app\<^sub>i (i, P, pc, mxs, T\<^sub>r, \<tau>)"
    and "!!i pc \<tau>. xcpt_eff i pc \<tau> == xcpt_eff i P pc \<tau> xt"
    and "!!i pc \<tau>. norm_eff i pc \<tau> == norm_eff i P pc \<tau>"
    and "!!i pc. eff i pc == eff i P pc xt"
    and
    "!!i pc \<tau>. xcpt_app i pc \<tau> == xcpt_app i P pc mxs xt \<tau>"
    and "!!i pc. app i pc == app i P mxs T\<^sub>r pc mpc xt"
### theory "Draft.Effect"
### 8.546s elapsed time, 17.319s cpu time, 1.628s GC time
Loading theory "Draft.BVSpec" (required by "Draft.StartProgMoreTemplates" via "Draft.StartProg" via "Draft.ClassAdd" via "Draft.BVConform")
### theory "Draft.BVSpec"
### 0.114s elapsed time, 0.187s cpu time, 0.050s GC time
Loading theory "Draft.BVConform" (required by "Draft.StartProgMoreTemplates" via "Draft.StartProg" via "Draft.ClassAdd")
Found termination order: "{}"
Found termination order: "{}"
consts
  conf_fs ::
    "jvm_prog
     => heap
        => sheap
           => (char list
               => char list => (ty list * ty err list) option list)
              => char list => char list => nat => ty => frame list => bool"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 429 of "$AFP/JinjaDCI/BV/BVConform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" xp)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" xp)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.BVConform"
### 1.964s elapsed time, 2.386s cpu time, 0.228s GC time
Loading theory "Draft.ClassAdd" (required by "Draft.StartProgMoreTemplates" via "Draft.StartProg")
### Ambiguous input (line 622 of "$AFP/JinjaDCI/BV/ClassAdd.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" h)
###     ("_position" obj)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" h)
###     ("_position" obj)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 624 of "$AFP/JinjaDCI/BV/ClassAdd.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state"
###     ("_applC" ("_position" class_add)
###       ("_cargs" ("_position" P)
###         ("_tuple" ("_position" C) ("_tuple_arg" ("_position" cdec)))))
###     ("_position" h) ("_position" obj)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf"
###     ("_applC" ("_position" class_add)
###       ("_cargs" ("_position" P)
###         ("_tuple" ("_position" C) ("_tuple_arg" ("_position" cdec)))))
###     ("_position" h) ("_position" obj)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.ClassAdd"
### 0.402s elapsed time, 0.449s cpu time, 0.064s GC time
Loading theory "Draft.StartProg" (required by "Draft.StartProgMoreTemplates")
Found termination order: "{}"
### theory "Draft.StartProg"
### 0.181s elapsed time, 0.181s cpu time, 0.000s GC time
Loading theory "Draft.StartProgMoreTemplates"
val templateLemmas =
   [("StartProg.start_prog_Start_soconf",
     "class_add ?P
       (start_class ?C ?M),?h,Start \<turnstile>\<^sub>s Map.empty \<surd>",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 3),
                       template_var 2)),
                   template_var 1)),
               template_var 0),
             template_hole 1),
           t_empty)
         )),
    ("StartProg.start_prog_Start_super",
     "class_add ?P
       (start_class ?C ?M) \<turnstile> Start \<prec>\<^sup>1 Object",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_hole 3)),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_var 0)))
         )),
    ("StartProg.preallocated_start_state",
     "start_state ?P = ?\<sigma> ==> preallocated (fst (snd ?\<sigma>))",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1), template_var 0)],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("StartProg.\<Phi>_start",
     "?C ~= Start ==> \<Phi>_start ?\<Phi> ?C = ?\<Phi> ?C",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_app (template_var 0, template_var 1)))),
    ("StartProg.start_prog_start_shconf",
     "class_add ?P
       (start_class ?C
         ?M),start_heap
              ?P \<turnstile>\<^sub>s [Start |->
 (Map.empty, Done)] \<surd>",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, template_var 2),
                     template_var 1)),
                 template_var 0)),
             template_app (template_hole 7, template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 6, t_empty), template_hole 4),
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, t_empty),
                 template_hole 0))))
         )),
    ("StartProg.start_prog_Start_fields",
     "class_add ?P
       (start_class ?C ?M) \<turnstile> Start has_fields ?FDTs ==>
      map_of ?FDTs (?F, Start) = None",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app (template_hole 5, template_var 4),
                        template_var 3)),
                    template_var 2)),
                template_hole 4),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 4)),
         template_hole 0))),
    ("StartProg.\<Phi>_start",
     "\<Phi>_start ?\<Phi> Start clinit = start_\<phi>\<^sub>m",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 10, template_var 0),
           template_hole 9),
         template_hole 8),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_hole 3))),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_hole 4)),
                 template_hole 3))),
           template_hole 0)))),
    ("StartProg.\<Phi>_start",
     "\<Phi>_start ?\<Phi> Start start_m = start_\<phi>\<^sub>m",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 10, template_var 0),
           template_hole 9),
         template_hole 8),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_hole 3))),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_hole 4)),
                 template_hole 3))),
           template_hole 0)))),
    ("StartProg.check_types_\<phi>\<^sub>m",
     "check_types (class_add ?P (start_class ?C ?M)) 1 0
       (map OK start_\<phi>\<^sub>m)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 14,
                 template_app
                  (template_app
                    (template_hole 13,
                     template_app
                      (template_app (template_hole 12, template_var 2),
                       template_var 1)),
                   template_var 0)),
               template_hole 11),
             template_hole 10),
           template_app
            (template_app (template_hole 9, template_hole 8),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_hole 3))),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_app (template_hole 2, template_hole 1),
                           template_hole 4)),
                       template_hole 3))),
                 template_hole 0))))
         )),
    ("StartProg.start_prog_start_m_instrs",
     "wf_prog ?wf_md ?P ==>
      instrs_of (class_add ?P (start_class ?C ?M)) Start start_m =
      [Invokestatic ?C ?M 0, Return]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_hole 16,
           template_app
            (template_hole 15,
             template_app
              (template_hole 14,
               template_app
                (template_hole 13,
                 template_app
                  (template_hole 12,
                   template_app
                    (template_hole 11,
                     template_app
                      (template_hole 10,
                       template_app
                        (template_app
                          (template_app
                            (template_hole 9,
                             template_app
                              (template_app
                                (template_hole 8,
                                 template_app
                                  (template_app
                                    (template_hole 7, template_var 1),
                                   template_var 0)),
                               template_var 2)),
                           template_hole 6),
                         template_hole 5)))))))),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0),
               template_hole 2)),
           template_app
            (template_app (template_hole 4, template_hole 1),
             template_hole 0))))),
    ("StartProg.wf_start_prog_Start_sees_start_method",
     "wf_prog ?wf_md ?P ==>
      class_add ?P
       (start_class ?C
         ?M) \<turnstile> Start sees start_m, Static :  []\<rightarrow>Void = (1,
   0, [Invokestatic ?C ?M 0, Return], []) in Start",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_hole 17,
                           template_app
                            (template_app
                              (template_hole 16,
                               template_app
                                (template_app
                                  (template_hole 15, template_var 1),
                                 template_var 0)),
                             template_var 2)),
                         template_hole 14),
                       template_hole 13),
                     template_hole 12),
                   template_hole 11),
                 template_hole 10),
               template_app
                (template_app (template_hole 9, template_hole 8),
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app
                          (template_hole 4,
                           template_app
                            (template_app
                              (template_app
                                (template_hole 3, template_var 1),
                               template_var 0),
                             template_hole 6)),
                         template_app
                          (template_app (template_hole 4, template_hole 2),
                           template_hole 1))),
                     template_hole 0)))),
             template_hole 14)
           ))),
    ("StartProg.start_prog_Start_sees_start_method",
     "?P \<turnstile> Object sees_methods ?Mm ==>
      class_add ?P
       (start_class ?C
         ?M) \<turnstile> Start sees start_m, Static :  []\<rightarrow>Void = (1,
   0, [Invokestatic ?C ?M 0, Return], []) in Start",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 19, template_var 3),
                template_hole 18),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_hole 17,
                           template_app
                            (template_app
                              (template_hole 16,
                               template_app
                                (template_app
                                  (template_hole 15, template_var 1),
                                 template_var 0)),
                             template_var 3)),
                         template_hole 14),
                       template_hole 13),
                     template_hole 12),
                   template_hole 11),
                 template_hole 10),
               template_app
                (template_app (template_hole 9, template_hole 8),
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app
                          (template_hole 4,
                           template_app
                            (template_app
                              (template_app
                                (template_hole 3, template_var 1),
                               template_var 0),
                             template_hole 6)),
                         template_app
                          (template_app (template_hole 4, template_hole 2),
                           template_hole 1))),
                     template_hole 0)))),
             template_hole 14)
           ))),
    ("StartProg.start_prog_Start_sees_methods",
     "?P \<turnstile> Object sees_methods ?Mm ==>
      class_add ?P
       (start_class ?C
         ?M) \<turnstile> Start sees_methods ?Mm ++
       (map_option (%m. (m, Start)) o
        map_of [start_method ?C ?M, start_clinit])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 31, template_var 3),
                template_hole 30),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 31,
                 template_app
                  (template_app
                    (template_hole 29,
                     template_app
                      (template_app (template_hole 28, template_var 1),
                       template_var 0)),
                   template_var 3)),
               template_hole 27),
             template_app
              (template_app (template_hole 26, template_var 2),
               template_app
                (template_app
                  (template_hole 25,
                   template_app (template_hole 24, t_empty)),
                 template_app
                  (template_hole 22,
                   template_app
                    (template_app
                      (template_hole 21,
                       template_app
                        (template_app (template_hole 20, template_var 1),
                         template_var 0)),
                     template_app
                      (template_app
                        (template_hole 21,
                         template_app
                          (template_app
                            (template_hole 19, template_hole 18),
                           template_app
                            (template_app
                              (template_hole 17, template_hole 16),
                             template_app
                              (template_app
                                (template_hole 15, template_hole 14),
                               template_app
                                (template_app
                                  (template_hole 13, template_hole 12),
                                 template_app
                                  (template_app
                                    (template_hole 11, template_hole 10),
                                   template_app
                                    (template_app
(template_hole 9, template_hole 8),
                                     template_app
(template_app
  (template_hole 7,
   template_app
    (template_app
      (template_hole 6, template_app (template_hole 5, template_hole 4)),
     template_app
      (template_app (template_hole 6, template_hole 3), template_hole 2))),
 template_hole 1)))))))),
                       template_hole 0))))))
           ))),
    ("StartProg.start_clinit_wt_method",
     "[| ?P \<turnstile> ?C sees ?M, Static :  []\<rightarrow>Void = ?m in ?D;
         ?M ~= clinit; ~ is_class ?P Start |]
      ==> wt_method (class_add ?P (start_class ?C ?M)) Start Static [] Void
           1 0 [Push Unit, Return] [] start_\<phi>\<^sub>m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 25, template_var 4),
                          template_var 3),
                        template_var 2),
                      template_hole 24),
                    template_hole 23),
                  template_hole 22),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 2, template_hole 19)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 18, template_var 4),
                  template_hole 17)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_hole 16,
                               template_app
                                (template_app
                                  (template_hole 15,
                                   template_app
                                    (template_app
(template_hole 14, template_var 3),
                                     template_var 2)),
                                 template_var 4)),
                             template_hole 17),
                           template_hole 24),
                         template_hole 23),
                       template_hole 22),
                     template_hole 13),
                   template_hole 12),
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app (template_hole 10, template_hole 9)),
                   template_app
                    (template_app (template_hole 11, template_hole 8),
                     template_hole 7))),
               template_hole 6),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_hole 23),
                     template_hole 2))),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_app (template_hole 1, template_hole 22),
                           template_hole 23)),
                       template_hole 2))),
                 template_hole 0)))
           ))),
    ("StartProg.start_wt_method",
     "[| ?P \<turnstile> ?C sees ?M, Static :  []\<rightarrow>Void = ?m in ?D;
         ?M ~= clinit; ~ is_class ?P Start |]
      ==> wt_method (class_add ?P (start_class ?C ?M)) Start Static [] Void
           1 0 [Invokestatic ?C ?M 0, Return] [] start_\<phi>\<^sub>m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 24, template_var 4),
                          template_var 3),
                        template_var 2),
                      template_hole 23),
                    template_hole 22),
                  template_hole 21),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 2, template_hole 18)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 17, template_var 4),
                  template_hole 16)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_hole 15,
                               template_app
                                (template_app
                                  (template_hole 14,
                                   template_app
                                    (template_app
(template_hole 13, template_var 3),
                                     template_var 2)),
                                 template_var 4)),
                             template_hole 16),
                           template_hole 23),
                         template_hole 22),
                       template_hole 21),
                     template_hole 12),
                   template_hole 11),
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app
                        (template_app (template_hole 9, template_var 3),
                         template_var 2),
                       template_hole 11)),
                   template_app
                    (template_app (template_hole 10, template_hole 8),
                     template_hole 7))),
               template_hole 6),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_hole 22),
                     template_hole 2))),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_app (template_hole 1, template_hole 21),
                           template_hole 22)),
                       template_hole 2))),
                 template_hole 0)))
           ))),
    ("StartProg.start_prog_wf_jvm_prog",
     "[| wf_jvm_prog ?P; ~ is_class ?P Start;
         ?P \<turnstile> ?C sees ?M, Static :  []\<rightarrow>Void = ?m in ?D;
         ?M ~= clinit;
         !!b' Ts' T' m' D'.
            ?P \<turnstile> Object sees start_m, b' :  Ts'\<rightarrow>T' = m' in D' ==>
            b' = Static & Ts' = [] & T' = Void |]
      ==> wf_jvm_prog (class_add ?P (start_class ?C ?M))",
     template_implication
      ([template_predicate
         (template_app (template_hole 22, template_var 4)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 20, template_var 4),
                  template_hole 19)
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 18, template_var 4),
                          template_var 3),
                        template_var 2),
                      template_hole 17),
                    template_hole 16),
                  template_hole 15),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 2, template_hole 13)),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 22,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2)),
               template_var 4))
           ))),
    ("StartProg.start_prog_wf_jvm_prog_phi",
     "[| wf_jvm_prog\<^bsub>?\<Phi>\<^esub> ?P; ~ is_class ?P Start;
         ?P \<turnstile> ?C sees ?M, Static :  []\<rightarrow>Void = ?m in ?D;
         ?M ~= clinit; !!C. C ~= Start ==> ?\<Phi>' C = ?\<Phi> C;
         ?\<Phi>' Start start_m = start_\<phi>\<^sub>m;
         ?\<Phi>' Start clinit = start_\<phi>\<^sub>m;
         !!b' Ts' T' m' D'.
            ?P \<turnstile> Object sees start_m, b' :  Ts'\<rightarrow>T' = m' in D' ==>
            b' = Static & Ts' = [] & T' = Void |]
      ==> wf_jvm_prog\<^bsub>?\<Phi>'\<^esub>
           (class_add ?P (start_class ?C ?M))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 30, template_var 6),
              template_var 5)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 28, template_var 5),
                  template_hole 27)
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 26, template_var 5),
                          template_var 4),
                        template_var 3),
                      template_hole 25),
                    template_hole 24),
                  template_hole 23),
                template_var 2),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 3, template_hole 21)),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_equation
         (template_app
           (template_app (template_var 0, template_hole 27),
            template_hole 17),
          template_app
           (template_app
             (template_hole 16,
              template_app
               (template_hole 15,
                template_app
                 (template_app (template_hole 14, template_hole 24),
                  template_hole 13))),
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_hole 15,
                  template_app
                   (template_app
                     (template_hole 14,
                      template_app
                       (template_app (template_hole 12, template_hole 23),
                        template_hole 24)),
                    template_hole 13))),
              template_hole 11))),
        template_equation
         (template_app
           (template_app (template_var 0, template_hole 27),
            template_hole 21),
          template_app
           (template_app
             (template_hole 16,
              template_app
               (template_hole 15,
                template_app
                 (template_app (template_hole 14, template_hole 24),
                  template_hole 13))),
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_hole 15,
                  template_app
                   (template_app
                     (template_hole 14,
                      template_app
                       (template_app (template_hole 12, template_hole 23),
                        template_hole 24)),
                    template_hole 13))),
              template_hole 11))),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 30, template_var 0),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3)),
               template_var 5))
           ))),
    ("StartProg.start_class_wf",
     "[| ?P \<turnstile> ?C sees ?M, Static :  []\<rightarrow>Void = ?m in ?D;
         ?M ~= clinit; ~ is_class ?P Start;
         ?\<Phi> Start start_m = start_\<phi>\<^sub>m;
         ?\<Phi> Start clinit = start_\<phi>\<^sub>m; is_class ?P Object;
         !!b' Ts' T' m' D'.
            ?P \<turnstile> Object sees start_m, b' :  Ts'\<rightarrow>T' = m' in D' ==>
            b' = Static & Ts' = [] & T' = Void;
         !!b' Ts' T' m' D'.
            ?P \<turnstile> Object sees clinit, b' :  Ts'\<rightarrow>T' = m' in D' ==>
            b' = Static & Ts' = [] & T' = Void |]
      ==> wf_cdecl
           (%P C (M, b, Ts, T\<^sub>r, mxs, mxl\<^sub>0, is, xt).
               wt_method P C b Ts T\<^sub>r mxs mxl\<^sub>0 is xt
                (?\<Phi> C M))
           (class_add ?P (start_class ?C ?M)) (start_class ?C ?M)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 37, template_var 5),
                          template_var 4),
                        template_var 3),
                      template_hole 36),
                    template_hole 35),
                  template_hole 34),
                template_var 2),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 3, template_hole 31)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 30, template_var 5),
                  template_hole 29)
                )
            ),
        template_equation
         (template_app
           (template_app (template_var 0, template_hole 29),
            template_hole 27),
          template_app
           (template_app
             (template_hole 26,
              template_app
               (template_hole 25,
                template_app
                 (template_app (template_hole 24, template_hole 35),
                  template_hole 23))),
            template_app
             (template_app
               (template_hole 26,
                template_app
                 (template_hole 25,
                  template_app
                   (template_app
                     (template_hole 24,
                      template_app
                       (template_app (template_hole 22, template_hole 34),
                        template_hole 35)),
                    template_hole 23))),
              template_hole 21))),
        template_equation
         (template_app
           (template_app (template_var 0, template_hole 29),
            template_hole 31),
          template_app
           (template_app
             (template_hole 26,
              template_app
               (template_hole 25,
                template_app
                 (template_app (template_hole 24, template_hole 35),
                  template_hole 23))),
            template_app
             (template_app
               (template_hole 26,
                template_app
                 (template_hole 25,
                  template_app
                   (template_app
                     (template_hole 24,
                      template_app
                       (template_app (template_hole 22, template_hole 34),
                        template_hole 35)),
                    template_hole 23))),
              template_hole 21))),
        template_predicate
         (
            template_app
             (template_app (template_hole 30, template_var 5),
              template_hole 20)
            ),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate (template_app (template_hole 19, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 10, t_empty),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3)),
                 template_var 5)),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3))
           )))]:
   (string * thm * template) list
### theory "Draft.StartProgMoreTemplates"
### 0.526s elapsed time, 0.737s cpu time, 0.126s GC time
val it = (): unit
