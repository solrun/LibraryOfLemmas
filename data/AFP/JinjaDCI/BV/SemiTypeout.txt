Loading theory "Draft.Auxiliary" (required by "Draft.SemiTypeMoreTemplates" via "Draft.SemiType" via "Draft.WellForm" via "Draft.TypeRel" via "Draft.Decl" via "Draft.Type")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SemiTypeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SemiTypeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SemiTypeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.141s elapsed time, 0.578s cpu time, 0.039s GC time
Loading theory "HOL-Library.Transitive_Closure_Table" (required by "Draft.SemiTypeMoreTemplates" via "Draft.SemiType" via "Draft.WellForm" via "Draft.TypeRel")
### theory "Draft.Auxiliary"
### 0.146s elapsed time, 0.599s cpu time, 0.039s GC time
Loading theory "Draft.Type" (required by "Draft.SemiTypeMoreTemplates" via "Draft.SemiType" via "Draft.WellForm" via "Draft.TypeRel" via "Draft.Decl")
Proofs for inductive predicate(s) "rtrancl_path"
  Proving monotonicity ...
### theory "HOL-Library.Set_Algebras"
### 0.207s elapsed time, 0.843s cpu time, 0.039s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SemiTypeMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Proofs for inductive predicate(s) "rtrancl_tab"
  Proving monotonicity ...
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.360s elapsed time, 1.431s cpu time, 0.119s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SemiTypeMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Transitive_Closure_Table"
### 0.320s elapsed time, 1.253s cpu time, 0.144s GC time
Loading theory "HOL-Library.While_Combinator" (required by "Draft.SemiTypeMoreTemplates" via "Draft.SemiType" via "Jinja.Semilattices" via "Jinja.Err" via "Jinja.Semilat")
Found termination order: "{}"
consts
  left :: "'a tree => 'a tree"
Found termination order: "{}"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "Draft.Type"
### 0.685s elapsed time, 2.698s cpu time, 0.275s GC time
Loading theory "Draft.Decl" (required by "Draft.SemiTypeMoreTemplates" via "Draft.SemiType" via "Draft.WellForm" via "Draft.TypeRel")
Found termination order: "{}"
### theory "HOL-Library.While_Combinator"
### 0.410s elapsed time, 1.626s cpu time, 0.130s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SemiTypeMoreTemplates" via "Draft.ExtrEqs")
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Decl"
### 0.068s elapsed time, 0.273s cpu time, 0.000s GC time
Loading theory "Draft.TypeRel" (required by "Draft.SemiTypeMoreTemplates" via "Draft.SemiType" via "Draft.WellForm")
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Proofs for inductive predicate(s) "subcls1p"
  Proving monotonicity ...
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  supercls_lst :: "'m prog => char list list => bool"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Proofs for inductive predicate(s) "widen"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Proofs for inductive predicate(s) "Methods"
  Proving monotonicity ...
### theory "HOL-Library.Stream"
### 1.117s elapsed time, 4.234s cpu time, 0.873s GC time
Loading theory "Jinja.Semilat" (required by "Draft.SemiTypeMoreTemplates" via "Draft.SemiType" via "Jinja.Semilattices" via "Jinja.Err")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Fields"
locale Semilat
  fixes A :: "'a set"
    and r :: "'a => 'a => bool"
    and f :: "'a => 'a => 'a"
  assumes "Semilat A r f"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Jinja.Semilat"
### 0.319s elapsed time, 1.259s cpu time, 0.202s GC time
Loading theory "Jinja.Err" (required by "Draft.SemiTypeMoreTemplates" via "Draft.SemiType" via "Jinja.Semilattices")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.TypeRel"
### 0.812s elapsed time, 3.199s cpu time, 0.330s GC time
Loading theory "Draft.Value" (required by "Draft.SemiTypeMoreTemplates" via "Draft.SemiType" via "Draft.WellForm" via "Draft.SystemClasses" via "Draft.Exceptions" via "Draft.Objects")
### theory "HOL-Library.BigO"
### 1.064s elapsed time, 4.018s cpu time, 0.973s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### No equation for constructor "Err"
consts
  ok_val :: "'a err => 'a"
Found termination order: "size <*mlex*> {}"
consts
  strict :: "('a => 'b err) => 'a err => 'b err"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Addr"
consts
  the_Intg :: "val => int"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_Addr :: "val => nat"
consts
  default_val :: "ty => val"
### theory "Draft.Value"
### 0.693s elapsed time, 2.172s cpu time, 0.903s GC time
Loading theory "Draft.Objects" (required by "Draft.SemiTypeMoreTemplates" via "Draft.SemiType" via "Draft.WellForm" via "Draft.SystemClasses" via "Draft.Exceptions")
### theory "HOL-Library.Tree"
### 2.456s elapsed time, 8.897s cpu time, 2.115s GC time
Loading theory "Draft.Templates" (required by "Draft.SemiTypeMoreTemplates" via "Draft.ExtrEqs")
### theory "Jinja.Err"
### 0.867s elapsed time, 2.800s cpu time, 0.960s GC time
Loading theory "Jinja.Listn" (required by "Draft.SemiTypeMoreTemplates" via "Draft.SemiType" via "Jinja.Semilattices")
Loading theory "Jinja.Opt" (required by "Draft.SemiTypeMoreTemplates" via "Draft.SemiType" via "Jinja.Semilattices")
consts
  typeof_h :: "heap => val => ty option"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.063s elapsed time, 0.239s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SemiTypeMoreTemplates")
consts
  coalesce :: "'a err list => 'a list err"
### theory "Jinja.Opt"
### 0.168s elapsed time, 0.673s cpu time, 0.073s GC time
Loading theory "Jinja.Product" (required by "Draft.SemiTypeMoreTemplates" via "Draft.SemiType" via "Jinja.Semilattices")
### theory "Jinja.Product"
### 0.098s elapsed time, 0.390s cpu time, 0.000s GC time
### theory "Jinja.Listn"
### 0.384s elapsed time, 1.421s cpu time, 0.158s GC time
Loading theory "Jinja.Semilattices" (required by "Draft.SemiTypeMoreTemplates" via "Draft.SemiType")
Proofs for inductive predicate(s) "iprog"
  Proving monotonicity ...
### theory "Draft.Objects"
### 0.572s elapsed time, 2.002s cpu time, 0.215s GC time
Loading theory "Draft.Exceptions" (required by "Draft.SemiTypeMoreTemplates" via "Draft.SemiType" via "Draft.WellForm" via "Draft.SystemClasses")
### theory "Jinja.Semilattices"
### 0.267s elapsed time, 0.809s cpu time, 0.069s GC time
### theory "Draft.Exceptions"
### 0.178s elapsed time, 0.532s cpu time, 0.069s GC time
Loading theory "Draft.SystemClasses" (required by "Draft.SemiTypeMoreTemplates" via "Draft.SemiType" via "Draft.WellForm")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.651s elapsed time, 2.140s cpu time, 0.227s GC time
### theory "Draft.SystemClasses"
### 0.070s elapsed time, 0.102s cpu time, 0.000s GC time
Loading theory "Draft.WellForm" (required by "Draft.SemiTypeMoreTemplates" via "Draft.SemiType")
### theory "Draft.WellForm"
### 0.237s elapsed time, 0.279s cpu time, 0.058s GC time
Loading theory "Draft.SemiType" (required by "Draft.SemiTypeMoreTemplates")
### No equation for constructor "Void"
### No equation for constructor "Boolean"
### No equation for constructor "Integer"
### No equation for constructor "NT"
consts
  the_Class :: "ty => char list"
### theory "Draft.SemiType"
### 0.195s elapsed time, 0.219s cpu time, 0.000s GC time
Loading theory "Draft.SemiTypeMoreTemplates"
val templateLemmas =
   [("SemiType.exec_lub_refl", "exec_lub ?r ?f ?T ?T = ?T",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0),
         template_var 0),
       template_var 0)),
    ("SemiType.wf_subtype_acc", "wf_prog ?wf_mb ?P ==> acc (subtype ?P)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("SemiType.err_semilat_JType_esl",
     "wf_prog ?wf_mb ?P ==> err_semilat (SemiType.esl ?P)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("SemiType.wf_converse_subcls1_impl_acc_subtype",
     "wf ((subcls1 ?P)^-1) ==> acc (subtype ?P)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("SemiType.order_widen",
     "wf_prog ?m ?P ==> order (subtype ?P) (types ?P)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("SemiType.closed_err_types",
     "wf_prog ?wf_mb ?P ==>
      Semilat.closed (err (types ?P)) (lift2 (SemiType.sup ?P))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)))),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("SemiType.superI",
     "?P \<turnstile> ?C \<prec>\<^sup>1 ?D ==> super ?P ?C = ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_var 1))),
    ("SemiType.NT_widen",
     "subtype ?P NT ?T = (?T = NT | (EX C. ?T = Class C))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_hole 4),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 4)),
             template_app (template_hole 1, t_empty))
           ))),
    ("SemiType.is_class_is_subcls",
     "wf_prog ?m ?P ==>
      is_class ?P ?C = ?P \<turnstile> ?C \<preceq>\<^sup>* Object",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 2)),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)))))),
    ("SemiType.Class_widen2",
     "subtype ?P (Class ?C) ?T =
      (EX D. ?T = Class D & ?P \<turnstile> ?C \<preceq>\<^sup>* D)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 8, template_var 2),
           template_app (template_hole 7, template_var 1)),
         template_var 0),
       template_app (template_hole 6, t_empty))),
    ("SemiType.widen_antisym",
     "[| wf_prog ?m ?P; subtype ?P ?T ?U; subtype ?P ?U ?T |] ==> ?T = ?U",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 0),
              template_var 1)
            )],
       template_equation (template_var 1, template_var 0))),
    ("SemiType.sup_exists",
     "[| subtype ?P ?a ?c; subtype ?P ?b ?c |]
      ==> EX T. SemiType.sup ?P ?a ?b = OK T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 0),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("SemiType.subcls_antisym",
     "[| wf_prog ?m ?P; ?P \<turnstile> ?C \<preceq>\<^sup>* ?D;
         ?P \<turnstile> ?D \<preceq>\<^sup>* ?C |]
      ==> ?C = ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_var 1)),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)))
            )],
       template_equation (template_var 1, template_var 0))),
    ("SemiType.sup_subtype_greater",
     "[| wf_prog ?wf_mb ?P; is_type ?P ?t1.0; is_type ?P ?t2.0;
         SemiType.sup ?P ?t1.0 ?t2.0 = OK ?s |]
      ==> subtype ?P ?t1.0 ?s & subtype ?P ?t2.0 ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 1)
            ),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1),
               template_var 0))
           ))),
    ("SemiType.sup_subtype_smallest",
     "[| wf_prog ?wf_mb ?P; is_type ?P ?a; is_type ?P ?b; is_type ?P ?c;
         subtype ?P ?a ?c; subtype ?P ?b ?c;
         SemiType.sup ?P ?a ?b = OK ?d |]
      ==> subtype ?P ?d ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 1, template_var 4),
              template_var 3),
            template_var 2),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 4),
               template_var 0),
             template_var 1)
           )))]:
   (string * thm * template) list
### theory "Draft.SemiTypeMoreTemplates"
### 0.371s elapsed time, 0.530s cpu time, 0.076s GC time
val it = (): unit
