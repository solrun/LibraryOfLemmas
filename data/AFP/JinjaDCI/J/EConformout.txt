Loading theory "Draft.Auxiliary" (required by "Draft.EConformMoreTemplates" via "Draft.EConform" via "Draft.SmallStep" via "Draft.Expr" via "Draft.Exceptions" via "Draft.Objects" via "Draft.TypeRel" via "Draft.Decl" via "Draft.Type")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.EConformMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.EConformMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.EConformMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.149s elapsed time, 0.608s cpu time, 0.038s GC time
Loading theory "HOL-Library.Transitive_Closure_Table" (required by "Draft.EConformMoreTemplates" via "Draft.EConform" via "Draft.SmallStep" via "Draft.Expr" via "Draft.Exceptions" via "Draft.Objects" via "Draft.TypeRel")
Proofs for inductive predicate(s) "rtrancl_path"
### theory "Draft.Auxiliary"
### 0.180s elapsed time, 0.736s cpu time, 0.038s GC time
Loading theory "Draft.Type" (required by "Draft.EConformMoreTemplates" via "Draft.EConform" via "Draft.SmallStep" via "Draft.Expr" via "Draft.Exceptions" via "Draft.Objects" via "Draft.TypeRel" via "Draft.Decl")
  Proving monotonicity ...
### theory "HOL-Library.Set_Algebras"
### 0.199s elapsed time, 0.810s cpu time, 0.038s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.EConformMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
Proofs for inductive predicate(s) "rtrancl_tab"
  Proving monotonicity ...
### theory "HOL-Library.Nat_Bijection"
### 0.332s elapsed time, 1.330s cpu time, 0.116s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.EConformMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Transitive_Closure_Table"
### 0.360s elapsed time, 1.416s cpu time, 0.144s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.EConformMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### theory "Draft.Type"
### 0.741s elapsed time, 2.915s cpu time, 0.263s GC time
Loading theory "Draft.Decl" (required by "Draft.EConformMoreTemplates" via "Draft.EConform" via "Draft.SmallStep" via "Draft.Expr" via "Draft.Exceptions" via "Draft.Objects" via "Draft.TypeRel")
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "Draft.Decl"
### 0.069s elapsed time, 0.274s cpu time, 0.000s GC time
Loading theory "Draft.TypeRel" (required by "Draft.EConformMoreTemplates" via "Draft.EConform" via "Draft.SmallStep" via "Draft.Expr" via "Draft.Exceptions" via "Draft.Objects")
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Proofs for inductive predicate(s) "subcls1p"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.039s elapsed time, 3.964s cpu time, 0.825s GC time
consts
  supercls_lst :: "'m prog => char list list => bool"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "widen"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Methods"
  Proving monotonicity ...
### theory "HOL-Library.BigO"
### 1.025s elapsed time, 3.770s cpu time, 0.795s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Fields"
  Proving monotonicity ...
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.TypeRel"
### 0.910s elapsed time, 2.635s cpu time, 0.741s GC time
Loading theory "Draft.Value" (required by "Draft.EConformMoreTemplates" via "Draft.EConform" via "Draft.SmallStep" via "Draft.Expr" via "Draft.Exceptions" via "Draft.Objects")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.012s elapsed time, 6.428s cpu time, 1.112s GC time
Loading theory "Draft.Templates" (required by "Draft.EConformMoreTemplates" via "Draft.ExtrEqs")
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Addr"
consts
  the_Intg :: "val => int"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_Addr :: "val => nat"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.107s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.EConformMoreTemplates")
consts
  default_val :: "ty => val"
### theory "Draft.Value"
### 0.348s elapsed time, 0.714s cpu time, 0.036s GC time
Loading theory "Draft.Objects" (required by "Draft.EConformMoreTemplates" via "Draft.EConform" via "Draft.SmallStep" via "Draft.Expr" via "Draft.Exceptions")
consts
  typeof_h :: "heap => val => ty option"
Proofs for inductive predicate(s) "iprog"
  Proving monotonicity ...
### theory "Draft.Objects"
### 0.464s elapsed time, 0.975s cpu time, 0.112s GC time
Loading theory "Draft.Exceptions" (required by "Draft.EConformMoreTemplates" via "Draft.EConform" via "Draft.SmallStep" via "Draft.Expr")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.530s elapsed time, 1.111s cpu time, 0.112s GC time
### theory "Draft.Exceptions"
### 0.134s elapsed time, 0.192s cpu time, 0.000s GC time
Loading theory "Draft.Expr" (required by "Draft.EConformMoreTemplates" via "Draft.EConform" via "Draft.SmallStep")
Loading theory "Draft.State" (required by "Draft.EConformMoreTemplates" via "Draft.EConform" via "Draft.SmallStep")
Loading theory "Draft.SystemClasses" (required by "Draft.EConformMoreTemplates" via "Draft.EConform" via "Draft.SmallStep" via "Draft.WWellForm" via "Draft.WellForm")
### theory "Draft.State"
### 0.047s elapsed time, 0.146s cpu time, 0.048s GC time
### theory "Draft.SystemClasses"
### 0.075s elapsed time, 0.201s cpu time, 0.048s GC time
Loading theory "Draft.WellForm" (required by "Draft.EConformMoreTemplates" via "Draft.EConform" via "Draft.SmallStep" via "Draft.WWellForm")
### theory "Draft.WellForm"
### 0.241s elapsed time, 0.504s cpu time, 0.057s GC time
Found termination order: "{}"
### Ambiguous input (line 129 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 130 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" fv) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("_applC" ("_position" fv) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" fv) ("_position" e\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  fv :: "char list exp => char list set"
  fvs :: "char list exp list => char list set"
Found termination order: "{}"
### Ambiguous input (line 161 of "$AFP/JinjaDCI/J/Expr.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lass_val_of)
###       ("\<^const>Expr.exp.LAss" ("_position" V)
###         ("_applC" ("_position" Val) ("_position" v))))
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" V) ("_tuple_arg" ("_position" v))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" lass_val_of)
###       ("_updbind" ("_position" V)
###         ("_applC" ("_position" Val) ("_position" v))))
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" V) ("_tuple_arg" ("_position" v))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 252 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" sub_RI)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>1))
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub_RI)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>1))
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub_RI)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>1))
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 253 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" sub_RI)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub_RI)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub_RI)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  sub_RI :: "'a exp => bool"
  sub_RIs :: "'a exp list => bool"
### Ambiguous input (line 295 of "$AFP/JinjaDCI/J/Expr.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C')
###         ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" not_init)
###         ("_cargs" ("_position" C') ("_position" e\<^sub>1)))
###       ("_applC" ("_position" not_init)
###         ("_cargs" ("_position" C') ("_position" e\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C')
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" not_init)
###         ("_cargs" ("_position" C') ("_position" e\<^sub>1)))
###       ("_applC" ("_position" not_init)
###         ("_cargs" ("_position" C') ("_position" e\<^sub>2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 296 of "$AFP/JinjaDCI/J/Expr.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C')
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C') ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C')
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C') ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  not_init :: "char list => 'a exp => bool"
  not_inits :: "char list => 'a exp list => bool"
### Ambiguous input (line 336 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" subexp)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("\<^const>Set.union"
###         ("_Finset"
###           ("_args" ("_position" e\<^sub>1) ("_position" e\<^sub>2)))
###         ("_applC" ("_position" subexp) ("_position" e\<^sub>1)))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subexp)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("\<^const>Set.union"
###         ("_Finset"
###           ("_args" ("_position" e\<^sub>1) ("_position" e\<^sub>2)))
###         ("_applC" ("_position" subexp) ("_position" e\<^sub>1)))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subexp)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("\<^const>Set.union"
###         ("_Finset"
###           ("_args" ("_position" e\<^sub>1) ("_position" e\<^sub>2)))
###         ("_applC" ("_position" subexp) ("_position" e\<^sub>1)))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 337 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" subexp)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union" ("_Finset" ("_position" e\<^sub>2))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subexp)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union" ("_Finset" ("_position" e\<^sub>2))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subexp)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union" ("_Finset" ("_position" e\<^sub>2))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  subexp :: "'a exp => 'a exp set"
  subexps :: "'a exp list => 'a exp set"
### theory "Draft.Expr"
### 7.375s elapsed time, 9.875s cpu time, 2.528s GC time
Loading theory "Draft.WWellForm" (required by "Draft.EConformMoreTemplates" via "Draft.EConform" via "Draft.SmallStep")
### theory "Draft.WWellForm"
### 0.156s elapsed time, 0.213s cpu time, 0.000s GC time
Loading theory "Draft.BigStep" (required by "Draft.EConformMoreTemplates" via "Draft.EConform")
Loading theory "Draft.SmallStep" (required by "Draft.EConformMoreTemplates" via "Draft.EConform")
### Ambiguous input (line 16 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" blocks)
###       ("_tuple" ("\<^const>List.list.Cons" ("_position" V) ("_position" Vs))
###         ("_tuple_args"
###           ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts))
###           ("_tuple_args"
###             ("\<^const>List.list.Cons" ("_position" v) ("_position" vs))
###             ("_tuple_arg" ("_position" e))))))
###     ("\<^const>Expr.exp.Block" ("_position" V)
###       ("\<^const>Expr.exp.LAss" ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_applC" ("_position" blocks)
###         ("_tuple" ("_position" Vs)
###           ("_tuple_args" ("_position" Ts)
###             ("_tuple_args" ("_position" vs)
###               ("_tuple_arg" ("_position" e)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" blocks)
###       ("_tuple" ("\<^const>List.list.Cons" ("_position" V) ("_position" Vs))
###         ("_tuple_args"
###           ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts))
###           ("_tuple_args"
###             ("\<^const>List.list.Cons" ("_position" v) ("_position" vs))
###             ("_tuple_arg" ("_position" e))))))
###     ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###       ("_applC" ("_position" Val) ("_position" v))
###       ("_applC" ("_position" blocks)
###         ("_tuple" ("_position" Vs)
###           ("_tuple_args" ("_position" Ts)
###             ("_tuple_args" ("_position" vs)
###               ("_tuple_arg" ("_position" e)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Missing patterns in function definition:
### !!vc vd vb. blocks ([], vc # vd, vb) = undefined
### !!v ve vf vd. blocks ([], v, ve # vf, vd) = undefined
### !!va vb vc. blocks (va # vb, [], vc) = undefined
### (3 more)
### Ambiguous input (line 157 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" b) ("_position" t))
###                 ("\<^const>TypeRel.has_field" ("_position" P)
###                   ("_position" C) ("_position" F) ("_position" b)
###                   ("_position" t) ("_position" D)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" b) ("_position" t))
###                 ("\<^const>TypeRel.has_field" ("_position" P)
###                   ("_position" C) ("_position" F) ("_position" b)
###                   ("_position" t) ("_position" D)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 162 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" Static) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" Static) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 167 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" sfs')
###               ("_MapUpd" ("_position" sfs)
###                 ("_maplet" ("_position" F) ("_position" v)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" sh\<^sub>1')
###                 ("_MapUpd" ("_position" sh\<^sub>1)
###                   ("_maplet" ("_position" D)
###                     ("_tuple" ("_position" sfs')
###                       ("_tuple_arg" ("_position" Done))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" sfs')
###               ("_MapUpd" ("_position" sfs)
###                 ("_maplet" ("_position" F) ("_position" v)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" sh\<^sub>1')
###                 ("_MapUpd" ("_position" sh\<^sub>1)
###                   ("_maplet" ("_position" D)
###                     ("_tuple" ("_position" sfs')
###                       ("_tuple_arg" ("_position" Done))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 139 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" NonStatic) ("_position" t)
###               ("_position" D)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" fs')
###                 ("_MapUpd" ("_position" fs)
###                   ("_maplet"
###                     ("_tuple" ("_position" F)
###                       ("_tuple_arg" ("_position" D)))
###                     ("_position" v)))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                   ("_MapUpd" ("_position" h\<^sub>2)
###                     ("_maplet" ("_position" a)
###                       ("_tuple" ("_position" C)
###                         ("_tuple_arg" ("_position" fs')))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" NonStatic) ("_position" t)
###               ("_position" D)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" fs')
###                 ("_MapUpd" ("_position" fs)
###                   ("_maplet"
###                     ("_tuple" ("_position" F)
###                       ("_tuple_arg" ("_position" D)))
###                     ("_position" v)))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                   ("_MapUpd" ("_position" h\<^sub>2)
###                     ("_maplet" ("_position" a)
###                       ("_tuple" ("_position" C)
###                         ("_tuple_arg" ("_position" fs')))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 145 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_position" null) ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_position" null) ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 149 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 173 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Not_Ex" ("_position" sfs)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" sfs)
###                   ("_tuple_arg" ("_position" Done)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P)
###               ("\<^const>Expr.exp.INIT" ("_position" D)
###                 ("_list" ("_position" D)) ("_position" False)
###                 ("_position" unit))
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args" ("_position" l\<^sub>1)
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_applC" ("_position" Val) ("_position" v'))
###               ("_tuple" ("_position" h')
###                 ("_tuple_args" ("_position" l')
###                   ("_tuple_arg" ("_position" sh'))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" sh') ("_position" D))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" sfs)
###                     ("_tuple_arg" ("_position" i))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" sfs')
###                   ("_MapUpd" ("_position" sfs)
###                     ("_maplet" ("_position" F) ("_position" v)))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" sh'')
###                     ("_MapUpd" ("_position" sh')
###                       ("_maplet" ("_position" D)
###                         ("_tuple" ("_position" sfs')
###                           ("_tuple_arg" ("_position" i))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l')
###           ("_tuple_arg" ("_position" sh'')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Not_Ex" ("_position" sfs)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" sfs)
###                   ("_tuple_arg" ("_position" Done)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P)
###               ("\<^const>Expr.exp.INIT" ("_position" D)
###                 ("_list" ("_position" D)) ("_position" False)
###                 ("_position" unit))
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args" ("_position" l\<^sub>1)
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_applC" ("_position" Val) ("_position" v'))
###               ("_tuple" ("_position" h')
###                 ("_tuple_args" ("_position" l')
###                   ("_tuple_arg" ("_position" sh'))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" sh') ("_position" D))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" sfs)
###                     ("_tuple_arg" ("_position" i))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" sfs')
###                   ("_MapUpd" ("_position" sfs)
###                     ("_maplet" ("_position" F) ("_position" v)))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" sh'')
###                     ("_MapUpd" ("_position" sh')
###                       ("_maplet" ("_position" D)
###                         ("_tuple" ("_position" sfs')
###                           ("_tuple_arg" ("_position" i))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l')
###           ("_tuple_arg" ("_position" sh'')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 153 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 181 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Not_Ex" ("_position" sfs)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" sfs)
###                   ("_tuple_arg" ("_position" Done)))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P)
###               ("\<^const>Expr.exp.INIT" ("_position" D)
###                 ("_list" ("_position" D)) ("_position" False)
###                 ("_position" unit))
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args" ("_position" l\<^sub>1)
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_applC" ("_position" throw) ("_position" a))
###               ("_position" s')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_applC" ("_position" throw) ("_position" a))
###       ("_position" s'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Not_Ex" ("_position" sfs)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" sfs)
###                   ("_tuple_arg" ("_position" Done)))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P)
###               ("\<^const>Expr.exp.INIT" ("_position" D)
###                 ("_list" ("_position" D)) ("_position" False)
###                 ("_position" unit))
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args" ("_position" l\<^sub>1)
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_applC" ("_position" throw) ("_position" a))
###               ("_position" s')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_applC" ("_position" throw) ("_position" a))
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 268 of "$AFP/JinjaDCI/J/BigStep.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args"
###           ("_Update" ("_position" l\<^sub>0)
###             ("_updbind" ("_position" V) ("_position" None)))
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args" ("_position" l\<^sub>0)
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args"
###           ("_applC" ("_position" l\<^sub>1)
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V))))
###           ("_tuple_arg" ("_position" sh\<^sub>1)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args"
###           ("_applC" ("_position" l\<^sub>0)
###             ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args" ("_position" l\<^sub>0)
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args"
###           ("_applC" ("_position" l\<^sub>1)
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V))))
###           ("_tuple_arg" ("_position" sh\<^sub>1)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args"
###           ("_Update" ("_position" l\<^sub>0)
###             ("_updbind" ("_position" V) ("_position" None)))
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args" ("_position" l\<^sub>0)
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args"
###           ("_Update" ("_position" l\<^sub>1)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V))))
###           ("_tuple_arg" ("_position" sh\<^sub>1)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args"
###           ("_applC" ("_position" l\<^sub>0)
###             ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args" ("_position" l\<^sub>0)
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args"
###           ("_Update" ("_position" l\<^sub>1)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V))))
###           ("_tuple_arg" ("_position" sh\<^sub>1)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 187 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 191 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" b) ("_position" t))
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" b) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" b) ("_position" t))
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" b) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 196 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" t)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" t)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 324 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" Throw) ("_position" a))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" h\<^sub>1) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###             ("_position" C)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args"
###                   ("_MapUpd" ("_position" l\<^sub>1)
###                     ("_maplet" ("_position" V)
###                       ("_applC" ("_position" Addr) ("_position" a))))
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_position" e\<^sub>2')
###               ("_tuple" ("_position" h\<^sub>2)
###                 ("_tuple_args" ("_position" l\<^sub>2)
###                   ("_tuple_arg" ("_position" sh\<^sub>2))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" e\<^sub>2')
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args"
###           ("_applC" ("_position" l\<^sub>2)
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l\<^sub>1) ("_position" V))))
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" Throw) ("_position" a))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" h\<^sub>1) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###             ("_position" C)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args"
###                   ("_MapUpd" ("_position" l\<^sub>1)
###                     ("_maplet" ("_position" V)
###                       ("_applC" ("_position" Addr) ("_position" a))))
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_position" e\<^sub>2')
###               ("_tuple" ("_position" h\<^sub>2)
###                 ("_tuple_args" ("_position" l\<^sub>2)
###                   ("_tuple_arg" ("_position" sh\<^sub>2))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" e\<^sub>2')
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args"
###           ("_Update" ("_position" l\<^sub>2)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l\<^sub>1) ("_position" V))))
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order:
  "(%p. size_list size (fst (snd (snd p)))) <*mlex*> {}"
### Ambiguous input (line 47 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" icheck)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" D')
###           ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###             ("_position" D) ("_applC" ("_position" Val) ("_position" v))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" D') ("_position" D))
###       ("\<^const>HOL.Ex_binder" ("_position" T)
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" T)
###           ("_position" D))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" icheck)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" D')
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###               ("_position" D))
###             ("_applC" ("_position" Val) ("_position" v))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" D') ("_position" D))
###       ("\<^const>HOL.Ex_binder" ("_position" T)
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" T)
###           ("_position" D))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "eval", "evals"
  Proving monotonicity ...
Found termination order: "{}"
### Ambiguous input (line 51 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###       ("_position" None)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Not"
###       ("_applC" ("_position" icheck)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C')
###             ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###               ("_position" D)
###               ("_constrain" ("_position" e\<^sub>2)
###                 ("_tapp" ("_position_sort" 'a) ("_type_name" exp))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###       ("_position" None)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Not"
###       ("_applC" ("_position" icheck)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C')
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###                 ("_position" D))
###               ("_constrain" ("_position" e\<^sub>2)
###                 ("_tapp" ("_position_sort" 'a) ("_type_name" exp))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 153 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.SFAcc"
###         ("\<^const>Expr.exp.INIT" ("_position" D) ("_list" ("_position" D))
###           ("_position" False) ("_position" C))
###         ("_position" F) ("_position" D))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.INIT" ("_position" D) ("_list" ("_position" D))
###         ("_position" False)
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 181 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" b) ("_position" t))
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" b) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" addr) ("_position" a)) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" b) ("_position" t))
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" b) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss"
###         ("_applC" ("_position" addr) ("_position" a)) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 166 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e') ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e') ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.FAss" ("_position" e') ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.FAss" ("_position" e') ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s') ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 185 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" addr) ("_position" a)) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss"
###         ("_applC" ("_position" addr) ("_position" a)) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 170 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e'))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e'))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e'))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e'))
###       ("_position" s') ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 189 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e'))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e'))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e'))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e'))
###       ("_position" s') ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 174 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" NonStatic) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" addr) ("_position" a)) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" unit)
###       ("_tuple"
###         ("_MapUpd" ("_position" h)
###           ("_maplet" ("_position" a)
###             ("_tuple" ("_position" C)
###               ("_tuple_arg"
###                 ("_MapUpd" ("_position" fs)
###                   ("_maplet"
###                     ("_tuple" ("_position" F)
###                       ("_tuple_arg" ("_position" D)))
###                     ("_position" v)))))))
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" NonStatic) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss"
###         ("_applC" ("_position" addr) ("_position" a)) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" unit)
###       ("_tuple"
###         ("_MapUpd" ("_position" h)
###           ("_maplet" ("_position" a)
###             ("_tuple" ("_position" C)
###               ("_tuple_arg"
###                 ("_MapUpd" ("_position" fs)
###                   ("_maplet"
###                     ("_tuple" ("_position" F)
###                       ("_tuple_arg" ("_position" D)))
###                     ("_position" v)))))))
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 178 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" null) ("_position" F)
###         ("_position" D))
###       ("_applC" ("_position" Val) ("_position" v)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" THROW) ("_position" NullPointer)) ("_position" s)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_position" null) ("_position" F)
###       ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" THROW) ("_position" NullPointer)) ("_position" s)
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 193 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" sfs) ("_tuple_arg" ("_position" i))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" sfs')
###             ("_MapUpd" ("_position" sfs)
###               ("_maplet" ("_position" F) ("_position" v)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" sh')
###               ("_MapUpd" ("_position" sh)
###                 ("_maplet" ("_position" D)
###                   ("_tuple" ("_position" sfs')
###                     ("_tuple_arg" ("_position" i)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" True) ("_position" unit)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh'))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" sfs) ("_tuple_arg" ("_position" i))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" sfs')
###             ("_MapUpd" ("_position" sfs)
###               ("_maplet" ("_position" F) ("_position" v)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" sh')
###               ("_MapUpd" ("_position" sh)
###                 ("_maplet" ("_position" D)
###                   ("_tuple" ("_position" sfs')
###                     ("_tuple_arg" ("_position" i)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" True) ("_position" unit)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh'))))
###       ("_position" False))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 267 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 319 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" hp)
###           ("_cargs" ("_position" s) ("_position" a)))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###           ("_position" C)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch"
###         ("_applC" ("_position" Throw) ("_position" a)) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss"
###           ("_applC" ("_position" Class) ("_position" C))
###           ("_applC" ("_position" addr) ("_position" a)))
###         ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" hp)
###           ("_cargs" ("_position" s) ("_position" a)))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###           ("_position" C)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch"
###         ("_applC" ("_position" Throw) ("_position" a)) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V)
###         ("_applC" ("_position" Class) ("_position" C))
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 199 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" sfs)
###               ("_tuple_arg" ("_position" Done))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" True))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" sfs)
###               ("_tuple_arg" ("_position" Done))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" True))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" sfs)
###               ("_tuple_arg" ("_position" Done))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" True))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" sfs)
###               ("_tuple_arg" ("_position" Done))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" True))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 271 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 204 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc"
###           ("\<^const>Expr.exp.INIT" ("_position" D)
###             ("_list" ("_position" D)) ("_position" False) ("_position" C))
###           ("_position" F) ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc"
###           ("\<^const>Expr.exp.INIT" ("_position" D)
###             ("_list" ("_position" D)) ("_position" False) ("_position" C))
###           ("_position" F) ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.SFAss"
###         ("\<^const>Expr.exp.INIT" ("_position" D) ("_list" ("_position" D))
###           ("_position" False) ("_position" C))
###         ("_position" F) ("_position" D)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.SFAss"
###         ("\<^const>Expr.exp.INIT" ("_position" D) ("_list" ("_position" D))
###           ("_position" False) ("_position" C))
###         ("_position" F) ("_position" D)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.INIT" ("_position" D) ("_list" ("_position" D))
###         ("_position" False)
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_applC" ("_position" Val) ("_position" v))))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.INIT" ("_position" D) ("_list" ("_position" D))
###         ("_position" False)
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_applC" ("_position" Val) ("_position" v))))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.INIT" ("_position" D) ("_list" ("_position" D))
###         ("_position" False)
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_applC" ("_position" Val) ("_position" v))))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.INIT" ("_position" D) ("_list" ("_position" D))
###         ("_position" False)
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_applC" ("_position" Val) ("_position" v))))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 209 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Not"
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" b) ("_position" t))
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" b) ("_position" t)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_position" s) ("_position" b)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_position" s) ("_position" False))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Not"
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" b) ("_position" t))
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" b) ("_position" t)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_position" s) ("_position" b)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_position" s) ("_position" False))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 213 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###       ("_position" F) ("_position" NonStatic) ("_position" t)
###       ("_position" D)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_position" s) ("_position" b)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_position" s) ("_position" False))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###       ("_position" F) ("_position" NonStatic) ("_position" t)
###       ("_position" D)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_position" s) ("_position" b)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_position" s) ("_position" False))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 388 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc"
###         ("_applC" ("_position" throw) ("_position" e)) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" throw) ("_position" e)) ("_position" s)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_applC" ("_position" throw) ("_position" e))
###       ("_position" F) ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" throw) ("_position" e)) ("_position" s)
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 395 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###       ("_applC" ("_position" Val) ("_position" v))
###       ("_applC" ("_position" Throw) ("_position" a)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" Throw) ("_position" a)) ("_position" s)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.Block" ("_position" V)
###       ("\<^const>Expr.exp.LAss" ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_applC" ("_position" Throw) ("_position" a)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" Throw) ("_position" a)) ("_position" s)
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 389 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D))
###       ("_applC" ("_position" throw) ("_position" e)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" throw) ("_position" e)) ("_position" s)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###       ("_position" F) ("_position" D)
###       ("_applC" ("_position" throw) ("_position" e)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" throw) ("_position" e)) ("_position" s)
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 275 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 390 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_applC" ("_position" throw) ("_position" e)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" throw) ("_position" e)) ("_position" s)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###       ("_position" D) ("_applC" ("_position" throw) ("_position" e)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" throw) ("_position" e)) ("_position" s)
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 282 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###       ("_applC" ("_position" Val) ("_position" v))
###       ("_applC" ("_position" Val) ("_position" u)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" Val) ("_position" u)) ("_position" s)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.Block" ("_position" V)
###       ("\<^const>Expr.exp.LAss" ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_applC" ("_position" Val) ("_position" u)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" Val) ("_position" u)) ("_position" s)
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "redp", "redsp"
  Proving monotonicity ...
### Ambiguous input (line 416 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BigStep.eval" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BigStep.eval" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 417 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BigStep.eval" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BigStep.eval" ("_position" P)
###     ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.BigStep"
### 6.655s elapsed time, 17.180s cpu time, 1.217s GC time
### theory "Draft.SmallStep"
### 10.293s elapsed time, 21.026s cpu time, 1.498s GC time
Loading theory "Draft.EConform" (required by "Draft.EConformMoreTemplates")
### Ambiguous input (line 21 of "$AFP/JinjaDCI/J/EConform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" init_class)
###       ("_cargs" ("_position" P)
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("_applC" ("_position" Some) ("_position" D))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" init_class)
###       ("_cargs" ("_position" P)
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("_applC" ("_position" Some) ("_position" D))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 41 of "$AFP/JinjaDCI/J/EConform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ss_exp)
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D)))
###     ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###       ("_position" D))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Expr.exp.SFAcc"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" ss_exp)
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D)))
###       ("_position" C))
###     ("_position" F) ("_position" D)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 42 of "$AFP/JinjaDCI/J/EConform.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" ss_exp)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("_case_syntax"
###             ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" v))
###                 ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1)
###                   ("_position" F) ("_position" D) ("_position" e\<^sub>2)))
###               ("_case1" ("\<^const>Pure.dummy_pattern")
###                 ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2))))))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>1)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ss_exp)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("_case_syntax"
###             ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" v))
###                 ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1)
###                   ("_position" F) ("_position" D) ("_position" e\<^sub>2)))
###               ("_case1" ("\<^const>Pure.dummy_pattern")
###                 ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2))))))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>1)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ss_exp)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("_case_syntax"
###             ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" v))
###                 ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1)
###                   ("_position" F) ("_position" D) ("_position" e\<^sub>2)))
###               ("_case1" ("\<^const>Pure.dummy_pattern")
###                 ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2))))))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>1)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" ss_exp)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("_case_syntax"
###             ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" v))
###                 ("\<^const>Expr.exp.LAss"
###                   ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1)
###                     ("_position" F) ("_position" D))
###                   ("_position" e\<^sub>2)))
###               ("_case1" ("\<^const>Pure.dummy_pattern")
###                 ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2))))))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>1)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ss_exp)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("_case_syntax"
###             ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" v))
###                 ("\<^const>Expr.exp.LAss"
###                   ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1)
###                     ("_position" F) ("_position" D))
###                   ("_position" e\<^sub>2)))
###               ("_case1" ("\<^const>Pure.dummy_pattern")
###                 ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2))))))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>1)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ss_exp)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("_case_syntax"
###             ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" v))
###                 ("\<^const>Expr.exp.LAss"
###                   ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1)
###                     ("_position" F) ("_position" D))
###                   ("_position" e\<^sub>2)))
###               ("_case1" ("\<^const>Pure.dummy_pattern")
###                 ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2))))))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>1)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 44 of "$AFP/JinjaDCI/J/EConform.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" ss_exp)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###               ("_position" D))
###             ("_position" e\<^sub>2)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ss_exp)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###               ("_position" D))
###             ("_position" e\<^sub>2)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ss_exp)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###               ("_position" D))
###             ("_position" e\<^sub>2)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" ss_exp)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###             ("_position" D) ("_position" e\<^sub>2)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ss_exp)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###             ("_position" D) ("_position" e\<^sub>2)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ss_exp)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###             ("_position" D) ("_position" e\<^sub>2)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "case_sum size (size_list size) <*mlex*> {}"
### Ambiguous input (line 126 of "$AFP/JinjaDCI/J/EConform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" iconf)
###       ("_cargs" ("_position" sh)
###         ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("_applC" ("_position" iconf)
###             ("_cargs" ("_position" sh) ("_position" e\<^sub>2))))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" iconf)
###               ("_cargs" ("_position" sh) ("_position" e\<^sub>1)))
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" iconf)
###       ("_cargs" ("_position" sh)
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("_applC" ("_position" iconf)
###             ("_cargs" ("_position" sh) ("_position" e\<^sub>2))))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" iconf)
###               ("_cargs" ("_position" sh) ("_position" e\<^sub>1)))
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 127 of "$AFP/JinjaDCI/J/EConform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" iconf)
###       ("_cargs" ("_position" sh)
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("_applC" ("_position" iconf)
###       ("_cargs" ("_position" sh) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" iconf)
###       ("_cargs" ("_position" sh)
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("_applC" ("_position" iconf)
###       ("_cargs" ("_position" sh) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order:
  "case_sum (%p. size (snd p)) (%p. size_list size (snd p)) <*mlex*> {}"
### Ambiguous input (line 195 of "$AFP/JinjaDCI/J/EConform.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>bconfs" ("_position" P) ("_position" sh) ("_position" es)
###     ("_position" b))
###   ("\<^const>HOL.implies" ("_position" b)
###     ("\<^const>HOL.Ex_binder" ("_position" C)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" icheck)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C)
###               ("_applC" ("_position" the)
###                 ("_applC" ("_position" ss_exps) ("_position" es))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" curr_inits)
###               ("_cargs" ("_position" P) ("_position" es)))
###             ("_applC" ("_position" Some) ("_position" C)))
###           ("_applC" ("_position" initPD)
###             ("_cargs" ("_position" sh) ("_position" C))))))))
### ("\<^const>Pure.eq"
###   ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###     ("_position" es) ("_position" b))
###   ("\<^const>HOL.implies" ("_position" b)
###     ("\<^const>HOL.Ex_binder" ("_position" C)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" icheck)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C)
###               ("_applC" ("_position" the)
###                 ("_applC" ("_position" ss_exps) ("_position" es))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" curr_inits)
###               ("_cargs" ("_position" P) ("_position" es)))
###             ("_applC" ("_position" Some) ("_position" C)))
###           ("_applC" ("_position" initPD)
###             ("_cargs" ("_position" sh) ("_position" C))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 202 of "$AFP/JinjaDCI/J/EConform.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" True)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" val_of) ("_position" e))
###       ("_position" None))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" True)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" val_of) ("_position" e))
###       ("_position" None))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 206 of "$AFP/JinjaDCI/J/EConform.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" es) ("_position" True)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" map_vals_of) ("_position" es))
###       ("_position" None))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" es) ("_position" True)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" map_vals_of) ("_position" es))
###       ("_position" None))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 210 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" Cast)
###         ("_cargs" ("_position" C) ("_position" e)))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" Cast)
###         ("_cargs" ("_position" C) ("_position" e)))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" Cast)
###         ("_cargs" ("_position" C) ("_position" e)))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" Cast)
###         ("_cargs" ("_position" C) ("_position" e)))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 214 of "$AFP/JinjaDCI/J/EConform.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.BinOp" ("_position" e1) ("_position" bop)
###         ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.BinOp" ("_position" e1) ("_position" bop)
###         ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.BinOp" ("_position" e1) ("_position" bop)
###         ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.BinOp" ("_position" e1) ("_position" bop)
###         ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.BinOp" ("_position" e1) ("_position" bop)
###         ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.BinOp" ("_position" e1) ("_position" bop)
###         ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.BinOp" ("_position" e1) ("_position" bop)
###         ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.BinOp" ("_position" e1) ("_position" bop)
###         ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 219 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" LAss)
###         ("_cargs" ("_position" V) ("_position" e)))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" LAss)
###         ("_cargs" ("_position" V) ("_position" e)))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" LAss)
###         ("_cargs" ("_position" V) ("_position" e)))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" LAss)
###         ("_cargs" ("_position" V) ("_position" e)))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 223 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###         ("_position" D))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###         ("_position" D))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###         ("_position" D))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###         ("_position" D))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 227 of "$AFP/JinjaDCI/J/EConform.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" FAss)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" D) ("_position" e2)))))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" FAss)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" D) ("_position" e2)))))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" FAss)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" D) ("_position" e2)))))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" FAss)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" D) ("_position" e2)))))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" FAss)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" D) ("_position" e2)))))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" FAss)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" D) ("_position" e2)))))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" FAss)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" D) ("_position" e2)))))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" FAss)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" D) ("_position" e2)))))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 232 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" val_of) ("_position" e2))
###       ("_position" None)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.iff"
###       ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###         ("_applC" ("_position" SFAss)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" F)
###               ("_cargs" ("_position" D) ("_position" e2)))))
###         ("_position" b))
###       ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###         ("_position" e2) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" val_of) ("_position" e2))
###       ("_position" None)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.iff"
###       ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###         ("_applC" ("_position" SFAss)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" F)
###               ("_cargs" ("_position" D) ("_position" e2)))))
###         ("_position" b))
###       ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###         ("_position" e2) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" val_of) ("_position" e2))
###       ("_position" None)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.iff"
###       ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###         ("_applC" ("_position" SFAss)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" F)
###               ("_cargs" ("_position" D) ("_position" e2)))))
###         ("_position" b))
###       ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###         ("_position" e2) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" val_of) ("_position" e2))
###       ("_position" None)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.iff"
###       ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###         ("_applC" ("_position" SFAss)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" F)
###               ("_cargs" ("_position" D) ("_position" e2)))))
###         ("_position" b))
###       ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###         ("_position" e2) ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 236 of "$AFP/JinjaDCI/J/EConform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" map)
###         ("_cargs" ("_position" Val) ("_position" vs)))
###       ("_position" b))
###     ("\<^const>HOL.Not" ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" map)
###         ("_cargs" ("_position" Val) ("_position" vs)))
###       ("_position" b))
###     ("\<^const>HOL.Not" ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 240 of "$AFP/JinjaDCI/J/EConform.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Call" ("_position" e) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Call" ("_position" e) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Call" ("_position" e) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Call" ("_position" e) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Call" ("_position" e) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Call" ("_position" e) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Call" ("_position" e) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Call" ("_position" e) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 258 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.SCall" ("_position" C) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" es) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.SCall" ("_position" C) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" es) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.SCall" ("_position" C) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" es) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.SCall" ("_position" C) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" es) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 273 of "$AFP/JinjaDCI/J/EConform.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 289 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss" ("_position" V)
###             ("_applC" ("_position" Val) ("_position" v)))
###           ("_position" e\<^sub>2)))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e\<^sub>2) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss" ("_position" V)
###             ("_applC" ("_position" Val) ("_position" v)))
###           ("_position" e\<^sub>2)))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e\<^sub>2) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss" ("_position" V)
###             ("_applC" ("_position" Val) ("_position" v)))
###           ("_position" e\<^sub>2)))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e\<^sub>2) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss" ("_position" V)
###             ("_applC" ("_position" Val) ("_position" v)))
###           ("_position" e\<^sub>2)))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e\<^sub>2) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 293 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 297 of "$AFP/JinjaDCI/J/EConform.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e1) ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_case_syntax"
###             ("_applC" ("_position" lass_val_of) ("_position" e1))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" p))
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e2) ("_position" b)))
###               ("_case1" ("_position" None)
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e1) ("_position" b))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e1) ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_case_syntax"
###             ("_applC" ("_position" lass_val_of) ("_position" e1))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" p))
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e2) ("_position" b)))
###               ("_case1" ("_position" None)
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e1) ("_position" b))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e1) ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_case_syntax"
###             ("_applC" ("_position" lass_val_of) ("_position" e1))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" p))
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e2) ("_position" b)))
###               ("_case1" ("_position" None)
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e1) ("_position" b))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e1) ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_case_syntax"
###             ("_applC" ("_position" lass_val_of) ("_position" e1))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" p))
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e2) ("_position" b)))
###               ("_case1" ("_position" None)
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e1) ("_position" b))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e1) ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_case_syntax"
###             ("_applC" ("_position" lass_val_of) ("_position" e1))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" p))
###                 ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###                   ("_position" e2) ("_position" b)))
###               ("_case1" ("_position" None)
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e1) ("_position" b))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e1) ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_case_syntax"
###             ("_applC" ("_position" lass_val_of) ("_position" e1))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" p))
###                 ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###                   ("_position" e2) ("_position" b)))
###               ("_case1" ("_position" None)
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e1) ("_position" b))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e1) ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_case_syntax"
###             ("_applC" ("_position" lass_val_of) ("_position" e1))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" p))
###                 ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###                   ("_position" e2) ("_position" b)))
###               ("_case1" ("_position" None)
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e1) ("_position" b))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e1) ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_case_syntax"
###             ("_applC" ("_position" lass_val_of) ("_position" e1))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" p))
###                 ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###                   ("_position" e2) ("_position" b)))
###               ("_case1" ("_position" None)
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e1) ("_position" b))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e1) ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_case_syntax"
###             ("_applC" ("_position" lass_val_of) ("_position" e1))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" p))
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e2) ("_position" b)))
###               ("_case1" ("_position" None)
###                 ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###                   ("_position" e1) ("_position" b))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e1) ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_case_syntax"
###             ("_applC" ("_position" lass_val_of) ("_position" e1))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" p))
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e2) ("_position" b)))
###               ("_case1" ("_position" None)
###                 ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###                   ("_position" e1) ("_position" b))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 304 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Cond" ("_position" b) ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" b'))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" b) ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Cond" ("_position" b) ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" b'))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" b) ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Cond" ("_position" b) ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" b'))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" b) ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Cond" ("_position" b) ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" b'))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" b) ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 314 of "$AFP/JinjaDCI/J/EConform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.While" ("_position" b) ("_position" e))
###       ("_position" b'))
###     ("\<^const>HOL.Not" ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.While" ("_position" b) ("_position" e))
###       ("_position" b'))
###     ("\<^const>HOL.Not" ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 318 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" throw) ("_position" e)) ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" throw) ("_position" e)) ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" throw) ("_position" e)) ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" throw) ("_position" e)) ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 322 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e\<^sub>1) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e\<^sub>1) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e\<^sub>1) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e\<^sub>1) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 326 of "$AFP/JinjaDCI/J/EConform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.INIT" ("_position" C) ("_position" Cs)
###         ("_position" b') ("_position" e))
###       ("_position" b))
###     ("\<^const>HOL.Not" ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.INIT" ("_position" C) ("_position" Cs)
###         ("_position" b') ("_position" e))
###       ("_position" b))
###     ("\<^const>HOL.Not" ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 330 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.RI" ("_position" C) ("_position" e)
###         ("_position" Cs) ("_position" e'))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.RI" ("_position" C) ("_position" e)
###         ("_position" Cs) ("_position" e'))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.RI" ("_position" C) ("_position" e)
###         ("_position" Cs) ("_position" e'))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.RI" ("_position" C) ("_position" e)
###         ("_position" Cs) ("_position" e'))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 334 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>List.append"
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" Val) ("_position" vs)))
###         ("\<^const>List.list.Cons"
###           ("_applC" ("_position" throw) ("_position" e)) ("_position" es')))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>List.append"
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" Val) ("_position" vs)))
###         ("\<^const>List.list.Cons"
###           ("_applC" ("_position" throw) ("_position" e)) ("_position" es')))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>List.append"
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" Val) ("_position" vs)))
###         ("\<^const>List.list.Cons"
###           ("_applC" ("_position" throw) ("_position" e)) ("_position" es')))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>List.append"
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" Val) ("_position" vs)))
###         ("\<^const>List.list.Cons"
###           ("_applC" ("_position" throw) ("_position" e)) ("_position" es')))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.EConform"
### 3.202s elapsed time, 5.287s cpu time, 0.403s GC time
Loading theory "Draft.EConformMoreTemplates"
val templateLemmas =
   [("EConform.ss_exps_Vals_None", "ss_exps (map Val ?vs) = None",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_hole 0)),
    ("EConform.nsub_RI_iconf", "~ sub_RI ?e ==> iconf ?sh ?e",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("EConform.nsub_RIs_iconfs", "~ sub_RIs ?es ==> iconfs ?sh ?es",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("EConform.icheck_iconf", "icheck ?P ?C ?e ==> iconf ?sh ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("EConform.bconf_While",
     "(?P,?sh \<turnstile>\<^sub>b (while (?b) ?e,?b') \<surd>) = (~ ?b')",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("EConform.bconfs_Vals",
     "(?P,?sh \<turnstile>\<^sub>b (map Val ?vs,?b) \<surd>) = (~ ?b)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1)),
         template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("EConform.icheck_ss_exp", "icheck ?P ?C ?e ==> ss_exp ?e = ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 0))),
    ("EConform.lass_val_of_iconf",
     "lass_val_of ?e = \<lfloor>?a\<rfloor> ==> iconf ?sh ?e",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 2),
          template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 2)
           ))),
    ("EConform.bconf_nonVal",
     "?P,?sh \<turnstile>\<^sub>b (?e,True) \<surd> ==> val_of ?e = None",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1),
                template_var 0),
              template_hole 3)
            )],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("EConform.bconfs_nonVals",
     "?P,?sh \<turnstile>\<^sub>b (?es,True) \<surd> ==>
      map_vals_of ?es = None",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1),
                template_var 0),
              template_hole 3)
            )],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("EConform.bconf_Throw",
     "(?P,?sh \<turnstile>\<^sub>b (throw ?e,?b) \<surd>) =
      (?P,?sh \<turnstile>\<^sub>b (?e,?b) \<surd>)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("EConform.bconf_INIT",
     "(?P,?sh \<turnstile>\<^sub>b (INIT ?C (?Cs,?b') \<leftarrow> ?e,?b) \<surd>) =
      (~ ?b)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 6),
             template_var 5),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("EConform.icheck_init_class",
     "icheck ?P ?C ?e ==> init_class ?P ?e = \<lfloor>?C\<rfloor>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("EConform.bconf_Cast",
     "(?P,?sh \<turnstile>\<^sub>b (Cast ?C ?e,?b) \<surd>) =
      (?P,?sh \<turnstile>\<^sub>b (?e,?b) \<surd>)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 3),
           template_var 1),
         template_var 0))),
    ("EConform.bconf_LAss",
     "(?P,?sh \<turnstile>\<^sub>b (?V:=?e,?b) \<surd>) =
      (?P,?sh \<turnstile>\<^sub>b (?e,?b) \<surd>)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 3),
           template_var 1),
         template_var 0))),
    ("EConform.ss_exps_Vals_NoneI",
     "ss_exps ?es = None ==> EX vs. ?es = map Val vs",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 0), template_hole 4)],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("EConform.bconf_Block",
     "(?P,?sh \<turnstile>\<^sub>b ({?V:?T; ?e},?b) \<surd>) =
      (?P,?sh \<turnstile>\<^sub>b (?e,?b) \<surd>)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 5),
             template_var 4),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 5),
             template_var 4),
           template_var 1),
         template_var 0))),
    ("EConform.bconf_Cond",
     "(?P,?sh \<turnstile>\<^sub>b (if (?b) ?e\<^sub>1
       else ?e\<^sub>2,?b') \<surd>) =
      (?P,?sh \<turnstile>\<^sub>b (?b,?b') \<surd>)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 5),
             template_var 4),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 5),
             template_var 4),
           template_var 3),
         template_var 0))),
    ("EConform.bconf_FAcc",
     "(?P,?sh \<turnstile>\<^sub>b (?e\<bullet>?F{?D},?b) \<surd>) =
      (?P,?sh \<turnstile>\<^sub>b (?e,?b) \<surd>)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 5),
             template_var 4),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 5),
             template_var 4),
           template_var 3),
         template_var 0))),
    ("EConform.bconf_RI",
     "(?P,?sh \<turnstile>\<^sub>b (RI (?C,?e) ; ?Cs \<leftarrow> ?e',?b) \<surd>) =
      (?P,?sh \<turnstile>\<^sub>b (?e,?b) \<surd>)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 6),
             template_var 5),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 6),
             template_var 5),
           template_var 3),
         template_var 0))),
    ("EConform.bconf_Try",
     "(?P,?sh \<turnstile>\<^sub>b (try ?e\<^sub>1
       catch(?C ?V) ?e\<^sub>2,?b) \<surd>) =
      (?P,?sh \<turnstile>\<^sub>b (?e\<^sub>1,?b) \<surd>)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 6),
             template_var 5),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 6),
             template_var 5),
           template_var 4),
         template_var 0))),
    ("EConform.iconfs_map_throw",
     "iconfs ?sh (map Val ?vs @ throw ?e # ?es') ==> iconf ?sh ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_hole 3),
                    template_var 2)),
                template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 1)),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 3), template_var 1)
           ))),
    ("EConform.cons_to_append",
     "?list ~= [] --> (EX ls. ?a # ?list = ls @ [last ?list])",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_hole 4))),
           template_app (template_hole 3, t_empty))
         )),
    ("EConform.bconfs_map_throw",
     "(?P,?sh \<turnstile>\<^sub>b (map Val ?vs @
                                    throw ?e # ?es',?b) \<surd>) =
      (?P,?sh \<turnstile>\<^sub>b (?e,?b) \<surd>)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 6, template_var 5),
             template_var 4),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 2)),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 5),
             template_var 4),
           template_var 2),
         template_var 0))),
    ("EConform.bconf_InitBlock",
     "(?P,?sh \<turnstile>\<^sub>b ({?V:?T; ?V:=Val ?v;;
       ?e\<^sub>2},?b) \<surd>) =
      (?P,?sh \<turnstile>\<^sub>b (?e\<^sub>2,?b) \<surd>)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 6),
             template_var 5),
           template_app
            (template_app
              (template_app (template_hole 3, template_var 4),
               template_var 3),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_app (template_hole 0, template_var 2))),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 6),
             template_var 5),
           template_var 1),
         template_var 0))),
    ("EConform.icheck_curr_init'",
     "[| ss_exp ?e = ?e'; icheck ?P ?C ?e' |]
      ==> curr_init ?P ?e = \<lfloor>?C\<rfloor>",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 3), template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 4, template_var 3)),
         template_app (template_hole 0, template_var 0)))),
    ("EConform.icheck_curr_init",
     "[| icheck ?P ?C ?e'; ss_exp ?e = ?e' |]
      ==> curr_init ?P ?e = \<lfloor>?C\<rfloor>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 3, template_var 0), template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app (template_hole 3, template_var 0)),
         template_app (template_hole 0, template_var 2)))),
    ("EConform.bconf_SCall",
     "map_vals_of ?es = None ==>
      (?P,?sh \<turnstile>\<^sub>b (?C\<bullet>\<^sub>s?M(?es),?b) \<surd>) =
      (?P,?sh \<turnstile>\<^sub>b (?es,?b) \<surd>)",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 5), template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 3),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 5)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3),
             template_var 5),
           template_var 0)))),
    ("EConform.bconf_SFAss",
     "val_of ?e2.0 = None ==>
      (?P,?sh \<turnstile>\<^sub>b (?C\<bullet>\<^sub>s?F{?D} := ?e2.0,?b) \<surd>) =
      (?P,?sh \<turnstile>\<^sub>b (?e2.0,?b) \<surd>)",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 6), template_hole 3)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 5),
               template_var 4),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 6)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 5),
               template_var 4),
             template_var 6),
           template_var 0)))),
    ("EConform.bconf_Cons",
     "(?P,?sh \<turnstile>\<^sub>b (?e # ?es,?b) \<surd>) =
      (case val_of ?e of None => ?P,?sh \<turnstile>\<^sub>b (?e,?b) \<surd>
       | \<lfloor>v\<rfloor> =>
           ?P,?sh \<turnstile>\<^sub>b (?es,?b) \<surd>)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 0)),
           t_empty),
         template_app (template_hole 0, template_var 2)))),
    ("EConform.bconf_BinOp",
     "(?P,?sh \<turnstile>\<^sub>b (?e1.0 \<guillemotleft>?bop\<guillemotright> ?e2.0,?b) \<surd>) =
      (case val_of ?e1.0 of
       None => ?P,?sh \<turnstile>\<^sub>b (?e1.0,?b) \<surd>
       | \<lfloor>v\<rfloor> =>
           ?P,?sh \<turnstile>\<^sub>b (?e2.0,?b) \<surd>)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_var 4),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 0)),
           t_empty),
         template_app (template_hole 0, template_var 3)))),
    ("EConform.bconf_Call",
     "(?P,?sh \<turnstile>\<^sub>b (?e\<bullet>?M(?es),?b) \<surd>) =
      (case val_of ?e of None => ?P,?sh \<turnstile>\<^sub>b (?e,?b) \<surd>
       | \<lfloor>v\<rfloor> =>
           ?P,?sh \<turnstile>\<^sub>b (?es,?b) \<surd>)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 5),
             template_var 4),
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 0)),
           t_empty),
         template_app (template_hole 0, template_var 3)))),
    ("EConform.bconf_FAss",
     "(?P,?sh \<turnstile>\<^sub>b (?e1.0\<bullet>?F{?D} := ?e2.0,?b) \<surd>) =
      (case val_of ?e1.0 of
       None => ?P,?sh \<turnstile>\<^sub>b (?e1.0,?b) \<surd>
       | \<lfloor>v\<rfloor> =>
           ?P,?sh \<turnstile>\<^sub>b (?e2.0,?b) \<surd>)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 6),
             template_var 5),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 6),
                   template_var 5),
                 template_var 4),
               template_var 0)),
           t_empty),
         template_app (template_hole 0, template_var 4)))),
    ("EConform.ss_exps_throw_nVal",
     "[| val_of ?e = None;
         ss_exps (map Val ?vs @ throw ?e # ?es') = \<lfloor>?e'\<rfloor> |]
      ==> ?e' = ss_exp ?e",
     template_implication
      ([template_equation
         (template_app (template_hole 11, template_var 3),
          template_hole 10),
        template_equation
         (template_app
           (template_hole 8,
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 2)),
              template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 3)),
                template_var 1))),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_var 0, template_app (template_hole 0, template_var 3)))),
    ("EConform.icheck_curr_inits",
     "[| icheck ?P ?C ?e; ss_exps ?es = \<lfloor>?e\<rfloor> |]
      ==> curr_inits ?P ?es = \<lfloor>?C\<rfloor>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 6, template_var 0),
          template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_hole 2), t_empty),
           template_app (template_hole 6, template_var 0)),
         template_app (template_hole 0, template_var 2)))),
    ("EConform.icheck_curr_inits'",
     "[| ss_exps ?es = \<lfloor>?e\<rfloor>; icheck ?P ?C ?e |]
      ==> curr_inits ?P ?es = \<lfloor>?C\<rfloor>",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 3),
          template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_hole 2), t_empty),
           template_app (template_hole 7, template_var 3)),
         template_app (template_hole 0, template_var 0)))),
    ("EConform.ss_exps_throw_Val",
     "[| val_of ?e = \<lfloor>?a\<rfloor>;
         ss_exps (map Val ?vs @ throw ?e # ?es') = \<lfloor>?e'\<rfloor> |]
      ==> ?e' = throw ?e",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 4),
          template_app (template_hole 9, template_var 3)),
        template_equation
         (template_app
           (template_hole 7,
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_var 2)),
              template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 4)),
                template_var 1))),
          template_app (template_hole 1, template_var 0))],
       template_equation
        (template_var 0, template_app (template_hole 2, template_var 4)))),
    ("EConform.nsub_RI_iconf_aux'",
     "[| !!e'. subexp_of e' ?e ==> ~ sub_RI e' --> iconf ?sh e';
         ~ sub_RI ?e |]
      ==> iconf ?sh ?e",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("EConform.bconf_Seq",
     "(?P,?sh \<turnstile>\<^sub>b (?e1.0;; ?e2.0,?b) \<surd>) =
      (case val_of ?e1.0 of
       None =>
         case lass_val_of ?e1.0 of
         None => ?P,?sh \<turnstile>\<^sub>b (?e1.0,?b) \<surd>
         | \<lfloor>p\<rfloor> =>
             ?P,?sh \<turnstile>\<^sub>b (?e2.0,?b) \<surd>
       | \<lfloor>v\<rfloor> =>
           ?P,?sh \<turnstile>\<^sub>b (?e2.0,?b) \<surd>)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 5, template_var 4),
                         template_var 3),
                       template_var 2),
                     template_var 0)),
                 t_empty),
               template_app (template_hole 1, template_var 2))),
           t_empty),
         template_app (template_hole 0, template_var 2)))),
    ("EConform.nsub_RI_iconf_aux",
     "(~ sub_RI ?e -->
       (ALL e'. subexp_of e' ?e --> ~ sub_RI e' --> iconf ?sh e') -->
       iconf ?sh ?e) &
      (~ sub_RIs ?es -->
       (ALL e'. e' : subexps ?es --> ~ sub_RI e' --> iconf ?sh e') -->
       iconfs ?sh ?es)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_var 2))),
               template_app
                (template_app
                  (template_hole 9,
                   template_app (template_hole 6, t_empty)),
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 2)))),
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_hole 8,
                 template_app (template_hole 2, template_var 0))),
             template_app
              (template_app
                (template_hole 9, template_app (template_hole 6, t_empty)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))))
         )),
    ("EConform.ss_exp_ss_exps_induct",
     "[| !!C. ?P (new C);
         !!C e. (val_of e = None ==> ?P e) ==> ?P (Cast C e);
         !!v. ?P (Val v);
         !!e\<^sub>1 bop e\<^sub>2.
            [| val_of e\<^sub>1 = None ==> ?P e\<^sub>1;
               !!x2. [| val_of e\<^sub>1 = \<lfloor>x2\<rfloor>;
                        val_of e\<^sub>2 = None |]
                     ==> ?P e\<^sub>2 |]
            ==> ?P (e\<^sub>1 \<guillemotleft>bop\<guillemotright> e\<^sub>2);
         !!V. ?P (Var V); !!V e. (val_of e = None ==> ?P e) ==> ?P (V:=e);
         !!e F D. (val_of e = None ==> ?P e) ==> ?P (e\<bullet>F{D});
         !!C F D. ?P (C\<bullet>\<^sub>sF{D});
         !!e\<^sub>1 F D e\<^sub>2.
            [| val_of e\<^sub>1 = None ==> ?P e\<^sub>1;
               !!x2. [| val_of e\<^sub>1 = \<lfloor>x2\<rfloor>;
                        val_of e\<^sub>2 = None |]
                     ==> ?P e\<^sub>2 |]
            ==> ?P (e\<^sub>1\<bullet>F{D} := e\<^sub>2);
         !!C F D e\<^sub>2.
            (val_of e\<^sub>2 = None ==> ?P e\<^sub>2) ==>
            ?P (C\<bullet>\<^sub>sF{D} := e\<^sub>2);
         !!e M es.
            [| val_of e = None ==> ?P e;
               !!x2. [| val_of e = \<lfloor>x2\<rfloor>;
                        map_vals_of es = None |]
                     ==> ?Q es |]
            ==> ?P (e\<bullet>M(es));
         !!C M es.
            (map_vals_of es = None ==> ?Q es) ==>
            ?P (C\<bullet>\<^sub>sM(es));
         !!V T e. ?P e ==> ?P {V:T; e};
         !!e\<^sub>1 e\<^sub>2.
            [| [| val_of e\<^sub>1 = None; lass_val_of e\<^sub>1 = None |]
               ==> ?P e\<^sub>1;
               !!x2. [| val_of e\<^sub>1 = None;
                        lass_val_of e\<^sub>1 = \<lfloor>x2\<rfloor> |]
                     ==> ?P e\<^sub>2;
               !!x2. val_of e\<^sub>1 = \<lfloor>x2\<rfloor> ==>
                     ?P e\<^sub>2 |]
            ==> ?P (e\<^sub>1;; e\<^sub>2);
         !!b e\<^sub>1 e\<^sub>2.
            (bool_of b = None ==> ?P b) ==>
            ?P (if (b) e\<^sub>1 else e\<^sub>2);
         !!b e. ?P (while (b) e);
         !!e. (val_of e = None ==> ?P e) ==> ?P (throw e);
         !!e\<^sub>1 C V e\<^sub>2.
            (val_of e\<^sub>1 = None ==> ?P e\<^sub>1) ==>
            ?P (try e\<^sub>1 catch(C V) e\<^sub>2);
         !!C Cs b e. ?P (INIT C (Cs,b) \<leftarrow> e);
         !!C e Cs e'.
            (val_of e = None ==> ?P e) ==>
            ?P (RI (C,e) ; Cs \<leftarrow> e');
         ?Q [];
         !!e es.
            [| val_of e = None ==> ?P e;
               !!x2. val_of e = \<lfloor>x2\<rfloor> ==> ?Q es |]
            ==> ?Q (e # es) |]
      ==> ?P ?a0.0",
     template_implication
      ([template_predicate (template_app (template_hole 46, t_empty)),
        template_predicate (template_app (template_hole 46, t_empty)),
        template_predicate (template_app (template_hole 38, t_empty)),
        template_predicate (template_app (template_hole 43, t_empty)),
        template_predicate (template_app (template_hole 33, t_empty)),
        template_predicate (template_app (template_hole 33, t_empty)),
        template_predicate (template_app (template_hole 43, t_empty)),
        template_predicate (template_app (template_hole 46, t_empty)),
        template_predicate (template_app (template_hole 43, t_empty)),
        template_predicate (template_app (template_hole 46, t_empty)),
        template_predicate (template_app (template_hole 43, t_empty)),
        template_predicate (template_app (template_hole 46, t_empty)),
        template_predicate (template_app (template_hole 33, t_empty)),
        template_predicate (template_app (template_hole 43, t_empty)),
        template_predicate (template_app (template_hole 43, t_empty)),
        template_predicate (template_app (template_hole 43, t_empty)),
        template_predicate (template_app (template_hole 43, t_empty)),
        template_predicate (template_app (template_hole 43, t_empty)),
        template_predicate (template_app (template_hole 46, t_empty)),
        template_predicate (template_app (template_hole 46, t_empty)),
        template_predicate (template_app (template_var 1, template_hole 1)),
        template_predicate (template_app (template_hole 43, t_empty))],
       template_predicate (template_app (template_var 2, template_var 0)))),
    ("EConform.ss_exp_ss_exps_induct",
     "[| !!C. ?P (new C);
         !!C e. (val_of e = None ==> ?P e) ==> ?P (Cast C e);
         !!v. ?P (Val v);
         !!e\<^sub>1 bop e\<^sub>2.
            [| val_of e\<^sub>1 = None ==> ?P e\<^sub>1;
               !!x2. [| val_of e\<^sub>1 = \<lfloor>x2\<rfloor>;
                        val_of e\<^sub>2 = None |]
                     ==> ?P e\<^sub>2 |]
            ==> ?P (e\<^sub>1 \<guillemotleft>bop\<guillemotright> e\<^sub>2);
         !!V. ?P (Var V); !!V e. (val_of e = None ==> ?P e) ==> ?P (V:=e);
         !!e F D. (val_of e = None ==> ?P e) ==> ?P (e\<bullet>F{D});
         !!C F D. ?P (C\<bullet>\<^sub>sF{D});
         !!e\<^sub>1 F D e\<^sub>2.
            [| val_of e\<^sub>1 = None ==> ?P e\<^sub>1;
               !!x2. [| val_of e\<^sub>1 = \<lfloor>x2\<rfloor>;
                        val_of e\<^sub>2 = None |]
                     ==> ?P e\<^sub>2 |]
            ==> ?P (e\<^sub>1\<bullet>F{D} := e\<^sub>2);
         !!C F D e\<^sub>2.
            (val_of e\<^sub>2 = None ==> ?P e\<^sub>2) ==>
            ?P (C\<bullet>\<^sub>sF{D} := e\<^sub>2);
         !!e M es.
            [| val_of e = None ==> ?P e;
               !!x2. [| val_of e = \<lfloor>x2\<rfloor>;
                        map_vals_of es = None |]
                     ==> ?Q es |]
            ==> ?P (e\<bullet>M(es));
         !!C M es.
            (map_vals_of es = None ==> ?Q es) ==>
            ?P (C\<bullet>\<^sub>sM(es));
         !!V T e. ?P e ==> ?P {V:T; e};
         !!e\<^sub>1 e\<^sub>2.
            [| [| val_of e\<^sub>1 = None; lass_val_of e\<^sub>1 = None |]
               ==> ?P e\<^sub>1;
               !!x2. [| val_of e\<^sub>1 = None;
                        lass_val_of e\<^sub>1 = \<lfloor>x2\<rfloor> |]
                     ==> ?P e\<^sub>2;
               !!x2. val_of e\<^sub>1 = \<lfloor>x2\<rfloor> ==>
                     ?P e\<^sub>2 |]
            ==> ?P (e\<^sub>1;; e\<^sub>2);
         !!b e\<^sub>1 e\<^sub>2.
            (bool_of b = None ==> ?P b) ==>
            ?P (if (b) e\<^sub>1 else e\<^sub>2);
         !!b e. ?P (while (b) e);
         !!e. (val_of e = None ==> ?P e) ==> ?P (throw e);
         !!e\<^sub>1 C V e\<^sub>2.
            (val_of e\<^sub>1 = None ==> ?P e\<^sub>1) ==>
            ?P (try e\<^sub>1 catch(C V) e\<^sub>2);
         !!C Cs b e. ?P (INIT C (Cs,b) \<leftarrow> e);
         !!C e Cs e'.
            (val_of e = None ==> ?P e) ==>
            ?P (RI (C,e) ; Cs \<leftarrow> e');
         ?Q [];
         !!e es.
            [| val_of e = None ==> ?P e;
               !!x2. val_of e = \<lfloor>x2\<rfloor> ==> ?Q es |]
            ==> ?Q (e # es) |]
      ==> ?Q ?a1.0",
     template_implication
      ([template_predicate (template_app (template_hole 46, t_empty)),
        template_predicate (template_app (template_hole 46, t_empty)),
        template_predicate (template_app (template_hole 38, t_empty)),
        template_predicate (template_app (template_hole 43, t_empty)),
        template_predicate (template_app (template_hole 33, t_empty)),
        template_predicate (template_app (template_hole 33, t_empty)),
        template_predicate (template_app (template_hole 43, t_empty)),
        template_predicate (template_app (template_hole 46, t_empty)),
        template_predicate (template_app (template_hole 43, t_empty)),
        template_predicate (template_app (template_hole 46, t_empty)),
        template_predicate (template_app (template_hole 43, t_empty)),
        template_predicate (template_app (template_hole 46, t_empty)),
        template_predicate (template_app (template_hole 33, t_empty)),
        template_predicate (template_app (template_hole 43, t_empty)),
        template_predicate (template_app (template_hole 43, t_empty)),
        template_predicate (template_app (template_hole 43, t_empty)),
        template_predicate (template_app (template_hole 43, t_empty)),
        template_predicate (template_app (template_hole 43, t_empty)),
        template_predicate (template_app (template_hole 46, t_empty)),
        template_predicate (template_app (template_hole 46, t_empty)),
        template_predicate (template_app (template_var 1, template_hole 1)),
        template_predicate (template_app (template_hole 43, t_empty))],
       template_predicate
        (template_app (template_var 1, template_var 0))))]:
   (string * thm * template) list
### theory "Draft.EConformMoreTemplates"
### 0.462s elapsed time, 0.670s cpu time, 0.081s GC time
val it = (): unit
