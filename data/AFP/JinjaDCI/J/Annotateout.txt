Loading theory "Draft.Auxiliary" (required by "Draft.AnnotateMoreTemplates" via "Draft.Annotate" via "Draft.WellType" via "Draft.Objects" via "Draft.TypeRel" via "Draft.Decl" via "Draft.Type")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.AnnotateMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.AnnotateMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.AnnotateMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.138s elapsed time, 0.568s cpu time, 0.037s GC time
Loading theory "HOL-Library.Transitive_Closure_Table" (required by "Draft.AnnotateMoreTemplates" via "Draft.Annotate" via "Draft.WellType" via "Draft.Objects" via "Draft.TypeRel")
Proofs for inductive predicate(s) "rtrancl_path"
### theory "Draft.Auxiliary"
### 0.178s elapsed time, 0.729s cpu time, 0.037s GC time
Loading theory "Draft.Type" (required by "Draft.AnnotateMoreTemplates" via "Draft.Annotate" via "Draft.WellType" via "Draft.Objects" via "Draft.TypeRel" via "Draft.Decl")
  Proving monotonicity ...
### theory "HOL-Library.Set_Algebras"
### 0.196s elapsed time, 0.798s cpu time, 0.037s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.AnnotateMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
Proofs for inductive predicate(s) "rtrancl_tab"
  Proving monotonicity ...
### theory "HOL-Library.Nat_Bijection"
### 0.335s elapsed time, 1.330s cpu time, 0.122s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.AnnotateMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Transitive_Closure_Table"
### 0.334s elapsed time, 1.313s cpu time, 0.157s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.AnnotateMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
Proofs for coinductive predicate(s) "streamsp"
consts
  right :: "'a tree => 'a tree"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### theory "Draft.Type"
### 0.717s elapsed time, 2.824s cpu time, 0.285s GC time
Loading theory "Draft.Decl" (required by "Draft.AnnotateMoreTemplates" via "Draft.Annotate" via "Draft.WellType" via "Draft.Objects" via "Draft.TypeRel")
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Decl"
### 0.067s elapsed time, 0.271s cpu time, 0.000s GC time
Loading theory "Draft.TypeRel" (required by "Draft.AnnotateMoreTemplates" via "Draft.Annotate" via "Draft.WellType" via "Draft.Objects")
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "subcls1p"
  Proving monotonicity ...
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.063s elapsed time, 4.048s cpu time, 0.813s GC time
Found termination order: "size <*mlex*> {}"
consts
  supercls_lst :: "'m prog => char list list => bool"
Proofs for inductive predicate(s) "widen"
  Proving monotonicity ...
### theory "HOL-Library.BigO"
### 1.007s elapsed time, 3.762s cpu time, 0.773s GC time
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Methods"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Fields"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.TypeRel"
### 0.929s elapsed time, 2.683s cpu time, 0.710s GC time
Loading theory "Draft.Value" (required by "Draft.AnnotateMoreTemplates" via "Draft.Annotate" via "Draft.WellType" via "Draft.Objects")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.051s elapsed time, 6.473s cpu time, 1.103s GC time
Loading theory "Draft.Templates" (required by "Draft.AnnotateMoreTemplates" via "Draft.ExtrEqs")
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Addr"
consts
  the_Intg :: "val => int"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_Addr :: "val => nat"
consts
  default_val :: "ty => val"
### theory "Draft.Value"
### 0.379s elapsed time, 0.806s cpu time, 0.108s GC time
Loading theory "Draft.Objects" (required by "Draft.AnnotateMoreTemplates" via "Draft.Annotate" via "Draft.WellType")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.111s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.AnnotateMoreTemplates")
consts
  typeof_h :: "heap => val => ty option"
Proofs for inductive predicate(s) "iprog"
  Proving monotonicity ...
### theory "Draft.Objects"
### 0.471s elapsed time, 0.989s cpu time, 0.107s GC time
Loading theory "Draft.Exceptions" (required by "Draft.AnnotateMoreTemplates" via "Draft.Annotate" via "Draft.WellType" via "Draft.Expr")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.532s elapsed time, 1.112s cpu time, 0.107s GC time
### theory "Draft.Exceptions"
### 0.136s elapsed time, 0.225s cpu time, 0.000s GC time
Loading theory "Draft.Expr" (required by "Draft.AnnotateMoreTemplates" via "Draft.Annotate" via "Draft.WellType")
Found termination order: "{}"
### Ambiguous input (line 129 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 130 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" fv) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("_applC" ("_position" fv) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" fv) ("_position" e\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  fv :: "char list exp => char list set"
  fvs :: "char list exp list => char list set"
Found termination order: "{}"
### Ambiguous input (line 161 of "$AFP/JinjaDCI/J/Expr.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lass_val_of)
###       ("\<^const>Expr.exp.LAss" ("_position" V)
###         ("_applC" ("_position" Val) ("_position" v))))
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" V) ("_tuple_arg" ("_position" v))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" lass_val_of)
###       ("_updbind" ("_position" V)
###         ("_applC" ("_position" Val) ("_position" v))))
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" V) ("_tuple_arg" ("_position" v))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 252 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" sub_RI)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>1))
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub_RI)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>1))
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub_RI)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>1))
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 253 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" sub_RI)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub_RI)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub_RI)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  sub_RI :: "'a exp => bool"
  sub_RIs :: "'a exp list => bool"
### Ambiguous input (line 295 of "$AFP/JinjaDCI/J/Expr.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C')
###         ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" not_init)
###         ("_cargs" ("_position" C') ("_position" e\<^sub>1)))
###       ("_applC" ("_position" not_init)
###         ("_cargs" ("_position" C') ("_position" e\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C')
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" not_init)
###         ("_cargs" ("_position" C') ("_position" e\<^sub>1)))
###       ("_applC" ("_position" not_init)
###         ("_cargs" ("_position" C') ("_position" e\<^sub>2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 296 of "$AFP/JinjaDCI/J/Expr.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C')
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C') ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C')
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C') ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  not_init :: "char list => 'a exp => bool"
  not_inits :: "char list => 'a exp list => bool"
### Ambiguous input (line 336 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" subexp)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("\<^const>Set.union"
###         ("_Finset"
###           ("_args" ("_position" e\<^sub>1) ("_position" e\<^sub>2)))
###         ("_applC" ("_position" subexp) ("_position" e\<^sub>1)))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subexp)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("\<^const>Set.union"
###         ("_Finset"
###           ("_args" ("_position" e\<^sub>1) ("_position" e\<^sub>2)))
###         ("_applC" ("_position" subexp) ("_position" e\<^sub>1)))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subexp)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("\<^const>Set.union"
###         ("_Finset"
###           ("_args" ("_position" e\<^sub>1) ("_position" e\<^sub>2)))
###         ("_applC" ("_position" subexp) ("_position" e\<^sub>1)))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 337 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" subexp)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union" ("_Finset" ("_position" e\<^sub>2))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subexp)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union" ("_Finset" ("_position" e\<^sub>2))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subexp)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union" ("_Finset" ("_position" e\<^sub>2))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  subexp :: "'a exp => 'a exp set"
  subexps :: "'a exp list => 'a exp set"
### theory "Draft.Expr"
### 7.140s elapsed time, 9.380s cpu time, 2.485s GC time
Loading theory "Draft.WellType" (required by "Draft.AnnotateMoreTemplates" via "Draft.Annotate")
### Ambiguous input (line 67 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" T)
###         ("_position" D)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" T')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" T)
###         ("_position" D)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" T')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 63 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WT" ("_position" P) ("_position" E) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" T)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WT" ("_position" P) ("_position" E) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" T)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "WT", "WTs"
  Proving monotonicity ...
### Ambiguous input (line 129 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts)))
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E) ("_position" e)
###       ("\<^const>HOL.conj" ("_position" T)
###         ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###           ("_position" es) ("_position" Ts))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts)))
###     ("\<^const>HOL.conj"
###       ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###         ("_position" e) ("_position" T))
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("_position" es) ("_position" Ts)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 132 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" Ts))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" U) ("_position" Us))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts)
###           ("\<^const>List.list.Cons" ("_position" U) ("_position" Us)))
###         ("\<^const>HOL.conj"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e) ("_position" U))
###           ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###             ("_position" es) ("_position" Us)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" Ts))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" U) ("_position" Us))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts)
###           ("\<^const>List.list.Cons" ("_position" U) ("_position" Us)))
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e)
###           ("\<^const>HOL.conj" ("_position" U)
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es) ("_position" Us))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 136 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" Ts)
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("\<^const>List.append" ("_position" es\<^sub>1)
###           ("_position" es\<^sub>2))
###         ("_position" Ts))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Ts\<^sub>1) ("_position" Ts\<^sub>2))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" Ts)
###             ("\<^const>List.append" ("_position" Ts\<^sub>1)
###               ("_position" Ts\<^sub>2)))
###           ("\<^const>HOL.conj"
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es\<^sub>1) ("_position" Ts\<^sub>1))
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es\<^sub>2) ("_position" Ts\<^sub>2))))))))
### ("\<^const>Pure.all_binder" ("_position" Ts)
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("\<^const>List.append" ("_position" es\<^sub>1)
###           ("_position" es\<^sub>2))
###         ("_position" Ts))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Ts\<^sub>1) ("_position" Ts\<^sub>2))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" Ts)
###             ("\<^const>List.append" ("_position" Ts\<^sub>1)
###               ("_position" Ts\<^sub>2)))
###           ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###             ("_position" es\<^sub>1)
###             ("\<^const>HOL.conj" ("_position" Ts\<^sub>1)
###               ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###                 ("_position" es\<^sub>2) ("_position" Ts\<^sub>2)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 157 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("_applC" ("_position" Val) ("_position" v)) ("_position" T))
###     ("\<^const>HOL.eq" ("_applC" ("_position" typeof) ("_position" v))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("_applC" ("_position" Val) ("_position" v))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq" ("_applC" ("_position" typeof) ("_position" v))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### typeof ?v = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Val ?v :: ?T
### Ignoring duplicate safe introduction (intro!)
### typeof ?v = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Val ?v :: ?T
### Ambiguous input (line 160 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("_applC" ("_position" Var) ("_position" V)) ("_position" T))
###     ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("_applC" ("_position" Var) ("_position" V))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### ?E ?V = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Var ?V :: ?T
### Ignoring duplicate safe introduction (intro!)
### ?E ?V = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Var ?V :: ?T
### Ambiguous input (line 163 of "$AFP/JinjaDCI/J/WellType.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>HOL.conj"
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>1) ("_position" T\<^sub>1))
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" T\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>HOL.conj"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>1) ("_position" T\<^sub>1))
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1)
###         ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>1)
###           ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###             ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###               ("_position" e\<^sub>2) ("_position" T\<^sub>2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 179 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.FAss" ("_position" a) ("_position" F)
###       ("_position" D) ("_position" v))
###     ("_position" T)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" a) ("_position" F)
###         ("_position" D))
###       ("_position" v))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 180 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###       ("_position" D) ("_position" v))
###     ("_position" T)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_position" v))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.WellType"
### 0.583s elapsed time, 0.810s cpu time, 0.069s GC time
Loading theory "Draft.Annotate" (required by "Draft.AnnotateMoreTemplates")
### Ambiguous input (line 35 of "$AFP/JinjaDCI/J/Annotate.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###         ("_position" None)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" this))
###           ("\<^const>Option.option.Some"
###             ("_applC" ("_position" Class) ("_position" C)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###             ("_position" V) ("_position" NonStatic) ("_position" T)
###             ("_position" D))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Anno" ("_position" P) ("_position" E)
###       ("_applC" ("_position" Var) ("_position" V))
###       ("\<^const>Expr.exp.FAcc"
###         ("_applC" ("_position" Var) ("_position" this)) ("_position" V)
###         ("_position" D)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###         ("_position" None)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" this))
###           ("\<^const>Option.option.Some"
###             ("_applC" ("_position" Class) ("_position" C)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###             ("_position" V) ("_position" NonStatic) ("_position" T)
###             ("_position" D))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expr.exp.FAcc"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E)
###         ("_applC" ("_position" Var) ("_position" V))
###         ("_applC" ("_position" Var) ("_position" this)))
###       ("_position" V) ("_position" D))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 43 of "$AFP/JinjaDCI/J/Annotate.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###         ("_position" None)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" this))
###           ("\<^const>Option.option.Some"
###             ("_applC" ("_position" Class) ("_position" C)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###             ("_position" V) ("_position" NonStatic) ("_position" T)
###             ("_position" D)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e)
###               ("_position" e')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Anno" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" e))
###       ("\<^const>Expr.exp.FAss"
###         ("_applC" ("_position" Var) ("_position" this)) ("_position" V)
###         ("_position" D) ("_position" e')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###         ("_position" None)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" this))
###           ("\<^const>Option.option.Some"
###             ("_applC" ("_position" Class) ("_position" C)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###             ("_position" V) ("_position" NonStatic) ("_position" T)
###             ("_position" D)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e)
###               ("_position" e')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Anno" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" e))
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Var) ("_position" this)) ("_position" V)
###           ("_position" D))
###         ("_position" e')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###         ("_position" None)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" this))
###           ("\<^const>Option.option.Some"
###             ("_applC" ("_position" Class) ("_position" C)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###             ("_position" V) ("_position" NonStatic) ("_position" T)
###             ("_position" D)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e)
###               ("_position" e')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc"
###         ("\<^fixed>Anno" ("_position" P) ("_position" E)
###           ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" e))
###           ("_applC" ("_position" Var) ("_position" this)))
###         ("_position" V) ("_position" D))
###       ("_position" e'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###         ("_position" None)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" this))
###           ("\<^const>Option.option.Some"
###             ("_applC" ("_position" Class) ("_position" C)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###             ("_position" V) ("_position" NonStatic) ("_position" T)
###             ("_position" D)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e)
###               ("_position" e')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expr.exp.FAss"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E)
###         ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" e))
###         ("_applC" ("_position" Var) ("_position" this)))
###       ("_position" V) ("_position" D) ("_position" e'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 51 of "$AFP/JinjaDCI/J/Annotate.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e1)
###         ("_position" e1')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e2)
###           ("_position" e2')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e1')
###             ("_applC" ("_position" Class) ("_position" C))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" NonStatic) ("_position" T)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc"
###         ("\<^fixed>Anno" ("_position" P) ("_position" E)
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.FAcc" ("_position" e1) ("_position" F)
###               ("\<^const>List.list.Nil"))
###             ("_position" e2))
###           ("_position" e1'))
###         ("_position" F) ("_position" D))
###       ("_position" e2'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e1)
###         ("_position" e1')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e2)
###           ("_position" e2')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e1')
###             ("_applC" ("_position" Class) ("_position" C))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" NonStatic) ("_position" T)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expr.exp.FAss"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E)
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e1) ("_position" F)
###             ("\<^const>List.list.Nil"))
###           ("_position" e2))
###         ("_position" e1'))
###       ("_position" F) ("_position" D) ("_position" e2'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e1)
###         ("_position" e1')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e2)
###           ("_position" e2')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e1')
###             ("_applC" ("_position" Class) ("_position" C))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" NonStatic) ("_position" T)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Anno" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.FAss" ("_position" e1) ("_position" F)
###         ("\<^const>List.list.Nil") ("_position" e2))
###       ("\<^const>Expr.exp.FAss" ("_position" e1') ("_position" F)
###         ("_position" D) ("_position" e2')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e1)
###         ("_position" e1')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e2)
###           ("_position" e2')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e1')
###             ("_applC" ("_position" Class) ("_position" C))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" NonStatic) ("_position" T)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Anno" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e1) ("_position" F)
###           ("\<^const>List.list.Nil"))
###         ("_position" e2))
###       ("\<^const>Expr.exp.FAss" ("_position" e1') ("_position" F)
###         ("_position" D) ("_position" e2')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e1)
###         ("_position" e1')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e2)
###           ("_position" e2')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e1')
###             ("_applC" ("_position" Class) ("_position" C))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" NonStatic) ("_position" T)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Anno" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.FAss" ("_position" e1) ("_position" F)
###         ("\<^const>List.list.Nil") ("_position" e2))
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e1') ("_position" F)
###           ("_position" D))
###         ("_position" e2')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e1)
###         ("_position" e1')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e2)
###           ("_position" e2')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e1')
###             ("_applC" ("_position" Class) ("_position" C))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" NonStatic) ("_position" T)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Anno" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e1) ("_position" F)
###           ("\<^const>List.list.Nil"))
###         ("_position" e2))
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e1') ("_position" F)
###           ("_position" D))
###         ("_position" e2')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e1)
###         ("_position" e1')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e2)
###           ("_position" e2')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e1')
###             ("_applC" ("_position" Class) ("_position" C))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" NonStatic) ("_position" T)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc"
###         ("\<^fixed>Anno" ("_position" P) ("_position" E)
###           ("\<^const>Expr.exp.FAss" ("_position" e1) ("_position" F)
###             ("\<^const>List.list.Nil") ("_position" e2))
###           ("_position" e1'))
###         ("_position" F) ("_position" D))
###       ("_position" e2'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e1)
###         ("_position" e1')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e2)
###           ("_position" e2')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e1')
###             ("_applC" ("_position" Class) ("_position" C))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" NonStatic) ("_position" T)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expr.exp.FAss"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E)
###         ("\<^const>Expr.exp.FAss" ("_position" e1) ("_position" F)
###           ("\<^const>List.list.Nil") ("_position" e2))
###         ("_position" e1'))
###       ("_position" F) ("_position" D) ("_position" e2'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 46 of "$AFP/JinjaDCI/J/Annotate.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e)
###         ("_position" e')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e') ("_applC" ("_position" Class) ("_position" C))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###             ("_position" F) ("_position" NonStatic) ("_position" T)
###             ("_position" D))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Anno" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###         ("\<^const>List.list.Nil"))
###       ("\<^const>Expr.exp.FAcc" ("_position" e') ("_position" F)
###         ("_position" D)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e)
###         ("_position" e')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e') ("_applC" ("_position" Class) ("_position" C))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###             ("_position" F) ("_position" NonStatic) ("_position" T)
###             ("_position" D))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expr.exp.FAcc"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E)
###         ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###           ("\<^const>List.list.Nil"))
###         ("_position" e'))
###       ("_position" F) ("_position" D))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 49 of "$AFP/JinjaDCI/J/Annotate.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" T)
###         ("_position" D))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Anno" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("\<^const>List.list.Nil"))
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" T)
###         ("_position" D))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expr.exp.SFAcc"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E)
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("\<^const>List.list.Nil"))
###         ("_position" C))
###       ("_position" F) ("_position" D))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 54 of "$AFP/JinjaDCI/J/Annotate.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e2)
###         ("_position" e2')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" T)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.SFAcc"
###         ("\<^fixed>Anno" ("_position" P) ("_position" E)
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###               ("\<^const>List.list.Nil"))
###             ("_position" e2))
###           ("_position" C))
###         ("_position" F) ("_position" D))
###       ("_position" e2'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e2)
###         ("_position" e2')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" T)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expr.exp.SFAss"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E)
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("\<^const>List.list.Nil"))
###           ("_position" e2))
###         ("_position" C))
###       ("_position" F) ("_position" D) ("_position" e2'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e2)
###         ("_position" e2')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" T)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Anno" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("\<^const>List.list.Nil") ("_position" e2))
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e2')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e2)
###         ("_position" e2')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" T)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Anno" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("\<^const>List.list.Nil"))
###         ("_position" e2))
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e2')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e2)
###         ("_position" e2')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" T)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Anno" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("\<^const>List.list.Nil") ("_position" e2))
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e2')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e2)
###         ("_position" e2')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" T)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Anno" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("\<^const>List.list.Nil"))
###         ("_position" e2))
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e2')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e2)
###         ("_position" e2')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" T)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.SFAcc"
###         ("\<^fixed>Anno" ("_position" P) ("_position" E)
###           ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###             ("\<^const>List.list.Nil") ("_position" e2))
###           ("_position" C))
###         ("_position" F) ("_position" D))
###       ("_position" e2'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e2)
###         ("_position" e2')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" T)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expr.exp.SFAss"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E)
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("\<^const>List.list.Nil") ("_position" e2))
###         ("_position" C))
###       ("_position" F) ("_position" D) ("_position" e2'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "Anno", "Annos"
  Proving monotonicity ...
### theory "Draft.Annotate"
### 0.216s elapsed time, 0.250s cpu time, 0.021s GC time
Loading theory "Draft.AnnotateMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.AnnotateMoreTemplates"
### 0.381s elapsed time, 0.511s cpu time, 0.000s GC time
val it = (): unit
