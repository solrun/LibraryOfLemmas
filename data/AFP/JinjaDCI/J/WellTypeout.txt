Loading theory "Draft.Auxiliary" (required by "Draft.WellTypeMoreTemplates" via "Draft.WellType" via "Draft.Objects" via "Draft.TypeRel" via "Draft.Decl" via "Draft.Type")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.WellTypeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.WellTypeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.WellTypeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.124s elapsed time, 0.509s cpu time, 0.044s GC time
Loading theory "HOL-Library.Transitive_Closure_Table" (required by "Draft.WellTypeMoreTemplates" via "Draft.WellType" via "Draft.Objects" via "Draft.TypeRel")
Proofs for inductive predicate(s) "rtrancl_path"
### theory "Draft.Auxiliary"
### 0.152s elapsed time, 0.619s cpu time, 0.044s GC time
Loading theory "Draft.Type" (required by "Draft.WellTypeMoreTemplates" via "Draft.WellType" via "Draft.Objects" via "Draft.TypeRel" via "Draft.Decl")
  Proving monotonicity ...
Proofs for inductive predicate(s) "rtrancl_tab"
  Proving monotonicity ...
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.214s elapsed time, 0.871s cpu time, 0.044s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.WellTypeMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.328s elapsed time, 1.312s cpu time, 0.122s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.WellTypeMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Transitive_Closure_Table"
### 0.279s elapsed time, 1.102s cpu time, 0.078s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.WellTypeMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
consts
  left :: "'a tree => 'a tree"
  Proving monotonicity ...
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
### theory "Draft.Type"
### 0.698s elapsed time, 2.754s cpu time, 0.273s GC time
Loading theory "Draft.Decl" (required by "Draft.WellTypeMoreTemplates" via "Draft.WellType" via "Draft.Objects" via "Draft.TypeRel")
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Decl"
### 0.067s elapsed time, 0.269s cpu time, 0.000s GC time
Loading theory "Draft.TypeRel" (required by "Draft.WellTypeMoreTemplates" via "Draft.WellType" via "Draft.Objects")
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "subcls1p"
  Proving monotonicity ...
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  supercls_lst :: "'m prog => char list list => bool"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Proofs for inductive predicate(s) "widen"
  Proving monotonicity ...
### theory "HOL-Library.Stream"
### 1.082s elapsed time, 4.118s cpu time, 0.855s GC time
### theory "HOL-Library.BigO"
### 1.021s elapsed time, 3.866s cpu time, 0.855s GC time
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Methods"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Fields"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.TypeRel"
### 0.919s elapsed time, 2.701s cpu time, 0.725s GC time
Loading theory "Draft.Value" (required by "Draft.WellTypeMoreTemplates" via "Draft.WellType" via "Draft.Objects")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Addr"
consts
  the_Intg :: "val => int"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_Addr :: "val => nat"
consts
  default_val :: "ty => val"
### theory "Draft.Value"
### 0.371s elapsed time, 0.795s cpu time, 0.111s GC time
Loading theory "Draft.Objects" (required by "Draft.WellTypeMoreTemplates" via "Draft.WellType")
### theory "HOL-Library.Tree"
### 2.047s elapsed time, 6.380s cpu time, 1.109s GC time
Loading theory "Draft.Templates" (required by "Draft.WellTypeMoreTemplates" via "Draft.ExtrEqs")
consts
  typeof_h :: "heap => val => ty option"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.110s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.WellTypeMoreTemplates")
Proofs for inductive predicate(s) "iprog"
  Proving monotonicity ...
### theory "Draft.Objects"
### 0.471s elapsed time, 0.987s cpu time, 0.108s GC time
Loading theory "Draft.Exceptions" (required by "Draft.WellTypeMoreTemplates" via "Draft.WellType" via "Draft.Expr")
### theory "Draft.Exceptions"
### 0.135s elapsed time, 0.271s cpu time, 0.000s GC time
Loading theory "Draft.Expr" (required by "Draft.WellTypeMoreTemplates" via "Draft.WellType")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.538s elapsed time, 1.123s cpu time, 0.108s GC time
Found termination order: "{}"
### Ambiguous input (line 129 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 130 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" fv) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("_applC" ("_position" fv) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" fv) ("_position" e\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  fv :: "char list exp => char list set"
  fvs :: "char list exp list => char list set"
Found termination order: "{}"
### Ambiguous input (line 161 of "$AFP/JinjaDCI/J/Expr.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lass_val_of)
###       ("\<^const>Expr.exp.LAss" ("_position" V)
###         ("_applC" ("_position" Val) ("_position" v))))
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" V) ("_tuple_arg" ("_position" v))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" lass_val_of)
###       ("_updbind" ("_position" V)
###         ("_applC" ("_position" Val) ("_position" v))))
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" V) ("_tuple_arg" ("_position" v))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 252 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" sub_RI)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>1))
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub_RI)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>1))
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub_RI)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>1))
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 253 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" sub_RI)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub_RI)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub_RI)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  sub_RI :: "'a exp => bool"
  sub_RIs :: "'a exp list => bool"
### Ambiguous input (line 295 of "$AFP/JinjaDCI/J/Expr.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C')
###         ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" not_init)
###         ("_cargs" ("_position" C') ("_position" e\<^sub>1)))
###       ("_applC" ("_position" not_init)
###         ("_cargs" ("_position" C') ("_position" e\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C')
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" not_init)
###         ("_cargs" ("_position" C') ("_position" e\<^sub>1)))
###       ("_applC" ("_position" not_init)
###         ("_cargs" ("_position" C') ("_position" e\<^sub>2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 296 of "$AFP/JinjaDCI/J/Expr.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C')
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C') ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C')
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C') ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  not_init :: "char list => 'a exp => bool"
  not_inits :: "char list => 'a exp list => bool"
### Ambiguous input (line 336 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" subexp)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("\<^const>Set.union"
###         ("_Finset"
###           ("_args" ("_position" e\<^sub>1) ("_position" e\<^sub>2)))
###         ("_applC" ("_position" subexp) ("_position" e\<^sub>1)))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subexp)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("\<^const>Set.union"
###         ("_Finset"
###           ("_args" ("_position" e\<^sub>1) ("_position" e\<^sub>2)))
###         ("_applC" ("_position" subexp) ("_position" e\<^sub>1)))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subexp)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("\<^const>Set.union"
###         ("_Finset"
###           ("_args" ("_position" e\<^sub>1) ("_position" e\<^sub>2)))
###         ("_applC" ("_position" subexp) ("_position" e\<^sub>1)))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 337 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" subexp)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union" ("_Finset" ("_position" e\<^sub>2))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subexp)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union" ("_Finset" ("_position" e\<^sub>2))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subexp)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union" ("_Finset" ("_position" e\<^sub>2))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  subexp :: "'a exp => 'a exp set"
  subexps :: "'a exp list => 'a exp set"
### theory "Draft.Expr"
### 7.113s elapsed time, 9.415s cpu time, 2.561s GC time
Loading theory "Draft.WellType" (required by "Draft.WellTypeMoreTemplates")
### Ambiguous input (line 67 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" T)
###         ("_position" D)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" T')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" T)
###         ("_position" D)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" T')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 63 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WT" ("_position" P) ("_position" E) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" T)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WT" ("_position" P) ("_position" E) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" T)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "WT", "WTs"
  Proving monotonicity ...
### Ambiguous input (line 129 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts)))
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E) ("_position" e)
###       ("\<^const>HOL.conj" ("_position" T)
###         ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###           ("_position" es) ("_position" Ts))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts)))
###     ("\<^const>HOL.conj"
###       ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###         ("_position" e) ("_position" T))
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("_position" es) ("_position" Ts)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 132 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" Ts))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" U) ("_position" Us))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts)
###           ("\<^const>List.list.Cons" ("_position" U) ("_position" Us)))
###         ("\<^const>HOL.conj"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e) ("_position" U))
###           ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###             ("_position" es) ("_position" Us)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" Ts))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" U) ("_position" Us))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts)
###           ("\<^const>List.list.Cons" ("_position" U) ("_position" Us)))
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e)
###           ("\<^const>HOL.conj" ("_position" U)
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es) ("_position" Us))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 136 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" Ts)
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("\<^const>List.append" ("_position" es\<^sub>1)
###           ("_position" es\<^sub>2))
###         ("_position" Ts))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Ts\<^sub>1) ("_position" Ts\<^sub>2))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" Ts)
###             ("\<^const>List.append" ("_position" Ts\<^sub>1)
###               ("_position" Ts\<^sub>2)))
###           ("\<^const>HOL.conj"
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es\<^sub>1) ("_position" Ts\<^sub>1))
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es\<^sub>2) ("_position" Ts\<^sub>2))))))))
### ("\<^const>Pure.all_binder" ("_position" Ts)
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("\<^const>List.append" ("_position" es\<^sub>1)
###           ("_position" es\<^sub>2))
###         ("_position" Ts))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Ts\<^sub>1) ("_position" Ts\<^sub>2))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" Ts)
###             ("\<^const>List.append" ("_position" Ts\<^sub>1)
###               ("_position" Ts\<^sub>2)))
###           ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###             ("_position" es\<^sub>1)
###             ("\<^const>HOL.conj" ("_position" Ts\<^sub>1)
###               ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###                 ("_position" es\<^sub>2) ("_position" Ts\<^sub>2)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 157 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("_applC" ("_position" Val) ("_position" v)) ("_position" T))
###     ("\<^const>HOL.eq" ("_applC" ("_position" typeof) ("_position" v))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("_applC" ("_position" Val) ("_position" v))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq" ("_applC" ("_position" typeof) ("_position" v))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### typeof ?v = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Val ?v :: ?T
### Ignoring duplicate safe introduction (intro!)
### typeof ?v = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Val ?v :: ?T
### Ambiguous input (line 160 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("_applC" ("_position" Var) ("_position" V)) ("_position" T))
###     ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("_applC" ("_position" Var) ("_position" V))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### ?E ?V = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Var ?V :: ?T
### Ignoring duplicate safe introduction (intro!)
### ?E ?V = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Var ?V :: ?T
### Ambiguous input (line 163 of "$AFP/JinjaDCI/J/WellType.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>HOL.conj"
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>1) ("_position" T\<^sub>1))
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" T\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>HOL.conj"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>1) ("_position" T\<^sub>1))
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1)
###         ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>1)
###           ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###             ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###               ("_position" e\<^sub>2) ("_position" T\<^sub>2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 179 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.FAss" ("_position" a) ("_position" F)
###       ("_position" D) ("_position" v))
###     ("_position" T)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" a) ("_position" F)
###         ("_position" D))
###       ("_position" v))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 180 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###       ("_position" D) ("_position" v))
###     ("_position" T)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_position" v))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.WellType"
### 0.586s elapsed time, 0.820s cpu time, 0.113s GC time
Loading theory "Draft.WellTypeMoreTemplates"
val templateLemmas =
   [("WellType.init_nwt",
     "~ ?P,?E \<turnstile> INIT ?C (?Cs,?b) \<leftarrow> ?e :: ?T",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 6),
                   template_var 5),
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 4),
                       template_var 3),
                     template_var 2),
                   template_var 1)),
               template_var 0)
             )
         )),
    ("WellType.ri_nwt",
     "~ ?P,?E \<turnstile> RI (?C,?e) ; ?Cs \<leftarrow> ?e' :: ?T",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 6),
                   template_var 5),
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 4),
                       template_var 3),
                     template_var 2),
                   template_var 1)),
               template_var 0)
             )
         )),
    ("WellType.WT_nsub_RI", "?P,?E \<turnstile> ?e :: ?T ==> ~ sub_RI ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 1))
           ))),
    ("WellType.WTs_nsub_RIs",
     "?P,?E \<turnstile> ?es [::] ?Ts ==> ~ sub_RIs ?es",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 1))
           ))),
    ("WellType.WT_fv", "?P,?E \<turnstile> ?e :: ?T ==> fv ?e <= dom ?E",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 2)))),
    ("WellType.wt_env_mono",
     "[| ?P,?E \<turnstile> ?e :: ?T; ?E \<subseteq>\<^sub>m ?E' |]
      ==> ?P,?E' \<turnstile> ?e :: ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("WellType.WT_elim_cases",
     "[| ?P,?E \<turnstile> new ?C :: ?T;
         [| ?T = Class ?C; is_class ?P ?C |] ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 3),
                template_app (template_hole 3, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app (template_hole 1, template_var 2))],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 2)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("WellType.WT_elim_cases",
     "[| ?P,?E \<turnstile> ?C\<bullet>\<^sub>s?F{?D} :: ?T;
         ?P \<turnstile> ?C sees ?F,Static:?T in ?D ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 1, template_var 6),
                         template_var 4),
                       template_var 3),
                     template_hole 0),
                   template_var 1),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("WellType.WT_elim_cases",
     "[| ?P,?E \<turnstile> throw ?e :: ?T;
         !!C. [| ?T = Void; ?P,?E \<turnstile> ?e :: Class C |] ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 4),
                  template_var 3),
                template_app (template_hole 4, template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("WellType.WT_elim_cases",
     "[| ?P,?E \<turnstile> ?a\<bullet>?F{?D} :: ?T;
         !!C. [| ?P,?E \<turnstile> ?a :: Class C;
                 ?P \<turnstile> C sees ?F,NonStatic:?T in ?D |]
              ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("WellType.WT_elim_cases",
     "[| ?P,?E \<turnstile> while (?e) ?c :: ?T;
         !!T. [| ?T = Void; ?P,?E \<turnstile> ?e :: Boolean;
                 ?P,?E \<turnstile> ?c :: T |]
              ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("WellType.WT_elim_cases",
     "[| ?P,?E \<turnstile> try ?e\<^sub>1 catch(?C ?V) ?e\<^sub>2 :: ?T;
         [| ?P,?E \<turnstile> ?e\<^sub>1 :: ?T;
            ?P,?E(?V |-> Class ?C) \<turnstile> ?e\<^sub>2 :: ?T;
            is_class ?P ?C |]
         ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 7),
                  template_var 6),
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 4, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 5, template_var 7),
                     template_var 6),
                   template_var 5),
                 template_var 1)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 5, template_var 7),
                       template_app
                        (template_app
                          (template_app (template_hole 3, template_var 6),
                           template_var 3),
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 1, template_var 4)))),
                     template_var 2),
                   template_var 1)
                 )],
            template_implication
             ([template_predicate
                (
                   template_app
                    (template_app (template_hole 0, template_var 7),
                     template_var 4)
                   )],
              template_predicate (template_var 0))))],
       template_predicate (template_var 0))),
    ("WellType.WT_elim_cases",
     "[| ?P,?E \<turnstile> ?C\<bullet>\<^sub>s?F{?D} := ?v :: ?T;
         !!T T'.
            [| ?T = Void; ?P \<turnstile> ?C sees ?F,Static:T in ?D;
               ?P,?E \<turnstile> ?v :: T'; ?P \<turnstile> T' \<le> T |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 7),
                  template_var 6),
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 6, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("WellType.WT_elim_cases",
     "[| ?P,?E \<turnstile> ?V:=?e :: ?T;
         !!T T'.
            [| ?T = Void; ?E ?V = \<lfloor>T\<rfloor>;
               ?P,?E \<turnstile> ?e :: T'; ?P \<turnstile> T' \<le> T;
               ?V ~= this |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 9, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0))),
    ("WellType.WT_elim_cases",
     "[| ?P,?E \<turnstile> Cast ?D ?e :: ?T;
         !!D. [| ?T = Class ?D; ?P,?E \<turnstile> ?e :: Class D;
                 is_class ?P ?D;
                 ?P \<turnstile> ?D \<preceq>\<^sup>* D |
                 ?P \<turnstile> D \<preceq>\<^sup>* ?D |]
              ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 9, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0))),
    ("WellType.WT_elim_cases",
     "[| ?P,?E \<turnstile> ?a\<bullet>?F{?D} := ?v :: ?T;
         !!C T T'.
            [| ?T = Void; ?P,?E \<turnstile> ?a :: Class C;
               ?P \<turnstile> C sees ?F,NonStatic:T in ?D;
               ?P,?E \<turnstile> ?v :: T'; ?P \<turnstile> T' \<le> T |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 7),
                  template_var 6),
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 8, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("WellType.WT_elim_cases",
     "[| ?P,?E \<turnstile> ?C\<bullet>\<^sub>s?M(?ps) :: ?T;
         !!Ts pns body D Ts'.
            [| ?P \<turnstile> ?C sees ?M, Static :  Ts\<rightarrow>?T = (pns,
                                    body) in D;
               ?P,?E \<turnstile> ?ps [::] Ts';
               ?P \<turnstile> Ts' [\<le>] Ts; ?M ~= clinit |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 14, template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 13, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate (template_var 0))),
    ("WellType.WT_elim_cases",
     "[| ?P,?E \<turnstile> ?e\<bullet>?M(?ps) :: ?T;
         !!C Ts pns body D Ts'.
            [| ?P,?E \<turnstile> ?e :: Class C;
               ?P \<turnstile> C sees ?M, NonStatic :  Ts\<rightarrow>?T = (pns,
body) in D;
               ?P,?E \<turnstile> ?ps [::] Ts';
               ?P \<turnstile> Ts' [\<le>] Ts |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 12, template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 11, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate (template_var 0))),
    ("WellType.WT_elim_cases",
     "[| ?P,?E \<turnstile> if (?e) ?e\<^sub>1 else ?e\<^sub>2 :: ?T;
         !!T\<^sub>1 T\<^sub>2.
            [| ?P,?E \<turnstile> ?e :: Boolean;
               ?P,?E \<turnstile> ?e\<^sub>1 :: T\<^sub>1;
               ?P,?E \<turnstile> ?e\<^sub>2 :: T\<^sub>2;
               ?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 |
               ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1;
               ?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 --> ?T = T\<^sub>2;
               ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1 -->
               ?T = T\<^sub>1 |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("WellType.WT_elim_cases",
     "[| ?P,?E \<turnstile> ?e\<^sub>1 \<guillemotleft>?bop\<guillemotright> ?e\<^sub>2 :: ?T;
         !!T\<^sub>1 T\<^sub>2.
            [| ?bop = Eq; ?T = Boolean;
               ?P,?E \<turnstile> ?e\<^sub>1 :: T\<^sub>1;
               ?P,?E \<turnstile> ?e\<^sub>2 :: T\<^sub>2;
               ?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 |
               ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1 |]
            ==> ?Pa;
         [| ?bop = Add; ?T = Integer;
            ?P,?E \<turnstile> ?e\<^sub>1 :: Integer;
            ?P,?E \<turnstile> ?e\<^sub>2 :: Integer |]
         ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 9, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_implication
         ([template_equation (template_var 3, template_hole 1)],
          template_implication
           ([template_equation (template_var 1, template_hole 0)],
            template_implication
             ([template_predicate
                (
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 10, template_var 6),
                         template_var 5),
                       template_var 4),
                     template_hole 0)
                   )],
              template_implication
               ([template_predicate
                  (
                     template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 10, template_var 6),
                           template_var 5),
                         template_var 2),
                       template_hole 0)
                     )],
                template_predicate (template_var 0)))))],
       template_predicate (template_var 0))),
    ("WellType.WT_WTs_inducts",
     "[| ?P,?x1a \<turnstile> ?x2a :: ?x3a;
         !!C E. is_class ?P C ==> ?P1.0 E (new C) (Class C);
         !!E e D C.
            [| ?P,E \<turnstile> e :: Class D; ?P1.0 E e (Class D);
               is_class ?P C;
               ?P \<turnstile> C \<preceq>\<^sup>* D |
               ?P \<turnstile> D \<preceq>\<^sup>* C |]
            ==> ?P1.0 E (Cast C e) (Class C);
         !!v T E. typeof v = \<lfloor>T\<rfloor> ==> ?P1.0 E (Val v) T;
         !!E V T. E V = \<lfloor>T\<rfloor> ==> ?P1.0 E (Var V) T;
         !!E e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2.
            [| ?P,E \<turnstile> e\<^sub>1 :: T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E \<turnstile> e\<^sub>2 :: T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2;
               ?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 |
               ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1 |]
            ==> ?P1.0 E
                 (e\<^sub>1 \<guillemotleft>Eq\<guillemotright> e\<^sub>2)
                 Boolean;
         !!E e\<^sub>1 e\<^sub>2.
            [| ?P,E \<turnstile> e\<^sub>1 :: Integer;
               ?P1.0 E e\<^sub>1 Integer;
               ?P,E \<turnstile> e\<^sub>2 :: Integer;
               ?P1.0 E e\<^sub>2 Integer |]
            ==> ?P1.0 E
                 (e\<^sub>1 \<guillemotleft>Add\<guillemotright> e\<^sub>2)
                 Integer;
         !!E V T e T'.
            [| E V = \<lfloor>T\<rfloor>; ?P,E \<turnstile> e :: T';
               ?P1.0 E e T'; ?P \<turnstile> T' \<le> T; V ~= this |]
            ==> ?P1.0 E (V:=e) Void;
         !!E e C F T D.
            [| ?P,E \<turnstile> e :: Class C; ?P1.0 E e (Class C);
               ?P \<turnstile> C sees F,NonStatic:T in D |]
            ==> ?P1.0 E (e\<bullet>F{D}) T;
         !!C F T D E.
            ?P \<turnstile> C sees F,Static:T in D ==>
            ?P1.0 E (C\<bullet>\<^sub>sF{D}) T;
         !!E e\<^sub>1 C F T D e\<^sub>2 T'.
            [| ?P,E \<turnstile> e\<^sub>1 :: Class C;
               ?P1.0 E e\<^sub>1 (Class C);
               ?P \<turnstile> C sees F,NonStatic:T in D;
               ?P,E \<turnstile> e\<^sub>2 :: T'; ?P1.0 E e\<^sub>2 T';
               ?P \<turnstile> T' \<le> T |]
            ==> ?P1.0 E (e\<^sub>1\<bullet>F{D} := e\<^sub>2) Void;
         !!C F T D E e\<^sub>2 T'.
            [| ?P \<turnstile> C sees F,Static:T in D;
               ?P,E \<turnstile> e\<^sub>2 :: T'; ?P1.0 E e\<^sub>2 T';
               ?P \<turnstile> T' \<le> T |]
            ==> ?P1.0 E (C\<bullet>\<^sub>sF{D} := e\<^sub>2) Void;
         !!E e C M Ts T pns body D es Ts'.
            [| ?P,E \<turnstile> e :: Class C; ?P1.0 E e (Class C);
               ?P \<turnstile> C sees M, NonStatic :  Ts\<rightarrow>T = (pns,
                                    body) in D;
               ?P,E \<turnstile> es [::] Ts'; ?P2.0 E es Ts';
               ?P \<turnstile> Ts' [\<le>] Ts |]
            ==> ?P1.0 E (e\<bullet>M(es)) T;
         !!C M Ts T pns body D E es Ts'.
            [| ?P \<turnstile> C sees M, Static :  Ts\<rightarrow>T = (pns,
                                 body) in D;
               ?P,E \<turnstile> es [::] Ts'; ?P2.0 E es Ts';
               ?P \<turnstile> Ts' [\<le>] Ts; M ~= clinit |]
            ==> ?P1.0 E (C\<bullet>\<^sub>sM(es)) T;
         !!T E V e T'.
            [| is_type ?P T; ?P,E(V |-> T) \<turnstile> e :: T';
               ?P1.0 (E(V |-> T)) e T' |]
            ==> ?P1.0 E {V:T; e} T';
         !!E e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2.
            [| ?P,E \<turnstile> e\<^sub>1 :: T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E \<turnstile> e\<^sub>2 :: T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2 |]
            ==> ?P1.0 E (e\<^sub>1;; e\<^sub>2) T\<^sub>2;
         !!E e e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2 T.
            [| ?P,E \<turnstile> e :: Boolean; ?P1.0 E e Boolean;
               ?P,E \<turnstile> e\<^sub>1 :: T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E \<turnstile> e\<^sub>2 :: T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2;
               ?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 |
               ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1;
               ?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 --> T = T\<^sub>2;
               ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1 -->
               T = T\<^sub>1 |]
            ==> ?P1.0 E (if (e) e\<^sub>1 else e\<^sub>2) T;
         !!E e c T.
            [| ?P,E \<turnstile> e :: Boolean; ?P1.0 E e Boolean;
               ?P,E \<turnstile> c :: T; ?P1.0 E c T |]
            ==> ?P1.0 E (while (e) c) Void;
         !!E e C.
            [| ?P,E \<turnstile> e :: Class C; ?P1.0 E e (Class C) |]
            ==> ?P1.0 E (throw e) Void;
         !!E e\<^sub>1 T V C e\<^sub>2.
            [| ?P,E \<turnstile> e\<^sub>1 :: T; ?P1.0 E e\<^sub>1 T;
               ?P,E(V |-> Class C) \<turnstile> e\<^sub>2 :: T;
               ?P1.0 (E(V |-> Class C)) e\<^sub>2 T; is_class ?P C |]
            ==> ?P1.0 E (try e\<^sub>1 catch(C V) e\<^sub>2) T;
         !!E. ?P2.0 E [] [];
         !!E e T es Ts.
            [| ?P,E \<turnstile> e :: T; ?P1.0 E e T;
               ?P,E \<turnstile> es [::] Ts; ?P2.0 E es Ts |]
            ==> ?P2.0 E (e # es) (T # Ts) |]
      ==> ?P1.0 ?x1a ?x2a ?x3a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 62, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 49, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 48, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 1, template_var 4),
               template_var 3),
             template_var 2)
           ))),
    ("WellType.WT_WTs_inducts",
     "[| ?P,?x4a \<turnstile> ?x5a [::] ?x6a;
         !!C E. is_class ?P C ==> ?P1.0 E (new C) (Class C);
         !!E e D C.
            [| ?P,E \<turnstile> e :: Class D; ?P1.0 E e (Class D);
               is_class ?P C;
               ?P \<turnstile> C \<preceq>\<^sup>* D |
               ?P \<turnstile> D \<preceq>\<^sup>* C |]
            ==> ?P1.0 E (Cast C e) (Class C);
         !!v T E. typeof v = \<lfloor>T\<rfloor> ==> ?P1.0 E (Val v) T;
         !!E V T. E V = \<lfloor>T\<rfloor> ==> ?P1.0 E (Var V) T;
         !!E e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2.
            [| ?P,E \<turnstile> e\<^sub>1 :: T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E \<turnstile> e\<^sub>2 :: T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2;
               ?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 |
               ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1 |]
            ==> ?P1.0 E
                 (e\<^sub>1 \<guillemotleft>Eq\<guillemotright> e\<^sub>2)
                 Boolean;
         !!E e\<^sub>1 e\<^sub>2.
            [| ?P,E \<turnstile> e\<^sub>1 :: Integer;
               ?P1.0 E e\<^sub>1 Integer;
               ?P,E \<turnstile> e\<^sub>2 :: Integer;
               ?P1.0 E e\<^sub>2 Integer |]
            ==> ?P1.0 E
                 (e\<^sub>1 \<guillemotleft>Add\<guillemotright> e\<^sub>2)
                 Integer;
         !!E V T e T'.
            [| E V = \<lfloor>T\<rfloor>; ?P,E \<turnstile> e :: T';
               ?P1.0 E e T'; ?P \<turnstile> T' \<le> T; V ~= this |]
            ==> ?P1.0 E (V:=e) Void;
         !!E e C F T D.
            [| ?P,E \<turnstile> e :: Class C; ?P1.0 E e (Class C);
               ?P \<turnstile> C sees F,NonStatic:T in D |]
            ==> ?P1.0 E (e\<bullet>F{D}) T;
         !!C F T D E.
            ?P \<turnstile> C sees F,Static:T in D ==>
            ?P1.0 E (C\<bullet>\<^sub>sF{D}) T;
         !!E e\<^sub>1 C F T D e\<^sub>2 T'.
            [| ?P,E \<turnstile> e\<^sub>1 :: Class C;
               ?P1.0 E e\<^sub>1 (Class C);
               ?P \<turnstile> C sees F,NonStatic:T in D;
               ?P,E \<turnstile> e\<^sub>2 :: T'; ?P1.0 E e\<^sub>2 T';
               ?P \<turnstile> T' \<le> T |]
            ==> ?P1.0 E (e\<^sub>1\<bullet>F{D} := e\<^sub>2) Void;
         !!C F T D E e\<^sub>2 T'.
            [| ?P \<turnstile> C sees F,Static:T in D;
               ?P,E \<turnstile> e\<^sub>2 :: T'; ?P1.0 E e\<^sub>2 T';
               ?P \<turnstile> T' \<le> T |]
            ==> ?P1.0 E (C\<bullet>\<^sub>sF{D} := e\<^sub>2) Void;
         !!E e C M Ts T pns body D es Ts'.
            [| ?P,E \<turnstile> e :: Class C; ?P1.0 E e (Class C);
               ?P \<turnstile> C sees M, NonStatic :  Ts\<rightarrow>T = (pns,
                                    body) in D;
               ?P,E \<turnstile> es [::] Ts'; ?P2.0 E es Ts';
               ?P \<turnstile> Ts' [\<le>] Ts |]
            ==> ?P1.0 E (e\<bullet>M(es)) T;
         !!C M Ts T pns body D E es Ts'.
            [| ?P \<turnstile> C sees M, Static :  Ts\<rightarrow>T = (pns,
                                 body) in D;
               ?P,E \<turnstile> es [::] Ts'; ?P2.0 E es Ts';
               ?P \<turnstile> Ts' [\<le>] Ts; M ~= clinit |]
            ==> ?P1.0 E (C\<bullet>\<^sub>sM(es)) T;
         !!T E V e T'.
            [| is_type ?P T; ?P,E(V |-> T) \<turnstile> e :: T';
               ?P1.0 (E(V |-> T)) e T' |]
            ==> ?P1.0 E {V:T; e} T';
         !!E e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2.
            [| ?P,E \<turnstile> e\<^sub>1 :: T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E \<turnstile> e\<^sub>2 :: T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2 |]
            ==> ?P1.0 E (e\<^sub>1;; e\<^sub>2) T\<^sub>2;
         !!E e e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2 T.
            [| ?P,E \<turnstile> e :: Boolean; ?P1.0 E e Boolean;
               ?P,E \<turnstile> e\<^sub>1 :: T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E \<turnstile> e\<^sub>2 :: T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2;
               ?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 |
               ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1;
               ?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 --> T = T\<^sub>2;
               ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1 -->
               T = T\<^sub>1 |]
            ==> ?P1.0 E (if (e) e\<^sub>1 else e\<^sub>2) T;
         !!E e c T.
            [| ?P,E \<turnstile> e :: Boolean; ?P1.0 E e Boolean;
               ?P,E \<turnstile> c :: T; ?P1.0 E c T |]
            ==> ?P1.0 E (while (e) c) Void;
         !!E e C.
            [| ?P,E \<turnstile> e :: Class C; ?P1.0 E e (Class C) |]
            ==> ?P1.0 E (throw e) Void;
         !!E e\<^sub>1 T V C e\<^sub>2.
            [| ?P,E \<turnstile> e\<^sub>1 :: T; ?P1.0 E e\<^sub>1 T;
               ?P,E(V |-> Class C) \<turnstile> e\<^sub>2 :: T;
               ?P1.0 (E(V |-> Class C)) e\<^sub>2 T; is_class ?P C |]
            ==> ?P1.0 E (try e\<^sub>1 catch(C V) e\<^sub>2) T;
         !!E. ?P2.0 E [] [];
         !!E e T es Ts.
            [| ?P,E \<turnstile> e :: T; ?P1.0 E e T;
               ?P,E \<turnstile> es [::] Ts; ?P2.0 E es Ts |]
            ==> ?P2.0 E (e # es) (T # Ts) |]
      ==> ?P2.0 ?x4a ?x5a ?x6a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 62, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 48, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 47, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty)),
        template_predicate (template_app (template_hole 60, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 0, template_var 4),
               template_var 3),
             template_var 2)
           ))),
    ("WellType.WT_WTs_induct",
     "[| !!C E. is_class ?P C ==> ?P1.0 E (new C) (Class C);
         !!E e D C.
            [| ?P,E \<turnstile> e :: Class D; ?P1.0 E e (Class D);
               is_class ?P C;
               ?P \<turnstile> C \<preceq>\<^sup>* D |
               ?P \<turnstile> D \<preceq>\<^sup>* C |]
            ==> ?P1.0 E (Cast C e) (Class C);
         !!v T E. typeof v = \<lfloor>T\<rfloor> ==> ?P1.0 E (Val v) T;
         !!E V T. E V = \<lfloor>T\<rfloor> ==> ?P1.0 E (Var V) T;
         !!E e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2.
            [| ?P,E \<turnstile> e\<^sub>1 :: T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E \<turnstile> e\<^sub>2 :: T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2;
               ?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 |
               ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1 |]
            ==> ?P1.0 E
                 (e\<^sub>1 \<guillemotleft>Eq\<guillemotright> e\<^sub>2)
                 Boolean;
         !!E e\<^sub>1 e\<^sub>2.
            [| ?P,E \<turnstile> e\<^sub>1 :: Integer;
               ?P1.0 E e\<^sub>1 Integer;
               ?P,E \<turnstile> e\<^sub>2 :: Integer;
               ?P1.0 E e\<^sub>2 Integer |]
            ==> ?P1.0 E
                 (e\<^sub>1 \<guillemotleft>Add\<guillemotright> e\<^sub>2)
                 Integer;
         !!E V T e T'.
            [| E V = \<lfloor>T\<rfloor>; ?P,E \<turnstile> e :: T';
               ?P1.0 E e T'; ?P \<turnstile> T' \<le> T; V ~= this |]
            ==> ?P1.0 E (V:=e) Void;
         !!E e C F T D.
            [| ?P,E \<turnstile> e :: Class C; ?P1.0 E e (Class C);
               ?P \<turnstile> C sees F,NonStatic:T in D |]
            ==> ?P1.0 E (e\<bullet>F{D}) T;
         !!C F T D E.
            ?P \<turnstile> C sees F,Static:T in D ==>
            ?P1.0 E (C\<bullet>\<^sub>sF{D}) T;
         !!E e\<^sub>1 C F T D e\<^sub>2 T'.
            [| ?P,E \<turnstile> e\<^sub>1 :: Class C;
               ?P1.0 E e\<^sub>1 (Class C);
               ?P \<turnstile> C sees F,NonStatic:T in D;
               ?P,E \<turnstile> e\<^sub>2 :: T'; ?P1.0 E e\<^sub>2 T';
               ?P \<turnstile> T' \<le> T |]
            ==> ?P1.0 E (e\<^sub>1\<bullet>F{D} := e\<^sub>2) Void;
         !!C F T D E e\<^sub>2 T'.
            [| ?P \<turnstile> C sees F,Static:T in D;
               ?P,E \<turnstile> e\<^sub>2 :: T'; ?P1.0 E e\<^sub>2 T';
               ?P \<turnstile> T' \<le> T |]
            ==> ?P1.0 E (C\<bullet>\<^sub>sF{D} := e\<^sub>2) Void;
         !!E e C M Ts T pns body D es Ts'.
            [| ?P,E \<turnstile> e :: Class C; ?P1.0 E e (Class C);
               ?P \<turnstile> C sees M, NonStatic :  Ts\<rightarrow>T = (pns,
                                    body) in D;
               ?P,E \<turnstile> es [::] Ts'; ?P2.0 E es Ts';
               ?P \<turnstile> Ts' [\<le>] Ts |]
            ==> ?P1.0 E (e\<bullet>M(es)) T;
         !!C M Ts T pns body D E es Ts'.
            [| ?P \<turnstile> C sees M, Static :  Ts\<rightarrow>T = (pns,
                                 body) in D;
               ?P,E \<turnstile> es [::] Ts'; ?P2.0 E es Ts';
               ?P \<turnstile> Ts' [\<le>] Ts; M ~= clinit |]
            ==> ?P1.0 E (C\<bullet>\<^sub>sM(es)) T;
         !!T E V e T'.
            [| is_type ?P T; ?P,E(V |-> T) \<turnstile> e :: T';
               ?P1.0 (E(V |-> T)) e T' |]
            ==> ?P1.0 E {V:T; e} T';
         !!E e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2.
            [| ?P,E \<turnstile> e\<^sub>1 :: T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E \<turnstile> e\<^sub>2 :: T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2 |]
            ==> ?P1.0 E (e\<^sub>1;; e\<^sub>2) T\<^sub>2;
         !!E e e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2 T.
            [| ?P,E \<turnstile> e :: Boolean; ?P1.0 E e Boolean;
               ?P,E \<turnstile> e\<^sub>1 :: T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E \<turnstile> e\<^sub>2 :: T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2;
               ?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 |
               ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1;
               ?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 --> T = T\<^sub>2;
               ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1 -->
               T = T\<^sub>1 |]
            ==> ?P1.0 E (if (e) e\<^sub>1 else e\<^sub>2) T;
         !!E e c T.
            [| ?P,E \<turnstile> e :: Boolean; ?P1.0 E e Boolean;
               ?P,E \<turnstile> c :: T; ?P1.0 E c T |]
            ==> ?P1.0 E (while (e) c) Void;
         !!E e C.
            [| ?P,E \<turnstile> e :: Class C; ?P1.0 E e (Class C) |]
            ==> ?P1.0 E (throw e) Void;
         !!E e\<^sub>1 T V C e\<^sub>2.
            [| ?P,E \<turnstile> e\<^sub>1 :: T; ?P1.0 E e\<^sub>1 T;
               ?P,E(V |-> Class C) \<turnstile> e\<^sub>2 :: T;
               ?P1.0 (E(V |-> Class C)) e\<^sub>2 T; is_class ?P C |]
            ==> ?P1.0 E (try e\<^sub>1 catch(C V) e\<^sub>2) T;
         !!E. ?P2.0 E [] [];
         !!E e T es Ts.
            [| ?P,E \<turnstile> e :: T; ?P1.0 E e T;
               ?P,E \<turnstile> es [::] Ts; ?P2.0 E es Ts |]
            ==> ?P2.0 E (e # es) (T # Ts) |]
      ==> (?P,?x1a \<turnstile> ?x2a :: ?x3a --> ?P1.0 ?x1a ?x2a ?x3a) &
          (?P,?x4a \<turnstile> ?x5a [::] ?x6a --> ?P2.0 ?x4a ?x5a ?x6a)",
     template_implication
      ([template_predicate (template_app (template_hole 64, t_empty)),
        template_predicate (template_app (template_hole 63, t_empty)),
        template_predicate (template_app (template_hole 50, t_empty)),
        template_predicate (template_app (template_hole 63, t_empty)),
        template_predicate (template_app (template_hole 63, t_empty)),
        template_predicate (template_app (template_hole 63, t_empty)),
        template_predicate (template_app (template_hole 63, t_empty)),
        template_predicate (template_app (template_hole 63, t_empty)),
        template_predicate (template_app (template_hole 64, t_empty)),
        template_predicate (template_app (template_hole 63, t_empty)),
        template_predicate (template_app (template_hole 64, t_empty)),
        template_predicate (template_app (template_hole 63, t_empty)),
        template_predicate (template_app (template_hole 64, t_empty)),
        template_predicate (template_app (template_hole 49, t_empty)),
        template_predicate (template_app (template_hole 63, t_empty)),
        template_predicate (template_app (template_hole 63, t_empty)),
        template_predicate (template_app (template_hole 63, t_empty)),
        template_predicate (template_app (template_hole 63, t_empty)),
        template_predicate (template_app (template_hole 63, t_empty)),
        template_predicate (template_app (template_hole 63, t_empty)),
        template_predicate (template_app (template_hole 63, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 57, template_var 8),
                         template_var 5),
                       template_var 4),
                     template_var 3)),
                 template_app
                  (template_app
                    (template_app (template_var 7, template_var 5),
                     template_var 4),
                   template_var 3))),
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 19, template_var 8),
                       template_var 2),
                     template_var 1),
                   template_var 0)),
               template_app
                (template_app
                  (template_app (template_var 6, template_var 2),
                   template_var 1),
                 template_var 0)))
           )))]:
   (string * thm * template) list
### theory "Draft.WellTypeMoreTemplates"
### 0.452s elapsed time, 0.579s cpu time, 0.000s GC time
val it = (): unit
