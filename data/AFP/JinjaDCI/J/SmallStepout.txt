Loading theory "Draft.Auxiliary" (required by "Draft.SmallStepMoreTemplates" via "Draft.SmallStep" via "Draft.Expr" via "Draft.Exceptions" via "Draft.Objects" via "Draft.TypeRel" via "Draft.Decl" via "Draft.Type")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SmallStepMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SmallStepMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SmallStepMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.129s elapsed time, 0.535s cpu time, 0.032s GC time
Loading theory "HOL-Library.Transitive_Closure_Table" (required by "Draft.SmallStepMoreTemplates" via "Draft.SmallStep" via "Draft.Expr" via "Draft.Exceptions" via "Draft.Objects" via "Draft.TypeRel")
### theory "Draft.Auxiliary"
### 0.144s elapsed time, 0.593s cpu time, 0.032s GC time
Loading theory "Draft.Type" (required by "Draft.SmallStepMoreTemplates" via "Draft.SmallStep" via "Draft.Expr" via "Draft.Exceptions" via "Draft.Objects" via "Draft.TypeRel" via "Draft.Decl")
Proofs for inductive predicate(s) "rtrancl_path"
  Proving monotonicity ...
Found termination order: "size_list size <*mlex*> {}"
Proofs for inductive predicate(s) "rtrancl_tab"
  Proving monotonicity ...
### theory "HOL-Library.Set_Algebras"
### 0.255s elapsed time, 1.036s cpu time, 0.032s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SmallStepMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.332s elapsed time, 1.318s cpu time, 0.121s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SmallStepMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Transitive_Closure_Table"
### 0.396s elapsed time, 1.552s cpu time, 0.160s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SmallStepMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
### theory "Draft.Type"
### 0.714s elapsed time, 2.814s cpu time, 0.279s GC time
Loading theory "Draft.Decl" (required by "Draft.SmallStepMoreTemplates" via "Draft.SmallStep" via "Draft.Expr" via "Draft.Exceptions" via "Draft.Objects" via "Draft.TypeRel")
consts
  left :: "'a tree => 'a tree"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  right :: "'a tree => 'a tree"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Decl"
### 0.067s elapsed time, 0.270s cpu time, 0.000s GC time
Loading theory "Draft.TypeRel" (required by "Draft.SmallStepMoreTemplates" via "Draft.SmallStep" via "Draft.Expr" via "Draft.Exceptions" via "Draft.Objects")
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Proofs for inductive predicate(s) "subcls1p"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
  Proving monotonicity ...
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
consts
  supercls_lst :: "'m prog => char list list => bool"
### theory "HOL-Library.Stream"
### 1.056s elapsed time, 4.033s cpu time, 0.860s GC time
Proofs for inductive predicate(s) "widen"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Methods"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.016s elapsed time, 3.746s cpu time, 0.832s GC time
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Fields"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.TypeRel"
### 0.951s elapsed time, 2.878s cpu time, 0.796s GC time
Loading theory "Draft.Value" (required by "Draft.SmallStepMoreTemplates" via "Draft.SmallStep" via "Draft.Expr" via "Draft.Exceptions" via "Draft.Objects")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Addr"
consts
  the_Intg :: "val => int"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_Addr :: "val => nat"
consts
  default_val :: "ty => val"
### theory "Draft.Value"
### 0.376s elapsed time, 0.815s cpu time, 0.130s GC time
Loading theory "Draft.Objects" (required by "Draft.SmallStepMoreTemplates" via "Draft.SmallStep" via "Draft.Expr" via "Draft.Exceptions")
### theory "HOL-Library.Tree"
### 2.051s elapsed time, 6.435s cpu time, 1.206s GC time
Loading theory "Draft.Templates" (required by "Draft.SmallStepMoreTemplates" via "Draft.ExtrEqs")
consts
  typeof_h :: "heap => val => ty option"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.107s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SmallStepMoreTemplates")
Proofs for inductive predicate(s) "iprog"
  Proving monotonicity ...
### theory "Draft.Objects"
### 0.478s elapsed time, 1.010s cpu time, 0.127s GC time
Loading theory "Draft.Exceptions" (required by "Draft.SmallStepMoreTemplates" via "Draft.SmallStep" via "Draft.Expr")
### theory "Draft.Exceptions"
### 0.135s elapsed time, 0.272s cpu time, 0.000s GC time
Loading theory "Draft.Expr" (required by "Draft.SmallStepMoreTemplates" via "Draft.SmallStep")
Loading theory "Draft.State" (required by "Draft.SmallStepMoreTemplates" via "Draft.SmallStep")
Loading theory "Draft.SystemClasses" (required by "Draft.SmallStepMoreTemplates" via "Draft.SmallStep" via "Draft.WWellForm" via "Draft.WellForm")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.556s elapsed time, 1.263s cpu time, 0.127s GC time
### theory "Draft.State"
### 0.049s elapsed time, 0.191s cpu time, 0.000s GC time
### theory "Draft.SystemClasses"
### 0.092s elapsed time, 0.301s cpu time, 0.050s GC time
Loading theory "Draft.WellForm" (required by "Draft.SmallStepMoreTemplates" via "Draft.SmallStep" via "Draft.WWellForm")
### theory "Draft.WellForm"
### 0.243s elapsed time, 0.511s cpu time, 0.057s GC time
Found termination order: "{}"
### Ambiguous input (line 129 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 130 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" fv) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("_applC" ("_position" fv) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" fv) ("_position" e\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  fv :: "char list exp => char list set"
  fvs :: "char list exp list => char list set"
Found termination order: "{}"
### Ambiguous input (line 161 of "$AFP/JinjaDCI/J/Expr.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lass_val_of)
###       ("\<^const>Expr.exp.LAss" ("_position" V)
###         ("_applC" ("_position" Val) ("_position" v))))
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" V) ("_tuple_arg" ("_position" v))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" lass_val_of)
###       ("_updbind" ("_position" V)
###         ("_applC" ("_position" Val) ("_position" v))))
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" V) ("_tuple_arg" ("_position" v))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 252 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" sub_RI)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>1))
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub_RI)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>1))
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub_RI)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>1))
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 253 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" sub_RI)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub_RI)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub_RI)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  sub_RI :: "'a exp => bool"
  sub_RIs :: "'a exp list => bool"
### Ambiguous input (line 295 of "$AFP/JinjaDCI/J/Expr.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C')
###         ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" not_init)
###         ("_cargs" ("_position" C') ("_position" e\<^sub>1)))
###       ("_applC" ("_position" not_init)
###         ("_cargs" ("_position" C') ("_position" e\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C')
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" not_init)
###         ("_cargs" ("_position" C') ("_position" e\<^sub>1)))
###       ("_applC" ("_position" not_init)
###         ("_cargs" ("_position" C') ("_position" e\<^sub>2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 296 of "$AFP/JinjaDCI/J/Expr.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C')
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C') ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C')
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C') ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  not_init :: "char list => 'a exp => bool"
  not_inits :: "char list => 'a exp list => bool"
### Ambiguous input (line 336 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" subexp)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("\<^const>Set.union"
###         ("_Finset"
###           ("_args" ("_position" e\<^sub>1) ("_position" e\<^sub>2)))
###         ("_applC" ("_position" subexp) ("_position" e\<^sub>1)))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subexp)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("\<^const>Set.union"
###         ("_Finset"
###           ("_args" ("_position" e\<^sub>1) ("_position" e\<^sub>2)))
###         ("_applC" ("_position" subexp) ("_position" e\<^sub>1)))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subexp)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("\<^const>Set.union"
###         ("_Finset"
###           ("_args" ("_position" e\<^sub>1) ("_position" e\<^sub>2)))
###         ("_applC" ("_position" subexp) ("_position" e\<^sub>1)))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 337 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" subexp)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union" ("_Finset" ("_position" e\<^sub>2))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subexp)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union" ("_Finset" ("_position" e\<^sub>2))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subexp)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union" ("_Finset" ("_position" e\<^sub>2))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  subexp :: "'a exp => 'a exp set"
  subexps :: "'a exp list => 'a exp set"
### theory "Draft.Expr"
### 7.140s elapsed time, 9.712s cpu time, 2.466s GC time
Loading theory "Draft.WWellForm" (required by "Draft.SmallStepMoreTemplates" via "Draft.SmallStep")
### theory "Draft.WWellForm"
### 0.147s elapsed time, 0.190s cpu time, 0.000s GC time
Loading theory "Draft.SmallStep" (required by "Draft.SmallStepMoreTemplates")
### Ambiguous input (line 16 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" blocks)
###       ("_tuple" ("\<^const>List.list.Cons" ("_position" V) ("_position" Vs))
###         ("_tuple_args"
###           ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts))
###           ("_tuple_args"
###             ("\<^const>List.list.Cons" ("_position" v) ("_position" vs))
###             ("_tuple_arg" ("_position" e))))))
###     ("\<^const>Expr.exp.Block" ("_position" V)
###       ("\<^const>Expr.exp.LAss" ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_applC" ("_position" blocks)
###         ("_tuple" ("_position" Vs)
###           ("_tuple_args" ("_position" Ts)
###             ("_tuple_args" ("_position" vs)
###               ("_tuple_arg" ("_position" e)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" blocks)
###       ("_tuple" ("\<^const>List.list.Cons" ("_position" V) ("_position" Vs))
###         ("_tuple_args"
###           ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts))
###           ("_tuple_args"
###             ("\<^const>List.list.Cons" ("_position" v) ("_position" vs))
###             ("_tuple_arg" ("_position" e))))))
###     ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###       ("_applC" ("_position" Val) ("_position" v))
###       ("_applC" ("_position" blocks)
###         ("_tuple" ("_position" Vs)
###           ("_tuple_args" ("_position" Ts)
###             ("_tuple_args" ("_position" vs)
###               ("_tuple_arg" ("_position" e)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Missing patterns in function definition:
### !!vc vd vb. blocks ([], vc # vd, vb) = undefined
### !!v ve vf vd. blocks ([], v, ve # vf, vd) = undefined
### !!va vb vc. blocks (va # vb, [], vc) = undefined
### (3 more)
Found termination order:
  "(%p. size_list size (fst (snd (snd p)))) <*mlex*> {}"
### Ambiguous input (line 47 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" icheck)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" D')
###           ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###             ("_position" D) ("_applC" ("_position" Val) ("_position" v))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" D') ("_position" D))
###       ("\<^const>HOL.Ex_binder" ("_position" T)
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" T)
###           ("_position" D))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" icheck)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" D')
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###               ("_position" D))
###             ("_applC" ("_position" Val) ("_position" v))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" D') ("_position" D))
###       ("\<^const>HOL.Ex_binder" ("_position" T)
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" T)
###           ("_position" D))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 51 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###       ("_position" None)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Not"
###       ("_applC" ("_position" icheck)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C')
###             ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###               ("_position" D)
###               ("_constrain" ("_position" e\<^sub>2)
###                 ("_tapp" ("_position_sort" 'a) ("_type_name" exp))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###       ("_position" None)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Not"
###       ("_applC" ("_position" icheck)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C')
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###                 ("_position" D))
###               ("_constrain" ("_position" e\<^sub>2)
###                 ("_tapp" ("_position_sort" 'a) ("_type_name" exp))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 181 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" b) ("_position" t))
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" b) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" addr) ("_position" a)) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" b) ("_position" t))
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" b) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss"
###         ("_applC" ("_position" addr) ("_position" a)) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 153 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.SFAcc"
###         ("\<^const>Expr.exp.INIT" ("_position" D) ("_list" ("_position" D))
###           ("_position" False) ("_position" C))
###         ("_position" F) ("_position" D))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.INIT" ("_position" D) ("_list" ("_position" D))
###         ("_position" False)
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 185 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" addr) ("_position" a)) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss"
###         ("_applC" ("_position" addr) ("_position" a)) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 189 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e'))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e'))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e'))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e'))
###       ("_position" s') ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 166 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e') ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e') ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.FAss" ("_position" e') ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.FAss" ("_position" e') ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s') ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 267 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 170 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e'))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e'))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e'))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e'))
###       ("_position" s') ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 193 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" sfs) ("_tuple_arg" ("_position" i))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" sfs')
###             ("_MapUpd" ("_position" sfs)
###               ("_maplet" ("_position" F) ("_position" v)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" sh')
###               ("_MapUpd" ("_position" sh)
###                 ("_maplet" ("_position" D)
###                   ("_tuple" ("_position" sfs')
###                     ("_tuple_arg" ("_position" i)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" True) ("_position" unit)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh'))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" sfs) ("_tuple_arg" ("_position" i))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" sfs')
###             ("_MapUpd" ("_position" sfs)
###               ("_maplet" ("_position" F) ("_position" v)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" sh')
###               ("_MapUpd" ("_position" sh)
###                 ("_maplet" ("_position" D)
###                   ("_tuple" ("_position" sfs')
###                     ("_tuple_arg" ("_position" i)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" True) ("_position" unit)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh'))))
###       ("_position" False))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 174 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" NonStatic) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" addr) ("_position" a)) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" unit)
###       ("_tuple"
###         ("_MapUpd" ("_position" h)
###           ("_maplet" ("_position" a)
###             ("_tuple" ("_position" C)
###               ("_tuple_arg"
###                 ("_MapUpd" ("_position" fs)
###                   ("_maplet"
###                     ("_tuple" ("_position" F)
###                       ("_tuple_arg" ("_position" D)))
###                     ("_position" v)))))))
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" NonStatic) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss"
###         ("_applC" ("_position" addr) ("_position" a)) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" unit)
###       ("_tuple"
###         ("_MapUpd" ("_position" h)
###           ("_maplet" ("_position" a)
###             ("_tuple" ("_position" C)
###               ("_tuple_arg"
###                 ("_MapUpd" ("_position" fs)
###                   ("_maplet"
###                     ("_tuple" ("_position" F)
###                       ("_tuple_arg" ("_position" D)))
###                     ("_position" v)))))))
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 178 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" null) ("_position" F)
###         ("_position" D))
###       ("_applC" ("_position" Val) ("_position" v)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" THROW) ("_position" NullPointer)) ("_position" s)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_position" null) ("_position" F)
###       ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" THROW) ("_position" NullPointer)) ("_position" s)
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 199 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" sfs)
###               ("_tuple_arg" ("_position" Done))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" True))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" sfs)
###               ("_tuple_arg" ("_position" Done))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" True))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" sfs)
###               ("_tuple_arg" ("_position" Done))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" True))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" sfs)
###               ("_tuple_arg" ("_position" Done))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" True))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 319 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" hp)
###           ("_cargs" ("_position" s) ("_position" a)))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###           ("_position" C)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch"
###         ("_applC" ("_position" Throw) ("_position" a)) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss"
###           ("_applC" ("_position" Class) ("_position" C))
###           ("_applC" ("_position" addr) ("_position" a)))
###         ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" hp)
###           ("_cargs" ("_position" s) ("_position" a)))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###           ("_position" C)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch"
###         ("_applC" ("_position" Throw) ("_position" a)) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V)
###         ("_applC" ("_position" Class) ("_position" C))
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 388 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc"
###         ("_applC" ("_position" throw) ("_position" e)) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" throw) ("_position" e)) ("_position" s)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_applC" ("_position" throw) ("_position" e))
###       ("_position" F) ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" throw) ("_position" e)) ("_position" s)
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 271 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 389 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D))
###       ("_applC" ("_position" throw) ("_position" e)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" throw) ("_position" e)) ("_position" s)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###       ("_position" F) ("_position" D)
###       ("_applC" ("_position" throw) ("_position" e)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" throw) ("_position" e)) ("_position" s)
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 204 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc"
###           ("\<^const>Expr.exp.INIT" ("_position" D)
###             ("_list" ("_position" D)) ("_position" False) ("_position" C))
###           ("_position" F) ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc"
###           ("\<^const>Expr.exp.INIT" ("_position" D)
###             ("_list" ("_position" D)) ("_position" False) ("_position" C))
###           ("_position" F) ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.SFAss"
###         ("\<^const>Expr.exp.INIT" ("_position" D) ("_list" ("_position" D))
###           ("_position" False) ("_position" C))
###         ("_position" F) ("_position" D)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.SFAss"
###         ("\<^const>Expr.exp.INIT" ("_position" D) ("_list" ("_position" D))
###           ("_position" False) ("_position" C))
###         ("_position" F) ("_position" D)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.INIT" ("_position" D) ("_list" ("_position" D))
###         ("_position" False)
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_applC" ("_position" Val) ("_position" v))))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.INIT" ("_position" D) ("_list" ("_position" D))
###         ("_position" False)
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_applC" ("_position" Val) ("_position" v))))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.INIT" ("_position" D) ("_list" ("_position" D))
###         ("_position" False)
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_applC" ("_position" Val) ("_position" v))))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.INIT" ("_position" D) ("_list" ("_position" D))
###         ("_position" False)
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_applC" ("_position" Val) ("_position" v))))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 395 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###       ("_applC" ("_position" Val) ("_position" v))
###       ("_applC" ("_position" Throw) ("_position" a)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" Throw) ("_position" a)) ("_position" s)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.Block" ("_position" V)
###       ("\<^const>Expr.exp.LAss" ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_applC" ("_position" Throw) ("_position" a)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" Throw) ("_position" a)) ("_position" s)
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 390 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_applC" ("_position" throw) ("_position" e)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" throw) ("_position" e)) ("_position" s)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###       ("_position" D) ("_applC" ("_position" throw) ("_position" e)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" throw) ("_position" e)) ("_position" s)
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 209 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Not"
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" b) ("_position" t))
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" b) ("_position" t)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_position" s) ("_position" b)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_position" s) ("_position" False))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Not"
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" b) ("_position" t))
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" b) ("_position" t)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_position" s) ("_position" b)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_position" s) ("_position" False))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 213 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###       ("_position" F) ("_position" NonStatic) ("_position" t)
###       ("_position" D)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_position" s) ("_position" b)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_position" s) ("_position" False))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###       ("_position" F) ("_position" NonStatic) ("_position" t)
###       ("_position" D)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_position" s) ("_position" b)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_position" s) ("_position" False))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 275 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 282 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###       ("_applC" ("_position" Val) ("_position" v))
###       ("_applC" ("_position" Val) ("_position" u)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" Val) ("_position" u)) ("_position" s)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.Block" ("_position" V)
###       ("\<^const>Expr.exp.LAss" ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_applC" ("_position" Val) ("_position" u)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" Val) ("_position" u)) ("_position" s)
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "redp", "redsp"
  Proving monotonicity ...
### theory "Draft.SmallStep"
### 9.170s elapsed time, 10.344s cpu time, 0.676s GC time
Loading theory "Draft.SmallStepMoreTemplates"
val templateLemmas =
   [("SmallStep.nicheck_SFAss_nonVal",
     "val_of ?e\<^sub>2 = None ==>
      ~ icheck ?P ?C' (?C\<bullet>\<^sub>s?F{?D} := ?e\<^sub>2)",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 5), template_hole 3)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 3),
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 1),
                     template_var 0),
                   template_var 5))
               )
           ))),
    ("SmallStep.map_Vals_no_step",
     "((map Val ?vs, ?s, ?b), ?es', ?s', ?b') ~: reds ?P",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 3, template_hole 2),
                           template_var 6)),
                       template_app
                        (template_app (template_hole 1, template_var 5),
                         template_var 4))),
                   template_app
                    (template_app (template_hole 4, template_var 3),
                     template_app
                      (template_app (template_hole 1, template_var 2),
                       template_var 1)))),
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("SmallStep.final_no_step",
     "final ?e ==> ((?e, ?s, ?b), ?e', ?s', ?b') ~: red ?P",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 6))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 6),
                         template_app
                          (template_app (template_hole 1, template_var 5),
                           template_var 4))),
                     template_app
                      (template_app (template_hole 2, template_var 3),
                       template_app
                        (template_app (template_hole 1, template_var 2),
                         template_var 1)))),
                 template_app (template_hole 0, template_var 0))
               )
           ))),
    ("SmallStep.finals_no_step",
     "finals ?es ==> ((?es, ?s, ?b), ?es', ?s', ?b') ~: reds ?P",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 6))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 6),
                         template_app
                          (template_app (template_hole 1, template_var 5),
                           template_var 4))),
                     template_app
                      (template_app (template_hole 2, template_var 3),
                       template_app
                        (template_app (template_hole 1, template_var 2),
                         template_var 1)))),
                 template_app (template_hole 0, template_var 0))
               )
           ))),
    ("SmallStep.vals_no_step",
     "map_vals_of ?es = \<lfloor>?vs\<rfloor> ==>
      ((?es, ?s, ?b), ?es', ?s', ?b') ~: reds ?P",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 7),
          template_app (template_hole 6, template_var 6))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 7),
                         template_app
                          (template_app (template_hole 1, template_var 5),
                           template_var 4))),
                     template_app
                      (template_app (template_hole 2, template_var 3),
                       template_app
                        (template_app (template_hole 1, template_var 2),
                         template_var 1)))),
                 template_app (template_hole 0, template_var 0))
               )
           ))),
    ("SmallStep.val_no_step",
     "val_of ?e = \<lfloor>?v\<rfloor> ==>
      ((?e, ?s, ?b), ?e', ?s', ?b') ~: red ?P",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 7),
          template_app (template_hole 6, template_var 6))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 7),
                         template_app
                          (template_app (template_hole 1, template_var 5),
                           template_var 4))),
                     template_app
                      (template_app (template_hole 2, template_var 3),
                       template_app
                        (template_app (template_hole 1, template_var 2),
                         template_var 1)))),
                 template_app (template_hole 0, template_var 0))
               )
           ))),
    ("SmallStep.redp_red_eq", "redp ?P = red' ?P",
     template_equation
      (template_app (template_hole 5, template_var 0), t_empty)),
    ("SmallStep.redsp_reds_eq", "redsp ?P = reds' ?P",
     template_equation
      (template_app (template_hole 5, template_var 0), t_empty)),
    ("SmallStep.vals_throw_no_step",
     "((map Val ?vs @ Throw ?a # ?es, ?s, ?b), ?es', ?s', ?b') ~: reds ?P",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app
                          (template_app
                            (template_hole 7,
                             template_app
                              (template_app
                                (template_hole 6, template_hole 5),
                               template_var 8)),
                           template_app
                            (template_app
                              (template_hole 4,
                               template_app
                                (template_hole 3,
                                 template_app
                                  (template_hole 5,
                                   template_app
                                    (template_hole 2, template_var 7)))),
                             template_var 6))),
                       template_app
                        (template_app (template_hole 1, template_var 5),
                         template_var 4))),
                   template_app
                    (template_app (template_hole 8, template_var 3),
                     template_app
                      (template_app (template_hole 1, template_var 2),
                       template_var 1)))),
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("SmallStep.sub_RI_blocks_body",
     "[| length ?vs = length ?pns; length ?Ts = length ?pns |]
      ==> sub_RI (blocks (?pns, ?Ts, ?vs, ?body)) = sub_RI ?body",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 3),
          template_app (template_hole 7, template_var 2)),
        template_equation
         (template_app (template_hole 6, template_var 1),
          template_app (template_hole 7, template_var 2))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0))))),
         template_app (template_hole 4, template_var 0)))),
    ("SmallStep.red_hext_incr",
     "?P \<turnstile> \<langle>?e,(?h, ?l, ?sh),?b\<rangle> \<rightarrow>
                      \<langle>?e',(?h', ?l', ?sh'),?b'\<rangle> ==>
      ?h \<unlhd> ?h'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 10),
                      template_app
                       (template_app
                         (template_hole 4,
                          template_app
                           (template_app (template_hole 3, template_var 9),
                            template_app
                             (template_app
                               (template_hole 2, template_var 8),
                              template_var 7))),
                        template_var 6))),
                  template_app
                   (template_app (template_hole 5, template_var 5),
                    template_app
                     (template_app
                       (template_hole 4,
                        template_app
                         (template_app (template_hole 3, template_var 4),
                          template_app
                           (template_app (template_hole 2, template_var 3),
                            template_var 2))),
                      template_var 1)))),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 9), template_var 4)
           ))),
    ("SmallStep.reds_hext_incr",
     "?P \<turnstile> \<langle>?es,(?h, ?l, ?sh),?b\<rangle> [\<rightarrow>]
                      \<langle>?es',(?h', ?l', ?sh'),?b'\<rangle> ==>
      ?h \<unlhd> ?h'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 10),
                      template_app
                       (template_app
                         (template_hole 4,
                          template_app
                           (template_app (template_hole 3, template_var 9),
                            template_app
                             (template_app
                               (template_hole 2, template_var 8),
                              template_var 7))),
                        template_var 6))),
                  template_app
                   (template_app (template_hole 5, template_var 5),
                    template_app
                     (template_app
                       (template_hole 4,
                        template_app
                         (template_app (template_hole 3, template_var 4),
                          template_app
                           (template_app (template_hole 2, template_var 3),
                            template_var 2))),
                      template_var 1)))),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 9), template_var 4)
           ))),
    ("SmallStep.red_lcl_incr",
     "?P \<turnstile> \<langle>?e,(?h\<^sub>0, ?l\<^sub>0, ?sh\<^sub>0),
                       ?b\<rangle> \<rightarrow>
                      \<langle>?e',(?h\<^sub>1, ?l\<^sub>1, ?sh\<^sub>1),
                       ?b'\<rangle> ==>
      dom ?l\<^sub>0 <= dom ?l\<^sub>1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 10),
                      template_app
                       (template_app
                         (template_hole 5,
                          template_app
                           (template_app (template_hole 4, template_var 9),
                            template_app
                             (template_app
                               (template_hole 3, template_var 8),
                              template_var 7))),
                        template_var 6))),
                  template_app
                   (template_app (template_hole 6, template_var 5),
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app
                         (template_app (template_hole 4, template_var 4),
                          template_app
                           (template_app (template_hole 3, template_var 3),
                            template_var 2))),
                      template_var 1)))),
              template_app (template_hole 2, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 8),
         template_app (template_hole 0, template_var 3)))),
    ("SmallStep.reds_lcl_incr",
     "?P \<turnstile> \<langle>?es,(?h\<^sub>0, ?l\<^sub>0, ?sh\<^sub>0),
                       ?b\<rangle> [\<rightarrow>]
                      \<langle>?es',(?h\<^sub>1, ?l\<^sub>1, ?sh\<^sub>1),
                       ?b'\<rangle> ==>
      dom ?l\<^sub>0 <= dom ?l\<^sub>1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 10),
                      template_app
                       (template_app
                         (template_hole 5,
                          template_app
                           (template_app (template_hole 4, template_var 9),
                            template_app
                             (template_app
                               (template_hole 3, template_var 8),
                              template_var 7))),
                        template_var 6))),
                  template_app
                   (template_app (template_hole 6, template_var 5),
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app
                         (template_app (template_hole 4, template_var 4),
                          template_app
                           (template_app (template_hole 3, template_var 3),
                            template_var 2))),
                      template_var 1)))),
              template_app (template_hole 2, template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 8),
         template_app (template_hole 0, template_var 3)))),
    ("SmallStep.reds_throw",
     "[| ?P \<turnstile> \<langle>?e,?s,?b\<rangle> \<rightarrow>*
                         \<langle>?e',?s',?b'\<rangle>;
         throw_of ?e = \<lfloor>?e\<^sub>t\<rfloor> |]
      ==> EX e\<^sub>t'. throw_of ?e' = \<lfloor>e\<^sub>t'\<rfloor>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_var 7),
                      template_app
                       (template_app (template_hole 6, template_var 6),
                        template_var 5))),
                  template_app
                   (template_app (template_hole 7, template_var 4),
                    template_app
                     (template_app (template_hole 6, template_var 3),
                      template_var 2)))),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)))
            ),
        template_equation
         (template_app (template_hole 2, template_var 7),
          template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("SmallStep.reds_final_same",
     "[| ?P \<turnstile> \<langle>?e,?s,?b\<rangle> \<rightarrow>*
                         \<langle>?e',?s',?b'\<rangle>;
         final ?e |]
      ==> ?e = ?e' & ?s = ?s' & ?b = ?b'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 6),
                      template_app
                       (template_app (template_hole 7, template_var 5),
                        template_var 4))),
                  template_app
                   (template_app (template_hole 8, template_var 3),
                    template_app
                     (template_app (template_hole 7, template_var 2),
                      template_var 1)))),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 0)))
            ),
        template_predicate
         (template_app (template_hole 4, template_var 6))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 6),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 1, template_var 5),
                   template_var 2)),
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 1)))
           ))),
    ("SmallStep.red_lcl_add",
     "?P \<turnstile> \<langle>?e,(?h, ?l, ?sh),?b\<rangle> \<rightarrow>
                      \<langle>?e',(?h', ?l', ?sh'),?b'\<rangle> ==>
      ?P \<turnstile> \<langle>?e,(?h, ?l\<^sub>0 ++ ?l, ?sh),
                       ?b\<rangle> \<rightarrow>
                      \<langle>?e',(?h', ?l\<^sub>0 ++ ?l', ?sh'),
                       ?b'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 11),
                      template_app
                       (template_app
                         (template_hole 4,
                          template_app
                           (template_app (template_hole 3, template_var 10),
                            template_app
                             (template_app
                               (template_hole 2, template_var 9),
                              template_var 8))),
                        template_var 7))),
                  template_app
                   (template_app (template_hole 5, template_var 6),
                    template_app
                     (template_app
                       (template_hole 4,
                        template_app
                         (template_app (template_hole 3, template_var 5),
                          template_app
                           (template_app (template_hole 2, template_var 4),
                            template_var 3))),
                      template_var 2)))),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 11),
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 3, template_var 10),
                           template_app
                            (template_app
                              (template_hole 2,
                               template_app
                                (template_app
                                  (template_hole 0, template_var 0),
                                 template_var 9)),
                             template_var 8))),
                       template_var 7))),
                 template_app
                  (template_app (template_hole 5, template_var 6),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 5),
                         template_app
                          (template_app
                            (template_hole 2,
                             template_app
                              (template_app
                                (template_hole 0, template_var 0),
                               template_var 4)),
                           template_var 3))),
                     template_var 2)))),
             template_app (template_hole 1, template_var 1))
           ))),
    ("SmallStep.reds_lcl_add",
     "?P \<turnstile> \<langle>?es,(?h, ?l, ?sh),?b\<rangle> [\<rightarrow>]
                      \<langle>?es',(?h', ?l', ?sh'),?b'\<rangle> ==>
      ?P \<turnstile> \<langle>?es,(?h, ?l\<^sub>0 ++ ?l, ?sh),
                       ?b\<rangle> [\<rightarrow>]
                      \<langle>?es',(?h', ?l\<^sub>0 ++ ?l', ?sh'),
                       ?b'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 11),
                      template_app
                       (template_app
                         (template_hole 4,
                          template_app
                           (template_app (template_hole 3, template_var 10),
                            template_app
                             (template_app
                               (template_hole 2, template_var 9),
                              template_var 8))),
                        template_var 7))),
                  template_app
                   (template_app (template_hole 5, template_var 6),
                    template_app
                     (template_app
                       (template_hole 4,
                        template_app
                         (template_app (template_hole 3, template_var 5),
                          template_app
                           (template_app (template_hole 2, template_var 4),
                            template_var 3))),
                      template_var 2)))),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 11),
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 3, template_var 10),
                           template_app
                            (template_app
                              (template_hole 2,
                               template_app
                                (template_app
                                  (template_hole 0, template_var 0),
                                 template_var 9)),
                             template_var 8))),
                       template_var 7))),
                 template_app
                  (template_app (template_hole 5, template_var 6),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 5),
                         template_app
                          (template_app
                            (template_hole 2,
                             template_app
                              (template_app
                                (template_hole 0, template_var 0),
                               template_var 4)),
                           template_var 3))),
                     template_var 2)))),
             template_app (template_hole 1, template_var 1))
           ))),
    ("SmallStep.Red_lcl_add",
     "?P \<turnstile> \<langle>?e,(?h, ?l, ?sh),?b\<rangle> \<rightarrow>*
                      \<langle>?e',(?h', ?l', ?sh'),?b'\<rangle> ==>
      ?P \<turnstile> \<langle>?e,(?h, ?l\<^sub>0 ++ ?l, ?sh),
                       ?b\<rangle> \<rightarrow>*
                      \<langle>?e',(?h', ?l\<^sub>0 ++ ?l', ?sh'),
                       ?b'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 11),
                      template_app
                       (template_app
                         (template_hole 5,
                          template_app
                           (template_app (template_hole 4, template_var 10),
                            template_app
                             (template_app
                               (template_hole 3, template_var 9),
                              template_var 8))),
                        template_var 7))),
                  template_app
                   (template_app (template_hole 6, template_var 6),
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app
                         (template_app (template_hole 4, template_var 5),
                          template_app
                           (template_app (template_hole 3, template_var 4),
                            template_var 3))),
                      template_var 2)))),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 11),
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_app (template_hole 4, template_var 10),
                           template_app
                            (template_app
                              (template_hole 3,
                               template_app
                                (template_app
                                  (template_hole 0, template_var 0),
                                 template_var 9)),
                             template_var 8))),
                       template_var 7))),
                 template_app
                  (template_app (template_hole 6, template_var 6),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_var 5),
                         template_app
                          (template_app
                            (template_hole 3,
                             template_app
                              (template_app
                                (template_hole 0, template_var 0),
                               template_var 4)),
                           template_var 3))),
                     template_var 2)))),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)))
           ))),
    ("SmallStep.red_proc_pres",
     "[| wwf_J_prog ?P;
         ?P \<turnstile> \<langle>?e,(?h, ?l, ?sh),?b\<rangle> \<rightarrow>
                         \<langle>?e',(?h', ?l', ?sh'),?b'\<rangle>;
         not_init ?C ?e; ?sh ?C = \<lfloor>(?sfs, Processing)\<rfloor> |]
      ==> not_init ?C ?e' &
          (EX sfs'. ?sh' ?C = \<lfloor>(sfs', Processing)\<rfloor>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_hole 14),
              template_var 12)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app
                   (template_hole 12,
                    template_app
                     (template_app (template_hole 11, template_var 11),
                      template_app
                       (template_app
                         (template_hole 10,
                          template_app
                           (template_app (template_hole 9, template_var 10),
                            template_app
                             (template_app
                               (template_hole 8, template_var 9),
                              template_var 8))),
                        template_var 7))),
                  template_app
                   (template_app (template_hole 11, template_var 6),
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_app (template_hole 9, template_var 5),
                          template_app
                           (template_app (template_hole 8, template_var 4),
                            template_var 3))),
                      template_var 2)))),
              template_app (template_hole 7, template_var 12))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 11)
            ),
        template_equation
         (template_app (template_var 8, template_var 1),
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_var 6)),
             template_app (template_hole 0, t_empty))
           ))),
    ("SmallStep.reds_proc_pres",
     "[| wwf_J_prog ?P;
         ?P \<turnstile> \<langle>?es,(?h, ?l, ?sh),
                          ?b\<rangle> [\<rightarrow>]
                         \<langle>?es',(?h', ?l', ?sh'),?b'\<rangle>;
         not_inits ?C ?es; ?sh ?C = \<lfloor>(?sfs, Processing)\<rfloor> |]
      ==> not_inits ?C ?es' &
          (EX sfs'. ?sh' ?C = \<lfloor>(sfs', Processing)\<rfloor>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_hole 14),
              template_var 12)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app
                   (template_hole 12,
                    template_app
                     (template_app (template_hole 11, template_var 11),
                      template_app
                       (template_app
                         (template_hole 10,
                          template_app
                           (template_app (template_hole 9, template_var 10),
                            template_app
                             (template_app
                               (template_hole 8, template_var 9),
                              template_var 8))),
                        template_var 7))),
                  template_app
                   (template_app (template_hole 11, template_var 6),
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_app (template_hole 9, template_var 5),
                          template_app
                           (template_app (template_hole 8, template_var 4),
                            template_var 3))),
                      template_var 2)))),
              template_app (template_hole 7, template_var 12))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 11)
            ),
        template_equation
         (template_app (template_var 8, template_var 1),
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_var 6)),
             template_app (template_hole 0, t_empty))
           ))),
    ("SmallStep.lass_val_of_red",
     "[| lass_val_of ?e = \<lfloor>?a\<rfloor>;
         ?P \<turnstile> \<langle>?e,(?h, ?l, ?sh),?b\<rangle> \<rightarrow>
                         \<langle>?e',(?h', ?l', ?sh'),?b'\<rangle> |]
      ==> ?e' = unit &
          ?h' = ?h & ?l' = ?l(fst ?a |-> snd ?a) & ?sh' = ?sh & ?b = ?b'",
     template_implication
      ([template_equation
         (template_app (template_hole 20, template_var 11),
          template_app (template_hole 19, template_var 10)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_app
                   (template_hole 17,
                    template_app
                     (template_app (template_hole 16, template_var 11),
                      template_app
                       (template_app
                         (template_hole 15,
                          template_app
                           (template_app (template_hole 14, template_var 9),
                            template_app
                             (template_app
                               (template_hole 13, template_var 8),
                              template_var 7))),
                        template_var 6))),
                  template_app
                   (template_app (template_hole 16, template_var 5),
                    template_app
                     (template_app
                       (template_hole 15,
                        template_app
                         (template_app (template_hole 14, template_var 4),
                          template_app
                           (template_app (template_hole 13, template_var 3),
                            template_var 2))),
                      template_var 1)))),
              template_app (template_hole 12, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app (template_hole 10, template_var 5),
                 template_app (template_hole 9, template_hole 8))),
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app (template_hole 7, template_var 4),
                   template_var 9)),
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app (template_hole 6, template_var 3),
                     template_app
                      (template_app
                        (template_app (template_hole 5, template_var 8),
                         template_app (template_hole 4, template_var 10)),
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 2, template_var 10))))),
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_app (template_hole 1, template_var 2),
                       template_var 7)),
                   template_app
                    (template_app (template_hole 0, template_var 6),
                     template_var 1)))))
           ))),
    ("SmallStep.converse_rtrancl_induct3",
     "[| ((?ax, ?ay, ?az), ?bx, ?by, ?bz) : ?r^*; ?P ?bx ?by ?bz;
         !!a aa b ab ac ba.
            [| ((a, aa, b), ab, ac, ba) : ?r;
               ((ab, ac, ba), ?bx, ?by, ?bz) : ?r^*; ?P ab ac ba |]
            ==> ?P a aa b |]
      ==> ?P ?ax ?ay ?az",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 7),
                      template_app
                       (template_app (template_hole 4, template_var 6),
                        template_var 5))),
                  template_app
                   (template_app (template_hole 5, template_var 4),
                    template_app
                     (template_app (template_hole 4, template_var 3),
                      template_var 2)))),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 0, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 0, template_var 7),
               template_var 6),
             template_var 5)
           ))),
    ("SmallStep.converse_rtrancl_induct_red",
     "[| ?P \<turnstile> \<langle>?e,(?h, ?l, ?sh),
                          ?b\<rangle> \<rightarrow>*
                         \<langle>?e',(?h', ?l', ?sh'),?b'\<rangle>;
         !!e h l sh b. ?R e h l sh b e h l sh b;
         !!e\<^sub>0 h\<^sub>0 l\<^sub>0 sh\<^sub>0 b\<^sub>0 e\<^sub>1
            h\<^sub>1 l\<^sub>1 sh\<^sub>1 b\<^sub>1 e' h' l' sh' b'.
            [| ?P \<turnstile> \<langle>e\<^sub>0,
                                (h\<^sub>0, l\<^sub>0, sh\<^sub>0),
                                b\<^sub>0\<rangle> \<rightarrow>
                               \<langle>e\<^sub>1,
                                (h\<^sub>1, l\<^sub>1, sh\<^sub>1),
                                b\<^sub>1\<rangle>;
               ?R e\<^sub>1 h\<^sub>1 l\<^sub>1 sh\<^sub>1 b\<^sub>1 e' h'
                l' sh' b' |]
            ==> ?R e\<^sub>0 h\<^sub>0 l\<^sub>0 sh\<^sub>0 b\<^sub>0 e' h'
                 l' sh' b' |]
      ==> ?R ?e ?h ?l ?sh ?b ?e' ?h' ?l' ?sh' ?b'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app (template_hole 10, template_var 11),
                      template_app
                       (template_app
                         (template_hole 9,
                          template_app
                           (template_app (template_hole 8, template_var 10),
                            template_app
                             (template_app
                               (template_hole 7, template_var 9),
                              template_var 8))),
                        template_var 7))),
                  template_app
                   (template_app (template_hole 10, template_var 6),
                    template_app
                     (template_app
                       (template_hole 9,
                        template_app
                         (template_app (template_hole 8, template_var 5),
                          template_app
                           (template_app (template_hole 7, template_var 4),
                            template_var 3))),
                      template_var 2)))),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)))
            ),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app (template_var 0, template_var 11),
                             template_var 10),
                           template_var 9),
                         template_var 8),
                       template_var 7),
                     template_var 6),
                   template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2)
           ))),
    ("SmallStep.blocks_induct",
     "[| !!V Vs T Ts v vs e.
            ?P Vs Ts vs e ==> ?P (V # Vs) (T # Ts) (v # vs) e;
         !!e. ?P [] [] [] e; !!vc vd a b. ?P [] (vc # vd) a b;
         !!v ve vf vd. ?P [] v (ve # vf) vd;
         !!va vb a b. ?P (va # vb) [] a b;
         !!v vd ve vb. ?P v [] (vd # ve) vb;
         !!va vc vb ve. ?P (va # vc) vb [] ve;
         !!v va vc ve. ?P v (va # vc) [] ve |]
      ==> ?P ?a0a ?a0b ?a0c ?a0d",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_var 4, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("SmallStep.red_reds_inducts",
     "[| ?P \<turnstile> \<langle>?x1a,(?x2a, ?x2b, ?x2c),
                          ?x3a\<rangle> \<rightarrow>
                         \<langle>?x4a,(?x5a, ?x5b, ?x5c),?x6a\<rangle>;
         !!h a C FDTs h' l sh.
            [| new_Addr h = \<lfloor>a\<rfloor>;
               ?P \<turnstile> C has_fields FDTs;
               h' = h(a |-> blank ?P C) |]
            ==> ?P1.0 (new C) h l sh True (addr a) h' l sh False;
         !!h C l sh.
            [| new_Addr h = None; is_class ?P C |]
            ==> ?P1.0 (new C) h l sh True (THROW OutOfMemory) h l sh False;
         !!sh C sfs h l.
            sh C = \<lfloor>(sfs, Done)\<rfloor> ==>
            ?P1.0 (new C) h l sh False (new C) h l sh True;
         !!sh C h l.
            [| \<nexists>sfs. sh C = \<lfloor>(sfs, Done)\<rfloor>;
               is_class ?P C |]
            ==> ?P1.0 (new C) h l sh False
                 (INIT C ([C],False) \<leftarrow> new C) h l sh False;
         !!e a aa b ba e' ab ac bb b' C.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P1.0 (Cast C e) a aa b ba (Cast C e') ab ac bb b';
         !!C a aa b ba. ?P1.0 (Cast C null) a aa b ba null a aa b ba;
         !!h a D fs C l sh b.
            [| h a = \<lfloor>(D, fs)\<rfloor>;
               ?P \<turnstile> D \<preceq>\<^sup>* C |]
            ==> ?P1.0 (Cast C (addr a)) h l sh b (addr a) h l sh b;
         !!h a D fs C l sh b.
            [| h a = \<lfloor>(D, fs)\<rfloor>; (D, C) ~: (subcls1 ?P)^* |]
            ==> ?P1.0 (Cast C (addr a)) h l sh b (THROW ClassCast) h l sh b;
         !!e a aa b ba e' ab ac bb b' bop e\<^sub>2.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P1.0 (e \<guillemotleft>bop\<guillemotright> e\<^sub>2) a
                 aa b ba (e' \<guillemotleft>bop\<guillemotright> e\<^sub>2)
                 ab ac bb b';
         !!e a aa b ba e' ab ac bb b' v\<^sub>1 bop.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P1.0 (Val v\<^sub>1 \<guillemotleft>bop\<guillemotright> e)
                 a aa b ba
                 (Val v\<^sub>1 \<guillemotleft>bop\<guillemotright> e') ab
                 ac bb b';
         !!bop v\<^sub>1 v\<^sub>2 v a aa b ba.
            binop (bop, v\<^sub>1, v\<^sub>2) = \<lfloor>v\<rfloor> ==>
            ?P1.0
             (Val v\<^sub>1 \<guillemotleft>bop\<guillemotright> Val
                            v\<^sub>2)
             a aa b ba (Val v) a aa b ba;
         !!l V v h sh b.
            l V = \<lfloor>v\<rfloor> ==>
            ?P1.0 (Var V) h l sh b (Val v) h l sh b;
         !!e a aa b ba e' ab ac bb b' V.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P1.0 (V:=e) a aa b ba (V:=e') ab ac bb b';
         !!V v h l sh b. ?P1.0 (V:=Val v) h l sh b unit h (l(V |-> v)) sh b;
         !!e a aa b ba e' ab ac bb b' F D.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P1.0 (e\<bullet>F{D}) a aa b ba (e'\<bullet>F{D}) ab ac bb
                 b';
         !!h a C fs F D v t l sh b.
            [| h a = \<lfloor>(C, fs)\<rfloor>;
               fs (F, D) = \<lfloor>v\<rfloor>;
               ?P \<turnstile> C has F,NonStatic:t in D |]
            ==> ?P1.0 (addr a\<bullet>F{D}) h l sh b (Val v) h l sh b;
         !!F D a aa b ba.
            ?P1.0 (null\<bullet>F{D}) a aa b ba (THROW NullPointer) a aa b
             ba;
         !!h a C fs F D l sh b.
            [| h a = \<lfloor>(C, fs)\<rfloor>;
               \<nexists>b t. ?P \<turnstile> C has F,b:t in D |]
            ==> ?P1.0 (addr a\<bullet>F{D}) h l sh b
                 (THROW NoSuchFieldError) h l sh b;
         !!h a C fs F t D l sh b.
            [| h a = \<lfloor>(C, fs)\<rfloor>;
               ?P \<turnstile> C has F,Static:t in D |]
            ==> ?P1.0 (addr a\<bullet>F{D}) h l sh b
                 (THROW IncompatibleClassChangeError) h l sh b;
         !!C F t D sh sfs i v h l.
            [| ?P \<turnstile> C has F,Static:t in D;
               sh D = \<lfloor>(sfs, i)\<rfloor>;
               sfs F = \<lfloor>v\<rfloor> |]
            ==> ?P1.0 (C\<bullet>\<^sub>sF{D}) h l sh True (Val v) h l sh
                 False;
         !!C F t D sh sfs h l.
            [| ?P \<turnstile> C has F,Static:t in D;
               sh D = \<lfloor>(sfs, Done)\<rfloor> |]
            ==> ?P1.0 (C\<bullet>\<^sub>sF{D}) h l sh False
                 (C\<bullet>\<^sub>sF{D}) h l sh True;
         !!C F t D sh h l.
            [| ?P \<turnstile> C has F,Static:t in D;
               \<nexists>sfs. sh D = \<lfloor>(sfs, Done)\<rfloor> |]
            ==> ?P1.0 (C\<bullet>\<^sub>sF{D}) h l sh False
                 (INIT D ([D],False) \<leftarrow> C\<bullet>\<^sub>sF{D}) h
                 l sh False;
         !!C F D h l sh b.
            \<nexists>b t. ?P \<turnstile> C has F,b:t in D ==>
            ?P1.0 (C\<bullet>\<^sub>sF{D}) h l sh b (THROW NoSuchFieldError)
             h l sh False;
         !!C F t D h l sh b.
            ?P \<turnstile> C has F,NonStatic:t in D ==>
            ?P1.0 (C\<bullet>\<^sub>sF{D}) h l sh b
             (THROW IncompatibleClassChangeError) h l sh False;
         !!e a aa b ba e' ab ac bb b' F D e\<^sub>2.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P1.0 (e\<bullet>F{D} := e\<^sub>2) a aa b ba
                 (e'\<bullet>F{D} := e\<^sub>2) ab ac bb b';
         !!e a aa b ba e' ab ac bb b' v F D.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P1.0 (Val v\<bullet>F{D} := e) a aa b ba
                 (Val v\<bullet>F{D} := e') ab ac bb b';
         !!C F t D h a fs v l sh b.
            [| ?P \<turnstile> C has F,NonStatic:t in D;
               h a = \<lfloor>(C, fs)\<rfloor> |]
            ==> ?P1.0 (addr a\<bullet>F{D} := Val v) h l sh b unit
                 (h(a |-> (C, fs((F, D) |-> v)))) l sh b;
         !!F D v a aa b ba.
            ?P1.0 (null\<bullet>F{D} := Val v) a aa b ba (THROW NullPointer)
             a aa b ba;
         !!h a C fs F D v l sh b.
            [| h a = \<lfloor>(C, fs)\<rfloor>;
               \<nexists>b t. ?P \<turnstile> C has F,b:t in D |]
            ==> ?P1.0 (addr a\<bullet>F{D} := Val v) h l sh b
                 (THROW NoSuchFieldError) h l sh b;
         !!h a C fs F t D v l sh b.
            [| h a = \<lfloor>(C, fs)\<rfloor>;
               ?P \<turnstile> C has F,Static:t in D |]
            ==> ?P1.0 (addr a\<bullet>F{D} := Val v) h l sh b
                 (THROW IncompatibleClassChangeError) h l sh b;
         !!e a aa b ba e' ab ac bb b' C F D.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P1.0 (C\<bullet>\<^sub>sF{D} := e) a aa b ba
                 (C\<bullet>\<^sub>sF{D} := e') ab ac bb b';
         !!C F t D sh sfs i sfs' v sh' h l.
            [| ?P \<turnstile> C has F,Static:t in D;
               sh D = \<lfloor>(sfs, i)\<rfloor>; sfs' = sfs(F |-> v);
               sh' = sh(D |-> (sfs', i)) |]
            ==> ?P1.0 (C\<bullet>\<^sub>sF{D} := Val v) h l sh True unit h l
                 sh' False;
         !!C F t D sh sfs v h l.
            [| ?P \<turnstile> C has F,Static:t in D;
               sh D = \<lfloor>(sfs, Done)\<rfloor> |]
            ==> ?P1.0 (C\<bullet>\<^sub>sF{D} := Val v) h l sh False
                 (C\<bullet>\<^sub>sF{D} := Val v) h l sh True;
         !!C F t D sh v h l.
            [| ?P \<turnstile> C has F,Static:t in D;
               \<nexists>sfs. sh D = \<lfloor>(sfs, Done)\<rfloor> |]
            ==> ?P1.0 (C\<bullet>\<^sub>sF{D} := Val v) h l sh False
                 (INIT D ([D],False) \<leftarrow> C\<bullet>\<^sub>sF{D} := Val
 v)
                 h l sh False;
         !!C F D v a aa b ba.
            \<nexists>b t. ?P \<turnstile> C has F,b:t in D ==>
            ?P1.0 (C\<bullet>\<^sub>sF{D} := Val v) a aa b ba
             (THROW NoSuchFieldError) a aa b False;
         !!C F t D v a aa b ba.
            ?P \<turnstile> C has F,NonStatic:t in D ==>
            ?P1.0 (C\<bullet>\<^sub>sF{D} := Val v) a aa b ba
             (THROW IncompatibleClassChangeError) a aa b False;
         !!e a aa b ba e' ab ac bb b' M es.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P1.0 (e\<bullet>M(es)) a aa b ba (e'\<bullet>M(es)) ab ac
                 bb b';
         !!es a aa b ba es' ab ac bb b' v M.
            [| ?P \<turnstile> \<langle>es,(a, aa, b),
                                ba\<rangle> [\<rightarrow>]
                               \<langle>es',(ab, ac, bb),b'\<rangle>;
               ?P2.0 es a aa b ba es' ab ac bb b' |]
            ==> ?P1.0 (Val v\<bullet>M(es)) a aa b ba (Val v\<bullet>M(es'))
                 ab ac bb b';
         !!h a C fs M Ts T pns body D vs l sh b.
            [| h a = \<lfloor>(C, fs)\<rfloor>;
               ?P \<turnstile> C sees M, NonStatic :  Ts\<rightarrow>T = (pns,
                                    body) in D;
               length vs = length pns; length Ts = length pns |]
            ==> ?P1.0 (addr a\<bullet>M(map Val vs)) h l sh b
                 (blocks (this # pns, Class D # Ts, Addr a # vs, body)) h l
                 sh b;
         !!M vs a aa b ba.
            ?P1.0 (null\<bullet>M(map Val vs)) a aa b ba (THROW NullPointer)
             a aa b ba;
         !!h a C fs M vs l sh b.
            [| h a = \<lfloor>(C, fs)\<rfloor>;
               \<nexists>b Ts T m D.
                  ?P \<turnstile> C sees M, b :  Ts\<rightarrow>T = m in D |]
            ==> ?P1.0 (addr a\<bullet>M(map Val vs)) h l sh b
                 (THROW NoSuchMethodError) h l sh b;
         !!h a C fs M Ts T aa b D vs l sh ba.
            [| h a = \<lfloor>(C, fs)\<rfloor>;
               ?P \<turnstile> C sees M, Static :  Ts\<rightarrow>T = (aa,
                                 b) in D |]
            ==> ?P1.0 (addr a\<bullet>M(map Val vs)) h l sh ba
                 (THROW IncompatibleClassChangeError) h l sh ba;
         !!es a aa b ba es' ab ac bb b' C M.
            [| ?P \<turnstile> \<langle>es,(a, aa, b),
                                ba\<rangle> [\<rightarrow>]
                               \<langle>es',(ab, ac, bb),b'\<rangle>;
               ?P2.0 es a aa b ba es' ab ac bb b' |]
            ==> ?P1.0 (C\<bullet>\<^sub>sM(es)) a aa b ba
                 (C\<bullet>\<^sub>sM(es')) ab ac bb b';
         !!C M Ts T pns body D vs a aa b.
            [| ?P \<turnstile> C sees M, Static :  Ts\<rightarrow>T = (pns,
                                 body) in D;
               length vs = length pns; length Ts = length pns |]
            ==> ?P1.0 (C\<bullet>\<^sub>sM(map Val vs)) a aa b True
                 (blocks (pns, Ts, vs, body)) a aa b False;
         !!C M Ts T pns body D sh sfs vs h l.
            [| ?P \<turnstile> C sees M, Static :  Ts\<rightarrow>T = (pns,
                                 body) in D;
               sh D = \<lfloor>(sfs, Done)\<rfloor> |
               M = clinit & sh D = \<lfloor>(sfs, Processing)\<rfloor> |]
            ==> ?P1.0 (C\<bullet>\<^sub>sM(map Val vs)) h l sh False
                 (C\<bullet>\<^sub>sM(map Val vs)) h l sh True;
         !!C M Ts T pns body D sh vs h l.
            [| ?P \<turnstile> C sees M, Static :  Ts\<rightarrow>T = (pns,
                                 body) in D;
               \<nexists>sfs. sh D = \<lfloor>(sfs, Done)\<rfloor>;
               M ~= clinit |]
            ==> ?P1.0 (C\<bullet>\<^sub>sM(map Val vs)) h l sh False
                 (INIT D ([D],False) \<leftarrow> C\<bullet>\<^sub>sM(map
                                 Val vs))
                 h l sh False;
         !!C M vs a aa b ba.
            \<nexists>b Ts T m. Ex (Method ?P C M b Ts T m) ==>
            ?P1.0 (C\<bullet>\<^sub>sM(map Val vs)) a aa b ba
             (THROW NoSuchMethodError) a aa b False;
         !!C M Ts T a b D vs aa ab ba bb.
            ?P \<turnstile> C sees M, NonStatic :  Ts\<rightarrow>T = (a,
                                 b) in D ==>
            ?P1.0 (C\<bullet>\<^sub>sM(map Val vs)) aa ab ba bb
             (THROW IncompatibleClassChangeError) aa ab ba False;
         !!e h l V sh b e' h' l' sh' b' T.
            [| ?P \<turnstile> \<langle>e,(h, l(V := None), sh),
                                b\<rangle> \<rightarrow>
                               \<langle>e',(h', l', sh'),b'\<rangle>;
               ?P1.0 e h (l(V := None)) sh b e' h' l' sh' b'; l' V = None;
               ~ assigned V e |]
            ==> ?P1.0 {V:T; e} h l sh b {V:T; e'} h' (l'(V := l V)) sh' b';
         !!e h l V sh b e' h' l' sh' b' v T.
            [| ?P \<turnstile> \<langle>e,(h, l(V := None), sh),
                                b\<rangle> \<rightarrow>
                               \<langle>e',(h', l', sh'),b'\<rangle>;
               ?P1.0 e h (l(V := None)) sh b e' h' l' sh' b';
               l' V = \<lfloor>v\<rfloor>; ~ assigned V e |]
            ==> ?P1.0 {V:T; e} h l sh b {V:T; V:=Val v;; e'} h'
                 (l'(V := l V)) sh' b';
         !!e h l V v sh b e' h' l' sh' b' v' T.
            [| ?P \<turnstile> \<langle>e,(h, l(V |-> v), sh),
                                b\<rangle> \<rightarrow>
                               \<langle>e',(h', l', sh'),b'\<rangle>;
               ?P1.0 e h (l(V |-> v)) sh b e' h' l' sh' b';
               l' V = \<lfloor>v'\<rfloor> |]
            ==> ?P1.0 {V:T; V:=Val v;; e} h l sh b {V:T; V:=Val v';; e'} h'
                 (l'(V := l V)) sh' b';
         !!V T u a aa b ba. ?P1.0 {V:T; Val u} a aa b ba (Val u) a aa b ba;
         !!V T v u a aa b ba.
            ?P1.0 {V:T; V:=Val v;; Val u} a aa b ba (Val u) a aa b ba;
         !!e a aa b ba e' ab ac bb b' e\<^sub>2.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P1.0 (e;; e\<^sub>2) a aa b ba (e';; e\<^sub>2) ab ac bb
                 b';
         !!v e\<^sub>2 a aa b ba.
            ?P1.0 (Val v;; e\<^sub>2) a aa b ba e\<^sub>2 a aa b ba;
         !!e a aa b ba e' ab ac bb b' e\<^sub>1 e\<^sub>2.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P1.0 (if (e) e\<^sub>1 else e\<^sub>2) a aa b ba
                 (if (e') e\<^sub>1 else e\<^sub>2) ab ac bb b';
         !!e\<^sub>1 e\<^sub>2 a aa b ba.
            ?P1.0 (if (true) e\<^sub>1 else e\<^sub>2) a aa b ba e\<^sub>1 a
             aa b ba;
         !!e\<^sub>1 e\<^sub>2 a aa b ba.
            ?P1.0 (if (false) e\<^sub>1 else e\<^sub>2) a aa b ba e\<^sub>2
             a aa b ba;
         !!b c a aa ba b'.
            ?P1.0 (while (b) c) a aa ba b'
             (if (b) (c;; while (b) c) else unit) a aa ba b';
         !!e a aa b ba e' ab ac bb b'.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P1.0 (throw e) a aa b ba (throw e') ab ac bb b';
         !!a aa b ba.
            ?P1.0 (throw null) a aa b ba (THROW NullPointer) a aa b ba;
         !!e a aa b ba e' ab ac bb b' C V e\<^sub>2.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P1.0 (try e catch(C V) e\<^sub>2) a aa b ba
                 (try e' catch(C V) e\<^sub>2) ab ac bb b';
         !!v C V e\<^sub>2 a aa b ba.
            ?P1.0 (try Val v catch(C V) e\<^sub>2) a aa b ba (Val v) a aa b
             ba;
         !!a aa b ab D fs C V e\<^sub>2 ba.
            [| hp (a, aa, b) ab = \<lfloor>(D, fs)\<rfloor>;
               ?P \<turnstile> D \<preceq>\<^sup>* C |]
            ==> ?P1.0 (try Throw ab catch(C V) e\<^sub>2) a aa b ba
                 {V:Class C; V:=addr ab;; e\<^sub>2} a aa b ba;
         !!a aa b ab D fs C V e\<^sub>2 ba.
            [| hp (a, aa, b) ab = \<lfloor>(D, fs)\<rfloor>;
               (D, C) ~: (subcls1 ?P)^* |]
            ==> ?P1.0 (try Throw ab catch(C V) e\<^sub>2) a aa b ba
                 (Throw ab) a aa b ba;
         !!e a aa b ba e' ab ac bb b' es.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P2.0 (e # es) a aa b ba (e' # es) ab ac bb b';
         !!es a aa b ba es' ab ac bb b' v.
            [| ?P \<turnstile> \<langle>es,(a, aa, b),
                                ba\<rangle> [\<rightarrow>]
                               \<langle>es',(ab, ac, bb),b'\<rangle>;
               ?P2.0 es a aa b ba es' ab ac bb b' |]
            ==> ?P2.0 (Val v # es) a aa b ba (Val v # es') ab ac bb b';
         !!e C b a aa ba b'.
            ~ sub_RI e ==>
            ?P1.0 (INIT C ([],b) \<leftarrow> e) a aa ba b' e a aa ba
             (icheck ?P C e);
         !!sh C C' Cs e h l b.
            sh C = None ==>
            ?P1.0 (INIT C' (C # Cs,False) \<leftarrow> e) h l sh b
             (INIT C' (C # Cs,False) \<leftarrow> e) h l
             (sh(C |-> (sblank ?P C, Prepared))) b;
         !!sh C sfs C' Cs e h l b.
            sh C = \<lfloor>(sfs, Done)\<rfloor> ==>
            ?P1.0 (INIT C' (C # Cs,False) \<leftarrow> e) h l sh b
             (INIT C' (Cs,True) \<leftarrow> e) h l sh b;
         !!sh C sfs C' Cs e h l b.
            sh C = \<lfloor>(sfs, Processing)\<rfloor> ==>
            ?P1.0 (INIT C' (C # Cs,False) \<leftarrow> e) h l sh b
             (INIT C' (Cs,True) \<leftarrow> e) h l sh b;
         !!sh C sfs C' Cs e h l b.
            sh C = \<lfloor>(sfs, Error)\<rfloor> ==>
            ?P1.0 (INIT C' (C # Cs,False) \<leftarrow> e) h l sh b
             (RI (C,THROW NoClassDefFoundError) ; Cs \<leftarrow> e) h l sh
             b;
         !!sh C sfs sh' C' Cs e h l b.
            [| sh C = \<lfloor>(sfs, Prepared)\<rfloor>; C = Object;
               sh' = sh(C |-> (sfs, Processing)) |]
            ==> ?P1.0 (INIT C' (C # Cs,False) \<leftarrow> e) h l sh b
                 (INIT C' (C # Cs,True) \<leftarrow> e) h l sh' b;
         !!sh C sfs D a b sh' C' Cs e h l ba.
            [| sh C = \<lfloor>(sfs, Prepared)\<rfloor>; C ~= Object;
               class ?P C = \<lfloor>(D, a, b)\<rfloor>;
               sh' = sh(C |-> (sfs, Processing)) |]
            ==> ?P1.0 (INIT C' (C # Cs,False) \<leftarrow> e) h l sh ba
                 (INIT C' (D # C # Cs,False) \<leftarrow> e) h l sh' ba;
         !!C' C Cs e h l sh b.
            ?P1.0 (INIT C' (C # Cs,True) \<leftarrow> e) h l sh b
             (RI (C,C\<bullet>\<^sub>sclinit([])) ; Cs \<leftarrow> e) h l
             sh b;
         !!e a aa b ba e' ab ac bb b' C Cs e\<^sub>0.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P1.0 (RI (C,e) ; Cs \<leftarrow> e\<^sub>0) a aa b ba
                 (RI (C,e') ; Cs \<leftarrow> e\<^sub>0) ab ac bb b';
         !!sh C sfs i sh' C' Cs v e h l b.
            [| sh C = \<lfloor>(sfs, i)\<rfloor>;
               sh' = sh(C |-> (sfs, Done)); C' = last (C # Cs) |]
            ==> ?P1.0 (RI (C,Val v) ; Cs \<leftarrow> e) h l sh b
                 (INIT C' (Cs,True) \<leftarrow> e) h l sh' b;
         !!C e a aa b ba.
            ?P1.0 (Cast C (throw e)) a aa b ba (throw e) a aa b ba;
         !!e bop e\<^sub>2 a aa b ba.
            ?P1.0 (throw e \<guillemotleft>bop\<guillemotright> e\<^sub>2) a
             aa b ba (throw e) a aa b ba;
         !!v\<^sub>1 bop e a aa b ba.
            ?P1.0
             (Val v\<^sub>1 \<guillemotleft>bop\<guillemotright> throw e) a
             aa b ba (throw e) a aa b ba;
         !!V e a aa b ba. ?P1.0 (V:=throw e) a aa b ba (throw e) a aa b ba;
         !!e F D a aa b ba.
            ?P1.0 (throw e\<bullet>F{D}) a aa b ba (throw e) a aa b ba;
         !!e F D e\<^sub>2 a aa b ba.
            ?P1.0 (throw e\<bullet>F{D} := e\<^sub>2) a aa b ba (throw e) a
             aa b ba;
         !!v F D e a aa b ba.
            ?P1.0 (Val v\<bullet>F{D} := throw e) a aa b ba (throw e) a aa b
             ba;
         !!C F D e a aa b ba.
            ?P1.0 (C\<bullet>\<^sub>sF{D} := throw e) a aa b ba (throw e) a
             aa b ba;
         !!e M es a aa b ba.
            ?P1.0 (throw e\<bullet>M(es)) a aa b ba (throw e) a aa b ba;
         !!es vs e es' v M a aa b ba.
            es = map Val vs @ throw e # es' ==>
            ?P1.0 (Val v\<bullet>M(es)) a aa b ba (throw e) a aa b ba;
         !!es vs e es' C M a aa b ba.
            es = map Val vs @ throw e # es' ==>
            ?P1.0 (C\<bullet>\<^sub>sM(es)) a aa b ba (throw e) a aa b ba;
         !!V T a aa ab b ba.
            ?P1.0 {V:T; Throw a} aa ab b ba (Throw a) aa ab b ba;
         !!V T v a aa ab b ba.
            ?P1.0 {V:T; V:=Val v;; Throw a} aa ab b ba (Throw a) aa ab b ba;
         !!e e\<^sub>2 a aa b ba.
            ?P1.0 (throw e;; e\<^sub>2) a aa b ba (throw e) a aa b ba;
         !!e e\<^sub>1 e\<^sub>2 a aa b ba.
            ?P1.0 (if (throw e) e\<^sub>1 else e\<^sub>2) a aa b ba
             (throw e) a aa b ba;
         !!e a aa b ba.
            ?P1.0 (throw (throw e)) a aa b ba (throw e) a aa b ba;
         !!sh C sfs i sh' a D Cs e h l b.
            [| sh C = \<lfloor>(sfs, i)\<rfloor>;
               sh' = sh(C |-> (sfs, Error)) |]
            ==> ?P1.0 (RI (C,Throw a) ; D # Cs \<leftarrow> e) h l sh b
                 (RI (D,Throw a) ; Cs \<leftarrow> e) h l sh' b;
         !!sh C sfs i sh' a e h l b.
            [| sh C = \<lfloor>(sfs, i)\<rfloor>;
               sh' = sh(C |-> (sfs, Error)) |]
            ==> ?P1.0 (RI (C,Throw a) ; [] \<leftarrow> e) h l sh b
                 (Throw a) h l sh' b |]
      ==> ?P1.0 ?x1a ?x2a ?x2b ?x2c ?x3a ?x4a ?x5a ?x5b ?x5c ?x6a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 145,
                template_app
                 (template_app
                   (template_hole 144,
                    template_app
                     (template_app (template_hole 143, template_var 12),
                      template_app
                       (template_app
                         (template_hole 142,
                          template_app
                           (template_app
                             (template_hole 141, template_var 11),
                            template_app
                             (template_app
                               (template_hole 140, template_var 10),
                              template_var 9))),
                        template_var 8))),
                  template_app
                   (template_app (template_hole 143, template_var 7),
                    template_app
                     (template_app
                       (template_hole 142,
                        template_app
                         (template_app (template_hole 141, template_var 6),
                          template_app
                           (template_app
                             (template_hole 140, template_var 5),
                            template_var 4))),
                      template_var 3)))),
              template_app (template_hole 139, template_var 2))
            ),
        template_predicate (template_app (template_hole 138, t_empty)),
        template_predicate (template_app (template_hole 138, t_empty)),
        template_predicate (template_app (template_hole 133, t_empty)),
        template_predicate (template_app (template_hole 133, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 138, t_empty)),
        template_predicate (template_app (template_hole 138, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 93, t_empty)),
        template_predicate (template_app (template_hole 134, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 138, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 138, t_empty)),
        template_predicate (template_app (template_hole 138, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 138, t_empty)),
        template_predicate (template_app (template_hole 138, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 63, t_empty)),
        template_predicate (template_app (template_hole 138, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 138, t_empty)),
        template_predicate (template_app (template_hole 138, t_empty)),
        template_predicate (template_app (template_hole 63, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 91, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 138, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 91, t_empty)),
        template_predicate (template_app (template_hole 138, t_empty)),
        template_predicate (template_app (template_hole 138, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 63, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 133, t_empty)),
        template_predicate (template_app (template_hole 133, t_empty)),
        template_predicate (template_app (template_hole 133, t_empty)),
        template_predicate (template_app (template_hole 133, t_empty)),
        template_predicate (template_app (template_hole 133, t_empty)),
        template_predicate (template_app (template_hole 133, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 133, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 91, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 91, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 63, t_empty)),
        template_predicate (template_app (template_hole 63, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 133, t_empty)),
        template_predicate (template_app (template_hole 133, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app (template_var 1, template_var 12),
                             template_var 11),
                           template_var 10),
                         template_var 9),
                       template_var 8),
                     template_var 7),
                   template_var 6),
                 template_var 5),
               template_var 4),
             template_var 3)
           ))),
    ("SmallStep.red_reds_inducts",
     "[| ?P \<turnstile> \<langle>?x7a,(?x8a, ?x8b, ?x8c),
                          ?x9a\<rangle> [\<rightarrow>]
                         \<langle>?x10a,(?x11a, ?x11b, ?x11c),
                          ?x12a\<rangle>;
         !!h a C FDTs h' l sh.
            [| new_Addr h = \<lfloor>a\<rfloor>;
               ?P \<turnstile> C has_fields FDTs;
               h' = h(a |-> blank ?P C) |]
            ==> ?P1.0 (new C) h l sh True (addr a) h' l sh False;
         !!h C l sh.
            [| new_Addr h = None; is_class ?P C |]
            ==> ?P1.0 (new C) h l sh True (THROW OutOfMemory) h l sh False;
         !!sh C sfs h l.
            sh C = \<lfloor>(sfs, Done)\<rfloor> ==>
            ?P1.0 (new C) h l sh False (new C) h l sh True;
         !!sh C h l.
            [| \<nexists>sfs. sh C = \<lfloor>(sfs, Done)\<rfloor>;
               is_class ?P C |]
            ==> ?P1.0 (new C) h l sh False
                 (INIT C ([C],False) \<leftarrow> new C) h l sh False;
         !!e a aa b ba e' ab ac bb b' C.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P1.0 (Cast C e) a aa b ba (Cast C e') ab ac bb b';
         !!C a aa b ba. ?P1.0 (Cast C null) a aa b ba null a aa b ba;
         !!h a D fs C l sh b.
            [| h a = \<lfloor>(D, fs)\<rfloor>;
               ?P \<turnstile> D \<preceq>\<^sup>* C |]
            ==> ?P1.0 (Cast C (addr a)) h l sh b (addr a) h l sh b;
         !!h a D fs C l sh b.
            [| h a = \<lfloor>(D, fs)\<rfloor>; (D, C) ~: (subcls1 ?P)^* |]
            ==> ?P1.0 (Cast C (addr a)) h l sh b (THROW ClassCast) h l sh b;
         !!e a aa b ba e' ab ac bb b' bop e\<^sub>2.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P1.0 (e \<guillemotleft>bop\<guillemotright> e\<^sub>2) a
                 aa b ba (e' \<guillemotleft>bop\<guillemotright> e\<^sub>2)
                 ab ac bb b';
         !!e a aa b ba e' ab ac bb b' v\<^sub>1 bop.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P1.0 (Val v\<^sub>1 \<guillemotleft>bop\<guillemotright> e)
                 a aa b ba
                 (Val v\<^sub>1 \<guillemotleft>bop\<guillemotright> e') ab
                 ac bb b';
         !!bop v\<^sub>1 v\<^sub>2 v a aa b ba.
            binop (bop, v\<^sub>1, v\<^sub>2) = \<lfloor>v\<rfloor> ==>
            ?P1.0
             (Val v\<^sub>1 \<guillemotleft>bop\<guillemotright> Val
                            v\<^sub>2)
             a aa b ba (Val v) a aa b ba;
         !!l V v h sh b.
            l V = \<lfloor>v\<rfloor> ==>
            ?P1.0 (Var V) h l sh b (Val v) h l sh b;
         !!e a aa b ba e' ab ac bb b' V.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P1.0 (V:=e) a aa b ba (V:=e') ab ac bb b';
         !!V v h l sh b. ?P1.0 (V:=Val v) h l sh b unit h (l(V |-> v)) sh b;
         !!e a aa b ba e' ab ac bb b' F D.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P1.0 (e\<bullet>F{D}) a aa b ba (e'\<bullet>F{D}) ab ac bb
                 b';
         !!h a C fs F D v t l sh b.
            [| h a = \<lfloor>(C, fs)\<rfloor>;
               fs (F, D) = \<lfloor>v\<rfloor>;
               ?P \<turnstile> C has F,NonStatic:t in D |]
            ==> ?P1.0 (addr a\<bullet>F{D}) h l sh b (Val v) h l sh b;
         !!F D a aa b ba.
            ?P1.0 (null\<bullet>F{D}) a aa b ba (THROW NullPointer) a aa b
             ba;
         !!h a C fs F D l sh b.
            [| h a = \<lfloor>(C, fs)\<rfloor>;
               \<nexists>b t. ?P \<turnstile> C has F,b:t in D |]
            ==> ?P1.0 (addr a\<bullet>F{D}) h l sh b
                 (THROW NoSuchFieldError) h l sh b;
         !!h a C fs F t D l sh b.
            [| h a = \<lfloor>(C, fs)\<rfloor>;
               ?P \<turnstile> C has F,Static:t in D |]
            ==> ?P1.0 (addr a\<bullet>F{D}) h l sh b
                 (THROW IncompatibleClassChangeError) h l sh b;
         !!C F t D sh sfs i v h l.
            [| ?P \<turnstile> C has F,Static:t in D;
               sh D = \<lfloor>(sfs, i)\<rfloor>;
               sfs F = \<lfloor>v\<rfloor> |]
            ==> ?P1.0 (C\<bullet>\<^sub>sF{D}) h l sh True (Val v) h l sh
                 False;
         !!C F t D sh sfs h l.
            [| ?P \<turnstile> C has F,Static:t in D;
               sh D = \<lfloor>(sfs, Done)\<rfloor> |]
            ==> ?P1.0 (C\<bullet>\<^sub>sF{D}) h l sh False
                 (C\<bullet>\<^sub>sF{D}) h l sh True;
         !!C F t D sh h l.
            [| ?P \<turnstile> C has F,Static:t in D;
               \<nexists>sfs. sh D = \<lfloor>(sfs, Done)\<rfloor> |]
            ==> ?P1.0 (C\<bullet>\<^sub>sF{D}) h l sh False
                 (INIT D ([D],False) \<leftarrow> C\<bullet>\<^sub>sF{D}) h
                 l sh False;
         !!C F D h l sh b.
            \<nexists>b t. ?P \<turnstile> C has F,b:t in D ==>
            ?P1.0 (C\<bullet>\<^sub>sF{D}) h l sh b (THROW NoSuchFieldError)
             h l sh False;
         !!C F t D h l sh b.
            ?P \<turnstile> C has F,NonStatic:t in D ==>
            ?P1.0 (C\<bullet>\<^sub>sF{D}) h l sh b
             (THROW IncompatibleClassChangeError) h l sh False;
         !!e a aa b ba e' ab ac bb b' F D e\<^sub>2.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P1.0 (e\<bullet>F{D} := e\<^sub>2) a aa b ba
                 (e'\<bullet>F{D} := e\<^sub>2) ab ac bb b';
         !!e a aa b ba e' ab ac bb b' v F D.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P1.0 (Val v\<bullet>F{D} := e) a aa b ba
                 (Val v\<bullet>F{D} := e') ab ac bb b';
         !!C F t D h a fs v l sh b.
            [| ?P \<turnstile> C has F,NonStatic:t in D;
               h a = \<lfloor>(C, fs)\<rfloor> |]
            ==> ?P1.0 (addr a\<bullet>F{D} := Val v) h l sh b unit
                 (h(a |-> (C, fs((F, D) |-> v)))) l sh b;
         !!F D v a aa b ba.
            ?P1.0 (null\<bullet>F{D} := Val v) a aa b ba (THROW NullPointer)
             a aa b ba;
         !!h a C fs F D v l sh b.
            [| h a = \<lfloor>(C, fs)\<rfloor>;
               \<nexists>b t. ?P \<turnstile> C has F,b:t in D |]
            ==> ?P1.0 (addr a\<bullet>F{D} := Val v) h l sh b
                 (THROW NoSuchFieldError) h l sh b;
         !!h a C fs F t D v l sh b.
            [| h a = \<lfloor>(C, fs)\<rfloor>;
               ?P \<turnstile> C has F,Static:t in D |]
            ==> ?P1.0 (addr a\<bullet>F{D} := Val v) h l sh b
                 (THROW IncompatibleClassChangeError) h l sh b;
         !!e a aa b ba e' ab ac bb b' C F D.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P1.0 (C\<bullet>\<^sub>sF{D} := e) a aa b ba
                 (C\<bullet>\<^sub>sF{D} := e') ab ac bb b';
         !!C F t D sh sfs i sfs' v sh' h l.
            [| ?P \<turnstile> C has F,Static:t in D;
               sh D = \<lfloor>(sfs, i)\<rfloor>; sfs' = sfs(F |-> v);
               sh' = sh(D |-> (sfs', i)) |]
            ==> ?P1.0 (C\<bullet>\<^sub>sF{D} := Val v) h l sh True unit h l
                 sh' False;
         !!C F t D sh sfs v h l.
            [| ?P \<turnstile> C has F,Static:t in D;
               sh D = \<lfloor>(sfs, Done)\<rfloor> |]
            ==> ?P1.0 (C\<bullet>\<^sub>sF{D} := Val v) h l sh False
                 (C\<bullet>\<^sub>sF{D} := Val v) h l sh True;
         !!C F t D sh v h l.
            [| ?P \<turnstile> C has F,Static:t in D;
               \<nexists>sfs. sh D = \<lfloor>(sfs, Done)\<rfloor> |]
            ==> ?P1.0 (C\<bullet>\<^sub>sF{D} := Val v) h l sh False
                 (INIT D ([D],False) \<leftarrow> C\<bullet>\<^sub>sF{D} := Val
 v)
                 h l sh False;
         !!C F D v a aa b ba.
            \<nexists>b t. ?P \<turnstile> C has F,b:t in D ==>
            ?P1.0 (C\<bullet>\<^sub>sF{D} := Val v) a aa b ba
             (THROW NoSuchFieldError) a aa b False;
         !!C F t D v a aa b ba.
            ?P \<turnstile> C has F,NonStatic:t in D ==>
            ?P1.0 (C\<bullet>\<^sub>sF{D} := Val v) a aa b ba
             (THROW IncompatibleClassChangeError) a aa b False;
         !!e a aa b ba e' ab ac bb b' M es.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P1.0 (e\<bullet>M(es)) a aa b ba (e'\<bullet>M(es)) ab ac
                 bb b';
         !!es a aa b ba es' ab ac bb b' v M.
            [| ?P \<turnstile> \<langle>es,(a, aa, b),
                                ba\<rangle> [\<rightarrow>]
                               \<langle>es',(ab, ac, bb),b'\<rangle>;
               ?P2.0 es a aa b ba es' ab ac bb b' |]
            ==> ?P1.0 (Val v\<bullet>M(es)) a aa b ba (Val v\<bullet>M(es'))
                 ab ac bb b';
         !!h a C fs M Ts T pns body D vs l sh b.
            [| h a = \<lfloor>(C, fs)\<rfloor>;
               ?P \<turnstile> C sees M, NonStatic :  Ts\<rightarrow>T = (pns,
                                    body) in D;
               length vs = length pns; length Ts = length pns |]
            ==> ?P1.0 (addr a\<bullet>M(map Val vs)) h l sh b
                 (blocks (this # pns, Class D # Ts, Addr a # vs, body)) h l
                 sh b;
         !!M vs a aa b ba.
            ?P1.0 (null\<bullet>M(map Val vs)) a aa b ba (THROW NullPointer)
             a aa b ba;
         !!h a C fs M vs l sh b.
            [| h a = \<lfloor>(C, fs)\<rfloor>;
               \<nexists>b Ts T m D.
                  ?P \<turnstile> C sees M, b :  Ts\<rightarrow>T = m in D |]
            ==> ?P1.0 (addr a\<bullet>M(map Val vs)) h l sh b
                 (THROW NoSuchMethodError) h l sh b;
         !!h a C fs M Ts T aa b D vs l sh ba.
            [| h a = \<lfloor>(C, fs)\<rfloor>;
               ?P \<turnstile> C sees M, Static :  Ts\<rightarrow>T = (aa,
                                 b) in D |]
            ==> ?P1.0 (addr a\<bullet>M(map Val vs)) h l sh ba
                 (THROW IncompatibleClassChangeError) h l sh ba;
         !!es a aa b ba es' ab ac bb b' C M.
            [| ?P \<turnstile> \<langle>es,(a, aa, b),
                                ba\<rangle> [\<rightarrow>]
                               \<langle>es',(ab, ac, bb),b'\<rangle>;
               ?P2.0 es a aa b ba es' ab ac bb b' |]
            ==> ?P1.0 (C\<bullet>\<^sub>sM(es)) a aa b ba
                 (C\<bullet>\<^sub>sM(es')) ab ac bb b';
         !!C M Ts T pns body D vs a aa b.
            [| ?P \<turnstile> C sees M, Static :  Ts\<rightarrow>T = (pns,
                                 body) in D;
               length vs = length pns; length Ts = length pns |]
            ==> ?P1.0 (C\<bullet>\<^sub>sM(map Val vs)) a aa b True
                 (blocks (pns, Ts, vs, body)) a aa b False;
         !!C M Ts T pns body D sh sfs vs h l.
            [| ?P \<turnstile> C sees M, Static :  Ts\<rightarrow>T = (pns,
                                 body) in D;
               sh D = \<lfloor>(sfs, Done)\<rfloor> |
               M = clinit & sh D = \<lfloor>(sfs, Processing)\<rfloor> |]
            ==> ?P1.0 (C\<bullet>\<^sub>sM(map Val vs)) h l sh False
                 (C\<bullet>\<^sub>sM(map Val vs)) h l sh True;
         !!C M Ts T pns body D sh vs h l.
            [| ?P \<turnstile> C sees M, Static :  Ts\<rightarrow>T = (pns,
                                 body) in D;
               \<nexists>sfs. sh D = \<lfloor>(sfs, Done)\<rfloor>;
               M ~= clinit |]
            ==> ?P1.0 (C\<bullet>\<^sub>sM(map Val vs)) h l sh False
                 (INIT D ([D],False) \<leftarrow> C\<bullet>\<^sub>sM(map
                                 Val vs))
                 h l sh False;
         !!C M vs a aa b ba.
            \<nexists>b Ts T m. Ex (Method ?P C M b Ts T m) ==>
            ?P1.0 (C\<bullet>\<^sub>sM(map Val vs)) a aa b ba
             (THROW NoSuchMethodError) a aa b False;
         !!C M Ts T a b D vs aa ab ba bb.
            ?P \<turnstile> C sees M, NonStatic :  Ts\<rightarrow>T = (a,
                                 b) in D ==>
            ?P1.0 (C\<bullet>\<^sub>sM(map Val vs)) aa ab ba bb
             (THROW IncompatibleClassChangeError) aa ab ba False;
         !!e h l V sh b e' h' l' sh' b' T.
            [| ?P \<turnstile> \<langle>e,(h, l(V := None), sh),
                                b\<rangle> \<rightarrow>
                               \<langle>e',(h', l', sh'),b'\<rangle>;
               ?P1.0 e h (l(V := None)) sh b e' h' l' sh' b'; l' V = None;
               ~ assigned V e |]
            ==> ?P1.0 {V:T; e} h l sh b {V:T; e'} h' (l'(V := l V)) sh' b';
         !!e h l V sh b e' h' l' sh' b' v T.
            [| ?P \<turnstile> \<langle>e,(h, l(V := None), sh),
                                b\<rangle> \<rightarrow>
                               \<langle>e',(h', l', sh'),b'\<rangle>;
               ?P1.0 e h (l(V := None)) sh b e' h' l' sh' b';
               l' V = \<lfloor>v\<rfloor>; ~ assigned V e |]
            ==> ?P1.0 {V:T; e} h l sh b {V:T; V:=Val v;; e'} h'
                 (l'(V := l V)) sh' b';
         !!e h l V v sh b e' h' l' sh' b' v' T.
            [| ?P \<turnstile> \<langle>e,(h, l(V |-> v), sh),
                                b\<rangle> \<rightarrow>
                               \<langle>e',(h', l', sh'),b'\<rangle>;
               ?P1.0 e h (l(V |-> v)) sh b e' h' l' sh' b';
               l' V = \<lfloor>v'\<rfloor> |]
            ==> ?P1.0 {V:T; V:=Val v;; e} h l sh b {V:T; V:=Val v';; e'} h'
                 (l'(V := l V)) sh' b';
         !!V T u a aa b ba. ?P1.0 {V:T; Val u} a aa b ba (Val u) a aa b ba;
         !!V T v u a aa b ba.
            ?P1.0 {V:T; V:=Val v;; Val u} a aa b ba (Val u) a aa b ba;
         !!e a aa b ba e' ab ac bb b' e\<^sub>2.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P1.0 (e;; e\<^sub>2) a aa b ba (e';; e\<^sub>2) ab ac bb
                 b';
         !!v e\<^sub>2 a aa b ba.
            ?P1.0 (Val v;; e\<^sub>2) a aa b ba e\<^sub>2 a aa b ba;
         !!e a aa b ba e' ab ac bb b' e\<^sub>1 e\<^sub>2.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P1.0 (if (e) e\<^sub>1 else e\<^sub>2) a aa b ba
                 (if (e') e\<^sub>1 else e\<^sub>2) ab ac bb b';
         !!e\<^sub>1 e\<^sub>2 a aa b ba.
            ?P1.0 (if (true) e\<^sub>1 else e\<^sub>2) a aa b ba e\<^sub>1 a
             aa b ba;
         !!e\<^sub>1 e\<^sub>2 a aa b ba.
            ?P1.0 (if (false) e\<^sub>1 else e\<^sub>2) a aa b ba e\<^sub>2
             a aa b ba;
         !!b c a aa ba b'.
            ?P1.0 (while (b) c) a aa ba b'
             (if (b) (c;; while (b) c) else unit) a aa ba b';
         !!e a aa b ba e' ab ac bb b'.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P1.0 (throw e) a aa b ba (throw e') ab ac bb b';
         !!a aa b ba.
            ?P1.0 (throw null) a aa b ba (THROW NullPointer) a aa b ba;
         !!e a aa b ba e' ab ac bb b' C V e\<^sub>2.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P1.0 (try e catch(C V) e\<^sub>2) a aa b ba
                 (try e' catch(C V) e\<^sub>2) ab ac bb b';
         !!v C V e\<^sub>2 a aa b ba.
            ?P1.0 (try Val v catch(C V) e\<^sub>2) a aa b ba (Val v) a aa b
             ba;
         !!a aa b ab D fs C V e\<^sub>2 ba.
            [| hp (a, aa, b) ab = \<lfloor>(D, fs)\<rfloor>;
               ?P \<turnstile> D \<preceq>\<^sup>* C |]
            ==> ?P1.0 (try Throw ab catch(C V) e\<^sub>2) a aa b ba
                 {V:Class C; V:=addr ab;; e\<^sub>2} a aa b ba;
         !!a aa b ab D fs C V e\<^sub>2 ba.
            [| hp (a, aa, b) ab = \<lfloor>(D, fs)\<rfloor>;
               (D, C) ~: (subcls1 ?P)^* |]
            ==> ?P1.0 (try Throw ab catch(C V) e\<^sub>2) a aa b ba
                 (Throw ab) a aa b ba;
         !!e a aa b ba e' ab ac bb b' es.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P2.0 (e # es) a aa b ba (e' # es) ab ac bb b';
         !!es a aa b ba es' ab ac bb b' v.
            [| ?P \<turnstile> \<langle>es,(a, aa, b),
                                ba\<rangle> [\<rightarrow>]
                               \<langle>es',(ab, ac, bb),b'\<rangle>;
               ?P2.0 es a aa b ba es' ab ac bb b' |]
            ==> ?P2.0 (Val v # es) a aa b ba (Val v # es') ab ac bb b';
         !!e C b a aa ba b'.
            ~ sub_RI e ==>
            ?P1.0 (INIT C ([],b) \<leftarrow> e) a aa ba b' e a aa ba
             (icheck ?P C e);
         !!sh C C' Cs e h l b.
            sh C = None ==>
            ?P1.0 (INIT C' (C # Cs,False) \<leftarrow> e) h l sh b
             (INIT C' (C # Cs,False) \<leftarrow> e) h l
             (sh(C |-> (sblank ?P C, Prepared))) b;
         !!sh C sfs C' Cs e h l b.
            sh C = \<lfloor>(sfs, Done)\<rfloor> ==>
            ?P1.0 (INIT C' (C # Cs,False) \<leftarrow> e) h l sh b
             (INIT C' (Cs,True) \<leftarrow> e) h l sh b;
         !!sh C sfs C' Cs e h l b.
            sh C = \<lfloor>(sfs, Processing)\<rfloor> ==>
            ?P1.0 (INIT C' (C # Cs,False) \<leftarrow> e) h l sh b
             (INIT C' (Cs,True) \<leftarrow> e) h l sh b;
         !!sh C sfs C' Cs e h l b.
            sh C = \<lfloor>(sfs, Error)\<rfloor> ==>
            ?P1.0 (INIT C' (C # Cs,False) \<leftarrow> e) h l sh b
             (RI (C,THROW NoClassDefFoundError) ; Cs \<leftarrow> e) h l sh
             b;
         !!sh C sfs sh' C' Cs e h l b.
            [| sh C = \<lfloor>(sfs, Prepared)\<rfloor>; C = Object;
               sh' = sh(C |-> (sfs, Processing)) |]
            ==> ?P1.0 (INIT C' (C # Cs,False) \<leftarrow> e) h l sh b
                 (INIT C' (C # Cs,True) \<leftarrow> e) h l sh' b;
         !!sh C sfs D a b sh' C' Cs e h l ba.
            [| sh C = \<lfloor>(sfs, Prepared)\<rfloor>; C ~= Object;
               class ?P C = \<lfloor>(D, a, b)\<rfloor>;
               sh' = sh(C |-> (sfs, Processing)) |]
            ==> ?P1.0 (INIT C' (C # Cs,False) \<leftarrow> e) h l sh ba
                 (INIT C' (D # C # Cs,False) \<leftarrow> e) h l sh' ba;
         !!C' C Cs e h l sh b.
            ?P1.0 (INIT C' (C # Cs,True) \<leftarrow> e) h l sh b
             (RI (C,C\<bullet>\<^sub>sclinit([])) ; Cs \<leftarrow> e) h l
             sh b;
         !!e a aa b ba e' ab ac bb b' C Cs e\<^sub>0.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P1.0 (RI (C,e) ; Cs \<leftarrow> e\<^sub>0) a aa b ba
                 (RI (C,e') ; Cs \<leftarrow> e\<^sub>0) ab ac bb b';
         !!sh C sfs i sh' C' Cs v e h l b.
            [| sh C = \<lfloor>(sfs, i)\<rfloor>;
               sh' = sh(C |-> (sfs, Done)); C' = last (C # Cs) |]
            ==> ?P1.0 (RI (C,Val v) ; Cs \<leftarrow> e) h l sh b
                 (INIT C' (Cs,True) \<leftarrow> e) h l sh' b;
         !!C e a aa b ba.
            ?P1.0 (Cast C (throw e)) a aa b ba (throw e) a aa b ba;
         !!e bop e\<^sub>2 a aa b ba.
            ?P1.0 (throw e \<guillemotleft>bop\<guillemotright> e\<^sub>2) a
             aa b ba (throw e) a aa b ba;
         !!v\<^sub>1 bop e a aa b ba.
            ?P1.0
             (Val v\<^sub>1 \<guillemotleft>bop\<guillemotright> throw e) a
             aa b ba (throw e) a aa b ba;
         !!V e a aa b ba. ?P1.0 (V:=throw e) a aa b ba (throw e) a aa b ba;
         !!e F D a aa b ba.
            ?P1.0 (throw e\<bullet>F{D}) a aa b ba (throw e) a aa b ba;
         !!e F D e\<^sub>2 a aa b ba.
            ?P1.0 (throw e\<bullet>F{D} := e\<^sub>2) a aa b ba (throw e) a
             aa b ba;
         !!v F D e a aa b ba.
            ?P1.0 (Val v\<bullet>F{D} := throw e) a aa b ba (throw e) a aa b
             ba;
         !!C F D e a aa b ba.
            ?P1.0 (C\<bullet>\<^sub>sF{D} := throw e) a aa b ba (throw e) a
             aa b ba;
         !!e M es a aa b ba.
            ?P1.0 (throw e\<bullet>M(es)) a aa b ba (throw e) a aa b ba;
         !!es vs e es' v M a aa b ba.
            es = map Val vs @ throw e # es' ==>
            ?P1.0 (Val v\<bullet>M(es)) a aa b ba (throw e) a aa b ba;
         !!es vs e es' C M a aa b ba.
            es = map Val vs @ throw e # es' ==>
            ?P1.0 (C\<bullet>\<^sub>sM(es)) a aa b ba (throw e) a aa b ba;
         !!V T a aa ab b ba.
            ?P1.0 {V:T; Throw a} aa ab b ba (Throw a) aa ab b ba;
         !!V T v a aa ab b ba.
            ?P1.0 {V:T; V:=Val v;; Throw a} aa ab b ba (Throw a) aa ab b ba;
         !!e e\<^sub>2 a aa b ba.
            ?P1.0 (throw e;; e\<^sub>2) a aa b ba (throw e) a aa b ba;
         !!e e\<^sub>1 e\<^sub>2 a aa b ba.
            ?P1.0 (if (throw e) e\<^sub>1 else e\<^sub>2) a aa b ba
             (throw e) a aa b ba;
         !!e a aa b ba.
            ?P1.0 (throw (throw e)) a aa b ba (throw e) a aa b ba;
         !!sh C sfs i sh' a D Cs e h l b.
            [| sh C = \<lfloor>(sfs, i)\<rfloor>;
               sh' = sh(C |-> (sfs, Error)) |]
            ==> ?P1.0 (RI (C,Throw a) ; D # Cs \<leftarrow> e) h l sh b
                 (RI (D,Throw a) ; Cs \<leftarrow> e) h l sh' b;
         !!sh C sfs i sh' a e h l b.
            [| sh C = \<lfloor>(sfs, i)\<rfloor>;
               sh' = sh(C |-> (sfs, Error)) |]
            ==> ?P1.0 (RI (C,Throw a) ; [] \<leftarrow> e) h l sh b
                 (Throw a) h l sh' b |]
      ==> ?P2.0 ?x7a ?x8a ?x8b ?x8c ?x9a ?x10a ?x11a ?x11b ?x11c ?x12a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 145,
                template_app
                 (template_app
                   (template_hole 144,
                    template_app
                     (template_app (template_hole 143, template_var 12),
                      template_app
                       (template_app
                         (template_hole 142,
                          template_app
                           (template_app
                             (template_hole 141, template_var 11),
                            template_app
                             (template_app
                               (template_hole 140, template_var 10),
                              template_var 9))),
                        template_var 8))),
                  template_app
                   (template_app (template_hole 143, template_var 7),
                    template_app
                     (template_app
                       (template_hole 142,
                        template_app
                         (template_app (template_hole 141, template_var 6),
                          template_app
                           (template_app
                             (template_hole 140, template_var 5),
                            template_var 4))),
                      template_var 3)))),
              template_app (template_hole 139, template_var 2))
            ),
        template_predicate (template_app (template_hole 138, t_empty)),
        template_predicate (template_app (template_hole 138, t_empty)),
        template_predicate (template_app (template_hole 133, t_empty)),
        template_predicate (template_app (template_hole 133, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 138, t_empty)),
        template_predicate (template_app (template_hole 138, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 89, t_empty)),
        template_predicate (template_app (template_hole 134, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 138, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 138, t_empty)),
        template_predicate (template_app (template_hole 138, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 138, t_empty)),
        template_predicate (template_app (template_hole 138, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 59, t_empty)),
        template_predicate (template_app (template_hole 138, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 138, t_empty)),
        template_predicate (template_app (template_hole 138, t_empty)),
        template_predicate (template_app (template_hole 59, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 87, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 138, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 87, t_empty)),
        template_predicate (template_app (template_hole 138, t_empty)),
        template_predicate (template_app (template_hole 138, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 59, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 133, t_empty)),
        template_predicate (template_app (template_hole 133, t_empty)),
        template_predicate (template_app (template_hole 133, t_empty)),
        template_predicate (template_app (template_hole 133, t_empty)),
        template_predicate (template_app (template_hole 133, t_empty)),
        template_predicate (template_app (template_hole 133, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 133, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 87, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 87, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 59, t_empty)),
        template_predicate (template_app (template_hole 59, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 136, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 105, t_empty)),
        template_predicate (template_app (template_hole 133, t_empty)),
        template_predicate (template_app (template_hole 133, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app (template_var 0, template_var 12),
                             template_var 11),
                           template_var 10),
                         template_var 9),
                       template_var 8),
                     template_var 7),
                   template_var 6),
                 template_var 5),
               template_var 4),
             template_var 3)
           ))),
    ("SmallStep.red_reds_induct",
     "[| !!h a C FDTs h' l sh.
            [| new_Addr h = \<lfloor>a\<rfloor>;
               ?P \<turnstile> C has_fields FDTs;
               h' = h(a |-> blank ?P C) |]
            ==> ?P1.0 (new C) h l sh True (addr a) h' l sh False;
         !!h C l sh.
            [| new_Addr h = None; is_class ?P C |]
            ==> ?P1.0 (new C) h l sh True (THROW OutOfMemory) h l sh False;
         !!sh C sfs h l.
            sh C = \<lfloor>(sfs, Done)\<rfloor> ==>
            ?P1.0 (new C) h l sh False (new C) h l sh True;
         !!sh C h l.
            [| \<nexists>sfs. sh C = \<lfloor>(sfs, Done)\<rfloor>;
               is_class ?P C |]
            ==> ?P1.0 (new C) h l sh False
                 (INIT C ([C],False) \<leftarrow> new C) h l sh False;
         !!e a aa b ba e' ab ac bb b' C.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P1.0 (Cast C e) a aa b ba (Cast C e') ab ac bb b';
         !!C a aa b ba. ?P1.0 (Cast C null) a aa b ba null a aa b ba;
         !!h a D fs C l sh b.
            [| h a = \<lfloor>(D, fs)\<rfloor>;
               ?P \<turnstile> D \<preceq>\<^sup>* C |]
            ==> ?P1.0 (Cast C (addr a)) h l sh b (addr a) h l sh b;
         !!h a D fs C l sh b.
            [| h a = \<lfloor>(D, fs)\<rfloor>; (D, C) ~: (subcls1 ?P)^* |]
            ==> ?P1.0 (Cast C (addr a)) h l sh b (THROW ClassCast) h l sh b;
         !!e a aa b ba e' ab ac bb b' bop e\<^sub>2.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P1.0 (e \<guillemotleft>bop\<guillemotright> e\<^sub>2) a
                 aa b ba (e' \<guillemotleft>bop\<guillemotright> e\<^sub>2)
                 ab ac bb b';
         !!e a aa b ba e' ab ac bb b' v\<^sub>1 bop.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P1.0 (Val v\<^sub>1 \<guillemotleft>bop\<guillemotright> e)
                 a aa b ba
                 (Val v\<^sub>1 \<guillemotleft>bop\<guillemotright> e') ab
                 ac bb b';
         !!bop v\<^sub>1 v\<^sub>2 v a aa b ba.
            binop (bop, v\<^sub>1, v\<^sub>2) = \<lfloor>v\<rfloor> ==>
            ?P1.0
             (Val v\<^sub>1 \<guillemotleft>bop\<guillemotright> Val
                            v\<^sub>2)
             a aa b ba (Val v) a aa b ba;
         !!l V v h sh b.
            l V = \<lfloor>v\<rfloor> ==>
            ?P1.0 (Var V) h l sh b (Val v) h l sh b;
         !!e a aa b ba e' ab ac bb b' V.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P1.0 (V:=e) a aa b ba (V:=e') ab ac bb b';
         !!V v h l sh b. ?P1.0 (V:=Val v) h l sh b unit h (l(V |-> v)) sh b;
         !!e a aa b ba e' ab ac bb b' F D.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P1.0 (e\<bullet>F{D}) a aa b ba (e'\<bullet>F{D}) ab ac bb
                 b';
         !!h a C fs F D v t l sh b.
            [| h a = \<lfloor>(C, fs)\<rfloor>;
               fs (F, D) = \<lfloor>v\<rfloor>;
               ?P \<turnstile> C has F,NonStatic:t in D |]
            ==> ?P1.0 (addr a\<bullet>F{D}) h l sh b (Val v) h l sh b;
         !!F D a aa b ba.
            ?P1.0 (null\<bullet>F{D}) a aa b ba (THROW NullPointer) a aa b
             ba;
         !!h a C fs F D l sh b.
            [| h a = \<lfloor>(C, fs)\<rfloor>;
               \<nexists>b t. ?P \<turnstile> C has F,b:t in D |]
            ==> ?P1.0 (addr a\<bullet>F{D}) h l sh b
                 (THROW NoSuchFieldError) h l sh b;
         !!h a C fs F t D l sh b.
            [| h a = \<lfloor>(C, fs)\<rfloor>;
               ?P \<turnstile> C has F,Static:t in D |]
            ==> ?P1.0 (addr a\<bullet>F{D}) h l sh b
                 (THROW IncompatibleClassChangeError) h l sh b;
         !!C F t D sh sfs i v h l.
            [| ?P \<turnstile> C has F,Static:t in D;
               sh D = \<lfloor>(sfs, i)\<rfloor>;
               sfs F = \<lfloor>v\<rfloor> |]
            ==> ?P1.0 (C\<bullet>\<^sub>sF{D}) h l sh True (Val v) h l sh
                 False;
         !!C F t D sh sfs h l.
            [| ?P \<turnstile> C has F,Static:t in D;
               sh D = \<lfloor>(sfs, Done)\<rfloor> |]
            ==> ?P1.0 (C\<bullet>\<^sub>sF{D}) h l sh False
                 (C\<bullet>\<^sub>sF{D}) h l sh True;
         !!C F t D sh h l.
            [| ?P \<turnstile> C has F,Static:t in D;
               \<nexists>sfs. sh D = \<lfloor>(sfs, Done)\<rfloor> |]
            ==> ?P1.0 (C\<bullet>\<^sub>sF{D}) h l sh False
                 (INIT D ([D],False) \<leftarrow> C\<bullet>\<^sub>sF{D}) h
                 l sh False;
         !!C F D h l sh b.
            \<nexists>b t. ?P \<turnstile> C has F,b:t in D ==>
            ?P1.0 (C\<bullet>\<^sub>sF{D}) h l sh b (THROW NoSuchFieldError)
             h l sh False;
         !!C F t D h l sh b.
            ?P \<turnstile> C has F,NonStatic:t in D ==>
            ?P1.0 (C\<bullet>\<^sub>sF{D}) h l sh b
             (THROW IncompatibleClassChangeError) h l sh False;
         !!e a aa b ba e' ab ac bb b' F D e\<^sub>2.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P1.0 (e\<bullet>F{D} := e\<^sub>2) a aa b ba
                 (e'\<bullet>F{D} := e\<^sub>2) ab ac bb b';
         !!e a aa b ba e' ab ac bb b' v F D.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P1.0 (Val v\<bullet>F{D} := e) a aa b ba
                 (Val v\<bullet>F{D} := e') ab ac bb b';
         !!C F t D h a fs v l sh b.
            [| ?P \<turnstile> C has F,NonStatic:t in D;
               h a = \<lfloor>(C, fs)\<rfloor> |]
            ==> ?P1.0 (addr a\<bullet>F{D} := Val v) h l sh b unit
                 (h(a |-> (C, fs((F, D) |-> v)))) l sh b;
         !!F D v a aa b ba.
            ?P1.0 (null\<bullet>F{D} := Val v) a aa b ba (THROW NullPointer)
             a aa b ba;
         !!h a C fs F D v l sh b.
            [| h a = \<lfloor>(C, fs)\<rfloor>;
               \<nexists>b t. ?P \<turnstile> C has F,b:t in D |]
            ==> ?P1.0 (addr a\<bullet>F{D} := Val v) h l sh b
                 (THROW NoSuchFieldError) h l sh b;
         !!h a C fs F t D v l sh b.
            [| h a = \<lfloor>(C, fs)\<rfloor>;
               ?P \<turnstile> C has F,Static:t in D |]
            ==> ?P1.0 (addr a\<bullet>F{D} := Val v) h l sh b
                 (THROW IncompatibleClassChangeError) h l sh b;
         !!e a aa b ba e' ab ac bb b' C F D.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P1.0 (C\<bullet>\<^sub>sF{D} := e) a aa b ba
                 (C\<bullet>\<^sub>sF{D} := e') ab ac bb b';
         !!C F t D sh sfs i sfs' v sh' h l.
            [| ?P \<turnstile> C has F,Static:t in D;
               sh D = \<lfloor>(sfs, i)\<rfloor>; sfs' = sfs(F |-> v);
               sh' = sh(D |-> (sfs', i)) |]
            ==> ?P1.0 (C\<bullet>\<^sub>sF{D} := Val v) h l sh True unit h l
                 sh' False;
         !!C F t D sh sfs v h l.
            [| ?P \<turnstile> C has F,Static:t in D;
               sh D = \<lfloor>(sfs, Done)\<rfloor> |]
            ==> ?P1.0 (C\<bullet>\<^sub>sF{D} := Val v) h l sh False
                 (C\<bullet>\<^sub>sF{D} := Val v) h l sh True;
         !!C F t D sh v h l.
            [| ?P \<turnstile> C has F,Static:t in D;
               \<nexists>sfs. sh D = \<lfloor>(sfs, Done)\<rfloor> |]
            ==> ?P1.0 (C\<bullet>\<^sub>sF{D} := Val v) h l sh False
                 (INIT D ([D],False) \<leftarrow> C\<bullet>\<^sub>sF{D} := Val
 v)
                 h l sh False;
         !!C F D v a aa b ba.
            \<nexists>b t. ?P \<turnstile> C has F,b:t in D ==>
            ?P1.0 (C\<bullet>\<^sub>sF{D} := Val v) a aa b ba
             (THROW NoSuchFieldError) a aa b False;
         !!C F t D v a aa b ba.
            ?P \<turnstile> C has F,NonStatic:t in D ==>
            ?P1.0 (C\<bullet>\<^sub>sF{D} := Val v) a aa b ba
             (THROW IncompatibleClassChangeError) a aa b False;
         !!e a aa b ba e' ab ac bb b' M es.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P1.0 (e\<bullet>M(es)) a aa b ba (e'\<bullet>M(es)) ab ac
                 bb b';
         !!es a aa b ba es' ab ac bb b' v M.
            [| ?P \<turnstile> \<langle>es,(a, aa, b),
                                ba\<rangle> [\<rightarrow>]
                               \<langle>es',(ab, ac, bb),b'\<rangle>;
               ?P2.0 es a aa b ba es' ab ac bb b' |]
            ==> ?P1.0 (Val v\<bullet>M(es)) a aa b ba (Val v\<bullet>M(es'))
                 ab ac bb b';
         !!h a C fs M Ts T pns body D vs l sh b.
            [| h a = \<lfloor>(C, fs)\<rfloor>;
               ?P \<turnstile> C sees M, NonStatic :  Ts\<rightarrow>T = (pns,
                                    body) in D;
               length vs = length pns; length Ts = length pns |]
            ==> ?P1.0 (addr a\<bullet>M(map Val vs)) h l sh b
                 (blocks (this # pns, Class D # Ts, Addr a # vs, body)) h l
                 sh b;
         !!M vs a aa b ba.
            ?P1.0 (null\<bullet>M(map Val vs)) a aa b ba (THROW NullPointer)
             a aa b ba;
         !!h a C fs M vs l sh b.
            [| h a = \<lfloor>(C, fs)\<rfloor>;
               \<nexists>b Ts T m D.
                  ?P \<turnstile> C sees M, b :  Ts\<rightarrow>T = m in D |]
            ==> ?P1.0 (addr a\<bullet>M(map Val vs)) h l sh b
                 (THROW NoSuchMethodError) h l sh b;
         !!h a C fs M Ts T aa b D vs l sh ba.
            [| h a = \<lfloor>(C, fs)\<rfloor>;
               ?P \<turnstile> C sees M, Static :  Ts\<rightarrow>T = (aa,
                                 b) in D |]
            ==> ?P1.0 (addr a\<bullet>M(map Val vs)) h l sh ba
                 (THROW IncompatibleClassChangeError) h l sh ba;
         !!es a aa b ba es' ab ac bb b' C M.
            [| ?P \<turnstile> \<langle>es,(a, aa, b),
                                ba\<rangle> [\<rightarrow>]
                               \<langle>es',(ab, ac, bb),b'\<rangle>;
               ?P2.0 es a aa b ba es' ab ac bb b' |]
            ==> ?P1.0 (C\<bullet>\<^sub>sM(es)) a aa b ba
                 (C\<bullet>\<^sub>sM(es')) ab ac bb b';
         !!C M Ts T pns body D vs a aa b.
            [| ?P \<turnstile> C sees M, Static :  Ts\<rightarrow>T = (pns,
                                 body) in D;
               length vs = length pns; length Ts = length pns |]
            ==> ?P1.0 (C\<bullet>\<^sub>sM(map Val vs)) a aa b True
                 (blocks (pns, Ts, vs, body)) a aa b False;
         !!C M Ts T pns body D sh sfs vs h l.
            [| ?P \<turnstile> C sees M, Static :  Ts\<rightarrow>T = (pns,
                                 body) in D;
               sh D = \<lfloor>(sfs, Done)\<rfloor> |
               M = clinit & sh D = \<lfloor>(sfs, Processing)\<rfloor> |]
            ==> ?P1.0 (C\<bullet>\<^sub>sM(map Val vs)) h l sh False
                 (C\<bullet>\<^sub>sM(map Val vs)) h l sh True;
         !!C M Ts T pns body D sh vs h l.
            [| ?P \<turnstile> C sees M, Static :  Ts\<rightarrow>T = (pns,
                                 body) in D;
               \<nexists>sfs. sh D = \<lfloor>(sfs, Done)\<rfloor>;
               M ~= clinit |]
            ==> ?P1.0 (C\<bullet>\<^sub>sM(map Val vs)) h l sh False
                 (INIT D ([D],False) \<leftarrow> C\<bullet>\<^sub>sM(map
                                 Val vs))
                 h l sh False;
         !!C M vs a aa b ba.
            \<nexists>b Ts T m. Ex (Method ?P C M b Ts T m) ==>
            ?P1.0 (C\<bullet>\<^sub>sM(map Val vs)) a aa b ba
             (THROW NoSuchMethodError) a aa b False;
         !!C M Ts T a b D vs aa ab ba bb.
            ?P \<turnstile> C sees M, NonStatic :  Ts\<rightarrow>T = (a,
                                 b) in D ==>
            ?P1.0 (C\<bullet>\<^sub>sM(map Val vs)) aa ab ba bb
             (THROW IncompatibleClassChangeError) aa ab ba False;
         !!e h l V sh b e' h' l' sh' b' T.
            [| ?P \<turnstile> \<langle>e,(h, l(V := None), sh),
                                b\<rangle> \<rightarrow>
                               \<langle>e',(h', l', sh'),b'\<rangle>;
               ?P1.0 e h (l(V := None)) sh b e' h' l' sh' b'; l' V = None;
               ~ assigned V e |]
            ==> ?P1.0 {V:T; e} h l sh b {V:T; e'} h' (l'(V := l V)) sh' b';
         !!e h l V sh b e' h' l' sh' b' v T.
            [| ?P \<turnstile> \<langle>e,(h, l(V := None), sh),
                                b\<rangle> \<rightarrow>
                               \<langle>e',(h', l', sh'),b'\<rangle>;
               ?P1.0 e h (l(V := None)) sh b e' h' l' sh' b';
               l' V = \<lfloor>v\<rfloor>; ~ assigned V e |]
            ==> ?P1.0 {V:T; e} h l sh b {V:T; V:=Val v;; e'} h'
                 (l'(V := l V)) sh' b';
         !!e h l V v sh b e' h' l' sh' b' v' T.
            [| ?P \<turnstile> \<langle>e,(h, l(V |-> v), sh),
                                b\<rangle> \<rightarrow>
                               \<langle>e',(h', l', sh'),b'\<rangle>;
               ?P1.0 e h (l(V |-> v)) sh b e' h' l' sh' b';
               l' V = \<lfloor>v'\<rfloor> |]
            ==> ?P1.0 {V:T; V:=Val v;; e} h l sh b {V:T; V:=Val v';; e'} h'
                 (l'(V := l V)) sh' b';
         !!V T u a aa b ba. ?P1.0 {V:T; Val u} a aa b ba (Val u) a aa b ba;
         !!V T v u a aa b ba.
            ?P1.0 {V:T; V:=Val v;; Val u} a aa b ba (Val u) a aa b ba;
         !!e a aa b ba e' ab ac bb b' e\<^sub>2.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P1.0 (e;; e\<^sub>2) a aa b ba (e';; e\<^sub>2) ab ac bb
                 b';
         !!v e\<^sub>2 a aa b ba.
            ?P1.0 (Val v;; e\<^sub>2) a aa b ba e\<^sub>2 a aa b ba;
         !!e a aa b ba e' ab ac bb b' e\<^sub>1 e\<^sub>2.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P1.0 (if (e) e\<^sub>1 else e\<^sub>2) a aa b ba
                 (if (e') e\<^sub>1 else e\<^sub>2) ab ac bb b';
         !!e\<^sub>1 e\<^sub>2 a aa b ba.
            ?P1.0 (if (true) e\<^sub>1 else e\<^sub>2) a aa b ba e\<^sub>1 a
             aa b ba;
         !!e\<^sub>1 e\<^sub>2 a aa b ba.
            ?P1.0 (if (false) e\<^sub>1 else e\<^sub>2) a aa b ba e\<^sub>2
             a aa b ba;
         !!b c a aa ba b'.
            ?P1.0 (while (b) c) a aa ba b'
             (if (b) (c;; while (b) c) else unit) a aa ba b';
         !!e a aa b ba e' ab ac bb b'.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P1.0 (throw e) a aa b ba (throw e') ab ac bb b';
         !!a aa b ba.
            ?P1.0 (throw null) a aa b ba (THROW NullPointer) a aa b ba;
         !!e a aa b ba e' ab ac bb b' C V e\<^sub>2.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P1.0 (try e catch(C V) e\<^sub>2) a aa b ba
                 (try e' catch(C V) e\<^sub>2) ab ac bb b';
         !!v C V e\<^sub>2 a aa b ba.
            ?P1.0 (try Val v catch(C V) e\<^sub>2) a aa b ba (Val v) a aa b
             ba;
         !!a aa b ab D fs C V e\<^sub>2 ba.
            [| hp (a, aa, b) ab = \<lfloor>(D, fs)\<rfloor>;
               ?P \<turnstile> D \<preceq>\<^sup>* C |]
            ==> ?P1.0 (try Throw ab catch(C V) e\<^sub>2) a aa b ba
                 {V:Class C; V:=addr ab;; e\<^sub>2} a aa b ba;
         !!a aa b ab D fs C V e\<^sub>2 ba.
            [| hp (a, aa, b) ab = \<lfloor>(D, fs)\<rfloor>;
               (D, C) ~: (subcls1 ?P)^* |]
            ==> ?P1.0 (try Throw ab catch(C V) e\<^sub>2) a aa b ba
                 (Throw ab) a aa b ba;
         !!e a aa b ba e' ab ac bb b' es.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P2.0 (e # es) a aa b ba (e' # es) ab ac bb b';
         !!es a aa b ba es' ab ac bb b' v.
            [| ?P \<turnstile> \<langle>es,(a, aa, b),
                                ba\<rangle> [\<rightarrow>]
                               \<langle>es',(ab, ac, bb),b'\<rangle>;
               ?P2.0 es a aa b ba es' ab ac bb b' |]
            ==> ?P2.0 (Val v # es) a aa b ba (Val v # es') ab ac bb b';
         !!e C b a aa ba b'.
            ~ sub_RI e ==>
            ?P1.0 (INIT C ([],b) \<leftarrow> e) a aa ba b' e a aa ba
             (icheck ?P C e);
         !!sh C C' Cs e h l b.
            sh C = None ==>
            ?P1.0 (INIT C' (C # Cs,False) \<leftarrow> e) h l sh b
             (INIT C' (C # Cs,False) \<leftarrow> e) h l
             (sh(C |-> (sblank ?P C, Prepared))) b;
         !!sh C sfs C' Cs e h l b.
            sh C = \<lfloor>(sfs, Done)\<rfloor> ==>
            ?P1.0 (INIT C' (C # Cs,False) \<leftarrow> e) h l sh b
             (INIT C' (Cs,True) \<leftarrow> e) h l sh b;
         !!sh C sfs C' Cs e h l b.
            sh C = \<lfloor>(sfs, Processing)\<rfloor> ==>
            ?P1.0 (INIT C' (C # Cs,False) \<leftarrow> e) h l sh b
             (INIT C' (Cs,True) \<leftarrow> e) h l sh b;
         !!sh C sfs C' Cs e h l b.
            sh C = \<lfloor>(sfs, Error)\<rfloor> ==>
            ?P1.0 (INIT C' (C # Cs,False) \<leftarrow> e) h l sh b
             (RI (C,THROW NoClassDefFoundError) ; Cs \<leftarrow> e) h l sh
             b;
         !!sh C sfs sh' C' Cs e h l b.
            [| sh C = \<lfloor>(sfs, Prepared)\<rfloor>; C = Object;
               sh' = sh(C |-> (sfs, Processing)) |]
            ==> ?P1.0 (INIT C' (C # Cs,False) \<leftarrow> e) h l sh b
                 (INIT C' (C # Cs,True) \<leftarrow> e) h l sh' b;
         !!sh C sfs D a b sh' C' Cs e h l ba.
            [| sh C = \<lfloor>(sfs, Prepared)\<rfloor>; C ~= Object;
               class ?P C = \<lfloor>(D, a, b)\<rfloor>;
               sh' = sh(C |-> (sfs, Processing)) |]
            ==> ?P1.0 (INIT C' (C # Cs,False) \<leftarrow> e) h l sh ba
                 (INIT C' (D # C # Cs,False) \<leftarrow> e) h l sh' ba;
         !!C' C Cs e h l sh b.
            ?P1.0 (INIT C' (C # Cs,True) \<leftarrow> e) h l sh b
             (RI (C,C\<bullet>\<^sub>sclinit([])) ; Cs \<leftarrow> e) h l
             sh b;
         !!e a aa b ba e' ab ac bb b' C Cs e\<^sub>0.
            [| ?P \<turnstile> \<langle>e,(a, aa, b),
                                ba\<rangle> \<rightarrow>
                               \<langle>e',(ab, ac, bb),b'\<rangle>;
               ?P1.0 e a aa b ba e' ab ac bb b' |]
            ==> ?P1.0 (RI (C,e) ; Cs \<leftarrow> e\<^sub>0) a aa b ba
                 (RI (C,e') ; Cs \<leftarrow> e\<^sub>0) ab ac bb b';
         !!sh C sfs i sh' C' Cs v e h l b.
            [| sh C = \<lfloor>(sfs, i)\<rfloor>;
               sh' = sh(C |-> (sfs, Done)); C' = last (C # Cs) |]
            ==> ?P1.0 (RI (C,Val v) ; Cs \<leftarrow> e) h l sh b
                 (INIT C' (Cs,True) \<leftarrow> e) h l sh' b;
         !!C e a aa b ba.
            ?P1.0 (Cast C (throw e)) a aa b ba (throw e) a aa b ba;
         !!e bop e\<^sub>2 a aa b ba.
            ?P1.0 (throw e \<guillemotleft>bop\<guillemotright> e\<^sub>2) a
             aa b ba (throw e) a aa b ba;
         !!v\<^sub>1 bop e a aa b ba.
            ?P1.0
             (Val v\<^sub>1 \<guillemotleft>bop\<guillemotright> throw e) a
             aa b ba (throw e) a aa b ba;
         !!V e a aa b ba. ?P1.0 (V:=throw e) a aa b ba (throw e) a aa b ba;
         !!e F D a aa b ba.
            ?P1.0 (throw e\<bullet>F{D}) a aa b ba (throw e) a aa b ba;
         !!e F D e\<^sub>2 a aa b ba.
            ?P1.0 (throw e\<bullet>F{D} := e\<^sub>2) a aa b ba (throw e) a
             aa b ba;
         !!v F D e a aa b ba.
            ?P1.0 (Val v\<bullet>F{D} := throw e) a aa b ba (throw e) a aa b
             ba;
         !!C F D e a aa b ba.
            ?P1.0 (C\<bullet>\<^sub>sF{D} := throw e) a aa b ba (throw e) a
             aa b ba;
         !!e M es a aa b ba.
            ?P1.0 (throw e\<bullet>M(es)) a aa b ba (throw e) a aa b ba;
         !!es vs e es' v M a aa b ba.
            es = map Val vs @ throw e # es' ==>
            ?P1.0 (Val v\<bullet>M(es)) a aa b ba (throw e) a aa b ba;
         !!es vs e es' C M a aa b ba.
            es = map Val vs @ throw e # es' ==>
            ?P1.0 (C\<bullet>\<^sub>sM(es)) a aa b ba (throw e) a aa b ba;
         !!V T a aa ab b ba.
            ?P1.0 {V:T; Throw a} aa ab b ba (Throw a) aa ab b ba;
         !!V T v a aa ab b ba.
            ?P1.0 {V:T; V:=Val v;; Throw a} aa ab b ba (Throw a) aa ab b ba;
         !!e e\<^sub>2 a aa b ba.
            ?P1.0 (throw e;; e\<^sub>2) a aa b ba (throw e) a aa b ba;
         !!e e\<^sub>1 e\<^sub>2 a aa b ba.
            ?P1.0 (if (throw e) e\<^sub>1 else e\<^sub>2) a aa b ba
             (throw e) a aa b ba;
         !!e a aa b ba.
            ?P1.0 (throw (throw e)) a aa b ba (throw e) a aa b ba;
         !!sh C sfs i sh' a D Cs e h l b.
            [| sh C = \<lfloor>(sfs, i)\<rfloor>;
               sh' = sh(C |-> (sfs, Error)) |]
            ==> ?P1.0 (RI (C,Throw a) ; D # Cs \<leftarrow> e) h l sh b
                 (RI (D,Throw a) ; Cs \<leftarrow> e) h l sh' b;
         !!sh C sfs i sh' a e h l b.
            [| sh C = \<lfloor>(sfs, i)\<rfloor>;
               sh' = sh(C |-> (sfs, Error)) |]
            ==> ?P1.0 (RI (C,Throw a) ; [] \<leftarrow> e) h l sh b
                 (Throw a) h l sh' b |]
      ==> (?P \<turnstile> \<langle>?x1a,(?x2a, ?x2b, ?x2c),
                            ?x3a\<rangle> \<rightarrow>
                           \<langle>?x4a,(?x5a, ?x5b, ?x5c),
                            ?x6a\<rangle> -->
           ?P1.0 ?x1a ?x2a ?x2b ?x2c ?x3a ?x4a ?x5a ?x5b ?x5c ?x6a) &
          (?P \<turnstile> \<langle>?x7a,(?x8a, ?x8b, ?x8c),
                            ?x9a\<rangle> [\<rightarrow>]
                           \<langle>?x10a,(?x11a, ?x11b, ?x11c),
                            ?x12a\<rangle> -->
           ?P2.0 ?x7a ?x8a ?x8b ?x8c ?x9a ?x10a ?x11a ?x11b ?x11c ?x12a)",
     template_implication
      ([template_predicate (template_app (template_hole 147, t_empty)),
        template_predicate (template_app (template_hole 147, t_empty)),
        template_predicate (template_app (template_hole 142, t_empty)),
        template_predicate (template_app (template_hole 142, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 145, t_empty)),
        template_predicate (template_app (template_hole 147, t_empty)),
        template_predicate (template_app (template_hole 147, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 94, t_empty)),
        template_predicate (template_app (template_hole 143, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 145, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 147, t_empty)),
        template_predicate (template_app (template_hole 145, t_empty)),
        template_predicate (template_app (template_hole 147, t_empty)),
        template_predicate (template_app (template_hole 147, t_empty)),
        template_predicate (template_app (template_hole 145, t_empty)),
        template_predicate (template_app (template_hole 145, t_empty)),
        template_predicate (template_app (template_hole 145, t_empty)),
        template_predicate (template_app (template_hole 145, t_empty)),
        template_predicate (template_app (template_hole 145, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 145, t_empty)),
        template_predicate (template_app (template_hole 145, t_empty)),
        template_predicate (template_app (template_hole 147, t_empty)),
        template_predicate (template_app (template_hole 147, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 145, t_empty)),
        template_predicate (template_app (template_hole 145, t_empty)),
        template_predicate (template_app (template_hole 145, t_empty)),
        template_predicate (template_app (template_hole 145, t_empty)),
        template_predicate (template_app (template_hole 145, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 64, t_empty)),
        template_predicate (template_app (template_hole 147, t_empty)),
        template_predicate (template_app (template_hole 145, t_empty)),
        template_predicate (template_app (template_hole 147, t_empty)),
        template_predicate (template_app (template_hole 147, t_empty)),
        template_predicate (template_app (template_hole 64, t_empty)),
        template_predicate (template_app (template_hole 145, t_empty)),
        template_predicate (template_app (template_hole 145, t_empty)),
        template_predicate (template_app (template_hole 145, t_empty)),
        template_predicate (template_app (template_hole 145, t_empty)),
        template_predicate (template_app (template_hole 145, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 145, t_empty)),
        template_predicate (template_app (template_hole 145, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 92, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 147, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 92, t_empty)),
        template_predicate (template_app (template_hole 147, t_empty)),
        template_predicate (template_app (template_hole 147, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 64, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 142, t_empty)),
        template_predicate (template_app (template_hole 142, t_empty)),
        template_predicate (template_app (template_hole 142, t_empty)),
        template_predicate (template_app (template_hole 142, t_empty)),
        template_predicate (template_app (template_hole 142, t_empty)),
        template_predicate (template_app (template_hole 142, t_empty)),
        template_predicate (template_app (template_hole 145, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 142, t_empty)),
        template_predicate (template_app (template_hole 145, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 92, t_empty)),
        template_predicate (template_app (template_hole 145, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 92, t_empty)),
        template_predicate (template_app (template_hole 145, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 64, t_empty)),
        template_predicate (template_app (template_hole 64, t_empty)),
        template_predicate (template_app (template_hole 145, t_empty)),
        template_predicate (template_app (template_hole 145, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 113, t_empty)),
        template_predicate (template_app (template_hole 142, t_empty)),
        template_predicate (template_app (template_hole 142, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 34,
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app
                      (template_hole 111,
                       template_app
                        (template_app
                          (template_hole 110,
                           template_app
                            (template_app
                              (template_hole 109, template_var 19),
                             template_app
                              (template_app
                                (template_hole 108,
                                 template_app
                                  (template_app
                                    (template_hole 107, template_var 18),
                                   template_app
                                    (template_app
(template_hole 106, template_var 17),
                                     template_var 16))),
                               template_var 15))),
                         template_app
                          (template_app
                            (template_hole 109, template_var 14),
                           template_app
                            (template_app
                              (template_hole 108,
                               template_app
                                (template_app
                                  (template_hole 107, template_var 13),
                                 template_app
                                  (template_app
                                    (template_hole 106, template_var 12),
                                   template_var 11))),
                             template_var 10)))),
                     template_app (template_hole 105, template_var 22))),
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_var 21, template_var 19),
                                   template_var 18),
                                 template_var 17),
                               template_var 16),
                             template_var 15),
                           template_var 14),
                         template_var 13),
                       template_var 12),
                     template_var 11),
                   template_var 10))),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_hole 62,
                     template_app
                      (template_app
                        (template_hole 61,
                         template_app
                          (template_app (template_hole 60, template_var 9),
                           template_app
                            (template_app
                              (template_hole 108,
                               template_app
                                (template_app
                                  (template_hole 107, template_var 8),
                                 template_app
                                  (template_app
                                    (template_hole 106, template_var 7),
                                   template_var 6))),
                             template_var 5))),
                       template_app
                        (template_app (template_hole 60, template_var 4),
                         template_app
                          (template_app
                            (template_hole 108,
                             template_app
                              (template_app
                                (template_hole 107, template_var 3),
                               template_app
                                (template_app
                                  (template_hole 106, template_var 2),
                                 template_var 1))),
                           template_var 0)))),
                   template_app (template_hole 59, template_var 22))),
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_var 20, template_var 9),
                                 template_var 8),
                               template_var 7),
                             template_var 6),
                           template_var 5),
                         template_var 4),
                       template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0)))
           )))]:
   (string * thm * template) list
### theory "Draft.SmallStepMoreTemplates"
### 2.987s elapsed time, 3.174s cpu time, 0.063s GC time
val it = (): unit
