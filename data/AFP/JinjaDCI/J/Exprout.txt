Loading theory "Draft.Auxiliary" (required by "Draft.ExprMoreTemplates" via "Draft.Expr" via "Draft.Exceptions" via "Draft.Objects" via "Draft.TypeRel" via "Draft.Decl" via "Draft.Type")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ExprMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ExprMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ExprMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.118s elapsed time, 0.494s cpu time, 0.035s GC time
Loading theory "HOL-Library.Transitive_Closure_Table" (required by "Draft.ExprMoreTemplates" via "Draft.Expr" via "Draft.Exceptions" via "Draft.Objects" via "Draft.TypeRel")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Auxiliary"
### 0.138s elapsed time, 0.571s cpu time, 0.035s GC time
Loading theory "Draft.Type" (required by "Draft.ExprMoreTemplates" via "Draft.Expr" via "Draft.Exceptions" via "Draft.Objects" via "Draft.TypeRel" via "Draft.Decl")
Proofs for inductive predicate(s) "rtrancl_path"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rtrancl_tab"
  Proving monotonicity ...
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.237s elapsed time, 0.963s cpu time, 0.035s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ExprMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.347s elapsed time, 1.398s cpu time, 0.120s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ExprMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Transitive_Closure_Table"
### 0.290s elapsed time, 1.148s cpu time, 0.085s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ExprMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
### theory "Draft.Type"
### 0.709s elapsed time, 2.789s cpu time, 0.273s GC time
Loading theory "Draft.Decl" (required by "Draft.ExprMoreTemplates" via "Draft.Expr" via "Draft.Exceptions" via "Draft.Objects" via "Draft.TypeRel")
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### theory "Draft.Decl"
### 0.073s elapsed time, 0.291s cpu time, 0.000s GC time
Loading theory "Draft.TypeRel" (required by "Draft.ExprMoreTemplates" via "Draft.Expr" via "Draft.Exceptions" via "Draft.Objects")
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "subcls1p"
  Proving monotonicity ...
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  supercls_lst :: "'m prog => char list list => bool"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Proofs for inductive predicate(s) "widen"
  Proving monotonicity ...
### theory "HOL-Library.Stream"
### 1.084s elapsed time, 4.125s cpu time, 0.872s GC time
### theory "HOL-Library.BigO"
### 1.029s elapsed time, 3.904s cpu time, 0.872s GC time
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Methods"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Fields"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.TypeRel"
### 0.930s elapsed time, 2.754s cpu time, 0.747s GC time
Loading theory "Draft.Value" (required by "Draft.ExprMoreTemplates" via "Draft.Expr" via "Draft.Exceptions" via "Draft.Objects")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Addr"
consts
  the_Intg :: "val => int"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_Addr :: "val => nat"
consts
  default_val :: "ty => val"
### theory "Draft.Value"
### 0.372s elapsed time, 0.795s cpu time, 0.108s GC time
Loading theory "Draft.Objects" (required by "Draft.ExprMoreTemplates" via "Draft.Expr" via "Draft.Exceptions")
### theory "HOL-Library.Tree"
### 2.021s elapsed time, 6.309s cpu time, 1.128s GC time
Loading theory "Draft.Templates" (required by "Draft.ExprMoreTemplates" via "Draft.ExtrEqs")
consts
  typeof_h :: "heap => val => ty option"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.109s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ExprMoreTemplates")
Proofs for inductive predicate(s) "iprog"
  Proving monotonicity ...
### theory "Draft.Objects"
### 0.483s elapsed time, 1.011s cpu time, 0.105s GC time
Loading theory "Draft.Exceptions" (required by "Draft.ExprMoreTemplates" via "Draft.Expr")
### theory "Draft.Exceptions"
### 0.136s elapsed time, 0.273s cpu time, 0.000s GC time
Loading theory "Draft.Expr" (required by "Draft.ExprMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.537s elapsed time, 1.123s cpu time, 0.105s GC time
Found termination order: "{}"
### Ambiguous input (line 129 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 130 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" fv) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("_applC" ("_position" fv) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" fv) ("_position" e\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  fv :: "char list exp => char list set"
  fvs :: "char list exp list => char list set"
Found termination order: "{}"
### Ambiguous input (line 161 of "$AFP/JinjaDCI/J/Expr.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lass_val_of)
###       ("\<^const>Expr.exp.LAss" ("_position" V)
###         ("_applC" ("_position" Val) ("_position" v))))
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" V) ("_tuple_arg" ("_position" v))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" lass_val_of)
###       ("_updbind" ("_position" V)
###         ("_applC" ("_position" Val) ("_position" v))))
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" V) ("_tuple_arg" ("_position" v))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 252 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" sub_RI)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>1))
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub_RI)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>1))
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub_RI)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>1))
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 253 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" sub_RI)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub_RI)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub_RI)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  sub_RI :: "'a exp => bool"
  sub_RIs :: "'a exp list => bool"
### Ambiguous input (line 295 of "$AFP/JinjaDCI/J/Expr.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C')
###         ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" not_init)
###         ("_cargs" ("_position" C') ("_position" e\<^sub>1)))
###       ("_applC" ("_position" not_init)
###         ("_cargs" ("_position" C') ("_position" e\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C')
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" not_init)
###         ("_cargs" ("_position" C') ("_position" e\<^sub>1)))
###       ("_applC" ("_position" not_init)
###         ("_cargs" ("_position" C') ("_position" e\<^sub>2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 296 of "$AFP/JinjaDCI/J/Expr.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C')
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C') ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C')
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C') ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  not_init :: "char list => 'a exp => bool"
  not_inits :: "char list => 'a exp list => bool"
### Ambiguous input (line 336 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" subexp)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("\<^const>Set.union"
###         ("_Finset"
###           ("_args" ("_position" e\<^sub>1) ("_position" e\<^sub>2)))
###         ("_applC" ("_position" subexp) ("_position" e\<^sub>1)))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subexp)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("\<^const>Set.union"
###         ("_Finset"
###           ("_args" ("_position" e\<^sub>1) ("_position" e\<^sub>2)))
###         ("_applC" ("_position" subexp) ("_position" e\<^sub>1)))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subexp)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("\<^const>Set.union"
###         ("_Finset"
###           ("_args" ("_position" e\<^sub>1) ("_position" e\<^sub>2)))
###         ("_applC" ("_position" subexp) ("_position" e\<^sub>1)))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 337 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" subexp)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union" ("_Finset" ("_position" e\<^sub>2))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subexp)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union" ("_Finset" ("_position" e\<^sub>2))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subexp)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union" ("_Finset" ("_position" e\<^sub>2))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  subexp :: "'a exp => 'a exp set"
  subexps :: "'a exp list => 'a exp set"
### theory "Draft.Expr"
### 7.312s elapsed time, 9.528s cpu time, 2.568s GC time
Loading theory "Draft.ExprMoreTemplates"
val templateLemmas =
   [("Expr.nsub_RI_Vals", "~ sub_RIs (map Val ?vs)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0))
             )
         )),
    ("Expr.map_vals_of_Vals",
     "map_vals_of (map Val ?vs) = \<lfloor>?vs\<rfloor>",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Expr.init_rhs_neq", "?e ~= INIT ?C (?Cs,?b) \<leftarrow> ?e",
     template_negation
      (
         template_equation
          (template_var 3,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0),
             template_var 3))
         )),
    ("Expr.ri_rhs_neq", "?e ~= RI (?C,?e') ; ?Cs \<leftarrow> ?e",
     template_negation
      (
         template_equation
          (template_var 3,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0),
             template_var 3))
         )),
    ("Expr.init_rhs_neq'", "INIT ?C (?Cs,?b) \<leftarrow> ?e ~= ?e",
     template_negation
      (
         template_equation
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0),
           template_var 0)
         )),
    ("Expr.ri_rhs_neq'", "RI (?C,?e') ; ?Cs \<leftarrow> ?e ~= ?e",
     template_negation
      (
         template_equation
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0),
           template_var 0)
         )),
    ("Expr.final_fv", "final ?e ==> fv ?e = {}",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Expr.nsub_RI_not_init", "~ sub_RI ?e ==> not_init ?C ?e",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Expr.nsub_RIs_not_inits", "~ sub_RIs ?es ==> not_inits ?C ?es",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Expr.finals_app_map", "finals (map Val ?vs @ ?es) = finals ?es",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_var 0)),
       template_app (template_hole 3, template_var 0))),
    ("Expr.not_finals_ConsI", "~ final ?e ==> ~ finals (?e # ?es)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 2, template_var 1))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))
               )
           ))),
    ("Expr.lass_val_of_nsub_RI",
     "lass_val_of ?e = \<lfloor>?a\<rfloor> ==> ~ sub_RI ?e",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 1))
           ))),
    ("Expr.map_vals_of_throw",
     "map_vals_of (map Val ?vs @ throw ?e # ?es') = None",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 2)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_var 0))),
       template_hole 0)),
    ("Expr.init_exp_of_neq'",
     "init_exp_of ?e = \<lfloor>?e'\<rfloor> ==> ?e ~= ?e'",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_negation
        (template_equation (template_var 1, template_var 0)))),
    ("Expr.init_exp_of_neq",
     "init_exp_of ?e = \<lfloor>?e'\<rfloor> ==> ?e' ~= ?e",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_negation
        (template_equation (template_var 0, template_var 1)))),
    ("Expr.throw_of_spec",
     "throw_of ?e = \<lfloor>?e'\<rfloor> ==> ?e = throw ?e'",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Expr.val_of_spec", "val_of ?e = \<lfloor>?v\<rfloor> ==> ?e = Val ?v",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Expr.bool_of_specF",
     "bool_of ?e = \<lfloor>False\<rfloor> ==> ?e = false",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 0),
          template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_var 0,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_hole 3))))),
    ("Expr.bool_of_specT",
     "bool_of ?e = \<lfloor>True\<rfloor> ==> ?e = true",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 0),
          template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_var 0,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_hole 3))))),
    ("Expr.map_vals_of_spec",
     "map_vals_of ?es = \<lfloor>?vs\<rfloor> ==> ?es = map Val ?vs",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Expr.map_Val_eq", "map Val ?vs = map Val ?vs' ==> ?vs = ?vs'",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_hole 1),
            template_var 1),
          template_app
           (template_app (template_hole 2, template_hole 1),
            template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Expr.lass_val_of_spec",
     "lass_val_of ?e = \<lfloor>?a\<rfloor> ==> ?e = fst ?a:=Val (snd ?a)",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_var 1,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("Expr.map_Val_nthrow_neq",
     "map Val ?vs = map Val ?vs' @ throw ?ex' # ?es' ==> False",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_hole 4),
            template_var 3),
          template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 2)),
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)),
              template_var 0)))],
       template_predicate (template_hole 0))),
    ("Expr.not_finals_ConsI2",
     "[| ?e = Val ?v; ~ finals ?es |] ==> ~ finals (?e # ?es)",
     template_implication
      ([template_equation
         (template_var 2, template_app (template_hole 3, template_var 1)),
        template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0))
               )
           ))),
    ("Expr.sub_RI_base",
     "?e = INIT ?C (?Cs,?b) \<leftarrow> ?e' |
      ?e = RI (?C,?e\<^sub>0) ; ?Cs \<leftarrow> ?e' ==>
      sub_RI ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 5),
                  template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 2, template_var 4),
                        template_var 3),
                      template_var 2),
                    template_var 1))),
              template_app
               (template_app (template_hole 3, template_var 5),
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 4),
                      template_var 0),
                    template_var 3),
                  template_var 1)))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 5)))),
    ("Expr.nsub_RIs_not_inits_aux",
     "[| ALL e:set ?es. ~ sub_RI e --> not_init ?C e; ~ sub_RIs ?es |]
      ==> not_inits ?C ?es",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              t_empty)
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Expr.subexp_size_le",
     "(subexp_of ?e' ?e --> size ?e' < size ?e) &
      (?e' : subexps ?es --> size ?e' < size_list size ?es)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_app (template_hole 4, template_var 1))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 2)),
                 template_app (template_hole 2, template_var 1)))),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_app
                (template_app (template_hole 0, template_hole 2),
                 template_var 0))))
         )),
    ("Expr.map_Val_throw_eq",
     "map Val ?vs @ throw ?ex # ?es = map Val ?vs' @ throw ?ex' # ?es' ==>
      ?ex = ?ex'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_var 5)),
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 4)),
              template_var 3)),
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_var 2)),
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)),
              template_var 0)))],
       template_equation (template_var 4, template_var 1))),
    ("Expr.finalE",
     "[| final ?e; !!v. ?e = Val v ==> ?R; !!a. ?e = Throw a ==> ?R |]
      ==> ?R",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Expr.finalsE",
     "[| finals ?es; !!vs. ?es = map Val vs ==> ?R;
         !!vs a es'. ?es = map Val vs @ Throw a # es' ==> ?R |]
      ==> ?R",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_var 0))),
    ("Expr.subexp_induct",
     "[| !!e. subexp e = {} ==> ?R e;
         !!e. (!!e'. subexp_of e' e ==> ?R e') ==> ?R e;
         !!es. (!!e'. e' : subexps es ==> ?R e') ==> ?Rs es |]
      ==> (ALL e'. subexp_of e' ?e --> ?R e') & ?R ?e",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2, template_app (template_hole 1, t_empty)),
             template_app (template_var 2, template_var 0))
           ))),
    ("Expr.subexps_induct",
     "[| !!es. subexps es = {} ==> ?Rs es;
         !!e. (!!e'. subexp_of e' e ==> ?R e') ==> ?R e;
         !!es. (!!e'. e' : subexps es ==> ?R e') ==> ?Rs es |]
      ==> (ALL e'. e' : subexps ?es --> ?R e') & ?Rs ?es",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2, template_app (template_hole 1, t_empty)),
             template_app (template_var 2, template_var 0))
           ))),
    ("Expr.sub_RI_sub_RIs_induct",
     "[| !!x. ?P1.0 (new x); !!x1 x2. ?P1.0 x2 ==> ?P1.0 (Cast x1 x2);
         !!x. ?P1.0 (Val x);
         !!x1 x2 x3.
            [| ?P1.0 x1; ?P1.0 x3 |]
            ==> ?P1.0 (x1 \<guillemotleft>x2\<guillemotright> x3);
         !!x. ?P1.0 (Var x); !!x1 x2. ?P1.0 x2 ==> ?P1.0 (x1:=x2);
         !!x1 x2 x3. ?P1.0 x1 ==> ?P1.0 (x1\<bullet>x2{x3});
         !!x1 x2 x3. ?P1.0 (x1\<bullet>\<^sub>sx2{x3});
         !!x1 x2 x3 x4.
            [| ?P1.0 x1; ?P1.0 x4 |] ==> ?P1.0 (x1\<bullet>x2{x3} := x4);
         !!x1 x2 x3 x4.
            ?P1.0 x4 ==> ?P1.0 (x1\<bullet>\<^sub>sx2{x3} := x4);
         !!x1 x2 x3. [| ?P1.0 x1; ?P2.0 x3 |] ==> ?P1.0 (x1\<bullet>x2(x3));
         !!x1 x2 x3. ?P2.0 x3 ==> ?P1.0 (x1\<bullet>\<^sub>sx2(x3));
         !!x1 x2 x3. ?P1.0 x3 ==> ?P1.0 {x1:x2; x3};
         !!x1 x2. [| ?P1.0 x1; ?P1.0 x2 |] ==> ?P1.0 (x1;; x2);
         !!x1 x2 x3.
            [| ?P1.0 x1; ?P1.0 x2; ?P1.0 x3 |]
            ==> ?P1.0 (if (x1) x2 else x3);
         !!x1 x2. [| ?P1.0 x1; ?P1.0 x2 |] ==> ?P1.0 (while (x1) x2);
         !!x. ?P1.0 x ==> ?P1.0 (throw x);
         !!x1 x2 x3 x4.
            [| ?P1.0 x1; ?P1.0 x4 |] ==> ?P1.0 (try x1 catch(x2 x3) x4);
         !!x1 x2 x3 x4.
            ?P1.0 x4 ==> ?P1.0 (INIT x1 (x2,x3) \<leftarrow> x4);
         !!x1 x2 x3 x4.
            [| ?P1.0 x2; ?P1.0 x4 |]
            ==> ?P1.0 (RI (x1,x2) ; x3 \<leftarrow> x4);
         ?P2.0 []; !!x1 x2. [| ?P1.0 x1; ?P2.0 x2 |] ==> ?P2.0 (x1 # x2) |]
      ==> ?P1.0 ?exp",
     template_implication
      ([template_predicate (template_app (template_hole 31, t_empty)),
        template_predicate (template_app (template_hole 31, t_empty)),
        template_predicate (template_app (template_hole 26, t_empty)),
        template_predicate (template_app (template_hole 28, t_empty)),
        template_predicate (template_app (template_hole 22, t_empty)),
        template_predicate (template_app (template_hole 22, t_empty)),
        template_predicate (template_app (template_hole 28, t_empty)),
        template_predicate (template_app (template_hole 31, t_empty)),
        template_predicate (template_app (template_hole 28, t_empty)),
        template_predicate (template_app (template_hole 31, t_empty)),
        template_predicate (template_app (template_hole 28, t_empty)),
        template_predicate (template_app (template_hole 31, t_empty)),
        template_predicate (template_app (template_hole 22, t_empty)),
        template_predicate (template_app (template_hole 28, t_empty)),
        template_predicate (template_app (template_hole 28, t_empty)),
        template_predicate (template_app (template_hole 28, t_empty)),
        template_predicate (template_app (template_hole 28, t_empty)),
        template_predicate (template_app (template_hole 28, t_empty)),
        template_predicate (template_app (template_hole 31, t_empty)),
        template_predicate (template_app (template_hole 31, t_empty)),
        template_predicate (template_app (template_var 1, template_hole 1)),
        template_predicate (template_app (template_hole 28, t_empty))],
       template_predicate (template_app (template_var 2, template_var 0)))),
    ("Expr.sub_RI_sub_RIs_induct",
     "[| !!x. ?P1.0 (new x); !!x1 x2. ?P1.0 x2 ==> ?P1.0 (Cast x1 x2);
         !!x. ?P1.0 (Val x);
         !!x1 x2 x3.
            [| ?P1.0 x1; ?P1.0 x3 |]
            ==> ?P1.0 (x1 \<guillemotleft>x2\<guillemotright> x3);
         !!x. ?P1.0 (Var x); !!x1 x2. ?P1.0 x2 ==> ?P1.0 (x1:=x2);
         !!x1 x2 x3. ?P1.0 x1 ==> ?P1.0 (x1\<bullet>x2{x3});
         !!x1 x2 x3. ?P1.0 (x1\<bullet>\<^sub>sx2{x3});
         !!x1 x2 x3 x4.
            [| ?P1.0 x1; ?P1.0 x4 |] ==> ?P1.0 (x1\<bullet>x2{x3} := x4);
         !!x1 x2 x3 x4.
            ?P1.0 x4 ==> ?P1.0 (x1\<bullet>\<^sub>sx2{x3} := x4);
         !!x1 x2 x3. [| ?P1.0 x1; ?P2.0 x3 |] ==> ?P1.0 (x1\<bullet>x2(x3));
         !!x1 x2 x3. ?P2.0 x3 ==> ?P1.0 (x1\<bullet>\<^sub>sx2(x3));
         !!x1 x2 x3. ?P1.0 x3 ==> ?P1.0 {x1:x2; x3};
         !!x1 x2. [| ?P1.0 x1; ?P1.0 x2 |] ==> ?P1.0 (x1;; x2);
         !!x1 x2 x3.
            [| ?P1.0 x1; ?P1.0 x2; ?P1.0 x3 |]
            ==> ?P1.0 (if (x1) x2 else x3);
         !!x1 x2. [| ?P1.0 x1; ?P1.0 x2 |] ==> ?P1.0 (while (x1) x2);
         !!x. ?P1.0 x ==> ?P1.0 (throw x);
         !!x1 x2 x3 x4.
            [| ?P1.0 x1; ?P1.0 x4 |] ==> ?P1.0 (try x1 catch(x2 x3) x4);
         !!x1 x2 x3 x4.
            ?P1.0 x4 ==> ?P1.0 (INIT x1 (x2,x3) \<leftarrow> x4);
         !!x1 x2 x3 x4.
            [| ?P1.0 x2; ?P1.0 x4 |]
            ==> ?P1.0 (RI (x1,x2) ; x3 \<leftarrow> x4);
         ?P2.0 []; !!x1 x2. [| ?P1.0 x1; ?P2.0 x2 |] ==> ?P2.0 (x1 # x2) |]
      ==> ?P2.0 ?exp_list",
     template_implication
      ([template_predicate (template_app (template_hole 31, t_empty)),
        template_predicate (template_app (template_hole 31, t_empty)),
        template_predicate (template_app (template_hole 26, t_empty)),
        template_predicate (template_app (template_hole 28, t_empty)),
        template_predicate (template_app (template_hole 22, t_empty)),
        template_predicate (template_app (template_hole 22, t_empty)),
        template_predicate (template_app (template_hole 28, t_empty)),
        template_predicate (template_app (template_hole 31, t_empty)),
        template_predicate (template_app (template_hole 28, t_empty)),
        template_predicate (template_app (template_hole 31, t_empty)),
        template_predicate (template_app (template_hole 28, t_empty)),
        template_predicate (template_app (template_hole 31, t_empty)),
        template_predicate (template_app (template_hole 22, t_empty)),
        template_predicate (template_app (template_hole 28, t_empty)),
        template_predicate (template_app (template_hole 28, t_empty)),
        template_predicate (template_app (template_hole 28, t_empty)),
        template_predicate (template_app (template_hole 28, t_empty)),
        template_predicate (template_app (template_hole 28, t_empty)),
        template_predicate (template_app (template_hole 31, t_empty)),
        template_predicate (template_app (template_hole 31, t_empty)),
        template_predicate (template_app (template_var 1, template_hole 1)),
        template_predicate (template_app (template_hole 28, t_empty))],
       template_predicate
        (template_app (template_var 1, template_var 0))))]:
   (string * thm * template) list
### theory "Draft.ExprMoreTemplates"
### 0.416s elapsed time, 0.681s cpu time, 0.099s GC time
val it = (): unit
