Loading theory "Draft.Auxiliary" (required by "Draft.TypeSafeMoreTemplates" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.WellTypeRT" via "Draft.WellType" via "Draft.Objects" via "Draft.TypeRel" via "Draft.Decl" via "Draft.Type")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.TypeSafeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.TypeSafeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.TypeSafeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Auxiliary"
### 0.141s elapsed time, 0.589s cpu time, 0.035s GC time
Loading theory "Draft.Type" (required by "Draft.TypeSafeMoreTemplates" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.WellTypeRT" via "Draft.WellType" via "Draft.Objects" via "Draft.TypeRel" via "Draft.Decl")
### theory "HOL-Library.Function_Algebras"
### 0.144s elapsed time, 0.596s cpu time, 0.035s GC time
Loading theory "HOL-Library.Transitive_Closure_Table" (required by "Draft.TypeSafeMoreTemplates" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.WellTypeRT" via "Draft.WellType" via "Draft.Objects" via "Draft.TypeRel")
Proofs for inductive predicate(s) "rtrancl_path"
  Proving monotonicity ...
### theory "HOL-Library.Set_Algebras"
### 0.192s elapsed time, 0.788s cpu time, 0.035s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.TypeSafeMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Proofs for inductive predicate(s) "rtrancl_tab"
  Proving monotonicity ...
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.377s elapsed time, 1.507s cpu time, 0.131s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.TypeSafeMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Transitive_Closure_Table"
### 0.318s elapsed time, 1.253s cpu time, 0.163s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.TypeSafeMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
### theory "Draft.Type"
### 0.635s elapsed time, 2.490s cpu time, 0.295s GC time
Loading theory "Draft.Decl" (required by "Draft.TypeSafeMoreTemplates" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.WellTypeRT" via "Draft.WellType" via "Draft.Objects" via "Draft.TypeRel")
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
### theory "Draft.Decl"
### 0.067s elapsed time, 0.273s cpu time, 0.000s GC time
Loading theory "Draft.TypeRel" (required by "Draft.TypeSafeMoreTemplates" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.WellTypeRT" via "Draft.WellType" via "Draft.Objects")
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Proofs for inductive predicate(s) "subcls1p"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  supercls_lst :: "'m prog => char list list => bool"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "widen"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
  Proving monotonicity ...
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Methods"
  Proving monotonicity ...
### theory "HOL-Library.Stream"
### 1.053s elapsed time, 3.995s cpu time, 0.886s GC time
### theory "HOL-Library.BigO"
### 0.995s elapsed time, 3.765s cpu time, 0.819s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Fields"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.TypeRel"
### 0.950s elapsed time, 2.964s cpu time, 0.771s GC time
Loading theory "Draft.Value" (required by "Draft.TypeSafeMoreTemplates" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.WellTypeRT" via "Draft.WellType" via "Draft.Objects")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.962s elapsed time, 6.312s cpu time, 1.183s GC time
Loading theory "Draft.Templates" (required by "Draft.TypeSafeMoreTemplates" via "Draft.ExtrEqs")
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Addr"
consts
  the_Intg :: "val => int"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_Addr :: "val => nat"
consts
  default_val :: "ty => val"
### theory "Draft.Value"
### 0.381s elapsed time, 0.819s cpu time, 0.117s GC time
Loading theory "Draft.Objects" (required by "Draft.TypeSafeMoreTemplates" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.WellTypeRT" via "Draft.WellType")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.112s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.TypeSafeMoreTemplates")
consts
  typeof_h :: "heap => val => ty option"
Proofs for inductive predicate(s) "iprog"
  Proving monotonicity ...
### theory "Draft.Objects"
### 0.482s elapsed time, 1.022s cpu time, 0.131s GC time
Loading theory "Draft.Exceptions" (required by "Draft.TypeSafeMoreTemplates" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.WellTypeRT" via "Draft.WellType" via "Draft.Expr")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.539s elapsed time, 1.138s cpu time, 0.131s GC time
### theory "Draft.Exceptions"
### 0.139s elapsed time, 0.228s cpu time, 0.000s GC time
Loading theory "Draft.Conform" (required by "Draft.TypeSafeMoreTemplates" via "Draft.TypeSafe" via "Draft.Progress")
Loading theory "Draft.Expr" (required by "Draft.TypeSafeMoreTemplates" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.WellTypeRT" via "Draft.WellType")
Loading theory "Draft.State" (required by "Draft.TypeSafeMoreTemplates" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.DefAss" via "Draft.BigStep")
Loading theory "Draft.SystemClasses" (required by "Draft.TypeSafeMoreTemplates" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.DefAss" via "Draft.BigStep" via "Draft.WWellForm" via "Draft.WellForm")
### Ambiguous input (line 34 of "$AFP/JinjaDCI/Common/Conform.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>hconf" ("_position" P) ("_position" h))
###   ("\<^const>HOL.conj"
###     ("_tuple"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" obj))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###             ("_applC" ("_position" Some) ("_position" obj)))
###           ("_position" P)))
###       ("_tuple_arg" ("\<^fixed>hconf" ("_position" h) ("_position" obj))))
###     ("_applC" ("_position" preallocated) ("_position" h))))
### ("\<^const>Pure.eq" ("\<^fixed>hconf" ("_position" P) ("_position" h))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" obj))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some) ("_position" obj)))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" h)
###           ("_position" obj))))
###     ("_applC" ("_position" preallocated) ("_position" h))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.State"
### 0.048s elapsed time, 0.189s cpu time, 0.000s GC time
### Ambiguous input (line 39 of "$AFP/JinjaDCI/Common/Conform.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>shconf" ("_position" P) ("_position" h) ("_position" sh))
###   ("_tuple"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" C) ("_idts" ("_position" sfs) ("_position" i)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" C))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" sfs) ("_tuple_arg" ("_position" i)))))
###         ("_position" P)))
###     ("_tuple_arg"
###       ("\<^fixed>shconf" ("_position" h) ("_position" C)
###         ("_position" sfs)))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>shconf" ("_position" P) ("_position" h) ("_position" sh))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" C) ("_idts" ("_position" sfs) ("_position" i)))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" C))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" sfs) ("_tuple_arg" ("_position" i)))))
###       ("\<^const>Conform.soconf" ("_position" P) ("_position" h)
###         ("_position" C) ("_position" sfs)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.SystemClasses"
### 0.081s elapsed time, 0.295s cpu time, 0.059s GC time
Loading theory "Draft.WellForm" (required by "Draft.TypeSafeMoreTemplates" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.DefAss" via "Draft.BigStep" via "Draft.WWellForm")
### theory "Draft.Conform"
### 0.179s elapsed time, 0.593s cpu time, 0.059s GC time
### theory "Draft.WellForm"
### 0.258s elapsed time, 0.643s cpu time, 0.060s GC time
Found termination order: "{}"
### Ambiguous input (line 129 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 130 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" fv) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("_applC" ("_position" fv) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" fv) ("_position" e\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  fv :: "char list exp => char list set"
  fvs :: "char list exp list => char list set"
Found termination order: "{}"
### Ambiguous input (line 161 of "$AFP/JinjaDCI/J/Expr.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lass_val_of)
###       ("\<^const>Expr.exp.LAss" ("_position" V)
###         ("_applC" ("_position" Val) ("_position" v))))
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" V) ("_tuple_arg" ("_position" v))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" lass_val_of)
###       ("_updbind" ("_position" V)
###         ("_applC" ("_position" Val) ("_position" v))))
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" V) ("_tuple_arg" ("_position" v))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 252 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" sub_RI)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>1))
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub_RI)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>1))
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub_RI)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>1))
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 253 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" sub_RI)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub_RI)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub_RI)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  sub_RI :: "'a exp => bool"
  sub_RIs :: "'a exp list => bool"
### Ambiguous input (line 295 of "$AFP/JinjaDCI/J/Expr.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C')
###         ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" not_init)
###         ("_cargs" ("_position" C') ("_position" e\<^sub>1)))
###       ("_applC" ("_position" not_init)
###         ("_cargs" ("_position" C') ("_position" e\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C')
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" not_init)
###         ("_cargs" ("_position" C') ("_position" e\<^sub>1)))
###       ("_applC" ("_position" not_init)
###         ("_cargs" ("_position" C') ("_position" e\<^sub>2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 296 of "$AFP/JinjaDCI/J/Expr.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C')
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C') ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C')
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C') ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  not_init :: "char list => 'a exp => bool"
  not_inits :: "char list => 'a exp list => bool"
### Ambiguous input (line 336 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" subexp)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("\<^const>Set.union"
###         ("_Finset"
###           ("_args" ("_position" e\<^sub>1) ("_position" e\<^sub>2)))
###         ("_applC" ("_position" subexp) ("_position" e\<^sub>1)))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subexp)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("\<^const>Set.union"
###         ("_Finset"
###           ("_args" ("_position" e\<^sub>1) ("_position" e\<^sub>2)))
###         ("_applC" ("_position" subexp) ("_position" e\<^sub>1)))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subexp)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("\<^const>Set.union"
###         ("_Finset"
###           ("_args" ("_position" e\<^sub>1) ("_position" e\<^sub>2)))
###         ("_applC" ("_position" subexp) ("_position" e\<^sub>1)))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 337 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" subexp)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union" ("_Finset" ("_position" e\<^sub>2))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subexp)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union" ("_Finset" ("_position" e\<^sub>2))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subexp)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union" ("_Finset" ("_position" e\<^sub>2))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  subexp :: "'a exp => 'a exp set"
  subexps :: "'a exp list => 'a exp set"
### theory "Draft.Expr"
### 7.487s elapsed time, 10.357s cpu time, 2.711s GC time
Loading theory "Draft.WellType" (required by "Draft.TypeSafeMoreTemplates" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.WellTypeRT")
Loading theory "Draft.WWellForm" (required by "Draft.TypeSafeMoreTemplates" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.DefAss" via "Draft.BigStep")
### Ambiguous input (line 67 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" T)
###         ("_position" D)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" T')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" T)
###         ("_position" D)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" T')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 63 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WT" ("_position" P) ("_position" E) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" T)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WT" ("_position" P) ("_position" E) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" T)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "WT", "WTs"
  Proving monotonicity ...
### theory "Draft.WWellForm"
### 0.183s elapsed time, 0.439s cpu time, 0.061s GC time
Loading theory "Draft.SmallStep" (required by "Draft.TypeSafeMoreTemplates" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.EConform")
Loading theory "Draft.BigStep" (required by "Draft.TypeSafeMoreTemplates" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.DefAss")
### Ambiguous input (line 129 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts)))
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E) ("_position" e)
###       ("\<^const>HOL.conj" ("_position" T)
###         ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###           ("_position" es) ("_position" Ts))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts)))
###     ("\<^const>HOL.conj"
###       ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###         ("_position" e) ("_position" T))
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("_position" es) ("_position" Ts)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 132 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" Ts))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" U) ("_position" Us))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts)
###           ("\<^const>List.list.Cons" ("_position" U) ("_position" Us)))
###         ("\<^const>HOL.conj"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e) ("_position" U))
###           ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###             ("_position" es) ("_position" Us)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" Ts))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" U) ("_position" Us))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts)
###           ("\<^const>List.list.Cons" ("_position" U) ("_position" Us)))
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e)
###           ("\<^const>HOL.conj" ("_position" U)
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es) ("_position" Us))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 136 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" Ts)
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("\<^const>List.append" ("_position" es\<^sub>1)
###           ("_position" es\<^sub>2))
###         ("_position" Ts))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Ts\<^sub>1) ("_position" Ts\<^sub>2))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" Ts)
###             ("\<^const>List.append" ("_position" Ts\<^sub>1)
###               ("_position" Ts\<^sub>2)))
###           ("\<^const>HOL.conj"
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es\<^sub>1) ("_position" Ts\<^sub>1))
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es\<^sub>2) ("_position" Ts\<^sub>2))))))))
### ("\<^const>Pure.all_binder" ("_position" Ts)
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("\<^const>List.append" ("_position" es\<^sub>1)
###           ("_position" es\<^sub>2))
###         ("_position" Ts))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Ts\<^sub>1) ("_position" Ts\<^sub>2))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" Ts)
###             ("\<^const>List.append" ("_position" Ts\<^sub>1)
###               ("_position" Ts\<^sub>2)))
###           ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###             ("_position" es\<^sub>1)
###             ("\<^const>HOL.conj" ("_position" Ts\<^sub>1)
###               ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###                 ("_position" es\<^sub>2) ("_position" Ts\<^sub>2)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 157 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("_applC" ("_position" Val) ("_position" v)) ("_position" T))
###     ("\<^const>HOL.eq" ("_applC" ("_position" typeof) ("_position" v))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("_applC" ("_position" Val) ("_position" v))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq" ("_applC" ("_position" typeof) ("_position" v))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### typeof ?v = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Val ?v :: ?T
### Ignoring duplicate safe introduction (intro!)
### typeof ?v = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Val ?v :: ?T
### Ambiguous input (line 160 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("_applC" ("_position" Var) ("_position" V)) ("_position" T))
###     ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("_applC" ("_position" Var) ("_position" V))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### ?E ?V = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Var ?V :: ?T
### Ignoring duplicate safe introduction (intro!)
### ?E ?V = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Var ?V :: ?T
### Ambiguous input (line 163 of "$AFP/JinjaDCI/J/WellType.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>HOL.conj"
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>1) ("_position" T\<^sub>1))
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" T\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>HOL.conj"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>1) ("_position" T\<^sub>1))
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1)
###         ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>1)
###           ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###             ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###               ("_position" e\<^sub>2) ("_position" T\<^sub>2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 16 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" blocks)
###       ("_tuple" ("\<^const>List.list.Cons" ("_position" V) ("_position" Vs))
###         ("_tuple_args"
###           ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts))
###           ("_tuple_args"
###             ("\<^const>List.list.Cons" ("_position" v) ("_position" vs))
###             ("_tuple_arg" ("_position" e))))))
###     ("\<^const>Expr.exp.Block" ("_position" V)
###       ("\<^const>Expr.exp.LAss" ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_applC" ("_position" blocks)
###         ("_tuple" ("_position" Vs)
###           ("_tuple_args" ("_position" Ts)
###             ("_tuple_args" ("_position" vs)
###               ("_tuple_arg" ("_position" e)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" blocks)
###       ("_tuple" ("\<^const>List.list.Cons" ("_position" V) ("_position" Vs))
###         ("_tuple_args"
###           ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts))
###           ("_tuple_args"
###             ("\<^const>List.list.Cons" ("_position" v) ("_position" vs))
###             ("_tuple_arg" ("_position" e))))))
###     ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###       ("_applC" ("_position" Val) ("_position" v))
###       ("_applC" ("_position" blocks)
###         ("_tuple" ("_position" Vs)
###           ("_tuple_args" ("_position" Ts)
###             ("_tuple_args" ("_position" vs)
###               ("_tuple_arg" ("_position" e)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Missing patterns in function definition:
### !!vc vd vb. blocks ([], vc # vd, vb) = undefined
### !!v ve vf vd. blocks ([], v, ve # vf, vd) = undefined
### !!va vb vc. blocks (va # vb, [], vc) = undefined
### (3 more)
### Ambiguous input (line 157 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" b) ("_position" t))
###                 ("\<^const>TypeRel.has_field" ("_position" P)
###                   ("_position" C) ("_position" F) ("_position" b)
###                   ("_position" t) ("_position" D)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" b) ("_position" t))
###                 ("\<^const>TypeRel.has_field" ("_position" P)
###                   ("_position" C) ("_position" F) ("_position" b)
###                   ("_position" t) ("_position" D)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 139 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" NonStatic) ("_position" t)
###               ("_position" D)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" fs')
###                 ("_MapUpd" ("_position" fs)
###                   ("_maplet"
###                     ("_tuple" ("_position" F)
###                       ("_tuple_arg" ("_position" D)))
###                     ("_position" v)))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                   ("_MapUpd" ("_position" h\<^sub>2)
###                     ("_maplet" ("_position" a)
###                       ("_tuple" ("_position" C)
###                         ("_tuple_arg" ("_position" fs')))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" NonStatic) ("_position" t)
###               ("_position" D)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" fs')
###                 ("_MapUpd" ("_position" fs)
###                   ("_maplet"
###                     ("_tuple" ("_position" F)
###                       ("_tuple_arg" ("_position" D)))
###                     ("_position" v)))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                   ("_MapUpd" ("_position" h\<^sub>2)
###                     ("_maplet" ("_position" a)
###                       ("_tuple" ("_position" C)
###                         ("_tuple_arg" ("_position" fs')))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 145 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_position" null) ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_position" null) ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 162 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" Static) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" Static) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 149 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 167 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" sfs')
###               ("_MapUpd" ("_position" sfs)
###                 ("_maplet" ("_position" F) ("_position" v)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" sh\<^sub>1')
###                 ("_MapUpd" ("_position" sh\<^sub>1)
###                   ("_maplet" ("_position" D)
###                     ("_tuple" ("_position" sfs')
###                       ("_tuple_arg" ("_position" Done))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" sfs')
###               ("_MapUpd" ("_position" sfs)
###                 ("_maplet" ("_position" F) ("_position" v)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" sh\<^sub>1')
###                 ("_MapUpd" ("_position" sh\<^sub>1)
###                   ("_maplet" ("_position" D)
###                     ("_tuple" ("_position" sfs')
###                       ("_tuple_arg" ("_position" Done))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 153 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 173 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Not_Ex" ("_position" sfs)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" sfs)
###                   ("_tuple_arg" ("_position" Done)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P)
###               ("\<^const>Expr.exp.INIT" ("_position" D)
###                 ("_list" ("_position" D)) ("_position" False)
###                 ("_position" unit))
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args" ("_position" l\<^sub>1)
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_applC" ("_position" Val) ("_position" v'))
###               ("_tuple" ("_position" h')
###                 ("_tuple_args" ("_position" l')
###                   ("_tuple_arg" ("_position" sh'))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" sh') ("_position" D))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" sfs)
###                     ("_tuple_arg" ("_position" i))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" sfs')
###                   ("_MapUpd" ("_position" sfs)
###                     ("_maplet" ("_position" F) ("_position" v)))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" sh'')
###                     ("_MapUpd" ("_position" sh')
###                       ("_maplet" ("_position" D)
###                         ("_tuple" ("_position" sfs')
###                           ("_tuple_arg" ("_position" i))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l')
###           ("_tuple_arg" ("_position" sh'')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Not_Ex" ("_position" sfs)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" sfs)
###                   ("_tuple_arg" ("_position" Done)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P)
###               ("\<^const>Expr.exp.INIT" ("_position" D)
###                 ("_list" ("_position" D)) ("_position" False)
###                 ("_position" unit))
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args" ("_position" l\<^sub>1)
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_applC" ("_position" Val) ("_position" v'))
###               ("_tuple" ("_position" h')
###                 ("_tuple_args" ("_position" l')
###                   ("_tuple_arg" ("_position" sh'))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" sh') ("_position" D))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" sfs)
###                     ("_tuple_arg" ("_position" i))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" sfs')
###                   ("_MapUpd" ("_position" sfs)
###                     ("_maplet" ("_position" F) ("_position" v)))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" sh'')
###                     ("_MapUpd" ("_position" sh')
###                       ("_maplet" ("_position" D)
###                         ("_tuple" ("_position" sfs')
###                           ("_tuple_arg" ("_position" i))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l')
###           ("_tuple_arg" ("_position" sh'')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 181 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Not_Ex" ("_position" sfs)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" sfs)
###                   ("_tuple_arg" ("_position" Done)))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P)
###               ("\<^const>Expr.exp.INIT" ("_position" D)
###                 ("_list" ("_position" D)) ("_position" False)
###                 ("_position" unit))
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args" ("_position" l\<^sub>1)
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_applC" ("_position" throw) ("_position" a))
###               ("_position" s')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_applC" ("_position" throw) ("_position" a))
###       ("_position" s'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Not_Ex" ("_position" sfs)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" sfs)
###                   ("_tuple_arg" ("_position" Done)))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P)
###               ("\<^const>Expr.exp.INIT" ("_position" D)
###                 ("_list" ("_position" D)) ("_position" False)
###                 ("_position" unit))
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args" ("_position" l\<^sub>1)
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_applC" ("_position" throw) ("_position" a))
###               ("_position" s')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_applC" ("_position" throw) ("_position" a))
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 268 of "$AFP/JinjaDCI/J/BigStep.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args"
###           ("_Update" ("_position" l\<^sub>0)
###             ("_updbind" ("_position" V) ("_position" None)))
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args" ("_position" l\<^sub>0)
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args"
###           ("_applC" ("_position" l\<^sub>1)
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V))))
###           ("_tuple_arg" ("_position" sh\<^sub>1)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args"
###           ("_applC" ("_position" l\<^sub>0)
###             ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args" ("_position" l\<^sub>0)
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args"
###           ("_applC" ("_position" l\<^sub>1)
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V))))
###           ("_tuple_arg" ("_position" sh\<^sub>1)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args"
###           ("_Update" ("_position" l\<^sub>0)
###             ("_updbind" ("_position" V) ("_position" None)))
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args" ("_position" l\<^sub>0)
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args"
###           ("_Update" ("_position" l\<^sub>1)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V))))
###           ("_tuple_arg" ("_position" sh\<^sub>1)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args"
###           ("_applC" ("_position" l\<^sub>0)
###             ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args" ("_position" l\<^sub>0)
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args"
###           ("_Update" ("_position" l\<^sub>1)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V))))
###           ("_tuple_arg" ("_position" sh\<^sub>1)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 187 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 191 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" b) ("_position" t))
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" b) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" b) ("_position" t))
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" b) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 196 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" t)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" t)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 324 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" Throw) ("_position" a))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" h\<^sub>1) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###             ("_position" C)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args"
###                   ("_MapUpd" ("_position" l\<^sub>1)
###                     ("_maplet" ("_position" V)
###                       ("_applC" ("_position" Addr) ("_position" a))))
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_position" e\<^sub>2')
###               ("_tuple" ("_position" h\<^sub>2)
###                 ("_tuple_args" ("_position" l\<^sub>2)
###                   ("_tuple_arg" ("_position" sh\<^sub>2))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" e\<^sub>2')
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args"
###           ("_applC" ("_position" l\<^sub>2)
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l\<^sub>1) ("_position" V))))
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" Throw) ("_position" a))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" h\<^sub>1) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###             ("_position" C)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args"
###                   ("_MapUpd" ("_position" l\<^sub>1)
###                     ("_maplet" ("_position" V)
###                       ("_applC" ("_position" Addr) ("_position" a))))
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_position" e\<^sub>2')
###               ("_tuple" ("_position" h\<^sub>2)
###                 ("_tuple_args" ("_position" l\<^sub>2)
###                   ("_tuple_arg" ("_position" sh\<^sub>2))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" e\<^sub>2')
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args"
###           ("_Update" ("_position" l\<^sub>2)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l\<^sub>1) ("_position" V))))
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 179 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.FAss" ("_position" a) ("_position" F)
###       ("_position" D) ("_position" v))
###     ("_position" T)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" a) ("_position" F)
###         ("_position" D))
###       ("_position" v))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order:
  "(%p. size_list size (fst (snd (snd p)))) <*mlex*> {}"
### Ambiguous input (line 180 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###       ("_position" D) ("_position" v))
###     ("_position" T)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_position" v))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 47 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" icheck)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" D')
###           ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###             ("_position" D) ("_applC" ("_position" Val) ("_position" v))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" D') ("_position" D))
###       ("\<^const>HOL.Ex_binder" ("_position" T)
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" T)
###           ("_position" D))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" icheck)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" D')
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###               ("_position" D))
###             ("_applC" ("_position" Val) ("_position" v))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" D') ("_position" D))
###       ("\<^const>HOL.Ex_binder" ("_position" T)
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" T)
###           ("_position" D))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.WellType"
### 0.704s elapsed time, 2.250s cpu time, 0.214s GC time
Loading theory "Draft.WellTypeRT" (required by "Draft.TypeSafeMoreTemplates" via "Draft.TypeSafe" via "Draft.Progress")
### Ambiguous input (line 69 of "$AFP/JinjaDCI/J/WellTypeRT.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###         ("_position" sh) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" T)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###             ("_position" sh) ("_position" e\<^sub>2)
###             ("_position" T\<^sub>2)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P)
###               ("_position" T\<^sub>2) ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###       ("_position" sh)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###         ("_position" sh) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" T)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###             ("_position" sh) ("_position" e\<^sub>2)
###             ("_position" T\<^sub>2)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P)
###               ("_position" T\<^sub>2) ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###       ("_position" sh)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 73 of "$AFP/JinjaDCI/J/WellTypeRT.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###         ("_position" sh) ("_position" e\<^sub>1) ("_position" NT)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###           ("_position" sh) ("_position" e\<^sub>2)
###           ("_position" T\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###       ("_position" sh)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###         ("_position" sh) ("_position" e\<^sub>1) ("_position" NT)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###           ("_position" sh) ("_position" e\<^sub>2)
###           ("_position" T\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###       ("_position" sh)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 77 of "$AFP/JinjaDCI/J/WellTypeRT.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###         ("_position" sh) ("_position" e\<^sub>2) ("_position" T\<^sub>2)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" T)
###           ("_position" D)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T\<^sub>2)
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###       ("_position" sh)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###         ("_position" sh) ("_position" e\<^sub>2) ("_position" T\<^sub>2)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" T)
###           ("_position" D)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T\<^sub>2)
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###       ("_position" sh)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "WTrt", "WTrts"
Proofs for inductive predicate(s) "eval", "evals"
  Proving monotonicity ...
  Proving monotonicity ...
### Ignoring duplicate safe introduction (intro!)
### ?P,?E,?h,?sh \<turnstile> [] [:] []
### Ignoring duplicate safe introduction (intro!)
### ?P,?E,?h,?sh \<turnstile> [] [:] []
### Ambiguous input (line 161 of "$AFP/JinjaDCI/J/WellTypeRT.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts)))
###     ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh) ("_position" e)
###       ("\<^const>HOL.conj" ("_position" T)
###         ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" sh) ("_position" es)
###           ("_position" Ts))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts)))
###     ("\<^const>HOL.conj"
###       ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" sh) ("_position" e) ("_position" T))
###       ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" sh) ("_position" es)
###         ("_position" Ts)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 164 of "$AFP/JinjaDCI/J/WellTypeRT.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" Ts))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" U) ("_position" Us))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts)
###           ("\<^const>List.list.Cons" ("_position" U) ("_position" Us)))
###         ("\<^const>HOL.conj"
###           ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" sh) ("_position" e)
###             ("_position" U))
###           ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" sh) ("_position" es)
###             ("_position" Us)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" Ts))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" U) ("_position" Us))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts)
###           ("\<^const>List.list.Cons" ("_position" U) ("_position" Us)))
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" sh) ("_position" e)
###           ("\<^const>HOL.conj" ("_position" U)
###             ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###               ("_position" h) ("_position" sh) ("_position" es)
###               ("_position" Us))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 168 of "$AFP/JinjaDCI/J/WellTypeRT.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" Ts)
###     ("\<^const>HOL.eq"
###       ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" sh)
###         ("\<^const>List.append" ("_position" es\<^sub>1)
###           ("_position" es\<^sub>2))
###         ("_position" Ts))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Ts\<^sub>1) ("_position" Ts\<^sub>2))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" Ts)
###             ("\<^const>List.append" ("_position" Ts\<^sub>1)
###               ("_position" Ts\<^sub>2)))
###           ("\<^const>HOL.conj"
###             ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###               ("_position" h) ("_position" sh) ("_position" es\<^sub>1)
###               ("_position" Ts\<^sub>1))
###             ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###               ("_position" h) ("_position" sh) ("_position" es\<^sub>2)
###               ("_position" Ts\<^sub>2))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" Ts)
###     ("\<^const>HOL.eq"
###       ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" sh)
###         ("\<^const>List.append" ("_position" es\<^sub>1)
###           ("_position" es\<^sub>2))
###         ("_position" Ts))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Ts\<^sub>1) ("_position" Ts\<^sub>2))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" Ts)
###             ("\<^const>List.append" ("_position" Ts\<^sub>1)
###               ("_position" Ts\<^sub>2)))
###           ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" sh) ("_position" es\<^sub>1)
###             ("\<^const>HOL.conj" ("_position" Ts\<^sub>1)
###               ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###                 ("_position" h) ("_position" sh) ("_position" es\<^sub>2)
###                 ("_position" Ts\<^sub>2)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 189 of "$AFP/JinjaDCI/J/WellTypeRT.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("_applC" ("_position" Val) ("_position" v)) ("_position" T))
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Objects.typeof_h" ("_position" h))
###         ("_position" v))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###     ("_position" h) ("_position" sh)
###     ("_applC" ("_position" Val) ("_position" v))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq"
###         ("_applC" ("\<^const>Objects.typeof_h" ("_position" h))
###           ("_position" v))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### typeof\<^bsub>?h\<^esub> ?v = \<lfloor>?T\<rfloor> ==>
### ?P,?E,?h,?sh \<turnstile> Val ?v : ?T
### Ignoring duplicate safe introduction (intro!)
### typeof\<^bsub>?h\<^esub> ?v = \<lfloor>?T\<rfloor> ==>
### ?P,?E,?h,?sh \<turnstile> Val ?v : ?T
### Ambiguous input (line 192 of "$AFP/JinjaDCI/J/WellTypeRT.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("_applC" ("_position" Var) ("_position" v)) ("_position" T))
###     ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" v))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###     ("_position" h) ("_position" sh)
###     ("_applC" ("_position" Var) ("_position" v))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" v))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 195 of "$AFP/JinjaDCI/J/WellTypeRT.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>HOL.conj"
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" sh) ("_position" e\<^sub>1)
###           ("_position" T\<^sub>1))
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" sh) ("_position" e\<^sub>2)
###           ("_position" T\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###     ("_position" h) ("_position" sh)
###     ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>HOL.conj"
###           ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" sh) ("_position" e\<^sub>1)
###             ("_position" T\<^sub>1))
###           ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" sh) ("_position" e\<^sub>2)
###             ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" sh) ("_position" e\<^sub>1)
###         ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###           ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" sh) ("_position" e\<^sub>2)
###             ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###     ("_position" h) ("_position" sh)
###     ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" sh) ("_position" e\<^sub>1)
###           ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###             ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###               ("_position" h) ("_position" sh) ("_position" e\<^sub>2)
###               ("_position" T\<^sub>2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 198 of "$AFP/JinjaDCI/J/WellTypeRT.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_position" T'))
###     ("\<^const>WellTypeRT.WTrt2" ("_position" P)
###       ("_MapUpd" ("_position" E)
###         ("_maplet" ("_position" V) ("_position" T)))
###       ("_position" h) ("_position" sh) ("_position" e) ("_position" T'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###     ("_position" h) ("_position" sh)
###     ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###       ("_position" e))
###     ("\<^const>HOL.eq" ("_position" T')
###       ("\<^const>WellTypeRT.WTrt2" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" h) ("_position" sh) ("_position" e)
###         ("_position" T')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### ?P,?E(?V |-> ?T),?h,?sh \<turnstile> ?e : ?T' ==>
### ?P,?E,?h,?sh \<turnstile> {?V:?T; ?e} : ?T'
### Ignoring duplicate safe introduction (intro!)
### ?P,?E(?V |-> ?T),?h,?sh \<turnstile> ?e : ?T' ==>
### ?P,?E,?h,?sh \<turnstile> {?V:?T; ?e} : ?T'
### Ambiguous input (line 211 of "$AFP/JinjaDCI/J/WellTypeRT.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###     ("_position" h) ("_position" sh)
###     ("\<^const>Expr.exp.FAss" ("_position" e) ("_position" F)
###       ("_position" D) ("_position" v))
###     ("_position" T)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###     ("_position" h) ("_position" sh)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###         ("_position" D))
###       ("_position" v))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 212 of "$AFP/JinjaDCI/J/WellTypeRT.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###     ("_position" h) ("_position" sh)
###     ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###       ("_position" D) ("_position" v))
###     ("_position" T)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###     ("_position" h) ("_position" sh)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_position" v))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.WellTypeRT"
### 1.210s elapsed time, 4.139s cpu time, 0.369s GC time
Found termination order: "{}"
### Ambiguous input (line 51 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###       ("_position" None)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Not"
###       ("_applC" ("_position" icheck)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C')
###             ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###               ("_position" D)
###               ("_constrain" ("_position" e\<^sub>2)
###                 ("_tapp" ("_position_sort" 'a) ("_type_name" exp))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###       ("_position" None)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Not"
###       ("_applC" ("_position" icheck)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C')
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###                 ("_position" D))
###               ("_constrain" ("_position" e\<^sub>2)
###                 ("_tapp" ("_position_sort" 'a) ("_type_name" exp))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 181 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" b) ("_position" t))
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" b) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" addr) ("_position" a)) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" b) ("_position" t))
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" b) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss"
###         ("_applC" ("_position" addr) ("_position" a)) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 153 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.SFAcc"
###         ("\<^const>Expr.exp.INIT" ("_position" D) ("_list" ("_position" D))
###           ("_position" False) ("_position" C))
###         ("_position" F) ("_position" D))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.INIT" ("_position" D) ("_list" ("_position" D))
###         ("_position" False)
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 185 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" addr) ("_position" a)) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss"
###         ("_applC" ("_position" addr) ("_position" a)) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 189 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e'))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e'))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e'))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e'))
###       ("_position" s') ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 166 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e') ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e') ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.FAss" ("_position" e') ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.FAss" ("_position" e') ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s') ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 193 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" sfs) ("_tuple_arg" ("_position" i))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" sfs')
###             ("_MapUpd" ("_position" sfs)
###               ("_maplet" ("_position" F) ("_position" v)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" sh')
###               ("_MapUpd" ("_position" sh)
###                 ("_maplet" ("_position" D)
###                   ("_tuple" ("_position" sfs')
###                     ("_tuple_arg" ("_position" i)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" True) ("_position" unit)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh'))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" sfs) ("_tuple_arg" ("_position" i))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" sfs')
###             ("_MapUpd" ("_position" sfs)
###               ("_maplet" ("_position" F) ("_position" v)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" sh')
###               ("_MapUpd" ("_position" sh)
###                 ("_maplet" ("_position" D)
###                   ("_tuple" ("_position" sfs')
###                     ("_tuple_arg" ("_position" i)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" True) ("_position" unit)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh'))))
###       ("_position" False))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 170 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e'))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e'))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e'))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e'))
###       ("_position" s') ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 174 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" NonStatic) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" addr) ("_position" a)) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" unit)
###       ("_tuple"
###         ("_MapUpd" ("_position" h)
###           ("_maplet" ("_position" a)
###             ("_tuple" ("_position" C)
###               ("_tuple_arg"
###                 ("_MapUpd" ("_position" fs)
###                   ("_maplet"
###                     ("_tuple" ("_position" F)
###                       ("_tuple_arg" ("_position" D)))
###                     ("_position" v)))))))
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" NonStatic) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss"
###         ("_applC" ("_position" addr) ("_position" a)) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" unit)
###       ("_tuple"
###         ("_MapUpd" ("_position" h)
###           ("_maplet" ("_position" a)
###             ("_tuple" ("_position" C)
###               ("_tuple_arg"
###                 ("_MapUpd" ("_position" fs)
###                   ("_maplet"
###                     ("_tuple" ("_position" F)
###                       ("_tuple_arg" ("_position" D)))
###                     ("_position" v)))))))
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 199 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" sfs)
###               ("_tuple_arg" ("_position" Done))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" True))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" sfs)
###               ("_tuple_arg" ("_position" Done))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" True))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" sfs)
###               ("_tuple_arg" ("_position" Done))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" True))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" sfs)
###               ("_tuple_arg" ("_position" Done))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" True))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 178 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" null) ("_position" F)
###         ("_position" D))
###       ("_applC" ("_position" Val) ("_position" v)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" THROW) ("_position" NullPointer)) ("_position" s)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_position" null) ("_position" F)
###       ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" THROW) ("_position" NullPointer)) ("_position" s)
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 267 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 319 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" hp)
###           ("_cargs" ("_position" s) ("_position" a)))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###           ("_position" C)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch"
###         ("_applC" ("_position" Throw) ("_position" a)) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss"
###           ("_applC" ("_position" Class) ("_position" C))
###           ("_applC" ("_position" addr) ("_position" a)))
###         ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" hp)
###           ("_cargs" ("_position" s) ("_position" a)))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###           ("_position" C)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch"
###         ("_applC" ("_position" Throw) ("_position" a)) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V)
###         ("_applC" ("_position" Class) ("_position" C))
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 204 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc"
###           ("\<^const>Expr.exp.INIT" ("_position" D)
###             ("_list" ("_position" D)) ("_position" False) ("_position" C))
###           ("_position" F) ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc"
###           ("\<^const>Expr.exp.INIT" ("_position" D)
###             ("_list" ("_position" D)) ("_position" False) ("_position" C))
###           ("_position" F) ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.SFAss"
###         ("\<^const>Expr.exp.INIT" ("_position" D) ("_list" ("_position" D))
###           ("_position" False) ("_position" C))
###         ("_position" F) ("_position" D)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.SFAss"
###         ("\<^const>Expr.exp.INIT" ("_position" D) ("_list" ("_position" D))
###           ("_position" False) ("_position" C))
###         ("_position" F) ("_position" D)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.INIT" ("_position" D) ("_list" ("_position" D))
###         ("_position" False)
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_applC" ("_position" Val) ("_position" v))))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.INIT" ("_position" D) ("_list" ("_position" D))
###         ("_position" False)
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_applC" ("_position" Val) ("_position" v))))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.INIT" ("_position" D) ("_list" ("_position" D))
###         ("_position" False)
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_applC" ("_position" Val) ("_position" v))))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.INIT" ("_position" D) ("_list" ("_position" D))
###         ("_position" False)
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_applC" ("_position" Val) ("_position" v))))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 209 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Not"
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" b) ("_position" t))
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" b) ("_position" t)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_position" s) ("_position" b)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_position" s) ("_position" False))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Not"
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" b) ("_position" t))
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" b) ("_position" t)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_position" s) ("_position" b)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_position" s) ("_position" False))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 271 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 213 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###       ("_position" F) ("_position" NonStatic) ("_position" t)
###       ("_position" D)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_position" s) ("_position" b)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_position" s) ("_position" False))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###       ("_position" F) ("_position" NonStatic) ("_position" t)
###       ("_position" D)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_position" s) ("_position" b)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_position" s) ("_position" False))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 388 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc"
###         ("_applC" ("_position" throw) ("_position" e)) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" throw) ("_position" e)) ("_position" s)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_applC" ("_position" throw) ("_position" e))
###       ("_position" F) ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" throw) ("_position" e)) ("_position" s)
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 389 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D))
###       ("_applC" ("_position" throw) ("_position" e)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" throw) ("_position" e)) ("_position" s)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###       ("_position" F) ("_position" D)
###       ("_applC" ("_position" throw) ("_position" e)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" throw) ("_position" e)) ("_position" s)
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 395 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###       ("_applC" ("_position" Val) ("_position" v))
###       ("_applC" ("_position" Throw) ("_position" a)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" Throw) ("_position" a)) ("_position" s)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.Block" ("_position" V)
###       ("\<^const>Expr.exp.LAss" ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_applC" ("_position" Throw) ("_position" a)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" Throw) ("_position" a)) ("_position" s)
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 390 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_applC" ("_position" throw) ("_position" e)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" throw) ("_position" e)) ("_position" s)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###       ("_position" D) ("_applC" ("_position" throw) ("_position" e)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" throw) ("_position" e)) ("_position" s)
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 275 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 282 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###       ("_applC" ("_position" Val) ("_position" v))
###       ("_applC" ("_position" Val) ("_position" u)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" Val) ("_position" u)) ("_position" s)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.Block" ("_position" V)
###       ("\<^const>Expr.exp.LAss" ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_applC" ("_position" Val) ("_position" u)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" Val) ("_position" u)) ("_position" s)
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "redp", "redsp"
  Proving monotonicity ...
### Ambiguous input (line 416 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BigStep.eval" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BigStep.eval" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 417 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BigStep.eval" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BigStep.eval" ("_position" P)
###     ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.BigStep"
### 7.299s elapsed time, 20.535s cpu time, 1.760s GC time
Loading theory "Draft.DefAss" (required by "Draft.TypeSafeMoreTemplates" via "Draft.TypeSafe" via "Draft.Progress")
### Ambiguous input (line 91 of "$AFP/JinjaDCI/J/DefAss.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" \<A>)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>DefAss.hyperUn"
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>DefAss.hyperUn"
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>DefAss.hyperUn"
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 92 of "$AFP/JinjaDCI/J/DefAss.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" \<A>)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" \<A>) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("_applC" ("_position" \<A>) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" \<A>) ("_position" e\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  \<A> :: "'a exp => 'a set option"
  \<A>s :: "'a exp list => 'a set option"
### Ambiguous input (line 119 of "$AFP/JinjaDCI/J/DefAss.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<D>)
###       ("_cargs"
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))
###         ("_position" A)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" \<D>)
###         ("_cargs" ("_position" e\<^sub>1) ("_position" A)))
###       ("_applC" ("_position" \<D>)
###         ("_cargs" ("_position" e\<^sub>2)
###           ("\<^const>DefAss.hyperUn" ("_position" A)
###             ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<D>)
###       ("_cargs"
###         ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))
###         ("_position" A)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" \<D>)
###         ("_cargs" ("_position" e\<^sub>1) ("_position" A)))
###       ("_applC" ("_position" \<D>)
###         ("_cargs" ("_position" e\<^sub>2)
###           ("\<^const>DefAss.hyperUn" ("_position" A)
###             ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 120 of "$AFP/JinjaDCI/J/DefAss.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<D>)
###       ("_cargs"
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))
###         ("_position" A)))
###     ("_applC" ("_position" \<D>)
###       ("_cargs" ("_position" e\<^sub>2) ("_position" A)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<D>)
###       ("_cargs"
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))
###         ("_position" A)))
###     ("_applC" ("_position" \<D>)
###       ("_cargs" ("_position" e\<^sub>2) ("_position" A)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  \<D> :: "'a exp => 'a set option => bool"
  \<D>s :: "'a exp list => 'a set option => bool"
### theory "Draft.DefAss"
### 0.224s elapsed time, 0.474s cpu time, 0.064s GC time
Loading theory "Draft.JWellForm" (required by "Draft.TypeSafeMoreTemplates" via "Draft.TypeSafe")
### Ambiguous input (line 17 of "$AFP/JinjaDCI/J/JWellForm.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J_mdecl)
###     ("_cargs" ("_position" P) ("_position" C)))
###   ("_lambda"
###     ("_pattern" ("_position" M)
###       ("_patterns" ("_position" b)
###         ("_patterns" ("_position" Ts)
###           ("_patterns" ("_position" T)
###             ("_pattern" ("_position" pns) ("_position" body))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Ts))
###         ("_applC" ("_position" length) ("_position" pns)))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" distinct) ("_position" pns))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" sub_RI) ("_position" body)))
###           ("_case_syntax" ("_position" b)
###             ("_case2"
###               ("_case1" ("_position" NonStatic)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.not_member" ("_position" this)
###                     ("_applC" ("_position" set) ("_position" pns)))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.Ex_binder" ("_position" T')
###                       ("\<^const>WellType.WT" ("_position" P)
###                         ("_Map"
###                           ("_Maplets"
###                             ("_maplet" ("_position" this)
###                               ("_applC" ("_position" Class)
###                                 ("_position" C)))
###                             ("_maplets" ("_position" pns)
###                               ("_position" Ts))))
###                         ("_position" body)
###                         ("\<^const>HOL.conj" ("_position" T')
###                           ("\<^const>TypeRel.widen" ("_position" P)
###                             ("_position" T') ("_position" T)))))
###                     ("_applC" ("_position" \<D>)
###                       ("_cargs" ("_position" body)
###                         ("\<^const>Option.option.Some"
###                           ("\<^const>Set.union"
###                             ("_Finset" ("_position" this))
###                             ("_applC" ("_position" set)
###                               ("_position" pns)))))))))
###               ("_case1" ("_position" Static)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.Ex_binder" ("_position" T')
###                     ("\<^const>WellType.WT" ("_position" P)
###                       ("_Map"
###                         ("_maplets" ("_position" pns) ("_position" Ts)))
###                       ("_position" body)
###                       ("\<^const>HOL.conj" ("_position" T')
###                         ("\<^const>TypeRel.widen" ("_position" P)
###                           ("_position" T') ("_position" T)))))
###                   ("_applC" ("_position" \<D>)
###                     ("_cargs" ("_position" body)
###                       ("\<^const>Option.option.Some"
###                         ("_applC" ("_position" set)
###                           ("_position" pns))))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J_mdecl)
###     ("_cargs" ("_position" P) ("_position" C)))
###   ("_lambda"
###     ("_pattern" ("_position" M)
###       ("_patterns" ("_position" b)
###         ("_patterns" ("_position" Ts)
###           ("_patterns" ("_position" T)
###             ("_pattern" ("_position" pns) ("_position" body))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Ts))
###         ("_applC" ("_position" length) ("_position" pns)))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" distinct) ("_position" pns))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" sub_RI) ("_position" body)))
###           ("_case_syntax" ("_position" b)
###             ("_case2"
###               ("_case1" ("_position" NonStatic)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.not_member" ("_position" this)
###                     ("_applC" ("_position" set) ("_position" pns)))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.Ex_binder" ("_position" T')
###                       ("\<^const>HOL.conj"
###                         ("\<^const>WellType.WT" ("_position" P)
###                           ("_Map"
###                             ("_Maplets"
###                               ("_maplet" ("_position" this)
###                                 ("_applC" ("_position" Class)
###                                   ("_position" C)))
###                               ("_maplets" ("_position" pns)
###                                 ("_position" Ts))))
###                           ("_position" body) ("_position" T'))
###                         ("\<^const>TypeRel.widen" ("_position" P)
###                           ("_position" T') ("_position" T))))
###                     ("_applC" ("_position" \<D>)
###                       ("_cargs" ("_position" body)
###                         ("\<^const>Option.option.Some"
###                           ("\<^const>Set.union"
###                             ("_Finset" ("_position" this))
###                             ("_applC" ("_position" set)
###                               ("_position" pns)))))))))
###               ("_case1" ("_position" Static)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.Ex_binder" ("_position" T')
###                     ("\<^const>WellType.WT" ("_position" P)
###                       ("_Map"
###                         ("_maplets" ("_position" pns) ("_position" Ts)))
###                       ("_position" body)
###                       ("\<^const>HOL.conj" ("_position" T')
###                         ("\<^const>TypeRel.widen" ("_position" P)
###                           ("_position" T') ("_position" T)))))
###                   ("_applC" ("_position" \<D>)
###                     ("_cargs" ("_position" body)
###                       ("\<^const>Option.option.Some"
###                         ("_applC" ("_position" set)
###                           ("_position" pns))))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J_mdecl)
###     ("_cargs" ("_position" P) ("_position" C)))
###   ("_lambda"
###     ("_pattern" ("_position" M)
###       ("_patterns" ("_position" b)
###         ("_patterns" ("_position" Ts)
###           ("_patterns" ("_position" T)
###             ("_pattern" ("_position" pns) ("_position" body))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Ts))
###         ("_applC" ("_position" length) ("_position" pns)))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" distinct) ("_position" pns))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" sub_RI) ("_position" body)))
###           ("_case_syntax" ("_position" b)
###             ("_case2"
###               ("_case1" ("_position" NonStatic)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.not_member" ("_position" this)
###                     ("_applC" ("_position" set) ("_position" pns)))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.Ex_binder" ("_position" T')
###                       ("\<^const>WellType.WT" ("_position" P)
###                         ("_Map"
###                           ("_Maplets"
###                             ("_maplet" ("_position" this)
###                               ("_applC" ("_position" Class)
###                                 ("_position" C)))
###                             ("_maplets" ("_position" pns)
###                               ("_position" Ts))))
###                         ("_position" body)
###                         ("\<^const>HOL.conj" ("_position" T')
###                           ("\<^const>TypeRel.widen" ("_position" P)
###                             ("_position" T') ("_position" T)))))
###                     ("_applC" ("_position" \<D>)
###                       ("_cargs" ("_position" body)
###                         ("\<^const>Option.option.Some"
###                           ("\<^const>Set.union"
###                             ("_Finset" ("_position" this))
###                             ("_applC" ("_position" set)
###                               ("_position" pns)))))))))
###               ("_case1" ("_position" Static)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.Ex_binder" ("_position" T')
###                     ("\<^const>HOL.conj"
###                       ("\<^const>WellType.WT" ("_position" P)
###                         ("_Map"
###                           ("_maplets" ("_position" pns) ("_position" Ts)))
###                         ("_position" body) ("_position" T'))
###                       ("\<^const>TypeRel.widen" ("_position" P)
###                         ("_position" T') ("_position" T))))
###                   ("_applC" ("_position" \<D>)
###                     ("_cargs" ("_position" body)
###                       ("\<^const>Option.option.Some"
###                         ("_applC" ("_position" set)
###                           ("_position" pns))))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J_mdecl)
###     ("_cargs" ("_position" P) ("_position" C)))
###   ("_lambda"
###     ("_pattern" ("_position" M)
###       ("_patterns" ("_position" b)
###         ("_patterns" ("_position" Ts)
###           ("_patterns" ("_position" T)
###             ("_pattern" ("_position" pns) ("_position" body))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Ts))
###         ("_applC" ("_position" length) ("_position" pns)))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" distinct) ("_position" pns))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" sub_RI) ("_position" body)))
###           ("_case_syntax" ("_position" b)
###             ("_case2"
###               ("_case1" ("_position" NonStatic)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.not_member" ("_position" this)
###                     ("_applC" ("_position" set) ("_position" pns)))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.Ex_binder" ("_position" T')
###                       ("\<^const>HOL.conj"
###                         ("\<^const>WellType.WT" ("_position" P)
###                           ("_Map"
###                             ("_Maplets"
###                               ("_maplet" ("_position" this)
###                                 ("_applC" ("_position" Class)
###                                   ("_position" C)))
###                               ("_maplets" ("_position" pns)
###                                 ("_position" Ts))))
###                           ("_position" body) ("_position" T'))
###                         ("\<^const>TypeRel.widen" ("_position" P)
###                           ("_position" T') ("_position" T))))
###                     ("_applC" ("_position" \<D>)
###                       ("_cargs" ("_position" body)
###                         ("\<^const>Option.option.Some"
###                           ("\<^const>Set.union"
###                             ("_Finset" ("_position" this))
###                             ("_applC" ("_position" set)
###                               ("_position" pns)))))))))
###               ("_case1" ("_position" Static)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.Ex_binder" ("_position" T')
###                     ("\<^const>HOL.conj"
###                       ("\<^const>WellType.WT" ("_position" P)
###                         ("_Map"
###                           ("_maplets" ("_position" pns) ("_position" Ts)))
###                         ("_position" body) ("_position" T'))
###                       ("\<^const>TypeRel.widen" ("_position" P)
###                         ("_position" T') ("_position" T))))
###                   ("_applC" ("_position" \<D>)
###                     ("_cargs" ("_position" body)
###                       ("\<^const>Option.option.Some"
###                         ("_applC" ("_position" set)
###                           ("_position" pns))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 29 of "$AFP/JinjaDCI/J/JWellForm.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J_mdecl)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" C)
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" NonStatic)
###             ("_tuple_args" ("_position" Ts)
###               ("_tuple_args" ("_position" T)
###                 ("_tuple_args" ("_position" pns)
###                   ("_tuple_arg" ("_position" body))))))))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Ts))
###       ("_applC" ("_position" length) ("_position" pns)))
###     ("\<^const>HOL.conj" ("_applC" ("_position" distinct) ("_position" pns))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.Not"
###           ("_applC" ("_position" sub_RI) ("_position" body)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" this)
###             ("_applC" ("_position" set) ("_position" pns)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.Ex_binder" ("_position" T')
###               ("\<^const>WellType.WT" ("_position" P)
###                 ("_Map"
###                   ("_Maplets"
###                     ("_maplet" ("_position" this)
###                       ("_applC" ("_position" Class) ("_position" C)))
###                     ("_maplets" ("_position" pns) ("_position" Ts))))
###                 ("_position" body)
###                 ("\<^const>HOL.conj" ("_position" T')
###                   ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                     ("_position" T)))))
###             ("_applC" ("_position" \<D>)
###               ("_cargs" ("_position" body)
###                 ("\<^const>Option.option.Some"
###                   ("\<^const>Set.union" ("_Finset" ("_position" this))
###                     ("_applC" ("_position" set) ("_position" pns))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J_mdecl)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" C)
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" NonStatic)
###             ("_tuple_args" ("_position" Ts)
###               ("_tuple_args" ("_position" T)
###                 ("_tuple_args" ("_position" pns)
###                   ("_tuple_arg" ("_position" body))))))))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Ts))
###       ("_applC" ("_position" length) ("_position" pns)))
###     ("\<^const>HOL.conj" ("_applC" ("_position" distinct) ("_position" pns))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.Not"
###           ("_applC" ("_position" sub_RI) ("_position" body)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" this)
###             ("_applC" ("_position" set) ("_position" pns)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.Ex_binder" ("_position" T')
###               ("\<^const>HOL.conj"
###                 ("\<^const>WellType.WT" ("_position" P)
###                   ("_Map"
###                     ("_Maplets"
###                       ("_maplet" ("_position" this)
###                         ("_applC" ("_position" Class) ("_position" C)))
###                       ("_maplets" ("_position" pns) ("_position" Ts))))
###                   ("_position" body) ("_position" T'))
###                 ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                   ("_position" T))))
###             ("_applC" ("_position" \<D>)
###               ("_cargs" ("_position" body)
###                 ("\<^const>Option.option.Some"
###                   ("\<^const>Set.union" ("_Finset" ("_position" this))
###                     ("_applC" ("_position" set) ("_position" pns))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 39 of "$AFP/JinjaDCI/J/JWellForm.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J_mdecl)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" C)
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" Static)
###             ("_tuple_args" ("_position" Ts)
###               ("_tuple_args" ("_position" T)
###                 ("_tuple_args" ("_position" pns)
###                   ("_tuple_arg" ("_position" body))))))))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Ts))
###       ("_applC" ("_position" length) ("_position" pns)))
###     ("\<^const>HOL.conj" ("_applC" ("_position" distinct) ("_position" pns))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.Not"
###           ("_applC" ("_position" sub_RI) ("_position" body)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Ex_binder" ("_position" T')
###             ("\<^const>WellType.WT" ("_position" P)
###               ("_Map" ("_maplets" ("_position" pns) ("_position" Ts)))
###               ("_position" body)
###               ("\<^const>HOL.conj" ("_position" T')
###                 ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                   ("_position" T)))))
###           ("_applC" ("_position" \<D>)
###             ("_cargs" ("_position" body)
###               ("\<^const>Option.option.Some"
###                 ("_applC" ("_position" set) ("_position" pns))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J_mdecl)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" C)
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" Static)
###             ("_tuple_args" ("_position" Ts)
###               ("_tuple_args" ("_position" T)
###                 ("_tuple_args" ("_position" pns)
###                   ("_tuple_arg" ("_position" body))))))))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Ts))
###       ("_applC" ("_position" length) ("_position" pns)))
###     ("\<^const>HOL.conj" ("_applC" ("_position" distinct) ("_position" pns))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.Not"
###           ("_applC" ("_position" sub_RI) ("_position" body)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Ex_binder" ("_position" T')
###             ("\<^const>HOL.conj"
###               ("\<^const>WellType.WT" ("_position" P)
###                 ("_Map" ("_maplets" ("_position" pns) ("_position" Ts)))
###                 ("_position" body) ("_position" T'))
###               ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                 ("_position" T))))
###           ("_applC" ("_position" \<D>)
###             ("_cargs" ("_position" body)
###               ("\<^const>Option.option.Some"
###                 ("_applC" ("_position" set) ("_position" pns))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.JWellForm"
### 0.250s elapsed time, 0.505s cpu time, 0.058s GC time
### theory "Draft.SmallStep"
### 11.855s elapsed time, 27.387s cpu time, 4.401s GC time
Loading theory "Draft.EConform" (required by "Draft.TypeSafeMoreTemplates" via "Draft.TypeSafe" via "Draft.Progress")
### Ambiguous input (line 21 of "$AFP/JinjaDCI/J/EConform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" init_class)
###       ("_cargs" ("_position" P)
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("_applC" ("_position" Some) ("_position" D))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" init_class)
###       ("_cargs" ("_position" P)
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("_applC" ("_position" Some) ("_position" D))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 41 of "$AFP/JinjaDCI/J/EConform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ss_exp)
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D)))
###     ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###       ("_position" D))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Expr.exp.SFAcc"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" ss_exp)
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D)))
###       ("_position" C))
###     ("_position" F) ("_position" D)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 42 of "$AFP/JinjaDCI/J/EConform.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" ss_exp)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("_case_syntax"
###             ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" v))
###                 ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1)
###                   ("_position" F) ("_position" D) ("_position" e\<^sub>2)))
###               ("_case1" ("\<^const>Pure.dummy_pattern")
###                 ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2))))))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>1)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ss_exp)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("_case_syntax"
###             ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" v))
###                 ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1)
###                   ("_position" F) ("_position" D) ("_position" e\<^sub>2)))
###               ("_case1" ("\<^const>Pure.dummy_pattern")
###                 ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2))))))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>1)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ss_exp)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("_case_syntax"
###             ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" v))
###                 ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1)
###                   ("_position" F) ("_position" D) ("_position" e\<^sub>2)))
###               ("_case1" ("\<^const>Pure.dummy_pattern")
###                 ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2))))))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>1)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" ss_exp)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("_case_syntax"
###             ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" v))
###                 ("\<^const>Expr.exp.LAss"
###                   ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1)
###                     ("_position" F) ("_position" D))
###                   ("_position" e\<^sub>2)))
###               ("_case1" ("\<^const>Pure.dummy_pattern")
###                 ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2))))))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>1)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ss_exp)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("_case_syntax"
###             ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" v))
###                 ("\<^const>Expr.exp.LAss"
###                   ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1)
###                     ("_position" F) ("_position" D))
###                   ("_position" e\<^sub>2)))
###               ("_case1" ("\<^const>Pure.dummy_pattern")
###                 ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2))))))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>1)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ss_exp)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("_case_syntax"
###             ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" v))
###                 ("\<^const>Expr.exp.LAss"
###                   ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1)
###                     ("_position" F) ("_position" D))
###                   ("_position" e\<^sub>2)))
###               ("_case1" ("\<^const>Pure.dummy_pattern")
###                 ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2))))))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>1)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 44 of "$AFP/JinjaDCI/J/EConform.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" ss_exp)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###               ("_position" D))
###             ("_position" e\<^sub>2)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ss_exp)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###               ("_position" D))
###             ("_position" e\<^sub>2)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ss_exp)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###               ("_position" D))
###             ("_position" e\<^sub>2)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" ss_exp)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###             ("_position" D) ("_position" e\<^sub>2)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ss_exp)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###             ("_position" D) ("_position" e\<^sub>2)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ss_exp)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###             ("_position" D) ("_position" e\<^sub>2)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "case_sum size (size_list size) <*mlex*> {}"
### Ambiguous input (line 126 of "$AFP/JinjaDCI/J/EConform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" iconf)
###       ("_cargs" ("_position" sh)
###         ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("_applC" ("_position" iconf)
###             ("_cargs" ("_position" sh) ("_position" e\<^sub>2))))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" iconf)
###               ("_cargs" ("_position" sh) ("_position" e\<^sub>1)))
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" iconf)
###       ("_cargs" ("_position" sh)
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("_applC" ("_position" iconf)
###             ("_cargs" ("_position" sh) ("_position" e\<^sub>2))))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" iconf)
###               ("_cargs" ("_position" sh) ("_position" e\<^sub>1)))
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 127 of "$AFP/JinjaDCI/J/EConform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" iconf)
###       ("_cargs" ("_position" sh)
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("_applC" ("_position" iconf)
###       ("_cargs" ("_position" sh) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" iconf)
###       ("_cargs" ("_position" sh)
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("_applC" ("_position" iconf)
###       ("_cargs" ("_position" sh) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order:
  "case_sum (%p. size (snd p)) (%p. size_list size (snd p)) <*mlex*> {}"
### Ambiguous input (line 195 of "$AFP/JinjaDCI/J/EConform.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>bconfs" ("_position" P) ("_position" sh) ("_position" es)
###     ("_position" b))
###   ("\<^const>HOL.implies" ("_position" b)
###     ("\<^const>HOL.Ex_binder" ("_position" C)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" icheck)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C)
###               ("_applC" ("_position" the)
###                 ("_applC" ("_position" ss_exps) ("_position" es))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" curr_inits)
###               ("_cargs" ("_position" P) ("_position" es)))
###             ("_applC" ("_position" Some) ("_position" C)))
###           ("_applC" ("_position" initPD)
###             ("_cargs" ("_position" sh) ("_position" C))))))))
### ("\<^const>Pure.eq"
###   ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###     ("_position" es) ("_position" b))
###   ("\<^const>HOL.implies" ("_position" b)
###     ("\<^const>HOL.Ex_binder" ("_position" C)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" icheck)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C)
###               ("_applC" ("_position" the)
###                 ("_applC" ("_position" ss_exps) ("_position" es))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" curr_inits)
###               ("_cargs" ("_position" P) ("_position" es)))
###             ("_applC" ("_position" Some) ("_position" C)))
###           ("_applC" ("_position" initPD)
###             ("_cargs" ("_position" sh) ("_position" C))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 202 of "$AFP/JinjaDCI/J/EConform.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" True)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" val_of) ("_position" e))
###       ("_position" None))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" True)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" val_of) ("_position" e))
###       ("_position" None))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 206 of "$AFP/JinjaDCI/J/EConform.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" es) ("_position" True)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" map_vals_of) ("_position" es))
###       ("_position" None))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" es) ("_position" True)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" map_vals_of) ("_position" es))
###       ("_position" None))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 210 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" Cast)
###         ("_cargs" ("_position" C) ("_position" e)))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" Cast)
###         ("_cargs" ("_position" C) ("_position" e)))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" Cast)
###         ("_cargs" ("_position" C) ("_position" e)))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" Cast)
###         ("_cargs" ("_position" C) ("_position" e)))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 214 of "$AFP/JinjaDCI/J/EConform.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.BinOp" ("_position" e1) ("_position" bop)
###         ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.BinOp" ("_position" e1) ("_position" bop)
###         ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.BinOp" ("_position" e1) ("_position" bop)
###         ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.BinOp" ("_position" e1) ("_position" bop)
###         ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.BinOp" ("_position" e1) ("_position" bop)
###         ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.BinOp" ("_position" e1) ("_position" bop)
###         ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.BinOp" ("_position" e1) ("_position" bop)
###         ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.BinOp" ("_position" e1) ("_position" bop)
###         ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 219 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" LAss)
###         ("_cargs" ("_position" V) ("_position" e)))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" LAss)
###         ("_cargs" ("_position" V) ("_position" e)))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" LAss)
###         ("_cargs" ("_position" V) ("_position" e)))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" LAss)
###         ("_cargs" ("_position" V) ("_position" e)))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 223 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###         ("_position" D))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###         ("_position" D))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###         ("_position" D))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###         ("_position" D))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 227 of "$AFP/JinjaDCI/J/EConform.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" FAss)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" D) ("_position" e2)))))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" FAss)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" D) ("_position" e2)))))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" FAss)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" D) ("_position" e2)))))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" FAss)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" D) ("_position" e2)))))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" FAss)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" D) ("_position" e2)))))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" FAss)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" D) ("_position" e2)))))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" FAss)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" D) ("_position" e2)))))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" FAss)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" D) ("_position" e2)))))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 232 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" val_of) ("_position" e2))
###       ("_position" None)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.iff"
###       ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###         ("_applC" ("_position" SFAss)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" F)
###               ("_cargs" ("_position" D) ("_position" e2)))))
###         ("_position" b))
###       ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###         ("_position" e2) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" val_of) ("_position" e2))
###       ("_position" None)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.iff"
###       ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###         ("_applC" ("_position" SFAss)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" F)
###               ("_cargs" ("_position" D) ("_position" e2)))))
###         ("_position" b))
###       ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###         ("_position" e2) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" val_of) ("_position" e2))
###       ("_position" None)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.iff"
###       ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###         ("_applC" ("_position" SFAss)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" F)
###               ("_cargs" ("_position" D) ("_position" e2)))))
###         ("_position" b))
###       ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###         ("_position" e2) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" val_of) ("_position" e2))
###       ("_position" None)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.iff"
###       ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###         ("_applC" ("_position" SFAss)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" F)
###               ("_cargs" ("_position" D) ("_position" e2)))))
###         ("_position" b))
###       ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###         ("_position" e2) ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 236 of "$AFP/JinjaDCI/J/EConform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" map)
###         ("_cargs" ("_position" Val) ("_position" vs)))
###       ("_position" b))
###     ("\<^const>HOL.Not" ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" map)
###         ("_cargs" ("_position" Val) ("_position" vs)))
###       ("_position" b))
###     ("\<^const>HOL.Not" ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 240 of "$AFP/JinjaDCI/J/EConform.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Call" ("_position" e) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Call" ("_position" e) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Call" ("_position" e) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Call" ("_position" e) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Call" ("_position" e) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Call" ("_position" e) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Call" ("_position" e) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Call" ("_position" e) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 258 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.SCall" ("_position" C) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" es) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.SCall" ("_position" C) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" es) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.SCall" ("_position" C) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" es) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.SCall" ("_position" C) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" es) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 273 of "$AFP/JinjaDCI/J/EConform.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 289 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss" ("_position" V)
###             ("_applC" ("_position" Val) ("_position" v)))
###           ("_position" e\<^sub>2)))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e\<^sub>2) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss" ("_position" V)
###             ("_applC" ("_position" Val) ("_position" v)))
###           ("_position" e\<^sub>2)))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e\<^sub>2) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss" ("_position" V)
###             ("_applC" ("_position" Val) ("_position" v)))
###           ("_position" e\<^sub>2)))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e\<^sub>2) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss" ("_position" V)
###             ("_applC" ("_position" Val) ("_position" v)))
###           ("_position" e\<^sub>2)))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e\<^sub>2) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 293 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 297 of "$AFP/JinjaDCI/J/EConform.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e1) ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_case_syntax"
###             ("_applC" ("_position" lass_val_of) ("_position" e1))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" p))
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e2) ("_position" b)))
###               ("_case1" ("_position" None)
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e1) ("_position" b))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e1) ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_case_syntax"
###             ("_applC" ("_position" lass_val_of) ("_position" e1))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" p))
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e2) ("_position" b)))
###               ("_case1" ("_position" None)
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e1) ("_position" b))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e1) ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_case_syntax"
###             ("_applC" ("_position" lass_val_of) ("_position" e1))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" p))
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e2) ("_position" b)))
###               ("_case1" ("_position" None)
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e1) ("_position" b))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e1) ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_case_syntax"
###             ("_applC" ("_position" lass_val_of) ("_position" e1))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" p))
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e2) ("_position" b)))
###               ("_case1" ("_position" None)
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e1) ("_position" b))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e1) ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_case_syntax"
###             ("_applC" ("_position" lass_val_of) ("_position" e1))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" p))
###                 ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###                   ("_position" e2) ("_position" b)))
###               ("_case1" ("_position" None)
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e1) ("_position" b))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e1) ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_case_syntax"
###             ("_applC" ("_position" lass_val_of) ("_position" e1))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" p))
###                 ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###                   ("_position" e2) ("_position" b)))
###               ("_case1" ("_position" None)
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e1) ("_position" b))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e1) ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_case_syntax"
###             ("_applC" ("_position" lass_val_of) ("_position" e1))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" p))
###                 ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###                   ("_position" e2) ("_position" b)))
###               ("_case1" ("_position" None)
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e1) ("_position" b))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e1) ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_case_syntax"
###             ("_applC" ("_position" lass_val_of) ("_position" e1))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" p))
###                 ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###                   ("_position" e2) ("_position" b)))
###               ("_case1" ("_position" None)
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e1) ("_position" b))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e1) ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_case_syntax"
###             ("_applC" ("_position" lass_val_of) ("_position" e1))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" p))
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e2) ("_position" b)))
###               ("_case1" ("_position" None)
###                 ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###                   ("_position" e1) ("_position" b))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e1) ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_case_syntax"
###             ("_applC" ("_position" lass_val_of) ("_position" e1))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" p))
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e2) ("_position" b)))
###               ("_case1" ("_position" None)
###                 ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###                   ("_position" e1) ("_position" b))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 304 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Cond" ("_position" b) ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" b'))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" b) ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Cond" ("_position" b) ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" b'))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" b) ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Cond" ("_position" b) ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" b'))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" b) ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Cond" ("_position" b) ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" b'))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" b) ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 314 of "$AFP/JinjaDCI/J/EConform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.While" ("_position" b) ("_position" e))
###       ("_position" b'))
###     ("\<^const>HOL.Not" ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.While" ("_position" b) ("_position" e))
###       ("_position" b'))
###     ("\<^const>HOL.Not" ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 318 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" throw) ("_position" e)) ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" throw) ("_position" e)) ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" throw) ("_position" e)) ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" throw) ("_position" e)) ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 322 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e\<^sub>1) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e\<^sub>1) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e\<^sub>1) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e\<^sub>1) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 326 of "$AFP/JinjaDCI/J/EConform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.INIT" ("_position" C) ("_position" Cs)
###         ("_position" b') ("_position" e))
###       ("_position" b))
###     ("\<^const>HOL.Not" ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.INIT" ("_position" C) ("_position" Cs)
###         ("_position" b') ("_position" e))
###       ("_position" b))
###     ("\<^const>HOL.Not" ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 330 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.RI" ("_position" C) ("_position" e)
###         ("_position" Cs) ("_position" e'))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.RI" ("_position" C) ("_position" e)
###         ("_position" Cs) ("_position" e'))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.RI" ("_position" C) ("_position" e)
###         ("_position" Cs) ("_position" e'))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.RI" ("_position" C) ("_position" e)
###         ("_position" Cs) ("_position" e'))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 334 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>List.append"
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" Val) ("_position" vs)))
###         ("\<^const>List.list.Cons"
###           ("_applC" ("_position" throw) ("_position" e)) ("_position" es')))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>List.append"
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" Val) ("_position" vs)))
###         ("\<^const>List.list.Cons"
###           ("_applC" ("_position" throw) ("_position" e)) ("_position" es')))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>List.append"
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" Val) ("_position" vs)))
###         ("\<^const>List.list.Cons"
###           ("_applC" ("_position" throw) ("_position" e)) ("_position" es')))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>List.append"
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" Val) ("_position" vs)))
###         ("\<^const>List.list.Cons"
###           ("_applC" ("_position" throw) ("_position" e)) ("_position" es')))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.EConform"
### 3.331s elapsed time, 5.429s cpu time, 0.463s GC time
Loading theory "Draft.Progress" (required by "Draft.TypeSafeMoreTemplates" via "Draft.TypeSafe")
### Ambiguous input (line 75 of "$AFP/JinjaDCI/J/Progress.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("\<^const>Objects.typeof_h" ("_position" h))
###           ("_position" v))
###         ("_applC" ("_position" Some) ("_position" T\<^sub>1))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.widen" ("_position" P) ("_position" T\<^sub>1)
###           ("_position" T)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WTrt2'" ("_position" P)
###             ("_MapUpd" ("_position" E)
###               ("_maplet" ("_position" V) ("_position" T)))
###             ("_position" h) ("_position" sh) ("_position" e\<^sub>2)
###             ("_position" T\<^sub>2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###       ("_position" sh)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("\<^const>Objects.typeof_h" ("_position" h))
###           ("_position" v))
###         ("_applC" ("_position" Some) ("_position" T\<^sub>1))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.widen" ("_position" P) ("_position" T\<^sub>1)
###           ("_position" T)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WTrt2'" ("_position" P)
###             ("_MapUpd" ("_position" E)
###               ("_maplet" ("_position" V) ("_position" T)))
###             ("_position" h) ("_position" sh) ("_position" e\<^sub>2)
###             ("_position" T\<^sub>2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###       ("_position" sh)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v))
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 58 of "$AFP/JinjaDCI/J/Progress.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###         ("_position" sh) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" T)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###             ("_position" sh) ("_position" e\<^sub>2)
###             ("_position" T\<^sub>2)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P)
###               ("_position" T\<^sub>2) ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###       ("_position" sh)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###         ("_position" sh) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" T)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###             ("_position" sh) ("_position" e\<^sub>2)
###             ("_position" T\<^sub>2)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P)
###               ("_position" T\<^sub>2) ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###       ("_position" sh)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 61 of "$AFP/JinjaDCI/J/Progress.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###         ("_position" sh) ("_position" e\<^sub>1) ("_position" NT)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###           ("_position" sh) ("_position" e\<^sub>2)
###           ("_position" T\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###       ("_position" sh)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###         ("_position" sh) ("_position" e\<^sub>1) ("_position" NT)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###           ("_position" sh) ("_position" e\<^sub>2)
###           ("_position" T\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###       ("_position" sh)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 62 of "$AFP/JinjaDCI/J/Progress.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" T)
###         ("_position" D)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###           ("_position" sh) ("_position" e\<^sub>2) ("_position" T\<^sub>2)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T\<^sub>2)
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###       ("_position" sh)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" T)
###         ("_position" D)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###           ("_position" sh) ("_position" e\<^sub>2) ("_position" T\<^sub>2)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T\<^sub>2)
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###       ("_position" sh)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "WTrt'", "WTrts'"
  Proving monotonicity ...
### Ambiguous input (line 107 of "$AFP/JinjaDCI/J/Progress.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>HOL.conj"
###         ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" sh) ("_position" e\<^sub>1)
###           ("_position" T\<^sub>1))
###         ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" sh) ("_position" e\<^sub>2)
###           ("_position" T\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###     ("_position" h) ("_position" sh)
###     ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>HOL.conj"
###           ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" sh) ("_position" e\<^sub>1)
###             ("_position" T\<^sub>1))
###           ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" sh) ("_position" e\<^sub>2)
###             ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" sh) ("_position" e\<^sub>1)
###         ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###           ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" sh) ("_position" e\<^sub>2)
###             ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###     ("_position" h) ("_position" sh)
###     ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" sh) ("_position" e\<^sub>1)
###           ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###             ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###               ("_position" h) ("_position" sh) ("_position" e\<^sub>2)
###               ("_position" T\<^sub>2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 110 of "$AFP/JinjaDCI/J/Progress.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("_applC" ("_position" Val) ("_position" v)) ("_position" T))
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Objects.typeof_h" ("_position" h))
###         ("_position" v))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###     ("_position" h) ("_position" sh)
###     ("_applC" ("_position" Val) ("_position" v))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq"
###         ("_applC" ("\<^const>Objects.typeof_h" ("_position" h))
###           ("_position" v))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 113 of "$AFP/JinjaDCI/J/Progress.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("_applC" ("_position" Var) ("_position" v)) ("_position" T))
###     ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" v))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###     ("_position" h) ("_position" sh)
###     ("_applC" ("_position" Var) ("_position" v))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" v))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 167 of "$AFP/JinjaDCI/J/Progress.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh) ("_position" e) ("_position" T)))
###   ("\<^const>Pure.all_binder" ("_position" l)
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" \<D>)
###             ("_cargs" ("_position" e)
###               ("\<^const>Option.option.Some"
###                 ("_applC" ("_position" dom) ("_position" l))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###               ("_position" e) ("_position" b)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.Not"
###                 ("_applC" ("_position" final) ("_position" e)))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" e')
###             ("_idts" ("_position" s') ("_position" b')))
###           ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###             ("_tuple" ("_position" h)
###               ("_tuple_args" ("_position" l)
###                 ("_tuple_arg" ("_position" sh))))
###             ("_position" b) ("_position" e') ("_position" s')
###             ("_position" b')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh) ("_position" e) ("_position" T)))
###   ("\<^const>Pure.all_binder" ("_position" l)
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" \<D>)
###             ("_cargs" ("_position" e)
###               ("\<^const>Option.option.Some"
###                 ("_applC" ("_position" dom) ("_position" l))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###               ("_position" e) ("_position" b)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.Not"
###                 ("_applC" ("_position" final) ("_position" e)))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" e')
###             ("_idts" ("_position" s') ("_position" b')))
###           ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###             ("_tuple" ("_position" h)
###               ("_tuple_args" ("_position" l)
###                 ("_tuple_arg" ("_position" sh))))
###             ("_position" b) ("_position" e') ("_position" s')
###             ("_position" b')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 169 of "$AFP/JinjaDCI/J/Progress.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh) ("_position" es) ("_position" Ts)))
###   ("\<^const>Pure.all_binder" ("_position" l)
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" \<D>s)
###             ("_cargs" ("_position" es)
###               ("\<^const>Option.option.Some"
###                 ("_applC" ("_position" dom) ("_position" l))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###               ("_position" es) ("_position" b)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.Not"
###                 ("_applC" ("_position" finals) ("_position" es)))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" es')
###             ("_idts" ("_position" s') ("_position" b')))
###           ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###             ("_tuple" ("_position" h)
###               ("_tuple_args" ("_position" l)
###                 ("_tuple_arg" ("_position" sh))))
###             ("_position" b) ("_position" es') ("_position" s')
###             ("_position" b')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh) ("_position" es) ("_position" Ts)))
###   ("\<^const>Pure.all_binder" ("_position" l)
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" \<D>s)
###             ("_cargs" ("_position" es)
###               ("\<^const>Option.option.Some"
###                 ("_applC" ("_position" dom) ("_position" l))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###               ("_position" es) ("_position" b)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.Not"
###                 ("_applC" ("_position" finals) ("_position" es)))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" es')
###             ("_idts" ("_position" s') ("_position" b')))
###           ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###             ("_tuple" ("_position" h)
###               ("_tuple_args" ("_position" l)
###                 ("_tuple_arg" ("_position" sh))))
###             ("_position" b) ("_position" es') ("_position" s')
###             ("_position" b')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Progress"
### 10.162s elapsed time, 27.357s cpu time, 26.288s GC time
Loading theory "Draft.TypeSafe" (required by "Draft.TypeSafeMoreTemplates")
### Ambiguous input (line 290 of "$AFP/JinjaDCI/J/TypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###     ("\<^const>Expr.exp.Seq" ("_position" e) ("_position" e\<^sub>2))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###     ("\<^const>Expr.exp.Seq" ("_position" e) ("_position" e\<^sub>2))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 291 of "$AFP/JinjaDCI/J/TypeSafe.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_constrain" ("_position" e) ("_type_name" expr)) ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh')
###       ("_constrain" ("_position" e') ("_type_name" expr))
###       ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_constrain" ("_position" e) ("_type_name" expr)) ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh')
###       ("_constrain" ("_position" e') ("_type_name" expr))
###       ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_constrain" ("_position" e) ("_type_name" expr)) ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh')
###       ("_constrain" ("_position" e') ("_type_name" expr))
###       ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_constrain" ("_position" e) ("_type_name" expr)) ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh')
###       ("_constrain" ("_position" e') ("_type_name" expr))
###       ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 292 of "$AFP/JinjaDCI/J/TypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh')
###     ("\<^const>Expr.exp.Seq" ("_position" e') ("_position" e\<^sub>2))
###     ("_position" b')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>EConform.bconf" ("_position" P) ("_position" sh')
###     ("\<^const>Expr.exp.Seq" ("_position" e') ("_position" e\<^sub>2))
###     ("_position" b')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 315 of "$AFP/JinjaDCI/J/TypeSafe.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" e')
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" iconf)
###         ("_cargs" ("_position" sh) ("_position" e))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###           ("_position" e) ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh')
###           ("_position" e') ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" e')
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" iconf)
###         ("_cargs" ("_position" sh) ("_position" e))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###           ("_position" e) ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh')
###           ("_position" e') ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" e')
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" iconf)
###         ("_cargs" ("_position" sh) ("_position" e))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###           ("_position" e) ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>EConform.bconf" ("_position" P) ("_position" sh')
###           ("_position" e') ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" e')
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" iconf)
###         ("_cargs" ("_position" sh) ("_position" e))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###           ("_position" e) ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>EConform.bconf" ("_position" P) ("_position" sh')
###           ("_position" e') ("_position" b'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 317 of "$AFP/JinjaDCI/J/TypeSafe.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" es')
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" iconfs)
###         ("_cargs" ("_position" sh) ("_position" es))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###           ("_position" es) ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh')
###           ("_position" es') ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" es')
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" iconfs)
###         ("_cargs" ("_position" sh) ("_position" es))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###           ("_position" es) ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh')
###           ("_position" es') ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" es')
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" iconfs)
###         ("_cargs" ("_position" sh) ("_position" es))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###           ("_position" es) ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>EConform.bconf" ("_position" P) ("_position" sh')
###           ("_position" es') ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" es')
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" iconfs)
###         ("_cargs" ("_position" sh) ("_position" es))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###           ("_position" es) ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>EConform.bconf" ("_position" P) ("_position" sh')
###           ("_position" es') ("_position" b'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 578 of "$AFP/JinjaDCI/J/TypeSafe.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>sconf" ("_position" P) ("_position" E) ("_position" s))
###   ("_Let"
###     ("_bind"
###       ("_pattern" ("_position" h)
###         ("_patterns" ("_position" l) ("_position" sh)))
###       ("_position" s))
###     ("\<^const>HOL.conj"
###       ("\<^const>Conform.hconf" ("_position" P) ("_position" h))
###       ("\<^const>HOL.conj"
###         ("\<^const>Conform.lconf" ("_position" P) ("_position" h)
###           ("_position" l) ("_position" E))
###         ("\<^const>Conform.shconf" ("_position" P) ("_position" h)
###           ("_position" sh))))))
### ("\<^const>Pure.eq"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" E) ("_position" s))
###   ("_Let"
###     ("_bind"
###       ("_pattern" ("_position" h)
###         ("_patterns" ("_position" l) ("_position" sh)))
###       ("_position" s))
###     ("\<^const>HOL.conj"
###       ("\<^const>Conform.hconf" ("_position" P) ("_position" h))
###       ("\<^const>HOL.conj"
###         ("\<^const>Conform.lconf" ("_position" P) ("_position" h)
###           ("_position" l) ("_position" E))
###         ("\<^const>Conform.shconf" ("_position" P) ("_position" h)
###           ("_position" sh))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 581 of "$AFP/JinjaDCI/J/TypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###         ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s))
###           ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###           ("_position" T)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###             ("_position" s))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###       ("_position" s'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###         ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s))
###           ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###           ("_position" T)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###             ("_position" s))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###       ("_position" s'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###         ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s))
###           ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###           ("_position" T)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###             ("_position" s))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###       ("_position" s'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###         ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s))
###           ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###           ("_position" T)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###             ("_position" s))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 588 of "$AFP/JinjaDCI/J/TypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###         ("_position" s) ("_position" b) ("_position" es') ("_position" s')
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s))
###           ("_applC" ("_position" shp) ("_position" s)) ("_position" es)
###           ("_position" Ts)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###             ("_position" s))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###       ("_position" s'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###         ("_position" s) ("_position" b) ("_position" es') ("_position" s')
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s))
###           ("_applC" ("_position" shp) ("_position" s)) ("_position" es)
###           ("_position" Ts)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###             ("_position" s))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###       ("_position" s'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###         ("_position" s) ("_position" b) ("_position" es') ("_position" s')
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s))
###           ("_applC" ("_position" shp) ("_position" s)) ("_position" es)
###           ("_position" Ts)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###             ("_position" s))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###       ("_position" s'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###         ("_position" s) ("_position" b) ("_position" es') ("_position" s')
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s))
###           ("_applC" ("_position" shp) ("_position" s)) ("_position" es)
###           ("_position" Ts)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###             ("_position" s))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 598 of "$AFP/JinjaDCI/J/TypeSafe.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" E)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Vs))
###           ("_applC" ("_position" length) ("_position" Ts))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" length) ("_position" vs))
###             ("_applC" ("_position" length) ("_position" Ts))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" sh)
###           ("_applC" ("_position" blocks)
###             ("_tuple" ("_position" Vs)
###               ("_tuple_args" ("_position" Ts)
###                 ("_tuple_args" ("_position" vs)
###                   ("_tuple_arg" ("_position" e))))))
###           ("_position" T))
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P)
###           ("_MapUpd" ("_position" E)
###             ("_maplets" ("_position" Vs) ("_position" Ts)))
###           ("_position" h) ("_position" sh) ("_position" e)
###           ("\<^const>HOL.conj" ("_position" T)
###             ("\<^const>HOL.Ex_binder" ("_position" Ts')
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" map)
###                     ("_cargs" ("\<^const>Objects.typeof_h" ("_position" h))
###                       ("_position" vs)))
###                   ("_applC" ("_position" map)
###                     ("_cargs" ("_position" Some) ("_position" Ts'))))
###                 ("\<^const>TypeRel.widens" ("_position" P) ("_position" Ts')
###                   ("_position" Ts))))))))))
### ("\<^const>Pure.all_binder" ("_position" E)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Vs))
###           ("_applC" ("_position" length) ("_position" Ts))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" length) ("_position" vs))
###             ("_applC" ("_position" length) ("_position" Ts))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" sh)
###           ("_applC" ("_position" blocks)
###             ("_tuple" ("_position" Vs)
###               ("_tuple_args" ("_position" Ts)
###                 ("_tuple_args" ("_position" vs)
###                   ("_tuple_arg" ("_position" e))))))
###           ("_position" T))
###         ("\<^const>HOL.conj"
###           ("\<^const>WellTypeRT.WTrt2" ("_position" P)
###             ("_MapUpd" ("_position" E)
###               ("_maplets" ("_position" Vs) ("_position" Ts)))
###             ("_position" h) ("_position" sh) ("_position" e)
###             ("_position" T))
###           ("\<^const>HOL.Ex_binder" ("_position" Ts')
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" map)
###                   ("_cargs" ("\<^const>Objects.typeof_h" ("_position" h))
###                     ("_position" vs)))
###                 ("_applC" ("_position" map)
###                   ("_cargs" ("_position" Some) ("_position" Ts'))))
###               ("\<^const>TypeRel.widens" ("_position" P) ("_position" Ts')
###                 ("_position" Ts)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 609 of "$AFP/JinjaDCI/J/TypeSafe.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" e')
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###       ("_position" b')))
###   ("\<^const>Pure.all_binder" ("_idts" ("_position" E) ("_position" T))
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###             ("_tuple" ("_position" h)
###               ("_tuple_args" ("_position" l)
###                 ("_tuple_arg" ("_position" sh))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" iconf)
###               ("_cargs" ("_position" sh) ("_position" e))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###                 ("_position" h) ("_position" sh) ("_position" e)
###                 ("_position" T))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder" ("_position" T')
###           ("\<^const>HOL.conj"
###             ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###               ("_position" h') ("_position" sh') ("_position" e')
###               ("_position" T'))
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" e')
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###       ("_position" b')))
###   ("\<^const>Pure.all_binder" ("_idts" ("_position" E) ("_position" T))
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###             ("_tuple" ("_position" h)
###               ("_tuple_args" ("_position" l)
###                 ("_tuple_arg" ("_position" sh))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" iconf)
###               ("_cargs" ("_position" sh) ("_position" e))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###                 ("_position" h) ("_position" sh) ("_position" e)
###                 ("_position" T))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder" ("_position" T')
###           ("\<^const>HOL.conj"
###             ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###               ("_position" h') ("_position" sh') ("_position" e')
###               ("_position" T'))
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" e')
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###       ("_position" b')))
###   ("\<^const>Pure.all_binder" ("_idts" ("_position" E) ("_position" T))
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###             ("_tuple" ("_position" h)
###               ("_tuple_args" ("_position" l)
###                 ("_tuple_arg" ("_position" sh))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" iconf)
###               ("_cargs" ("_position" sh) ("_position" e))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###                 ("_position" h) ("_position" sh) ("_position" e)
###                 ("_position" T))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder" ("_position" T')
###           ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###             ("_position" h') ("_position" sh') ("_position" e')
###             ("\<^const>HOL.conj" ("_position" T')
###               ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                 ("_position" T)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" e')
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###       ("_position" b')))
###   ("\<^const>Pure.all_binder" ("_idts" ("_position" E) ("_position" T))
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###             ("_tuple" ("_position" h)
###               ("_tuple_args" ("_position" l)
###                 ("_tuple_arg" ("_position" sh))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" iconf)
###               ("_cargs" ("_position" sh) ("_position" e))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###                 ("_position" h) ("_position" sh) ("_position" e)
###                 ("_position" T))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder" ("_position" T')
###           ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###             ("_position" h') ("_position" sh') ("_position" e')
###             ("\<^const>HOL.conj" ("_position" T')
###               ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                 ("_position" T)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 612 of "$AFP/JinjaDCI/J/TypeSafe.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" es')
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###       ("_position" b')))
###   ("\<^const>Pure.all_binder" ("_idts" ("_position" E) ("_position" Ts))
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###             ("_tuple" ("_position" h)
###               ("_tuple_args" ("_position" l)
###                 ("_tuple_arg" ("_position" sh))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" iconfs)
###               ("_cargs" ("_position" sh) ("_position" es))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###                 ("_position" h) ("_position" sh) ("_position" es)
###                 ("_position" Ts))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder" ("_position" Ts')
###           ("\<^const>HOL.conj"
###             ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###               ("_position" h') ("_position" sh') ("_position" es')
###               ("_position" Ts'))
###             ("\<^const>TypeRel.widens" ("_position" P) ("_position" Ts')
###               ("_position" Ts))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" es')
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###       ("_position" b')))
###   ("\<^const>Pure.all_binder" ("_idts" ("_position" E) ("_position" Ts))
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###             ("_tuple" ("_position" h)
###               ("_tuple_args" ("_position" l)
###                 ("_tuple_arg" ("_position" sh))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" iconfs)
###               ("_cargs" ("_position" sh) ("_position" es))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###                 ("_position" h) ("_position" sh) ("_position" es)
###                 ("_position" Ts))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder" ("_position" Ts')
###           ("\<^const>HOL.conj"
###             ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###               ("_position" h') ("_position" sh') ("_position" es')
###               ("_position" Ts'))
###             ("\<^const>TypeRel.widens" ("_position" P) ("_position" Ts')
###               ("_position" Ts))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" es')
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###       ("_position" b')))
###   ("\<^const>Pure.all_binder" ("_idts" ("_position" E) ("_position" Ts))
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###             ("_tuple" ("_position" h)
###               ("_tuple_args" ("_position" l)
###                 ("_tuple_arg" ("_position" sh))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" iconfs)
###               ("_cargs" ("_position" sh) ("_position" es))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###                 ("_position" h) ("_position" sh) ("_position" es)
###                 ("_position" Ts))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder" ("_position" Ts')
###           ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###             ("_position" h') ("_position" sh') ("_position" es')
###             ("\<^const>HOL.conj" ("_position" Ts')
###               ("\<^const>TypeRel.widens" ("_position" P) ("_position" Ts')
###                 ("_position" Ts)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" es')
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###       ("_position" b')))
###   ("\<^const>Pure.all_binder" ("_idts" ("_position" E) ("_position" Ts))
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###             ("_tuple" ("_position" h)
###               ("_tuple_args" ("_position" l)
###                 ("_tuple_arg" ("_position" sh))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" iconfs)
###               ("_cargs" ("_position" sh) ("_position" es))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###                 ("_position" h) ("_position" sh) ("_position" es)
###                 ("_position" Ts))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder" ("_position" Ts')
###           ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###             ("_position" h') ("_position" sh') ("_position" es')
###             ("\<^const>HOL.conj" ("_position" Ts')
###               ("\<^const>TypeRel.widens" ("_position" P) ("_position" Ts')
###                 ("_position" Ts)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1196 of "$AFP/JinjaDCI/J/TypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_J_prog) ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###           ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###           ("_position" b')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###             ("_position" s)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" iconf)
###               ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###                 ("_position" e))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###                 ("_applC" ("_position" hp) ("_position" s))
###                 ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###                 ("_position" T))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" T')
###       ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###         ("_applC" ("_position" hp) ("_position" s'))
###         ("_applC" ("_position" shp) ("_position" s')) ("_position" e')
###         ("\<^const>HOL.conj" ("_position" T')
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_J_prog) ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###           ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###           ("_position" b')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###             ("_position" s)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" iconf)
###               ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###                 ("_position" e))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###                 ("_applC" ("_position" hp) ("_position" s))
###                 ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###                 ("_position" T))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" T')
###       ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###         ("_applC" ("_position" hp) ("_position" s'))
###         ("_applC" ("_position" shp) ("_position" s')) ("_position" e')
###         ("\<^const>HOL.conj" ("_position" T')
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_J_prog) ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###           ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###           ("_position" b')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###             ("_position" s)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" iconf)
###               ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###                 ("_position" e))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###                 ("_applC" ("_position" hp) ("_position" s))
###                 ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###                 ("_position" T))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" T')
###       ("\<^const>HOL.conj"
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s'))
###           ("_applC" ("_position" shp) ("_position" s')) ("_position" e')
###           ("_position" T'))
###         ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###           ("_position" T))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_J_prog) ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###           ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###           ("_position" b')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###             ("_position" s)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" iconf)
###               ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###                 ("_position" e))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###                 ("_applC" ("_position" hp) ("_position" s))
###                 ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###                 ("_position" T))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" T')
###       ("\<^const>HOL.conj"
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s'))
###           ("_applC" ("_position" shp) ("_position" s')) ("_position" e')
###           ("_position" T'))
###         ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###           ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1201 of "$AFP/JinjaDCI/J/TypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_J_prog) ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###           ("_position" s) ("_position" b) ("_position" es') ("_position" s')
###           ("_position" b')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###             ("_position" s)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" iconfs)
###               ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###                 ("_position" es))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###                 ("_applC" ("_position" hp) ("_position" s))
###                 ("_applC" ("_position" shp) ("_position" s))
###                 ("_position" es) ("_position" Ts))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" Ts')
###       ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###         ("_applC" ("_position" hp) ("_position" s'))
###         ("_applC" ("_position" shp) ("_position" s')) ("_position" es')
###         ("\<^const>HOL.conj" ("_position" Ts')
###           ("\<^const>TypeRel.widens" ("_position" P) ("_position" Ts')
###             ("_position" Ts)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_J_prog) ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###           ("_position" s) ("_position" b) ("_position" es') ("_position" s')
###           ("_position" b')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###             ("_position" s)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" iconfs)
###               ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###                 ("_position" es))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###                 ("_applC" ("_position" hp) ("_position" s))
###                 ("_applC" ("_position" shp) ("_position" s))
###                 ("_position" es) ("_position" Ts))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" Ts')
###       ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###         ("_applC" ("_position" hp) ("_position" s'))
###         ("_applC" ("_position" shp) ("_position" s')) ("_position" es')
###         ("\<^const>HOL.conj" ("_position" Ts')
###           ("\<^const>TypeRel.widens" ("_position" P) ("_position" Ts')
###             ("_position" Ts)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_J_prog) ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###           ("_position" s) ("_position" b) ("_position" es') ("_position" s')
###           ("_position" b')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###             ("_position" s)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" iconfs)
###               ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###                 ("_position" es))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###                 ("_applC" ("_position" hp) ("_position" s))
###                 ("_applC" ("_position" shp) ("_position" s))
###                 ("_position" es) ("_position" Ts))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" Ts')
###       ("\<^const>HOL.conj"
###         ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s'))
###           ("_applC" ("_position" shp) ("_position" s')) ("_position" es')
###           ("_position" Ts'))
###         ("\<^const>TypeRel.widens" ("_position" P) ("_position" Ts')
###           ("_position" Ts))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_J_prog) ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###           ("_position" s) ("_position" b) ("_position" es') ("_position" s')
###           ("_position" b')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###             ("_position" s)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" iconfs)
###               ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###                 ("_position" es))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###                 ("_applC" ("_position" hp) ("_position" s))
###                 ("_applC" ("_position" shp) ("_position" s))
###                 ("_position" es) ("_position" Ts))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" Ts')
###       ("\<^const>HOL.conj"
###         ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s'))
###           ("_applC" ("_position" shp) ("_position" s')) ("_position" es')
###           ("_position" Ts'))
###         ("\<^const>TypeRel.widens" ("_position" P) ("_position" Ts')
###           ("_position" Ts))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1213 of "$AFP/JinjaDCI/J/TypeSafe.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder" ("_position" T)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s))
###           ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###           ("_position" T)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" iconf)
###             ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###               ("_position" e))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###               ("_position" s))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###         ("_position" s')))))
### ("\<^const>Pure.all_binder" ("_position" T)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s))
###           ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###           ("_position" T)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" iconf)
###             ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###               ("_position" e))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###               ("_position" s))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###         ("_position" s')))))
### ("\<^const>Pure.all_binder" ("_position" T)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s))
###           ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###           ("_position" T)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" iconf)
###             ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###               ("_position" e))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###               ("_position" s))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###         ("_position" s')))))
### ("\<^const>Pure.all_binder" ("_position" T)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s))
###           ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###           ("_position" T)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" iconf)
###             ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###               ("_position" e))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###               ("_position" s))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###         ("_position" s')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1258 of "$AFP/JinjaDCI/J/TypeSafe.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" iconf)
###       ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###         ("_position" e))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>EConform.bconfs" ("_position" P)
###         ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###         ("_position" b)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>EConform.bconfs" ("_position" P)
###         ("_applC" ("_position" shp) ("_position" s'))
###         ("_constrain" ("_position" e') ("_type_name" expr))
###         ("_position" b')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" iconf)
###       ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###         ("_position" e))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>EConform.bconf" ("_position" P)
###         ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###         ("_position" b)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>EConform.bconfs" ("_position" P)
###         ("_applC" ("_position" shp) ("_position" s'))
###         ("_constrain" ("_position" e') ("_type_name" expr))
###         ("_position" b')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" iconf)
###       ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###         ("_position" e))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>EConform.bconfs" ("_position" P)
###         ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###         ("_position" b)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>EConform.bconf" ("_position" P)
###         ("_applC" ("_position" shp) ("_position" s'))
###         ("_constrain" ("_position" e') ("_type_name" expr))
###         ("_position" b')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" iconf)
###       ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###         ("_position" e))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>EConform.bconf" ("_position" P)
###         ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###         ("_position" b)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>EConform.bconf" ("_position" P)
###         ("_applC" ("_position" shp) ("_position" s'))
###         ("_constrain" ("_position" e') ("_type_name" expr))
###         ("_position" b')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1273 of "$AFP/JinjaDCI/J/TypeSafe.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" iconfs)
###       ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###         ("_position" es))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>EConform.bconfs" ("_position" P)
###         ("_applC" ("_position" shp) ("_position" s)) ("_position" es)
###         ("_position" b)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>EConform.bconfs" ("_position" P)
###         ("_applC" ("_position" shp) ("_position" s'))
###         ("_constrain" ("_position" es')
###           ("_tapp" ("_type_name" expr) ("_type_name" list)))
###         ("_position" b')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" iconfs)
###       ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###         ("_position" es))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>EConform.bconf" ("_position" P)
###         ("_applC" ("_position" shp) ("_position" s)) ("_position" es)
###         ("_position" b)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>EConform.bconfs" ("_position" P)
###         ("_applC" ("_position" shp) ("_position" s'))
###         ("_constrain" ("_position" es')
###           ("_tapp" ("_type_name" expr) ("_type_name" list)))
###         ("_position" b')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" iconfs)
###       ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###         ("_position" es))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>EConform.bconfs" ("_position" P)
###         ("_applC" ("_position" shp) ("_position" s)) ("_position" es)
###         ("_position" b)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>EConform.bconf" ("_position" P)
###         ("_applC" ("_position" shp) ("_position" s'))
###         ("_constrain" ("_position" es')
###           ("_tapp" ("_type_name" expr) ("_type_name" list)))
###         ("_position" b')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" iconfs)
###       ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###         ("_position" es))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>EConform.bconf" ("_position" P)
###         ("_applC" ("_position" shp) ("_position" s)) ("_position" es)
###         ("_position" b)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>EConform.bconf" ("_position" P)
###         ("_applC" ("_position" shp) ("_position" s'))
###         ("_constrain" ("_position" es')
###           ("_tapp" ("_type_name" expr) ("_type_name" list)))
###         ("_position" b')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1300 of "$AFP/JinjaDCI/J/TypeSafe.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" T)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###           ("_position" s)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" iconf)
###             ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###               ("_position" e))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###               ("_applC" ("_position" hp) ("_position" s))
###               ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###               ("_position" T))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" T')
###         ("\<^const>HOL.conj"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T))
###           ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###             ("_applC" ("_position" hp) ("_position" s'))
###             ("_applC" ("_position" shp) ("_position" s')) ("_position" e')
###             ("_position" T')))))))
### ("\<^const>Pure.all_binder" ("_position" T)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###           ("_position" s)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" iconf)
###             ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###               ("_position" e))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###               ("_applC" ("_position" hp) ("_position" s))
###               ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###               ("_position" T))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" T')
###         ("\<^const>HOL.conj"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T))
###           ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###             ("_applC" ("_position" hp) ("_position" s'))
###             ("_applC" ("_position" shp) ("_position" s')) ("_position" e')
###             ("_position" T')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1320 of "$AFP/JinjaDCI/J/TypeSafe.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>wf_config" ("_position" P) ("_position" E) ("_position" s)
###     ("_position" e) ("_position" T))
###   ("\<^const>HOL.conj"
###     ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###       ("_position" s))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" iconf)
###         ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###           ("_position" e)))
###       ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###         ("_applC" ("_position" hp) ("_position" s))
###         ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###         ("_position" T)))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>wf_config" ("_position" P) ("_position" E) ("_position" s)
###     ("_position" e) ("_position" T))
###   ("\<^const>HOL.conj"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###       ("_position" s))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" iconf)
###         ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###           ("_position" e)))
###       ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###         ("_applC" ("_position" hp) ("_position" s))
###         ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###         ("_position" T)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1348 of "$AFP/JinjaDCI/J/TypeSafe.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeSafe.wf_config" ("_position" P) ("_position" E)
###         ("_position" s) ("_position" e) ("_position" T)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" \<D>)
###           ("_cargs" ("_position" e)
###             ("\<^const>Option.option.Some"
###               ("_applC" ("_position" dom)
###                 ("_applC" ("_position" lcl) ("_position" s)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>EConform.bconf" ("_position" P)
###             ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###             ("_position" b)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" final) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" e') ("_idts" ("_position" s') ("_position" b')))
###       ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###         ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###         ("_position" b')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeSafe.wf_config" ("_position" P) ("_position" E)
###         ("_position" s) ("_position" e) ("_position" T)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" \<D>)
###           ("_cargs" ("_position" e)
###             ("\<^const>Option.option.Some"
###               ("_applC" ("_position" dom)
###                 ("_applC" ("_position" lcl) ("_position" s)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>EConform.bconfs" ("_position" P)
###             ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###             ("_position" b)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" final) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" e') ("_idts" ("_position" s') ("_position" b')))
###       ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###         ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###         ("_position" b')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1357 of "$AFP/JinjaDCI/J/TypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1359 of "$AFP/JinjaDCI/J/TypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>EConform.bconfs" ("_position" P)
###     ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>EConform.bconf" ("_position" P)
###     ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.TypeSafe"
### 0.575s elapsed time, 0.678s cpu time, 0.140s GC time
Loading theory "Draft.TypeSafeMoreTemplates"
val templateLemmas =
   [("TypeSafe.Red_preserves_iconf",
     "[| wwf_J_prog ?P;
         ?P \<turnstile> \<langle>?e,?s,?b\<rangle> \<rightarrow>*
                         \<langle>?e',?s',?b'\<rangle>;
         iconf (shp ?s) ?e |]
      ==> iconf (shp ?s') ?e'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_hole 8),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 5),
                      template_app
                       (template_app (template_hole 4, template_var 4),
                        template_var 3))),
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_app
                     (template_app (template_hole 4, template_var 1),
                      template_var 0)))),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 6)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 4)),
              template_var 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 2)
           ))),
    ("TypeSafe.Reds_preserves_iconf",
     "[| wwf_J_prog ?P;
         ?P \<turnstile> \<langle>?es,?s,?b\<rangle> [\<rightarrow>]*
                         \<langle>?es',?s',?b'\<rangle>;
         iconfs (shp ?s) ?es |]
      ==> iconfs (shp ?s') ?es'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_hole 8),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 5),
                      template_app
                       (template_app (template_hole 4, template_var 4),
                        template_var 3))),
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_app
                     (template_app (template_hole 4, template_var 1),
                      template_var 0)))),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 6)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 4)),
              template_var 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 2)
           ))),
    ("TypeSafe.wf_types_clinit",
     "[| wf_prog ?wf_md ?P; class ?P ?C = \<lfloor>?a\<rfloor>;
         ?sh ?C = \<lfloor>(?sfs, Processing)\<rfloor> |]
      ==> ?P,?E,?h,?sh \<turnstile> ?C\<bullet>\<^sub>sclinit([]) : Void",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 7),
              template_var 6)
            ),
        template_equation
         (template_app
           (template_app (template_hole 10, template_var 6),
            template_var 5),
          template_app (template_hole 9, template_var 4)),
        template_equation
         (template_app (template_var 3, template_var 5),
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 2),
              template_hole 5)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 4, template_var 6),
                     template_var 1),
                   template_var 3),
                 template_var 0),
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 5),
                   template_hole 2),
                 template_hole 1)),
             template_hole 0)
           ))),
    ("TypeSafe.red_shext_incr",
     "[| ?P \<turnstile> \<langle>?e,(?h, ?l, ?sh),?b\<rangle> \<rightarrow>
                         \<langle>?e',(?h', ?l', ?sh'),?b'\<rangle>;
         ?P,?E,?h,?sh \<turnstile> ?e : ?T |]
      ==> ?sh \<unlhd>\<^sub>s ?sh'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 12),
                      template_app
                       (template_app
                         (template_hole 5,
                          template_app
                           (template_app (template_hole 4, template_var 11),
                            template_app
                             (template_app
                               (template_hole 3, template_var 10),
                              template_var 9))),
                        template_var 8))),
                  template_app
                   (template_app (template_hole 6, template_var 7),
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app
                         (template_app (template_hole 4, template_var 6),
                          template_app
                           (template_app (template_hole 3, template_var 5),
                            template_var 4))),
                      template_var 3)))),
              template_app (template_hole 2, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 2),
                      template_var 11),
                    template_var 9),
                  template_var 1),
                template_var 12),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 9), template_var 4)
           ))),
    ("TypeSafe.reds_shext_incr",
     "[| ?P \<turnstile> \<langle>?es,(?h, ?l, ?sh),
                          ?b\<rangle> [\<rightarrow>]
                         \<langle>?es',(?h', ?l', ?sh'),?b'\<rangle>;
         ?P,?E,?h,?sh \<turnstile> ?es [:] ?Ts |]
      ==> ?sh \<unlhd>\<^sub>s ?sh'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 12),
                      template_app
                       (template_app
                         (template_hole 5,
                          template_app
                           (template_app (template_hole 4, template_var 11),
                            template_app
                             (template_app
                               (template_hole 3, template_var 10),
                              template_var 9))),
                        template_var 8))),
                  template_app
                   (template_app (template_hole 6, template_var 7),
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app
                         (template_app (template_hole 4, template_var 6),
                          template_app
                           (template_app (template_hole 3, template_var 5),
                            template_var 4))),
                      template_var 3)))),
              template_app (template_hole 2, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 2),
                      template_var 11),
                    template_var 9),
                  template_var 1),
                template_var 12),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 9), template_var 4)
           ))),
    ("TypeSafe.red_lA_incr",
     "?P \<turnstile> \<langle>?e,(?h, ?l, ?sh),?b\<rangle> \<rightarrow>
                      \<langle>?e',(?h', ?l', ?sh'),?b'\<rangle> ==>
      \<lfloor>dom ?l\<rfloor> \<squnion> \<A> ?e \<sqsubseteq>
      \<lfloor>dom ?l'\<rfloor> \<squnion> \<A> ?e'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 10),
                      template_app
                       (template_app
                         (template_hole 8,
                          template_app
                           (template_app (template_hole 7, template_var 9),
                            template_app
                             (template_app
                               (template_hole 6, template_var 8),
                              template_var 7))),
                        template_var 6))),
                  template_app
                   (template_app (template_hole 9, template_var 5),
                    template_app
                     (template_app
                       (template_hole 8,
                        template_app
                         (template_app (template_hole 7, template_var 4),
                          template_app
                           (template_app (template_hole 6, template_var 3),
                            template_var 2))),
                      template_var 1)))),
              template_app (template_hole 5, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 8))),
                 template_app (template_hole 0, template_var 10))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 3))),
               template_app (template_hole 0, template_var 5)))
           ))),
    ("TypeSafe.reds_lA_incr",
     "?P \<turnstile> \<langle>?es,(?h, ?l, ?sh),?b\<rangle> [\<rightarrow>]
                      \<langle>?es',(?h', ?l', ?sh'),?b'\<rangle> ==>
      \<lfloor>dom ?l\<rfloor> \<squnion> \<A>s ?es \<sqsubseteq>
      \<lfloor>dom ?l'\<rfloor> \<squnion> \<A>s ?es'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 10),
                      template_app
                       (template_app
                         (template_hole 8,
                          template_app
                           (template_app (template_hole 7, template_var 9),
                            template_app
                             (template_app
                               (template_hole 6, template_var 8),
                              template_var 7))),
                        template_var 6))),
                  template_app
                   (template_app (template_hole 9, template_var 5),
                    template_app
                     (template_app
                       (template_hole 8,
                        template_app
                         (template_app (template_hole 7, template_var 4),
                          template_app
                           (template_app (template_hole 6, template_var 3),
                            template_var 2))),
                      template_var 1)))),
              template_app (template_hole 5, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 8))),
                 template_app (template_hole 0, template_var 10))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 3))),
               template_app (template_hole 0, template_var 5)))
           ))),
    ("TypeSafe.red_preserves_iconf",
     "[| wwf_J_prog ?P;
         ?P \<turnstile> \<langle>?e,(?h, ?l, ?sh),?b\<rangle> \<rightarrow>
                         \<langle>?e',(?h', ?l', ?sh'),?b'\<rangle>;
         iconf ?sh ?e |]
      ==> iconf ?sh' ?e'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_hole 8),
              template_var 10)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 9),
                      template_app
                       (template_app
                         (template_hole 4,
                          template_app
                           (template_app (template_hole 3, template_var 8),
                            template_app
                             (template_app
                               (template_hole 2, template_var 7),
                              template_var 6))),
                        template_var 5))),
                  template_app
                   (template_app (template_hole 5, template_var 4),
                    template_app
                     (template_app
                       (template_hole 4,
                        template_app
                         (template_app (template_hole 3, template_var 3),
                          template_app
                           (template_app (template_hole 2, template_var 2),
                            template_var 1))),
                      template_var 0)))),
              template_app (template_hole 1, template_var 10))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 6),
              template_var 9)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 4)
           ))),
    ("TypeSafe.reds_preserves_iconf",
     "[| wwf_J_prog ?P;
         ?P \<turnstile> \<langle>?es,(?h, ?l, ?sh),
                          ?b\<rangle> [\<rightarrow>]
                         \<langle>?es',(?h', ?l', ?sh'),?b'\<rangle>;
         iconfs ?sh ?es |]
      ==> iconfs ?sh' ?es'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_hole 8),
              template_var 10)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 9),
                      template_app
                       (template_app
                         (template_hole 4,
                          template_app
                           (template_app (template_hole 3, template_var 8),
                            template_app
                             (template_app
                               (template_hole 2, template_var 7),
                              template_var 6))),
                        template_var 5))),
                  template_app
                   (template_app (template_hole 5, template_var 4),
                    template_app
                     (template_app
                       (template_hole 4,
                        template_app
                         (template_app (template_hole 3, template_var 3),
                          template_app
                           (template_app (template_hole 2, template_var 2),
                            template_var 1))),
                      template_var 0)))),
              template_app (template_hole 1, template_var 10))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 6),
              template_var 9)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 4)
           ))),
    ("TypeSafe.red_preserves_sconf",
     "[| ?P \<turnstile> \<langle>?e,?s,?b\<rangle> \<rightarrow>
                         \<langle>?e',?s',?b'\<rangle>;
         ?P,?E,hp ?s,shp ?s \<turnstile> ?e : ?T;
         ?P,?E \<turnstile> ?s \<surd> |]
      ==> ?P,?E \<turnstile> ?s' \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 8),
                      template_app
                       (template_app (template_hole 5, template_var 7),
                        template_var 6))),
                  template_app
                   (template_app (template_hole 6, template_var 5),
                    template_app
                     (template_app (template_hole 5, template_var 4),
                      template_var 3)))),
              template_app (template_hole 4, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 2),
                      template_app (template_hole 2, template_var 7)),
                    template_app (template_hole 1, template_var 7)),
                  template_var 1),
                template_var 8),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1),
              template_var 7)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 4)
           ))),
    ("TypeSafe.reds_preserves_sconf",
     "[| ?P \<turnstile> \<langle>?es,?s,?b\<rangle> [\<rightarrow>]
                         \<langle>?es',?s',?b'\<rangle>;
         ?P,?E,hp ?s,shp ?s \<turnstile> ?es [:] ?Ts;
         ?P,?E \<turnstile> ?s \<surd> |]
      ==> ?P,?E \<turnstile> ?s' \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 8),
                      template_app
                       (template_app (template_hole 5, template_var 7),
                        template_var 6))),
                  template_app
                   (template_app (template_hole 6, template_var 5),
                    template_app
                     (template_app (template_hole 5, template_var 4),
                      template_var 3)))),
              template_app (template_hole 4, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 2),
                      template_app (template_hole 2, template_var 7)),
                    template_app (template_hole 1, template_var 7)),
                  template_var 1),
                template_var 8),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1),
              template_var 7)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 4)
           ))),
    ("TypeSafe.red_preserves_bconf",
     "[| ?P \<turnstile> \<langle>?e,(?h, ?l, ?sh),?b\<rangle> \<rightarrow>
                         \<langle>?e',(?h', ?l', ?sh'),?b'\<rangle>;
         iconf ?sh ?e; ?P,?sh \<turnstile>\<^sub>b (?e,?b) \<surd> |]
      ==> ?P,?sh' \<turnstile>\<^sub>b (?e',?b') \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 10),
                      template_app
                       (template_app
                         (template_hole 5,
                          template_app
                           (template_app (template_hole 4, template_var 9),
                            template_app
                             (template_app
                               (template_hole 3, template_var 8),
                              template_var 7))),
                        template_var 6))),
                  template_app
                   (template_app (template_hole 6, template_var 5),
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app
                         (template_app (template_hole 4, template_var 4),
                          template_app
                           (template_app (template_hole 3, template_var 3),
                            template_var 2))),
                      template_var 1)))),
              template_app (template_hole 2, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 7),
              template_var 10)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 0),
                  template_var 7),
                template_var 10),
              template_var 6)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2),
               template_var 5),
             template_var 1)
           ))),
    ("TypeSafe.red_preserves_hconf",
     "[| ?P \<turnstile> \<langle>?e,(?h, ?l, ?sh),?b\<rangle> \<rightarrow>
                         \<langle>?e',(?h', ?l', ?sh'),?b'\<rangle>;
         ?P,?E,?h,?sh \<turnstile> ?e : ?T; ?P \<turnstile> ?h \<surd> |]
      ==> ?P \<turnstile> ?h' \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 12),
                      template_app
                       (template_app
                         (template_hole 5,
                          template_app
                           (template_app (template_hole 4, template_var 11),
                            template_app
                             (template_app
                               (template_hole 3, template_var 10),
                              template_var 9))),
                        template_var 8))),
                  template_app
                   (template_app (template_hole 6, template_var 7),
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app
                         (template_app (template_hole 4, template_var 6),
                          template_app
                           (template_app (template_hole 3, template_var 5),
                            template_var 4))),
                      template_var 3)))),
              template_app (template_hole 2, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 2),
                      template_var 11),
                    template_var 9),
                  template_var 1),
                template_var 12),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 11)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 6)
           ))),
    ("TypeSafe.reds_preserves_bconf",
     "[| ?P \<turnstile> \<langle>?es,(?h, ?l, ?sh),
                          ?b\<rangle> [\<rightarrow>]
                         \<langle>?es',(?h', ?l', ?sh'),?b'\<rangle>;
         iconfs ?sh ?es; ?P,?sh \<turnstile>\<^sub>b (?es,?b) \<surd> |]
      ==> ?P,?sh' \<turnstile>\<^sub>b (?es',?b') \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 10),
                      template_app
                       (template_app
                         (template_hole 5,
                          template_app
                           (template_app (template_hole 4, template_var 9),
                            template_app
                             (template_app
                               (template_hole 3, template_var 8),
                              template_var 7))),
                        template_var 6))),
                  template_app
                   (template_app (template_hole 6, template_var 5),
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app
                         (template_app (template_hole 4, template_var 4),
                          template_app
                           (template_app (template_hole 3, template_var 3),
                            template_var 2))),
                      template_var 1)))),
              template_app (template_hole 2, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 7),
              template_var 10)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 0),
                  template_var 7),
                template_var 10),
              template_var 6)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2),
               template_var 5),
             template_var 1)
           ))),
    ("TypeSafe.reds_preserves_hconf",
     "[| ?P \<turnstile> \<langle>?es,(?h, ?l, ?sh),
                          ?b\<rangle> [\<rightarrow>]
                         \<langle>?es',(?h', ?l', ?sh'),?b'\<rangle>;
         ?P,?E,?h,?sh \<turnstile> ?es [:] ?Ts;
         ?P \<turnstile> ?h \<surd> |]
      ==> ?P \<turnstile> ?h' \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 12),
                      template_app
                       (template_app
                         (template_hole 5,
                          template_app
                           (template_app (template_hole 4, template_var 11),
                            template_app
                             (template_app
                               (template_hole 3, template_var 10),
                              template_var 9))),
                        template_var 8))),
                  template_app
                   (template_app (template_hole 6, template_var 7),
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app
                         (template_app (template_hole 4, template_var 6),
                          template_app
                           (template_app (template_hole 3, template_var 5),
                            template_var 4))),
                      template_var 3)))),
              template_app (template_hole 2, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 2),
                      template_var 11),
                    template_var 9),
                  template_var 1),
                template_var 12),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 11)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 6)
           ))),
    ("TypeSafe.Subject_reduction",
     "[| wf_J_prog ?P;
         ?P \<turnstile> \<langle>?e,?s,?b\<rangle> \<rightarrow>
                         \<langle>?e',?s',?b'\<rangle>;
         ?P,?E,?s \<turnstile> ?e : ?T \<surd> |]
      ==> EX T'.
             ?P,?E,?s' \<turnstile> ?e' : T' \<surd> &
             ?P \<turnstile> T' \<le> ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_hole 9),
              template_var 8)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 7),
                      template_app
                       (template_app (template_hole 5, template_var 6),
                        template_var 5))),
                  template_app
                   (template_app (template_hole 6, template_var 4),
                    template_app
                     (template_app (template_hole 5, template_var 3),
                      template_var 2)))),
              template_app (template_hole 4, template_var 8))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 8),
                    template_var 1),
                  template_var 6),
                template_var 7),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("TypeSafe.Red_preserves_bconf",
     "[| wwf_J_prog ?P;
         ?P \<turnstile> \<langle>?e,?s,?b\<rangle> \<rightarrow>*
                         \<langle>?e',?s',?b'\<rangle>;
         iconf (shp ?s) ?e;
         ?P,shp ?s \<turnstile>\<^sub>b (?e,?b) \<surd> |]
      ==> ?P,shp ?s' \<turnstile>\<^sub>b (?e',?b') \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_hole 9),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 5),
                      template_app
                       (template_app (template_hole 5, template_var 4),
                        template_var 3))),
                  template_app
                   (template_app (template_hole 6, template_var 2),
                    template_app
                     (template_app (template_hole 5, template_var 1),
                      template_var 0)))),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 6)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 4)),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 6),
                  template_app (template_hole 1, template_var 4)),
                template_var 5),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 6),
                 template_app (template_hole 1, template_var 1)),
               template_var 2),
             template_var 0)
           ))),
    ("TypeSafe.Reds_preserves_bconf",
     "[| wwf_J_prog ?P;
         ?P \<turnstile> \<langle>?es,?s,?b\<rangle> [\<rightarrow>]*
                         \<langle>?es',?s',?b'\<rangle>;
         iconfs (shp ?s) ?es;
         ?P,shp ?s \<turnstile>\<^sub>b (?es,?b) \<surd> |]
      ==> ?P,shp ?s' \<turnstile>\<^sub>b (?es',?b') \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_hole 9),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 5),
                      template_app
                       (template_app (template_hole 5, template_var 4),
                        template_var 3))),
                  template_app
                   (template_app (template_hole 6, template_var 2),
                    template_app
                     (template_app (template_hole 5, template_var 1),
                      template_var 0)))),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 6)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 4)),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 6),
                  template_app (template_hole 1, template_var 4)),
                template_var 5),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 6),
                 template_app (template_hole 1, template_var 1)),
               template_var 2),
             template_var 0)
           ))),
    ("TypeSafe.Subject_reductions",
     "[| wf_J_prog ?P;
         ?P \<turnstile> \<langle>?e,?s,?b\<rangle> \<rightarrow>*
                         \<langle>?e',?s',?b'\<rangle>;
         ?P,?E,?s \<turnstile> ?e : ?T \<surd> |]
      ==> EX T'.
             ?P,?E,?s' \<turnstile> ?e' : T' \<surd> &
             ?P \<turnstile> T' \<le> ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_hole 10),
              template_var 8)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_var 7),
                      template_app
                       (template_app (template_hole 6, template_var 6),
                        template_var 5))),
                  template_app
                   (template_app (template_hole 7, template_var 4),
                    template_app
                     (template_app (template_hole 6, template_var 3),
                      template_var 2)))),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 8)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 8),
                    template_var 1),
                  template_var 6),
                template_var 7),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("TypeSafe.red_preserves_shconf",
     "[| ?P \<turnstile> \<langle>?e,(?h, ?l, ?sh),?b\<rangle> \<rightarrow>
                         \<langle>?e',(?h', ?l', ?sh'),?b'\<rangle>;
         ?P,?E,?h,?sh \<turnstile> ?e : ?T;
         ?P,?h \<turnstile>\<^sub>s ?sh \<surd> |]
      ==> ?P,?h' \<turnstile>\<^sub>s ?sh' \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 12),
                      template_app
                       (template_app
                         (template_hole 5,
                          template_app
                           (template_app (template_hole 4, template_var 11),
                            template_app
                             (template_app
                               (template_hole 3, template_var 10),
                              template_var 9))),
                        template_var 8))),
                  template_app
                   (template_app (template_hole 6, template_var 7),
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app
                         (template_app (template_hole 4, template_var 6),
                          template_app
                           (template_app (template_hole 3, template_var 5),
                            template_var 4))),
                      template_var 3)))),
              template_app (template_hole 2, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 2),
                      template_var 11),
                    template_var 9),
                  template_var 1),
                template_var 12),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 11),
              template_var 9)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 6),
             template_var 4)
           ))),
    ("TypeSafe.reds_preserves_shconf",
     "[| ?P \<turnstile> \<langle>?es,(?h, ?l, ?sh),
                          ?b\<rangle> [\<rightarrow>]
                         \<langle>?es',(?h', ?l', ?sh'),?b'\<rangle>;
         ?P,?E,?h,?sh \<turnstile> ?es [:] ?Ts;
         ?P,?h \<turnstile>\<^sub>s ?sh \<surd> |]
      ==> ?P,?h' \<turnstile>\<^sub>s ?sh' \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 12),
                      template_app
                       (template_app
                         (template_hole 5,
                          template_app
                           (template_app (template_hole 4, template_var 11),
                            template_app
                             (template_app
                               (template_hole 3, template_var 10),
                              template_var 9))),
                        template_var 8))),
                  template_app
                   (template_app (template_hole 6, template_var 7),
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app
                         (template_app (template_hole 4, template_var 6),
                          template_app
                           (template_app (template_hole 3, template_var 5),
                            template_var 4))),
                      template_var 3)))),
              template_app (template_hole 2, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 2),
                      template_var 11),
                    template_var 9),
                  template_var 1),
                template_var 12),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 11),
              template_var 9)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 6),
             template_var 4)
           ))),
    ("TypeSafe.red_preserves_lconf",
     "[| ?P \<turnstile> \<langle>?e,(?h, ?l, ?sh),?b\<rangle> \<rightarrow>
                         \<langle>?e',(?h', ?l', ?sh'),?b'\<rangle>;
         ?P,?E,?h,?sh \<turnstile> ?e : ?T;
         ?P,?h \<turnstile> ?l (:\<le>) ?E |]
      ==> ?P,?h' \<turnstile> ?l' (:\<le>) ?E",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 12),
                      template_app
                       (template_app
                         (template_hole 5,
                          template_app
                           (template_app (template_hole 4, template_var 11),
                            template_app
                             (template_app
                               (template_hole 3, template_var 10),
                              template_var 9))),
                        template_var 8))),
                  template_app
                   (template_app (template_hole 6, template_var 7),
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app
                         (template_app (template_hole 4, template_var 6),
                          template_app
                           (template_app (template_hole 3, template_var 5),
                            template_var 4))),
                      template_var 3)))),
              template_app (template_hole 2, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 2),
                      template_var 11),
                    template_var 9),
                  template_var 1),
                template_var 12),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 11),
                template_var 10),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 6),
               template_var 5),
             template_var 1)
           ))),
    ("TypeSafe.reds_preserves_lconf",
     "[| ?P \<turnstile> \<langle>?es,(?h, ?l, ?sh),
                          ?b\<rangle> [\<rightarrow>]
                         \<langle>?es',(?h', ?l', ?sh'),?b'\<rangle>;
         ?P,?E,?h,?sh \<turnstile> ?es [:] ?Ts;
         ?P,?h \<turnstile> ?l (:\<le>) ?E |]
      ==> ?P,?h' \<turnstile> ?l' (:\<le>) ?E",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 12),
                      template_app
                       (template_app
                         (template_hole 5,
                          template_app
                           (template_app (template_hole 4, template_var 11),
                            template_app
                             (template_app
                               (template_hole 3, template_var 10),
                              template_var 9))),
                        template_var 8))),
                  template_app
                   (template_app (template_hole 6, template_var 7),
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app
                         (template_app (template_hole 4, template_var 6),
                          template_app
                           (template_app (template_hole 3, template_var 5),
                            template_var 4))),
                      template_var 3)))),
              template_app (template_hole 2, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 2),
                      template_var 11),
                    template_var 9),
                  template_var 1),
                template_var 12),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 11),
                template_var 10),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 6),
               template_var 5),
             template_var 1)
           ))),
    ("TypeSafe.Red_preserves_sconf",
     "[| wf_J_prog ?P;
         ?P \<turnstile> \<langle>?e,?s,?b\<rangle> \<rightarrow>*
                         \<langle>?e',?s',?b'\<rangle>;
         ?P,?E,hp ?s,shp ?s \<turnstile> ?e : ?T; iconf (shp ?s) ?e;
         ?P,?E \<turnstile> ?s \<surd> |]
      ==> ?P,?E \<turnstile> ?s' \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_hole 11),
              template_var 8)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 7),
                      template_app
                       (template_app (template_hole 7, template_var 6),
                        template_var 5))),
                  template_app
                   (template_app (template_hole 8, template_var 4),
                    template_app
                     (template_app (template_hole 7, template_var 3),
                      template_var 2)))),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 8)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 4, template_var 8),
                      template_app (template_hole 3, template_var 6)),
                    template_app (template_hole 2, template_var 6)),
                  template_var 1),
                template_var 7),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 2, template_var 6)),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 8),
                template_var 1),
              template_var 6)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 8),
               template_var 1),
             template_var 3)
           ))),
    ("TypeSafe.Seq_bconf_preserve_aux",
     "[| ?P \<turnstile> \<langle>?e,(?h, ?l, ?sh),?b\<rangle> \<rightarrow>
                         \<langle>?e',(?h', ?l', ?sh'),?b'\<rangle>;
         ?P,?sh \<turnstile>\<^sub>b (?e;; ?e\<^sub>2,?b) \<surd>;
         ?P,?sh \<turnstile>\<^sub>b (?e,?b) \<surd> -->
         ?P,?sh' \<turnstile>\<^sub>b (?e',?b') \<surd> |]
      ==> ?P,?sh' \<turnstile>\<^sub>b (?e';; ?e\<^sub>2,?b') \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_var 11),
                      template_app
                       (template_app
                         (template_hole 6,
                          template_app
                           (template_app (template_hole 5, template_var 10),
                            template_app
                             (template_app
                               (template_hole 4, template_var 9),
                              template_var 8))),
                        template_var 7))),
                  template_app
                   (template_app (template_hole 7, template_var 6),
                    template_app
                     (template_app
                       (template_hole 6,
                        template_app
                         (template_app (template_hole 5, template_var 5),
                          template_app
                           (template_app (template_hole 4, template_var 4),
                            template_var 3))),
                      template_var 2)))),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 8),
                template_app
                 (template_app (template_hole 1, template_var 11),
                  template_var 0)),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 0,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_var 1),
                      template_var 8),
                    template_var 11),
                  template_var 7)),
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 1),
                    template_var 3),
                  template_var 6),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 3),
               template_app
                (template_app (template_hole 1, template_var 6),
                 template_var 0)),
             template_var 2)
           ))),
    ("TypeSafe.Progress",
     "[| wf_J_prog ?P; ?P,?E,?s \<turnstile> ?e : ?T \<surd>;
         \<D> ?e \<lfloor>dom (lcl ?s)\<rfloor>;
         ?P,shp ?s \<turnstile>\<^sub>b (?e,?b) \<surd>; ~ final ?e |]
      ==> EX e' s' b'.
             ?P \<turnstile> \<langle>?e,?s,?b\<rangle> \<rightarrow>
                             \<langle>e',s',b'\<rangle>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 18, template_hole 17),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 16, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 2),
              template_app
               (template_hole 14,
                template_app
                 (template_hole 13,
                  template_app (template_hole 12, template_var 3))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 11, template_var 5),
                  template_app (template_hole 10, template_var 3)),
                template_var 2),
              template_var 0)
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 8, template_var 2))
            )],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("TypeSafe.wt_blocks",
     "[| length ?Vs = length ?Ts; length ?vs = length ?Ts |]
      ==> (?P,?E,?h,?sh \<turnstile> blocks (?Vs, ?Ts, ?vs, ?e) : ?T) =
          (?P,?E(?Vs [|->] ?Ts),?h,?sh \<turnstile> ?e : ?T &
           (EX Ts'.
               map typeof\<^bsub>?h\<^esub> ?vs = map Some Ts' &
               ?P \<turnstile> Ts' [\<le>] ?Ts))",
     template_implication
      ([template_equation
         (template_app (template_hole 18, template_var 8),
          template_app (template_hole 17, template_var 7)),
        template_equation
         (template_app (template_hole 16, template_var 6),
          template_app (template_hole 17, template_var 7))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 14, template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_app
              (template_hole 13,
               template_app
                (template_app (template_hole 12, template_var 8),
                 template_app
                  (template_app (template_hole 11, template_var 7),
                   template_app
                    (template_app (template_hole 10, template_var 6),
                     template_var 1))))),
           template_var 0),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 14, template_var 5),
                       template_var 4),
                     template_var 3),
                   template_app
                    (template_app
                      (template_app (template_hole 8, template_var 2),
                       template_var 8),
                     template_var 7)),
                 template_var 1),
               template_var 0)),
           template_app (template_hole 7, t_empty))))),
    ("TypeSafe.subject_reduction",
     "[| wf_J_prog ?P;
         ?P \<turnstile> \<langle>?e,?s,?b\<rangle> \<rightarrow>
                         \<langle>?e',?s',?b'\<rangle>;
         ?P,?E \<turnstile> ?s \<surd>; iconf (shp ?s) ?e;
         ?P,?E,hp ?s,shp ?s \<turnstile> ?e : ?T |]
      ==> EX T'.
             ?P,?E,hp ?s',shp ?s' \<turnstile> ?e' : T' &
             ?P \<turnstile> T' \<le> ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_hole 13),
              template_var 8)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app (template_hole 10, template_var 7),
                      template_app
                       (template_app (template_hole 9, template_var 6),
                        template_var 5))),
                  template_app
                   (template_app (template_hole 10, template_var 4),
                    template_app
                     (template_app (template_hole 9, template_var 3),
                      template_var 2)))),
              template_app (template_hole 8, template_var 8))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 8),
                template_var 1),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 6)),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 4, template_var 8),
                      template_app (template_hole 3, template_var 6)),
                    template_app (template_hole 5, template_var 6)),
                  template_var 1),
                template_var 7),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("TypeSafe.subjects_reduction",
     "[| wf_J_prog ?P;
         ?P \<turnstile> \<langle>?es,?s,?b\<rangle> [\<rightarrow>]
                         \<langle>?es',?s',?b'\<rangle>;
         ?P,?E \<turnstile> ?s \<surd>; iconfs (shp ?s) ?es;
         ?P,?E,hp ?s,shp ?s \<turnstile> ?es [:] ?Ts |]
      ==> EX Ts'.
             ?P,?E,hp ?s',shp ?s' \<turnstile> ?es' [:] Ts' &
             ?P \<turnstile> Ts' [\<le>] ?Ts",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_hole 14),
              template_var 8)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app
                   (template_hole 12,
                    template_app
                     (template_app (template_hole 11, template_var 7),
                      template_app
                       (template_app (template_hole 10, template_var 6),
                        template_var 5))),
                  template_app
                   (template_app (template_hole 11, template_var 4),
                    template_app
                     (template_app (template_hole 10, template_var 3),
                      template_var 2)))),
              template_app (template_hole 9, template_var 8))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 8),
                template_var 1),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 6)),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 5, template_var 8),
                      template_app (template_hole 4, template_var 6)),
                    template_app (template_hole 6, template_var 6)),
                  template_var 1),
                template_var 7),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("TypeSafe.Red_preserves_type",
     "[| wf_J_prog ?P;
         ?P \<turnstile> \<langle>?e,?s,?b\<rangle> \<rightarrow>*
                         \<langle>?e',?s',?b'\<rangle>;
         ?P,?E \<turnstile> ?s \<surd>; iconf (shp ?s) ?e;
         ?P,?E,hp ?s,shp ?s \<turnstile> ?e : ?T |]
      ==> EX T'.
             ?P \<turnstile> T' \<le> ?T &
             ?P,?E,hp ?s',shp ?s' \<turnstile> ?e' : T'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_hole 14),
              template_var 8)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app
                   (template_hole 12,
                    template_app
                     (template_app (template_hole 11, template_var 7),
                      template_app
                       (template_app (template_hole 10, template_var 6),
                        template_var 5))),
                  template_app
                   (template_app (template_hole 11, template_var 4),
                    template_app
                     (template_app (template_hole 10, template_var 3),
                      template_var 2)))),
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 8)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 8),
                template_var 1),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 6)),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 4, template_var 8),
                      template_app (template_hole 3, template_var 6)),
                    template_app (template_hole 5, template_var 6)),
                  template_var 1),
                template_var 7),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("TypeSafe.subject_reduction2",
     "[| wf_J_prog ?P;
         ?P \<turnstile> \<langle>?e,(?h, ?l, ?sh),?b\<rangle> \<rightarrow>
                         \<langle>?e',(?h', ?l', ?sh'),?b'\<rangle>;
         ?P,?E \<turnstile> (?h, ?l, ?sh) \<surd>; iconf ?sh ?e;
         ?P,?E,?h,?sh \<turnstile> ?e : ?T |]
      ==> EX T'.
             ?P,?E,?h',?sh' \<turnstile> ?e' : T' &
             ?P \<turnstile> T' \<le> ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_hole 13),
              template_var 12)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app (template_hole 10, template_var 11),
                      template_app
                       (template_app
                         (template_hole 9,
                          template_app
                           (template_app (template_hole 8, template_var 10),
                            template_app
                             (template_app
                               (template_hole 7, template_var 9),
                              template_var 8))),
                        template_var 7))),
                  template_app
                   (template_app (template_hole 10, template_var 6),
                    template_app
                     (template_app
                       (template_hole 9,
                        template_app
                         (template_app (template_hole 8, template_var 5),
                          template_app
                           (template_app (template_hole 7, template_var 4),
                            template_var 3))),
                      template_var 2)))),
              template_app (template_hole 6, template_var 12))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 12),
                template_var 1),
              template_app
               (template_app (template_hole 8, template_var 10),
                template_app
                 (template_app (template_hole 7, template_var 9),
                  template_var 8)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 8),
              template_var 11)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 12),
                      template_var 10),
                    template_var 8),
                  template_var 1),
                template_var 11),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("TypeSafe.subjects_reduction2",
     "[| wf_J_prog ?P;
         ?P \<turnstile> \<langle>?es,(?h, ?l, ?sh),
                          ?b\<rangle> [\<rightarrow>]
                         \<langle>?es',(?h', ?l', ?sh'),?b'\<rangle>;
         ?P,?E \<turnstile> (?h, ?l, ?sh) \<surd>; iconfs ?sh ?es;
         ?P,?E,?h,?sh \<turnstile> ?es [:] ?Ts |]
      ==> EX Ts'.
             ?P,?E,?h',?sh' \<turnstile> ?es' [:] Ts' &
             ?P \<turnstile> Ts' [\<le>] ?Ts",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_hole 14),
              template_var 12)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app
                   (template_hole 12,
                    template_app
                     (template_app (template_hole 11, template_var 11),
                      template_app
                       (template_app
                         (template_hole 10,
                          template_app
                           (template_app (template_hole 9, template_var 10),
                            template_app
                             (template_app
                               (template_hole 8, template_var 9),
                              template_var 8))),
                        template_var 7))),
                  template_app
                   (template_app (template_hole 11, template_var 6),
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_app (template_hole 9, template_var 5),
                          template_app
                           (template_app (template_hole 8, template_var 4),
                            template_var 3))),
                      template_var 2)))),
              template_app (template_hole 7, template_var 12))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 12),
                template_var 1),
              template_app
               (template_app (template_hole 9, template_var 10),
                template_app
                 (template_app (template_hole 8, template_var 9),
                  template_var 8)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 8),
              template_var 11)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 4, template_var 12),
                      template_var 10),
                    template_var 8),
                  template_var 1),
                template_var 11),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("TypeSafe.TypeSafety",
     "[| wf_J_prog ?P; ?P,?E \<turnstile> ?s \<surd>;
         ?P,?E \<turnstile> ?e :: ?T;
         \<D> ?e \<lfloor>dom (lcl ?s)\<rfloor>; iconf (shp ?s) ?e;
         ?P,shp ?s \<turnstile>\<^sub>b (?e,?b) \<surd>;
         ?P \<turnstile> \<langle>?e,?s,?b\<rangle> \<rightarrow>*
                         \<langle>?e',?s',?b'\<rangle>;
         \<nexists>e'' s'' b''.
            ?P \<turnstile> \<langle>?e',?s',?b'\<rangle> \<rightarrow>
                            \<langle>e'',s'',b''\<rangle> |]
      ==> (EX v. ?e' = Val v & ?P,hp ?s' \<turnstile> v :\<le> ?T) |
          (EX a. ?e' = Throw a & a : dom (hp ?s'))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 32, template_hole 31),
              template_var 8)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 30, template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 29, template_var 8),
                  template_var 7),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 28, template_var 5),
              template_app
               (template_hole 27,
                template_app
                 (template_hole 26,
                  template_app (template_hole 25, template_var 6))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 24,
                template_app (template_hole 23, template_var 6)),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 22, template_var 8),
                  template_app (template_hole 23, template_var 6)),
                template_var 5),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 21,
                template_app
                 (template_app
                   (template_hole 20,
                    template_app
                     (template_app (template_hole 19, template_var 5),
                      template_app
                       (template_app (template_hole 18, template_var 6),
                        template_var 3))),
                  template_app
                   (template_app (template_hole 19, template_var 2),
                    template_app
                     (template_app (template_hole 18, template_var 1),
                      template_var 0)))),
              template_app
               (template_hole 17,
                template_app (template_hole 16, template_var 8)))
            ),
        template_negation
         (template_predicate (template_app (template_hole 14, t_empty)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11, template_app (template_hole 10, t_empty)),
             template_app (template_hole 4, t_empty))
           )))]:
   (string * thm * template) list
### theory "Draft.TypeSafeMoreTemplates"
### 0.496s elapsed time, 0.718s cpu time, 0.105s GC time
val it = (): unit
