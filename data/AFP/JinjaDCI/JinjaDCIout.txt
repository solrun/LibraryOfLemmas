Loading theory "Draft.Auxiliary" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.Equivalence" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.WellTypeRT" via "Draft.WellType" via "Draft.Objects" via "Draft.TypeRel" via "Draft.Decl" via "Draft.Type")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.134s elapsed time, 0.550s cpu time, 0.033s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.TypeComp" via "Draft.Compiler" via "Draft.Correctness2")
### theory "Draft.Auxiliary"
### 0.153s elapsed time, 0.630s cpu time, 0.033s GC time
Loading theory "Draft.Type" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.Equivalence" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.WellTypeRT" via "Draft.WellType" via "Draft.Objects" via "Draft.TypeRel" via "Draft.Decl")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.216s elapsed time, 0.876s cpu time, 0.033s GC time
Loading theory "HOL-Library.Transitive_Closure_Table" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.Equivalence" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.WellTypeRT" via "Draft.WellType" via "Draft.Objects" via "Draft.TypeRel")
Proofs for inductive predicate(s) "rtrancl_path"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rtrancl_tab"
  Proving monotonicity ...
### theory "HOL-Library.Nat_Bijection"
### 0.336s elapsed time, 1.341s cpu time, 0.122s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.ExtrEqs")
consts
  prefixes :: "'a list => 'a list list"
### theory "HOL-Library.Transitive_Closure_Table"
### 0.310s elapsed time, 1.215s cpu time, 0.160s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### theory "Draft.Type"
### 0.714s elapsed time, 2.801s cpu time, 0.313s GC time
Loading theory "Draft.Decl" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.Equivalence" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.WellTypeRT" via "Draft.WellType" via "Draft.Objects" via "Draft.TypeRel")
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  suffixes :: "'a list => 'a list list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### theory "Draft.Decl"
### 0.248s elapsed time, 0.822s cpu time, 0.493s GC time
Loading theory "Draft.TypeRel" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.Equivalence" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.WellTypeRT" via "Draft.WellType" via "Draft.Objects")
Proofs for inductive predicate(s) "list_emb"
  Proving monotonicity ...
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
Proofs for inductive predicate(s) "subcls1p"
consts
  right :: "'a tree => 'a tree"
  Proving monotonicity ...
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  supercls_lst :: "'m prog => char list list => bool"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Proofs for inductive predicate(s) "widen"
  Proving monotonicity ...
### theory "HOL-Library.Stream"
### 1.094s elapsed time, 4.156s cpu time, 0.839s GC time
Loading theory "HOL-Library.While_Combinator" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.BVExec" via "Jinja.Abstract_BV" via "Jinja.Typing_Framework_err" via "Jinja.SemilatAlg" via "Jinja.Typing_Framework_1" via "Jinja.Semilattices" via "Jinja.Err" via "Jinja.Semilat")
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Methods"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Fields"
  Proving monotonicity ...
Found termination order: "{}"
consts
  sublists :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Sublist"
### 1.664s elapsed time, 6.382s cpu time, 1.156s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### theory "HOL-Library.While_Combinator"
### 0.468s elapsed time, 1.836s cpu time, 0.228s GC time
Loading theory "Jinja.Semilat" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.BVExec" via "Jinja.Abstract_BV" via "Jinja.Typing_Framework_err" via "Jinja.SemilatAlg" via "Jinja.Typing_Framework_1" via "Jinja.Semilattices" via "Jinja.Err")
### theory "Draft.TypeRel"
### 0.810s elapsed time, 3.180s cpu time, 0.350s GC time
Loading theory "Draft.Value" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.Equivalence" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.WellTypeRT" via "Draft.WellType" via "Draft.Objects")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale Semilat
  fixes A :: "'a set"
    and r :: "'a => 'a => bool"
    and f :: "'a => 'a => 'a"
  assumes "Semilat A r f"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Jinja.Semilat"
### 0.313s elapsed time, 1.238s cpu time, 0.150s GC time
Loading theory "Jinja.Err" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.BVExec" via "Jinja.Abstract_BV" via "Jinja.Typing_Framework_err" via "Jinja.SemilatAlg" via "Jinja.Typing_Framework_1" via "Jinja.Semilattices")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Addr"
consts
  the_Intg :: "val => int"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_Addr :: "val => nat"
consts
  default_val :: "ty => val"
### theory "Draft.Value"
### 0.474s elapsed time, 1.870s cpu time, 0.228s GC time
Loading theory "Draft.Objects" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.Equivalence" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.WellTypeRT" via "Draft.WellType")
consts
  typeof_h :: "heap => val => ty option"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.121s elapsed time, 4.239s cpu time, 1.238s GC time
Loading theory "List-Index.List_Index" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.TypeComp" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.Compiler1" via "Draft.Hidden")
### No equation for constructor "Err"
consts
  ok_val :: "'a err => 'a"
consts
  find_index :: "('a => bool) => 'a list => nat"
consts
  strict :: "('a => 'b err) => 'a err => 'b err"
### theory "HOL-Library.Tree"
### 2.558s elapsed time, 9.727s cpu time, 2.297s GC time
Loading theory "Draft.Templates" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.ExtrEqs")
consts
  map_index' :: "nat => (nat => 'a => 'b) => 'a list => 'b list"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.065s elapsed time, 0.257s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.JinjaDCIMoreTemplates")
### theory "Jinja.Err"
### 0.961s elapsed time, 3.601s cpu time, 1.204s GC time
Loading theory "Jinja.Listn" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.BVExec" via "Jinja.Abstract_BV" via "Jinja.Typing_Framework_err" via "Jinja.SemilatAlg" via "Jinja.Typing_Framework_1" via "Jinja.Semilattices")
consts
  insert_nth :: "nat => 'a => 'a list => 'a list"
consts
  coalesce :: "'a err list => 'a list err"
Proofs for inductive predicate(s) "iprog"
  Proving monotonicity ...
### theory "Draft.Objects"
### 0.896s elapsed time, 3.349s cpu time, 1.126s GC time
Loading theory "Draft.Exceptions" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.Equivalence" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.WellTypeRT" via "Draft.WellType" via "Draft.Expr")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "List-Index.List_Index"
### 0.429s elapsed time, 1.691s cpu time, 0.187s GC time
Loading theory "Draft.JVMState" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.JVMDefensive" via "Draft.JVMExec" via "Draft.JVMExecInstr" via "Draft.JVMInstructions")
### theory "Draft.Exceptions"
### 0.215s elapsed time, 0.845s cpu time, 0.145s GC time
Loading theory "Draft.Conform" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.Equivalence" via "Draft.TypeSafe" via "Draft.Progress")
### theory "Jinja.Listn"
### 0.364s elapsed time, 1.435s cpu time, 0.145s GC time
Loading theory "Draft.Expr" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.Equivalence" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.WellTypeRT" via "Draft.WellType")
### Ambiguous input (line 34 of "$AFP/JinjaDCI/Common/Conform.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>hconf" ("_position" P) ("_position" h))
###   ("\<^const>HOL.conj"
###     ("_tuple"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" obj))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###             ("_applC" ("_position" Some) ("_position" obj)))
###           ("_position" P)))
###       ("_tuple_arg" ("\<^fixed>hconf" ("_position" h) ("_position" obj))))
###     ("_applC" ("_position" preallocated) ("_position" h))))
### ("\<^const>Pure.eq" ("\<^fixed>hconf" ("_position" P) ("_position" h))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" obj))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some) ("_position" obj)))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" h)
###           ("_position" obj))))
###     ("_applC" ("_position" preallocated) ("_position" h))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 39 of "$AFP/JinjaDCI/Common/Conform.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>shconf" ("_position" P) ("_position" h) ("_position" sh))
###   ("_tuple"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" C) ("_idts" ("_position" sfs) ("_position" i)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" C))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" sfs) ("_tuple_arg" ("_position" i)))))
###         ("_position" P)))
###     ("_tuple_arg"
###       ("\<^fixed>shconf" ("_position" h) ("_position" C)
###         ("_position" sfs)))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>shconf" ("_position" P) ("_position" h) ("_position" sh))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" C) ("_idts" ("_position" sfs) ("_position" i)))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" C))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" sfs) ("_tuple_arg" ("_position" i)))))
###       ("\<^const>Conform.soconf" ("_position" P) ("_position" h)
###         ("_position" C) ("_position" sfs)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Conform"
### 0.512s elapsed time, 1.868s cpu time, 1.118s GC time
Loading theory "Draft.State" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.Equivalence" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.DefAss" via "Draft.BigStep")
### theory "Draft.State"
### 0.052s elapsed time, 0.206s cpu time, 0.050s GC time
Loading theory "Draft.SystemClasses" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.Equivalence" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.DefAss" via "Draft.BigStep" via "Draft.WWellForm" via "Draft.WellForm")
### theory "Draft.SystemClasses"
### 0.081s elapsed time, 0.331s cpu time, 0.000s GC time
Loading theory "Draft.WellForm" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.Equivalence" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.DefAss" via "Draft.BigStep" via "Draft.WWellForm")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 1.041s elapsed time, 3.958s cpu time, 1.365s GC time
Loading theory "Jinja.Opt" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.BVExec" via "Jinja.Abstract_BV" via "Jinja.Typing_Framework_err" via "Jinja.SemilatAlg" via "Jinja.Typing_Framework_1" via "Jinja.Semilattices")
### theory "Jinja.Opt"
### 0.126s elapsed time, 0.498s cpu time, 0.075s GC time
Loading theory "Jinja.Product" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.BVExec" via "Jinja.Abstract_BV" via "Jinja.Typing_Framework_err" via "Jinja.SemilatAlg" via "Jinja.Typing_Framework_1" via "Jinja.Semilattices")
Found termination order: "{}"
Found termination order: "{}"
### theory "Jinja.Product"
### 0.125s elapsed time, 0.491s cpu time, 0.096s GC time
Loading theory "Jinja.Semilattices" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.BVExec" via "Jinja.Abstract_BV" via "Jinja.Typing_Framework_err" via "Jinja.SemilatAlg" via "Jinja.Typing_Framework_1")
Found termination order: "{}"
### theory "Draft.WellForm"
### 0.333s elapsed time, 1.315s cpu time, 0.171s GC time
Loading theory "Draft.PCompiler" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.TypeComp" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.Compiler1")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Jinja.Semilattices"
### 0.327s elapsed time, 1.306s cpu time, 0.227s GC time
Loading theory "Draft.SemiType" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.BVExec" via "Draft.TF_JVM" via "Draft.EffectMono" via "Draft.Effect" via "Draft.JVM_SemiType")
### theory "Draft.JVMState"
### 1.414s elapsed time, 5.443s cpu time, 1.639s GC time
Loading theory "Draft.JVMInstructions" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.JVMDefensive" via "Draft.JVMExec" via "Draft.JVMExecInstr")
### theory "Draft.PCompiler"
### 0.280s elapsed time, 1.111s cpu time, 0.227s GC time
Loading theory "Jinja.Typing_Framework_1" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.BVExec" via "Jinja.Abstract_BV" via "Jinja.Typing_Framework_err" via "Jinja.SemilatAlg")
### theory "Jinja.Typing_Framework_1"
### 0.046s elapsed time, 0.190s cpu time, 0.000s GC time
Loading theory "Jinja.SemilatAlg" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.BVExec" via "Jinja.Abstract_BV" via "Jinja.Typing_Framework_err")
consts
  pluslussub :: "'a list => ('a => 'a => 'a) => 'a => 'a"
### No equation for constructor "Void"
### No equation for constructor "Boolean"
### No equation for constructor "Integer"
### No equation for constructor "NT"
consts
  the_Class :: "ty => char list"
### theory "Jinja.SemilatAlg"
### 0.183s elapsed time, 0.721s cpu time, 0.115s GC time
Loading theory "Jinja.Kildall_1" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.BVExec" via "Jinja.Abstract_BV" via "Jinja.Kildall_2")
consts
  merges :: "('s => 's => 's) => (nat * 's) list => 's list => 's list"
### theory "Draft.SemiType"
### 0.311s elapsed time, 1.243s cpu time, 0.115s GC time
Loading theory "Draft.JVM_SemiType" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.BVExec" via "Draft.TF_JVM" via "Draft.EffectMono" via "Draft.Effect")
### theory "Jinja.Kildall_1"
### 0.083s elapsed time, 0.323s cpu time, 0.000s GC time
Loading theory "Jinja.Kildall_2" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.BVExec" via "Jinja.Abstract_BV")
consts
  propa ::
    "('s => 's => 's)
     => (nat * 's) list => 's list => nat set => 's list * nat set"
### theory "Jinja.Kildall_2"
### 0.157s elapsed time, 0.624s cpu time, 0.127s GC time
Loading theory "Jinja.LBVSpec" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.BVExec" via "Jinja.Abstract_BV" via "Jinja.LBVCorrect")
consts
  merge ::
    "'s list
     => ('s => 's => 's)
        => ('s => 's => bool) => 's => nat => (nat * 's) list => 's => 's"
consts
  wtl_inst_list ::
    "'a list
     => 's list
        => ('s => 's => 's)
           => ('s => 's => bool)
              => 's => 's => (nat => 's => (nat * 's) list)
                             => nat => 's => 's"
### theory "Draft.JVM_SemiType"
### 0.301s elapsed time, 1.198s cpu time, 0.265s GC time
Loading theory "Jinja.Typing_Framework_err" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.BVExec" via "Jinja.Abstract_BV")
locale lbv
  fixes A :: "'a set"
    and r :: "'a => 'a => bool"
    and f :: "'a => 'a => 'a"
    and T :: "'a"  (\<open>\<top>\<close>)
    and B :: "'a"  (\<open>\<bottom>\<close>)
    and step :: "nat => 'a => (nat * 'a) list"
    and merge :: "'a list => nat => (nat * 'a) list => 'a => 'a"
    and wti :: "'a list => nat => 'a => 'a"
    and wtc :: "'a list => nat => 'a => 'a"
    and wtl :: "'b list => 'a list => nat => 'a => 'a"
  assumes "lbv A r f \<top> \<bottom>"
  defines "!!cert. merge cert == merge cert f r \<top>"
    and "!!cert. wti cert == wtl_inst cert f r \<top> step"
    and "!!cert. wtc cert == wtl_cert cert f r \<top> \<bottom> step"
    and
    "!!ins cert.
        wtl ins cert == wtl_inst_list ins cert f r \<top> \<bottom> step"
### theory "Jinja.Typing_Framework_err"
### 0.146s elapsed time, 0.588s cpu time, 0.103s GC time
Loading theory "Jinja.Typing_Framework_2" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.BVExec")
### theory "Jinja.Typing_Framework_2"
### 0.035s elapsed time, 0.143s cpu time, 0.000s GC time
Loading theory "Draft.Hidden" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.TypeComp" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.Compiler1")
### theory "Draft.Hidden"
### 0.078s elapsed time, 0.316s cpu time, 0.119s GC time
*** Undefined fact: "semilat" (line 104 of "$AFP/Jinja/DFA/SemilatAlg.thy")768semilat_DeffactSemilat.semilat_Defsemilat_deffactSemilat.semilat_defsemilat_errIfactErr.semilat_errIsemilat_le_err_Err_plusfactErr.semilat_le_err_Err_plussemilat_le_err_OK1factErr.semilat_le_err_OK1semilat_le_err_OK2factErr.semilat_le_err_OK2semilat_le_err_plus_ErrfactErr.semilat_le_err_plus_Errsemilat_optfactOpt.semilat_optsemilattice_axioms_deffactLattices.semilattice_axioms_defsemilattice_deffactLattices.semilattice_defsemilattice_inf_axiomsfactLattices.semilattice_inf_class.semilattice_inf_axiomssemilattice_inf_class_deffactLattices.semilattice_inf_class_defsemilattice_map2factList.semilattice_map2semilattice_neutr_deffactLattices.semilattice_neutr_defsemilattice_neutr_order_deffactLattices.semilattice_neutr_order_defsemilattice_neutr_set_deffactLattices_Big.semilattice_neutr_set_defsemilattice_order_axioms_deffactLattices.semilattice_order_axioms_defsemilattice_order_deffactLattices.semilattice_order_defsemilattice_order_neutr_set_deffactLattices_Big.semilattice_order_neutr_set_defsemilattice_order_set_deffactLattices_Big.semilattice_order_set_defsemilattice_set_deffactLattices_Big.semilattice_set_defsemilattice_sup_axiomsfactLattices.semilattice_sup_class.semilattice_sup_axiomssemilattice_sup_class_deffactLattices.semilattice_sup_class_defsemilattice.axiomsfactLattices.semilattice.axiomssemilattice.idemfactLattices.semilattice.idemsemilattice.introfactLattices.semilattice.introsemilattice.left_idemfactLattices.semilattice.left_idemsemilattice.right_idemfactLattices.semilattice.right_idemsemilattice_axioms.introfactLattices.semilattice_axioms.introsemilattice_inf.Inf_fin_deffactLattices_Big.semilattice_inf.Inf_fin_defsemilattice_inf.comp_fun_idem_inffactFinite_Set.semilattice_inf.comp_fun_idem_infsemilattice_inf.inf_absorb1factLattices.semilattice_inf.inf_absorb1semilattice_inf.inf_absorb2factLattices.semilattice_inf.inf_absorb2semilattice_inf.inf_acifactLattices.semilattice_inf.inf_acisemilattice_inf.inf_assocfactLattices.semilattice_inf.inf_assocsemilattice_inf.inf_commutefactLattices.semilattice_inf.inf_commutesemilattice_inf.inf_greatestfactLattices.semilattice_inf.inf_greatestsemilattice_inf.inf_idemfactLattices.semilattice_inf.inf_idemsemilattice_inf.inf_le1factLattices.semilattice_inf.inf_le1semilattice_inf.inf_le2factLattices.semilattice_inf.inf_le2
*** At command "thm" (line 104 of "$AFP/Jinja/DFA/SemilatAlg.thy")
semilat (?A, ?r, ?f) =
(order ?r ?A &
 closed ?A ?f &
 (ALL x:?A. ALL y:?A. x <=_?r x +_?f y) &
 (ALL x:?A. ALL y:?A. y <=_?r x +_?f y) &
 (ALL x:?A. ALL y:?A. ALL z:?A. x <=_?r z & y <=_?r z --> x +_?f y <=_?r z))
semilat (?A, ?r, ?f) ==> Semilat ?A ?r ?f
### theory "Jinja.LBVSpec"
### 0.456s elapsed time, 1.823s cpu time, 0.359s GC time
Loading theory "Jinja.LBVCorrect" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.BVExec" via "Jinja.Abstract_BV")
Loading theory "Jinja.LBVComplete" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.BVExec" via "Jinja.Abstract_BV")
locale lbvs
  fixes A :: "'a set"
    and r :: "'a => 'a => bool"
    and f :: "'a => 'a => 'a"
    and T :: "'a"  (\<open>\<top>\<close>)
    and B :: "'a"  (\<open>\<bottom>\<close>)
    and step :: "nat => 'a => (nat * 'a) list"
    and merge :: "'a list => nat => (nat * 'a) list => 'a => 'a"
    and wti :: "'a list => nat => 'a => 'a"
    and wtc :: "'a list => nat => 'a => 'a"
    and wtl :: "'b list => 'a list => nat => 'a => 'a"
    and s\<^sub>0 :: "'a"
    and c :: "'a list"
    and ins :: "'b list"
    and \<tau>s :: "'a list"
  assumes "lbvs A r f \<top> \<bottom> step c ins"
  defines "!!cert. merge cert == merge cert f r \<top>"
    and "!!cert. wti cert == wtl_inst cert f r \<top> step"
    and "!!cert. wtc cert == wtl_cert cert f r \<top> \<bottom> step"
    and
    "!!ins cert.
        wtl ins cert == wtl_inst_list ins cert f r \<top> \<bottom> step"
    and
    "\<tau>s ==
     map (%pc. if c ! pc = \<bottom> then wtl (take pc ins) c 0 s\<^sub>0
               else c ! pc)
      [0..<length ins]"
locale lbvc
  fixes A :: "'a set"
    and r :: "'a => 'a => bool"
    and f :: "'a => 'a => 'a"
    and T :: "'a"  (\<open>\<top>\<close>)
    and B :: "'a"  (\<open>\<bottom>\<close>)
    and step :: "nat => 'a => (nat * 'a) list"
    and merge :: "'a list => nat => (nat * 'a) list => 'a => 'a"
    and wti :: "'a list => nat => 'a => 'a"
    and wtc :: "'a list => nat => 'a => 'a"
    and wtl :: "'b list => 'a list => nat => 'a => 'a"
    and \<tau>s :: "'a list"
    and c :: "'a list"
  assumes "lbvc A r f \<top> \<bottom> step \<tau>s"
  defines "!!cert. merge cert == merge cert f r \<top>"
    and "!!cert. wti cert == wtl_inst cert f r \<top> step"
    and "!!cert. wtc cert == wtl_cert cert f r \<top> \<bottom> step"
    and
    "!!ins cert.
        wtl ins cert == wtl_inst_list ins cert f r \<top> \<bottom> step"
    and "c == make_cert step \<tau>s \<bottom>"
### theory "Jinja.LBVCorrect"
### 0.297s elapsed time, 1.190s cpu time, 0.307s GC time
### theory "Jinja.LBVComplete"
### 0.409s elapsed time, 1.622s cpu time, 0.307s GC time
Loading theory "Jinja.Abstract_BV" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.BVExec")
### theory "Jinja.Abstract_BV"
### 0.826s elapsed time, 2.780s cpu time, 1.886s GC time
### theory "Draft.JVMInstructions"
### 2.570s elapsed time, 8.983s cpu time, 2.841s GC time
Loading theory "Draft.JVMExceptions" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.JVMDefensive" via "Draft.JVMExec" via "Draft.JVMExecInstr")
consts
  match_ex_table ::
    "'m prog => char list => nat => ex_table => (nat * nat) option"
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd (snd (snd p))))))
         (fst (snd (snd (snd p))))) <*mlex*>
   {}"
### theory "Draft.JVMExceptions"
### 0.799s elapsed time, 1.696s cpu time, 0.207s GC time
Loading theory "Draft.JVMExecInstr" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.JVMDefensive" via "Draft.JVMExec")
Loading theory "Draft.Effect" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.BVExec" via "Draft.TF_JVM" via "Draft.EffectMono")
Found termination order: "{}"
locale prog
  fixes P :: "'a prog"
locale jvm_method
  fixes P :: "'a prog"
    and mxs :: "nat"
    and mxl\<^sub>0 :: "nat"
    and Ts :: "ty list"
    and T\<^sub>r :: "ty"
    and "is" :: "bytecode"
    and xt :: "ex_table"
    and mxl :: "nat"
  defines "mxl == 1 + length Ts + mxl\<^sub>0"
consts
  succs :: "instr => ty list * ty err list => nat => nat list"
### Missing patterns in function definition:
### the_class Void = undefined
### the_class Boolean = undefined
### the_class Integer = undefined
### (1 more)
Found termination order: "{}"
### Missing patterns in function definition:
### !!vb v ve. eff\<^sub>i (Store vb, v, [], ve) = undefined
### !!vb vc v vf. eff\<^sub>i (Getfield vb vc, v, [], vf) = undefined
### !!vb vc v vf. eff\<^sub>i (Putfield vb vc, v, [], vf) = undefined
### (11 more)
consts
  exec_instr ::
    "instr
     => jvm_prog
        => heap
           => val list
              => val list
                 => char list
                    => char list
                       => nat
                          => init_call_status
                             => frame list => sheap => jvm_state"
Found termination order: "{}"
### Ambiguous input (line 129 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 130 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" fv) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("_applC" ("_position" fv) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" fv) ("_position" e\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.JVMExecInstr"
### 1.641s elapsed time, 5.303s cpu time, 2.404s GC time
Loading theory "Draft.JVMExec" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.JVMDefensive")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
consts
  fv :: "char list exp => char list set"
  fvs :: "char list exp list => char list set"
Found termination order: "{}"
Proofs for inductive predicate(s) "exec_1p"
  Proving monotonicity ...
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 161 of "$AFP/JinjaDCI/J/Expr.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lass_val_of)
###       ("\<^const>Expr.exp.LAss" ("_position" V)
###         ("_applC" ("_position" Val) ("_position" v))))
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" V) ("_tuple_arg" ("_position" v))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" lass_val_of)
###       ("_updbind" ("_position" V)
###         ("_applC" ("_position" Val) ("_position" v))))
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" V) ("_tuple_arg" ("_position" v))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.JVMExec"
### 2.181s elapsed time, 7.196s cpu time, 0.806s GC time
Loading theory "Draft.JVMDefensive" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
consts
  check_instr ::
    "instr
     => jvm_prog
        => heap
           => val list
              => val list
                 => char list
                    => char list => nat => frame list => sheap => bool"
Proofs for inductive predicate(s) "exec_1_dp"
  Proving monotonicity ...
Found termination order: "{}"
### theory "Draft.JVMDefensive"
### 1.148s elapsed time, 3.645s cpu time, 0.293s GC time
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 252 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" sub_RI)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>1))
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub_RI)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>1))
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub_RI)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>1))
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 253 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" sub_RI)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub_RI)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub_RI)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  sub_RI :: "'a exp => bool"
  sub_RIs :: "'a exp list => bool"
### Ambiguous input (line 295 of "$AFP/JinjaDCI/J/Expr.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C')
###         ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" not_init)
###         ("_cargs" ("_position" C') ("_position" e\<^sub>1)))
###       ("_applC" ("_position" not_init)
###         ("_cargs" ("_position" C') ("_position" e\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C')
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" not_init)
###         ("_cargs" ("_position" C') ("_position" e\<^sub>1)))
###       ("_applC" ("_position" not_init)
###         ("_cargs" ("_position" C') ("_position" e\<^sub>2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 296 of "$AFP/JinjaDCI/J/Expr.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C')
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C') ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C')
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C') ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  not_init :: "char list => 'a exp => bool"
  not_inits :: "char list => 'a exp list => bool"
### Ambiguous input (line 336 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" subexp)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("\<^const>Set.union"
###         ("_Finset"
###           ("_args" ("_position" e\<^sub>1) ("_position" e\<^sub>2)))
###         ("_applC" ("_position" subexp) ("_position" e\<^sub>1)))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subexp)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("\<^const>Set.union"
###         ("_Finset"
###           ("_args" ("_position" e\<^sub>1) ("_position" e\<^sub>2)))
###         ("_applC" ("_position" subexp) ("_position" e\<^sub>1)))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subexp)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("\<^const>Set.union"
###         ("_Finset"
###           ("_args" ("_position" e\<^sub>1) ("_position" e\<^sub>2)))
###         ("_applC" ("_position" subexp) ("_position" e\<^sub>1)))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 337 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" subexp)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union" ("_Finset" ("_position" e\<^sub>2))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subexp)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union" ("_Finset" ("_position" e\<^sub>2))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subexp)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union" ("_Finset" ("_position" e\<^sub>2))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  subexp :: "'a exp => 'a exp set"
  subexps :: "'a exp list => 'a exp set"
### theory "Draft.Expr"
### 10.986s elapsed time, 36.166s cpu time, 8.421s GC time
Loading theory "Draft.WellType" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.Equivalence" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.WellTypeRT")
Loading theory "Draft.WWellForm" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.Equivalence" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.DefAss" via "Draft.BigStep")
### Ambiguous input (line 63 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WT" ("_position" P) ("_position" E) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" T)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WT" ("_position" P) ("_position" E) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" T)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 67 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" T)
###         ("_position" D)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" T')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" T)
###         ("_position" D)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" T')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "WT", "WTs"
  Proving monotonicity ...
### theory "Draft.WWellForm"
### 0.219s elapsed time, 0.878s cpu time, 0.000s GC time
Loading theory "Draft.BigStep" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.Equivalence" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.DefAss")
Loading theory "Draft.SmallStep" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.Equivalence" via "Draft.TypeSafe" via "Draft.Progress" via "Draft.EConform")
### Ambiguous input (line 129 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts)))
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E) ("_position" e)
###       ("\<^const>HOL.conj" ("_position" T)
###         ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###           ("_position" es) ("_position" Ts))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts)))
###     ("\<^const>HOL.conj"
###       ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###         ("_position" e) ("_position" T))
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("_position" es) ("_position" Ts)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 132 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" Ts))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" U) ("_position" Us))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts)
###           ("\<^const>List.list.Cons" ("_position" U) ("_position" Us)))
###         ("\<^const>HOL.conj"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e) ("_position" U))
###           ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###             ("_position" es) ("_position" Us)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" Ts))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" U) ("_position" Us))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts)
###           ("\<^const>List.list.Cons" ("_position" U) ("_position" Us)))
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e)
###           ("\<^const>HOL.conj" ("_position" U)
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es) ("_position" Us))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 16 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" blocks)
###       ("_tuple" ("\<^const>List.list.Cons" ("_position" V) ("_position" Vs))
###         ("_tuple_args"
###           ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts))
###           ("_tuple_args"
###             ("\<^const>List.list.Cons" ("_position" v) ("_position" vs))
###             ("_tuple_arg" ("_position" e))))))
###     ("\<^const>Expr.exp.Block" ("_position" V)
###       ("\<^const>Expr.exp.LAss" ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_applC" ("_position" blocks)
###         ("_tuple" ("_position" Vs)
###           ("_tuple_args" ("_position" Ts)
###             ("_tuple_args" ("_position" vs)
###               ("_tuple_arg" ("_position" e)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" blocks)
###       ("_tuple" ("\<^const>List.list.Cons" ("_position" V) ("_position" Vs))
###         ("_tuple_args"
###           ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts))
###           ("_tuple_args"
###             ("\<^const>List.list.Cons" ("_position" v) ("_position" vs))
###             ("_tuple_arg" ("_position" e))))))
###     ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###       ("_applC" ("_position" Val) ("_position" v))
###       ("_applC" ("_position" blocks)
###         ("_tuple" ("_position" Vs)
###           ("_tuple_args" ("_position" Ts)
###             ("_tuple_args" ("_position" vs)
###               ("_tuple_arg" ("_position" e)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 136 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" Ts)
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("\<^const>List.append" ("_position" es\<^sub>1)
###           ("_position" es\<^sub>2))
###         ("_position" Ts))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Ts\<^sub>1) ("_position" Ts\<^sub>2))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" Ts)
###             ("\<^const>List.append" ("_position" Ts\<^sub>1)
###               ("_position" Ts\<^sub>2)))
###           ("\<^const>HOL.conj"
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es\<^sub>1) ("_position" Ts\<^sub>1))
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es\<^sub>2) ("_position" Ts\<^sub>2))))))))
### ("\<^const>Pure.all_binder" ("_position" Ts)
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("\<^const>List.append" ("_position" es\<^sub>1)
###           ("_position" es\<^sub>2))
###         ("_position" Ts))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Ts\<^sub>1) ("_position" Ts\<^sub>2))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" Ts)
###             ("\<^const>List.append" ("_position" Ts\<^sub>1)
###               ("_position" Ts\<^sub>2)))
###           ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###             ("_position" es\<^sub>1)
###             ("\<^const>HOL.conj" ("_position" Ts\<^sub>1)
###               ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###                 ("_position" es\<^sub>2) ("_position" Ts\<^sub>2)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Missing patterns in function definition:
### !!vc vd vb. blocks ([], vc # vd, vb) = undefined
### !!v ve vf vd. blocks ([], v, ve # vf, vd) = undefined
### !!va vb vc. blocks (va # vb, [], vc) = undefined
### (3 more)
### Ambiguous input (line 157 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("_applC" ("_position" Val) ("_position" v)) ("_position" T))
###     ("\<^const>HOL.eq" ("_applC" ("_position" typeof) ("_position" v))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("_applC" ("_position" Val) ("_position" v))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq" ("_applC" ("_position" typeof) ("_position" v))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### typeof ?v = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Val ?v :: ?T
### Ignoring duplicate safe introduction (intro!)
### typeof ?v = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Val ?v :: ?T
### Ambiguous input (line 160 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("_applC" ("_position" Var) ("_position" V)) ("_position" T))
###     ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("_applC" ("_position" Var) ("_position" V))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### ?E ?V = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Var ?V :: ?T
### Ignoring duplicate safe introduction (intro!)
### ?E ?V = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Var ?V :: ?T
### Ambiguous input (line 163 of "$AFP/JinjaDCI/J/WellType.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>HOL.conj"
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>1) ("_position" T\<^sub>1))
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" T\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>HOL.conj"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>1) ("_position" T\<^sub>1))
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1)
###         ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>1)
###           ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###             ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###               ("_position" e\<^sub>2) ("_position" T\<^sub>2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 139 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" NonStatic) ("_position" t)
###               ("_position" D)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" fs')
###                 ("_MapUpd" ("_position" fs)
###                   ("_maplet"
###                     ("_tuple" ("_position" F)
###                       ("_tuple_arg" ("_position" D)))
###                     ("_position" v)))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                   ("_MapUpd" ("_position" h\<^sub>2)
###                     ("_maplet" ("_position" a)
###                       ("_tuple" ("_position" C)
###                         ("_tuple_arg" ("_position" fs')))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" NonStatic) ("_position" t)
###               ("_position" D)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" fs')
###                 ("_MapUpd" ("_position" fs)
###                   ("_maplet"
###                     ("_tuple" ("_position" F)
###                       ("_tuple_arg" ("_position" D)))
###                     ("_position" v)))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                   ("_MapUpd" ("_position" h\<^sub>2)
###                     ("_maplet" ("_position" a)
###                       ("_tuple" ("_position" C)
###                         ("_tuple_arg" ("_position" fs')))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 145 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_position" null) ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_position" null) ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 149 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 153 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 157 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" b) ("_position" t))
###                 ("\<^const>TypeRel.has_field" ("_position" P)
###                   ("_position" C) ("_position" F) ("_position" b)
###                   ("_position" t) ("_position" D)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" b) ("_position" t))
###                 ("\<^const>TypeRel.has_field" ("_position" P)
###                   ("_position" C) ("_position" F) ("_position" b)
###                   ("_position" t) ("_position" D)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 162 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" Static) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" Static) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 167 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" sfs')
###               ("_MapUpd" ("_position" sfs)
###                 ("_maplet" ("_position" F) ("_position" v)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" sh\<^sub>1')
###                 ("_MapUpd" ("_position" sh\<^sub>1)
###                   ("_maplet" ("_position" D)
###                     ("_tuple" ("_position" sfs')
###                       ("_tuple_arg" ("_position" Done))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" sfs')
###               ("_MapUpd" ("_position" sfs)
###                 ("_maplet" ("_position" F) ("_position" v)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" sh\<^sub>1')
###                 ("_MapUpd" ("_position" sh\<^sub>1)
###                   ("_maplet" ("_position" D)
###                     ("_tuple" ("_position" sfs')
###                       ("_tuple_arg" ("_position" Done))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 173 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Not_Ex" ("_position" sfs)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" sfs)
###                   ("_tuple_arg" ("_position" Done)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P)
###               ("\<^const>Expr.exp.INIT" ("_position" D)
###                 ("_list" ("_position" D)) ("_position" False)
###                 ("_position" unit))
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args" ("_position" l\<^sub>1)
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_applC" ("_position" Val) ("_position" v'))
###               ("_tuple" ("_position" h')
###                 ("_tuple_args" ("_position" l')
###                   ("_tuple_arg" ("_position" sh'))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" sh') ("_position" D))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" sfs)
###                     ("_tuple_arg" ("_position" i))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" sfs')
###                   ("_MapUpd" ("_position" sfs)
###                     ("_maplet" ("_position" F) ("_position" v)))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" sh'')
###                     ("_MapUpd" ("_position" sh')
###                       ("_maplet" ("_position" D)
###                         ("_tuple" ("_position" sfs')
###                           ("_tuple_arg" ("_position" i))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l')
###           ("_tuple_arg" ("_position" sh'')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Not_Ex" ("_position" sfs)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" sfs)
###                   ("_tuple_arg" ("_position" Done)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P)
###               ("\<^const>Expr.exp.INIT" ("_position" D)
###                 ("_list" ("_position" D)) ("_position" False)
###                 ("_position" unit))
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args" ("_position" l\<^sub>1)
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_applC" ("_position" Val) ("_position" v'))
###               ("_tuple" ("_position" h')
###                 ("_tuple_args" ("_position" l')
###                   ("_tuple_arg" ("_position" sh'))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" sh') ("_position" D))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" sfs)
###                     ("_tuple_arg" ("_position" i))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" sfs')
###                   ("_MapUpd" ("_position" sfs)
###                     ("_maplet" ("_position" F) ("_position" v)))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" sh'')
###                     ("_MapUpd" ("_position" sh')
###                       ("_maplet" ("_position" D)
###                         ("_tuple" ("_position" sfs')
###                           ("_tuple_arg" ("_position" i))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l')
###           ("_tuple_arg" ("_position" sh'')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 181 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Not_Ex" ("_position" sfs)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" sfs)
###                   ("_tuple_arg" ("_position" Done)))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P)
###               ("\<^const>Expr.exp.INIT" ("_position" D)
###                 ("_list" ("_position" D)) ("_position" False)
###                 ("_position" unit))
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args" ("_position" l\<^sub>1)
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_applC" ("_position" throw) ("_position" a))
###               ("_position" s')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_applC" ("_position" throw) ("_position" a))
###       ("_position" s'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Not_Ex" ("_position" sfs)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" sfs)
###                   ("_tuple_arg" ("_position" Done)))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P)
###               ("\<^const>Expr.exp.INIT" ("_position" D)
###                 ("_list" ("_position" D)) ("_position" False)
###                 ("_position" unit))
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args" ("_position" l\<^sub>1)
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_applC" ("_position" throw) ("_position" a))
###               ("_position" s')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_applC" ("_position" throw) ("_position" a))
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 187 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 191 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" b) ("_position" t))
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" b) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" b) ("_position" t))
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" b) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 196 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" t)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" t)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 268 of "$AFP/JinjaDCI/J/BigStep.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args"
###           ("_Update" ("_position" l\<^sub>0)
###             ("_updbind" ("_position" V) ("_position" None)))
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args" ("_position" l\<^sub>0)
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args"
###           ("_applC" ("_position" l\<^sub>1)
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V))))
###           ("_tuple_arg" ("_position" sh\<^sub>1)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args"
###           ("_applC" ("_position" l\<^sub>0)
###             ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args" ("_position" l\<^sub>0)
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args"
###           ("_applC" ("_position" l\<^sub>1)
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V))))
###           ("_tuple_arg" ("_position" sh\<^sub>1)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args"
###           ("_Update" ("_position" l\<^sub>0)
###             ("_updbind" ("_position" V) ("_position" None)))
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args" ("_position" l\<^sub>0)
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args"
###           ("_Update" ("_position" l\<^sub>1)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V))))
###           ("_tuple_arg" ("_position" sh\<^sub>1)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args"
###           ("_applC" ("_position" l\<^sub>0)
###             ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args" ("_position" l\<^sub>0)
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args"
###           ("_Update" ("_position" l\<^sub>1)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V))))
###           ("_tuple_arg" ("_position" sh\<^sub>1)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 324 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" Throw) ("_position" a))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" h\<^sub>1) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###             ("_position" C)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args"
###                   ("_MapUpd" ("_position" l\<^sub>1)
###                     ("_maplet" ("_position" V)
###                       ("_applC" ("_position" Addr) ("_position" a))))
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_position" e\<^sub>2')
###               ("_tuple" ("_position" h\<^sub>2)
###                 ("_tuple_args" ("_position" l\<^sub>2)
###                   ("_tuple_arg" ("_position" sh\<^sub>2))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" e\<^sub>2')
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args"
###           ("_applC" ("_position" l\<^sub>2)
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l\<^sub>1) ("_position" V))))
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" Throw) ("_position" a))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" h\<^sub>1) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###             ("_position" C)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args"
###                   ("_MapUpd" ("_position" l\<^sub>1)
###                     ("_maplet" ("_position" V)
###                       ("_applC" ("_position" Addr) ("_position" a))))
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_position" e\<^sub>2')
###               ("_tuple" ("_position" h\<^sub>2)
###                 ("_tuple_args" ("_position" l\<^sub>2)
###                   ("_tuple_arg" ("_position" sh\<^sub>2))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" e\<^sub>2')
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args"
###           ("_Update" ("_position" l\<^sub>2)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l\<^sub>1) ("_position" V))))
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order:
  "(%p. size_list size (fst (snd (snd p)))) <*mlex*> {}"
### Ambiguous input (line 47 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" icheck)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" D')
###           ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###             ("_position" D) ("_applC" ("_position" Val) ("_position" v))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" D') ("_position" D))
###       ("\<^const>HOL.Ex_binder" ("_position" T)
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" T)
###           ("_position" D))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" icheck)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" D')
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###               ("_position" D))
###             ("_applC" ("_position" Val) ("_position" v))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" D') ("_position" D))
###       ("\<^const>HOL.Ex_binder" ("_position" T)
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" T)
###           ("_position" D))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 179 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.FAss" ("_position" a) ("_position" F)
###       ("_position" D) ("_position" v))
###     ("_position" T)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" a) ("_position" F)
###         ("_position" D))
###       ("_position" v))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 180 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###       ("_position" D) ("_position" v))
###     ("_position" T)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_position" v))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.WellType"
### 1.096s elapsed time, 4.352s cpu time, 0.275s GC time
Loading theory "Draft.Annotate" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI")
### Ambiguous input (line 35 of "$AFP/JinjaDCI/J/Annotate.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###         ("_position" None)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" this))
###           ("\<^const>Option.option.Some"
###             ("_applC" ("_position" Class) ("_position" C)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###             ("_position" V) ("_position" NonStatic) ("_position" T)
###             ("_position" D))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Anno" ("_position" P) ("_position" E)
###       ("_applC" ("_position" Var) ("_position" V))
###       ("\<^const>Expr.exp.FAcc"
###         ("_applC" ("_position" Var) ("_position" this)) ("_position" V)
###         ("_position" D)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###         ("_position" None)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" this))
###           ("\<^const>Option.option.Some"
###             ("_applC" ("_position" Class) ("_position" C)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###             ("_position" V) ("_position" NonStatic) ("_position" T)
###             ("_position" D))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expr.exp.FAcc"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E)
###         ("_applC" ("_position" Var) ("_position" V))
###         ("_applC" ("_position" Var) ("_position" this)))
###       ("_position" V) ("_position" D))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 43 of "$AFP/JinjaDCI/J/Annotate.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###         ("_position" None)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" this))
###           ("\<^const>Option.option.Some"
###             ("_applC" ("_position" Class) ("_position" C)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###             ("_position" V) ("_position" NonStatic) ("_position" T)
###             ("_position" D)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e)
###               ("_position" e')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Anno" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" e))
###       ("\<^const>Expr.exp.FAss"
###         ("_applC" ("_position" Var) ("_position" this)) ("_position" V)
###         ("_position" D) ("_position" e')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###         ("_position" None)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" this))
###           ("\<^const>Option.option.Some"
###             ("_applC" ("_position" Class) ("_position" C)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###             ("_position" V) ("_position" NonStatic) ("_position" T)
###             ("_position" D)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e)
###               ("_position" e')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Anno" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" e))
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Var) ("_position" this)) ("_position" V)
###           ("_position" D))
###         ("_position" e')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###         ("_position" None)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" this))
###           ("\<^const>Option.option.Some"
###             ("_applC" ("_position" Class) ("_position" C)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###             ("_position" V) ("_position" NonStatic) ("_position" T)
###             ("_position" D)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e)
###               ("_position" e')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc"
###         ("\<^fixed>Anno" ("_position" P) ("_position" E)
###           ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" e))
###           ("_applC" ("_position" Var) ("_position" this)))
###         ("_position" V) ("_position" D))
###       ("_position" e'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###         ("_position" None)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" this))
###           ("\<^const>Option.option.Some"
###             ("_applC" ("_position" Class) ("_position" C)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###             ("_position" V) ("_position" NonStatic) ("_position" T)
###             ("_position" D)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e)
###               ("_position" e')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expr.exp.FAss"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E)
###         ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" e))
###         ("_applC" ("_position" Var) ("_position" this)))
###       ("_position" V) ("_position" D) ("_position" e'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 46 of "$AFP/JinjaDCI/J/Annotate.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e)
###         ("_position" e')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e') ("_applC" ("_position" Class) ("_position" C))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###             ("_position" F) ("_position" NonStatic) ("_position" T)
###             ("_position" D))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Anno" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###         ("\<^const>List.list.Nil"))
###       ("\<^const>Expr.exp.FAcc" ("_position" e') ("_position" F)
###         ("_position" D)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e)
###         ("_position" e')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e') ("_applC" ("_position" Class) ("_position" C))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###             ("_position" F) ("_position" NonStatic) ("_position" T)
###             ("_position" D))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expr.exp.FAcc"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E)
###         ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###           ("\<^const>List.list.Nil"))
###         ("_position" e'))
###       ("_position" F) ("_position" D))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 49 of "$AFP/JinjaDCI/J/Annotate.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" T)
###         ("_position" D))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Anno" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("\<^const>List.list.Nil"))
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" T)
###         ("_position" D))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expr.exp.SFAcc"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E)
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("\<^const>List.list.Nil"))
###         ("_position" C))
###       ("_position" F) ("_position" D))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "eval", "evals"
### Ambiguous input (line 51 of "$AFP/JinjaDCI/J/Annotate.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e1)
###         ("_position" e1')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e2)
###           ("_position" e2')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e1')
###             ("_applC" ("_position" Class) ("_position" C))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" NonStatic) ("_position" T)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc"
###         ("\<^fixed>Anno" ("_position" P) ("_position" E)
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.FAcc" ("_position" e1) ("_position" F)
###               ("\<^const>List.list.Nil"))
###             ("_position" e2))
###           ("_position" e1'))
###         ("_position" F) ("_position" D))
###       ("_position" e2'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e1)
###         ("_position" e1')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e2)
###           ("_position" e2')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e1')
###             ("_applC" ("_position" Class) ("_position" C))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" NonStatic) ("_position" T)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expr.exp.FAss"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E)
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e1) ("_position" F)
###             ("\<^const>List.list.Nil"))
###           ("_position" e2))
###         ("_position" e1'))
###       ("_position" F) ("_position" D) ("_position" e2'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e1)
###         ("_position" e1')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e2)
###           ("_position" e2')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e1')
###             ("_applC" ("_position" Class) ("_position" C))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" NonStatic) ("_position" T)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Anno" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.FAss" ("_position" e1) ("_position" F)
###         ("\<^const>List.list.Nil") ("_position" e2))
###       ("\<^const>Expr.exp.FAss" ("_position" e1') ("_position" F)
###         ("_position" D) ("_position" e2')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e1)
###         ("_position" e1')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e2)
###           ("_position" e2')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e1')
###             ("_applC" ("_position" Class) ("_position" C))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" NonStatic) ("_position" T)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Anno" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e1) ("_position" F)
###           ("\<^const>List.list.Nil"))
###         ("_position" e2))
###       ("\<^const>Expr.exp.FAss" ("_position" e1') ("_position" F)
###         ("_position" D) ("_position" e2')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e1)
###         ("_position" e1')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e2)
###           ("_position" e2')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e1')
###             ("_applC" ("_position" Class) ("_position" C))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" NonStatic) ("_position" T)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Anno" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.FAss" ("_position" e1) ("_position" F)
###         ("\<^const>List.list.Nil") ("_position" e2))
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e1') ("_position" F)
###           ("_position" D))
###         ("_position" e2')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e1)
###         ("_position" e1')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e2)
###           ("_position" e2')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e1')
###             ("_applC" ("_position" Class) ("_position" C))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" NonStatic) ("_position" T)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Anno" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e1) ("_position" F)
###           ("\<^const>List.list.Nil"))
###         ("_position" e2))
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e1') ("_position" F)
###           ("_position" D))
###         ("_position" e2')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e1)
###         ("_position" e1')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e2)
###           ("_position" e2')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e1')
###             ("_applC" ("_position" Class) ("_position" C))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" NonStatic) ("_position" T)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc"
###         ("\<^fixed>Anno" ("_position" P) ("_position" E)
###           ("\<^const>Expr.exp.FAss" ("_position" e1) ("_position" F)
###             ("\<^const>List.list.Nil") ("_position" e2))
###           ("_position" e1'))
###         ("_position" F) ("_position" D))
###       ("_position" e2'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e1)
###         ("_position" e1')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e2)
###           ("_position" e2')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e1')
###             ("_applC" ("_position" Class) ("_position" C))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" NonStatic) ("_position" T)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expr.exp.FAss"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E)
###         ("\<^const>Expr.exp.FAss" ("_position" e1) ("_position" F)
###           ("\<^const>List.list.Nil") ("_position" e2))
###         ("_position" e1'))
###       ("_position" F) ("_position" D) ("_position" e2'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 54 of "$AFP/JinjaDCI/J/Annotate.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e2)
###         ("_position" e2')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" T)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.SFAcc"
###         ("\<^fixed>Anno" ("_position" P) ("_position" E)
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###               ("\<^const>List.list.Nil"))
###             ("_position" e2))
###           ("_position" C))
###         ("_position" F) ("_position" D))
###       ("_position" e2'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e2)
###         ("_position" e2')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" T)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expr.exp.SFAss"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E)
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("\<^const>List.list.Nil"))
###           ("_position" e2))
###         ("_position" C))
###       ("_position" F) ("_position" D) ("_position" e2'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e2)
###         ("_position" e2')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" T)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Anno" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("\<^const>List.list.Nil") ("_position" e2))
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e2')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e2)
###         ("_position" e2')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" T)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Anno" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("\<^const>List.list.Nil"))
###         ("_position" e2))
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e2')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e2)
###         ("_position" e2')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" T)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Anno" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("\<^const>List.list.Nil") ("_position" e2))
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e2')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e2)
###         ("_position" e2')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" T)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Anno" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("\<^const>List.list.Nil"))
###         ("_position" e2))
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e2')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e2)
###         ("_position" e2')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" T)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.SFAcc"
###         ("\<^fixed>Anno" ("_position" P) ("_position" E)
###           ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###             ("\<^const>List.list.Nil") ("_position" e2))
###           ("_position" C))
###         ("_position" F) ("_position" D))
###       ("_position" e2'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E) ("_position" e2)
###         ("_position" e2')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" T)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Expr.exp.SFAss"
###       ("\<^fixed>Anno" ("_position" P) ("_position" E)
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("\<^const>List.list.Nil") ("_position" e2))
###         ("_position" C))
###       ("_position" F) ("_position" D) ("_position" e2'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "Anno", "Annos"
  Proving monotonicity ...
### theory "Draft.Annotate"
### 0.320s elapsed time, 1.280s cpu time, 0.000s GC time
Loading theory "Draft.WellTypeRT" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.Equivalence" via "Draft.TypeSafe" via "Draft.Progress")
  Proving monotonicity ...
### Ambiguous input (line 69 of "$AFP/JinjaDCI/J/WellTypeRT.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###         ("_position" sh) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" T)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###             ("_position" sh) ("_position" e\<^sub>2)
###             ("_position" T\<^sub>2)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P)
###               ("_position" T\<^sub>2) ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###       ("_position" sh)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###         ("_position" sh) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" T)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###             ("_position" sh) ("_position" e\<^sub>2)
###             ("_position" T\<^sub>2)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P)
###               ("_position" T\<^sub>2) ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###       ("_position" sh)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 73 of "$AFP/JinjaDCI/J/WellTypeRT.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###         ("_position" sh) ("_position" e\<^sub>1) ("_position" NT)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###           ("_position" sh) ("_position" e\<^sub>2)
###           ("_position" T\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###       ("_position" sh)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###         ("_position" sh) ("_position" e\<^sub>1) ("_position" NT)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###           ("_position" sh) ("_position" e\<^sub>2)
###           ("_position" T\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###       ("_position" sh)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 77 of "$AFP/JinjaDCI/J/WellTypeRT.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###         ("_position" sh) ("_position" e\<^sub>2) ("_position" T\<^sub>2)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" T)
###           ("_position" D)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T\<^sub>2)
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###       ("_position" sh)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###         ("_position" sh) ("_position" e\<^sub>2) ("_position" T\<^sub>2)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" T)
###           ("_position" D)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T\<^sub>2)
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2" ("_position" P) ("_position" E) ("_position" h)
###       ("_position" sh)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "WTrt", "WTrts"
  Proving monotonicity ...
### Ignoring duplicate safe introduction (intro!)
### ?P,?E,?h,?sh \<turnstile> [] [:] []
### Ignoring duplicate safe introduction (intro!)
### ?P,?E,?h,?sh \<turnstile> [] [:] []
### Ambiguous input (line 161 of "$AFP/JinjaDCI/J/WellTypeRT.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts)))
###     ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh) ("_position" e)
###       ("\<^const>HOL.conj" ("_position" T)
###         ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" sh) ("_position" es)
###           ("_position" Ts))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts)))
###     ("\<^const>HOL.conj"
###       ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" sh) ("_position" e) ("_position" T))
###       ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" sh) ("_position" es)
###         ("_position" Ts)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 164 of "$AFP/JinjaDCI/J/WellTypeRT.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" Ts))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" U) ("_position" Us))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts)
###           ("\<^const>List.list.Cons" ("_position" U) ("_position" Us)))
###         ("\<^const>HOL.conj"
###           ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" sh) ("_position" e)
###             ("_position" U))
###           ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" sh) ("_position" es)
###             ("_position" Us)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" Ts))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" U) ("_position" Us))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts)
###           ("\<^const>List.list.Cons" ("_position" U) ("_position" Us)))
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" sh) ("_position" e)
###           ("\<^const>HOL.conj" ("_position" U)
###             ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###               ("_position" h) ("_position" sh) ("_position" es)
###               ("_position" Us))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 168 of "$AFP/JinjaDCI/J/WellTypeRT.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" Ts)
###     ("\<^const>HOL.eq"
###       ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" sh)
###         ("\<^const>List.append" ("_position" es\<^sub>1)
###           ("_position" es\<^sub>2))
###         ("_position" Ts))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Ts\<^sub>1) ("_position" Ts\<^sub>2))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" Ts)
###             ("\<^const>List.append" ("_position" Ts\<^sub>1)
###               ("_position" Ts\<^sub>2)))
###           ("\<^const>HOL.conj"
###             ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###               ("_position" h) ("_position" sh) ("_position" es\<^sub>1)
###               ("_position" Ts\<^sub>1))
###             ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###               ("_position" h) ("_position" sh) ("_position" es\<^sub>2)
###               ("_position" Ts\<^sub>2))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" Ts)
###     ("\<^const>HOL.eq"
###       ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" sh)
###         ("\<^const>List.append" ("_position" es\<^sub>1)
###           ("_position" es\<^sub>2))
###         ("_position" Ts))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Ts\<^sub>1) ("_position" Ts\<^sub>2))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" Ts)
###             ("\<^const>List.append" ("_position" Ts\<^sub>1)
###               ("_position" Ts\<^sub>2)))
###           ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" sh) ("_position" es\<^sub>1)
###             ("\<^const>HOL.conj" ("_position" Ts\<^sub>1)
###               ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###                 ("_position" h) ("_position" sh) ("_position" es\<^sub>2)
###                 ("_position" Ts\<^sub>2)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 189 of "$AFP/JinjaDCI/J/WellTypeRT.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("_applC" ("_position" Val) ("_position" v)) ("_position" T))
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Objects.typeof_h" ("_position" h))
###         ("_position" v))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###     ("_position" h) ("_position" sh)
###     ("_applC" ("_position" Val) ("_position" v))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq"
###         ("_applC" ("\<^const>Objects.typeof_h" ("_position" h))
###           ("_position" v))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### typeof\<^bsub>?h\<^esub> ?v = \<lfloor>?T\<rfloor> ==>
### ?P,?E,?h,?sh \<turnstile> Val ?v : ?T
### Ignoring duplicate safe introduction (intro!)
### typeof\<^bsub>?h\<^esub> ?v = \<lfloor>?T\<rfloor> ==>
### ?P,?E,?h,?sh \<turnstile> Val ?v : ?T
### Ambiguous input (line 192 of "$AFP/JinjaDCI/J/WellTypeRT.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("_applC" ("_position" Var) ("_position" v)) ("_position" T))
###     ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" v))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###     ("_position" h) ("_position" sh)
###     ("_applC" ("_position" Var) ("_position" v))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" v))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 195 of "$AFP/JinjaDCI/J/WellTypeRT.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>HOL.conj"
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" sh) ("_position" e\<^sub>1)
###           ("_position" T\<^sub>1))
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" sh) ("_position" e\<^sub>2)
###           ("_position" T\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###     ("_position" h) ("_position" sh)
###     ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>HOL.conj"
###           ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" sh) ("_position" e\<^sub>1)
###             ("_position" T\<^sub>1))
###           ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" sh) ("_position" e\<^sub>2)
###             ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" sh) ("_position" e\<^sub>1)
###         ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###           ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" sh) ("_position" e\<^sub>2)
###             ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###     ("_position" h) ("_position" sh)
###     ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" sh) ("_position" e\<^sub>1)
###           ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###             ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###               ("_position" h) ("_position" sh) ("_position" e\<^sub>2)
###               ("_position" T\<^sub>2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 198 of "$AFP/JinjaDCI/J/WellTypeRT.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_position" T'))
###     ("\<^const>WellTypeRT.WTrt2" ("_position" P)
###       ("_MapUpd" ("_position" E)
###         ("_maplet" ("_position" V) ("_position" T)))
###       ("_position" h) ("_position" sh) ("_position" e) ("_position" T'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###     ("_position" h) ("_position" sh)
###     ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###       ("_position" e))
###     ("\<^const>HOL.eq" ("_position" T')
###       ("\<^const>WellTypeRT.WTrt2" ("_position" P)
###         ("_MapUpd" ("_position" E)
###           ("_maplet" ("_position" V) ("_position" T)))
###         ("_position" h) ("_position" sh) ("_position" e)
###         ("_position" T')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### ?P,?E(?V |-> ?T),?h,?sh \<turnstile> ?e : ?T' ==>
### ?P,?E,?h,?sh \<turnstile> {?V:?T; ?e} : ?T'
### Ignoring duplicate safe introduction (intro!)
### ?P,?E(?V |-> ?T),?h,?sh \<turnstile> ?e : ?T' ==>
### ?P,?E,?h,?sh \<turnstile> {?V:?T; ?e} : ?T'
### Ambiguous input (line 211 of "$AFP/JinjaDCI/J/WellTypeRT.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###     ("_position" h) ("_position" sh)
###     ("\<^const>Expr.exp.FAss" ("_position" e) ("_position" F)
###       ("_position" D) ("_position" v))
###     ("_position" T)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###     ("_position" h) ("_position" sh)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###         ("_position" D))
###       ("_position" v))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 212 of "$AFP/JinjaDCI/J/WellTypeRT.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###     ("_position" h) ("_position" sh)
###     ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###       ("_position" D) ("_position" v))
###     ("_position" T)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###     ("_position" h) ("_position" sh)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_position" v))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.WellTypeRT"
### 2.010s elapsed time, 7.978s cpu time, 0.585s GC time
Found termination order: "{}"
locale eff
  fixes P :: "'a prog"
    and mxs :: "nat"
    and mxl\<^sub>0 :: "nat"
    and Ts :: "ty list"
    and T\<^sub>r :: "ty"
    and "is" :: "bytecode"
    and xt :: "ex_table"
    and mxl :: "nat"
    and
    eff\<^sub>i :: "instr => ty list * ty err list => ty list * ty err list"
    and app\<^sub>i :: "instr => nat => ty list * ty err list => bool"
    and
    eff ::
      "instr
       => nat
          => (ty list * ty err list) option
             => (nat * (ty list * ty err list) option) list"
    and app :: "instr => nat => (ty list * ty err list) option => bool"
    and
    norm_eff ::
      "instr
       => nat
          => ty list * ty err list
             => (nat * (ty list * ty err list) option) list"
    and xcpt_app :: "instr => nat => ty list * ty err list => bool"
    and
    xcpt_eff ::
      "instr
       => nat
          => ty list * ty err list
             => (nat * (ty list * ty err list) option) list"
    and mpc :: "nat"
  defines "mxl == 1 + length Ts + mxl\<^sub>0"
    and "mpc == length is"
    and "!!i \<tau>. eff\<^sub>i i \<tau> == eff\<^sub>i (i, P, \<tau>)"
    and
    "!!i pc \<tau>.
        app\<^sub>i i pc \<tau> ==
        app\<^sub>i (i, P, pc, mxs, T\<^sub>r, \<tau>)"
    and "!!i pc \<tau>. xcpt_eff i pc \<tau> == xcpt_eff i P pc \<tau> xt"
    and "!!i pc \<tau>. norm_eff i pc \<tau> == norm_eff i P pc \<tau>"
    and "!!i pc. eff i pc == eff i P pc xt"
    and
    "!!i pc \<tau>. xcpt_app i pc \<tau> == xcpt_app i P pc mxs xt \<tau>"
    and "!!i pc. app i pc == app i P mxs T\<^sub>r pc mpc xt"
### theory "Draft.Effect"
### 11.160s elapsed time, 38.541s cpu time, 4.815s GC time
Loading theory "Draft.BVSpec" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.BVExec" via "Draft.TF_JVM")
Loading theory "Draft.EffectMono" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.BVExec" via "Draft.TF_JVM")
### theory "Draft.EffectMono"
### 0.136s elapsed time, 0.529s cpu time, 0.149s GC time
### theory "Draft.BVSpec"
### 0.150s elapsed time, 0.579s cpu time, 0.149s GC time
Loading theory "Draft.BVConform" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.BVNoTypeError" via "Draft.BVSpecTypeSafe")
Loading theory "Draft.TF_JVM" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.BVExec")
locale JVM_sl
  fixes P :: "jvm_prog"
    and mxs :: "nat"
    and mxl\<^sub>0 :: "nat"
    and n :: "nat"
    and b :: "staticb"
    and Ts :: "ty list"
    and "is" :: "bytecode"
    and xt :: "ex_table"
    and T\<^sub>r :: "ty"
    and mxl :: "nat"
    and A :: "(ty list * ty err list) option err set"
    and
    r :: "(ty list * ty err list) option err
          => (ty list * ty err list) option err => bool"
    and
    f :: "(ty list * ty err list) option err
          => (ty list * ty err list) option err
             => (ty list * ty err list) option err"
    and app :: "nat => (ty list * ty err list) option => bool"
    and
    eff ::
      "nat
       => (ty list * ty err list) option
          => (nat * (ty list * ty err list) option) list"
    and
    step ::
      "nat
       => (ty list * ty err list) option err
          => (nat * (ty list * ty err list) option err) list"
  assumes "JVM_sl b"
  defines
    "mxl ==
     (case b of Static => 0 | NonStatic => 1) + length Ts + mxl\<^sub>0"
    and "A == states P mxs mxl"
    and "r == JVM_SemiType.le P mxs mxl"
    and "f == JVM_SemiType.sup P mxs mxl"
    and "app == %pc. app (is ! pc) P mxs T\<^sub>r pc (length is) xt"
    and "eff == %pc. eff (is ! pc) P pc xt"
    and "step == err_step (length is) app eff"
    and "n == length is"
Found termination order: "{}"
locale start_context
  fixes P :: "jvm_prog"
    and mxs :: "nat"
    and mxl\<^sub>0 :: "nat"
    and n :: "nat"
    and b :: "staticb"
    and Ts :: "ty list"
    and "is" :: "bytecode"
    and xt :: "ex_table"
    and T\<^sub>r :: "ty"
    and mxl :: "nat"
    and A :: "(ty list * ty err list) option err set"
    and
    r :: "(ty list * ty err list) option err
          => (ty list * ty err list) option err => bool"
    and
    f :: "(ty list * ty err list) option err
          => (ty list * ty err list) option err
             => (ty list * ty err list) option err"
    and app :: "nat => (ty list * ty err list) option => bool"
    and
    eff ::
      "nat
       => (ty list * ty err list) option
          => (nat * (ty list * ty err list) option) list"
    and
    step ::
      "nat
       => (ty list * ty err list) option err
          => (nat * (ty list * ty err list) option err) list"
    and p :: "jvm_prog => char list => jvm_method mdecl => bool"
    and C :: "char list"
    and first :: "(ty list * ty err list) option"
    and start :: "(ty list * ty err list) option err list"
  assumes "start_context P b Ts p C"
  defines
    "mxl ==
     (case b of Static => 0 | NonStatic => 1) + length Ts + mxl\<^sub>0"
    and "A == states P mxs mxl"
    and "r == JVM_SemiType.le P mxs mxl"
    and "f == JVM_SemiType.sup P mxs mxl"
    and "app == %pc. app (is ! pc) P mxs T\<^sub>r pc (length is) xt"
    and "eff == %pc. eff (is ! pc) P pc xt"
    and "step == err_step (length is) app eff"
    and "n == length is"
    and
    "first ==
     \<lfloor>([],
               (case b of Static => [] | NonStatic => [OK (Class C)]) @
               map OK Ts @ replicate mxl\<^sub>0 Err)\<rfloor>"
    and "start == OK first # replicate (length is - 1) (OK None)"
### Rewrite rule not in simpset:
### is_relevant_entry ?P1 ?i1 ?pc1 ?e1 ==
### let (f, t, C, h, d) = ?e1 in is_relevant_class ?i1 ?P1 C & ?pc1 : {f..<t}
### theory "Draft.TF_JVM"
### 0.628s elapsed time, 2.497s cpu time, 0.191s GC time
Loading theory "Draft.LBVJVM" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI")
### Ambiguous input (line 51 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###       ("_position" None)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Not"
###       ("_applC" ("_position" icheck)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C')
###             ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###               ("_position" D)
###               ("_constrain" ("_position" e\<^sub>2)
###                 ("_tapp" ("_position_sort" 'a) ("_type_name" exp))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###       ("_position" None)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Not"
###       ("_applC" ("_position" icheck)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C')
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###                 ("_position" D))
###               ("_constrain" ("_position" e\<^sub>2)
###                 ("_tapp" ("_position_sort" 'a) ("_type_name" exp))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 153 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.SFAcc"
###         ("\<^const>Expr.exp.INIT" ("_position" D) ("_list" ("_position" D))
###           ("_position" False) ("_position" C))
###         ("_position" F) ("_position" D))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.INIT" ("_position" D) ("_list" ("_position" D))
###         ("_position" False)
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 166 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e') ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e') ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.FAss" ("_position" e') ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.FAss" ("_position" e') ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s') ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 170 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e'))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e'))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e'))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e'))
###       ("_position" s') ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 174 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" NonStatic) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" addr) ("_position" a)) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" unit)
###       ("_tuple"
###         ("_MapUpd" ("_position" h)
###           ("_maplet" ("_position" a)
###             ("_tuple" ("_position" C)
###               ("_tuple_arg"
###                 ("_MapUpd" ("_position" fs)
###                   ("_maplet"
###                     ("_tuple" ("_position" F)
###                       ("_tuple_arg" ("_position" D)))
###                     ("_position" v)))))))
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" NonStatic) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss"
###         ("_applC" ("_position" addr) ("_position" a)) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" unit)
###       ("_tuple"
###         ("_MapUpd" ("_position" h)
###           ("_maplet" ("_position" a)
###             ("_tuple" ("_position" C)
###               ("_tuple_arg"
###                 ("_MapUpd" ("_position" fs)
###                   ("_maplet"
###                     ("_tuple" ("_position" F)
###                       ("_tuple_arg" ("_position" D)))
###                     ("_position" v)))))))
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 178 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" null) ("_position" F)
###         ("_position" D))
###       ("_applC" ("_position" Val) ("_position" v)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" THROW) ("_position" NullPointer)) ("_position" s)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_position" null) ("_position" F)
###       ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" THROW) ("_position" NullPointer)) ("_position" s)
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 181 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" b) ("_position" t))
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" b) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" addr) ("_position" a)) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" b) ("_position" t))
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" b) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss"
###         ("_applC" ("_position" addr) ("_position" a)) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 185 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" addr) ("_position" a)) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss"
###         ("_applC" ("_position" addr) ("_position" a)) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 189 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e'))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e'))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e'))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e'))
###       ("_position" s') ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 193 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" sfs) ("_tuple_arg" ("_position" i))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" sfs')
###             ("_MapUpd" ("_position" sfs)
###               ("_maplet" ("_position" F) ("_position" v)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" sh')
###               ("_MapUpd" ("_position" sh)
###                 ("_maplet" ("_position" D)
###                   ("_tuple" ("_position" sfs')
###                     ("_tuple_arg" ("_position" i)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" True) ("_position" unit)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh'))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" sfs) ("_tuple_arg" ("_position" i))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" sfs')
###             ("_MapUpd" ("_position" sfs)
###               ("_maplet" ("_position" F) ("_position" v)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" sh')
###               ("_MapUpd" ("_position" sh)
###                 ("_maplet" ("_position" D)
###                   ("_tuple" ("_position" sfs')
###                     ("_tuple_arg" ("_position" i)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" True) ("_position" unit)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh'))))
###       ("_position" False))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 199 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" sfs)
###               ("_tuple_arg" ("_position" Done))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" True))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" sfs)
###               ("_tuple_arg" ("_position" Done))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" True))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" sfs)
###               ("_tuple_arg" ("_position" Done))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" True))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" sfs)
###               ("_tuple_arg" ("_position" Done))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" True))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 204 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc"
###           ("\<^const>Expr.exp.INIT" ("_position" D)
###             ("_list" ("_position" D)) ("_position" False) ("_position" C))
###           ("_position" F) ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc"
###           ("\<^const>Expr.exp.INIT" ("_position" D)
###             ("_list" ("_position" D)) ("_position" False) ("_position" C))
###           ("_position" F) ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.SFAss"
###         ("\<^const>Expr.exp.INIT" ("_position" D) ("_list" ("_position" D))
###           ("_position" False) ("_position" C))
###         ("_position" F) ("_position" D)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.SFAss"
###         ("\<^const>Expr.exp.INIT" ("_position" D) ("_list" ("_position" D))
###           ("_position" False) ("_position" C))
###         ("_position" F) ("_position" D)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.INIT" ("_position" D) ("_list" ("_position" D))
###         ("_position" False)
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_applC" ("_position" Val) ("_position" v))))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.INIT" ("_position" D) ("_list" ("_position" D))
###         ("_position" False)
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_applC" ("_position" Val) ("_position" v))))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.INIT" ("_position" D) ("_list" ("_position" D))
###         ("_position" False)
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_applC" ("_position" Val) ("_position" v))))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.INIT" ("_position" D) ("_list" ("_position" D))
###         ("_position" False)
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_applC" ("_position" Val) ("_position" v))))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 209 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Not"
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" b) ("_position" t))
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" b) ("_position" t)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_position" s) ("_position" b)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_position" s) ("_position" False))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Not"
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" b) ("_position" t))
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" b) ("_position" t)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_position" s) ("_position" b)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_position" s) ("_position" False))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 213 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###       ("_position" F) ("_position" NonStatic) ("_position" t)
###       ("_position" D)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_position" s) ("_position" b)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_position" s) ("_position" False))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###       ("_position" F) ("_position" NonStatic) ("_position" t)
###       ("_position" D)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_position" s) ("_position" b)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_position" s) ("_position" False))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 267 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 271 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 275 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 282 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###       ("_applC" ("_position" Val) ("_position" v))
###       ("_applC" ("_position" Val) ("_position" u)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" Val) ("_position" u)) ("_position" s)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.Block" ("_position" V)
###       ("\<^const>Expr.exp.LAss" ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_applC" ("_position" Val) ("_position" u)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" Val) ("_position" u)) ("_position" s)
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 319 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" hp)
###           ("_cargs" ("_position" s) ("_position" a)))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###           ("_position" C)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch"
###         ("_applC" ("_position" Throw) ("_position" a)) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss"
###           ("_applC" ("_position" Class) ("_position" C))
###           ("_applC" ("_position" addr) ("_position" a)))
###         ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" hp)
###           ("_cargs" ("_position" s) ("_position" a)))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###           ("_position" C)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch"
###         ("_applC" ("_position" Throw) ("_position" a)) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V)
###         ("_applC" ("_position" Class) ("_position" C))
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 388 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc"
###         ("_applC" ("_position" throw) ("_position" e)) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" throw) ("_position" e)) ("_position" s)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_applC" ("_position" throw) ("_position" e))
###       ("_position" F) ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" throw) ("_position" e)) ("_position" s)
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 389 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D))
###       ("_applC" ("_position" throw) ("_position" e)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" throw) ("_position" e)) ("_position" s)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###       ("_position" F) ("_position" D)
###       ("_applC" ("_position" throw) ("_position" e)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" throw) ("_position" e)) ("_position" s)
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 390 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_applC" ("_position" throw) ("_position" e)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" throw) ("_position" e)) ("_position" s)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###       ("_position" D) ("_applC" ("_position" throw) ("_position" e)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" throw) ("_position" e)) ("_position" s)
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 395 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###       ("_applC" ("_position" Val) ("_position" v))
###       ("_applC" ("_position" Throw) ("_position" a)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" Throw) ("_position" a)) ("_position" s)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.Block" ("_position" V)
###       ("\<^const>Expr.exp.LAss" ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_applC" ("_position" Throw) ("_position" a)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" Throw) ("_position" a)) ("_position" s)
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.LBVJVM"
### 0.428s elapsed time, 1.698s cpu time, 0.124s GC time
Loading theory "Draft.BVExec" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI")
locale start_context
  fixes P :: "jvm_prog"
    and mxs :: "nat"
    and mxl\<^sub>0 :: "nat"
    and n :: "nat"
    and b :: "staticb"
    and Ts :: "ty list"
    and "is" :: "bytecode"
    and xt :: "ex_table"
    and T\<^sub>r :: "ty"
    and mxl :: "nat"
    and A :: "(ty list * ty err list) option err set"
    and
    r :: "(ty list * ty err list) option err
          => (ty list * ty err list) option err => bool"
    and
    f :: "(ty list * ty err list) option err
          => (ty list * ty err list) option err
             => (ty list * ty err list) option err"
    and app :: "nat => (ty list * ty err list) option => bool"
    and
    eff ::
      "nat
       => (ty list * ty err list) option
          => (nat * (ty list * ty err list) option) list"
    and
    step ::
      "nat
       => (ty list * ty err list) option err
          => (nat * (ty list * ty err list) option err) list"
    and p :: "jvm_prog => char list => jvm_method mdecl => bool"
    and C :: "char list"
    and first :: "(ty list * ty err list) option"
    and start :: "(ty list * ty err list) option err list"
  assumes "start_context P b Ts p C"
  defines
    "mxl ==
     (case b of Static => 0 | NonStatic => 1) + length Ts + mxl\<^sub>0"
    and "A == states P mxs mxl"
    and "r == JVM_SemiType.le P mxs mxl"
    and "f == JVM_SemiType.sup P mxs mxl"
    and "app == %pc. app (is ! pc) P mxs T\<^sub>r pc (length is) xt"
    and "eff == %pc. eff (is ! pc) P pc xt"
    and "step == err_step (length is) app eff"
    and "n == length is"
    and
    "first ==
     \<lfloor>([],
               (case b of Static => [] | NonStatic => [OK (Class C)]) @
               map OK Ts @ replicate mxl\<^sub>0 Err)\<rfloor>"
    and "start == OK first # replicate (length is - 1) (OK None)"
### theory "Draft.BVExec"
### 0.531s elapsed time, 2.103s cpu time, 0.107s GC time
Found termination order: "{}"
Proofs for inductive predicate(s) "redp", "redsp"
Found termination order: "{}"
consts
  conf_fs ::
    "jvm_prog
     => heap
        => sheap
           => (char list
               => char list => (ty list * ty err list) option list)
              => char list => char list => nat => ty => frame list => bool"
Found termination order: "{}"
Found termination order: "{}"
  Proving monotonicity ...
### Ambiguous input (line 416 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BigStep.eval" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BigStep.eval" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 429 of "$AFP/JinjaDCI/BV/BVConform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" xp)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" xp)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.BVConform"
### 2.793s elapsed time, 11.090s cpu time, 0.758s GC time
Loading theory "Draft.ClassAdd" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.BVNoTypeError" via "Draft.BVSpecTypeSafe" via "Draft.StartProg")
### Ambiguous input (line 417 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BigStep.eval" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BigStep.eval" ("_position" P)
###     ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 622 of "$AFP/JinjaDCI/BV/ClassAdd.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" h)
###     ("_position" obj)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" h)
###     ("_position" obj)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 624 of "$AFP/JinjaDCI/BV/ClassAdd.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state"
###     ("_applC" ("_position" class_add)
###       ("_cargs" ("_position" P)
###         ("_tuple" ("_position" C) ("_tuple_arg" ("_position" cdec)))))
###     ("_position" h) ("_position" obj)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf"
###     ("_applC" ("_position" class_add)
###       ("_cargs" ("_position" P)
###         ("_tuple" ("_position" C) ("_tuple_arg" ("_position" cdec)))))
###     ("_position" h) ("_position" obj)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.ClassAdd"
### 0.479s elapsed time, 1.905s cpu time, 0.108s GC time
Loading theory "Draft.StartProg" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.BVNoTypeError" via "Draft.BVSpecTypeSafe")
Found termination order: "{}"
### theory "Draft.StartProg"
### 0.229s elapsed time, 0.908s cpu time, 0.000s GC time
Loading theory "Draft.BVSpecTypeSafe" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.BVNoTypeError")
[| JVM_sl ?b; start_context_axioms ?P ?Ts ?p ?C |]
==> start_context ?P ?b ?Ts ?p ?C
### Ambiguous input (line 78 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder" ("_position" f)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>)
###         ("_tuple" ("_position" None)
###           ("_tuple_args" ("_position" h)
###             ("_tuple_args"
###               ("\<^const>List.list.Cons" ("_position" f) ("_position" frs))
###               ("_tuple_arg" ("_position" sh)))))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" curr_method) ("_position" f))
###           ("_position" clinit)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>)
###           ("_applC" ("_position" find_handler)
###             ("_cargs" ("_position" P)
###               ("_cargs" ("_position" xcp)
###                 ("_cargs" ("_position" h)
###                   ("_cargs" ("_position" frs) ("_position" sh)))))))))))
### ("\<^const>Pure.all_binder" ("_position" f)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_tuple" ("_position" None)
###           ("_tuple_args" ("_position" h)
###             ("_tuple_args"
###               ("\<^const>List.list.Cons" ("_position" f) ("_position" frs))
###               ("_tuple_arg" ("_position" sh)))))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" curr_method) ("_position" f))
###           ("_position" clinit)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>)
###           ("_applC" ("_position" find_handler)
###             ("_cargs" ("_position" P)
###               ("_cargs" ("_position" xcp)
###                 ("_cargs" ("_position" h)
###                   ("_cargs" ("_position" frs) ("_position" sh)))))))))))
### ("\<^const>Pure.all_binder" ("_position" f)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>)
###         ("_tuple" ("_position" None)
###           ("_tuple_args" ("_position" h)
###             ("_tuple_args"
###               ("\<^const>List.list.Cons" ("_position" f) ("_position" frs))
###               ("_tuple_arg" ("_position" sh)))))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" curr_method) ("_position" f))
###           ("_position" clinit)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_applC" ("_position" find_handler)
###             ("_cargs" ("_position" P)
###               ("_cargs" ("_position" xcp)
###                 ("_cargs" ("_position" h)
###                   ("_cargs" ("_position" frs) ("_position" sh)))))))))))
### ("\<^const>Pure.all_binder" ("_position" f)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_tuple" ("_position" None)
###           ("_tuple_args" ("_position" h)
###             ("_tuple_args"
###               ("\<^const>List.list.Cons" ("_position" f) ("_position" frs))
###               ("_tuple_arg" ("_position" sh)))))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" curr_method) ("_position" f))
###           ("_position" clinit)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_applC" ("_position" find_handler)
###             ("_cargs" ("_position" P)
###               ("_cargs" ("_position" xcp)
###                 ("_cargs" ("_position" h)
###                   ("_cargs" ("_position" frs) ("_position" sh)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 192 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" fst)
###           ("_applC" ("_position" exec_instr)
###             ("_cargs"
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_cargs" ("_position" P)
###                 ("_cargs" ("_position" h)
###                   ("_cargs" ("_position" stk)
###                     ("_cargs" ("_position" vars)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("_position" M)
###                           ("_cargs" ("_position" pc)
###                             ("_cargs" ("_position" ics)
###                               ("_cargs" ("_position" frs)
###                                 ("_position" sh)))))))))))))
###         ("_applC" ("_position" Some) ("_position" xcp))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###           ("_position" mxs) ("_applC" ("_position" size) ("_position" ins))
###           ("_position" xt)
###           ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###           ("_position" pc)
###           ("_applC" ("_position" \<Phi>)
###             ("_cargs" ("_position" C) ("_position" M)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###             ("_tuple" ("_position" None)
###               ("_tuple_args" ("_position" h)
###                 ("_tuple_args"
###                   ("\<^const>List.list.Cons"
###                     ("_tuple" ("_position" stk)
###                       ("_tuple_args" ("_position" loc)
###                         ("_tuple_args" ("_position" C)
###                           ("_tuple_args" ("_position" M)
###                             ("_tuple_args" ("_position" pc)
###                               ("_tuple_arg" ("_position" ics)))))))
###                     ("_position" frs))
###                   ("_tuple_arg" ("_position" sh))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" obj)
###       ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" xcp))
###         ("_applC" ("_position" Some) ("_position" obj))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" fst)
###           ("_applC" ("_position" exec_instr)
###             ("_cargs"
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_cargs" ("_position" P)
###                 ("_cargs" ("_position" h)
###                   ("_cargs" ("_position" stk)
###                     ("_cargs" ("_position" vars)
###                       ("_cargs" ("_position" C)
###                         ("_cargs" ("_position" M)
###                           ("_cargs" ("_position" pc)
###                             ("_cargs" ("_position" ics)
###                               ("_cargs" ("_position" frs)
###                                 ("_position" sh)))))))))))))
###         ("_applC" ("_position" Some) ("_position" xcp))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###           ("_position" mxs) ("_applC" ("_position" size) ("_position" ins))
###           ("_position" xt)
###           ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###           ("_position" pc)
###           ("_applC" ("_position" \<Phi>)
###             ("_cargs" ("_position" C) ("_position" M)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>BVConform.correct_state" ("_position" P)
###             ("_position" \<Phi>)
###             ("_tuple" ("_position" None)
###               ("_tuple_args" ("_position" h)
###                 ("_tuple_args"
###                   ("\<^const>List.list.Cons"
###                     ("_tuple" ("_position" stk)
###                       ("_tuple_args" ("_position" loc)
###                         ("_tuple_args" ("_position" C)
###                           ("_tuple_args" ("_position" M)
###                             ("_tuple_args" ("_position" pc)
###                               ("_tuple_arg" ("_position" ics)))))))
###                     ("_position" frs))
###                   ("_tuple_arg" ("_position" sh))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" obj)
###       ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" xcp))
###         ("_applC" ("_position" Some) ("_position" obj))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 222 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 265 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 266 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 622 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 626 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 753 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 757 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 809 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 813 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 885 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 887 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1016 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1019 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1104 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" No_ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" No_ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1107 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1153 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1155 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1357 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1375 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1392 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1424 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### EX z zs. ?ys = z # zs & subtype ?P ?x z & ?P \<turnstile> ?xs [\<le>] zs ==>
### ?P \<turnstile> (?x # ?xs) [\<le>] ?ys
### Ignoring duplicate safe elimination (elim!)
### [| ?P \<turnstile> (?x # ?xs) [\<le>] ?ys;
###    EX z zs.
###       ?ys = z # zs & subtype ?P ?x z & ?P \<turnstile> ?xs [\<le>] zs ==>
###    PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe introduction (intro!)
### EX z zs. ?ys = z # zs & subtype ?P ?x z & ?P \<turnstile> ?xs [\<le>] zs ==>
### ?P \<turnstile> (?x # ?xs) [\<le>] ?ys
### Ignoring duplicate safe elimination (elim!)
### [| ?P \<turnstile> (?x # ?xs) [\<le>] ?ys;
###    EX z zs.
###       ?ys = z # zs & subtype ?P ?x z & ?P \<turnstile> ?xs [\<le>] zs ==>
###    PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate rewrite rule:
### ?P1 \<turnstile> (?x1 # ?xs1) [\<le>] ?ys1 ==
### EX z zs.
###    ?ys1 = z # zs & subtype ?P1 ?x1 z & ?P1 \<turnstile> ?xs1 [\<le>] zs
### Ambiguous input (line 1447 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1450 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1521 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1525 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1584 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" No_ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" No_ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1588 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1630 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1633 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1711 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1715 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1786 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" No_ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" No_ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1790 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1827 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" is_class)
###         ("_cargs" ("_position" P) ("_position" C))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" wf_prog)
###           ("_cargs" ("_position" wt) ("_position" P))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" h)
###       ("_applC" ("_position" blank)
###         ("_cargs" ("_position" P) ("_position" C))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" is_class)
###         ("_cargs" ("_position" P) ("_position" C))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" wf_prog)
###           ("_cargs" ("_position" wt) ("_position" P))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" h)
###       ("_applC" ("_position" blank)
###         ("_cargs" ("_position" P) ("_position" C))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1842 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1845 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1901 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" No_ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" No_ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1904 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1949 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1966 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1982 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1998 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2015 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2031 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2054 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg" ("_position" ics)))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2055 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2204 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_tuple" ("_position" None)
###         ("_tuple_args" ("_position" h)
###           ("_tuple_args"
###             ("\<^const>List.list.Cons"
###               ("_tuple" ("_position" stk)
###                 ("_tuple_args" ("_position" loc)
###                   ("_tuple_args" ("_position" C)
###                     ("_tuple_args" ("_position" M)
###                       ("_tuple_args" ("_position" pc)
###                         ("_tuple_arg" ("_position" ics)))))))
###               ("_position" frs))
###             ("_tuple_arg" ("_position" sh)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" m)
###           ("_idts" ("_position" Ts) ("_position" T))))
###       ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###         ("_position" M) ("_position" b) ("_position" Ts) ("_position" T)
###         ("_position" m) ("_position" C)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_tuple" ("_position" None)
###         ("_tuple_args" ("_position" h)
###           ("_tuple_args"
###             ("\<^const>List.list.Cons"
###               ("_tuple" ("_position" stk)
###                 ("_tuple_args" ("_position" loc)
###                   ("_tuple_args" ("_position" C)
###                     ("_tuple_args" ("_position" M)
###                       ("_tuple_args" ("_position" pc)
###                         ("_tuple_arg" ("_position" ics)))))))
###               ("_position" frs))
###             ("_tuple_arg" ("_position" sh)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" b)
###         ("_idts" ("_position" m)
###           ("_idts" ("_position" Ts) ("_position" T))))
###       ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###         ("_position" M) ("_position" b) ("_position" Ts) ("_position" T)
###         ("_position" m) ("_position" C)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2209 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder" ("_position" \<sigma>)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###           ("_position" P)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###             ("_position" \<sigma>)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>JVMExec.exec_1'" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>'))
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>) ("_position" \<sigma>'))))))
### ("\<^const>Pure.all_binder" ("_position" \<sigma>)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###           ("_position" P)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>BVConform.correct_state" ("_position" P)
###             ("_position" \<Phi>) ("_position" \<sigma>)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>JVMExec.exec_1'" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>'))
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>) ("_position" \<sigma>'))))))
### ("\<^const>Pure.all_binder" ("_position" \<sigma>)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###           ("_position" P)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###             ("_position" \<sigma>)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>JVMExec.exec_1'" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>'))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_position" \<sigma>'))))))
### ("\<^const>Pure.all_binder" ("_position" \<sigma>)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###           ("_position" P)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>BVConform.correct_state" ("_position" P)
###             ("_position" \<Phi>) ("_position" \<sigma>)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>JVMExec.exec_1'" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>'))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_position" \<sigma>'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2243 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_args" ("_position" frs)
###                 ("_tuple_arg" ("_position" sh)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" xp) ("_position" None)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" frs)
###               ("\<^const>List.list.Nil")))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" \<sigma>')
###       ("\<^const>HOL.conj"
###         ("\<^const>JVMExec.exec_1'" ("_position" P)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_args" ("_position" frs)
###                 ("_tuple_arg" ("_position" sh)))))
###           ("_position" \<sigma>'))
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>) ("_position" \<sigma>'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_args" ("_position" frs)
###                 ("_tuple_arg" ("_position" sh)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" xp) ("_position" None)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" frs)
###               ("\<^const>List.list.Nil")))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" \<sigma>')
###       ("\<^const>HOL.conj"
###         ("\<^const>JVMExec.exec_1'" ("_position" P)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_args" ("_position" frs)
###                 ("_tuple_arg" ("_position" sh)))))
###           ("_position" \<sigma>'))
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>) ("_position" \<sigma>'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_args" ("_position" frs)
###                 ("_tuple_arg" ("_position" sh)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" xp) ("_position" None)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" frs)
###               ("\<^const>List.list.Nil")))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" \<sigma>')
###       ("\<^const>HOL.conj"
###         ("\<^const>JVMExec.exec_1'" ("_position" P)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_args" ("_position" frs)
###                 ("_tuple_arg" ("_position" sh)))))
###           ("_position" \<sigma>'))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_position" \<sigma>'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_args" ("_position" frs)
###                 ("_tuple_arg" ("_position" sh)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" xp) ("_position" None)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" frs)
###               ("\<^const>List.list.Nil")))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" \<sigma>')
###       ("\<^const>HOL.conj"
###         ("\<^const>JVMExec.exec_1'" ("_position" P)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_args" ("_position" frs)
###                 ("_tuple_arg" ("_position" sh)))))
###           ("_position" \<sigma>'))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_position" \<sigma>'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2248 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMExec.exec_all" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>) ("_position" \<sigma>))
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>) ("_position" \<sigma>')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMExec.exec_all" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_position" \<sigma>))
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>) ("_position" \<sigma>')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMExec.exec_all" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>) ("_position" \<sigma>))
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_position" \<sigma>')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMExec.exec_all" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_position" \<sigma>))
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_position" \<sigma>')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2288 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state"
###     ("_applC" ("_position" start_prog)
###       ("_cargs" ("_position" P) ("_cargs" ("_position" C) ("_position" M))))
###     ("_position" \<Phi>')
###     ("_applC" ("_position" start_state) ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf"
###     ("_applC" ("_position" start_prog)
###       ("_cargs" ("_position" P) ("_cargs" ("_position" C) ("_position" M))))
###     ("_position" \<Phi>')
###     ("_applC" ("_position" start_state) ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2330 of "$AFP/JinjaDCI/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>JVMExec.exec_all"
###       ("_applC" ("_position" start_prog)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C) ("_position" M))))
###       ("_applC" ("_position" start_state) ("_position" P))
###       ("_position" \<sigma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state"
###       ("_applC" ("_position" start_prog)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C) ("_position" M))))
###       ("_position" \<Phi>') ("_position" \<sigma>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>JVMExec.exec_all"
###       ("_applC" ("_position" start_prog)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C) ("_position" M))))
###       ("_applC" ("_position" start_state) ("_position" P))
###       ("_position" \<sigma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf"
###       ("_applC" ("_position" start_prog)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C) ("_position" M))))
###       ("_position" \<Phi>') ("_position" \<sigma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.BVSpecTypeSafe"
### 1.075s elapsed time, 3.278s cpu time, 0.336s GC time
Loading theory "Draft.BVNoTypeError" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI")
### Ambiguous input (line 86 of "$AFP/JinjaDCI/BV/BVNoTypeError.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 276 of "$AFP/JinjaDCI/BV/BVNoTypeError.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###       ("_position" P)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>) ("_position" \<sigma>)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMExec.exec_all" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMDefensive.exec_all_d" ("_position" P)
###           ("_applC" ("_position" Normal) ("_position" \<sigma>))
###           ("_applC" ("_position" Normal) ("_position" \<sigma>')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###       ("_position" P)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_position" \<sigma>)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMExec.exec_all" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>')))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMDefensive.exec_all_d" ("_position" P)
###           ("_applC" ("_position" Normal) ("_position" \<sigma>))
###           ("_applC" ("_position" Normal) ("_position" \<sigma>')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 305 of "$AFP/JinjaDCI/BV/BVNoTypeError.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale BVNoTypeError.cnf
  fixes P :: "jvm_prog"
    and
    \<Phi> ::
      "char list => char list => (ty list * ty err list) option list"
    and \<sigma> :: "jvm_state"
  assumes "cnf P \<Phi> \<sigma>"
### theory "Draft.BigStep"
### 9.682s elapsed time, 35.875s cpu time, 2.573s GC time
Loading theory "Draft.DefAss" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.Equivalence" via "Draft.TypeSafe" via "Draft.Progress")
Loading theory "Draft.J1" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.TypeComp" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.J1WellForm")
locale start
  fixes P :: "jvm_prog"
    and C :: "char list"
    and M :: "char list"
    and \<sigma> :: "jvm_state type_error"
    and T :: "'a"
    and b :: "jvm_method"
    and P\<^sub>0 :: "jvm_prog"
  assumes "start P C M b"
  defines "\<sigma> == Normal (start_state P)"
    and "P\<^sub>0 == class_add P (start_class C M)"
### theory "Draft.BVNoTypeError"
### 0.367s elapsed time, 1.133s cpu time, 0.072s GC time
### Ambiguous input (line 41 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" max_vars)
###       ("_updbind" ("_position" V) ("_position" e)))
###     ("_applC" ("_position" max_vars) ("_position" e))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" max_vars)
###       ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" e)))
###     ("_applC" ("_position" max_vars) ("_position" e))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 91 of "$AFP/JinjaDCI/J/DefAss.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" \<A>)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>DefAss.hyperUn"
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>DefAss.hyperUn"
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>DefAss.hyperUn"
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 92 of "$AFP/JinjaDCI/J/DefAss.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" \<A>)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" \<A>) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("_applC" ("_position" \<A>) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" \<A>) ("_position" e\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  max_vars :: "'a exp => nat"
  max_varss :: "'a exp list => nat"
consts
  \<A> :: "'a exp => 'a set option"
  \<A>s :: "'a exp list => 'a set option"
### Ambiguous input (line 120 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h)
###           ("_tuple_args" ("_position" ls)
###             ("_tuple_arg" ("_position" sh))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" i)
###           ("_applC" ("_position" size) ("_position" ls))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" ls')
###             ("_applC" ("_position" ls)
###               ("_list"
###                 ("\<^const>Expr.exp.LAss" ("_position" i)
###                   ("_position" v)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss" ("_position" i) ("_position" e))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" ls')
###           ("_tuple_arg" ("_position" sh)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h)
###           ("_tuple_args" ("_position" ls)
###             ("_tuple_arg" ("_position" sh))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" i)
###           ("_applC" ("_position" size) ("_position" ls))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" ls')
###             ("_LUpdate" ("_position" ls)
###               ("_lupdbind" ("_position" i) ("_position" v))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss" ("_position" i) ("_position" e))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" ls')
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 184 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" b) ("_position" t))
###                 ("\<^const>TypeRel.has_field" ("_position" P)
###                   ("_position" C) ("_position" F) ("_position" b)
###                   ("_position" t) ("_position" D)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" b) ("_position" t))
###                 ("\<^const>TypeRel.has_field" ("_position" P)
###                   ("_position" C) ("_position" F) ("_position" b)
###                   ("_position" t) ("_position" D)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 188 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" Static) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" Static) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 170 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" NonStatic) ("_position" t)
###               ("_position" D)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" fs')
###                 ("_MapUpd" ("_position" fs)
###                   ("_maplet"
###                     ("_tuple" ("_position" F)
###                       ("_tuple_arg" ("_position" D)))
###                     ("_position" v)))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                   ("_MapUpd" ("_position" h\<^sub>2)
###                     ("_maplet" ("_position" a)
###                       ("_tuple" ("_position" C)
###                         ("_tuple_arg" ("_position" fs')))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" NonStatic) ("_position" t)
###               ("_position" D)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" fs')
###                 ("_MapUpd" ("_position" fs)
###                   ("_maplet"
###                     ("_tuple" ("_position" F)
###                       ("_tuple_arg" ("_position" D)))
###                     ("_position" v)))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                   ("_MapUpd" ("_position" h\<^sub>2)
###                     ("_maplet" ("_position" a)
###                       ("_tuple" ("_position" C)
###                         ("_tuple_arg" ("_position" fs')))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 119 of "$AFP/JinjaDCI/J/DefAss.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<D>)
###       ("_cargs"
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))
###         ("_position" A)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" \<D>)
###         ("_cargs" ("_position" e\<^sub>1) ("_position" A)))
###       ("_applC" ("_position" \<D>)
###         ("_cargs" ("_position" e\<^sub>2)
###           ("\<^const>DefAss.hyperUn" ("_position" A)
###             ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<D>)
###       ("_cargs"
###         ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))
###         ("_position" A)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" \<D>)
###         ("_cargs" ("_position" e\<^sub>1) ("_position" A)))
###       ("_applC" ("_position" \<D>)
###         ("_cargs" ("_position" e\<^sub>2)
###           ("\<^const>DefAss.hyperUn" ("_position" A)
###             ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 120 of "$AFP/JinjaDCI/J/DefAss.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<D>)
###       ("_cargs"
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))
###         ("_position" A)))
###     ("_applC" ("_position" \<D>)
###       ("_cargs" ("_position" e\<^sub>2) ("_position" A)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<D>)
###       ("_cargs"
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))
###         ("_position" A)))
###     ("_applC" ("_position" \<D>)
###       ("_cargs" ("_position" e\<^sub>2) ("_position" A)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 175 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_position" null) ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_position" null) ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 193 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" sfs')
###               ("_MapUpd" ("_position" sfs)
###                 ("_maplet" ("_position" F) ("_position" v)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" sh\<^sub>1')
###                 ("_MapUpd" ("_position" sh\<^sub>1)
###                   ("_maplet" ("_position" D)
###                     ("_tuple" ("_position" sfs')
###                       ("_tuple_arg" ("_position" Done))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" sfs')
###               ("_MapUpd" ("_position" sfs)
###                 ("_maplet" ("_position" F) ("_position" v)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" sh\<^sub>1')
###                 ("_MapUpd" ("_position" sh\<^sub>1)
###                   ("_maplet" ("_position" D)
###                     ("_tuple" ("_position" sfs')
###                       ("_tuple_arg" ("_position" Done))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 178 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 181 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 198 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Not_Ex" ("_position" sfs)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" sfs)
###                   ("_tuple_arg" ("_position" Done)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval\<^sub>1" ("_position" P)
###               ("\<^const>Expr.exp.INIT" ("_position" D)
###                 ("_list" ("_position" D)) ("_position" False)
###                 ("_position" unit))
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args" ("_position" l\<^sub>1)
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_applC" ("_position" Val) ("_position" v'))
###               ("_tuple" ("_position" h')
###                 ("_tuple_args" ("_position" l')
###                   ("_tuple_arg" ("_position" sh'))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" sh') ("_position" D))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" sfs)
###                     ("_tuple_arg" ("_position" i))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" sfs')
###                   ("_MapUpd" ("_position" sfs)
###                     ("_maplet" ("_position" F) ("_position" v)))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" sh'')
###                     ("_MapUpd" ("_position" sh')
###                       ("_maplet" ("_position" D)
###                         ("_tuple" ("_position" sfs')
###                           ("_tuple_arg" ("_position" i))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l')
###           ("_tuple_arg" ("_position" sh'')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Not_Ex" ("_position" sfs)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" sfs)
###                   ("_tuple_arg" ("_position" Done)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval\<^sub>1" ("_position" P)
###               ("\<^const>Expr.exp.INIT" ("_position" D)
###                 ("_list" ("_position" D)) ("_position" False)
###                 ("_position" unit))
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args" ("_position" l\<^sub>1)
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_applC" ("_position" Val) ("_position" v'))
###               ("_tuple" ("_position" h')
###                 ("_tuple_args" ("_position" l')
###                   ("_tuple_arg" ("_position" sh'))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" sh') ("_position" D))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" sfs)
###                     ("_tuple_arg" ("_position" i))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" sfs')
###                   ("_MapUpd" ("_position" sfs)
###                     ("_maplet" ("_position" F) ("_position" v)))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" sh'')
###                     ("_MapUpd" ("_position" sh')
###                       ("_maplet" ("_position" D)
###                         ("_tuple" ("_position" sfs')
###                           ("_tuple_arg" ("_position" i))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l')
###           ("_tuple_arg" ("_position" sh'')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 205 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Not_Ex" ("_position" sfs)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" sfs)
###                   ("_tuple_arg" ("_position" Done)))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval\<^sub>1" ("_position" P)
###               ("\<^const>Expr.exp.INIT" ("_position" D)
###                 ("_list" ("_position" D)) ("_position" False)
###                 ("_position" unit))
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args" ("_position" l\<^sub>1)
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_applC" ("_position" throw) ("_position" a))
###               ("_position" s')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_applC" ("_position" throw) ("_position" a))
###       ("_position" s'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Not_Ex" ("_position" sfs)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" sfs)
###                   ("_tuple_arg" ("_position" Done)))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval\<^sub>1" ("_position" P)
###               ("\<^const>Expr.exp.INIT" ("_position" D)
###                 ("_list" ("_position" D)) ("_position" False)
###                 ("_position" unit))
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args" ("_position" l\<^sub>1)
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_applC" ("_position" throw) ("_position" a))
###               ("_position" s')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_applC" ("_position" throw) ("_position" a))
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 210 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 213 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" b) ("_position" t))
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" b) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" b) ("_position" t))
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" b) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 217 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" t)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" t)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  \<D> :: "'a exp => 'a set option => bool"
  \<D>s :: "'a exp list => 'a set option => bool"
### Ambiguous input (line 327 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" Throw) ("_position" a))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" ls\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" h\<^sub>1) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###             ("_position" C)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" i)
###               ("_applC" ("_position" length) ("_position" ls\<^sub>1))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>eval\<^sub>1" ("_position" P)
###                 ("_position" e\<^sub>2)
###                 ("_tuple" ("_position" h\<^sub>1)
###                   ("_tuple_args"
###                     ("_LUpdate" ("_position" ls\<^sub>1)
###                       ("_lupdbind" ("_position" i)
###                         ("_applC" ("_position" Addr) ("_position" a))))
###                     ("_tuple_arg" ("_position" sh\<^sub>1))))
###                 ("_position" e\<^sub>2')
###                 ("_tuple" ("_position" h\<^sub>2)
###                   ("_tuple_args" ("_position" ls\<^sub>2)
###                     ("_tuple_arg" ("_position" sh\<^sub>2)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" i) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" e\<^sub>2')
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" ls\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" Throw) ("_position" a))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" ls\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" h\<^sub>1) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###             ("_position" C)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" i)
###               ("_applC" ("_position" length) ("_position" ls\<^sub>1))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>eval\<^sub>1" ("_position" P)
###                 ("_position" e\<^sub>2)
###                 ("_tuple" ("_position" h\<^sub>1)
###                   ("_tuple_args"
###                     ("_applC" ("_position" ls\<^sub>1)
###                       ("_list"
###                         ("\<^const>Expr.exp.LAss" ("_position" i)
###                           ("_applC" ("_position" Addr) ("_position" a)))))
###                     ("_tuple_arg" ("_position" sh\<^sub>1))))
###                 ("_position" e\<^sub>2')
###                 ("_tuple" ("_position" h\<^sub>2)
###                   ("_tuple_args" ("_position" ls\<^sub>2)
###                     ("_tuple_arg" ("_position" sh\<^sub>2)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" i) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" e\<^sub>2')
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" ls\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.DefAss"
### 0.275s elapsed time, 0.983s cpu time, 0.075s GC time
Loading theory "Draft.JWellForm" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.Equivalence" via "Draft.TypeSafe")
### Ambiguous input (line 17 of "$AFP/JinjaDCI/J/JWellForm.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J_mdecl)
###     ("_cargs" ("_position" P) ("_position" C)))
###   ("_lambda"
###     ("_pattern" ("_position" M)
###       ("_patterns" ("_position" b)
###         ("_patterns" ("_position" Ts)
###           ("_patterns" ("_position" T)
###             ("_pattern" ("_position" pns) ("_position" body))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Ts))
###         ("_applC" ("_position" length) ("_position" pns)))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" distinct) ("_position" pns))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" sub_RI) ("_position" body)))
###           ("_case_syntax" ("_position" b)
###             ("_case2"
###               ("_case1" ("_position" NonStatic)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.not_member" ("_position" this)
###                     ("_applC" ("_position" set) ("_position" pns)))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.Ex_binder" ("_position" T')
###                       ("\<^const>WellType.WT" ("_position" P)
###                         ("_Map"
###                           ("_Maplets"
###                             ("_maplet" ("_position" this)
###                               ("_applC" ("_position" Class)
###                                 ("_position" C)))
###                             ("_maplets" ("_position" pns)
###                               ("_position" Ts))))
###                         ("_position" body)
###                         ("\<^const>HOL.conj" ("_position" T')
###                           ("\<^const>TypeRel.widen" ("_position" P)
###                             ("_position" T') ("_position" T)))))
###                     ("_applC" ("_position" \<D>)
###                       ("_cargs" ("_position" body)
###                         ("\<^const>Option.option.Some"
###                           ("\<^const>Set.union"
###                             ("_Finset" ("_position" this))
###                             ("_applC" ("_position" set)
###                               ("_position" pns)))))))))
###               ("_case1" ("_position" Static)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.Ex_binder" ("_position" T')
###                     ("\<^const>WellType.WT" ("_position" P)
###                       ("_Map"
###                         ("_maplets" ("_position" pns) ("_position" Ts)))
###                       ("_position" body)
###                       ("\<^const>HOL.conj" ("_position" T')
###                         ("\<^const>TypeRel.widen" ("_position" P)
###                           ("_position" T') ("_position" T)))))
###                   ("_applC" ("_position" \<D>)
###                     ("_cargs" ("_position" body)
###                       ("\<^const>Option.option.Some"
###                         ("_applC" ("_position" set)
###                           ("_position" pns))))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J_mdecl)
###     ("_cargs" ("_position" P) ("_position" C)))
###   ("_lambda"
###     ("_pattern" ("_position" M)
###       ("_patterns" ("_position" b)
###         ("_patterns" ("_position" Ts)
###           ("_patterns" ("_position" T)
###             ("_pattern" ("_position" pns) ("_position" body))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Ts))
###         ("_applC" ("_position" length) ("_position" pns)))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" distinct) ("_position" pns))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" sub_RI) ("_position" body)))
###           ("_case_syntax" ("_position" b)
###             ("_case2"
###               ("_case1" ("_position" NonStatic)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.not_member" ("_position" this)
###                     ("_applC" ("_position" set) ("_position" pns)))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.Ex_binder" ("_position" T')
###                       ("\<^const>HOL.conj"
###                         ("\<^const>WellType.WT" ("_position" P)
###                           ("_Map"
###                             ("_Maplets"
###                               ("_maplet" ("_position" this)
###                                 ("_applC" ("_position" Class)
###                                   ("_position" C)))
###                               ("_maplets" ("_position" pns)
###                                 ("_position" Ts))))
###                           ("_position" body) ("_position" T'))
###                         ("\<^const>TypeRel.widen" ("_position" P)
###                           ("_position" T') ("_position" T))))
###                     ("_applC" ("_position" \<D>)
###                       ("_cargs" ("_position" body)
###                         ("\<^const>Option.option.Some"
###                           ("\<^const>Set.union"
###                             ("_Finset" ("_position" this))
###                             ("_applC" ("_position" set)
###                               ("_position" pns)))))))))
###               ("_case1" ("_position" Static)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.Ex_binder" ("_position" T')
###                     ("\<^const>WellType.WT" ("_position" P)
###                       ("_Map"
###                         ("_maplets" ("_position" pns) ("_position" Ts)))
###                       ("_position" body)
###                       ("\<^const>HOL.conj" ("_position" T')
###                         ("\<^const>TypeRel.widen" ("_position" P)
###                           ("_position" T') ("_position" T)))))
###                   ("_applC" ("_position" \<D>)
###                     ("_cargs" ("_position" body)
###                       ("\<^const>Option.option.Some"
###                         ("_applC" ("_position" set)
###                           ("_position" pns))))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J_mdecl)
###     ("_cargs" ("_position" P) ("_position" C)))
###   ("_lambda"
###     ("_pattern" ("_position" M)
###       ("_patterns" ("_position" b)
###         ("_patterns" ("_position" Ts)
###           ("_patterns" ("_position" T)
###             ("_pattern" ("_position" pns) ("_position" body))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Ts))
###         ("_applC" ("_position" length) ("_position" pns)))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" distinct) ("_position" pns))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" sub_RI) ("_position" body)))
###           ("_case_syntax" ("_position" b)
###             ("_case2"
###               ("_case1" ("_position" NonStatic)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.not_member" ("_position" this)
###                     ("_applC" ("_position" set) ("_position" pns)))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.Ex_binder" ("_position" T')
###                       ("\<^const>WellType.WT" ("_position" P)
###                         ("_Map"
###                           ("_Maplets"
###                             ("_maplet" ("_position" this)
###                               ("_applC" ("_position" Class)
###                                 ("_position" C)))
###                             ("_maplets" ("_position" pns)
###                               ("_position" Ts))))
###                         ("_position" body)
###                         ("\<^const>HOL.conj" ("_position" T')
###                           ("\<^const>TypeRel.widen" ("_position" P)
###                             ("_position" T') ("_position" T)))))
###                     ("_applC" ("_position" \<D>)
###                       ("_cargs" ("_position" body)
###                         ("\<^const>Option.option.Some"
###                           ("\<^const>Set.union"
###                             ("_Finset" ("_position" this))
###                             ("_applC" ("_position" set)
###                               ("_position" pns)))))))))
###               ("_case1" ("_position" Static)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.Ex_binder" ("_position" T')
###                     ("\<^const>HOL.conj"
###                       ("\<^const>WellType.WT" ("_position" P)
###                         ("_Map"
###                           ("_maplets" ("_position" pns) ("_position" Ts)))
###                         ("_position" body) ("_position" T'))
###                       ("\<^const>TypeRel.widen" ("_position" P)
###                         ("_position" T') ("_position" T))))
###                   ("_applC" ("_position" \<D>)
###                     ("_cargs" ("_position" body)
###                       ("\<^const>Option.option.Some"
###                         ("_applC" ("_position" set)
###                           ("_position" pns))))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J_mdecl)
###     ("_cargs" ("_position" P) ("_position" C)))
###   ("_lambda"
###     ("_pattern" ("_position" M)
###       ("_patterns" ("_position" b)
###         ("_patterns" ("_position" Ts)
###           ("_patterns" ("_position" T)
###             ("_pattern" ("_position" pns) ("_position" body))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Ts))
###         ("_applC" ("_position" length) ("_position" pns)))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" distinct) ("_position" pns))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" sub_RI) ("_position" body)))
###           ("_case_syntax" ("_position" b)
###             ("_case2"
###               ("_case1" ("_position" NonStatic)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.not_member" ("_position" this)
###                     ("_applC" ("_position" set) ("_position" pns)))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.Ex_binder" ("_position" T')
###                       ("\<^const>HOL.conj"
###                         ("\<^const>WellType.WT" ("_position" P)
###                           ("_Map"
###                             ("_Maplets"
###                               ("_maplet" ("_position" this)
###                                 ("_applC" ("_position" Class)
###                                   ("_position" C)))
###                               ("_maplets" ("_position" pns)
###                                 ("_position" Ts))))
###                           ("_position" body) ("_position" T'))
###                         ("\<^const>TypeRel.widen" ("_position" P)
###                           ("_position" T') ("_position" T))))
###                     ("_applC" ("_position" \<D>)
###                       ("_cargs" ("_position" body)
###                         ("\<^const>Option.option.Some"
###                           ("\<^const>Set.union"
###                             ("_Finset" ("_position" this))
###                             ("_applC" ("_position" set)
###                               ("_position" pns)))))))))
###               ("_case1" ("_position" Static)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.Ex_binder" ("_position" T')
###                     ("\<^const>HOL.conj"
###                       ("\<^const>WellType.WT" ("_position" P)
###                         ("_Map"
###                           ("_maplets" ("_position" pns) ("_position" Ts)))
###                         ("_position" body) ("_position" T'))
###                       ("\<^const>TypeRel.widen" ("_position" P)
###                         ("_position" T') ("_position" T))))
###                   ("_applC" ("_position" \<D>)
###                     ("_cargs" ("_position" body)
###                       ("\<^const>Option.option.Some"
###                         ("_applC" ("_position" set)
###                           ("_position" pns))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 29 of "$AFP/JinjaDCI/J/JWellForm.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J_mdecl)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" C)
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" NonStatic)
###             ("_tuple_args" ("_position" Ts)
###               ("_tuple_args" ("_position" T)
###                 ("_tuple_args" ("_position" pns)
###                   ("_tuple_arg" ("_position" body))))))))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Ts))
###       ("_applC" ("_position" length) ("_position" pns)))
###     ("\<^const>HOL.conj" ("_applC" ("_position" distinct) ("_position" pns))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.Not"
###           ("_applC" ("_position" sub_RI) ("_position" body)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" this)
###             ("_applC" ("_position" set) ("_position" pns)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.Ex_binder" ("_position" T')
###               ("\<^const>WellType.WT" ("_position" P)
###                 ("_Map"
###                   ("_Maplets"
###                     ("_maplet" ("_position" this)
###                       ("_applC" ("_position" Class) ("_position" C)))
###                     ("_maplets" ("_position" pns) ("_position" Ts))))
###                 ("_position" body)
###                 ("\<^const>HOL.conj" ("_position" T')
###                   ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                     ("_position" T)))))
###             ("_applC" ("_position" \<D>)
###               ("_cargs" ("_position" body)
###                 ("\<^const>Option.option.Some"
###                   ("\<^const>Set.union" ("_Finset" ("_position" this))
###                     ("_applC" ("_position" set) ("_position" pns))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J_mdecl)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" C)
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" NonStatic)
###             ("_tuple_args" ("_position" Ts)
###               ("_tuple_args" ("_position" T)
###                 ("_tuple_args" ("_position" pns)
###                   ("_tuple_arg" ("_position" body))))))))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Ts))
###       ("_applC" ("_position" length) ("_position" pns)))
###     ("\<^const>HOL.conj" ("_applC" ("_position" distinct) ("_position" pns))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.Not"
###           ("_applC" ("_position" sub_RI) ("_position" body)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" this)
###             ("_applC" ("_position" set) ("_position" pns)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.Ex_binder" ("_position" T')
###               ("\<^const>HOL.conj"
###                 ("\<^const>WellType.WT" ("_position" P)
###                   ("_Map"
###                     ("_Maplets"
###                       ("_maplet" ("_position" this)
###                         ("_applC" ("_position" Class) ("_position" C)))
###                       ("_maplets" ("_position" pns) ("_position" Ts))))
###                   ("_position" body) ("_position" T'))
###                 ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                   ("_position" T))))
###             ("_applC" ("_position" \<D>)
###               ("_cargs" ("_position" body)
###                 ("\<^const>Option.option.Some"
###                   ("\<^const>Set.union" ("_Finset" ("_position" this))
###                     ("_applC" ("_position" set) ("_position" pns))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 39 of "$AFP/JinjaDCI/J/JWellForm.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J_mdecl)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" C)
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" Static)
###             ("_tuple_args" ("_position" Ts)
###               ("_tuple_args" ("_position" T)
###                 ("_tuple_args" ("_position" pns)
###                   ("_tuple_arg" ("_position" body))))))))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Ts))
###       ("_applC" ("_position" length) ("_position" pns)))
###     ("\<^const>HOL.conj" ("_applC" ("_position" distinct) ("_position" pns))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.Not"
###           ("_applC" ("_position" sub_RI) ("_position" body)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Ex_binder" ("_position" T')
###             ("\<^const>WellType.WT" ("_position" P)
###               ("_Map" ("_maplets" ("_position" pns) ("_position" Ts)))
###               ("_position" body)
###               ("\<^const>HOL.conj" ("_position" T')
###                 ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                   ("_position" T)))))
###           ("_applC" ("_position" \<D>)
###             ("_cargs" ("_position" body)
###               ("\<^const>Option.option.Some"
###                 ("_applC" ("_position" set) ("_position" pns))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J_mdecl)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" C)
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" Static)
###             ("_tuple_args" ("_position" Ts)
###               ("_tuple_args" ("_position" T)
###                 ("_tuple_args" ("_position" pns)
###                   ("_tuple_arg" ("_position" body))))))))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Ts))
###       ("_applC" ("_position" length) ("_position" pns)))
###     ("\<^const>HOL.conj" ("_applC" ("_position" distinct) ("_position" pns))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.Not"
###           ("_applC" ("_position" sub_RI) ("_position" body)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Ex_binder" ("_position" T')
###             ("\<^const>HOL.conj"
###               ("\<^const>WellType.WT" ("_position" P)
###                 ("_Map" ("_maplets" ("_position" pns) ("_position" Ts)))
###                 ("_position" body) ("_position" T'))
###               ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                 ("_position" T))))
###           ("_applC" ("_position" \<D>)
###             ("_cargs" ("_position" body)
###               ("\<^const>Option.option.Some"
###                 ("_applC" ("_position" set) ("_position" pns))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.JWellForm"
### 0.274s elapsed time, 0.835s cpu time, 0.057s GC time
Proofs for inductive predicate(s) "eval\<^sub>1", "evals\<^sub>1"
  Proving monotonicity ...
### theory "Draft.SmallStep"
### 13.672s elapsed time, 45.084s cpu time, 3.249s GC time
Loading theory "Draft.EConform" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.Equivalence" via "Draft.TypeSafe" via "Draft.Progress")
### Ambiguous input (line 21 of "$AFP/JinjaDCI/J/EConform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" init_class)
###       ("_cargs" ("_position" P)
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("_applC" ("_position" Some) ("_position" D))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" init_class)
###       ("_cargs" ("_position" P)
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("_applC" ("_position" Some) ("_position" D))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 41 of "$AFP/JinjaDCI/J/EConform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ss_exp)
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D)))
###     ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###       ("_position" D))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Expr.exp.SFAcc"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" ss_exp)
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D)))
###       ("_position" C))
###     ("_position" F) ("_position" D)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 42 of "$AFP/JinjaDCI/J/EConform.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" ss_exp)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("_case_syntax"
###             ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" v))
###                 ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1)
###                   ("_position" F) ("_position" D) ("_position" e\<^sub>2)))
###               ("_case1" ("\<^const>Pure.dummy_pattern")
###                 ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2))))))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>1)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ss_exp)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("_case_syntax"
###             ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" v))
###                 ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1)
###                   ("_position" F) ("_position" D) ("_position" e\<^sub>2)))
###               ("_case1" ("\<^const>Pure.dummy_pattern")
###                 ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2))))))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>1)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ss_exp)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("_case_syntax"
###             ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" v))
###                 ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1)
###                   ("_position" F) ("_position" D) ("_position" e\<^sub>2)))
###               ("_case1" ("\<^const>Pure.dummy_pattern")
###                 ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2))))))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>1)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" ss_exp)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("_case_syntax"
###             ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" v))
###                 ("\<^const>Expr.exp.LAss"
###                   ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1)
###                     ("_position" F) ("_position" D))
###                   ("_position" e\<^sub>2)))
###               ("_case1" ("\<^const>Pure.dummy_pattern")
###                 ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2))))))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>1)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ss_exp)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("_case_syntax"
###             ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" v))
###                 ("\<^const>Expr.exp.LAss"
###                   ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1)
###                     ("_position" F) ("_position" D))
###                   ("_position" e\<^sub>2)))
###               ("_case1" ("\<^const>Pure.dummy_pattern")
###                 ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2))))))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>1)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ss_exp)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("_case_syntax"
###             ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" v))
###                 ("\<^const>Expr.exp.LAss"
###                   ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1)
###                     ("_position" F) ("_position" D))
###                   ("_position" e\<^sub>2)))
###               ("_case1" ("\<^const>Pure.dummy_pattern")
###                 ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2))))))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>1)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 44 of "$AFP/JinjaDCI/J/EConform.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" ss_exp)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###               ("_position" D))
###             ("_position" e\<^sub>2)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ss_exp)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###               ("_position" D))
###             ("_position" e\<^sub>2)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ss_exp)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###               ("_position" D))
###             ("_position" e\<^sub>2)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" ss_exp)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###             ("_position" D) ("_position" e\<^sub>2)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ss_exp)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###             ("_position" D) ("_position" e\<^sub>2)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ss_exp)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###             ("_position" D) ("_position" e\<^sub>2)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 411 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1.eval\<^sub>1" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1.eval\<^sub>1" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 412 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1.eval\<^sub>1" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1.eval\<^sub>1" ("_position" P)
###     ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.J1"
### 6.759s elapsed time, 18.795s cpu time, 1.198s GC time
Loading theory "Draft.Compiler2" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.TypeComp" via "Draft.Compiler" via "Draft.Correctness2")
Loading theory "Draft.J1WellForm" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.TypeComp" via "Draft.Compiler" via "Draft.Correctness1")
Loading theory "Draft.Compiler1" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.TypeComp" via "Draft.Compiler" via "Draft.Correctness1")
Found termination order: "case_sum size (size_list size) <*mlex*> {}"
### Ambiguous input (line 63 of "$AFP/JinjaDCI/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WT\<^sub>1" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" T)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WT\<^sub>1" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT\<^sub>1" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WT\<^sub>1" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" T)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WT\<^sub>1" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT\<^sub>1" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 67 of "$AFP/JinjaDCI/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" T)
###         ("_position" D)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WT\<^sub>1" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" T')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT\<^sub>1" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" T)
###         ("_position" D)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WT\<^sub>1" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" T')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT\<^sub>1" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "WT\<^sub>1", "WTs\<^sub>1"
### Ambiguous input (line 22 of "$AFP/JinjaDCI/Compiler/Compiler1.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs)
###         ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###           ("_position" D))))
###     ("\<^const>Expr.exp.FAcc"
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e)))
###       ("_position" F) ("_position" D))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Expr.exp.FAcc"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs)
###           ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###             ("_position" D))))
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e))))
###     ("_position" F) ("_position" D)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 23 of "$AFP/JinjaDCI/Compiler/Compiler1.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs)
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))))
###     ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###       ("_position" D))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Expr.exp.SFAcc"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs)
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))))
###       ("_position" C))
###     ("_position" F) ("_position" D)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
  Proving monotonicity ...
### Ambiguous input (line 24 of "$AFP/JinjaDCI/Compiler/Compiler1.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs)
###         ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("\<^const>Expr.exp.FAss"
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e\<^sub>1)))
###       ("_position" F) ("_position" D)
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs)
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("\<^const>Expr.exp.FAss"
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e\<^sub>1)))
###       ("_position" F) ("_position" D)
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs)
###         ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc"
###         ("_applC" ("_position" compE\<^sub>1)
###           ("_cargs" ("_position" Vs) ("_position" e\<^sub>1)))
###         ("_position" F) ("_position" D))
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs)
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc"
###         ("_applC" ("_position" compE\<^sub>1)
###           ("_cargs" ("_position" Vs) ("_position" e\<^sub>1)))
###         ("_position" F) ("_position" D))
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Expr.exp.LAss"
###     ("\<^const>Expr.exp.FAcc"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" compE\<^sub>1)
###           ("_cargs" ("_position" Vs)
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1)
###                 ("_position" F) ("_position" D))
###               ("_position" e\<^sub>2))))
###         ("_applC" ("_position" compE\<^sub>1)
###           ("_cargs" ("_position" Vs) ("_position" e\<^sub>1))))
###       ("_position" F) ("_position" D))
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Expr.exp.FAss"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs)
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1)
###               ("_position" F) ("_position" D))
###             ("_position" e\<^sub>2))))
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e\<^sub>1))))
###     ("_position" F) ("_position" D)
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Expr.exp.LAss"
###     ("\<^const>Expr.exp.FAcc"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" compE\<^sub>1)
###           ("_cargs" ("_position" Vs)
###             ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1)
###               ("_position" F) ("_position" D) ("_position" e\<^sub>2))))
###         ("_applC" ("_position" compE\<^sub>1)
###           ("_cargs" ("_position" Vs) ("_position" e\<^sub>1))))
###       ("_position" F) ("_position" D))
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Expr.exp.FAss"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs)
###           ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D) ("_position" e\<^sub>2))))
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e\<^sub>1))))
###     ("_position" F) ("_position" D)
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 25 of "$AFP/JinjaDCI/Compiler/Compiler1.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs)
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###       ("_position" D)
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs)
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###       ("_position" D)
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs)
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs)
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Expr.exp.LAss"
###     ("\<^const>Expr.exp.SFAcc"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" compE\<^sub>1)
###           ("_cargs" ("_position" Vs)
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###                 ("_position" D))
###               ("_position" e\<^sub>2))))
###         ("_position" C))
###       ("_position" F) ("_position" D))
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Expr.exp.SFAss"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs)
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###               ("_position" D))
###             ("_position" e\<^sub>2))))
###       ("_position" C))
###     ("_position" F) ("_position" D)
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Expr.exp.LAss"
###     ("\<^const>Expr.exp.SFAcc"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" compE\<^sub>1)
###           ("_cargs" ("_position" Vs)
###             ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###               ("_position" D) ("_position" e\<^sub>2))))
###         ("_position" C))
###       ("_position" F) ("_position" D))
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Expr.exp.SFAss"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs)
###           ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###             ("_position" D) ("_position" e\<^sub>2))))
###       ("_position" C))
###     ("_position" F) ("_position" D)
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 126 of "$AFP/JinjaDCI/J/EConform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" iconf)
###       ("_cargs" ("_position" sh)
###         ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("_applC" ("_position" iconf)
###             ("_cargs" ("_position" sh) ("_position" e\<^sub>2))))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" iconf)
###               ("_cargs" ("_position" sh) ("_position" e\<^sub>1)))
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" iconf)
###       ("_cargs" ("_position" sh)
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("_applC" ("_position" iconf)
###             ("_cargs" ("_position" sh) ("_position" e\<^sub>2))))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" iconf)
###               ("_cargs" ("_position" sh) ("_position" e\<^sub>1)))
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 127 of "$AFP/JinjaDCI/J/EConform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" iconf)
###       ("_cargs" ("_position" sh)
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("_applC" ("_position" iconf)
###       ("_cargs" ("_position" sh) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" iconf)
###       ("_cargs" ("_position" sh)
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("_applC" ("_position" iconf)
###       ("_cargs" ("_position" sh) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  compE\<^sub>1 :: "char list list => char list exp => nat exp"
  compEs\<^sub>1 :: "char list list => char list exp list => nat exp list"
### Ambiguous input (line 27 of "$AFP/JinjaDCI/Compiler/Compiler2.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" compE\<^sub>2)
###       ("_updbind" ("_position" i) ("_position" e)))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compE\<^sub>2) ("_position" e))
###       ("_list"
###         ("_args" ("_applC" ("_position" Store) ("_position" i))
###           ("_applC" ("_position" Push) ("_position" Unit)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>2)
###       ("\<^const>Expr.exp.LAss" ("_position" i) ("_position" e)))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compE\<^sub>2) ("_position" e))
###       ("_list"
###         ("_args" ("_applC" ("_position" Store) ("_position" i))
###           ("_applC" ("_position" Push) ("_position" Unit)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 30 of "$AFP/JinjaDCI/Compiler/Compiler2.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" compE\<^sub>2)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>1))
###       ("\<^const>List.append"
###         ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>2))
###         ("_list"
###           ("_args"
###             ("_applC" ("_position" Putfield)
###               ("_cargs" ("_position" F) ("_position" D)))
###             ("_applC" ("_position" Push) ("_position" Unit))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>2)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>1))
###       ("\<^const>List.append"
###         ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>2))
###         ("_list"
###           ("_args"
###             ("_applC" ("_position" Putfield)
###               ("_cargs" ("_position" F) ("_position" D)))
###             ("_applC" ("_position" Push) ("_position" Unit))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>2)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>1))
###       ("\<^const>List.append"
###         ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>2))
###         ("_list"
###           ("_args"
###             ("_applC" ("_position" Putfield)
###               ("_cargs" ("_position" F) ("_position" D)))
###             ("_applC" ("_position" Push) ("_position" Unit))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 32 of "$AFP/JinjaDCI/Compiler/Compiler2.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" compE\<^sub>2)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>2))
###       ("_list"
###         ("_args"
###           ("_applC" ("_position" Putstatic)
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" F) ("_position" D))))
###           ("_applC" ("_position" Push) ("_position" Unit)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>2)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>2))
###       ("_list"
###         ("_args"
###           ("_applC" ("_position" Putstatic)
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" F) ("_position" D))))
###           ("_applC" ("_position" Push) ("_position" Unit)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>2)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>2))
###       ("_list"
###         ("_args"
###           ("_applC" ("_position" Putstatic)
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" F) ("_position" D))))
###           ("_applC" ("_position" Push) ("_position" Unit)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### No equation for constructor "new"
### No equation for constructor "Cast"
### No equation for constructor "BinOp"
### No equation for constructor "Var"
### No equation for constructor "LAss"
### No equation for constructor "FAcc"
### No equation for constructor "SFAcc"
### No equation for constructor "FAss"
### No equation for constructor "SFAss"
### No equation for constructor "Call"
### No equation for constructor "SCall"
### No equation for constructor "Block"
### No equation for constructor "Seq"
### No equation for constructor "Cond"
### No equation for constructor "While"
### No equation for constructor "TryCatch"
### No equation for constructor "INIT"
### No equation for constructor "RI"
consts
  fin\<^sub>1 :: "char list exp => nat exp"
### theory "Draft.Compiler1"
### 0.474s elapsed time, 1.867s cpu time, 0.140s GC time
consts
  compE\<^sub>2 :: "nat exp => bytecode"
  compEs\<^sub>2 :: "nat exp list => bytecode"
### Ignoring duplicate safe introduction (intro!)
### ?P,?E \<turnstile>\<^sub>1 [] [::] []
### Ignoring duplicate safe introduction (intro!)
### ?P,?E \<turnstile>\<^sub>1 [] [::] []
### Ambiguous input (line 75 of "$AFP/JinjaDCI/Compiler/Compiler2.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compxE\<^sub>2)
###       ("_cargs"
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))
###         ("_cargs" ("_position" pc) ("_position" d))))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compxE\<^sub>2)
###         ("_cargs" ("_position" e\<^sub>1)
###           ("_cargs" ("_position" pc) ("_position" d))))
###       ("_applC" ("_position" compxE\<^sub>2)
###         ("_cargs" ("_position" e\<^sub>2)
###           ("_cargs"
###             ("\<^const>Groups.plus_class.plus" ("_position" pc)
###               ("_applC" ("_position" size)
###                 ("_applC" ("_position" compE\<^sub>2)
###                   ("_position" e\<^sub>1))))
###             ("\<^const>Groups.plus_class.plus" ("_position" d)
###               ("\<^const>Groups.one_class.one"))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compxE\<^sub>2)
###       ("_cargs"
###         ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))
###         ("_cargs" ("_position" pc) ("_position" d))))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compxE\<^sub>2)
###         ("_cargs" ("_position" e\<^sub>1)
###           ("_cargs" ("_position" pc) ("_position" d))))
###       ("_applC" ("_position" compxE\<^sub>2)
###         ("_cargs" ("_position" e\<^sub>2)
###           ("_cargs"
###             ("\<^const>Groups.plus_class.plus" ("_position" pc)
###               ("_applC" ("_position" size)
###                 ("_applC" ("_position" compE\<^sub>2)
###                   ("_position" e\<^sub>1))))
###             ("\<^const>Groups.plus_class.plus" ("_position" d)
###               ("\<^const>Groups.one_class.one"))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 77 of "$AFP/JinjaDCI/Compiler/Compiler2.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compxE\<^sub>2)
###       ("_cargs"
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))
###         ("_cargs" ("_position" pc) ("_position" d))))
###     ("_applC" ("_position" compxE\<^sub>2)
###       ("_cargs" ("_position" e\<^sub>2)
###         ("_cargs" ("_position" pc) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compxE\<^sub>2)
###       ("_cargs"
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))
###         ("_cargs" ("_position" pc) ("_position" d))))
###     ("_applC" ("_position" compxE\<^sub>2)
###       ("_cargs" ("_position" e\<^sub>2)
###         ("_cargs" ("_position" pc) ("_position" d))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  compxE\<^sub>2 :: "nat exp => nat => nat => ex_table"
  compxEs\<^sub>2 :: "nat exp list => nat => nat => ex_table"
### Ambiguous input (line 107 of "$AFP/JinjaDCI/Compiler/Compiler2.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" max_stack)
###       ("_updbind" ("_position" i) ("_position" e)))
###     ("_applC" ("_position" max_stack) ("_position" e))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" max_stack)
###       ("\<^const>Expr.exp.LAss" ("_position" i) ("_position" e)))
###     ("_applC" ("_position" max_stack) ("_position" e))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 132 of "$AFP/JinjaDCI/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" T)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 110 of "$AFP/JinjaDCI/Compiler/Compiler2.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" max_stack)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" max)
###         ("_cargs" ("_applC" ("_position" max_stack) ("_position" e\<^sub>1))
###           ("_applC" ("_position" max_stack) ("_position" e\<^sub>2))))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" max_stack)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" max)
###         ("_cargs" ("_applC" ("_position" max_stack) ("_position" e\<^sub>1))
###           ("_applC" ("_position" max_stack) ("_position" e\<^sub>2))))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" max_stack)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" max)
###         ("_cargs" ("_applC" ("_position" max_stack) ("_position" e\<^sub>1))
###           ("_applC" ("_position" max_stack) ("_position" e\<^sub>2))))
###       ("\<^const>Groups.one_class.one"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 111 of "$AFP/JinjaDCI/Compiler/Compiler2.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" max_stack)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" max_stack) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" max_stack)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("_applC" ("_position" max_stack) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" max_stack)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" max_stack) ("_position" e\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### No equation for constructor "INIT"
### No equation for constructor "RI"
consts
  max_stack :: "nat exp => nat"
  max_stacks :: "nat exp list => nat"
### Ambiguous input (line 133 of "$AFP/JinjaDCI/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" T)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Compiler2"
### 0.753s elapsed time, 2.886s cpu time, 0.302s GC time
### Ambiguous input (line 263 of "$AFP/JinjaDCI/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" sh) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" T)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" sh) ("_position" e\<^sub>2)
###             ("_position" T\<^sub>2)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P)
###               ("_position" T\<^sub>2) ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" sh) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" T)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" sh) ("_position" e\<^sub>2)
###             ("_position" T\<^sub>2)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P)
###               ("_position" T\<^sub>2) ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 267 of "$AFP/JinjaDCI/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" sh) ("_position" e\<^sub>1)
###         ("_position" NT)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" sh) ("_position" e\<^sub>2)
###           ("_position" T\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" sh) ("_position" e\<^sub>1)
###         ("_position" NT)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" sh) ("_position" e\<^sub>2)
###           ("_position" T\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 271 of "$AFP/JinjaDCI/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" sh) ("_position" e\<^sub>2)
###         ("_position" T\<^sub>2)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" T)
###           ("_position" D)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T\<^sub>2)
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" sh) ("_position" e\<^sub>2)
###         ("_position" T\<^sub>2)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" T)
###           ("_position" D)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T\<^sub>2)
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "WTrt\<^sub>1", "WTrts\<^sub>1"
  Proving monotonicity ...
### Ignoring duplicate safe introduction (intro!)
### ?P,?E,?h,?sh \<turnstile>\<^sub>1 [] [:] []
### Ignoring duplicate safe introduction (intro!)
### ?P,?E,?h,?sh \<turnstile>\<^sub>1 [] [:] []
### Ambiguous input (line 363 of "$AFP/JinjaDCI/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1WellForm.WTrt2\<^sub>1" ("_position" P) ("_position" E)
###     ("_position" h) ("_position" sh)
###     ("\<^const>Expr.exp.FAss" ("_position" e) ("_position" F)
###       ("_position" D) ("_position" v))
###     ("_position" T)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1WellForm.WTrt2\<^sub>1" ("_position" P) ("_position" E)
###     ("_position" h) ("_position" sh)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###         ("_position" D))
###       ("_position" v))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 364 of "$AFP/JinjaDCI/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1WellForm.WTrt2\<^sub>1" ("_position" P) ("_position" E)
###     ("_position" h) ("_position" sh)
###     ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###       ("_position" D) ("_position" v))
###     ("_position" T)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1WellForm.WTrt2\<^sub>1" ("_position" P) ("_position" E)
###     ("_position" h) ("_position" sh)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_position" v))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order:
  "case_sum (%p. size (snd p)) (%p. size_list size (snd p)) <*mlex*> {}"
### Ambiguous input (line 195 of "$AFP/JinjaDCI/J/EConform.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>bconfs" ("_position" P) ("_position" sh) ("_position" es)
###     ("_position" b))
###   ("\<^const>HOL.implies" ("_position" b)
###     ("\<^const>HOL.Ex_binder" ("_position" C)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" icheck)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C)
###               ("_applC" ("_position" the)
###                 ("_applC" ("_position" ss_exps) ("_position" es))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" curr_inits)
###               ("_cargs" ("_position" P) ("_position" es)))
###             ("_applC" ("_position" Some) ("_position" C)))
###           ("_applC" ("_position" initPD)
###             ("_cargs" ("_position" sh) ("_position" C))))))))
### ("\<^const>Pure.eq"
###   ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###     ("_position" es) ("_position" b))
###   ("\<^const>HOL.implies" ("_position" b)
###     ("\<^const>HOL.Ex_binder" ("_position" C)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" icheck)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C)
###               ("_applC" ("_position" the)
###                 ("_applC" ("_position" ss_exps) ("_position" es))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" curr_inits)
###               ("_cargs" ("_position" P) ("_position" es)))
###             ("_applC" ("_position" Some) ("_position" C)))
###           ("_applC" ("_position" initPD)
###             ("_cargs" ("_position" sh) ("_position" C))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 202 of "$AFP/JinjaDCI/J/EConform.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" True)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" val_of) ("_position" e))
###       ("_position" None))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" True)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" val_of) ("_position" e))
###       ("_position" None))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 206 of "$AFP/JinjaDCI/J/EConform.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" es) ("_position" True)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" map_vals_of) ("_position" es))
###       ("_position" None))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" es) ("_position" True)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" map_vals_of) ("_position" es))
###       ("_position" None))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 210 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" Cast)
###         ("_cargs" ("_position" C) ("_position" e)))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" Cast)
###         ("_cargs" ("_position" C) ("_position" e)))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" Cast)
###         ("_cargs" ("_position" C) ("_position" e)))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" Cast)
###         ("_cargs" ("_position" C) ("_position" e)))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 214 of "$AFP/JinjaDCI/J/EConform.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.BinOp" ("_position" e1) ("_position" bop)
###         ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.BinOp" ("_position" e1) ("_position" bop)
###         ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.BinOp" ("_position" e1) ("_position" bop)
###         ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.BinOp" ("_position" e1) ("_position" bop)
###         ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.BinOp" ("_position" e1) ("_position" bop)
###         ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.BinOp" ("_position" e1) ("_position" bop)
###         ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.BinOp" ("_position" e1) ("_position" bop)
###         ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.BinOp" ("_position" e1) ("_position" bop)
###         ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 219 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" LAss)
###         ("_cargs" ("_position" V) ("_position" e)))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" LAss)
###         ("_cargs" ("_position" V) ("_position" e)))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" LAss)
###         ("_cargs" ("_position" V) ("_position" e)))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" LAss)
###         ("_cargs" ("_position" V) ("_position" e)))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 223 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###         ("_position" D))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###         ("_position" D))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###         ("_position" D))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###         ("_position" D))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 227 of "$AFP/JinjaDCI/J/EConform.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" FAss)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" D) ("_position" e2)))))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" FAss)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" D) ("_position" e2)))))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" FAss)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" D) ("_position" e2)))))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" FAss)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" D) ("_position" e2)))))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" FAss)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" D) ("_position" e2)))))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" FAss)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" D) ("_position" e2)))))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" FAss)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" D) ("_position" e2)))))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" FAss)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" D) ("_position" e2)))))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 232 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" val_of) ("_position" e2))
###       ("_position" None)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.iff"
###       ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###         ("_applC" ("_position" SFAss)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" F)
###               ("_cargs" ("_position" D) ("_position" e2)))))
###         ("_position" b))
###       ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###         ("_position" e2) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" val_of) ("_position" e2))
###       ("_position" None)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.iff"
###       ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###         ("_applC" ("_position" SFAss)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" F)
###               ("_cargs" ("_position" D) ("_position" e2)))))
###         ("_position" b))
###       ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###         ("_position" e2) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" val_of) ("_position" e2))
###       ("_position" None)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.iff"
###       ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###         ("_applC" ("_position" SFAss)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" F)
###               ("_cargs" ("_position" D) ("_position" e2)))))
###         ("_position" b))
###       ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###         ("_position" e2) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" val_of) ("_position" e2))
###       ("_position" None)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.iff"
###       ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###         ("_applC" ("_position" SFAss)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" F)
###               ("_cargs" ("_position" D) ("_position" e2)))))
###         ("_position" b))
###       ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###         ("_position" e2) ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 236 of "$AFP/JinjaDCI/J/EConform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" map)
###         ("_cargs" ("_position" Val) ("_position" vs)))
###       ("_position" b))
###     ("\<^const>HOL.Not" ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" map)
###         ("_cargs" ("_position" Val) ("_position" vs)))
###       ("_position" b))
###     ("\<^const>HOL.Not" ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 240 of "$AFP/JinjaDCI/J/EConform.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Call" ("_position" e) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Call" ("_position" e) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Call" ("_position" e) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Call" ("_position" e) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Call" ("_position" e) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Call" ("_position" e) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Call" ("_position" e) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Call" ("_position" e) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 258 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.SCall" ("_position" C) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" es) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.SCall" ("_position" C) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" es) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.SCall" ("_position" C) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" es) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.SCall" ("_position" C) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" es) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 273 of "$AFP/JinjaDCI/J/EConform.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 289 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss" ("_position" V)
###             ("_applC" ("_position" Val) ("_position" v)))
###           ("_position" e\<^sub>2)))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e\<^sub>2) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss" ("_position" V)
###             ("_applC" ("_position" Val) ("_position" v)))
###           ("_position" e\<^sub>2)))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e\<^sub>2) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss" ("_position" V)
###             ("_applC" ("_position" Val) ("_position" v)))
###           ("_position" e\<^sub>2)))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e\<^sub>2) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss" ("_position" V)
###             ("_applC" ("_position" Val) ("_position" v)))
###           ("_position" e\<^sub>2)))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e\<^sub>2) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 293 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 297 of "$AFP/JinjaDCI/J/EConform.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e1) ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_case_syntax"
###             ("_applC" ("_position" lass_val_of) ("_position" e1))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" p))
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e2) ("_position" b)))
###               ("_case1" ("_position" None)
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e1) ("_position" b))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e1) ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_case_syntax"
###             ("_applC" ("_position" lass_val_of) ("_position" e1))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" p))
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e2) ("_position" b)))
###               ("_case1" ("_position" None)
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e1) ("_position" b))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e1) ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_case_syntax"
###             ("_applC" ("_position" lass_val_of) ("_position" e1))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" p))
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e2) ("_position" b)))
###               ("_case1" ("_position" None)
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e1) ("_position" b))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e1) ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_case_syntax"
###             ("_applC" ("_position" lass_val_of) ("_position" e1))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" p))
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e2) ("_position" b)))
###               ("_case1" ("_position" None)
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e1) ("_position" b))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e1) ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_case_syntax"
###             ("_applC" ("_position" lass_val_of) ("_position" e1))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" p))
###                 ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###                   ("_position" e2) ("_position" b)))
###               ("_case1" ("_position" None)
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e1) ("_position" b))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e1) ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_case_syntax"
###             ("_applC" ("_position" lass_val_of) ("_position" e1))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" p))
###                 ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###                   ("_position" e2) ("_position" b)))
###               ("_case1" ("_position" None)
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e1) ("_position" b))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e1) ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_case_syntax"
###             ("_applC" ("_position" lass_val_of) ("_position" e1))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" p))
###                 ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###                   ("_position" e2) ("_position" b)))
###               ("_case1" ("_position" None)
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e1) ("_position" b))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e1) ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_case_syntax"
###             ("_applC" ("_position" lass_val_of) ("_position" e1))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" p))
###                 ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###                   ("_position" e2) ("_position" b)))
###               ("_case1" ("_position" None)
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e1) ("_position" b))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e1) ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_case_syntax"
###             ("_applC" ("_position" lass_val_of) ("_position" e1))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" p))
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e2) ("_position" b)))
###               ("_case1" ("_position" None)
###                 ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###                   ("_position" e1) ("_position" b))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e1) ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_case_syntax"
###             ("_applC" ("_position" lass_val_of) ("_position" e1))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" p))
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e2) ("_position" b)))
###               ("_case1" ("_position" None)
###                 ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###                   ("_position" e1) ("_position" b))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 304 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Cond" ("_position" b) ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" b'))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" b) ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Cond" ("_position" b) ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" b'))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" b) ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Cond" ("_position" b) ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" b'))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" b) ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Cond" ("_position" b) ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" b'))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" b) ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 314 of "$AFP/JinjaDCI/J/EConform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.While" ("_position" b) ("_position" e))
###       ("_position" b'))
###     ("\<^const>HOL.Not" ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.While" ("_position" b) ("_position" e))
###       ("_position" b'))
###     ("\<^const>HOL.Not" ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 318 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" throw) ("_position" e)) ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" throw) ("_position" e)) ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" throw) ("_position" e)) ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" throw) ("_position" e)) ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 322 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e\<^sub>1) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e\<^sub>1) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e\<^sub>1) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e\<^sub>1) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 326 of "$AFP/JinjaDCI/J/EConform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.INIT" ("_position" C) ("_position" Cs)
###         ("_position" b') ("_position" e))
###       ("_position" b))
###     ("\<^const>HOL.Not" ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.INIT" ("_position" C) ("_position" Cs)
###         ("_position" b') ("_position" e))
###       ("_position" b))
###     ("\<^const>HOL.Not" ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 330 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.RI" ("_position" C) ("_position" e)
###         ("_position" Cs) ("_position" e'))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.RI" ("_position" C) ("_position" e)
###         ("_position" Cs) ("_position" e'))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.RI" ("_position" C) ("_position" e)
###         ("_position" Cs) ("_position" e'))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.RI" ("_position" C) ("_position" e)
###         ("_position" Cs) ("_position" e'))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 334 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>List.append"
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" Val) ("_position" vs)))
###         ("\<^const>List.list.Cons"
###           ("_applC" ("_position" throw) ("_position" e)) ("_position" es')))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>List.append"
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" Val) ("_position" vs)))
###         ("\<^const>List.list.Cons"
###           ("_applC" ("_position" throw) ("_position" e)) ("_position" es')))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>List.append"
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" Val) ("_position" vs)))
###         ("\<^const>List.list.Cons"
###           ("_applC" ("_position" throw) ("_position" e)) ("_position" es')))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>List.append"
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" Val) ("_position" vs)))
###         ("\<^const>List.list.Cons"
###           ("_applC" ("_position" throw) ("_position" e)) ("_position" es')))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.EConform"
### 4.964s elapsed time, 16.333s cpu time, 1.127s GC time
Loading theory "Draft.Progress" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.Equivalence" via "Draft.TypeSafe")
### Ambiguous input (line 414 of "$AFP/JinjaDCI/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<B>)
###       ("_cargs"
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))
###         ("_position" i)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" \<B>)
###         ("_cargs" ("_position" e\<^sub>1) ("_position" i)))
###       ("_applC" ("_position" \<B>)
###         ("_cargs" ("_position" e\<^sub>2) ("_position" i))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<B>)
###       ("_cargs"
###         ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))
###         ("_position" i)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" \<B>)
###         ("_cargs" ("_position" e\<^sub>1) ("_position" i)))
###       ("_applC" ("_position" \<B>)
###         ("_cargs" ("_position" e\<^sub>2) ("_position" i))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 415 of "$AFP/JinjaDCI/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<B>)
###       ("_cargs"
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))
###         ("_position" i)))
###     ("_applC" ("_position" \<B>)
###       ("_cargs" ("_position" e\<^sub>2) ("_position" i)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<B>)
###       ("_cargs"
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))
###         ("_position" i)))
###     ("_applC" ("_position" \<B>)
###       ("_cargs" ("_position" e\<^sub>2) ("_position" i)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  \<B> :: "nat exp => nat => bool"
  \<B>s :: "nat exp list => nat => bool"
### Ambiguous input (line 433 of "$AFP/JinjaDCI/Compiler/J1WellForm.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J\<^sub>1_mdecl)
###     ("_cargs" ("_position" P) ("_position" C)))
###   ("_lambda"
###     ("_pattern" ("_position" M)
###       ("_patterns" ("_position" b)
###         ("_patterns" ("_position" Ts)
###           ("_patterns" ("_position" T) ("_position" body)))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.Not"
###         ("_applC" ("_position" sub_RI) ("_position" body)))
###       ("_case_syntax" ("_position" b)
###         ("_case2"
###           ("_case1" ("_position" NonStatic)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.Ex_binder" ("_position" T')
###                 ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P)
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" Class) ("_position" C))
###                     ("_position" Ts))
###                   ("_position" body)
###                   ("\<^const>HOL.conj" ("_position" T')
###                     ("\<^const>TypeRel.widen" ("_position" P)
###                       ("_position" T') ("_position" T)))))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" \<D>)
###                   ("_cargs" ("_position" body)
###                     ("\<^const>Option.option.Some"
###                       ("\<^const>Set_Interval.ord_class.atMost"
###                         ("_applC" ("_position" size) ("_position" Ts))))))
###                 ("_applC" ("_position" \<B>)
###                   ("_cargs" ("_position" body)
###                     ("\<^const>Groups.plus_class.plus"
###                       ("_applC" ("_position" size) ("_position" Ts))
###                       ("\<^const>Groups.one_class.one")))))))
###           ("_case1" ("_position" Static)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.Ex_binder" ("_position" T')
###                 ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P)
###                   ("_position" Ts) ("_position" body)
###                   ("\<^const>HOL.conj" ("_position" T')
###                     ("\<^const>TypeRel.widen" ("_position" P)
###                       ("_position" T') ("_position" T)))))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" \<D>)
###                   ("_cargs" ("_position" body)
###                     ("\<^const>Option.option.Some"
###                       ("\<^const>Set_Interval.ord_class.lessThan"
###                         ("_applC" ("_position" size) ("_position" Ts))))))
###                 ("_applC" ("_position" \<B>)
###                   ("_cargs" ("_position" body)
###                     ("_applC" ("_position" size) ("_position" Ts))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J\<^sub>1_mdecl)
###     ("_cargs" ("_position" P) ("_position" C)))
###   ("_lambda"
###     ("_pattern" ("_position" M)
###       ("_patterns" ("_position" b)
###         ("_patterns" ("_position" Ts)
###           ("_patterns" ("_position" T) ("_position" body)))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.Not"
###         ("_applC" ("_position" sub_RI) ("_position" body)))
###       ("_case_syntax" ("_position" b)
###         ("_case2"
###           ("_case1" ("_position" NonStatic)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.Ex_binder" ("_position" T')
###                 ("\<^const>HOL.conj"
###                   ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P)
###                     ("\<^const>List.list.Cons"
###                       ("_applC" ("_position" Class) ("_position" C))
###                       ("_position" Ts))
###                     ("_position" body) ("_position" T'))
###                   ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                     ("_position" T))))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" \<D>)
###                   ("_cargs" ("_position" body)
###                     ("\<^const>Option.option.Some"
###                       ("\<^const>Set_Interval.ord_class.atMost"
###                         ("_applC" ("_position" size) ("_position" Ts))))))
###                 ("_applC" ("_position" \<B>)
###                   ("_cargs" ("_position" body)
###                     ("\<^const>Groups.plus_class.plus"
###                       ("_applC" ("_position" size) ("_position" Ts))
###                       ("\<^const>Groups.one_class.one")))))))
###           ("_case1" ("_position" Static)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.Ex_binder" ("_position" T')
###                 ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P)
###                   ("_position" Ts) ("_position" body)
###                   ("\<^const>HOL.conj" ("_position" T')
###                     ("\<^const>TypeRel.widen" ("_position" P)
###                       ("_position" T') ("_position" T)))))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" \<D>)
###                   ("_cargs" ("_position" body)
###                     ("\<^const>Option.option.Some"
###                       ("\<^const>Set_Interval.ord_class.lessThan"
###                         ("_applC" ("_position" size) ("_position" Ts))))))
###                 ("_applC" ("_position" \<B>)
###                   ("_cargs" ("_position" body)
###                     ("_applC" ("_position" size) ("_position" Ts))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J\<^sub>1_mdecl)
###     ("_cargs" ("_position" P) ("_position" C)))
###   ("_lambda"
###     ("_pattern" ("_position" M)
###       ("_patterns" ("_position" b)
###         ("_patterns" ("_position" Ts)
###           ("_patterns" ("_position" T) ("_position" body)))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.Not"
###         ("_applC" ("_position" sub_RI) ("_position" body)))
###       ("_case_syntax" ("_position" b)
###         ("_case2"
###           ("_case1" ("_position" NonStatic)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.Ex_binder" ("_position" T')
###                 ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P)
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" Class) ("_position" C))
###                     ("_position" Ts))
###                   ("_position" body)
###                   ("\<^const>HOL.conj" ("_position" T')
###                     ("\<^const>TypeRel.widen" ("_position" P)
###                       ("_position" T') ("_position" T)))))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" \<D>)
###                   ("_cargs" ("_position" body)
###                     ("\<^const>Option.option.Some"
###                       ("\<^const>Set_Interval.ord_class.atMost"
###                         ("_applC" ("_position" size) ("_position" Ts))))))
###                 ("_applC" ("_position" \<B>)
###                   ("_cargs" ("_position" body)
###                     ("\<^const>Groups.plus_class.plus"
###                       ("_applC" ("_position" size) ("_position" Ts))
###                       ("\<^const>Groups.one_class.one")))))))
###           ("_case1" ("_position" Static)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.Ex_binder" ("_position" T')
###                 ("\<^const>HOL.conj"
###                   ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P)
###                     ("_position" Ts) ("_position" body) ("_position" T'))
###                   ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                     ("_position" T))))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" \<D>)
###                   ("_cargs" ("_position" body)
###                     ("\<^const>Option.option.Some"
###                       ("\<^const>Set_Interval.ord_class.lessThan"
###                         ("_applC" ("_position" size) ("_position" Ts))))))
###                 ("_applC" ("_position" \<B>)
###                   ("_cargs" ("_position" body)
###                     ("_applC" ("_position" size) ("_position" Ts))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J\<^sub>1_mdecl)
###     ("_cargs" ("_position" P) ("_position" C)))
###   ("_lambda"
###     ("_pattern" ("_position" M)
###       ("_patterns" ("_position" b)
###         ("_patterns" ("_position" Ts)
###           ("_patterns" ("_position" T) ("_position" body)))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.Not"
###         ("_applC" ("_position" sub_RI) ("_position" body)))
###       ("_case_syntax" ("_position" b)
###         ("_case2"
###           ("_case1" ("_position" NonStatic)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.Ex_binder" ("_position" T')
###                 ("\<^const>HOL.conj"
###                   ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P)
###                     ("\<^const>List.list.Cons"
###                       ("_applC" ("_position" Class) ("_position" C))
###                       ("_position" Ts))
###                     ("_position" body) ("_position" T'))
###                   ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                     ("_position" T))))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" \<D>)
###                   ("_cargs" ("_position" body)
###                     ("\<^const>Option.option.Some"
###                       ("\<^const>Set_Interval.ord_class.atMost"
###                         ("_applC" ("_position" size) ("_position" Ts))))))
###                 ("_applC" ("_position" \<B>)
###                   ("_cargs" ("_position" body)
###                     ("\<^const>Groups.plus_class.plus"
###                       ("_applC" ("_position" size) ("_position" Ts))
###                       ("\<^const>Groups.one_class.one")))))))
###           ("_case1" ("_position" Static)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.Ex_binder" ("_position" T')
###                 ("\<^const>HOL.conj"
###                   ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P)
###                     ("_position" Ts) ("_position" body) ("_position" T'))
###                   ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                     ("_position" T))))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" \<D>)
###                   ("_cargs" ("_position" body)
###                     ("\<^const>Option.option.Some"
###                       ("\<^const>Set_Interval.ord_class.lessThan"
###                         ("_applC" ("_position" size) ("_position" Ts))))))
###                 ("_applC" ("_position" \<B>)
###                   ("_cargs" ("_position" body)
###                     ("_applC" ("_position" size) ("_position" Ts))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 443 of "$AFP/JinjaDCI/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J\<^sub>1_mdecl)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" C)
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" NonStatic)
###             ("_tuple_args" ("_position" Ts)
###               ("_tuple_args" ("_position" T)
###                 ("_tuple_arg" ("_position" body)))))))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.Not" ("_applC" ("_position" sub_RI) ("_position" body)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.Ex_binder" ("_position" T')
###         ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P)
###           ("\<^const>List.list.Cons"
###             ("_applC" ("_position" Class) ("_position" C)) ("_position" Ts))
###           ("_position" body)
###           ("\<^const>HOL.conj" ("_position" T')
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" \<D>)
###           ("_cargs" ("_position" body)
###             ("\<^const>Option.option.Some"
###               ("\<^const>Set_Interval.ord_class.atMost"
###                 ("_applC" ("_position" size) ("_position" Ts))))))
###         ("_applC" ("_position" \<B>)
###           ("_cargs" ("_position" body)
###             ("\<^const>Groups.plus_class.plus"
###               ("_applC" ("_position" size) ("_position" Ts))
###               ("\<^const>Groups.one_class.one"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J\<^sub>1_mdecl)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" C)
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" NonStatic)
###             ("_tuple_args" ("_position" Ts)
###               ("_tuple_args" ("_position" T)
###                 ("_tuple_arg" ("_position" body)))))))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.Not" ("_applC" ("_position" sub_RI) ("_position" body)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.Ex_binder" ("_position" T')
###         ("\<^const>HOL.conj"
###           ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P)
###             ("\<^const>List.list.Cons"
###               ("_applC" ("_position" Class) ("_position" C))
###               ("_position" Ts))
###             ("_position" body) ("_position" T'))
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" \<D>)
###           ("_cargs" ("_position" body)
###             ("\<^const>Option.option.Some"
###               ("\<^const>Set_Interval.ord_class.atMost"
###                 ("_applC" ("_position" size) ("_position" Ts))))))
###         ("_applC" ("_position" \<B>)
###           ("_cargs" ("_position" body)
###             ("\<^const>Groups.plus_class.plus"
###               ("_applC" ("_position" size) ("_position" Ts))
###               ("\<^const>Groups.one_class.one"))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 450 of "$AFP/JinjaDCI/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J\<^sub>1_mdecl)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" C)
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" Static)
###             ("_tuple_args" ("_position" Ts)
###               ("_tuple_args" ("_position" T)
###                 ("_tuple_arg" ("_position" body)))))))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.Not" ("_applC" ("_position" sub_RI) ("_position" body)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.Ex_binder" ("_position" T')
###         ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P) ("_position" Ts)
###           ("_position" body)
###           ("\<^const>HOL.conj" ("_position" T')
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" \<D>)
###           ("_cargs" ("_position" body)
###             ("\<^const>Option.option.Some"
###               ("\<^const>Set_Interval.ord_class.lessThan"
###                 ("_applC" ("_position" size) ("_position" Ts))))))
###         ("_applC" ("_position" \<B>)
###           ("_cargs" ("_position" body)
###             ("_applC" ("_position" size) ("_position" Ts))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J\<^sub>1_mdecl)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" C)
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" Static)
###             ("_tuple_args" ("_position" Ts)
###               ("_tuple_args" ("_position" T)
###                 ("_tuple_arg" ("_position" body)))))))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.Not" ("_applC" ("_position" sub_RI) ("_position" body)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.Ex_binder" ("_position" T')
###         ("\<^const>HOL.conj"
###           ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P) ("_position" Ts)
###             ("_position" body) ("_position" T'))
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" \<D>)
###           ("_cargs" ("_position" body)
###             ("\<^const>Option.option.Some"
###               ("\<^const>Set_Interval.ord_class.lessThan"
###                 ("_applC" ("_position" size) ("_position" Ts))))))
###         ("_applC" ("_position" \<B>)
###           ("_cargs" ("_position" body)
###             ("_applC" ("_position" size) ("_position" Ts))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.J1WellForm"
### 2.335s elapsed time, 7.033s cpu time, 0.604s GC time
Loading theory "Draft.Correctness2" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.TypeComp" via "Draft.Compiler")
Loading theory "Draft.Correctness1" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.TypeComp" via "Draft.Compiler")
### Ambiguous input (line 26 of "$AFP/JinjaDCI/Compiler/Correctness1.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" unmod)
###       ("_cargs"
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))
###         ("_position" i)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" unmod)
###         ("_cargs" ("_position" e\<^sub>1) ("_position" i)))
###       ("_applC" ("_position" unmod)
###         ("_cargs" ("_position" e\<^sub>2) ("_position" i))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" unmod)
###       ("_cargs"
###         ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))
###         ("_position" i)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" unmod)
###         ("_cargs" ("_position" e\<^sub>1) ("_position" i)))
###       ("_applC" ("_position" unmod)
###         ("_cargs" ("_position" e\<^sub>2) ("_position" i))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 27 of "$AFP/JinjaDCI/Compiler/Correctness1.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" unmod)
###       ("_cargs"
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))
###         ("_position" i)))
###     ("_applC" ("_position" unmod)
###       ("_cargs" ("_position" e\<^sub>2) ("_position" i)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" unmod)
###       ("_cargs"
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))
###         ("_position" i)))
###     ("_applC" ("_position" unmod)
###       ("_cargs" ("_position" e\<^sub>2) ("_position" i)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  unmod :: "nat exp => nat => bool"
  unmods :: "nat exp list => nat => bool"
### Ambiguous input (line 67 of "$AFP/JinjaDCI/Compiler/Correctness1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" set) ("_position" xs))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less_eq"
###           ("_applC" ("_position" size) ("_position" xs))
###           ("_applC" ("_position" size) ("_position" ys))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Map.map_le" ("_position" m\<^sub>1)
###         ("_MapUpd" ("_position" m\<^sub>2)
###           ("_maplets" ("_position" xs) ("_position" ys)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Map.map_le"
###         ("_MapUpd" ("_position" m\<^sub>1)
###           ("_maplet" ("_position" x) ("_position" y)))
###         ("_MapUpd" ("_position" m\<^sub>2)
###           ("_maplets" ("_position" xs)
###             ("_applC" ("_position" ys)
###               ("_list"
###                 ("\<^const>Expr.exp.LAss"
###                   ("_applC" ("_position" last_index)
###                     ("_cargs" ("_position" xs) ("_position" x)))
###                   ("_position" y))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" set) ("_position" xs))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less_eq"
###           ("_applC" ("_position" size) ("_position" xs))
###           ("_applC" ("_position" size) ("_position" ys))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Map.map_le" ("_position" m\<^sub>1)
###         ("_MapUpd" ("_position" m\<^sub>2)
###           ("_maplets" ("_position" xs) ("_position" ys)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Map.map_le"
###         ("_MapUpd" ("_position" m\<^sub>1)
###           ("_maplet" ("_position" x) ("_position" y)))
###         ("_MapUpd" ("_position" m\<^sub>2)
###           ("_maplets" ("_position" xs)
###             ("_LUpdate" ("_position" ys)
###               ("_lupdbind"
###                 ("_applC" ("_position" last_index)
###                   ("_cargs" ("_position" xs) ("_position" x)))
###                 ("_position" y)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 78 of "$AFP/JinjaDCI/Compiler/Correctness1.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Map.map_le"
###     ("_applC" ("_position" l')
###       ("\<^const>Expr.exp.LAss" ("_position" V)
###         ("_applC" ("_position" l) ("_position" V))))
###     ("_Map" ("_maplets" ("_position" Vs) ("_position" ls')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Map.map_le"
###     ("_Update" ("_position" l')
###       ("_updbind" ("_position" V)
###         ("_applC" ("_position" l) ("_position" V))))
###     ("_Map" ("_maplets" ("_position" Vs) ("_position" ls')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 75 of "$AFP/JinjaDCI/J/Progress.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("\<^const>Objects.typeof_h" ("_position" h))
###           ("_position" v))
###         ("_applC" ("_position" Some) ("_position" T\<^sub>1))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.widen" ("_position" P) ("_position" T\<^sub>1)
###           ("_position" T)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WTrt2'" ("_position" P)
###             ("_MapUpd" ("_position" E)
###               ("_maplet" ("_position" V) ("_position" T)))
###             ("_position" h) ("_position" sh) ("_position" e\<^sub>2)
###             ("_position" T\<^sub>2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###       ("_position" sh)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("\<^const>Objects.typeof_h" ("_position" h))
###           ("_position" v))
###         ("_applC" ("_position" Some) ("_position" T\<^sub>1))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.widen" ("_position" P) ("_position" T\<^sub>1)
###           ("_position" T)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WTrt2'" ("_position" P)
###             ("_MapUpd" ("_position" E)
###               ("_maplet" ("_position" V) ("_position" T)))
###             ("_position" h) ("_position" sh) ("_position" e\<^sub>2)
###             ("_position" T\<^sub>2))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###       ("_position" sh)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v))
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 58 of "$AFP/JinjaDCI/J/Progress.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###         ("_position" sh) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" T)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###             ("_position" sh) ("_position" e\<^sub>2)
###             ("_position" T\<^sub>2)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P)
###               ("_position" T\<^sub>2) ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###       ("_position" sh)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###         ("_position" sh) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" T)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###             ("_position" sh) ("_position" e\<^sub>2)
###             ("_position" T\<^sub>2)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P)
###               ("_position" T\<^sub>2) ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###       ("_position" sh)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 61 of "$AFP/JinjaDCI/J/Progress.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###         ("_position" sh) ("_position" e\<^sub>1) ("_position" NT)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###           ("_position" sh) ("_position" e\<^sub>2)
###           ("_position" T\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###       ("_position" sh)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###         ("_position" sh) ("_position" e\<^sub>1) ("_position" NT)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###           ("_position" sh) ("_position" e\<^sub>2)
###           ("_position" T\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###       ("_position" sh)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 62 of "$AFP/JinjaDCI/J/Progress.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" T)
###         ("_position" D)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###           ("_position" sh) ("_position" e\<^sub>2) ("_position" T\<^sub>2)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T\<^sub>2)
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###       ("_position" sh)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" T)
###         ("_position" D)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###           ("_position" sh) ("_position" e\<^sub>2) ("_position" T\<^sub>2)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T\<^sub>2)
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2'" ("_position" P) ("_position" E) ("_position" h)
###       ("_position" sh)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Correctness1"
### 0.440s elapsed time, 1.406s cpu time, 0.243s GC time
Proofs for inductive predicate(s) "WTrt'", "WTrts'"
  Proving monotonicity ...
### Ambiguous input (line 208 of "$AFP/JinjaDCI/Compiler/Correctness2.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^fixed>dummyx" ("_position" P) ("_position" C) ("_position" M)
###       ("_position" xt) ("_position" I) ("_position" d))
###     ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###       ("_position" M) ("_position" xt) ("_position" I) ("_position" d))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>dummyx" ("_position" P) ("_position" C) ("_position" M)
###     ("\<^const>Correctness2.before"
###       ("\<^const>Fields.inverse_class.inverse_divide" ("_position" xt)
###         ("_position" I))
###       ("\<^const>HOL.iff" ("_position" d) ("_position" P)) ("_position" C)
###       ("_position" M) ("_position" xt))
###     ("_position" I) ("_position" d)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>dummyx" ("_position" P) ("_position" C) ("_position" M)
###     ("_position" xt)
###     ("\<^const>Correctness2.before" ("_position" I)
###       ("\<^const>HOL.iff" ("_position" d) ("_position" P)) ("_position" C)
###       ("_position" M)
###       ("\<^const>Fields.inverse_class.inverse_divide" ("_position" xt)
###         ("_position" I)))
###     ("_position" d)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 232 of "$AFP/JinjaDCI/Compiler/Correctness2.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###       ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>List.append" ("_position" xt\<^sub>1)
###           ("_position" xt\<^sub>2))
###         ("_position" I) ("_position" d))
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M) ("_position" xt\<^sub>1)
###         ("\<^const>Correctness2.at"
###           ("\<^const>Groups.minus_class.minus" ("_position" I)
###             ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###           ("\<^const>HOL.conj" ("_position" d)
###             ("\<^const>HOL.conj"
###               ("\<^const>Correctness2.beforex" ("_position" P)
###                 ("_position" C) ("_position" M) ("_position" xt\<^sub>2)
###                 ("\<^const>Groups.minus_class.minus" ("_position" I)
###                   ("_applC" ("_position" pcs) ("_position" xt\<^sub>1)))
###                 ("_position" d))
###               ("_position" P)))
###           ("_position" C) ("_position" M)
###           ("\<^const>List.append" ("_position" xt\<^sub>1)
###             ("\<^const>Fields.inverse_class.inverse_divide"
###               ("_position" xt\<^sub>2) ("_position" I))))
###         ("_position" d)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###       ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>List.append" ("_position" xt\<^sub>1)
###           ("_position" xt\<^sub>2))
###         ("_position" I) ("_position" d))
###       ("\<^const>HOL.conj"
###         ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" xt\<^sub>1)
###           ("\<^const>Groups.minus_class.minus" ("_position" I)
###             ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###           ("_position" d))
###         ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" xt\<^sub>2)
###           ("\<^const>Correctness2.at"
###             ("\<^const>Groups.minus_class.minus" ("_position" I)
###               ("_applC" ("_position" pcs) ("_position" xt\<^sub>1)))
###             ("\<^const>HOL.conj" ("_position" d) ("_position" P))
###             ("_position" C) ("_position" M)
###             ("\<^const>List.append" ("_position" xt\<^sub>1)
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_position" xt\<^sub>2) ("_position" I))))
###           ("_position" d))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###       ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>List.append" ("_position" xt\<^sub>1)
###           ("_position" xt\<^sub>2))
###         ("_position" I) ("_position" d))
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>Correctness2.before"
###           ("\<^const>Groups.minus_class.minus"
###             ("\<^const>Fields.inverse_class.inverse_divide"
###               ("_position" xt\<^sub>1) ("_position" I))
###             ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###           ("\<^const>HOL.conj" ("_position" d) ("_position" P))
###           ("_position" C) ("_position" M) ("_position" xt\<^sub>2))
###         ("\<^const>Correctness2.at"
###           ("\<^const>Groups.minus_class.minus" ("_position" I)
###             ("_applC" ("_position" pcs) ("_position" xt\<^sub>1)))
###           ("\<^const>HOL.conj" ("_position" d) ("_position" P))
###           ("_position" C) ("_position" M)
###           ("\<^const>List.append" ("_position" xt\<^sub>1)
###             ("\<^const>Fields.inverse_class.inverse_divide"
###               ("_position" xt\<^sub>2) ("_position" I))))
###         ("_position" d)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###       ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>List.append" ("_position" xt\<^sub>1)
###           ("_position" xt\<^sub>2))
###         ("_position" I) ("_position" d))
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>Correctness2.at"
###           ("\<^const>Groups.minus_class.minus"
###             ("\<^const>Fields.inverse_class.inverse_divide"
###               ("_position" xt\<^sub>1) ("_position" I))
###             ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###           ("\<^const>HOL.conj" ("_position" d)
###             ("\<^const>HOL.conj"
###               ("\<^const>Correctness2.beforex" ("_position" P)
###                 ("_position" C) ("_position" M) ("_position" xt\<^sub>2)
###                 ("\<^const>Groups.minus_class.minus" ("_position" I)
###                   ("_applC" ("_position" pcs) ("_position" xt\<^sub>1)))
###                 ("_position" d))
###               ("_position" P)))
###           ("_position" C) ("_position" M)
###           ("\<^const>List.append" ("_position" xt\<^sub>1)
###             ("_position" xt\<^sub>2)))
###         ("_position" I) ("_position" d)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###       ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>List.append" ("_position" xt\<^sub>1)
###           ("_position" xt\<^sub>2))
###         ("_position" I) ("_position" d))
###       ("\<^const>HOL.conj"
###         ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" xt\<^sub>1)
###           ("\<^const>Correctness2.before"
###             ("\<^const>Groups.minus_class.minus" ("_position" I)
###               ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###             ("\<^const>HOL.conj" ("_position" d) ("_position" P))
###             ("_position" C) ("_position" M)
###             ("\<^const>Groups.minus_class.minus"
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_position" xt\<^sub>2) ("_position" I))
###               ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))))
###           ("_position" d))
###         ("\<^const>Correctness2.dummyx" ("_position" P) ("_position" C)
###           ("_position" M)
###           ("\<^const>List.append" ("_position" xt\<^sub>1)
###             ("_position" xt\<^sub>2))
###           ("_position" I) ("_position" d))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###       ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>List.append" ("_position" xt\<^sub>1)
###           ("_position" xt\<^sub>2))
###         ("_position" I) ("_position" d))
###       ("\<^const>HOL.conj"
###         ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" xt\<^sub>1)
###           ("\<^const>Groups.minus_class.minus" ("_position" I)
###             ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###           ("_position" d))
###         ("\<^const>HOL.conj"
###           ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###             ("_position" M) ("_position" xt\<^sub>2)
###             ("\<^const>Groups.minus_class.minus" ("_position" I)
###               ("_applC" ("_position" pcs) ("_position" xt\<^sub>1)))
###             ("_position" d))
###           ("\<^const>Correctness2.dummyx" ("_position" P) ("_position" C)
###             ("_position" M)
###             ("\<^const>List.append" ("_position" xt\<^sub>1)
###               ("_position" xt\<^sub>2))
###             ("_position" I) ("_position" d)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###       ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>List.append" ("_position" xt\<^sub>1)
###           ("_position" xt\<^sub>2))
###         ("_position" I) ("_position" d))
###       ("\<^const>HOL.conj"
###         ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###           ("_position" M)
###           ("\<^const>Correctness2.before"
###             ("\<^const>Groups.minus_class.minus"
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_position" xt\<^sub>1) ("_position" I))
###               ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###             ("\<^const>HOL.conj" ("_position" d) ("_position" P))
###             ("_position" C) ("_position" M) ("_position" xt\<^sub>2))
###           ("\<^const>Groups.minus_class.minus" ("_position" I)
###             ("_applC" ("_position" pcs) ("_position" xt\<^sub>1)))
###           ("_position" d))
###         ("\<^const>Correctness2.dummyx" ("_position" P) ("_position" C)
###           ("_position" M)
###           ("\<^const>List.append" ("_position" xt\<^sub>1)
###             ("_position" xt\<^sub>2))
###           ("_position" I) ("_position" d))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###       ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>List.append" ("_position" xt\<^sub>1)
###           ("_position" xt\<^sub>2))
###         ("_position" I) ("_position" d))
###       ("\<^const>HOL.conj"
###         ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" xt\<^sub>1)
###           ("\<^const>Groups.minus_class.minus" ("_position" I)
###             ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###           ("_position" d))
###         ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###           ("_position" M)
###           ("\<^const>Correctness2.at"
###             ("\<^const>Groups.minus_class.minus"
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_position" xt\<^sub>2) ("_position" I))
###               ("_applC" ("_position" pcs) ("_position" xt\<^sub>1)))
###             ("\<^const>HOL.conj" ("_position" d) ("_position" P))
###             ("_position" C) ("_position" M)
###             ("\<^const>List.append" ("_position" xt\<^sub>1)
###               ("_position" xt\<^sub>2)))
###           ("_position" I) ("_position" d))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 107 of "$AFP/JinjaDCI/J/Progress.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>HOL.conj"
###         ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" sh) ("_position" e\<^sub>1)
###           ("_position" T\<^sub>1))
###         ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" sh) ("_position" e\<^sub>2)
###           ("_position" T\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###     ("_position" h) ("_position" sh)
###     ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>HOL.conj"
###           ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" sh) ("_position" e\<^sub>1)
###             ("_position" T\<^sub>1))
###           ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" sh) ("_position" e\<^sub>2)
###             ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" sh) ("_position" e\<^sub>1)
###         ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###           ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" sh) ("_position" e\<^sub>2)
###             ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###     ("_position" h) ("_position" sh)
###     ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" sh) ("_position" e\<^sub>1)
###           ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###             ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###               ("_position" h) ("_position" sh) ("_position" e\<^sub>2)
###               ("_position" T\<^sub>2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 110 of "$AFP/JinjaDCI/J/Progress.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("_applC" ("_position" Val) ("_position" v)) ("_position" T))
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Objects.typeof_h" ("_position" h))
###         ("_position" v))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###     ("_position" h) ("_position" sh)
###     ("_applC" ("_position" Val) ("_position" v))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq"
###         ("_applC" ("\<^const>Objects.typeof_h" ("_position" h))
###           ("_position" v))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 113 of "$AFP/JinjaDCI/J/Progress.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("_applC" ("_position" Var) ("_position" v)) ("_position" T))
###     ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" v))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Progress.WTrt2'" ("_position" P) ("_position" E)
###     ("_position" h) ("_position" sh)
###     ("_applC" ("_position" Var) ("_position" v))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" v))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 167 of "$AFP/JinjaDCI/J/Progress.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh) ("_position" e) ("_position" T)))
###   ("\<^const>Pure.all_binder" ("_position" l)
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" \<D>)
###             ("_cargs" ("_position" e)
###               ("\<^const>Option.option.Some"
###                 ("_applC" ("_position" dom) ("_position" l))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###               ("_position" e) ("_position" b)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.Not"
###                 ("_applC" ("_position" final) ("_position" e)))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" e')
###             ("_idts" ("_position" s') ("_position" b')))
###           ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###             ("_tuple" ("_position" h)
###               ("_tuple_args" ("_position" l)
###                 ("_tuple_arg" ("_position" sh))))
###             ("_position" b) ("_position" e') ("_position" s')
###             ("_position" b')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh) ("_position" e) ("_position" T)))
###   ("\<^const>Pure.all_binder" ("_position" l)
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" \<D>)
###             ("_cargs" ("_position" e)
###               ("\<^const>Option.option.Some"
###                 ("_applC" ("_position" dom) ("_position" l))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###               ("_position" e) ("_position" b)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.Not"
###                 ("_applC" ("_position" final) ("_position" e)))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" e')
###             ("_idts" ("_position" s') ("_position" b')))
###           ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###             ("_tuple" ("_position" h)
###               ("_tuple_args" ("_position" l)
###                 ("_tuple_arg" ("_position" sh))))
###             ("_position" b) ("_position" e') ("_position" s')
###             ("_position" b')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 169 of "$AFP/JinjaDCI/J/Progress.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh) ("_position" es) ("_position" Ts)))
###   ("\<^const>Pure.all_binder" ("_position" l)
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" \<D>s)
###             ("_cargs" ("_position" es)
###               ("\<^const>Option.option.Some"
###                 ("_applC" ("_position" dom) ("_position" l))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###               ("_position" es) ("_position" b)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.Not"
###                 ("_applC" ("_position" finals) ("_position" es)))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" es')
###             ("_idts" ("_position" s') ("_position" b')))
###           ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###             ("_tuple" ("_position" h)
###               ("_tuple_args" ("_position" l)
###                 ("_tuple_arg" ("_position" sh))))
###             ("_position" b) ("_position" es') ("_position" s')
###             ("_position" b')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh) ("_position" es) ("_position" Ts)))
###   ("\<^const>Pure.all_binder" ("_position" l)
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" \<D>s)
###             ("_cargs" ("_position" es)
###               ("\<^const>Option.option.Some"
###                 ("_applC" ("_position" dom) ("_position" l))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###               ("_position" es) ("_position" b)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.Not"
###                 ("_applC" ("_position" finals) ("_position" es)))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" es')
###             ("_idts" ("_position" s') ("_position" b')))
###           ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###             ("_tuple" ("_position" h)
###               ("_tuple_args" ("_position" l)
###                 ("_tuple_arg" ("_position" sh))))
###             ("_position" b) ("_position" es') ("_position" s')
###             ("_position" b')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Progress"
### 1.248s elapsed time, 3.121s cpu time, 0.373s GC time
Loading theory "Draft.TypeSafe" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.Equivalence")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 290 of "$AFP/JinjaDCI/J/TypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###     ("\<^const>Expr.exp.Seq" ("_position" e) ("_position" e\<^sub>2))
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###     ("\<^const>Expr.exp.Seq" ("_position" e) ("_position" e\<^sub>2))
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 291 of "$AFP/JinjaDCI/J/TypeSafe.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_constrain" ("_position" e) ("_type_name" expr)) ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh')
###       ("_constrain" ("_position" e') ("_type_name" expr))
###       ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_constrain" ("_position" e) ("_type_name" expr)) ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh')
###       ("_constrain" ("_position" e') ("_type_name" expr))
###       ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_constrain" ("_position" e) ("_type_name" expr)) ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh')
###       ("_constrain" ("_position" e') ("_type_name" expr))
###       ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_constrain" ("_position" e) ("_type_name" expr)) ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh')
###       ("_constrain" ("_position" e') ("_type_name" expr))
###       ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 292 of "$AFP/JinjaDCI/J/TypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh')
###     ("\<^const>Expr.exp.Seq" ("_position" e') ("_position" e\<^sub>2))
###     ("_position" b')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>EConform.bconf" ("_position" P) ("_position" sh')
###     ("\<^const>Expr.exp.Seq" ("_position" e') ("_position" e\<^sub>2))
###     ("_position" b')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 315 of "$AFP/JinjaDCI/J/TypeSafe.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" e')
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" iconf)
###         ("_cargs" ("_position" sh) ("_position" e))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###           ("_position" e) ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh')
###           ("_position" e') ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" e')
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" iconf)
###         ("_cargs" ("_position" sh) ("_position" e))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###           ("_position" e) ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh')
###           ("_position" e') ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" e')
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" iconf)
###         ("_cargs" ("_position" sh) ("_position" e))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###           ("_position" e) ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>EConform.bconf" ("_position" P) ("_position" sh')
###           ("_position" e') ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" e')
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" iconf)
###         ("_cargs" ("_position" sh) ("_position" e))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###           ("_position" e) ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>EConform.bconf" ("_position" P) ("_position" sh')
###           ("_position" e') ("_position" b'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 317 of "$AFP/JinjaDCI/J/TypeSafe.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" es')
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" iconfs)
###         ("_cargs" ("_position" sh) ("_position" es))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###           ("_position" es) ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh')
###           ("_position" es') ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" es')
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" iconfs)
###         ("_cargs" ("_position" sh) ("_position" es))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###           ("_position" es) ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh')
###           ("_position" es') ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" es')
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" iconfs)
###         ("_cargs" ("_position" sh) ("_position" es))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###           ("_position" es) ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>EConform.bconf" ("_position" P) ("_position" sh')
###           ("_position" es') ("_position" b'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" es')
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###       ("_position" b')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" iconfs)
###         ("_cargs" ("_position" sh) ("_position" es))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###           ("_position" es) ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>EConform.bconf" ("_position" P) ("_position" sh')
###           ("_position" es') ("_position" b'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 578 of "$AFP/JinjaDCI/J/TypeSafe.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>sconf" ("_position" P) ("_position" E) ("_position" s))
###   ("_Let"
###     ("_bind"
###       ("_pattern" ("_position" h)
###         ("_patterns" ("_position" l) ("_position" sh)))
###       ("_position" s))
###     ("\<^const>HOL.conj"
###       ("\<^const>Conform.hconf" ("_position" P) ("_position" h))
###       ("\<^const>HOL.conj"
###         ("\<^const>Conform.lconf" ("_position" P) ("_position" h)
###           ("_position" l) ("_position" E))
###         ("\<^const>Conform.shconf" ("_position" P) ("_position" h)
###           ("_position" sh))))))
### ("\<^const>Pure.eq"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" E) ("_position" s))
###   ("_Let"
###     ("_bind"
###       ("_pattern" ("_position" h)
###         ("_patterns" ("_position" l) ("_position" sh)))
###       ("_position" s))
###     ("\<^const>HOL.conj"
###       ("\<^const>Conform.hconf" ("_position" P) ("_position" h))
###       ("\<^const>HOL.conj"
###         ("\<^const>Conform.lconf" ("_position" P) ("_position" h)
###           ("_position" l) ("_position" E))
###         ("\<^const>Conform.shconf" ("_position" P) ("_position" h)
###           ("_position" sh))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 581 of "$AFP/JinjaDCI/J/TypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###         ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s))
###           ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###           ("_position" T)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###             ("_position" s))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###       ("_position" s'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###         ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s))
###           ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###           ("_position" T)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###             ("_position" s))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###       ("_position" s'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###         ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s))
###           ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###           ("_position" T)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###             ("_position" s))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###       ("_position" s'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###         ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s))
###           ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###           ("_position" T)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###             ("_position" s))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 588 of "$AFP/JinjaDCI/J/TypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###         ("_position" s) ("_position" b) ("_position" es') ("_position" s')
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s))
###           ("_applC" ("_position" shp) ("_position" s)) ("_position" es)
###           ("_position" Ts)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###             ("_position" s))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###       ("_position" s'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###         ("_position" s) ("_position" b) ("_position" es') ("_position" s')
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s))
###           ("_applC" ("_position" shp) ("_position" s)) ("_position" es)
###           ("_position" Ts)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###             ("_position" s))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###       ("_position" s'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###         ("_position" s) ("_position" b) ("_position" es') ("_position" s')
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s))
###           ("_applC" ("_position" shp) ("_position" s)) ("_position" es)
###           ("_position" Ts)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###             ("_position" s))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###       ("_position" s'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###         ("_position" s) ("_position" b) ("_position" es') ("_position" s')
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s))
###           ("_applC" ("_position" shp) ("_position" s)) ("_position" es)
###           ("_position" Ts)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###             ("_position" s))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 598 of "$AFP/JinjaDCI/J/TypeSafe.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" E)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Vs))
###           ("_applC" ("_position" length) ("_position" Ts))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" length) ("_position" vs))
###             ("_applC" ("_position" length) ("_position" Ts))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" sh)
###           ("_applC" ("_position" blocks)
###             ("_tuple" ("_position" Vs)
###               ("_tuple_args" ("_position" Ts)
###                 ("_tuple_args" ("_position" vs)
###                   ("_tuple_arg" ("_position" e))))))
###           ("_position" T))
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P)
###           ("_MapUpd" ("_position" E)
###             ("_maplets" ("_position" Vs) ("_position" Ts)))
###           ("_position" h) ("_position" sh) ("_position" e)
###           ("\<^const>HOL.conj" ("_position" T)
###             ("\<^const>HOL.Ex_binder" ("_position" Ts')
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" map)
###                     ("_cargs" ("\<^const>Objects.typeof_h" ("_position" h))
###                       ("_position" vs)))
###                   ("_applC" ("_position" map)
###                     ("_cargs" ("_position" Some) ("_position" Ts'))))
###                 ("\<^const>TypeRel.widens" ("_position" P) ("_position" Ts')
###                   ("_position" Ts))))))))))
### ("\<^const>Pure.all_binder" ("_position" E)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Vs))
###           ("_applC" ("_position" length) ("_position" Ts))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" length) ("_position" vs))
###             ("_applC" ("_position" length) ("_position" Ts))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" sh)
###           ("_applC" ("_position" blocks)
###             ("_tuple" ("_position" Vs)
###               ("_tuple_args" ("_position" Ts)
###                 ("_tuple_args" ("_position" vs)
###                   ("_tuple_arg" ("_position" e))))))
###           ("_position" T))
###         ("\<^const>HOL.conj"
###           ("\<^const>WellTypeRT.WTrt2" ("_position" P)
###             ("_MapUpd" ("_position" E)
###               ("_maplets" ("_position" Vs) ("_position" Ts)))
###             ("_position" h) ("_position" sh) ("_position" e)
###             ("_position" T))
###           ("\<^const>HOL.Ex_binder" ("_position" Ts')
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" map)
###                   ("_cargs" ("\<^const>Objects.typeof_h" ("_position" h))
###                     ("_position" vs)))
###                 ("_applC" ("_position" map)
###                   ("_cargs" ("_position" Some) ("_position" Ts'))))
###               ("\<^const>TypeRel.widens" ("_position" P) ("_position" Ts')
###                 ("_position" Ts)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 609 of "$AFP/JinjaDCI/J/TypeSafe.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" e')
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###       ("_position" b')))
###   ("\<^const>Pure.all_binder" ("_idts" ("_position" E) ("_position" T))
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###             ("_tuple" ("_position" h)
###               ("_tuple_args" ("_position" l)
###                 ("_tuple_arg" ("_position" sh))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" iconf)
###               ("_cargs" ("_position" sh) ("_position" e))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###                 ("_position" h) ("_position" sh) ("_position" e)
###                 ("_position" T))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder" ("_position" T')
###           ("\<^const>HOL.conj"
###             ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###               ("_position" h') ("_position" sh') ("_position" e')
###               ("_position" T'))
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" e')
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###       ("_position" b')))
###   ("\<^const>Pure.all_binder" ("_idts" ("_position" E) ("_position" T))
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###             ("_tuple" ("_position" h)
###               ("_tuple_args" ("_position" l)
###                 ("_tuple_arg" ("_position" sh))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" iconf)
###               ("_cargs" ("_position" sh) ("_position" e))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###                 ("_position" h) ("_position" sh) ("_position" e)
###                 ("_position" T))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder" ("_position" T')
###           ("\<^const>HOL.conj"
###             ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###               ("_position" h') ("_position" sh') ("_position" e')
###               ("_position" T'))
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" e')
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###       ("_position" b')))
###   ("\<^const>Pure.all_binder" ("_idts" ("_position" E) ("_position" T))
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###             ("_tuple" ("_position" h)
###               ("_tuple_args" ("_position" l)
###                 ("_tuple_arg" ("_position" sh))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" iconf)
###               ("_cargs" ("_position" sh) ("_position" e))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###                 ("_position" h) ("_position" sh) ("_position" e)
###                 ("_position" T))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder" ("_position" T')
###           ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###             ("_position" h') ("_position" sh') ("_position" e')
###             ("\<^const>HOL.conj" ("_position" T')
###               ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                 ("_position" T)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" e')
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###       ("_position" b')))
###   ("\<^const>Pure.all_binder" ("_idts" ("_position" E) ("_position" T))
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###             ("_tuple" ("_position" h)
###               ("_tuple_args" ("_position" l)
###                 ("_tuple_arg" ("_position" sh))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" iconf)
###               ("_cargs" ("_position" sh) ("_position" e))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###                 ("_position" h) ("_position" sh) ("_position" e)
###                 ("_position" T))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder" ("_position" T')
###           ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###             ("_position" h') ("_position" sh') ("_position" e')
###             ("\<^const>HOL.conj" ("_position" T')
###               ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                 ("_position" T)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 612 of "$AFP/JinjaDCI/J/TypeSafe.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" es')
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###       ("_position" b')))
###   ("\<^const>Pure.all_binder" ("_idts" ("_position" E) ("_position" Ts))
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###             ("_tuple" ("_position" h)
###               ("_tuple_args" ("_position" l)
###                 ("_tuple_arg" ("_position" sh))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" iconfs)
###               ("_cargs" ("_position" sh) ("_position" es))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###                 ("_position" h) ("_position" sh) ("_position" es)
###                 ("_position" Ts))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder" ("_position" Ts')
###           ("\<^const>HOL.conj"
###             ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###               ("_position" h') ("_position" sh') ("_position" es')
###               ("_position" Ts'))
###             ("\<^const>TypeRel.widens" ("_position" P) ("_position" Ts')
###               ("_position" Ts))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" es')
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###       ("_position" b')))
###   ("\<^const>Pure.all_binder" ("_idts" ("_position" E) ("_position" Ts))
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###             ("_tuple" ("_position" h)
###               ("_tuple_args" ("_position" l)
###                 ("_tuple_arg" ("_position" sh))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" iconfs)
###               ("_cargs" ("_position" sh) ("_position" es))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###                 ("_position" h) ("_position" sh) ("_position" es)
###                 ("_position" Ts))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder" ("_position" Ts')
###           ("\<^const>HOL.conj"
###             ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###               ("_position" h') ("_position" sh') ("_position" es')
###               ("_position" Ts'))
###             ("\<^const>TypeRel.widens" ("_position" P) ("_position" Ts')
###               ("_position" Ts))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" es')
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###       ("_position" b')))
###   ("\<^const>Pure.all_binder" ("_idts" ("_position" E) ("_position" Ts))
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###             ("_tuple" ("_position" h)
###               ("_tuple_args" ("_position" l)
###                 ("_tuple_arg" ("_position" sh))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" iconfs)
###               ("_cargs" ("_position" sh) ("_position" es))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###                 ("_position" h) ("_position" sh) ("_position" es)
###                 ("_position" Ts))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder" ("_position" Ts')
###           ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###             ("_position" h') ("_position" sh') ("_position" es')
###             ("\<^const>HOL.conj" ("_position" Ts')
###               ("\<^const>TypeRel.widens" ("_position" P) ("_position" Ts')
###                 ("_position" Ts)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" es')
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###       ("_position" b')))
###   ("\<^const>Pure.all_binder" ("_idts" ("_position" E) ("_position" Ts))
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###             ("_tuple" ("_position" h)
###               ("_tuple_args" ("_position" l)
###                 ("_tuple_arg" ("_position" sh))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" iconfs)
###               ("_cargs" ("_position" sh) ("_position" es))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###                 ("_position" h) ("_position" sh) ("_position" es)
###                 ("_position" Ts))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder" ("_position" Ts')
###           ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###             ("_position" h') ("_position" sh') ("_position" es')
###             ("\<^const>HOL.conj" ("_position" Ts')
###               ("\<^const>TypeRel.widens" ("_position" P) ("_position" Ts')
###                 ("_position" Ts)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1196 of "$AFP/JinjaDCI/J/TypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_J_prog) ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###           ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###           ("_position" b')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###             ("_position" s)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" iconf)
###               ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###                 ("_position" e))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###                 ("_applC" ("_position" hp) ("_position" s))
###                 ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###                 ("_position" T))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" T')
###       ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###         ("_applC" ("_position" hp) ("_position" s'))
###         ("_applC" ("_position" shp) ("_position" s')) ("_position" e')
###         ("\<^const>HOL.conj" ("_position" T')
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_J_prog) ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###           ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###           ("_position" b')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###             ("_position" s)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" iconf)
###               ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###                 ("_position" e))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###                 ("_applC" ("_position" hp) ("_position" s))
###                 ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###                 ("_position" T))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" T')
###       ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###         ("_applC" ("_position" hp) ("_position" s'))
###         ("_applC" ("_position" shp) ("_position" s')) ("_position" e')
###         ("\<^const>HOL.conj" ("_position" T')
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_J_prog) ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###           ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###           ("_position" b')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###             ("_position" s)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" iconf)
###               ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###                 ("_position" e))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###                 ("_applC" ("_position" hp) ("_position" s))
###                 ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###                 ("_position" T))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" T')
###       ("\<^const>HOL.conj"
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s'))
###           ("_applC" ("_position" shp) ("_position" s')) ("_position" e')
###           ("_position" T'))
###         ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###           ("_position" T))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_J_prog) ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###           ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###           ("_position" b')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###             ("_position" s)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" iconf)
###               ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###                 ("_position" e))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###                 ("_applC" ("_position" hp) ("_position" s))
###                 ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###                 ("_position" T))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" T')
###       ("\<^const>HOL.conj"
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s'))
###           ("_applC" ("_position" shp) ("_position" s')) ("_position" e')
###           ("_position" T'))
###         ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###           ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1201 of "$AFP/JinjaDCI/J/TypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_J_prog) ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###           ("_position" s) ("_position" b) ("_position" es') ("_position" s')
###           ("_position" b')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###             ("_position" s)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" iconfs)
###               ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###                 ("_position" es))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###                 ("_applC" ("_position" hp) ("_position" s))
###                 ("_applC" ("_position" shp) ("_position" s))
###                 ("_position" es) ("_position" Ts))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" Ts')
###       ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###         ("_applC" ("_position" hp) ("_position" s'))
###         ("_applC" ("_position" shp) ("_position" s')) ("_position" es')
###         ("\<^const>HOL.conj" ("_position" Ts')
###           ("\<^const>TypeRel.widens" ("_position" P) ("_position" Ts')
###             ("_position" Ts)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_J_prog) ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###           ("_position" s) ("_position" b) ("_position" es') ("_position" s')
###           ("_position" b')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###             ("_position" s)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" iconfs)
###               ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###                 ("_position" es))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###                 ("_applC" ("_position" hp) ("_position" s))
###                 ("_applC" ("_position" shp) ("_position" s))
###                 ("_position" es) ("_position" Ts))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" Ts')
###       ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###         ("_applC" ("_position" hp) ("_position" s'))
###         ("_applC" ("_position" shp) ("_position" s')) ("_position" es')
###         ("\<^const>HOL.conj" ("_position" Ts')
###           ("\<^const>TypeRel.widens" ("_position" P) ("_position" Ts')
###             ("_position" Ts)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_J_prog) ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###           ("_position" s) ("_position" b) ("_position" es') ("_position" s')
###           ("_position" b')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###             ("_position" s)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" iconfs)
###               ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###                 ("_position" es))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###                 ("_applC" ("_position" hp) ("_position" s))
###                 ("_applC" ("_position" shp) ("_position" s))
###                 ("_position" es) ("_position" Ts))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" Ts')
###       ("\<^const>HOL.conj"
###         ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s'))
###           ("_applC" ("_position" shp) ("_position" s')) ("_position" es')
###           ("_position" Ts'))
###         ("\<^const>TypeRel.widens" ("_position" P) ("_position" Ts')
###           ("_position" Ts))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_J_prog) ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###           ("_position" s) ("_position" b) ("_position" es') ("_position" s')
###           ("_position" b')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###             ("_position" s)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" iconfs)
###               ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###                 ("_position" es))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###                 ("_applC" ("_position" hp) ("_position" s))
###                 ("_applC" ("_position" shp) ("_position" s))
###                 ("_position" es) ("_position" Ts))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" Ts')
###       ("\<^const>HOL.conj"
###         ("\<^const>WellTypeRT.WTrts2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s'))
###           ("_applC" ("_position" shp) ("_position" s')) ("_position" es')
###           ("_position" Ts'))
###         ("\<^const>TypeRel.widens" ("_position" P) ("_position" Ts')
###           ("_position" Ts))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1213 of "$AFP/JinjaDCI/J/TypeSafe.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder" ("_position" T)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s))
###           ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###           ("_position" T)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" iconf)
###             ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###               ("_position" e))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###               ("_position" s))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###         ("_position" s')))))
### ("\<^const>Pure.all_binder" ("_position" T)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s))
###           ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###           ("_position" T)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" iconf)
###             ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###               ("_position" e))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###               ("_position" s))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###         ("_position" s')))))
### ("\<^const>Pure.all_binder" ("_position" T)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s))
###           ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###           ("_position" T)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" iconf)
###             ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###               ("_position" e))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###               ("_position" s))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###         ("_position" s')))))
### ("\<^const>Pure.all_binder" ("_position" T)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###           ("_applC" ("_position" hp) ("_position" s))
###           ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###           ("_position" T)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" iconf)
###             ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###               ("_position" e))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###               ("_position" s))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###         ("_position" s')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1258 of "$AFP/JinjaDCI/J/TypeSafe.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" iconf)
###       ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###         ("_position" e))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>EConform.bconfs" ("_position" P)
###         ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###         ("_position" b)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>EConform.bconfs" ("_position" P)
###         ("_applC" ("_position" shp) ("_position" s'))
###         ("_constrain" ("_position" e') ("_type_name" expr))
###         ("_position" b')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" iconf)
###       ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###         ("_position" e))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>EConform.bconf" ("_position" P)
###         ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###         ("_position" b)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>EConform.bconfs" ("_position" P)
###         ("_applC" ("_position" shp) ("_position" s'))
###         ("_constrain" ("_position" e') ("_type_name" expr))
###         ("_position" b')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" iconf)
###       ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###         ("_position" e))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>EConform.bconfs" ("_position" P)
###         ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###         ("_position" b)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>EConform.bconf" ("_position" P)
###         ("_applC" ("_position" shp) ("_position" s'))
###         ("_constrain" ("_position" e') ("_type_name" expr))
###         ("_position" b')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" iconf)
###       ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###         ("_position" e))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>EConform.bconf" ("_position" P)
###         ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###         ("_position" b)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>EConform.bconf" ("_position" P)
###         ("_applC" ("_position" shp) ("_position" s'))
###         ("_constrain" ("_position" e') ("_type_name" expr))
###         ("_position" b')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1273 of "$AFP/JinjaDCI/J/TypeSafe.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" iconfs)
###       ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###         ("_position" es))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>EConform.bconfs" ("_position" P)
###         ("_applC" ("_position" shp) ("_position" s)) ("_position" es)
###         ("_position" b)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>EConform.bconfs" ("_position" P)
###         ("_applC" ("_position" shp) ("_position" s'))
###         ("_constrain" ("_position" es')
###           ("_tapp" ("_type_name" expr) ("_type_name" list)))
###         ("_position" b')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" iconfs)
###       ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###         ("_position" es))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>EConform.bconf" ("_position" P)
###         ("_applC" ("_position" shp) ("_position" s)) ("_position" es)
###         ("_position" b)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>EConform.bconfs" ("_position" P)
###         ("_applC" ("_position" shp) ("_position" s'))
###         ("_constrain" ("_position" es')
###           ("_tapp" ("_type_name" expr) ("_type_name" list)))
###         ("_position" b')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" iconfs)
###       ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###         ("_position" es))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>EConform.bconfs" ("_position" P)
###         ("_applC" ("_position" shp) ("_position" s)) ("_position" es)
###         ("_position" b)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>EConform.bconf" ("_position" P)
###         ("_applC" ("_position" shp) ("_position" s'))
###         ("_constrain" ("_position" es')
###           ("_tapp" ("_type_name" expr) ("_type_name" list)))
###         ("_position" b')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" iconfs)
###       ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###         ("_position" es))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>EConform.bconf" ("_position" P)
###         ("_applC" ("_position" shp) ("_position" s)) ("_position" es)
###         ("_position" b)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>EConform.bconf" ("_position" P)
###         ("_applC" ("_position" shp) ("_position" s'))
###         ("_constrain" ("_position" es')
###           ("_tapp" ("_type_name" expr) ("_type_name" list)))
###         ("_position" b')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1300 of "$AFP/JinjaDCI/J/TypeSafe.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" T)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###           ("_position" s)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" iconf)
###             ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###               ("_position" e))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###               ("_applC" ("_position" hp) ("_position" s))
###               ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###               ("_position" T))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" T')
###         ("\<^const>HOL.conj"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T))
###           ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###             ("_applC" ("_position" hp) ("_position" s'))
###             ("_applC" ("_position" shp) ("_position" s')) ("_position" e')
###             ("_position" T')))))))
### ("\<^const>Pure.all_binder" ("_position" T)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###           ("_position" s)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" iconf)
###             ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###               ("_position" e))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###               ("_applC" ("_position" hp) ("_position" s))
###               ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###               ("_position" T))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Ex_binder" ("_position" T')
###         ("\<^const>HOL.conj"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T))
###           ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###             ("_applC" ("_position" hp) ("_position" s'))
###             ("_applC" ("_position" shp) ("_position" s')) ("_position" e')
###             ("_position" T')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1320 of "$AFP/JinjaDCI/J/TypeSafe.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>wf_config" ("_position" P) ("_position" E) ("_position" s)
###     ("_position" e) ("_position" T))
###   ("\<^const>HOL.conj"
###     ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###       ("_position" s))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" iconf)
###         ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###           ("_position" e)))
###       ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###         ("_applC" ("_position" hp) ("_position" s))
###         ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###         ("_position" T)))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>wf_config" ("_position" P) ("_position" E) ("_position" s)
###     ("_position" e) ("_position" T))
###   ("\<^const>HOL.conj"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###       ("_position" s))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" iconf)
###         ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###           ("_position" e)))
###       ("\<^const>WellTypeRT.WTrt2" ("_position" P) ("_position" E)
###         ("_applC" ("_position" hp) ("_position" s))
###         ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###         ("_position" T)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1348 of "$AFP/JinjaDCI/J/TypeSafe.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeSafe.wf_config" ("_position" P) ("_position" E)
###         ("_position" s) ("_position" e) ("_position" T)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" \<D>)
###           ("_cargs" ("_position" e)
###             ("\<^const>Option.option.Some"
###               ("_applC" ("_position" dom)
###                 ("_applC" ("_position" lcl) ("_position" s)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>EConform.bconf" ("_position" P)
###             ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###             ("_position" b)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" final) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" e') ("_idts" ("_position" s') ("_position" b')))
###       ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###         ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###         ("_position" b')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeSafe.wf_config" ("_position" P) ("_position" E)
###         ("_position" s) ("_position" e) ("_position" T)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" \<D>)
###           ("_cargs" ("_position" e)
###             ("\<^const>Option.option.Some"
###               ("_applC" ("_position" dom)
###                 ("_applC" ("_position" lcl) ("_position" s)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>EConform.bconfs" ("_position" P)
###             ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###             ("_position" b)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" final) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" e') ("_idts" ("_position" s') ("_position" b')))
###       ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###         ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###         ("_position" b')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1357 of "$AFP/JinjaDCI/J/TypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1359 of "$AFP/JinjaDCI/J/TypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>EConform.bconfs" ("_position" P)
###     ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>EConform.bconf" ("_position" P)
###     ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.TypeSafe"
### 2.249s elapsed time, 7.124s cpu time, 5.724s GC time
Loading theory "Draft.Equivalence" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI")
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 542 of "$AFP/JinjaDCI/J/Equivalence.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###       ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e') ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###       ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e') ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###       ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.FAss" ("_position" e') ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###       ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.FAss" ("_position" e') ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s') ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 553 of "$AFP/JinjaDCI/J/Equivalence.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###       ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e'))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###       ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e'))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###       ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e'))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###       ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e'))
###       ("_position" s') ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 567 of "$AFP/JinjaDCI/J/Equivalence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStep.Step" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s\<^sub>0) ("_position" b\<^sub>0) ("_position" unit)
###     ("_tuple"
###       ("_MapUpd" ("_position" h\<^sub>2)
###         ("_maplet" ("_position" a)
###           ("_tuple" ("_position" C)
###             ("_tuple_arg"
###               ("_MapUpd" ("_position" fs)
###                 ("_maplet"
###                   ("_tuple" ("_position" F) ("_tuple_arg" ("_position" D)))
###                   ("_position" v)))))))
###       ("_tuple_args" ("_position" l\<^sub>2)
###         ("_tuple_arg" ("_position" sh\<^sub>2))))
###     ("_position" b\<^sub>2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStep.Step" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s\<^sub>0) ("_position" b\<^sub>0) ("_position" unit)
###     ("_tuple"
###       ("_MapUpd" ("_position" h\<^sub>2)
###         ("_maplet" ("_position" a)
###           ("_tuple" ("_position" C)
###             ("_tuple_arg"
###               ("_MapUpd" ("_position" fs)
###                 ("_maplet"
###                   ("_tuple" ("_position" F) ("_tuple_arg" ("_position" D)))
###                   ("_position" v)))))))
###       ("_tuple_args" ("_position" l\<^sub>2)
###         ("_tuple_arg" ("_position" sh\<^sub>2))))
###     ("_position" b\<^sub>2)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 582 of "$AFP/JinjaDCI/J/Equivalence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStep.Step" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s\<^sub>0) ("_position" b\<^sub>0)
###     ("_applC" ("_position" THROW) ("_position" NullPointer))
###     ("_position" s\<^sub>2) ("_position" b\<^sub>2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStep.Step" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s\<^sub>0) ("_position" b\<^sub>0)
###     ("_applC" ("_position" THROW) ("_position" NullPointer))
###     ("_position" s\<^sub>2) ("_position" b\<^sub>2)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 595 of "$AFP/JinjaDCI/J/Equivalence.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" b)
###       ("_applC" ("_position" throw) ("_position" e')) ("_position" s')
###       ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b)
###       ("_applC" ("_position" throw) ("_position" e')) ("_position" s')
###       ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" b)
###       ("_applC" ("_position" throw) ("_position" e')) ("_position" s')
###       ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b)
###       ("_applC" ("_position" throw) ("_position" e')) ("_position" s')
###       ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 601 of "$AFP/JinjaDCI/J/Equivalence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStep.Step" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s\<^sub>0) ("_position" b\<^sub>0)
###     ("_applC" ("_position" throw) ("_position" e)) ("_position" s\<^sub>2)
###     ("_position" b\<^sub>2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStep.Step" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s\<^sub>0) ("_position" b\<^sub>0)
###     ("_applC" ("_position" throw) ("_position" e)) ("_position" s\<^sub>2)
###     ("_position" b\<^sub>2)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 617 of "$AFP/JinjaDCI/J/Equivalence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStep.Step" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s\<^sub>0) ("_position" b\<^sub>0)
###     ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###     ("_tuple" ("_position" h\<^sub>2)
###       ("_tuple_args" ("_position" l\<^sub>2)
###         ("_tuple_arg" ("_position" sh\<^sub>2))))
###     ("_position" b\<^sub>2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStep.Step" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s\<^sub>0) ("_position" b\<^sub>0)
###     ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###     ("_tuple" ("_position" h\<^sub>2)
###       ("_tuple_args" ("_position" l\<^sub>2)
###         ("_tuple_arg" ("_position" sh\<^sub>2))))
###     ("_position" b\<^sub>2)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 634 of "$AFP/JinjaDCI/J/Equivalence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStep.Step" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s\<^sub>0) ("_position" b\<^sub>0)
###     ("_applC" ("_position" THROW)
###       ("_position" IncompatibleClassChangeError))
###     ("_tuple" ("_position" h\<^sub>2)
###       ("_tuple_args" ("_position" l\<^sub>2)
###         ("_tuple_arg" ("_position" sh\<^sub>2))))
###     ("_position" b\<^sub>2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStep.Step" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s\<^sub>0) ("_position" b\<^sub>0)
###     ("_applC" ("_position" THROW)
###       ("_position" IncompatibleClassChangeError))
###     ("_tuple" ("_position" h\<^sub>2)
###       ("_tuple_args" ("_position" l\<^sub>2)
###         ("_tuple_arg" ("_position" sh\<^sub>2))))
###     ("_position" b\<^sub>2)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 650 of "$AFP/JinjaDCI/J/Equivalence.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###       ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e'))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###       ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e'))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###       ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e'))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###       ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e'))
###       ("_position" s') ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 664 of "$AFP/JinjaDCI/J/Equivalence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStep.Step" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s\<^sub>0) ("_position" b\<^sub>0) ("_position" unit)
###     ("_tuple" ("_position" h\<^sub>2)
###       ("_tuple_args" ("_position" l\<^sub>2)
###         ("_tuple_arg"
###           ("_MapUpd" ("_position" sh\<^sub>2)
###             ("_maplet" ("_position" D)
###               ("_tuple"
###                 ("_MapUpd" ("_position" sfs)
###                   ("_maplet" ("_position" F) ("_position" v)))
###                 ("_tuple_arg" ("_position" Done))))))))
###     ("_position" False)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStep.Step" ("_position" P)
###     ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s\<^sub>0) ("_position" b\<^sub>0) ("_position" unit)
###     ("_tuple" ("_position" h\<^sub>2)
###       ("_tuple_args" ("_position" l\<^sub>2)
###         ("_tuple_arg"
###           ("_MapUpd" ("_position" sh\<^sub>2)
###             ("_maplet" ("_position" D)
###               ("_tuple"
###                 ("_MapUpd" ("_position" sfs)
###                   ("_maplet" ("_position" F) ("_position" v)))
###                 ("_tuple_arg" ("_position" Done))))))))
###     ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 688 of "$AFP/JinjaDCI/J/Equivalence.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_position" b\<^sub>0)
###         ("_applC" ("_position" throw) ("_position" e))
###         ("_position" s\<^sub>2) ("_position" b\<^sub>2))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" b\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e)) ("_position" s\<^sub>2)
###       ("_position" b\<^sub>2))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_position" b\<^sub>0)
###         ("_applC" ("_position" throw) ("_position" e))
###         ("_position" s\<^sub>2) ("_position" b\<^sub>2))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" b\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e)) ("_position" s\<^sub>2)
###       ("_position" b\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 693 of "$AFP/JinjaDCI/J/Equivalence.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_position" b\<^sub>0)
###         ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))
###         ("_position" b\<^sub>2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" b) ("_position" t))
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" b) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" b\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_position" b\<^sub>0)
###         ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))
###         ("_position" b\<^sub>2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" b) ("_position" t))
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" b) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" b\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2))))
###       ("_position" False))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 699 of "$AFP/JinjaDCI/J/Equivalence.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_position" b\<^sub>0)
###         ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))
###         ("_position" b\<^sub>2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" t)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" b\<^sub>0)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_position" b\<^sub>0)
###         ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))
###         ("_position" b\<^sub>2)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" t)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" b\<^sub>0)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2))))
###       ("_position" False))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 711 of "$AFP/JinjaDCI/J/Equivalence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStep.Step" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s\<^sub>0) ("_position" b\<^sub>0) ("_position" unit)
###     ("_tuple" ("_position" h')
###       ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh''))))
###     ("_position" False)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStep.Step" ("_position" P)
###     ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s\<^sub>0) ("_position" b\<^sub>0) ("_position" unit)
###     ("_tuple" ("_position" h')
###       ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh''))))
###     ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 735 of "$AFP/JinjaDCI/J/Equivalence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStep.Step" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s\<^sub>0) ("_position" b\<^sub>0)
###     ("_applC" ("_position" throw) ("_position" a)) ("_position" s')
###     ("_position" b')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStep.Step" ("_position" P)
###     ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s\<^sub>0) ("_position" b\<^sub>0)
###     ("_applC" ("_position" throw) ("_position" a)) ("_position" s')
###     ("_position" b')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 916 of "$AFP/JinjaDCI/J/Equivalence.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###       ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" h)
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" sh)
###             ("_idts" ("_position" h')
###               ("_idts" ("_position" l')
###                 ("_idts" ("_position" sh') ("_position" v)))))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_tuple" ("_position" h)
###             ("_tuple_args"
###               ("_MapUpd" ("_position" l)
###                 ("_maplet" ("_position" V) ("_position" v)))
###               ("_tuple_arg" ("_position" sh)))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" s')
###             ("_tuple" ("_position" h')
###               ("_tuple_args" ("_position" l')
###                 ("_tuple_arg" ("_position" sh')))))
###           ("\<^const>SmallStep.Step" ("_position" P)
###             ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###               ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###             ("_tuple" ("_position" h)
###               ("_tuple_args" ("_position" l)
###                 ("_tuple_arg" ("_position" sh))))
###             ("_position" b)
###             ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###               ("_applC" ("_position" Val)
###                 ("_applC" ("_position" the)
###                   ("_applC" ("_position" l') ("_position" V))))
###               ("_position" e'))
###             ("_tuple" ("_position" h')
###               ("_tuple_args"
###                 ("_Update" ("_position" l')
###                   ("_updbind" ("_position" V)
###                     ("_applC" ("_position" l) ("_position" V))))
###                 ("_tuple_arg" ("_position" sh'))))
###             ("_position" b')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###       ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" h)
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" sh)
###             ("_idts" ("_position" h')
###               ("_idts" ("_position" l')
###                 ("_idts" ("_position" sh') ("_position" v)))))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_tuple" ("_position" h)
###             ("_tuple_args"
###               ("_MapUpd" ("_position" l)
###                 ("_maplet" ("_position" V) ("_position" v)))
###               ("_tuple_arg" ("_position" sh)))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" s')
###             ("_tuple" ("_position" h')
###               ("_tuple_args" ("_position" l')
###                 ("_tuple_arg" ("_position" sh')))))
###           ("\<^const>SmallStep.Step" ("_position" P)
###             ("\<^const>Expr.exp.Block" ("_position" V)
###               ("\<^const>Expr.exp.LAss" ("_position" T)
###                 ("_applC" ("_position" Val) ("_position" v)))
###               ("_position" e))
###             ("_tuple" ("_position" h)
###               ("_tuple_args" ("_position" l)
###                 ("_tuple_arg" ("_position" sh))))
###             ("_position" b)
###             ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###               ("_applC" ("_position" Val)
###                 ("_applC" ("_position" the)
###                   ("_applC" ("_position" l') ("_position" V))))
###               ("_position" e'))
###             ("_tuple" ("_position" h')
###               ("_tuple_args"
###                 ("_Update" ("_position" l')
###                   ("_updbind" ("_position" V)
###                     ("_applC" ("_position" l) ("_position" V))))
###                 ("_tuple_arg" ("_position" sh'))))
###             ("_position" b')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###       ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" h)
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" sh)
###             ("_idts" ("_position" h')
###               ("_idts" ("_position" l')
###                 ("_idts" ("_position" sh') ("_position" v)))))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_tuple" ("_position" h)
###             ("_tuple_args"
###               ("_MapUpd" ("_position" l)
###                 ("_maplet" ("_position" V) ("_position" v)))
###               ("_tuple_arg" ("_position" sh)))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" s')
###             ("_tuple" ("_position" h')
###               ("_tuple_args" ("_position" l')
###                 ("_tuple_arg" ("_position" sh')))))
###           ("\<^const>SmallStep.Step" ("_position" P)
###             ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###               ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###             ("_tuple" ("_position" h)
###               ("_tuple_args" ("_position" l)
###                 ("_tuple_arg" ("_position" sh))))
###             ("_position" b)
###             ("\<^const>Expr.exp.Block" ("_position" V)
###               ("\<^const>Expr.exp.LAss" ("_position" T)
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" the)
###                     ("_applC" ("_position" l') ("_position" V)))))
###               ("_position" e'))
###             ("_tuple" ("_position" h')
###               ("_tuple_args"
###                 ("_Update" ("_position" l')
###                   ("_updbind" ("_position" V)
###                     ("_applC" ("_position" l) ("_position" V))))
###                 ("_tuple_arg" ("_position" sh'))))
###             ("_position" b')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###       ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" h)
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" sh)
###             ("_idts" ("_position" h')
###               ("_idts" ("_position" l')
###                 ("_idts" ("_position" sh') ("_position" v)))))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_tuple" ("_position" h)
###             ("_tuple_args"
###               ("_MapUpd" ("_position" l)
###                 ("_maplet" ("_position" V) ("_position" v)))
###               ("_tuple_arg" ("_position" sh)))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" s')
###             ("_tuple" ("_position" h')
###               ("_tuple_args" ("_position" l')
###                 ("_tuple_arg" ("_position" sh')))))
###           ("\<^const>SmallStep.Step" ("_position" P)
###             ("\<^const>Expr.exp.Block" ("_position" V)
###               ("\<^const>Expr.exp.LAss" ("_position" T)
###                 ("_applC" ("_position" Val) ("_position" v)))
###               ("_position" e))
###             ("_tuple" ("_position" h)
###               ("_tuple_args" ("_position" l)
###                 ("_tuple_arg" ("_position" sh))))
###             ("_position" b)
###             ("\<^const>Expr.exp.Block" ("_position" V)
###               ("\<^const>Expr.exp.LAss" ("_position" T)
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" the)
###                     ("_applC" ("_position" l') ("_position" V)))))
###               ("_position" e'))
###             ("_tuple" ("_position" h')
###               ("_tuple_args"
###                 ("_Update" ("_position" l')
###                   ("_updbind" ("_position" V)
###                     ("_applC" ("_position" l) ("_position" V))))
###                 ("_tuple_arg" ("_position" sh'))))
###             ("_position" b')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###       ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" h)
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" sh)
###             ("_idts" ("_position" h')
###               ("_idts" ("_position" l')
###                 ("_idts" ("_position" sh') ("_position" v)))))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_tuple" ("_position" h)
###             ("_tuple_args"
###               ("_MapUpd" ("_position" l)
###                 ("_maplet" ("_position" V) ("_position" v)))
###               ("_tuple_arg" ("_position" sh)))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" s')
###             ("_tuple" ("_position" h')
###               ("_tuple_args" ("_position" l')
###                 ("_tuple_arg" ("_position" sh')))))
###           ("\<^const>SmallStep.Step" ("_position" P)
###             ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###               ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###             ("_tuple" ("_position" h)
###               ("_tuple_args" ("_position" l)
###                 ("_tuple_arg" ("_position" sh))))
###             ("_position" b)
###             ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###               ("_applC" ("_position" Val)
###                 ("_applC" ("_position" the)
###                   ("_applC" ("_position" l') ("_position" V))))
###               ("_position" e'))
###             ("_tuple" ("_position" h')
###               ("_tuple_args"
###                 ("_applC" ("_position" l')
###                   ("\<^const>Expr.exp.LAss" ("_position" V)
###                     ("_applC" ("_position" l) ("_position" V))))
###                 ("_tuple_arg" ("_position" sh'))))
###             ("_position" b')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###       ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" h)
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" sh)
###             ("_idts" ("_position" h')
###               ("_idts" ("_position" l')
###                 ("_idts" ("_position" sh') ("_position" v)))))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_tuple" ("_position" h)
###             ("_tuple_args"
###               ("_MapUpd" ("_position" l)
###                 ("_maplet" ("_position" V) ("_position" v)))
###               ("_tuple_arg" ("_position" sh)))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" s')
###             ("_tuple" ("_position" h')
###               ("_tuple_args" ("_position" l')
###                 ("_tuple_arg" ("_position" sh')))))
###           ("\<^const>SmallStep.Step" ("_position" P)
###             ("\<^const>Expr.exp.Block" ("_position" V)
###               ("\<^const>Expr.exp.LAss" ("_position" T)
###                 ("_applC" ("_position" Val) ("_position" v)))
###               ("_position" e))
###             ("_tuple" ("_position" h)
###               ("_tuple_args" ("_position" l)
###                 ("_tuple_arg" ("_position" sh))))
###             ("_position" b)
###             ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###               ("_applC" ("_position" Val)
###                 ("_applC" ("_position" the)
###                   ("_applC" ("_position" l') ("_position" V))))
###               ("_position" e'))
###             ("_tuple" ("_position" h')
###               ("_tuple_args"
###                 ("_applC" ("_position" l')
###                   ("\<^const>Expr.exp.LAss" ("_position" V)
###                     ("_applC" ("_position" l) ("_position" V))))
###                 ("_tuple_arg" ("_position" sh'))))
###             ("_position" b')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###       ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" h)
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" sh)
###             ("_idts" ("_position" h')
###               ("_idts" ("_position" l')
###                 ("_idts" ("_position" sh') ("_position" v)))))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_tuple" ("_position" h)
###             ("_tuple_args"
###               ("_MapUpd" ("_position" l)
###                 ("_maplet" ("_position" V) ("_position" v)))
###               ("_tuple_arg" ("_position" sh)))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" s')
###             ("_tuple" ("_position" h')
###               ("_tuple_args" ("_position" l')
###                 ("_tuple_arg" ("_position" sh')))))
###           ("\<^const>SmallStep.Step" ("_position" P)
###             ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###               ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###             ("_tuple" ("_position" h)
###               ("_tuple_args" ("_position" l)
###                 ("_tuple_arg" ("_position" sh))))
###             ("_position" b)
###             ("\<^const>Expr.exp.Block" ("_position" V)
###               ("\<^const>Expr.exp.LAss" ("_position" T)
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" the)
###                     ("_applC" ("_position" l') ("_position" V)))))
###               ("_position" e'))
###             ("_tuple" ("_position" h')
###               ("_tuple_args"
###                 ("_applC" ("_position" l')
###                   ("\<^const>Expr.exp.LAss" ("_position" V)
###                     ("_applC" ("_position" l) ("_position" V))))
###                 ("_tuple_arg" ("_position" sh'))))
###             ("_position" b')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###       ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" h)
###         ("_idts" ("_position" l)
###           ("_idts" ("_position" sh)
###             ("_idts" ("_position" h')
###               ("_idts" ("_position" l')
###                 ("_idts" ("_position" sh') ("_position" v)))))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_position" s)
###           ("_tuple" ("_position" h)
###             ("_tuple_args"
###               ("_MapUpd" ("_position" l)
###                 ("_maplet" ("_position" V) ("_position" v)))
###               ("_tuple_arg" ("_position" sh)))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_position" s')
###             ("_tuple" ("_position" h')
###               ("_tuple_args" ("_position" l')
###                 ("_tuple_arg" ("_position" sh')))))
###           ("\<^const>SmallStep.Step" ("_position" P)
###             ("\<^const>Expr.exp.Block" ("_position" V)
###               ("\<^const>Expr.exp.LAss" ("_position" T)
###                 ("_applC" ("_position" Val) ("_position" v)))
###               ("_position" e))
###             ("_tuple" ("_position" h)
###               ("_tuple_args" ("_position" l)
###                 ("_tuple_arg" ("_position" sh))))
###             ("_position" b)
###             ("\<^const>Expr.exp.Block" ("_position" V)
###               ("\<^const>Expr.exp.LAss" ("_position" T)
###                 ("_applC" ("_position" Val)
###                   ("_applC" ("_position" the)
###                     ("_applC" ("_position" l') ("_position" V)))))
###               ("_position" e'))
###             ("_tuple" ("_position" h')
###               ("_tuple_args"
###                 ("_applC" ("_position" l')
###                   ("\<^const>Expr.exp.LAss" ("_position" V)
###                     ("_applC" ("_position" l) ("_position" V))))
###                 ("_tuple_arg" ("_position" sh'))))
###             ("_position" b')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 953 of "$AFP/JinjaDCI/J/Equivalence.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h)
###         ("_tuple_args"
###           ("_MapUpd" ("_position" l)
###             ("_maplet" ("_position" V) ("_position" v)))
###           ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" e')
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###       ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" the)
###             ("_applC" ("_position" l') ("_position" V))))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h)
###         ("_tuple_args"
###           ("_MapUpd" ("_position" l)
###             ("_maplet" ("_position" V) ("_position" v)))
###           ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" e')
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###       ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" the)
###             ("_applC" ("_position" l') ("_position" V))))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h)
###         ("_tuple_args"
###           ("_MapUpd" ("_position" l)
###             ("_maplet" ("_position" V) ("_position" v)))
###           ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" e')
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###       ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" the)
###               ("_applC" ("_position" l') ("_position" V)))))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h)
###         ("_tuple_args"
###           ("_MapUpd" ("_position" l)
###             ("_maplet" ("_position" V) ("_position" v)))
###           ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" e')
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###       ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" the)
###               ("_applC" ("_position" l') ("_position" V)))))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h)
###         ("_tuple_args"
###           ("_MapUpd" ("_position" l)
###             ("_maplet" ("_position" V) ("_position" v)))
###           ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" e')
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###       ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" the)
###             ("_applC" ("_position" l') ("_position" V))))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h)
###         ("_tuple_args"
###           ("_MapUpd" ("_position" l)
###             ("_maplet" ("_position" V) ("_position" v)))
###           ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" e')
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###       ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val)
###           ("_applC" ("_position" the)
###             ("_applC" ("_position" l') ("_position" V))))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h)
###         ("_tuple_args"
###           ("_MapUpd" ("_position" l)
###             ("_maplet" ("_position" V) ("_position" v)))
###           ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" e')
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###       ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" the)
###               ("_applC" ("_position" l') ("_position" V)))))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###       ("_tuple" ("_position" h)
###         ("_tuple_args"
###           ("_MapUpd" ("_position" l)
###             ("_maplet" ("_position" V) ("_position" v)))
###           ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" e')
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###       ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val)
###             ("_applC" ("_position" the)
###               ("_applC" ("_position" l') ("_position" V)))))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 958 of "$AFP/JinjaDCI/J/Equivalence.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" final) ("_position" e')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" e')
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" final) ("_position" e')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" e')
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" final) ("_position" e')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" e')
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" final) ("_position" e')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.Step" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" e')
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 972 of "$AFP/JinjaDCI/J/Equivalence.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" h\<^sub>0)
###     ("_idts" ("_position" l\<^sub>0) ("_position" sh\<^sub>0)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" s\<^sub>0)
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_args"
###             ("_applC" ("_position" l\<^sub>0)
###               ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh\<^sub>0))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P)
###         ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###           ("_position" e\<^sub>0))
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_args" ("_position" l\<^sub>0)
###             ("_tuple_arg" ("_position" sh\<^sub>0))))
###         ("_position" b\<^sub>0) ("_position" e\<^sub>2)
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args"
###             ("_applC" ("_position" l\<^sub>2)
###               ("\<^const>Expr.exp.LAss" ("_position" V)
###                 ("_applC" ("_position" l\<^sub>0) ("_position" V))))
###             ("_tuple_arg" ("_position" sh\<^sub>2))))
###         ("_position" b\<^sub>2)))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" h\<^sub>0)
###     ("_idts" ("_position" l\<^sub>0) ("_position" sh\<^sub>0)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" s\<^sub>0)
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_args"
###             ("_Update" ("_position" l\<^sub>0)
###               ("_updbind" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh\<^sub>0))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P)
###         ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###           ("_position" e\<^sub>0))
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_args" ("_position" l\<^sub>0)
###             ("_tuple_arg" ("_position" sh\<^sub>0))))
###         ("_position" b\<^sub>0) ("_position" e\<^sub>2)
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args"
###             ("_applC" ("_position" l\<^sub>2)
###               ("\<^const>Expr.exp.LAss" ("_position" V)
###                 ("_applC" ("_position" l\<^sub>0) ("_position" V))))
###             ("_tuple_arg" ("_position" sh\<^sub>2))))
###         ("_position" b\<^sub>2)))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" h\<^sub>0)
###     ("_idts" ("_position" l\<^sub>0) ("_position" sh\<^sub>0)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" s\<^sub>0)
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_args"
###             ("_applC" ("_position" l\<^sub>0)
###               ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh\<^sub>0))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P)
###         ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###           ("_position" e\<^sub>0))
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_args" ("_position" l\<^sub>0)
###             ("_tuple_arg" ("_position" sh\<^sub>0))))
###         ("_position" b\<^sub>0) ("_position" e\<^sub>2)
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args"
###             ("_Update" ("_position" l\<^sub>2)
###               ("_updbind" ("_position" V)
###                 ("_applC" ("_position" l\<^sub>0) ("_position" V))))
###             ("_tuple_arg" ("_position" sh\<^sub>2))))
###         ("_position" b\<^sub>2)))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" h\<^sub>0)
###     ("_idts" ("_position" l\<^sub>0) ("_position" sh\<^sub>0)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" s\<^sub>0)
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_args"
###             ("_Update" ("_position" l\<^sub>0)
###               ("_updbind" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh\<^sub>0))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P)
###         ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###           ("_position" e\<^sub>0))
###         ("_tuple" ("_position" h\<^sub>0)
###           ("_tuple_args" ("_position" l\<^sub>0)
###             ("_tuple_arg" ("_position" sh\<^sub>0))))
###         ("_position" b\<^sub>0) ("_position" e\<^sub>2)
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args"
###             ("_Update" ("_position" l\<^sub>2)
###               ("_updbind" ("_position" V)
###                 ("_applC" ("_position" l\<^sub>0) ("_position" V))))
###             ("_tuple_arg" ("_position" sh\<^sub>2))))
###         ("_position" b\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1051 of "$AFP/JinjaDCI/J/Equivalence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStep.Step" ("_position" P)
###     ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###       ("_position" V) ("_position" e\<^sub>2))
###     ("_position" s\<^sub>0) ("_position" b\<^sub>0) ("_position" e\<^sub>2')
###     ("_tuple" ("_position" h\<^sub>2)
###       ("_tuple_args"
###         ("_applC"
###           ("_constrain" ("_position" l\<^sub>2) ("_type_name" locals))
###           ("\<^const>Expr.exp.LAss" ("_position" V)
###             ("_applC" ("_position" l\<^sub>1) ("_position" V))))
###         ("_tuple_arg" ("_position" sh\<^sub>2))))
###     ("_position" b\<^sub>2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SmallStep.Step" ("_position" P)
###     ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###       ("_position" V) ("_position" e\<^sub>2))
###     ("_position" s\<^sub>0) ("_position" b\<^sub>0) ("_position" e\<^sub>2')
###     ("_tuple" ("_position" h\<^sub>2)
###       ("_tuple_args"
###         ("_Update"
###           ("_constrain" ("_position" l\<^sub>2) ("_type_name" locals))
###           ("_updbind" ("_position" V)
###             ("_applC" ("_position" l\<^sub>1) ("_position" V))))
###         ("_tuple_arg" ("_position" sh\<^sub>2))))
###     ("_position" b\<^sub>2)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1153 of "$AFP/JinjaDCI/J/Equivalence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("_applC" ("_position" override_on)
###         ("_cargs" ("_position" f)
###           ("_cargs"
###             ("_MapUpd" ("_position" g)
###               ("_maplet" ("_position" a) ("_position" b)))
###             ("_position" A))))
###       ("\<^const>Expr.exp.LAss" ("_position" a)
###         ("_applC" ("_position" g) ("_position" a))))
###     ("_applC" ("_position" override_on)
###       ("_cargs" ("_position" f)
###         ("_cargs" ("_position" g)
###           ("_applC" ("_position" insert)
###             ("_cargs" ("_position" a) ("_position" A))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update"
###       ("_applC" ("_position" override_on)
###         ("_cargs" ("_position" f)
###           ("_cargs"
###             ("_MapUpd" ("_position" g)
###               ("_maplet" ("_position" a) ("_position" b)))
###             ("_position" A))))
###       ("_updbind" ("_position" a)
###         ("_applC" ("_position" g) ("_position" a))))
###     ("_applC" ("_position" override_on)
###       ("_cargs" ("_position" f)
###         ("_cargs" ("_position" g)
###           ("_applC" ("_position" insert)
###             ("_cargs" ("_position" a) ("_position" A))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1542 of "$AFP/JinjaDCI/J/Equivalence.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BigStep.eval" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" e') ("_position" s')))
###   ("\<^const>Pure.all_binder" ("_position" b)
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" iconf)
###           ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###             ("_position" e))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>EConform.bconf" ("_position" P)
###             ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###             ("_position" b)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###             ("_position" s) ("_position" b) ("_position" e')
###             ("_position" s') ("_position" False)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BigStep.eval" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" e') ("_position" s')))
###   ("\<^const>Pure.all_binder" ("_position" b)
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" iconf)
###           ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###             ("_position" e))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>EConform.bconfs" ("_position" P)
###             ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###             ("_position" b)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###             ("_position" s) ("_position" b) ("_position" e')
###             ("_position" s') ("_position" False)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1544 of "$AFP/JinjaDCI/J/Equivalence.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BigStep.evals" ("_position" P) ("_position" es)
###       ("_position" s) ("_position" es') ("_position" s')))
###   ("\<^const>Pure.all_binder" ("_position" b)
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" iconfs)
###           ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###             ("_position" es))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>EConform.bconf" ("_position" P)
###             ("_applC" ("_position" shp) ("_position" s)) ("_position" es)
###             ("_position" b)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>SmallStep.Steps" ("_position" P) ("_position" es)
###             ("_position" s) ("_position" b) ("_position" es')
###             ("_position" s') ("_position" False)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BigStep.evals" ("_position" P) ("_position" es)
###       ("_position" s) ("_position" es') ("_position" s')))
###   ("\<^const>Pure.all_binder" ("_position" b)
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" iconfs)
###           ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###             ("_position" es))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>EConform.bconfs" ("_position" P)
###             ("_applC" ("_position" shp) ("_position" s)) ("_position" es)
###             ("_position" b)))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>SmallStep.Steps" ("_position" P) ("_position" es)
###             ("_position" s) ("_position" b) ("_position" es')
###             ("_position" s') ("_position" False)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3267 of "$AFP/JinjaDCI/J/Equivalence.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" b) ("_position" e'') ("_position" s'')
###       ("_position" b'')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>EConform.bconfs" ("_position" P)
###         ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###         ("_position" b)))
###     ("\<^const>Pure.all_binder" ("_idts" ("_position" s') ("_position" e'))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>BigStep.eval" ("_position" P) ("_position" e'')
###             ("_position" s'') ("_position" e') ("_position" s')))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>BigStep.eval" ("_position" P) ("_position" e)
###             ("_position" s) ("_position" e') ("_position" s')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.red'" ("_position" P) ("_position" e)
###       ("_position" s) ("_position" b) ("_position" e'') ("_position" s'')
###       ("_position" b'')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>EConform.bconf" ("_position" P)
###         ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###         ("_position" b)))
###     ("\<^const>Pure.all_binder" ("_idts" ("_position" s') ("_position" e'))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>BigStep.eval" ("_position" P) ("_position" e'')
###             ("_position" s'') ("_position" e') ("_position" s')))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>BigStep.eval" ("_position" P) ("_position" e)
###             ("_position" s) ("_position" e') ("_position" s')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3269 of "$AFP/JinjaDCI/J/Equivalence.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###       ("_position" s) ("_position" b) ("_position" es'') ("_position" s'')
###       ("_position" b'')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>EConform.bconfs" ("_position" P)
###         ("_applC" ("_position" shp) ("_position" s)) ("_position" es)
###         ("_position" b)))
###     ("\<^const>Pure.all_binder" ("_idts" ("_position" s') ("_position" es'))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>BigStep.evals" ("_position" P) ("_position" es'')
###             ("_position" s'') ("_position" es') ("_position" s')))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>BigStep.evals" ("_position" P) ("_position" es)
###             ("_position" s) ("_position" es') ("_position" s')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>SmallStep.reds'" ("_position" P) ("_position" es)
###       ("_position" s) ("_position" b) ("_position" es'') ("_position" s'')
###       ("_position" b'')))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>EConform.bconf" ("_position" P)
###         ("_applC" ("_position" shp) ("_position" s)) ("_position" es)
###         ("_position" b)))
###     ("\<^const>Pure.all_binder" ("_idts" ("_position" s') ("_position" es'))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>BigStep.evals" ("_position" P) ("_position" es'')
###             ("_position" s'') ("_position" es') ("_position" s')))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>BigStep.evals" ("_position" P) ("_position" es)
###             ("_position" s) ("_position" es') ("_position" s')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4076 of "$AFP/JinjaDCI/J/Equivalence.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###         ("_position" s) ("_position" b) ("_position" e'') ("_position" s'')
###         ("_position" b'')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BigStep.eval" ("_position" P) ("_position" e'')
###           ("_position" s'') ("_position" e') ("_position" s')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" iconf)
###             ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###               ("_position" e))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>EConform.bconf" ("_position" P)
###               ("_applC" ("_position" shp) ("_position" s))
###               ("_constrain" ("_position" e) ("_type_name" expr))
###               ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BigStep.eval" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" e') ("_position" s'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###         ("_position" s) ("_position" b) ("_position" e'') ("_position" s'')
###         ("_position" b'')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BigStep.eval" ("_position" P) ("_position" e'')
###           ("_position" s'') ("_position" e') ("_position" s')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" iconf)
###             ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###               ("_position" e))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>EConform.bconfs" ("_position" P)
###               ("_applC" ("_position" shp) ("_position" s))
###               ("_constrain" ("_position" e) ("_type_name" expr))
###               ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BigStep.eval" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" e') ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4094 of "$AFP/JinjaDCI/J/Equivalence.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Steps" ("_position" P) ("_position" es)
###         ("_position" s) ("_position" b) ("_position" es'') ("_position" s'')
###         ("_position" b'')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BigStep.evals" ("_position" P) ("_position" es'')
###           ("_position" s'') ("_position" es') ("_position" s')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" iconfs)
###             ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###               ("_position" es))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>EConform.bconf" ("_position" P)
###               ("_applC" ("_position" shp) ("_position" s))
###               ("_constrain" ("_position" es)
###                 ("_tapp" ("_type_name" expr) ("_type_name" list)))
###               ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BigStep.evals" ("_position" P) ("_position" es)
###       ("_position" s) ("_position" es') ("_position" s'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Steps" ("_position" P) ("_position" es)
###         ("_position" s) ("_position" b) ("_position" es'') ("_position" s'')
###         ("_position" b'')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BigStep.evals" ("_position" P) ("_position" es'')
###           ("_position" s'') ("_position" es') ("_position" s')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" iconfs)
###             ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###               ("_position" es))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>EConform.bconfs" ("_position" P)
###               ("_applC" ("_position" shp) ("_position" s))
###               ("_constrain" ("_position" es)
###                 ("_tapp" ("_type_name" expr) ("_type_name" list)))
###               ("_position" b)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BigStep.evals" ("_position" P) ("_position" es)
###       ("_position" s) ("_position" es') ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4115 of "$AFP/JinjaDCI/J/Equivalence.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###         ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" iconf)
###           ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###             ("_position" e))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>EConform.bconf" ("_position" P)
###             ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###             ("_position" b)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" final) ("_position" e')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BigStep.eval" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" e') ("_position" s'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###         ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" iconf)
###           ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###             ("_position" e))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>EConform.bconfs" ("_position" P)
###             ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###             ("_position" b)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" final) ("_position" e')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BigStep.eval" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" e') ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4117 of "$AFP/JinjaDCI/J/Equivalence.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Steps" ("_position" P) ("_position" es)
###         ("_position" s) ("_position" b) ("_position" es') ("_position" s')
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" iconfs)
###           ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###             ("_position" es))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>EConform.bconf" ("_position" P)
###             ("_applC" ("_position" shp) ("_position" s)) ("_position" es)
###             ("_position" b)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" finals) ("_position" es')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BigStep.evals" ("_position" P) ("_position" es)
###       ("_position" s) ("_position" es') ("_position" s'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>SmallStep.Steps" ("_position" P) ("_position" es)
###         ("_position" s) ("_position" b) ("_position" es') ("_position" s')
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" iconfs)
###           ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###             ("_position" es))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>EConform.bconfs" ("_position" P)
###             ("_applC" ("_position" shp) ("_position" s)) ("_position" es)
###             ("_position" b)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" finals) ("_position" es')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BigStep.evals" ("_position" P) ("_position" es)
###       ("_position" s) ("_position" es') ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4148 of "$AFP/JinjaDCI/J/Equivalence.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wwf_J_prog) ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" iconf)
###           ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###             ("_position" e))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>EConform.bconf" ("_position" P)
###             ("_applC" ("_position" shp) ("_position" s))
###             ("_constrain" ("_position" e) ("_type_name" expr))
###             ("_position" b))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>BigStep.eval" ("_position" P) ("_position" e)
###         ("_position" s) ("_position" e') ("_position" s'))
###       ("\<^const>HOL.conj"
###         ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###           ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###           ("_position" False))
###         ("_applC" ("_position" final) ("_position" e'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wwf_J_prog) ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" iconf)
###           ("_cargs" ("_applC" ("_position" shp) ("_position" s))
###             ("_position" e))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>EConform.bconfs" ("_position" P)
###             ("_applC" ("_position" shp) ("_position" s))
###             ("_constrain" ("_position" e) ("_type_name" expr))
###             ("_position" b))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>BigStep.eval" ("_position" P) ("_position" e)
###         ("_position" s) ("_position" e') ("_position" s'))
###       ("\<^const>HOL.conj"
###         ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###           ("_position" s) ("_position" b) ("_position" e') ("_position" s')
###           ("_position" False))
###         ("_applC" ("_position" final) ("_position" e'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4153 of "$AFP/JinjaDCI/J/Equivalence.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" wwf_J_prog) ("_position" P)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###         ("_position" e) ("_position" T)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>EConform.bconfs" ("_position" P)
###           ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>BigStep.eval" ("_position" P) ("_position" e)
###             ("_position" s) ("_position" e') ("_position" s'))
###           ("\<^const>HOL.conj"
###             ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###               ("_position" s) ("_position" b) ("_position" e')
###               ("_position" s') ("_position" False))
###             ("_applC" ("_position" final) ("_position" e'))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" wwf_J_prog) ("_position" P)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###         ("_position" e) ("_position" T)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>EConform.bconf" ("_position" P)
###           ("_applC" ("_position" shp) ("_position" s)) ("_position" e)
###           ("_position" b)))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>BigStep.eval" ("_position" P) ("_position" e)
###             ("_position" s) ("_position" e') ("_position" s'))
###           ("\<^const>HOL.conj"
###             ("\<^const>SmallStep.Step" ("_position" P) ("_position" e)
###               ("_position" s) ("_position" b) ("_position" e')
###               ("_position" s') ("_position" False))
###             ("_applC" ("_position" final) ("_position" e'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4165 of "$AFP/JinjaDCI/J/Equivalence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4166 of "$AFP/JinjaDCI/J/Equivalence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###     ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###     ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4180 of "$AFP/JinjaDCI/J/Equivalence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>TypeSafe.sconf" ("_position" P) ("_position" E)
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" E)
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Equivalence"
### 2.918s elapsed time, 9.450s cpu time, 0.824s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 562 of "$AFP/JinjaDCI/Compiler/Correctness2.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Jcc_pieces)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" E)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" M)
###               ("_cargs" ("_position" h\<^sub>0)
###                 ("_cargs" ("_position" vs)
###                   ("_cargs" ("_position" ls\<^sub>0)
###                     ("_cargs" ("_position" pc)
###                       ("_cargs" ("_position" ics)
###                         ("_cargs" ("_position" frs)
###                           ("_cargs" ("_position" sh\<^sub>0)
###                             ("_cargs" ("_position" I)
###                               ("_cargs" ("_position" h\<^sub>2)
###                                 ("_cargs" ("_position" ls\<^sub>2)
###                                   ("_cargs" ("_position" sh\<^sub>2)
###                                     ("_cargs" ("_position" v)
### ("_cargs" ("_position" xa)
###   ("\<^const>Expr.exp.FAss" ("_position" e) ("_position" F) ("_position" D)
###     ("_position" e'))))))))))))))))))))
###     ("_tuple" ("_position" True)
###       ("_tuple_args" ("_position" frs\<^sub>0)
###         ("_tuple_args"
###           ("_tuple" ("_position" xp')
###             ("_tuple_args" ("_position" h')
###               ("_tuple_args"
###                 ("\<^const>List.list.Cons"
###                   ("_tuple"
###                     ("\<^const>List.list.Cons" ("_position" v)
###                       ("_position" vs'))
###                     ("_tuple_args" ("_position" ls')
###                       ("_tuple_args" ("_position" C\<^sub>0)
###                         ("_tuple_args" ("_position" M')
###                           ("_tuple_args" ("_position" pc')
###                             ("_tuple_arg" ("_position" ics')))))))
###                   ("_position" frs'))
###                 ("_tuple_arg" ("_position" sh')))))
###           ("_tuple_arg" ("_position" err)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Jcc_pieces)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" E)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" M)
###               ("_cargs" ("_position" h\<^sub>0)
###                 ("_cargs" ("_position" vs)
###                   ("_cargs" ("_position" ls\<^sub>0)
###                     ("_cargs" ("_position" pc)
###                       ("_cargs" ("_position" ics)
###                         ("_cargs" ("_position" frs)
###                           ("_cargs" ("_position" sh\<^sub>0)
###                             ("_cargs" ("_position" I)
###                               ("_cargs" ("_position" h\<^sub>2)
###                                 ("_cargs" ("_position" ls\<^sub>2)
###                                   ("_cargs" ("_position" sh\<^sub>2)
###                                     ("_cargs" ("_position" v)
### ("_cargs" ("_position" xa)
###   ("\<^const>Expr.exp.LAss"
###     ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###       ("_position" D))
###     ("_position" e'))))))))))))))))))))
###     ("_tuple" ("_position" True)
###       ("_tuple_args" ("_position" frs\<^sub>0)
###         ("_tuple_args"
###           ("_tuple" ("_position" xp')
###             ("_tuple_args" ("_position" h')
###               ("_tuple_args"
###                 ("\<^const>List.list.Cons"
###                   ("_tuple"
###                     ("\<^const>List.list.Cons" ("_position" v)
###                       ("_position" vs'))
###                     ("_tuple_args" ("_position" ls')
###                       ("_tuple_args" ("_position" C\<^sub>0)
###                         ("_tuple_args" ("_position" M')
###                           ("_tuple_args" ("_position" pc')
###                             ("_tuple_arg" ("_position" ics')))))))
###                   ("_position" frs'))
###                 ("_tuple_arg" ("_position" sh')))))
###           ("_tuple_arg" ("_position" err)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 573 of "$AFP/JinjaDCI/Compiler/Correctness2.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Jcc_pieces)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" E)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" M)
###               ("_cargs" ("_position" h\<^sub>0)
###                 ("_cargs" ("_position" vs)
###                   ("_cargs" ("_position" ls\<^sub>0)
###                     ("_cargs" ("_position" pc)
###                       ("_cargs" ("_position" ics)
###                         ("_cargs" ("_position" frs)
###                           ("_cargs" ("_position" sh\<^sub>0)
###                             ("_cargs" ("_position" I)
###                               ("_cargs" ("_position" h\<^sub>2)
###                                 ("_cargs" ("_position" ls\<^sub>2)
###                                   ("_cargs" ("_position" sh\<^sub>2)
###                                     ("_cargs" ("_position" v)
### ("_cargs" ("_position" xa)
###   ("\<^const>Expr.exp.FAss" ("_position" e) ("_position" F) ("_position" D)
###     ("_position" e'))))))))))))))))))))
###     ("_tuple" ("_position" True)
###       ("_tuple_args" ("_position" frs\<^sub>0)
###         ("_tuple_args"
###           ("_tuple" ("_position" xp')
###             ("_tuple_args" ("_position" h')
###               ("_tuple_args"
###                 ("\<^const>List.list.Cons"
###                   ("_tuple"
###                     ("\<^const>List.list.Cons" ("_position" v)
###                       ("_position" vs'))
###                     ("_tuple_args" ("_position" ls')
###                       ("_tuple_args" ("_position" C\<^sub>0)
###                         ("_tuple_args" ("_position" M')
###                           ("_tuple_args" ("_position" pc')
###                             ("_tuple_arg" ("_position" ics')))))))
###                   ("_position" frs'))
###                 ("_tuple_arg" ("_position" sh')))))
###           ("_tuple_arg" ("_position" err)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Jcc_pieces)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" E)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" M)
###               ("_cargs" ("_position" h\<^sub>0)
###                 ("_cargs" ("_position" vs)
###                   ("_cargs" ("_position" ls\<^sub>0)
###                     ("_cargs" ("_position" pc)
###                       ("_cargs" ("_position" ics)
###                         ("_cargs" ("_position" frs)
###                           ("_cargs" ("_position" sh\<^sub>0)
###                             ("_cargs" ("_position" I)
###                               ("_cargs" ("_position" h\<^sub>2)
###                                 ("_cargs" ("_position" ls\<^sub>2)
###                                   ("_cargs" ("_position" sh\<^sub>2)
###                                     ("_cargs" ("_position" v)
### ("_cargs" ("_position" xa)
###   ("\<^const>Expr.exp.LAss"
###     ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###       ("_position" D))
###     ("_position" e'))))))))))))))))))))
###     ("_tuple" ("_position" True)
###       ("_tuple_args" ("_position" frs\<^sub>0)
###         ("_tuple_args"
###           ("_tuple" ("_position" xp')
###             ("_tuple_args" ("_position" h')
###               ("_tuple_args"
###                 ("\<^const>List.list.Cons"
###                   ("_tuple"
###                     ("\<^const>List.list.Cons" ("_position" v)
###                       ("_position" vs'))
###                     ("_tuple_args" ("_position" ls')
###                       ("_tuple_args" ("_position" C\<^sub>0)
###                         ("_tuple_args" ("_position" M')
###                           ("_tuple_args" ("_position" pc')
###                             ("_tuple_arg" ("_position" ics')))))))
###                   ("_position" frs'))
###                 ("_tuple_arg" ("_position" sh')))))
###           ("_tuple_arg" ("_position" err)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 589 of "$AFP/JinjaDCI/Compiler/Correctness2.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Jcc_pieces)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" E)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" M)
###               ("_cargs" ("_position" h\<^sub>0)
###                 ("_cargs" ("_position" vs)
###                   ("_cargs" ("_position" ls\<^sub>0)
###                     ("_cargs" ("_position" pc)
###                       ("_cargs" ("_position" ics)
###                         ("_cargs" ("_position" frs)
###                           ("_cargs" ("_position" sh\<^sub>0)
###                             ("_cargs" ("_position" I)
###                               ("_cargs" ("_position" h')
###                                 ("_cargs" ("_position" ls')
###                                   ("_cargs" ("_position" sh')
###                                     ("_cargs" ("_position" v)
### ("_cargs" ("_position" xa)
###   ("\<^const>Expr.exp.SFAss" ("_position" C') ("_position" F)
###     ("_position" D) ("_position" e))))))))))))))))))))
###     ("_tuple" ("_position" True)
###       ("_tuple_args" ("_position" frs\<^sub>0)
###         ("_tuple_args"
###           ("_tuple" ("_position" xp')
###             ("_tuple_args" ("_position" h')
###               ("_tuple_args"
###                 ("\<^const>List.list.Cons"
###                   ("_tuple"
###                     ("\<^const>List.list.Cons" ("_position" v)
###                       ("_position" vs'))
###                     ("_tuple_args" ("_position" ls')
###                       ("_tuple_args" ("_position" C\<^sub>0)
###                         ("_tuple_args" ("_position" M')
###                           ("_tuple_args" ("_position" pc')
###                             ("_tuple_arg" ("_position" ics')))))))
###                   ("_position" frs'))
###                 ("_tuple_arg" ("_position" sh')))))
###           ("_tuple_arg" ("_position" err)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Jcc_pieces)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" E)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" M)
###               ("_cargs" ("_position" h\<^sub>0)
###                 ("_cargs" ("_position" vs)
###                   ("_cargs" ("_position" ls\<^sub>0)
###                     ("_cargs" ("_position" pc)
###                       ("_cargs" ("_position" ics)
###                         ("_cargs" ("_position" frs)
###                           ("_cargs" ("_position" sh\<^sub>0)
###                             ("_cargs" ("_position" I)
###                               ("_cargs" ("_position" h')
###                                 ("_cargs" ("_position" ls')
###                                   ("_cargs" ("_position" sh')
###                                     ("_cargs" ("_position" v)
### ("_cargs" ("_position" xa)
###   ("\<^const>Expr.exp.LAss"
###     ("\<^const>Expr.exp.SFAcc" ("_position" C') ("_position" F)
###       ("_position" D))
###     ("_position" e))))))))))))))))))))
###     ("_tuple" ("_position" True)
###       ("_tuple_args" ("_position" frs\<^sub>0)
###         ("_tuple_args"
###           ("_tuple" ("_position" xp')
###             ("_tuple_args" ("_position" h')
###               ("_tuple_args"
###                 ("\<^const>List.list.Cons"
###                   ("_tuple"
###                     ("\<^const>List.list.Cons" ("_position" v)
###                       ("_position" vs'))
###                     ("_tuple_args" ("_position" ls')
###                       ("_tuple_args" ("_position" C\<^sub>0)
###                         ("_tuple_args" ("_position" M')
###                           ("_tuple_args" ("_position" pc')
###                             ("_tuple_arg" ("_position" ics')))))))
###                   ("_position" frs'))
###                 ("_tuple_arg" ("_position" sh')))))
###           ("_tuple_arg" ("_position" err)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 996 of "$AFP/JinjaDCI/Compiler/Correctness2.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>JVMExec.exec_all" ("_position" P)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" vs)
###               ("_tuple_args" ("_position" l)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg"
###                         ("_applC" ("_position" Throwing)
###                           ("_cargs" ("_list" ("_position" C'))
###                             ("_position" xa)))))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))
###     ("_applC" ("_position" handle)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" M)
###             ("_cargs" ("_position" xa)
###               ("_cargs" ("_position" h)
###                 ("_cargs" ("_position" vs)
###                   ("_cargs" ("_position" l)
###                     ("_cargs" ("_position" pc)
###                       ("_cargs" ("_position" No_ics)
###                         ("_cargs" ("_position" frs)
###                           ("_Update" ("_position" sh)
###                             ("_updbind" ("_position" C')
###                               ("_applC" ("_position" Some)
###                                 ("_tuple"
###                                   ("_applC" ("_position" fst)
###                                     ("_applC" ("_position" the)
### ("_applC" ("_position" sh) ("_position" C'))))
###                                   ("_tuple_arg"
###                                     ("_position" Error)))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>JVMExec.exec_all" ("_position" P)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" vs)
###               ("_tuple_args" ("_position" l)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg"
###                         ("_applC" ("_position" Throwing)
###                           ("_cargs" ("_list" ("_position" C'))
###                             ("_position" xa)))))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))
###     ("_applC" ("_position" handle)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" M)
###             ("_cargs" ("_position" xa)
###               ("_cargs" ("_position" h)
###                 ("_cargs" ("_position" vs)
###                   ("_cargs" ("_position" l)
###                     ("_cargs" ("_position" pc)
###                       ("_cargs" ("_position" No_ics)
###                         ("_cargs" ("_position" frs)
###                           ("_applC" ("_position" sh)
###                             ("\<^const>Expr.exp.LAss" ("_position" C')
###                               ("_applC" ("_position" Some)
###                                 ("_tuple"
###                                   ("_applC" ("_position" fst)
###                                     ("_applC" ("_position" the)
### ("_applC" ("_position" sh) ("_position" C'))))
###                                   ("_tuple_arg"
###                                     ("_position" Error)))))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### theory "Draft.Correctness2"
### 65.917s elapsed time, 167.286s cpu time, 119.469s GC time
Loading theory "Draft.Compiler" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI" via "Draft.TypeComp")
### theory "Draft.Compiler"
### 0.246s elapsed time, 0.396s cpu time, 0.000s GC time
Loading theory "Draft.TypeComp" (required by "Draft.JinjaDCIMoreTemplates" via "Draft.JinjaDCI")
locale TC0
  fixes P :: "nat exp prog"
    and mxl :: "nat"
locale TC1
  fixes P :: "nat exp prog"
    and mxl :: "nat"
### Ambiguous input (line 105 of "$AFP/JinjaDCI/Compiler/TypeComp.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compT)
###       ("_cargs" ("_position" E)
###         ("_cargs" ("_position" A)
###           ("_cargs" ("_position" ST)
###             ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1)
###               ("_position" F) ("_position" D) ("_position" e\<^sub>2))))))
###     ("_Let"
###       ("_binds"
###         ("_bind" ("_position" ST\<^sub>1)
###           ("\<^const>List.list.Cons"
###             ("_applC" ("_position" ty)
###               ("_cargs" ("_position" E) ("_position" e\<^sub>1)))
###             ("_position" ST)))
###         ("_binds"
###           ("_bind" ("_position" A\<^sub>1)
###             ("\<^const>DefAss.hyperUn" ("_position" A)
###               ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))))
###           ("_bind" ("_position" A\<^sub>2)
###             ("\<^const>DefAss.hyperUn" ("_position" A\<^sub>1)
###               ("_applC" ("_position" \<A>) ("_position" e\<^sub>2))))))
###       ("\<^const>List.append"
###         ("_applC" ("_position" compT)
###           ("_cargs" ("_position" E)
###             ("_cargs" ("_position" A)
###               ("_cargs" ("_position" ST) ("_position" e\<^sub>1)))))
###         ("\<^const>List.append"
###           ("_list"
###             ("_applC" ("_position" after)
###               ("_cargs" ("_position" E)
###                 ("_cargs" ("_position" A)
###                   ("_cargs" ("_position" ST) ("_position" e\<^sub>1))))))
###           ("\<^const>List.append"
###             ("_applC" ("_position" compT)
###               ("_cargs" ("_position" E)
###                 ("_cargs" ("_position" A\<^sub>1)
###                   ("_cargs" ("_position" ST\<^sub>1)
###                     ("_position" e\<^sub>2)))))
###             ("\<^const>List.append"
###               ("_list"
###                 ("_applC" ("_position" after)
###                   ("_cargs" ("_position" E)
###                     ("_cargs" ("_position" A\<^sub>1)
###                       ("_cargs" ("_position" ST\<^sub>1)
###                         ("_position" e\<^sub>2))))))
###               ("_list"
###                 ("_applC" ("_position" ty\<^sub>i')
###                   ("_cargs" ("_position" ST)
###                     ("_cargs" ("_position" E)
###                       ("_position" A\<^sub>2))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compT)
###       ("_cargs" ("_position" E)
###         ("_cargs" ("_position" A)
###           ("_cargs" ("_position" ST)
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1)
###                 ("_position" F) ("_position" D))
###               ("_position" e\<^sub>2))))))
###     ("_Let"
###       ("_binds"
###         ("_bind" ("_position" ST\<^sub>1)
###           ("\<^const>List.list.Cons"
###             ("_applC" ("_position" ty)
###               ("_cargs" ("_position" E) ("_position" e\<^sub>1)))
###             ("_position" ST)))
###         ("_binds"
###           ("_bind" ("_position" A\<^sub>1)
###             ("\<^const>DefAss.hyperUn" ("_position" A)
###               ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))))
###           ("_bind" ("_position" A\<^sub>2)
###             ("\<^const>DefAss.hyperUn" ("_position" A\<^sub>1)
###               ("_applC" ("_position" \<A>) ("_position" e\<^sub>2))))))
###       ("\<^const>List.append"
###         ("_applC" ("_position" compT)
###           ("_cargs" ("_position" E)
###             ("_cargs" ("_position" A)
###               ("_cargs" ("_position" ST) ("_position" e\<^sub>1)))))
###         ("\<^const>List.append"
###           ("_list"
###             ("_applC" ("_position" after)
###               ("_cargs" ("_position" E)
###                 ("_cargs" ("_position" A)
###                   ("_cargs" ("_position" ST) ("_position" e\<^sub>1))))))
###           ("\<^const>List.append"
###             ("_applC" ("_position" compT)
###               ("_cargs" ("_position" E)
###                 ("_cargs" ("_position" A\<^sub>1)
###                   ("_cargs" ("_position" ST\<^sub>1)
###                     ("_position" e\<^sub>2)))))
###             ("\<^const>List.append"
###               ("_list"
###                 ("_applC" ("_position" after)
###                   ("_cargs" ("_position" E)
###                     ("_cargs" ("_position" A\<^sub>1)
###                       ("_cargs" ("_position" ST\<^sub>1)
###                         ("_position" e\<^sub>2))))))
###               ("_list"
###                 ("_applC" ("_position" ty\<^sub>i')
###                   ("_cargs" ("_position" ST)
###                     ("_cargs" ("_position" E)
###                       ("_position" A\<^sub>2))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 110 of "$AFP/JinjaDCI/Compiler/TypeComp.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compT)
###       ("_cargs" ("_position" E)
###         ("_cargs" ("_position" A)
###           ("_cargs" ("_position" ST)
###             ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###               ("_position" D) ("_position" e\<^sub>2))))))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compT)
###         ("_cargs" ("_position" E)
###           ("_cargs" ("_position" A)
###             ("_cargs" ("_position" ST) ("_position" e\<^sub>2)))))
###       ("\<^const>List.append"
###         ("_list"
###           ("_applC" ("_position" after)
###             ("_cargs" ("_position" E)
###               ("_cargs" ("_position" A)
###                 ("_cargs" ("_position" ST) ("_position" e\<^sub>2))))))
###         ("_list"
###           ("_applC" ("_position" ty\<^sub>i')
###             ("_cargs" ("_position" ST)
###               ("_cargs" ("_position" E)
###                 ("\<^const>DefAss.hyperUn" ("_position" A)
###                   ("_applC" ("_position" \<A>)
###                     ("_position" e\<^sub>2)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compT)
###       ("_cargs" ("_position" E)
###         ("_cargs" ("_position" A)
###           ("_cargs" ("_position" ST)
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###                 ("_position" D))
###               ("_position" e\<^sub>2))))))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compT)
###         ("_cargs" ("_position" E)
###           ("_cargs" ("_position" A)
###             ("_cargs" ("_position" ST) ("_position" e\<^sub>2)))))
###       ("\<^const>List.append"
###         ("_list"
###           ("_applC" ("_position" after)
###             ("_cargs" ("_position" E)
###               ("_cargs" ("_position" A)
###                 ("_cargs" ("_position" ST) ("_position" e\<^sub>2))))))
###         ("_list"
###           ("_applC" ("_position" ty\<^sub>i')
###             ("_cargs" ("_position" ST)
###               ("_cargs" ("_position" E)
###                 ("\<^const>DefAss.hyperUn" ("_position" A)
###                   ("_applC" ("_position" \<A>)
###                     ("_position" e\<^sub>2)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  compT ::
    "ty list
     => nat set option
        => ty list => nat exp => (ty list * ty err list) option list"
  compTs ::
    "ty list
     => nat set option
        => ty list => nat exp list => (ty list * ty err list) option list"
locale TC2
  fixes P :: "nat exp prog"
    and mxl :: "nat"
    and T\<^sub>r :: "ty"
    and mxs :: "nat"
### Rewrite rule not in simpset:
### %u. ?f1 (?g1 (fst u)) (snd u) == %a. case a of (x, xa) => ?f1 (?g1 x) xa
*** Undefined fact: "wti" (line 504 of "$AFP/JinjaDCI/Compiler/TypeComp.thy")
*** At command "thm" (line 504 of "$AFP/JinjaDCI/Compiler/TypeComp.thy")
*** Undefined fact: "compT_sizes" (line 1258 of "$AFP/JinjaDCI/Compiler/TypeComp.thy")4TC1.compT_sizesfactTypeComp.TC1.compT_sizesTC1.compT_sizes'factTypeComp.TC1.compT_sizes'TypeComp.TC1.compT_sizesfactTypeComp.TC1.compT_sizesTypeComp.TC1.compT_sizes'factTypeComp.TC1.compT_sizes'
*** At command "thm" (line 1258 of "$AFP/JinjaDCI/Compiler/TypeComp.thy")
locale TC2
  fixes P :: "nat exp prog"
    and mxl :: "nat"
    and T\<^sub>r :: "ty"
    and mxs :: "nat"
### theory "Draft.TypeComp"
### 1.342s elapsed time, 1.576s cpu time, 0.147s GC time
Loading theory "Draft.JinjaDCI" (required by "Draft.JinjaDCIMoreTemplates")
### theory "Draft.JinjaDCI"
### 0.783s elapsed time, 0.887s cpu time, 0.138s GC time
Loading theory "Draft.JinjaDCIMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.JinjaDCIMoreTemplates"
### 0.640s elapsed time, 0.894s cpu time, 0.000s GC time
*** Undefined fact: "compT_sizes" (line 1258 of "$AFP/JinjaDCI/Compiler/TypeComp.thy")4TC1.compT_sizesfactTypeComp.TC1.compT_sizesTC1.compT_sizes'factTypeComp.TC1.compT_sizes'TypeComp.TC1.compT_sizesfactTypeComp.TC1.compT_sizesTypeComp.TC1.compT_sizes'factTypeComp.TC1.compT_sizes'
*** At command "thm" (line 1258 of "$AFP/JinjaDCI/Compiler/TypeComp.thy")
*** Undefined fact: "wti" (line 504 of "$AFP/JinjaDCI/Compiler/TypeComp.thy")
*** At command "thm" (line 504 of "$AFP/JinjaDCI/Compiler/TypeComp.thy")
*** Undefined fact: "semilat" (line 104 of "$AFP/Jinja/DFA/SemilatAlg.thy")768semilat_DeffactSemilat.semilat_Defsemilat_deffactSemilat.semilat_defsemilat_errIfactErr.semilat_errIsemilat_le_err_Err_plusfactErr.semilat_le_err_Err_plussemilat_le_err_OK1factErr.semilat_le_err_OK1semilat_le_err_OK2factErr.semilat_le_err_OK2semilat_le_err_plus_ErrfactErr.semilat_le_err_plus_Errsemilat_optfactOpt.semilat_optsemilattice_axioms_deffactLattices.semilattice_axioms_defsemilattice_deffactLattices.semilattice_defsemilattice_inf_axiomsfactLattices.semilattice_inf_class.semilattice_inf_axiomssemilattice_inf_class_deffactLattices.semilattice_inf_class_defsemilattice_map2factList.semilattice_map2semilattice_neutr_deffactLattices.semilattice_neutr_defsemilattice_neutr_order_deffactLattices.semilattice_neutr_order_defsemilattice_neutr_set_deffactLattices_Big.semilattice_neutr_set_defsemilattice_order_axioms_deffactLattices.semilattice_order_axioms_defsemilattice_order_deffactLattices.semilattice_order_defsemilattice_order_neutr_set_deffactLattices_Big.semilattice_order_neutr_set_defsemilattice_order_set_deffactLattices_Big.semilattice_order_set_defsemilattice_set_deffactLattices_Big.semilattice_set_defsemilattice_sup_axiomsfactLattices.semilattice_sup_class.semilattice_sup_axiomssemilattice_sup_class_deffactLattices.semilattice_sup_class_defsemilattice.axiomsfactLattices.semilattice.axiomssemilattice.idemfactLattices.semilattice.idemsemilattice.introfactLattices.semilattice.introsemilattice.left_idemfactLattices.semilattice.left_idemsemilattice.right_idemfactLattices.semilattice.right_idemsemilattice_axioms.introfactLattices.semilattice_axioms.introsemilattice_inf.Inf_fin_deffactLattices_Big.semilattice_inf.Inf_fin_defsemilattice_inf.comp_fun_idem_inffactFinite_Set.semilattice_inf.comp_fun_idem_infsemilattice_inf.inf_absorb1factLattices.semilattice_inf.inf_absorb1semilattice_inf.inf_absorb2factLattices.semilattice_inf.inf_absorb2semilattice_inf.inf_acifactLattices.semilattice_inf.inf_acisemilattice_inf.inf_assocfactLattices.semilattice_inf.inf_assocsemilattice_inf.inf_commutefactLattices.semilattice_inf.inf_commutesemilattice_inf.inf_greatestfactLattices.semilattice_inf.inf_greatestsemilattice_inf.inf_idemfactLattices.semilattice_inf.inf_idemsemilattice_inf.inf_le1factLattices.semilattice_inf.inf_le1semilattice_inf.inf_le2factLattices.semilattice_inf.inf_le2
*** At command "thm" (line 104 of "$AFP/Jinja/DFA/SemilatAlg.thy")
Exception- TOPLEVEL_ERROR raised
