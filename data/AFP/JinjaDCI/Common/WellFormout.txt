Loading theory "Draft.Auxiliary" (required by "Draft.WellFormMoreTemplates" via "Draft.WellForm" via "Draft.TypeRel" via "Draft.Decl" via "Draft.Type")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.WellFormMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.WellFormMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.WellFormMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.169s elapsed time, 0.689s cpu time, 0.044s GC time
Loading theory "HOL-Library.Transitive_Closure_Table" (required by "Draft.WellFormMoreTemplates" via "Draft.WellForm" via "Draft.TypeRel")
Proofs for inductive predicate(s) "rtrancl_path"
### theory "Draft.Auxiliary"
### 0.210s elapsed time, 0.852s cpu time, 0.044s GC time
Loading theory "Draft.Type" (required by "Draft.WellFormMoreTemplates" via "Draft.WellForm" via "Draft.TypeRel" via "Draft.Decl")
  Proving monotonicity ...
Found termination order: "size_list size <*mlex*> {}"
Proofs for inductive predicate(s) "rtrancl_tab"
  Proving monotonicity ...
### theory "HOL-Library.Set_Algebras"
### 0.295s elapsed time, 1.197s cpu time, 0.044s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.WellFormMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.404s elapsed time, 1.618s cpu time, 0.147s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.WellFormMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Transitive_Closure_Table"
### 0.502s elapsed time, 1.988s cpu time, 0.192s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.WellFormMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### theory "Draft.Type"
### 1.070s elapsed time, 4.214s cpu time, 0.396s GC time
Loading theory "Draft.Decl" (required by "Draft.WellFormMoreTemplates" via "Draft.WellForm" via "Draft.TypeRel")
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Decl"
### 0.081s elapsed time, 0.333s cpu time, 0.000s GC time
Loading theory "Draft.TypeRel" (required by "Draft.WellFormMoreTemplates" via "Draft.WellForm")
### theory "HOL-Library.Stream"
### 0.951s elapsed time, 3.762s cpu time, 0.293s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "subcls1p"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  supercls_lst :: "'m prog => char list list => bool"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "widen"
  Proving monotonicity ...
### theory "HOL-Library.BigO"
### 1.226s elapsed time, 4.343s cpu time, 0.916s GC time
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Methods"
  Proving monotonicity ...
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Fields"
  Proving monotonicity ...
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.TypeRel"
### 1.010s elapsed time, 2.631s cpu time, 0.830s GC time
Loading theory "Draft.Value" (required by "Draft.WellFormMoreTemplates" via "Draft.WellForm" via "Draft.SystemClasses" via "Draft.Exceptions" via "Draft.Objects")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.308s elapsed time, 7.322s cpu time, 1.279s GC time
Loading theory "Draft.Templates" (required by "Draft.WellFormMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.059s elapsed time, 0.115s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.WellFormMoreTemplates")
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Addr"
consts
  the_Intg :: "val => int"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_Addr :: "val => nat"
consts
  default_val :: "ty => val"
### theory "Draft.Value"
### 0.436s elapsed time, 0.938s cpu time, 0.143s GC time
Loading theory "Draft.Objects" (required by "Draft.WellFormMoreTemplates" via "Draft.WellForm" via "Draft.SystemClasses" via "Draft.Exceptions")
consts
  typeof_h :: "heap => val => ty option"
Proofs for inductive predicate(s) "iprog"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.625s elapsed time, 1.334s cpu time, 0.186s GC time
  Proving monotonicity ...
### theory "Draft.Objects"
### 0.514s elapsed time, 1.038s cpu time, 0.095s GC time
Loading theory "Draft.Exceptions" (required by "Draft.WellFormMoreTemplates" via "Draft.WellForm" via "Draft.SystemClasses")
### theory "Draft.Exceptions"
### 0.166s elapsed time, 0.167s cpu time, 0.000s GC time
Loading theory "Draft.SystemClasses" (required by "Draft.WellFormMoreTemplates" via "Draft.WellForm")
### theory "Draft.SystemClasses"
### 0.081s elapsed time, 0.125s cpu time, 0.059s GC time
Loading theory "Draft.WellForm" (required by "Draft.WellFormMoreTemplates")
### theory "Draft.WellForm"
### 0.229s elapsed time, 0.229s cpu time, 0.000s GC time
Loading theory "Draft.WellFormMoreTemplates"
val templateLemmas =
   [("WellForm.single_valued_subcls1",
     "wf_prog ?wf_md ?G ==> single_valued (subcls1 ?G)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("WellForm.is_class_Object", "wf_prog ?wf_md ?P ==> is_class ?P Object",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("WellForm.acyclic_subcls1",
     "wf_prog ?wf_md ?P ==> acyclic (subcls1 ?P)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("WellForm.wf_subcls1", "wf_prog ?wf_md ?P ==> wf ((subcls1 ?P)^-1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("WellForm.wf_syscls", "set SystemClasses <= set ?P ==> wf_syscls ?P",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 2, template_hole 1),
          template_app (template_hole 2, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("WellForm.is_class_xcpt",
     "[| ?C : sys_xcpts; wf_prog ?wf_md ?P |] ==> is_class ?P ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_hole 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 2)
           ))),
    ("WellForm.wf_Fields_Ex",
     "[| wf_prog ?wf_md ?P; is_class ?P ?C |]
      ==> EX FDTs. ?P \<turnstile> ?C has_fields FDTs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("WellForm.subcls_C_Object",
     "[| is_class ?P ?C; wf_prog ?wf_md ?P |]
      ==> ?P \<turnstile> ?C \<preceq>\<^sup>* Object",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)))
           ))),
    ("WellForm.sees_field_is_type",
     "[| ?P \<turnstile> ?C sees ?F,?b:?T in ?D; wf_prog ?wf_md ?P |]
      ==> is_type ?P ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 6)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 6), template_var 2)
           ))),
    ("WellForm.subcls_irrefl",
     "[| wf_prog ?wf_md ?P; (?C, ?D) : (subcls1 ?P)^+ |] ==> ?C ~= ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 2)))
            )],
       template_negation
        (template_equation (template_var 1, template_var 0)))),
    ("WellForm.class_wf",
     "[| class ?P ?C = \<lfloor>?c\<rfloor>; wf_prog ?wf_md ?P |]
      ==> wf_cdecl ?wf_md ?P (?C, ?c)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 2),
          template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           ))),
    ("WellForm.wf_cdecl_supD",
     "[| wf_cdecl ?wf_md ?P (?C, ?D, ?r); ?C ~= Object |]
      ==> is_class ?P ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)))
            ),
        template_negation
         (template_equation (template_var 2, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 3), template_var 1)
           ))),
    ("WellForm.class_Object",
     "wf_prog ?wf_md ?P ==>
      EX C fs ms. class ?P Object = \<lfloor>(C, fs, ms)\<rfloor>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("WellForm.subcls_asym",
     "[| wf_prog ?wf_md ?P; (?C, ?D) : (subcls1 ?P)^+ |]
      ==> (?D, ?C) ~: (subcls1 ?P)^+",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_var 1)),
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 2)))
               )
           ))),
    ("WellForm.is_class_supclass",
     "[| wf_prog ?wf_md ?P; ?P \<turnstile> ?C \<preceq>\<^sup>* ?D;
         is_class ?P ?C |]
      ==> is_class ?P ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("WellForm.wf_sees_clinit",
     "[| wf_prog ?wf_md ?P; class ?P ?C = \<lfloor>?a\<rfloor> |]
      ==> EX m. ?P \<turnstile> ?C sees clinit, Static :  []\<rightarrow>Void = m in ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 2), template_var 1),
          template_app (template_hole 6, template_var 0))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("WellForm.wf_nclass_nsub",
     "[| wf_prog ?wf_md ?P; is_class ?P ?C; ~ is_class ?P ?C' |]
      ==> (?C, ?C') ~: (subcls1 ?P)^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 0)
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0)),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)))
               )
           ))),
    ("WellForm.wf_sys_xcpt_nsub_Start",
     "[| wf_prog ?wf_md ?P; ~ is_class ?P Start; ?C : sys_xcpts |]
      ==> (?C, Start) ~: (subcls1 ?P)^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_hole 6)
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_hole 6)),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1)))
               )
           ))),
    ("WellForm.has_fields_types",
     "[| ?P \<turnstile> ?C has_fields ?FDTs; (?FD, ?b, ?T) : set ?FDTs;
         wf_prog ?wf_md ?P |]
      ==> is_type ?P ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 1))),
              template_app (template_hole 2, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 6)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 6), template_var 1)
           ))),
    ("WellForm.wf_NonStatic_nclinit",
     "[| wf_prog ?wf_md ?P;
         ?P \<turnstile> ?C sees ?M, NonStatic :  ?Ts\<rightarrow>?T = (?mxs,
                                  ?mxl, ?ins, ?xt) in ?D |]
      ==> ?M ~= clinit",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 10),
              template_var 9)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 7, template_var 9),
                          template_var 8),
                        template_var 7),
                      template_hole 6),
                    template_var 6),
                  template_var 5),
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_app
                     (template_app (template_hole 3, template_var 2),
                      template_var 1)))),
              template_var 0)
            )],
       template_negation
        (template_equation (template_var 7, template_hole 0)))),
    ("WellForm.subcls1_wfD",
     "[| ?P \<turnstile> ?C \<prec>\<^sup>1 ?D; wf_prog ?wf_md ?P |]
      ==> ?D ~= ?C & (?D, ?C) ~: (subcls1 ?P)^+",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2)),
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 3))),
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 2),
                     template_var 3)),
                 template_app
                  (template_hole 0,
                   template_app (template_hole 5, template_var 1)))))
           ))),
    ("WellForm.wf_subcls_nCls'",
     "[| wf_prog ?wf_md ?P; ~ is_class ?P ?C\<^sub>0; ?cd : set ?P |]
      ==> (fst ?cd, ?C\<^sub>0) ~: (subcls1 ?P)^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 1)
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app (template_hole 5, template_var 2))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0)),
                     template_var 1)),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)))
               )
           ))),
    ("WellForm.subcls_induct",
     "[| wf_prog ?wf_md ?P;
         !!C. ALL D. (C, D) : (subcls1 ?P)^+ --> ?Q D ==> ?Q C |]
      ==> ?Q ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("WellForm.sees_wf_mdecl",
     "[| wf_prog ?wf_md ?P;
         ?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = ?m in ?D |]
      ==> wf_mdecl ?wf_md ?P ?D (?M, ?b, ?Ts, ?T, ?m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 8),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 5, template_var 7),
                          template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 8),
                 template_var 7),
               template_var 0),
             template_app
              (template_app (template_hole 3, template_var 5),
               template_app
                (template_app (template_hole 2, template_var 4),
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 1)))))
           ))),
    ("WellForm.wf_subcls_nCls",
     "[| wf_prog ?wf_md ?P; ~ is_class ?P ?C;
         ?P \<turnstile> ?D \<preceq>\<^sup>* ?D'; ?D ~= ?C |]
      ==> ?D' ~= ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_var 3)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)))
            ),
        template_negation
         (template_equation (template_var 1, template_var 2))],
       template_negation
        (template_equation (template_var 0, template_var 2)))),
    ("WellForm.is_type_pTs",
     "[| wf_prog ?wf_md ?P; (?C, ?S, ?fs, ?ms) : set ?P;
         (?M, ?b, ?Ts, ?T, ?m) : set ?ms |]
      ==> set ?Ts <= types ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 10),
              template_var 9)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_var 8),
                  template_app
                   (template_app (template_hole 12, template_var 7),
                    template_app
                     (template_app (template_hole 11, template_var 6),
                      template_var 5)))),
              template_app (template_hole 10, template_var 9))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 4),
                  template_app
                   (template_app (template_hole 7, template_var 3),
                    template_app
                     (template_app (template_hole 6, template_var 2),
                      template_app
                       (template_app (template_hole 5, template_var 1),
                        template_var 0))))),
              template_app (template_hole 4, template_var 5))
            )],
       template_inequation
        (less_equals, template_app (template_hole 2, template_var 2),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 9))))),
    ("WellForm.wf_sees_clinit1",
     "[| wf_prog ?wf_md ?P; class ?P ?C = \<lfloor>?a\<rfloor>;
         ?P \<turnstile> ?C sees clinit, ?b :  ?Ts\<rightarrow>?T = ?m in ?D |]
      ==> ?b = Static & ?Ts = [] & ?T = Void & ?D = ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 8),
              template_var 7)
            ),
        template_equation
         (template_app
           (template_app (template_hole 11, template_var 7),
            template_var 6),
          template_app (template_hole 10, template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 9, template_var 7),
                          template_var 6),
                        template_hole 8),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 4),
                 template_hole 5)),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_hole 3)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_hole 1)),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 6))))
           ))),
    ("WellForm.mdecl_visible",
     "[| wf_prog ?wf_md ?P; (?C, ?S, ?fs, ?ms) : set ?P;
         (?M, ?b, ?Ts, ?T, ?m) : set ?ms |]
      ==> ?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = ?m in ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 10),
              template_var 9)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 8),
                  template_app
                   (template_app (template_hole 9, template_var 7),
                    template_app
                     (template_app (template_hole 8, template_var 6),
                      template_var 5)))),
              template_app (template_hole 7, template_var 9))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_app
                     (template_app (template_hole 3, template_var 2),
                      template_app
                       (template_app (template_hole 2, template_var 1),
                        template_var 0))))),
              template_app (template_hole 1, template_var 5))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 9),
                         template_var 8),
                       template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0),
             template_var 8)
           ))),
    ("WellForm.wf_supercls_distinct_app",
     "[| wf_prog ?wf_md ?P; ?C ~= Object;
         class ?P ?C = \<lfloor>(?D, ?fs, ?ms)\<rfloor>;
         supercls_lst ?P (?C # ?Cs); distinct (?C # ?Cs) |]
      ==> distinct (?D # ?C # ?Cs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 6),
              template_var 5)
            ),
        template_negation
         (template_equation (template_var 4, template_hole 8)),
        template_equation
         (template_app
           (template_app (template_hole 6, template_var 5), template_var 4),
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1)))),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 5),
              template_app
               (template_app (template_hole 1, template_var 4),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 0,
              template_app
               (template_app (template_hole 1, template_var 4),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 0)))
           ))),
    ("WellForm.subcls1_induct",
     "[| wf_prog ?wf_md ?P; is_class ?P ?C; ?Q Object;
         !!C D.
            [| C ~= Object; ?P \<turnstile> C \<prec>\<^sup>1 D;
               is_class ?P D; ?Q D |]
            ==> ?Q C |]
      ==> ?Q ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_var 0, template_hole 6)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("WellForm.sees_method_mono2",
     "[| ?P \<turnstile> ?C' \<preceq>\<^sup>* ?C; wf_prog ?wf_md ?P;
         ?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = ?m in ?D;
         ?P \<turnstile> ?C' sees ?M, ?b' :  ?Ts'\<rightarrow>?T' = ?m' in ?D' |]
      ==> ?b = ?b' &
          ?P \<turnstile> ?Ts [\<le>] ?Ts' & ?P \<turnstile> ?T' \<le> ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 14),
                  template_var 13)),
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 12)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 11),
              template_var 12)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 4, template_var 12),
                          template_var 13),
                        template_var 10),
                      template_var 9),
                    template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 4, template_var 12),
                          template_var 14),
                        template_var 10),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 9),
                 template_var 4)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 1,
                       template_app (template_hole 0, template_var 12)),
                     template_var 8),
                   template_var 3)),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 12),
                   template_var 2),
                 template_var 7)))
           ))),
    ("WellForm.sees_method_mono",
     "[| ?P \<turnstile> ?C' \<preceq>\<^sup>* ?C; wf_prog ?wf_md ?P;
         ?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = ?m in ?D |]
      ==> EX D' Ts' T' m'.
             ?P \<turnstile> ?C' sees ?M, ?b :  Ts'\<rightarrow>T' = m' in D' &
             ?P \<turnstile> ?Ts [\<le>] Ts' & ?P \<turnstile> T' \<le> ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 9),
                  template_var 8)),
              template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 7)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 6),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 7, template_var 7),
                          template_var 8),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("WellForm.mdecls_visible",
     "[| wf_prog ?wf_md ?P; is_class ?P ?C;
         class ?P ?C = \<lfloor>(?D, ?fs, ?ms)\<rfloor> |]
      ==> EX Mm.
             ?P \<turnstile> ?C sees_methods Mm &
             (ALL (M, b, Ts, T, m):set ?ms.
                 Mm M = \<lfloor>((b, Ts, T, m), ?C)\<rfloor>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 21, template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 20, template_var 4),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 18, template_var 4),
            template_var 3),
          template_app
           (template_hole 17,
            template_app
             (template_app (template_hole 16, template_var 2),
              template_app
               (template_app (template_hole 15, template_var 1),
                template_var 0))))],
       template_predicate (template_app (template_hole 14, t_empty)))),
    ("WellForm.subcls1_induct_aux",
     "[| is_class ?P ?C; wf_prog ?wf_md ?P; ?Q Object;
         !!C D fs ms.
            [| C ~= Object; is_class ?P C;
               class ?P C = \<lfloor>(D, fs, ms)\<rfloor> &
               wf_cdecl ?wf_md ?P (C, D, fs, ms) &
               ?P \<turnstile> C \<prec>\<^sup>1 D & is_class ?P D & ?Q D |]
            ==> ?Q C |]
      ==> ?Q ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 1),
              template_var 3)
            ),
        template_predicate
         (template_app (template_var 0, template_hole 16)),
        template_predicate (template_app (template_hole 15, t_empty))],
       template_predicate (template_app (template_var 0, template_var 2)))),
    ("WellForm.Call_lemma",
     "[| ?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = ?m in ?D;
         ?P \<turnstile> ?C' \<preceq>\<^sup>* ?C; wf_prog ?wf_md ?P |]
      ==> EX D' Ts' T' m'.
             ?P \<turnstile> ?C' sees ?M, ?b :  Ts'\<rightarrow>T' = m' in D' &
             ?P \<turnstile> ?Ts [\<le>] Ts' &
             ?P \<turnstile> T' \<le> ?T &
             ?P \<turnstile> ?C' \<preceq>\<^sup>* D' &
             is_type ?P T' &
             (ALL T:set Ts'. is_type ?P T) &
             ?wf_md ?P D' (?M, ?b, Ts', T', m')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 19, template_var 9),
                          template_var 8),
                        template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_app (template_hole 17, template_var 1),
                  template_var 8)),
              template_app
               (template_hole 16,
                template_app (template_hole 15, template_var 9)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 0),
              template_var 9)
            )],
       template_predicate (template_app (template_hole 13, t_empty)))),
    ("WellForm.wf_prog_lift",
     "[| wf_prog ?A ?P;
         !!wf_md C M b Ts Ca T m bd.
            [| wf_prog wf_md ?P;
               ?P \<turnstile> Ca sees M, b :  Ts\<rightarrow>T = m in Ca;
               set Ts <= types ?P; bd = (M, b, Ts, T, m); ?A ?P Ca bd |]
            ==> ?B ?P Ca bd |]
      ==> wf_prog ?B ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 18, t_empty), template_var 1)
            ),
        template_predicate (template_app (template_hole 17, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 18, t_empty), template_var 1)
           )))]:
   (string * thm * template) list
### theory "Draft.WellFormMoreTemplates"
### 0.430s elapsed time, 0.618s cpu time, 0.080s GC time
val it = (): unit
