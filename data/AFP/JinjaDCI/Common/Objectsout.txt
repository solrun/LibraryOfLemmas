Loading theory "Draft.Auxiliary" (required by "Draft.ObjectsMoreTemplates" via "Draft.Objects" via "Draft.TypeRel" via "Draft.Decl" via "Draft.Type")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ObjectsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ObjectsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ObjectsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.120s elapsed time, 0.501s cpu time, 0.048s GC time
Loading theory "HOL-Library.Transitive_Closure_Table" (required by "Draft.ObjectsMoreTemplates" via "Draft.Objects" via "Draft.TypeRel")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "rtrancl_path"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rtrancl_tab"
### theory "Draft.Auxiliary"
### 0.179s elapsed time, 0.739s cpu time, 0.048s GC time
Loading theory "Draft.Type" (required by "Draft.ObjectsMoreTemplates" via "Draft.Objects" via "Draft.TypeRel" via "Draft.Decl")
  Proving monotonicity ...
### theory "HOL-Library.Set_Algebras"
### 0.203s elapsed time, 0.831s cpu time, 0.048s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ObjectsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.371s elapsed time, 1.493s cpu time, 0.121s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ObjectsMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Transitive_Closure_Table"
### 0.272s elapsed time, 1.073s cpu time, 0.073s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ObjectsMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "Draft.Type"
### 0.709s elapsed time, 2.787s cpu time, 0.270s GC time
Loading theory "Draft.Decl" (required by "Draft.ObjectsMoreTemplates" via "Draft.Objects" via "Draft.TypeRel")
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### theory "Draft.Decl"
### 0.068s elapsed time, 0.277s cpu time, 0.000s GC time
Loading theory "Draft.TypeRel" (required by "Draft.ObjectsMoreTemplates" via "Draft.Objects")
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Proofs for inductive predicate(s) "subcls1p"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### theory "HOL-Library.BigO"
### 1.016s elapsed time, 3.845s cpu time, 0.875s GC time
consts
  supercls_lst :: "'m prog => char list list => bool"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Proofs for inductive predicate(s) "widen"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.084s elapsed time, 4.089s cpu time, 0.875s GC time
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Methods"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Fields"
  Proving monotonicity ...
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.TypeRel"
### 0.947s elapsed time, 2.743s cpu time, 0.832s GC time
Loading theory "Draft.Value" (required by "Draft.ObjectsMoreTemplates" via "Draft.Objects")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.000s elapsed time, 6.343s cpu time, 1.149s GC time
Loading theory "Draft.Templates" (required by "Draft.ObjectsMoreTemplates" via "Draft.ExtrEqs")
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Addr"
consts
  the_Intg :: "val => int"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_Addr :: "val => nat"
consts
  default_val :: "ty => val"
### theory "Draft.Value"
### 0.345s elapsed time, 0.716s cpu time, 0.047s GC time
Loading theory "Draft.Objects" (required by "Draft.ObjectsMoreTemplates")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.112s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ObjectsMoreTemplates")
consts
  typeof_h :: "heap => val => ty option"
Proofs for inductive predicate(s) "iprog"
  Proving monotonicity ...
### theory "Draft.Objects"
### 0.467s elapsed time, 0.991s cpu time, 0.128s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.532s elapsed time, 1.070s cpu time, 0.128s GC time
Loading theory "Draft.ObjectsMoreTemplates"
val templateLemmas =
   [("Objects.hext_refl", "?h \<unlhd> ?h",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Objects.shext_refl", "?sh \<unlhd>\<^sub>s ?sh",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Objects.iprog_Done", "(Done \<le>\<^sub>i ?i) = (?i = Done)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_equation (template_var 0, template_hole 1))),
    ("Objects.iprog_Error", "(Error \<le>\<^sub>i ?i) = (?i = Error)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_equation (template_var 0, template_hole 1))),
    ("Objects.new_Addr_SomeD",
     "new_Addr ?h = \<lfloor>?a\<rfloor> ==> ?h ?a = None",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_var 1, template_var 0), template_hole 0))),
    ("Objects.typeof_lit_is_type",
     "typeof ?v = \<lfloor>?T\<rfloor> ==> is_type ?P ?T",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, t_empty), template_var 2),
          template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Objects.shext_new",
     "?sh ?C = None ==> ?sh \<unlhd>\<^sub>s ?sh(?C |-> ?x)",
     template_implication
      ([template_equation
         (template_app (template_var 2, template_var 1), template_hole 3)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Objects.hext_new", "?h ?a = None ==> ?h \<unlhd> ?h(?a |-> ?x)",
     template_implication
      ([template_equation
         (template_app (template_var 2, template_var 1), template_hole 3)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Objects.hext_trans",
     "[| ?h \<unlhd> ?h'; ?h' \<unlhd> ?h'' |] ==> ?h \<unlhd> ?h''",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Objects.iprog_trans",
     "[| ?i \<le>\<^sub>i ?i'; ?i' \<le>\<^sub>i ?i'' |]
      ==> ?i \<le>\<^sub>i ?i''",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Objects.shext_trans",
     "[| ?sh \<unlhd>\<^sub>s ?sh'; ?sh' \<unlhd>\<^sub>s ?sh'' |]
      ==> ?sh \<unlhd>\<^sub>s ?sh''",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Objects.iprog_Processing",
     "(Processing \<le>\<^sub>i ?i) =
      (?i = Done | ?i = Error | ?i = Processing)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 0)),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 4)))
           ))),
    ("Objects.typeof_lit_typeof",
     "typeof ?v = \<lfloor>?T\<rfloor> ==>
      typeof\<^bsub>?h\<^esub> ?v = \<lfloor>?T\<rfloor>",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, t_empty), template_var 2),
          template_app (template_hole 0, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_var 2),
         template_app (template_hole 0, template_var 1)))),
    ("Objects.hext_upd_obj",
     "?h ?a = \<lfloor>(?C, ?fs)\<rfloor> ==>
      ?h \<unlhd> ?h(?a |-> (?C, ?fs'))",
     template_implication
      ([template_equation
         (template_app (template_var 4, template_var 3),
          template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 4),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3),
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 0))))
           ))),
    ("Objects.hext_typeof_mono",
     "[| ?h \<unlhd> ?h';
         typeof\<^bsub>?h\<^esub> ?v = \<lfloor>?T\<rfloor> |]
      ==> typeof\<^bsub>?h'\<^esub> ?v = \<lfloor>?T\<rfloor>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 3), template_var 1),
          template_app (template_hole 0, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Objects.hext_objD",
     "[| ?h \<unlhd> ?h'; ?h ?a = \<lfloor>(?C, ?fs)\<rfloor> |]
      ==> EX fs'. ?h' ?a = \<lfloor>(?C, fs')\<rfloor>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3)
            ),
        template_equation
         (template_app (template_var 4, template_var 2),
          template_app
           (template_hole 2,
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Objects.shext_upd_obj",
     "[| ?sh ?C = \<lfloor>(?sfs, ?i)\<rfloor>; ?i \<le>\<^sub>i ?i' |]
      ==> ?sh \<unlhd>\<^sub>s ?sh(?C |-> (?sfs', ?i'))",
     template_implication
      ([template_equation
         (template_app (template_var 5, template_var 4),
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2))),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 5),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 4),
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_var 1))))
           ))),
    ("Objects.hextI",
     "ALL a C fs.
         ?h a = \<lfloor>(C, fs)\<rfloor> -->
         (EX fs'. ?h' a = \<lfloor>(C, fs')\<rfloor>) ==>
      ?h \<unlhd> ?h'",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Objects.shext_objD",
     "[| ?sh \<unlhd>\<^sub>s ?sh'; ?sh ?C = \<lfloor>(?sfs, ?i)\<rfloor> |]
      ==> EX sfs' i'.
             ?sh' ?C = \<lfloor>(sfs', i')\<rfloor> & ?i \<le>\<^sub>i i'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_var 3)
            ),
        template_equation
         (template_app (template_var 4, template_var 2),
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Objects.shextI",
     "ALL C sfs i.
         ?sh C = \<lfloor>(sfs, i)\<rfloor> -->
         (EX sfs' i'.
             ?sh' C = \<lfloor>(sfs', i')\<rfloor> & i \<le>\<^sub>i i') ==>
      ?sh \<unlhd>\<^sub>s ?sh'",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.ObjectsMoreTemplates"
### 0.355s elapsed time, 0.484s cpu time, 0.042s GC time
val it = (): unit
