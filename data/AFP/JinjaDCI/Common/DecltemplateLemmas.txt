   [("Decl.finite_is_class", "finite {C. is_class ?P C}",
     template_predicate
      (
         template_app
          (template_hole 2, template_app (template_hole 1, t_empty))
         )),
    ("Decl.class_cons", "?C ~= fst ?x ==> class (?x # ?P) ?C = class ?P ?C",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 2,
              template_app (template_hole 3, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 2)))),
    ("Decl.class_exists_equiv",
     "(EX x. fst x = ?cn & x : set ?P) = (class ?P ?cn ~= None)",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1),
             template_hole 0)
           ))),
    ("Decl.is_type_simps",
     "is_type ?P Void &
      is_type ?P Boolean &
      is_type ?P Integer &
      is_type ?P NT & is_type ?P (Class ?C) = is_class ?P ?C",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_var 1),
               template_hole 6)),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 1),
                 template_hole 5)),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 1),
                   template_hole 4)),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 1),
                     template_hole 3)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 7, template_var 1),
                       template_app (template_hole 1, template_var 0))),
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0))))))
         )),
    ("Decl.class_exists_equiv2",
     "(EX x. fst x = ?cn & x : set (?P1.0 @ ?P2.0)) =
      (class ?P1.0 ?cn ~= None | class ?P2.0 ?cn ~= None)",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_var 2)),
                   template_hole 0))),
             template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 2)),
                 template_hole 0)))
           )))]
