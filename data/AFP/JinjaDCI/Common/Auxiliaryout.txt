Loading theory "Draft.Auxiliary" (required by "Draft.AuxiliaryMoreTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.AuxiliaryMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.AuxiliaryMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.AuxiliaryMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.138s elapsed time, 0.575s cpu time, 0.052s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.AuxiliaryMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Draft.Auxiliary"
### 0.173s elapsed time, 0.713s cpu time, 0.052s GC time
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.292s elapsed time, 1.066s cpu time, 0.052s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.AuxiliaryMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.451s elapsed time, 1.563s cpu time, 0.164s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.AuxiliaryMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.877s elapsed time, 2.707s cpu time, 0.407s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.880s elapsed time, 2.540s cpu time, 0.295s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.145s elapsed time, 4.937s cpu time, 1.037s GC time
Loading theory "Draft.Templates" (required by "Draft.AuxiliaryMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.090s elapsed time, 0.151s cpu time, 0.057s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.AuxiliaryMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.508s elapsed time, 0.516s cpu time, 0.000s GC time
Loading theory "Draft.AuxiliaryMoreTemplates"
val templateLemmas =
   [("Auxiliary.distinct_fst_appendD",
     "distinct_fst (?kxs @ ?kxs') ==>
      distinct_fst ?kxs & distinct_fst ?kxs'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 1)),
             template_app (template_hole 2, template_var 0))
           ))),
    ("Auxiliary.rel_list_all2_refl",
     "(!!x. (x, x) : ?S) ==> list_all2 (fun_of ?S) ?xs ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)),
               template_var 0),
             template_var 0)
           ))),
    ("Auxiliary.map_of_SomeI",
     "[| distinct_fst ?kxs; (?k, ?x) : set ?kxs |]
      ==> map_of ?kxs ?k = \<lfloor>?x\<rfloor>",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)),
              template_app (template_hole 3, template_var 2))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Auxiliary.distinct_fst_Cons",
     "distinct_fst ((?k, ?x) # ?kxs) =
      (distinct_fst ?kxs & (ALL y. (?k, y) ~: set ?kxs))",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 7, template_var 0)),
         template_app (template_hole 3, t_empty)))),
    ("Auxiliary.nat_add_max_le",
     "(?n + max ?i ?j <= ?m) = (?n + ?i <= ?m & ?n + ?j <= ?m)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 1)),
           template_var 0)))),
    ("Auxiliary.map_of_set_pcs_notin",
     "?C ~: (%t. snd (fst t)) ` set ?FDTs ==> map_of ?FDTs (?F, ?C) = None",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 2),
                  template_app
                   (template_app (template_hole 7, t_empty),
                    template_app (template_hole 4, template_var 1)))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2)),
         template_hole 0))),
    ("Auxiliary.rel_list_all2_Cons",
     "list_all2 (fun_of ?S) (?x # ?xs) (?y # ?ys) =
      ((?x, ?y) : ?S & list_all2 (fun_of ?S) ?xs ?ys)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 4)),
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_var 4)),
         template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 4)),
             template_var 2),
           template_var 0)))),
    ("Auxiliary.Suc_add_max_le",
     "(Suc (?n + max ?i ?j) <= ?m) =
      (Suc (?n + ?i) <= ?m & Suc (?n + ?j) <= ?m)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)))),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 2))),
             template_var 0)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 1))),
           template_var 0)))),
    ("Auxiliary.map_of_reinsert_neq_None",
     "?Ca ~= ?D ==>
      map_of (map (%(F, y). ((F, ?Ca), y)) ?fs) (?F, ?D) = None",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4, template_app (template_hole 3, t_empty)),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2)),
         template_hole 0))),
    ("Auxiliary.rel_list_all2_nthD",
     "[| list_all2 (fun_of ?S) ?xs ?ys; ?p < length ?xs |]
      ==> (?xs ! ?p, ?ys ! ?p) : ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 4, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))),
             template_var 3)
           ))),
    ("Auxiliary.map_of_insertmap_SomeD'",
     "map_of ?fs ?F = \<lfloor>?y\<rfloor> ==>
      map_of (map (%(F, y). (F, ?D, y)) ?fs) ?F =
      \<lfloor>(?D, ?y)\<rfloor>",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, template_var 3), template_var 2),
          template_app (template_hole 7, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4, template_app (template_hole 3, t_empty)),
               template_var 3)),
           template_var 2),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1))))),
    ("Auxiliary.map_of_reinsert_SomeD",
     "map_of (map (%(F, y). ((F, ?D), y)) ?fs) (?F, ?D) =
      \<lfloor>?T\<rfloor> ==>
      map_of ?fs ?F = \<lfloor>?T\<rfloor>",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_hole 5, template_app (template_hole 4, t_empty)),
                template_var 2)),
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 3)),
          template_app (template_hole 1, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("Auxiliary.rel_list_all2_Cons2",
     "list_all2 (fun_of ?S) ?xs (?y # ?ys) =
      (EX z zs.
          ?xs = z # zs & (z, ?y) : ?S & list_all2 (fun_of ?S) zs ?ys)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 9,
             template_app (template_hole 8, template_var 3)),
           template_var 2),
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_app (template_hole 6, t_empty))),
    ("Auxiliary.rel_list_all2_Cons1",
     "list_all2 (fun_of ?S) (?x # ?xs) ?ys =
      (EX z zs.
          ?ys = z # zs & (?x, z) : ?S & list_all2 (fun_of ?S) ?xs zs)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 9,
             template_app (template_hole 8, template_var 3)),
           template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 6, t_empty))),
    ("Auxiliary.rel_list_all2I",
     "[| length ?a = length ?b;
         !!n. n < length ?a ==> (?a ! n, ?b ! n) : ?S |]
      ==> list_all2 (fun_of ?S) ?a ?b",
     template_implication
      ([template_equation
         (template_app (template_hole 9, template_var 2),
          template_app (template_hole 8, template_var 1)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_var 2),
             template_var 1)
           ))),
    ("Auxiliary.rel_list_all2_update_cong",
     "[| ?i < length ?xs; list_all2 (fun_of ?S) ?xs ?ys; (?x, ?y) : ?S |]
      ==> list_all2 (fun_of ?S) (?xs[?i := ?x]) (?ys[?i := ?y])",
     template_implication
      ([template_inequation
         (less_than, template_var 5,
          template_app (template_hole 6, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 3)),
                template_var 4),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 3)),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 5),
                 template_var 1)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 5),
               template_var 0))
           ))),
    ("Auxiliary.map_of_remap_insertmap",
     "map_of
       (map ((%((F, D), b, T). (F, D, b, T)) o (%(F, y). ((F, ?D), y)))
         ?fs) =
      map_of (map (%(F, y). (F, ?D, y)) ?fs)",
     template_equation
      (template_app
        (template_hole 12,
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_hole 9,
                   template_app (template_hole 8, t_empty))),
               template_app (template_hole 3, t_empty))),
           template_var 0)),
       template_app
        (template_hole 12,
         template_app
          (template_app
            (template_hole 11, template_app (template_hole 0, t_empty)),
           template_var 0)))),
    ("Auxiliary.rel_list_all2_antisym",
     "[| !!x y. [| (x, y) : ?S; (y, x) : ?T |] ==> x = y;
         list_all2 (fun_of ?S) ?xs ?ys; list_all2 (fun_of ?T) ?ys ?xs |]
      ==> ?xs = ?ys",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 3)),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 2)),
                template_var 0),
              template_var 1)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Auxiliary.rel_list_all2_trans",
     "[| !!a b c. [| (a, b) : ?R; (b, c) : ?S |] ==> (a, c) : ?T;
         list_all2 (fun_of ?R) ?as ?bs; list_all2 (fun_of ?S) ?bs ?cs |]
      ==> list_all2 (fun_of ?T) ?as ?cs",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 5)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 4)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 3)),
               template_var 2),
             template_var 0)
           ))),
    ("Auxiliary.map_of_filtered_SomeD",
     "[| map_of ?fs (?F, ?D) = \<lfloor>(?a, ?T)\<rfloor>;
         ?Q ((?F, ?D), ?a, ?T) |]
      ==> map_of (map (%((F, D), b, T). ((F, D), ?P T)) (filter ?Q ?fs))
           (?F, ?D) =
          \<lfloor>?P ?T\<rfloor>",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 13, template_var 6),
            template_app
             (template_app (template_hole 12, template_var 5),
              template_var 4)),
          template_app
           (template_hole 11,
            template_app
             (template_app (template_hole 10, template_var 3),
              template_var 2))),
        template_predicate
         (
            template_app
             (template_var 1,
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 12, template_var 5),
                    template_var 4)),
                template_app
                 (template_app (template_hole 10, template_var 3),
                  template_var 2)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, t_empty))),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 6))),
           template_app
            (template_app (template_hole 12, template_var 5),
             template_var 4)),
         template_app
          (template_hole 0,
           template_app (template_var 0, template_var 2))))),
    ("Auxiliary.map_of_Some_None_split",
     "[| ?t = map (%(F, y). ((F, ?C), y)) ?fs @ ?t';
         map_of ?t' (?F, ?C) = None;
         map_of ?t (?F, ?C) = \<lfloor>?y\<rfloor> |]
      ==> map_of (map (%((F, D), b, T). (F, D, b, T)) ?t) ?F =
          \<lfloor>(?C, ?y)\<rfloor>",
     template_implication
      ([template_equation
         (template_var 5,
          template_app
           (template_app
             (template_hole 18,
              template_app
               (template_app
                 (template_hole 17,
                  template_app (template_hole 16, t_empty)),
                template_var 3)),
            template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 12, template_var 2),
            template_app
             (template_app (template_hole 14, template_var 1),
              template_var 4)),
          template_hole 11),
        template_equation
         (template_app
           (template_app (template_hole 12, template_var 5),
            template_app
             (template_app (template_hole 14, template_var 1),
              template_var 4)),
          template_app (template_hole 10, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app (template_hole 5, t_empty))),
               template_var 5)),
           template_var 1),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 4),
             template_var 0))))),
    ("Auxiliary.map_of_remove_filtered_SomeD",
     "[| map_of ?fs (?F, ?C) = \<lfloor>(?a, ?T)\<rfloor>;
         ?Q ((?F, ?C), ?a, ?T) |]
      ==> map_of
           (map (%((F, D), b, T). (F, ?P T))
             (filter (%((F, D), b, T). ?Q ((F, D), b, T) & D = ?C) ?fs))
           ?F =
          \<lfloor>?P ?T\<rfloor>",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 18, template_var 6),
            template_app
             (template_app (template_hole 17, template_var 5),
              template_var 4)),
          template_app
           (template_hole 16,
            template_app
             (template_app (template_hole 15, template_var 3),
              template_var 2))),
        template_predicate
         (
            template_app
             (template_var 1,
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app (template_hole 17, template_var 5),
                    template_var 4)),
                template_app
                 (template_app (template_hole 15, template_var 3),
                  template_var 2)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_hole 10,
                   template_app (template_hole 9, t_empty))),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, t_empty))),
                 template_var 6))),
           template_var 5),
         template_app
          (template_hole 0,
           template_app (template_var 0, template_var 2)))))]:
   (string * thm * template) list
### theory "Draft.AuxiliaryMoreTemplates"
### 0.359s elapsed time, 0.495s cpu time, 0.061s GC time
val it = (): unit
