Loading theory "Draft.Auxiliary" (required by "Draft.ConformMoreTemplates" via "Draft.Conform" via "Draft.Exceptions" via "Draft.Objects" via "Draft.TypeRel" via "Draft.Decl" via "Draft.Type")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ConformMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ConformMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ConformMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.115s elapsed time, 0.482s cpu time, 0.043s GC time
Loading theory "HOL-Library.Transitive_Closure_Table" (required by "Draft.ConformMoreTemplates" via "Draft.Conform" via "Draft.Exceptions" via "Draft.Objects" via "Draft.TypeRel")
### theory "Draft.Auxiliary"
### 0.139s elapsed time, 0.580s cpu time, 0.043s GC time
Loading theory "Draft.Type" (required by "Draft.ConformMoreTemplates" via "Draft.Conform" via "Draft.Exceptions" via "Draft.Objects" via "Draft.TypeRel" via "Draft.Decl")
Proofs for inductive predicate(s) "rtrancl_path"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rtrancl_tab"
  Proving monotonicity ...
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.201s elapsed time, 0.822s cpu time, 0.043s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ConformMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.315s elapsed time, 1.268s cpu time, 0.120s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ConformMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Transitive_Closure_Table"
### 0.271s elapsed time, 1.062s cpu time, 0.077s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ConformMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
### theory "Draft.Type"
### 0.706s elapsed time, 2.779s cpu time, 0.273s GC time
Loading theory "Draft.Decl" (required by "Draft.ConformMoreTemplates" via "Draft.Conform" via "Draft.Exceptions" via "Draft.Objects" via "Draft.TypeRel")
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Decl"
### 0.066s elapsed time, 0.260s cpu time, 0.000s GC time
Loading theory "Draft.TypeRel" (required by "Draft.ConformMoreTemplates" via "Draft.Conform" via "Draft.Exceptions" via "Draft.Objects")
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  flat :: "'a list stream => 'a stream"
Proofs for inductive predicate(s) "subcls1p"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
  Proving monotonicity ...
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
consts
  supercls_lst :: "'m prog => char list list => bool"
Proofs for inductive predicate(s) "widen"
### theory "HOL-Library.Stream"
### 1.062s elapsed time, 4.048s cpu time, 0.853s GC time
  Proving monotonicity ...
### theory "HOL-Library.BigO"
### 1.037s elapsed time, 3.917s cpu time, 0.891s GC time
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Methods"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Fields"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.TypeRel"
### 0.927s elapsed time, 2.703s cpu time, 0.762s GC time
Loading theory "Draft.Value" (required by "Draft.ConformMoreTemplates" via "Draft.Conform" via "Draft.Exceptions" via "Draft.Objects")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Addr"
consts
  the_Intg :: "val => int"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_Addr :: "val => nat"
consts
  default_val :: "ty => val"
### theory "Draft.Value"
### 0.367s elapsed time, 0.792s cpu time, 0.117s GC time
Loading theory "Draft.Objects" (required by "Draft.ConformMoreTemplates" via "Draft.Conform" via "Draft.Exceptions")
### theory "HOL-Library.Tree"
### 2.045s elapsed time, 6.387s cpu time, 1.152s GC time
Loading theory "Draft.Templates" (required by "Draft.ConformMoreTemplates" via "Draft.ExtrEqs")
consts
  typeof_h :: "heap => val => ty option"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.109s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ConformMoreTemplates")
Proofs for inductive predicate(s) "iprog"
  Proving monotonicity ...
### theory "Draft.Objects"
### 0.471s elapsed time, 0.997s cpu time, 0.131s GC time
Loading theory "Draft.Exceptions" (required by "Draft.ConformMoreTemplates" via "Draft.Conform")
### theory "Draft.Exceptions"
### 0.135s elapsed time, 0.267s cpu time, 0.000s GC time
Loading theory "Draft.Conform" (required by "Draft.ConformMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.540s elapsed time, 1.140s cpu time, 0.131s GC time
### Ambiguous input (line 34 of "$AFP/JinjaDCI/Common/Conform.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>hconf" ("_position" P) ("_position" h))
###   ("\<^const>HOL.conj"
###     ("_tuple"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" obj))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###             ("_applC" ("_position" Some) ("_position" obj)))
###           ("_position" P)))
###       ("_tuple_arg" ("\<^fixed>hconf" ("_position" h) ("_position" obj))))
###     ("_applC" ("_position" preallocated) ("_position" h))))
### ("\<^const>Pure.eq" ("\<^fixed>hconf" ("_position" P) ("_position" h))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" obj))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some) ("_position" obj)))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" h)
###           ("_position" obj))))
###     ("_applC" ("_position" preallocated) ("_position" h))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 39 of "$AFP/JinjaDCI/Common/Conform.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>shconf" ("_position" P) ("_position" h) ("_position" sh))
###   ("_tuple"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" C) ("_idts" ("_position" sfs) ("_position" i)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" C))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" sfs) ("_tuple_arg" ("_position" i)))))
###         ("_position" P)))
###     ("_tuple_arg"
###       ("\<^fixed>shconf" ("_position" h) ("_position" C)
###         ("_position" sfs)))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>shconf" ("_position" P) ("_position" h) ("_position" sh))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" C) ("_idts" ("_position" sfs) ("_position" i)))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" C))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" sfs) ("_tuple_arg" ("_position" i)))))
###       ("\<^const>Conform.soconf" ("_position" P) ("_position" h)
###         ("_position" C) ("_position" sfs)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Conform"
### 0.164s elapsed time, 0.222s cpu time, 0.047s GC time
Loading theory "Draft.ConformMoreTemplates"
val templateLemmas =
   [("Conform.defval_conf", "?P,?h \<turnstile> default_val ?T :\<le> ?T",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_app (template_hole 0, template_var 0)),
           template_var 0)
         )),
    ("Conform.lconf_empty", "?P,?h \<turnstile> Map.empty (:\<le>) ?E",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             t_empty),
           template_var 0)
         )),
    ("Conform.conf_NT", "(?P,?h \<turnstile> ?v :\<le> NT) = (?v = Null)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 0),
              template_hole 2)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("Conform.conf_Null",
     "(?P,?h \<turnstile> Null :\<le> ?T) = ?P \<turnstile> NT \<le> ?T",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_hole 2),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_hole 0),
         template_var 0))),
    ("Conform.oconf_blank",
     "?P \<turnstile> ?C has_fields ?FDTs ==>
      ?P,?h \<turnstile> blank ?P ?C \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2))
           ))),
    ("Conform.soconf_sblank",
     "?P \<turnstile> ?C has_fields ?FDTs ==>
      ?P,?h,?C \<turnstile>\<^sub>s sblank ?P ?C \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2))
           ))),
    ("Conform.typeof_conf",
     "typeof\<^bsub>?h\<^esub> ?v = \<lfloor>?T\<rfloor> ==>
      ?P,?h \<turnstile> ?v :\<le> ?T",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 3), template_var 2),
          template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("Conform.typeof_lit_conf",
     "typeof ?v = \<lfloor>?T\<rfloor> ==> ?P,?h \<turnstile> ?v :\<le> ?T",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, t_empty), template_var 3),
          template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 3),
             template_var 2)
           ))),
    ("Conform.confs_rev",
     "(?P,?h \<turnstile> rev ?s [:\<le>] ?t) =
      (?P,?h \<turnstile> ?s [:\<le>] rev ?t)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2)),
           template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2)),
           template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Conform.oconf_hext",
     "[| ?P,?h \<turnstile> ?obj \<surd>; ?h \<unlhd> ?h' |]
      ==> ?P,?h' \<turnstile> ?obj \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0),
             template_var 1)
           ))),
    ("Conform.hconfD",
     "[| ?P \<turnstile> ?h \<surd>; ?h ?a = \<lfloor>?obj\<rfloor> |]
      ==> ?P,?h \<turnstile> ?obj \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app (template_var 2, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Conform.conf_hext",
     "[| ?h \<unlhd> ?h'; ?P,?h \<turnstile> ?v :\<le> ?T |]
      ==> ?P,?h' \<turnstile> ?v :\<le> ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 4),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 3),
               template_var 1),
             template_var 0)
           ))),
    ("Conform.lconf_hext",
     "[| ?P,?h \<turnstile> ?l (:\<le>) ?E; ?h \<unlhd> ?h' |]
      ==> ?P,?h' \<turnstile> ?l (:\<le>) ?E",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("Conform.soconf_hext",
     "[| ?P,?h,?C \<turnstile>\<^sub>s ?obj \<surd>; ?h \<unlhd> ?h' |]
      ==> ?P,?h',?C \<turnstile>\<^sub>s ?obj \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("Conform.conf_widen",
     "[| ?P,?h \<turnstile> ?v :\<le> ?T; ?P \<turnstile> ?T \<le> ?T' |]
      ==> ?P,?h \<turnstile> ?v :\<le> ?T'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 4),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Conform.confs_hext",
     "[| ?P,?h \<turnstile> ?vs [:\<le>] ?Ts; ?h \<unlhd> ?h' |]
      ==> ?P,?h' \<turnstile> ?vs [:\<le>] ?Ts",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 0)),
               template_var 2),
             template_var 1)
           ))),
    ("Conform.oconf_new",
     "[| ?P,?h \<turnstile> ?obj \<surd>; ?h ?a = None |]
      ==> ?P,?h(?a |-> ?x) \<turnstile> ?obj \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app (template_var 3, template_var 1), template_hole 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 4),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 1),
                 template_app (template_hole 0, template_var 0))),
             template_var 2)
           ))),
    ("Conform.shconf_hnew",
     "[| ?P,?h \<turnstile>\<^sub>s ?sh \<surd>; ?h ?a = None |]
      ==> ?P,?h(?a |-> ?obj) \<turnstile>\<^sub>s ?sh \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app (template_var 3, template_var 1), template_hole 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 4),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 1),
                 template_app (template_hole 0, template_var 0))),
             template_var 2)
           ))),
    ("Conform.shconfD",
     "[| ?P,?h \<turnstile>\<^sub>s ?sh \<surd>;
         ?sh ?C = \<lfloor>(?sfs, ?i)\<rfloor> |]
      ==> ?P,?h,?C \<turnstile>\<^sub>s ?sfs \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_equation
         (template_app (template_var 3, template_var 2),
          template_app
           (template_hole 2,
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 4),
               template_var 2),
             template_var 1)
           ))),
    ("Conform.confs_widens",
     "[| ?P,?h \<turnstile> ?vs [:\<le>] ?Ts;
         ?P \<turnstile> ?Ts [\<le>] ?Ts' |]
      ==> ?P,?h \<turnstile> ?vs [:\<le>] ?Ts'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 1,
                  template_app (template_hole 0, template_var 4)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 4),
                   template_var 3)),
               template_var 2),
             template_var 0)
           ))),
    ("Conform.soconf_new",
     "[| ?P,?h,?C \<turnstile>\<^sub>s ?obj \<surd>; ?h ?a = None |]
      ==> ?P,?h(?a |-> ?x),?C \<turnstile>\<^sub>s ?obj \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app (template_var 4, template_var 1), template_hole 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 5),
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 4),
                     template_var 1),
                   template_app (template_hole 0, template_var 0))),
               template_var 3),
             template_var 2)
           ))),
    ("Conform.confs_conv_map",
     "(?P,?h \<turnstile> ?vs [:\<le>] ?Ts') =
      (EX Ts.
          map typeof\<^bsub>?h\<^esub> ?vs = map Some Ts &
          ?P \<turnstile> Ts [\<le>] ?Ts')",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app (template_hole 8, t_empty))),
    ("Conform.shconf_upd_obj",
     "[| ?P,?h \<turnstile>\<^sub>s ?sh \<surd>;
         ?P,?h,?C \<turnstile>\<^sub>s ?sfs' \<surd> |]
      ==> ?P,?h \<turnstile>\<^sub>s ?sh(?C |-> (?sfs', ?i')) \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 4),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 5),
               template_var 4),
             template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))))
           ))),
    ("Conform.hconf_new",
     "[| ?P \<turnstile> ?h \<surd>; ?h ?a = None;
         ?P,?h \<turnstile> ?obj \<surd> |]
      ==> ?P \<turnstile> ?h(?a |-> ?obj) \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app (template_var 2, template_var 1), template_hole 3),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Conform.oconf_upd_obj",
     "[| ?P,?h \<turnstile> ?obj \<surd>;
         ?h ?a = \<lfloor>(?C, ?fs)\<rfloor> |]
      ==> ?P,?h(?a |-> (?C, ?fs')) \<turnstile> ?obj \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_equation
         (template_app (template_var 5, template_var 3),
          template_app
           (template_hole 2,
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 6),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 3),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 0)))),
             template_var 4)
           ))),
    ("Conform.shconf_hupd_obj",
     "[| ?P,?h \<turnstile>\<^sub>s ?sh \<surd>;
         ?h ?a = \<lfloor>(?C, ?fs)\<rfloor> |]
      ==> ?P,?h(?a |-> (?C, ?fs')) \<turnstile>\<^sub>s ?sh \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_equation
         (template_app (template_var 5, template_var 3),
          template_app
           (template_hole 2,
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 6),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 3),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 0)))),
             template_var 4)
           ))),
    ("Conform.conf_upd_obj",
     "?h ?a = \<lfloor>(?C, ?fs)\<rfloor> ==>
      (?P,?h(?a |-> (?C, ?fs')) \<turnstile> ?x :\<le> ?T) =
      (?P,?h \<turnstile> ?x :\<le> ?T)",
     template_implication
      ([template_equation
         (template_app (template_var 7, template_var 6),
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 5),
              template_var 4)))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 7),
                   template_var 6),
                 template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 5),
                     template_var 2)))),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 7),
             template_var 1),
           template_var 0)))),
    ("Conform.lconf_upd2",
     "[| ?P,?h \<turnstile> ?l (:\<le>) ?E;
         ?P,?h \<turnstile> ?v :\<le> ?T |]
      ==> ?P,?h \<turnstile> ?l(?V |-> ?v) (:\<le>) ?E(?V |-> ?T)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 6),
                  template_var 5),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_var 6),
                 template_var 5),
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 4),
                   template_var 0),
                 template_app (template_hole 2, template_var 2))),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0),
               template_app (template_hole 0, template_var 1)))
           ))),
    ("Conform.soconf_upd_obj",
     "[| ?P,?h,?C \<turnstile>\<^sub>s ?obj \<surd>;
         ?h ?a = \<lfloor>(?Ca, ?fs)\<rfloor> |]
      ==> ?P,?h(?a |-> (?Ca, ?fs')),?C \<turnstile>\<^sub>s ?obj \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_equation
         (template_app (template_var 6, template_var 3),
          template_app
           (template_hole 2,
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 7),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 6),
                     template_var 3),
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 2),
                       template_var 0)))),
               template_var 5),
             template_var 4)
           ))),
    ("Conform.lconf_upd",
     "[| ?P,?h \<turnstile> ?l (:\<le>) ?E; ?P,?h \<turnstile> ?v :\<le> ?T;
         ?E ?V = \<lfloor>?T\<rfloor> |]
      ==> ?P,?h \<turnstile> ?l(?V |-> ?v) (:\<le>) ?E",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 6),
                  template_var 5),
                template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app (template_var 3, template_var 0),
          template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_var 6),
                 template_var 5),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 0),
                 template_app (template_hole 0, template_var 2))),
             template_var 3)
           ))),
    ("Conform.confs_Cons2",
     "(?P,?h \<turnstile> ?xs [:\<le>] ?y # ?ys) =
      (EX z zs.
          ?xs = z # zs &
          ?P,?h \<turnstile> z :\<le> ?y &
          ?P,?h \<turnstile> zs [:\<le>] ?ys)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 4),
               template_var 3)),
           template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("Conform.hconf_upd_obj",
     "[| ?P \<turnstile> ?h \<surd>; ?h ?a = \<lfloor>(?C, ?fs)\<rfloor>;
         ?P,?h \<turnstile> (?C, ?fs') \<surd> |]
      ==> ?P \<turnstile> ?h(?a |-> (?C, ?fs')) \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 5),
              template_var 4)
            ),
        template_equation
         (template_app (template_var 4, template_var 3),
          template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 5),
                template_var 4),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 5),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3),
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 0))))
           ))),
    ("Conform.soconf_fupd",
     "[| ?P \<turnstile> ?C has ?F,Static:?T in ?C;
         ?P,?h \<turnstile> ?v :\<le> ?T;
         ?P,?h,?C \<turnstile>\<^sub>s ?sfs \<surd> |]
      ==> ?P,?h,?C \<turnstile>\<^sub>s ?sfs(?F |-> ?v) \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 5, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_hole 4),
                template_var 3),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 6),
                  template_var 2),
                template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 6),
                  template_var 2),
                template_var 5),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 6),
                 template_var 2),
               template_var 5),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 4),
               template_app (template_hole 0, template_var 1)))
           ))),
    ("Conform.oconf_fupd",
     "[| ?P \<turnstile> ?C has ?F,NonStatic:?T in ?D;
         ?P,?h \<turnstile> ?v :\<le> ?T;
         ?P,?h \<turnstile> (?C, ?fs) \<surd> |]
      ==> ?P,?h \<turnstile> (?C, ?fs((?F, ?D) |-> ?v)) \<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 7, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_hole 6),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 7),
                  template_var 2),
                template_var 1),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 7),
                template_var 2),
              template_app
               (template_app (template_hole 3, template_var 6),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 7),
               template_var 2),
             template_app
              (template_app (template_hole 3, template_var 6),
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 0),
                   template_app
                    (template_app (template_hole 1, template_var 5),
                     template_var 3)),
                 template_app (template_hole 0, template_var 1))))
           ))),
    ("Conform.conf_ClassD",
     "?P,?h \<turnstile> ?v :\<le> Class ?C ==>
      ?v = Null |
      (EX a obj T.
          ?v = Addr a &
          ?h a = \<lfloor>obj\<rfloor> &
          obj_ty obj = T & ?P \<turnstile> T \<le> Class ?C)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 14, template_var 3),
                  template_var 2),
                template_var 1),
              template_app (template_hole 13, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app (template_hole 11, template_var 1),
                 template_hole 10)),
             template_app (template_hole 9, t_empty))
           ))),
    ("Conform.non_npD",
     "[| ?v ~= Null; ?P,?h \<turnstile> ?v :\<le> Class ?C |]
      ==> EX a C' fs.
             ?v = Addr a &
             ?h a = \<lfloor>(C', fs)\<rfloor> &
             ?P \<turnstile> C' \<preceq>\<^sup>* ?C",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 14)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 13, template_var 2),
                  template_var 1),
                template_var 3),
              template_app (template_hole 12, template_var 0))
            )],
       template_predicate (template_app (template_hole 11, t_empty))))]:
   (string * thm * template) list
### theory "Draft.ConformMoreTemplates"
### 0.360s elapsed time, 0.515s cpu time, 0.048s GC time
val it = (): unit
