Loading theory "Draft.Auxiliary" (required by "Draft.J1WellFormMoreTemplates" via "Draft.J1WellForm" via "Draft.JWellForm" via "Draft.WellForm" via "Draft.TypeRel" via "Draft.Decl" via "Draft.Type")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.J1WellFormMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.J1WellFormMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.J1WellFormMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.159s elapsed time, 0.644s cpu time, 0.048s GC time
Loading theory "HOL-Library.Transitive_Closure_Table" (required by "Draft.J1WellFormMoreTemplates" via "Draft.J1WellForm" via "Draft.JWellForm" via "Draft.WellForm" via "Draft.TypeRel")
### theory "Draft.Auxiliary"
### 0.177s elapsed time, 0.719s cpu time, 0.048s GC time
Loading theory "Draft.Type" (required by "Draft.J1WellFormMoreTemplates" via "Draft.J1WellForm" via "Draft.JWellForm" via "Draft.WellForm" via "Draft.TypeRel" via "Draft.Decl")
Proofs for inductive predicate(s) "rtrancl_path"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rtrancl_tab"
  Proving monotonicity ...
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.301s elapsed time, 1.211s cpu time, 0.048s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.J1WellFormMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.491s elapsed time, 1.950s cpu time, 0.175s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.J1WellFormMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Transitive_Closure_Table"
### 0.384s elapsed time, 1.514s cpu time, 0.127s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.J1WellFormMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
Proofs for coinductive predicate(s) "streamsp"
consts
  right :: "'a tree => 'a tree"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Type"
### 0.984s elapsed time, 3.884s cpu time, 0.377s GC time
Loading theory "Draft.Decl" (required by "Draft.J1WellFormMoreTemplates" via "Draft.J1WellForm" via "Draft.JWellForm" via "Draft.WellForm" via "Draft.TypeRel")
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Decl"
### 0.099s elapsed time, 0.381s cpu time, 0.090s GC time
Loading theory "Draft.TypeRel" (required by "Draft.J1WellFormMoreTemplates" via "Draft.J1WellForm" via "Draft.JWellForm" via "Draft.WellForm")
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.098s elapsed time, 4.111s cpu time, 1.002s GC time
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Proofs for inductive predicate(s) "subcls1p"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.280s elapsed time, 4.714s cpu time, 1.053s GC time
consts
  supercls_lst :: "'m prog => char list list => bool"
Proofs for inductive predicate(s) "widen"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Methods"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Fields"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.TypeRel"
### 1.043s elapsed time, 2.865s cpu time, 0.909s GC time
Loading theory "Draft.Value" (required by "Draft.J1WellFormMoreTemplates" via "Draft.J1WellForm" via "Draft.JWellForm" via "Draft.WellForm" via "Draft.SystemClasses" via "Draft.Exceptions" via "Draft.Objects")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.368s elapsed time, 7.398s cpu time, 1.439s GC time
Loading theory "Draft.Templates" (required by "Draft.J1WellFormMoreTemplates" via "Draft.ExtrEqs")
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Addr"
consts
  the_Intg :: "val => int"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_Addr :: "val => nat"
consts
  default_val :: "ty => val"
### theory "Draft.Value"
### 0.395s elapsed time, 0.821s cpu time, 0.064s GC time
Loading theory "Draft.Objects" (required by "Draft.J1WellFormMoreTemplates" via "Draft.J1WellForm" via "Draft.JWellForm" via "Draft.WellForm" via "Draft.SystemClasses" via "Draft.Exceptions")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.067s elapsed time, 0.132s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.J1WellFormMoreTemplates")
consts
  typeof_h :: "heap => val => ty option"
Proofs for inductive predicate(s) "iprog"
  Proving monotonicity ...
### theory "Draft.Objects"
### 0.788s elapsed time, 1.931s cpu time, 0.892s GC time
Loading theory "Draft.Exceptions" (required by "Draft.J1WellFormMoreTemplates" via "Draft.J1WellForm" via "Draft.JWellForm" via "Draft.WellForm" via "Draft.SystemClasses")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.867s elapsed time, 2.111s cpu time, 0.939s GC time
### theory "Draft.Exceptions"
### 0.178s elapsed time, 0.310s cpu time, 0.047s GC time
Loading theory "Draft.State" (required by "Draft.J1WellFormMoreTemplates" via "Draft.J1WellForm" via "Draft.JWellForm" via "Draft.DefAss" via "Draft.BigStep")
Loading theory "Draft.Expr" (required by "Draft.J1WellFormMoreTemplates" via "Draft.J1WellForm" via "Draft.JWellForm" via "Draft.WWellForm")
Loading theory "Draft.SystemClasses" (required by "Draft.J1WellFormMoreTemplates" via "Draft.J1WellForm" via "Draft.JWellForm" via "Draft.WellForm")
### theory "Draft.State"
### 0.058s elapsed time, 0.174s cpu time, 0.000s GC time
### theory "Draft.SystemClasses"
### 0.081s elapsed time, 0.221s cpu time, 0.000s GC time
Loading theory "Draft.WellForm" (required by "Draft.J1WellFormMoreTemplates" via "Draft.J1WellForm" via "Draft.JWellForm")
### theory "Draft.WellForm"
### 0.306s elapsed time, 0.652s cpu time, 0.084s GC time
Found termination order: "{}"
### Ambiguous input (line 129 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 130 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" fv) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("_applC" ("_position" fv) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" fv) ("_position" e\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  fv :: "char list exp => char list set"
  fvs :: "char list exp list => char list set"
Found termination order: "{}"
### Ambiguous input (line 161 of "$AFP/JinjaDCI/J/Expr.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lass_val_of)
###       ("\<^const>Expr.exp.LAss" ("_position" V)
###         ("_applC" ("_position" Val) ("_position" v))))
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" V) ("_tuple_arg" ("_position" v))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" lass_val_of)
###       ("_updbind" ("_position" V)
###         ("_applC" ("_position" Val) ("_position" v))))
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" V) ("_tuple_arg" ("_position" v))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 252 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" sub_RI)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>1))
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub_RI)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>1))
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub_RI)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>1))
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 253 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" sub_RI)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub_RI)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub_RI)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  sub_RI :: "'a exp => bool"
  sub_RIs :: "'a exp list => bool"
### Ambiguous input (line 295 of "$AFP/JinjaDCI/J/Expr.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C')
###         ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" not_init)
###         ("_cargs" ("_position" C') ("_position" e\<^sub>1)))
###       ("_applC" ("_position" not_init)
###         ("_cargs" ("_position" C') ("_position" e\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C')
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" not_init)
###         ("_cargs" ("_position" C') ("_position" e\<^sub>1)))
###       ("_applC" ("_position" not_init)
###         ("_cargs" ("_position" C') ("_position" e\<^sub>2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 296 of "$AFP/JinjaDCI/J/Expr.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C')
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C') ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C')
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C') ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  not_init :: "char list => 'a exp => bool"
  not_inits :: "char list => 'a exp list => bool"
### Ambiguous input (line 336 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" subexp)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("\<^const>Set.union"
###         ("_Finset"
###           ("_args" ("_position" e\<^sub>1) ("_position" e\<^sub>2)))
###         ("_applC" ("_position" subexp) ("_position" e\<^sub>1)))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subexp)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("\<^const>Set.union"
###         ("_Finset"
###           ("_args" ("_position" e\<^sub>1) ("_position" e\<^sub>2)))
###         ("_applC" ("_position" subexp) ("_position" e\<^sub>1)))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subexp)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("\<^const>Set.union"
###         ("_Finset"
###           ("_args" ("_position" e\<^sub>1) ("_position" e\<^sub>2)))
###         ("_applC" ("_position" subexp) ("_position" e\<^sub>1)))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 337 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" subexp)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union" ("_Finset" ("_position" e\<^sub>2))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subexp)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union" ("_Finset" ("_position" e\<^sub>2))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subexp)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union" ("_Finset" ("_position" e\<^sub>2))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  subexp :: "'a exp => 'a exp set"
  subexps :: "'a exp list => 'a exp set"
### theory "Draft.Expr"
### 8.298s elapsed time, 10.926s cpu time, 2.303s GC time
Loading theory "Draft.WellType" (required by "Draft.J1WellFormMoreTemplates" via "Draft.J1WellForm" via "Draft.JWellForm")
Loading theory "Draft.WWellForm" (required by "Draft.J1WellFormMoreTemplates" via "Draft.J1WellForm" via "Draft.JWellForm")
### Ambiguous input (line 67 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" T)
###         ("_position" D)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" T')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" T)
###         ("_position" D)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" T')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 63 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WT" ("_position" P) ("_position" E) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" T)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WT" ("_position" P) ("_position" E) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" T)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "WT", "WTs"
  Proving monotonicity ...
### theory "Draft.WWellForm"
### 0.194s elapsed time, 0.460s cpu time, 0.000s GC time
Loading theory "Draft.BigStep" (required by "Draft.J1WellFormMoreTemplates" via "Draft.J1WellForm" via "Draft.JWellForm" via "Draft.DefAss")
### Ambiguous input (line 129 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts)))
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E) ("_position" e)
###       ("\<^const>HOL.conj" ("_position" T)
###         ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###           ("_position" es) ("_position" Ts))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts)))
###     ("\<^const>HOL.conj"
###       ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###         ("_position" e) ("_position" T))
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("_position" es) ("_position" Ts)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 132 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" Ts))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" U) ("_position" Us))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts)
###           ("\<^const>List.list.Cons" ("_position" U) ("_position" Us)))
###         ("\<^const>HOL.conj"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e) ("_position" U))
###           ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###             ("_position" es) ("_position" Us)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" Ts))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" U) ("_position" Us))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts)
###           ("\<^const>List.list.Cons" ("_position" U) ("_position" Us)))
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e)
###           ("\<^const>HOL.conj" ("_position" U)
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es) ("_position" Us))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 136 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" Ts)
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("\<^const>List.append" ("_position" es\<^sub>1)
###           ("_position" es\<^sub>2))
###         ("_position" Ts))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Ts\<^sub>1) ("_position" Ts\<^sub>2))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" Ts)
###             ("\<^const>List.append" ("_position" Ts\<^sub>1)
###               ("_position" Ts\<^sub>2)))
###           ("\<^const>HOL.conj"
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es\<^sub>1) ("_position" Ts\<^sub>1))
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es\<^sub>2) ("_position" Ts\<^sub>2))))))))
### ("\<^const>Pure.all_binder" ("_position" Ts)
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("\<^const>List.append" ("_position" es\<^sub>1)
###           ("_position" es\<^sub>2))
###         ("_position" Ts))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Ts\<^sub>1) ("_position" Ts\<^sub>2))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" Ts)
###             ("\<^const>List.append" ("_position" Ts\<^sub>1)
###               ("_position" Ts\<^sub>2)))
###           ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###             ("_position" es\<^sub>1)
###             ("\<^const>HOL.conj" ("_position" Ts\<^sub>1)
###               ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###                 ("_position" es\<^sub>2) ("_position" Ts\<^sub>2)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 157 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("_applC" ("_position" Val) ("_position" v)) ("_position" T))
###     ("\<^const>HOL.eq" ("_applC" ("_position" typeof) ("_position" v))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("_applC" ("_position" Val) ("_position" v))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq" ("_applC" ("_position" typeof) ("_position" v))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### typeof ?v = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Val ?v :: ?T
### Ignoring duplicate safe introduction (intro!)
### typeof ?v = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Val ?v :: ?T
### Ambiguous input (line 160 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("_applC" ("_position" Var) ("_position" V)) ("_position" T))
###     ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("_applC" ("_position" Var) ("_position" V))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### ?E ?V = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Var ?V :: ?T
### Ignoring duplicate safe introduction (intro!)
### ?E ?V = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Var ?V :: ?T
### Ambiguous input (line 163 of "$AFP/JinjaDCI/J/WellType.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>HOL.conj"
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>1) ("_position" T\<^sub>1))
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" T\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>HOL.conj"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>1) ("_position" T\<^sub>1))
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1)
###         ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>1)
###           ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###             ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###               ("_position" e\<^sub>2) ("_position" T\<^sub>2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 157 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" b) ("_position" t))
###                 ("\<^const>TypeRel.has_field" ("_position" P)
###                   ("_position" C) ("_position" F) ("_position" b)
###                   ("_position" t) ("_position" D)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" b) ("_position" t))
###                 ("\<^const>TypeRel.has_field" ("_position" P)
###                   ("_position" C) ("_position" F) ("_position" b)
###                   ("_position" t) ("_position" D)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 139 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" NonStatic) ("_position" t)
###               ("_position" D)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" fs')
###                 ("_MapUpd" ("_position" fs)
###                   ("_maplet"
###                     ("_tuple" ("_position" F)
###                       ("_tuple_arg" ("_position" D)))
###                     ("_position" v)))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                   ("_MapUpd" ("_position" h\<^sub>2)
###                     ("_maplet" ("_position" a)
###                       ("_tuple" ("_position" C)
###                         ("_tuple_arg" ("_position" fs')))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" NonStatic) ("_position" t)
###               ("_position" D)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" fs')
###                 ("_MapUpd" ("_position" fs)
###                   ("_maplet"
###                     ("_tuple" ("_position" F)
###                       ("_tuple_arg" ("_position" D)))
###                     ("_position" v)))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                   ("_MapUpd" ("_position" h\<^sub>2)
###                     ("_maplet" ("_position" a)
###                       ("_tuple" ("_position" C)
###                         ("_tuple_arg" ("_position" fs')))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 145 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_position" null) ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_position" null) ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 162 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" Static) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" Static) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 149 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 153 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 167 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" sfs')
###               ("_MapUpd" ("_position" sfs)
###                 ("_maplet" ("_position" F) ("_position" v)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" sh\<^sub>1')
###                 ("_MapUpd" ("_position" sh\<^sub>1)
###                   ("_maplet" ("_position" D)
###                     ("_tuple" ("_position" sfs')
###                       ("_tuple_arg" ("_position" Done))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" sfs')
###               ("_MapUpd" ("_position" sfs)
###                 ("_maplet" ("_position" F) ("_position" v)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" sh\<^sub>1')
###                 ("_MapUpd" ("_position" sh\<^sub>1)
###                   ("_maplet" ("_position" D)
###                     ("_tuple" ("_position" sfs')
###                       ("_tuple_arg" ("_position" Done))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 268 of "$AFP/JinjaDCI/J/BigStep.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args"
###           ("_Update" ("_position" l\<^sub>0)
###             ("_updbind" ("_position" V) ("_position" None)))
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args" ("_position" l\<^sub>0)
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args"
###           ("_applC" ("_position" l\<^sub>1)
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V))))
###           ("_tuple_arg" ("_position" sh\<^sub>1)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args"
###           ("_applC" ("_position" l\<^sub>0)
###             ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args" ("_position" l\<^sub>0)
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args"
###           ("_applC" ("_position" l\<^sub>1)
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V))))
###           ("_tuple_arg" ("_position" sh\<^sub>1)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args"
###           ("_Update" ("_position" l\<^sub>0)
###             ("_updbind" ("_position" V) ("_position" None)))
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args" ("_position" l\<^sub>0)
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args"
###           ("_Update" ("_position" l\<^sub>1)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V))))
###           ("_tuple_arg" ("_position" sh\<^sub>1)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args"
###           ("_applC" ("_position" l\<^sub>0)
###             ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args" ("_position" l\<^sub>0)
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args"
###           ("_Update" ("_position" l\<^sub>1)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V))))
###           ("_tuple_arg" ("_position" sh\<^sub>1)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 173 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Not_Ex" ("_position" sfs)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" sfs)
###                   ("_tuple_arg" ("_position" Done)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P)
###               ("\<^const>Expr.exp.INIT" ("_position" D)
###                 ("_list" ("_position" D)) ("_position" False)
###                 ("_position" unit))
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args" ("_position" l\<^sub>1)
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_applC" ("_position" Val) ("_position" v'))
###               ("_tuple" ("_position" h')
###                 ("_tuple_args" ("_position" l')
###                   ("_tuple_arg" ("_position" sh'))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" sh') ("_position" D))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" sfs)
###                     ("_tuple_arg" ("_position" i))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" sfs')
###                   ("_MapUpd" ("_position" sfs)
###                     ("_maplet" ("_position" F) ("_position" v)))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" sh'')
###                     ("_MapUpd" ("_position" sh')
###                       ("_maplet" ("_position" D)
###                         ("_tuple" ("_position" sfs')
###                           ("_tuple_arg" ("_position" i))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l')
###           ("_tuple_arg" ("_position" sh'')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Not_Ex" ("_position" sfs)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" sfs)
###                   ("_tuple_arg" ("_position" Done)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P)
###               ("\<^const>Expr.exp.INIT" ("_position" D)
###                 ("_list" ("_position" D)) ("_position" False)
###                 ("_position" unit))
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args" ("_position" l\<^sub>1)
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_applC" ("_position" Val) ("_position" v'))
###               ("_tuple" ("_position" h')
###                 ("_tuple_args" ("_position" l')
###                   ("_tuple_arg" ("_position" sh'))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" sh') ("_position" D))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" sfs)
###                     ("_tuple_arg" ("_position" i))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" sfs')
###                   ("_MapUpd" ("_position" sfs)
###                     ("_maplet" ("_position" F) ("_position" v)))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" sh'')
###                     ("_MapUpd" ("_position" sh')
###                       ("_maplet" ("_position" D)
###                         ("_tuple" ("_position" sfs')
###                           ("_tuple_arg" ("_position" i))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l')
###           ("_tuple_arg" ("_position" sh'')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 324 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" Throw) ("_position" a))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" h\<^sub>1) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###             ("_position" C)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args"
###                   ("_MapUpd" ("_position" l\<^sub>1)
###                     ("_maplet" ("_position" V)
###                       ("_applC" ("_position" Addr) ("_position" a))))
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_position" e\<^sub>2')
###               ("_tuple" ("_position" h\<^sub>2)
###                 ("_tuple_args" ("_position" l\<^sub>2)
###                   ("_tuple_arg" ("_position" sh\<^sub>2))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" e\<^sub>2')
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args"
###           ("_applC" ("_position" l\<^sub>2)
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l\<^sub>1) ("_position" V))))
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" Throw) ("_position" a))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" h\<^sub>1) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###             ("_position" C)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args"
###                   ("_MapUpd" ("_position" l\<^sub>1)
###                     ("_maplet" ("_position" V)
###                       ("_applC" ("_position" Addr) ("_position" a))))
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_position" e\<^sub>2')
###               ("_tuple" ("_position" h\<^sub>2)
###                 ("_tuple_args" ("_position" l\<^sub>2)
###                   ("_tuple_arg" ("_position" sh\<^sub>2))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" e\<^sub>2')
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args"
###           ("_Update" ("_position" l\<^sub>2)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l\<^sub>1) ("_position" V))))
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 181 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Not_Ex" ("_position" sfs)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" sfs)
###                   ("_tuple_arg" ("_position" Done)))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P)
###               ("\<^const>Expr.exp.INIT" ("_position" D)
###                 ("_list" ("_position" D)) ("_position" False)
###                 ("_position" unit))
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args" ("_position" l\<^sub>1)
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_applC" ("_position" throw) ("_position" a))
###               ("_position" s')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_applC" ("_position" throw) ("_position" a))
###       ("_position" s'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Not_Ex" ("_position" sfs)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" sfs)
###                   ("_tuple_arg" ("_position" Done)))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P)
###               ("\<^const>Expr.exp.INIT" ("_position" D)
###                 ("_list" ("_position" D)) ("_position" False)
###                 ("_position" unit))
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args" ("_position" l\<^sub>1)
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_applC" ("_position" throw) ("_position" a))
###               ("_position" s')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_applC" ("_position" throw) ("_position" a))
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 187 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 191 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" b) ("_position" t))
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" b) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" b) ("_position" t))
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" b) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 196 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" t)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" t)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 179 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.FAss" ("_position" a) ("_position" F)
###       ("_position" D) ("_position" v))
###     ("_position" T)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" a) ("_position" F)
###         ("_position" D))
###       ("_position" v))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 180 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###       ("_position" D) ("_position" v))
###     ("_position" T)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_position" v))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.WellType"
### 0.799s elapsed time, 2.049s cpu time, 0.190s GC time
Proofs for inductive predicate(s) "eval", "evals"
  Proving monotonicity ...
### Ambiguous input (line 416 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BigStep.eval" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BigStep.eval" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 417 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BigStep.eval" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BigStep.eval" ("_position" P)
###     ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.BigStep"
### 7.702s elapsed time, 13.136s cpu time, 2.692s GC time
Loading theory "Draft.DefAss" (required by "Draft.J1WellFormMoreTemplates" via "Draft.J1WellForm" via "Draft.JWellForm")
Loading theory "Draft.J1" (required by "Draft.J1WellFormMoreTemplates" via "Draft.J1WellForm")
### Ambiguous input (line 41 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" max_vars)
###       ("_updbind" ("_position" V) ("_position" e)))
###     ("_applC" ("_position" max_vars) ("_position" e))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" max_vars)
###       ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" e)))
###     ("_applC" ("_position" max_vars) ("_position" e))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 91 of "$AFP/JinjaDCI/J/DefAss.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" \<A>)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>DefAss.hyperUn"
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>DefAss.hyperUn"
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>DefAss.hyperUn"
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 92 of "$AFP/JinjaDCI/J/DefAss.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" \<A>)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" \<A>) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("_applC" ("_position" \<A>) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" \<A>) ("_position" e\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  max_vars :: "'a exp => nat"
  max_varss :: "'a exp list => nat"
consts
  \<A> :: "'a exp => 'a set option"
  \<A>s :: "'a exp list => 'a set option"
### Ambiguous input (line 120 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h)
###           ("_tuple_args" ("_position" ls)
###             ("_tuple_arg" ("_position" sh))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" i)
###           ("_applC" ("_position" size) ("_position" ls))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" ls')
###             ("_applC" ("_position" ls)
###               ("_list"
###                 ("\<^const>Expr.exp.LAss" ("_position" i)
###                   ("_position" v)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss" ("_position" i) ("_position" e))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" ls')
###           ("_tuple_arg" ("_position" sh)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h)
###           ("_tuple_args" ("_position" ls)
###             ("_tuple_arg" ("_position" sh))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" i)
###           ("_applC" ("_position" size) ("_position" ls))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" ls')
###             ("_LUpdate" ("_position" ls)
###               ("_lupdbind" ("_position" i) ("_position" v))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss" ("_position" i) ("_position" e))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" ls')
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 184 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" b) ("_position" t))
###                 ("\<^const>TypeRel.has_field" ("_position" P)
###                   ("_position" C) ("_position" F) ("_position" b)
###                   ("_position" t) ("_position" D)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" b) ("_position" t))
###                 ("\<^const>TypeRel.has_field" ("_position" P)
###                   ("_position" C) ("_position" F) ("_position" b)
###                   ("_position" t) ("_position" D)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 170 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" NonStatic) ("_position" t)
###               ("_position" D)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" fs')
###                 ("_MapUpd" ("_position" fs)
###                   ("_maplet"
###                     ("_tuple" ("_position" F)
###                       ("_tuple_arg" ("_position" D)))
###                     ("_position" v)))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                   ("_MapUpd" ("_position" h\<^sub>2)
###                     ("_maplet" ("_position" a)
###                       ("_tuple" ("_position" C)
###                         ("_tuple_arg" ("_position" fs')))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" NonStatic) ("_position" t)
###               ("_position" D)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" fs')
###                 ("_MapUpd" ("_position" fs)
###                   ("_maplet"
###                     ("_tuple" ("_position" F)
###                       ("_tuple_arg" ("_position" D)))
###                     ("_position" v)))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                   ("_MapUpd" ("_position" h\<^sub>2)
###                     ("_maplet" ("_position" a)
###                       ("_tuple" ("_position" C)
###                         ("_tuple_arg" ("_position" fs')))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 188 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" Static) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" Static) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 175 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_position" null) ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_position" null) ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 193 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" sfs')
###               ("_MapUpd" ("_position" sfs)
###                 ("_maplet" ("_position" F) ("_position" v)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" sh\<^sub>1')
###                 ("_MapUpd" ("_position" sh\<^sub>1)
###                   ("_maplet" ("_position" D)
###                     ("_tuple" ("_position" sfs')
###                       ("_tuple_arg" ("_position" Done))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" sfs')
###               ("_MapUpd" ("_position" sfs)
###                 ("_maplet" ("_position" F) ("_position" v)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" sh\<^sub>1')
###                 ("_MapUpd" ("_position" sh\<^sub>1)
###                   ("_maplet" ("_position" D)
###                     ("_tuple" ("_position" sfs')
###                       ("_tuple_arg" ("_position" Done))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 178 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 181 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 119 of "$AFP/JinjaDCI/J/DefAss.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<D>)
###       ("_cargs"
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))
###         ("_position" A)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" \<D>)
###         ("_cargs" ("_position" e\<^sub>1) ("_position" A)))
###       ("_applC" ("_position" \<D>)
###         ("_cargs" ("_position" e\<^sub>2)
###           ("\<^const>DefAss.hyperUn" ("_position" A)
###             ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<D>)
###       ("_cargs"
###         ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))
###         ("_position" A)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" \<D>)
###         ("_cargs" ("_position" e\<^sub>1) ("_position" A)))
###       ("_applC" ("_position" \<D>)
###         ("_cargs" ("_position" e\<^sub>2)
###           ("\<^const>DefAss.hyperUn" ("_position" A)
###             ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 198 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Not_Ex" ("_position" sfs)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" sfs)
###                   ("_tuple_arg" ("_position" Done)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval\<^sub>1" ("_position" P)
###               ("\<^const>Expr.exp.INIT" ("_position" D)
###                 ("_list" ("_position" D)) ("_position" False)
###                 ("_position" unit))
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args" ("_position" l\<^sub>1)
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_applC" ("_position" Val) ("_position" v'))
###               ("_tuple" ("_position" h')
###                 ("_tuple_args" ("_position" l')
###                   ("_tuple_arg" ("_position" sh'))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" sh') ("_position" D))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" sfs)
###                     ("_tuple_arg" ("_position" i))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" sfs')
###                   ("_MapUpd" ("_position" sfs)
###                     ("_maplet" ("_position" F) ("_position" v)))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" sh'')
###                     ("_MapUpd" ("_position" sh')
###                       ("_maplet" ("_position" D)
###                         ("_tuple" ("_position" sfs')
###                           ("_tuple_arg" ("_position" i))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l')
###           ("_tuple_arg" ("_position" sh'')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Not_Ex" ("_position" sfs)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" sfs)
###                   ("_tuple_arg" ("_position" Done)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval\<^sub>1" ("_position" P)
###               ("\<^const>Expr.exp.INIT" ("_position" D)
###                 ("_list" ("_position" D)) ("_position" False)
###                 ("_position" unit))
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args" ("_position" l\<^sub>1)
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_applC" ("_position" Val) ("_position" v'))
###               ("_tuple" ("_position" h')
###                 ("_tuple_args" ("_position" l')
###                   ("_tuple_arg" ("_position" sh'))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" sh') ("_position" D))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" sfs)
###                     ("_tuple_arg" ("_position" i))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" sfs')
###                   ("_MapUpd" ("_position" sfs)
###                     ("_maplet" ("_position" F) ("_position" v)))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" sh'')
###                     ("_MapUpd" ("_position" sh')
###                       ("_maplet" ("_position" D)
###                         ("_tuple" ("_position" sfs')
###                           ("_tuple_arg" ("_position" i))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l')
###           ("_tuple_arg" ("_position" sh'')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 120 of "$AFP/JinjaDCI/J/DefAss.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<D>)
###       ("_cargs"
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))
###         ("_position" A)))
###     ("_applC" ("_position" \<D>)
###       ("_cargs" ("_position" e\<^sub>2) ("_position" A)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<D>)
###       ("_cargs"
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))
###         ("_position" A)))
###     ("_applC" ("_position" \<D>)
###       ("_cargs" ("_position" e\<^sub>2) ("_position" A)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 205 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Not_Ex" ("_position" sfs)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" sfs)
###                   ("_tuple_arg" ("_position" Done)))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval\<^sub>1" ("_position" P)
###               ("\<^const>Expr.exp.INIT" ("_position" D)
###                 ("_list" ("_position" D)) ("_position" False)
###                 ("_position" unit))
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args" ("_position" l\<^sub>1)
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_applC" ("_position" throw) ("_position" a))
###               ("_position" s')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_applC" ("_position" throw) ("_position" a))
###       ("_position" s'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Not_Ex" ("_position" sfs)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" sfs)
###                   ("_tuple_arg" ("_position" Done)))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval\<^sub>1" ("_position" P)
###               ("\<^const>Expr.exp.INIT" ("_position" D)
###                 ("_list" ("_position" D)) ("_position" False)
###                 ("_position" unit))
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args" ("_position" l\<^sub>1)
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_applC" ("_position" throw) ("_position" a))
###               ("_position" s')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_applC" ("_position" throw) ("_position" a))
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 327 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" Throw) ("_position" a))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" ls\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" h\<^sub>1) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###             ("_position" C)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" i)
###               ("_applC" ("_position" length) ("_position" ls\<^sub>1))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>eval\<^sub>1" ("_position" P)
###                 ("_position" e\<^sub>2)
###                 ("_tuple" ("_position" h\<^sub>1)
###                   ("_tuple_args"
###                     ("_LUpdate" ("_position" ls\<^sub>1)
###                       ("_lupdbind" ("_position" i)
###                         ("_applC" ("_position" Addr) ("_position" a))))
###                     ("_tuple_arg" ("_position" sh\<^sub>1))))
###                 ("_position" e\<^sub>2')
###                 ("_tuple" ("_position" h\<^sub>2)
###                   ("_tuple_args" ("_position" ls\<^sub>2)
###                     ("_tuple_arg" ("_position" sh\<^sub>2)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" i) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" e\<^sub>2')
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" ls\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" Throw) ("_position" a))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" ls\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" h\<^sub>1) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###             ("_position" C)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" i)
###               ("_applC" ("_position" length) ("_position" ls\<^sub>1))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>eval\<^sub>1" ("_position" P)
###                 ("_position" e\<^sub>2)
###                 ("_tuple" ("_position" h\<^sub>1)
###                   ("_tuple_args"
###                     ("_applC" ("_position" ls\<^sub>1)
###                       ("_list"
###                         ("\<^const>Expr.exp.LAss" ("_position" i)
###                           ("_applC" ("_position" Addr) ("_position" a)))))
###                     ("_tuple_arg" ("_position" sh\<^sub>1))))
###                 ("_position" e\<^sub>2')
###                 ("_tuple" ("_position" h\<^sub>2)
###                   ("_tuple_args" ("_position" ls\<^sub>2)
###                     ("_tuple_arg" ("_position" sh\<^sub>2)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" i) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" e\<^sub>2')
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" ls\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 210 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 213 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" b) ("_position" t))
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" b) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" b) ("_position" t))
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" b) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 217 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" t)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" t)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  \<D> :: "'a exp => 'a set option => bool"
  \<D>s :: "'a exp list => 'a set option => bool"
### theory "Draft.DefAss"
### 0.281s elapsed time, 0.769s cpu time, 0.091s GC time
Loading theory "Draft.JWellForm" (required by "Draft.J1WellFormMoreTemplates" via "Draft.J1WellForm")
### Ambiguous input (line 17 of "$AFP/JinjaDCI/J/JWellForm.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J_mdecl)
###     ("_cargs" ("_position" P) ("_position" C)))
###   ("_lambda"
###     ("_pattern" ("_position" M)
###       ("_patterns" ("_position" b)
###         ("_patterns" ("_position" Ts)
###           ("_patterns" ("_position" T)
###             ("_pattern" ("_position" pns) ("_position" body))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Ts))
###         ("_applC" ("_position" length) ("_position" pns)))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" distinct) ("_position" pns))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" sub_RI) ("_position" body)))
###           ("_case_syntax" ("_position" b)
###             ("_case2"
###               ("_case1" ("_position" NonStatic)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.not_member" ("_position" this)
###                     ("_applC" ("_position" set) ("_position" pns)))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.Ex_binder" ("_position" T')
###                       ("\<^const>WellType.WT" ("_position" P)
###                         ("_Map"
###                           ("_Maplets"
###                             ("_maplet" ("_position" this)
###                               ("_applC" ("_position" Class)
###                                 ("_position" C)))
###                             ("_maplets" ("_position" pns)
###                               ("_position" Ts))))
###                         ("_position" body)
###                         ("\<^const>HOL.conj" ("_position" T')
###                           ("\<^const>TypeRel.widen" ("_position" P)
###                             ("_position" T') ("_position" T)))))
###                     ("_applC" ("_position" \<D>)
###                       ("_cargs" ("_position" body)
###                         ("\<^const>Option.option.Some"
###                           ("\<^const>Set.union"
###                             ("_Finset" ("_position" this))
###                             ("_applC" ("_position" set)
###                               ("_position" pns)))))))))
###               ("_case1" ("_position" Static)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.Ex_binder" ("_position" T')
###                     ("\<^const>WellType.WT" ("_position" P)
###                       ("_Map"
###                         ("_maplets" ("_position" pns) ("_position" Ts)))
###                       ("_position" body)
###                       ("\<^const>HOL.conj" ("_position" T')
###                         ("\<^const>TypeRel.widen" ("_position" P)
###                           ("_position" T') ("_position" T)))))
###                   ("_applC" ("_position" \<D>)
###                     ("_cargs" ("_position" body)
###                       ("\<^const>Option.option.Some"
###                         ("_applC" ("_position" set)
###                           ("_position" pns))))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J_mdecl)
###     ("_cargs" ("_position" P) ("_position" C)))
###   ("_lambda"
###     ("_pattern" ("_position" M)
###       ("_patterns" ("_position" b)
###         ("_patterns" ("_position" Ts)
###           ("_patterns" ("_position" T)
###             ("_pattern" ("_position" pns) ("_position" body))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Ts))
###         ("_applC" ("_position" length) ("_position" pns)))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" distinct) ("_position" pns))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" sub_RI) ("_position" body)))
###           ("_case_syntax" ("_position" b)
###             ("_case2"
###               ("_case1" ("_position" NonStatic)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.not_member" ("_position" this)
###                     ("_applC" ("_position" set) ("_position" pns)))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.Ex_binder" ("_position" T')
###                       ("\<^const>HOL.conj"
###                         ("\<^const>WellType.WT" ("_position" P)
###                           ("_Map"
###                             ("_Maplets"
###                               ("_maplet" ("_position" this)
###                                 ("_applC" ("_position" Class)
###                                   ("_position" C)))
###                               ("_maplets" ("_position" pns)
###                                 ("_position" Ts))))
###                           ("_position" body) ("_position" T'))
###                         ("\<^const>TypeRel.widen" ("_position" P)
###                           ("_position" T') ("_position" T))))
###                     ("_applC" ("_position" \<D>)
###                       ("_cargs" ("_position" body)
###                         ("\<^const>Option.option.Some"
###                           ("\<^const>Set.union"
###                             ("_Finset" ("_position" this))
###                             ("_applC" ("_position" set)
###                               ("_position" pns)))))))))
###               ("_case1" ("_position" Static)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.Ex_binder" ("_position" T')
###                     ("\<^const>WellType.WT" ("_position" P)
###                       ("_Map"
###                         ("_maplets" ("_position" pns) ("_position" Ts)))
###                       ("_position" body)
###                       ("\<^const>HOL.conj" ("_position" T')
###                         ("\<^const>TypeRel.widen" ("_position" P)
###                           ("_position" T') ("_position" T)))))
###                   ("_applC" ("_position" \<D>)
###                     ("_cargs" ("_position" body)
###                       ("\<^const>Option.option.Some"
###                         ("_applC" ("_position" set)
###                           ("_position" pns))))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J_mdecl)
###     ("_cargs" ("_position" P) ("_position" C)))
###   ("_lambda"
###     ("_pattern" ("_position" M)
###       ("_patterns" ("_position" b)
###         ("_patterns" ("_position" Ts)
###           ("_patterns" ("_position" T)
###             ("_pattern" ("_position" pns) ("_position" body))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Ts))
###         ("_applC" ("_position" length) ("_position" pns)))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" distinct) ("_position" pns))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" sub_RI) ("_position" body)))
###           ("_case_syntax" ("_position" b)
###             ("_case2"
###               ("_case1" ("_position" NonStatic)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.not_member" ("_position" this)
###                     ("_applC" ("_position" set) ("_position" pns)))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.Ex_binder" ("_position" T')
###                       ("\<^const>WellType.WT" ("_position" P)
###                         ("_Map"
###                           ("_Maplets"
###                             ("_maplet" ("_position" this)
###                               ("_applC" ("_position" Class)
###                                 ("_position" C)))
###                             ("_maplets" ("_position" pns)
###                               ("_position" Ts))))
###                         ("_position" body)
###                         ("\<^const>HOL.conj" ("_position" T')
###                           ("\<^const>TypeRel.widen" ("_position" P)
###                             ("_position" T') ("_position" T)))))
###                     ("_applC" ("_position" \<D>)
###                       ("_cargs" ("_position" body)
###                         ("\<^const>Option.option.Some"
###                           ("\<^const>Set.union"
###                             ("_Finset" ("_position" this))
###                             ("_applC" ("_position" set)
###                               ("_position" pns)))))))))
###               ("_case1" ("_position" Static)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.Ex_binder" ("_position" T')
###                     ("\<^const>HOL.conj"
###                       ("\<^const>WellType.WT" ("_position" P)
###                         ("_Map"
###                           ("_maplets" ("_position" pns) ("_position" Ts)))
###                         ("_position" body) ("_position" T'))
###                       ("\<^const>TypeRel.widen" ("_position" P)
###                         ("_position" T') ("_position" T))))
###                   ("_applC" ("_position" \<D>)
###                     ("_cargs" ("_position" body)
###                       ("\<^const>Option.option.Some"
###                         ("_applC" ("_position" set)
###                           ("_position" pns))))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J_mdecl)
###     ("_cargs" ("_position" P) ("_position" C)))
###   ("_lambda"
###     ("_pattern" ("_position" M)
###       ("_patterns" ("_position" b)
###         ("_patterns" ("_position" Ts)
###           ("_patterns" ("_position" T)
###             ("_pattern" ("_position" pns) ("_position" body))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Ts))
###         ("_applC" ("_position" length) ("_position" pns)))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" distinct) ("_position" pns))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" sub_RI) ("_position" body)))
###           ("_case_syntax" ("_position" b)
###             ("_case2"
###               ("_case1" ("_position" NonStatic)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.not_member" ("_position" this)
###                     ("_applC" ("_position" set) ("_position" pns)))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.Ex_binder" ("_position" T')
###                       ("\<^const>HOL.conj"
###                         ("\<^const>WellType.WT" ("_position" P)
###                           ("_Map"
###                             ("_Maplets"
###                               ("_maplet" ("_position" this)
###                                 ("_applC" ("_position" Class)
###                                   ("_position" C)))
###                               ("_maplets" ("_position" pns)
###                                 ("_position" Ts))))
###                           ("_position" body) ("_position" T'))
###                         ("\<^const>TypeRel.widen" ("_position" P)
###                           ("_position" T') ("_position" T))))
###                     ("_applC" ("_position" \<D>)
###                       ("_cargs" ("_position" body)
###                         ("\<^const>Option.option.Some"
###                           ("\<^const>Set.union"
###                             ("_Finset" ("_position" this))
###                             ("_applC" ("_position" set)
###                               ("_position" pns)))))))))
###               ("_case1" ("_position" Static)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.Ex_binder" ("_position" T')
###                     ("\<^const>HOL.conj"
###                       ("\<^const>WellType.WT" ("_position" P)
###                         ("_Map"
###                           ("_maplets" ("_position" pns) ("_position" Ts)))
###                         ("_position" body) ("_position" T'))
###                       ("\<^const>TypeRel.widen" ("_position" P)
###                         ("_position" T') ("_position" T))))
###                   ("_applC" ("_position" \<D>)
###                     ("_cargs" ("_position" body)
###                       ("\<^const>Option.option.Some"
###                         ("_applC" ("_position" set)
###                           ("_position" pns))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 29 of "$AFP/JinjaDCI/J/JWellForm.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J_mdecl)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" C)
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" NonStatic)
###             ("_tuple_args" ("_position" Ts)
###               ("_tuple_args" ("_position" T)
###                 ("_tuple_args" ("_position" pns)
###                   ("_tuple_arg" ("_position" body))))))))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Ts))
###       ("_applC" ("_position" length) ("_position" pns)))
###     ("\<^const>HOL.conj" ("_applC" ("_position" distinct) ("_position" pns))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.Not"
###           ("_applC" ("_position" sub_RI) ("_position" body)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" this)
###             ("_applC" ("_position" set) ("_position" pns)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.Ex_binder" ("_position" T')
###               ("\<^const>WellType.WT" ("_position" P)
###                 ("_Map"
###                   ("_Maplets"
###                     ("_maplet" ("_position" this)
###                       ("_applC" ("_position" Class) ("_position" C)))
###                     ("_maplets" ("_position" pns) ("_position" Ts))))
###                 ("_position" body)
###                 ("\<^const>HOL.conj" ("_position" T')
###                   ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                     ("_position" T)))))
###             ("_applC" ("_position" \<D>)
###               ("_cargs" ("_position" body)
###                 ("\<^const>Option.option.Some"
###                   ("\<^const>Set.union" ("_Finset" ("_position" this))
###                     ("_applC" ("_position" set) ("_position" pns))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J_mdecl)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" C)
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" NonStatic)
###             ("_tuple_args" ("_position" Ts)
###               ("_tuple_args" ("_position" T)
###                 ("_tuple_args" ("_position" pns)
###                   ("_tuple_arg" ("_position" body))))))))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Ts))
###       ("_applC" ("_position" length) ("_position" pns)))
###     ("\<^const>HOL.conj" ("_applC" ("_position" distinct) ("_position" pns))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.Not"
###           ("_applC" ("_position" sub_RI) ("_position" body)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" this)
###             ("_applC" ("_position" set) ("_position" pns)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.Ex_binder" ("_position" T')
###               ("\<^const>HOL.conj"
###                 ("\<^const>WellType.WT" ("_position" P)
###                   ("_Map"
###                     ("_Maplets"
###                       ("_maplet" ("_position" this)
###                         ("_applC" ("_position" Class) ("_position" C)))
###                       ("_maplets" ("_position" pns) ("_position" Ts))))
###                   ("_position" body) ("_position" T'))
###                 ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                   ("_position" T))))
###             ("_applC" ("_position" \<D>)
###               ("_cargs" ("_position" body)
###                 ("\<^const>Option.option.Some"
###                   ("\<^const>Set.union" ("_Finset" ("_position" this))
###                     ("_applC" ("_position" set) ("_position" pns))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 39 of "$AFP/JinjaDCI/J/JWellForm.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J_mdecl)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" C)
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" Static)
###             ("_tuple_args" ("_position" Ts)
###               ("_tuple_args" ("_position" T)
###                 ("_tuple_args" ("_position" pns)
###                   ("_tuple_arg" ("_position" body))))))))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Ts))
###       ("_applC" ("_position" length) ("_position" pns)))
###     ("\<^const>HOL.conj" ("_applC" ("_position" distinct) ("_position" pns))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.Not"
###           ("_applC" ("_position" sub_RI) ("_position" body)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Ex_binder" ("_position" T')
###             ("\<^const>WellType.WT" ("_position" P)
###               ("_Map" ("_maplets" ("_position" pns) ("_position" Ts)))
###               ("_position" body)
###               ("\<^const>HOL.conj" ("_position" T')
###                 ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                   ("_position" T)))))
###           ("_applC" ("_position" \<D>)
###             ("_cargs" ("_position" body)
###               ("\<^const>Option.option.Some"
###                 ("_applC" ("_position" set) ("_position" pns))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J_mdecl)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" C)
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" Static)
###             ("_tuple_args" ("_position" Ts)
###               ("_tuple_args" ("_position" T)
###                 ("_tuple_args" ("_position" pns)
###                   ("_tuple_arg" ("_position" body))))))))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Ts))
###       ("_applC" ("_position" length) ("_position" pns)))
###     ("\<^const>HOL.conj" ("_applC" ("_position" distinct) ("_position" pns))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.Not"
###           ("_applC" ("_position" sub_RI) ("_position" body)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Ex_binder" ("_position" T')
###             ("\<^const>HOL.conj"
###               ("\<^const>WellType.WT" ("_position" P)
###                 ("_Map" ("_maplets" ("_position" pns) ("_position" Ts)))
###                 ("_position" body) ("_position" T'))
###               ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                 ("_position" T))))
###           ("_applC" ("_position" \<D>)
###             ("_cargs" ("_position" body)
###               ("\<^const>Option.option.Some"
###                 ("_applC" ("_position" set) ("_position" pns))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.JWellForm"
### 0.274s elapsed time, 0.564s cpu time, 0.041s GC time
Proofs for inductive predicate(s) "eval\<^sub>1", "evals\<^sub>1"
  Proving monotonicity ...
### Ambiguous input (line 411 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1.eval\<^sub>1" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1.eval\<^sub>1" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 412 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1.eval\<^sub>1" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1.eval\<^sub>1" ("_position" P)
###     ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.J1"
### 6.594s elapsed time, 10.375s cpu time, 0.737s GC time
Loading theory "Draft.J1WellForm" (required by "Draft.J1WellFormMoreTemplates")
### Ambiguous input (line 63 of "$AFP/JinjaDCI/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WT\<^sub>1" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" T)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WT\<^sub>1" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT\<^sub>1" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WT\<^sub>1" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" T)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WT\<^sub>1" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT\<^sub>1" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 67 of "$AFP/JinjaDCI/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" T)
###         ("_position" D)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WT\<^sub>1" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" T')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT\<^sub>1" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" T)
###         ("_position" D)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WT\<^sub>1" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" T')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT\<^sub>1" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "WT\<^sub>1", "WTs\<^sub>1"
  Proving monotonicity ...
### Ignoring duplicate safe introduction (intro!)
### ?P,?E \<turnstile>\<^sub>1 [] [::] []
### Ignoring duplicate safe introduction (intro!)
### ?P,?E \<turnstile>\<^sub>1 [] [::] []
### Ambiguous input (line 132 of "$AFP/JinjaDCI/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" T)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 133 of "$AFP/JinjaDCI/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" T)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 263 of "$AFP/JinjaDCI/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" sh) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" T)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" sh) ("_position" e\<^sub>2)
###             ("_position" T\<^sub>2)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P)
###               ("_position" T\<^sub>2) ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" sh) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" T)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" sh) ("_position" e\<^sub>2)
###             ("_position" T\<^sub>2)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P)
###               ("_position" T\<^sub>2) ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 267 of "$AFP/JinjaDCI/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" sh) ("_position" e\<^sub>1)
###         ("_position" NT)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" sh) ("_position" e\<^sub>2)
###           ("_position" T\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" sh) ("_position" e\<^sub>1)
###         ("_position" NT)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" sh) ("_position" e\<^sub>2)
###           ("_position" T\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 271 of "$AFP/JinjaDCI/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" sh) ("_position" e\<^sub>2)
###         ("_position" T\<^sub>2)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" T)
###           ("_position" D)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T\<^sub>2)
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" sh) ("_position" e\<^sub>2)
###         ("_position" T\<^sub>2)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" T)
###           ("_position" D)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T\<^sub>2)
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "WTrt\<^sub>1", "WTrts\<^sub>1"
  Proving monotonicity ...
### Ignoring duplicate safe introduction (intro!)
### ?P,?E,?h,?sh \<turnstile>\<^sub>1 [] [:] []
### Ignoring duplicate safe introduction (intro!)
### ?P,?E,?h,?sh \<turnstile>\<^sub>1 [] [:] []
### Ambiguous input (line 363 of "$AFP/JinjaDCI/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1WellForm.WTrt2\<^sub>1" ("_position" P) ("_position" E)
###     ("_position" h) ("_position" sh)
###     ("\<^const>Expr.exp.FAss" ("_position" e) ("_position" F)
###       ("_position" D) ("_position" v))
###     ("_position" T)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1WellForm.WTrt2\<^sub>1" ("_position" P) ("_position" E)
###     ("_position" h) ("_position" sh)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###         ("_position" D))
###       ("_position" v))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 364 of "$AFP/JinjaDCI/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1WellForm.WTrt2\<^sub>1" ("_position" P) ("_position" E)
###     ("_position" h) ("_position" sh)
###     ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###       ("_position" D) ("_position" v))
###     ("_position" T)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1WellForm.WTrt2\<^sub>1" ("_position" P) ("_position" E)
###     ("_position" h) ("_position" sh)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_position" v))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 414 of "$AFP/JinjaDCI/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<B>)
###       ("_cargs"
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))
###         ("_position" i)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" \<B>)
###         ("_cargs" ("_position" e\<^sub>1) ("_position" i)))
###       ("_applC" ("_position" \<B>)
###         ("_cargs" ("_position" e\<^sub>2) ("_position" i))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<B>)
###       ("_cargs"
###         ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))
###         ("_position" i)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" \<B>)
###         ("_cargs" ("_position" e\<^sub>1) ("_position" i)))
###       ("_applC" ("_position" \<B>)
###         ("_cargs" ("_position" e\<^sub>2) ("_position" i))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 415 of "$AFP/JinjaDCI/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<B>)
###       ("_cargs"
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))
###         ("_position" i)))
###     ("_applC" ("_position" \<B>)
###       ("_cargs" ("_position" e\<^sub>2) ("_position" i)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<B>)
###       ("_cargs"
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))
###         ("_position" i)))
###     ("_applC" ("_position" \<B>)
###       ("_cargs" ("_position" e\<^sub>2) ("_position" i)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  \<B> :: "nat exp => nat => bool"
  \<B>s :: "nat exp list => nat => bool"
### Ambiguous input (line 433 of "$AFP/JinjaDCI/Compiler/J1WellForm.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J\<^sub>1_mdecl)
###     ("_cargs" ("_position" P) ("_position" C)))
###   ("_lambda"
###     ("_pattern" ("_position" M)
###       ("_patterns" ("_position" b)
###         ("_patterns" ("_position" Ts)
###           ("_patterns" ("_position" T) ("_position" body)))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.Not"
###         ("_applC" ("_position" sub_RI) ("_position" body)))
###       ("_case_syntax" ("_position" b)
###         ("_case2"
###           ("_case1" ("_position" NonStatic)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.Ex_binder" ("_position" T')
###                 ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P)
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" Class) ("_position" C))
###                     ("_position" Ts))
###                   ("_position" body)
###                   ("\<^const>HOL.conj" ("_position" T')
###                     ("\<^const>TypeRel.widen" ("_position" P)
###                       ("_position" T') ("_position" T)))))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" \<D>)
###                   ("_cargs" ("_position" body)
###                     ("\<^const>Option.option.Some"
###                       ("\<^const>Set_Interval.ord_class.atMost"
###                         ("_applC" ("_position" size) ("_position" Ts))))))
###                 ("_applC" ("_position" \<B>)
###                   ("_cargs" ("_position" body)
###                     ("\<^const>Groups.plus_class.plus"
###                       ("_applC" ("_position" size) ("_position" Ts))
###                       ("\<^const>Groups.one_class.one")))))))
###           ("_case1" ("_position" Static)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.Ex_binder" ("_position" T')
###                 ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P)
###                   ("_position" Ts) ("_position" body)
###                   ("\<^const>HOL.conj" ("_position" T')
###                     ("\<^const>TypeRel.widen" ("_position" P)
###                       ("_position" T') ("_position" T)))))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" \<D>)
###                   ("_cargs" ("_position" body)
###                     ("\<^const>Option.option.Some"
###                       ("\<^const>Set_Interval.ord_class.lessThan"
###                         ("_applC" ("_position" size) ("_position" Ts))))))
###                 ("_applC" ("_position" \<B>)
###                   ("_cargs" ("_position" body)
###                     ("_applC" ("_position" size) ("_position" Ts))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J\<^sub>1_mdecl)
###     ("_cargs" ("_position" P) ("_position" C)))
###   ("_lambda"
###     ("_pattern" ("_position" M)
###       ("_patterns" ("_position" b)
###         ("_patterns" ("_position" Ts)
###           ("_patterns" ("_position" T) ("_position" body)))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.Not"
###         ("_applC" ("_position" sub_RI) ("_position" body)))
###       ("_case_syntax" ("_position" b)
###         ("_case2"
###           ("_case1" ("_position" NonStatic)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.Ex_binder" ("_position" T')
###                 ("\<^const>HOL.conj"
###                   ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P)
###                     ("\<^const>List.list.Cons"
###                       ("_applC" ("_position" Class) ("_position" C))
###                       ("_position" Ts))
###                     ("_position" body) ("_position" T'))
###                   ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                     ("_position" T))))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" \<D>)
###                   ("_cargs" ("_position" body)
###                     ("\<^const>Option.option.Some"
###                       ("\<^const>Set_Interval.ord_class.atMost"
###                         ("_applC" ("_position" size) ("_position" Ts))))))
###                 ("_applC" ("_position" \<B>)
###                   ("_cargs" ("_position" body)
###                     ("\<^const>Groups.plus_class.plus"
###                       ("_applC" ("_position" size) ("_position" Ts))
###                       ("\<^const>Groups.one_class.one")))))))
###           ("_case1" ("_position" Static)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.Ex_binder" ("_position" T')
###                 ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P)
###                   ("_position" Ts) ("_position" body)
###                   ("\<^const>HOL.conj" ("_position" T')
###                     ("\<^const>TypeRel.widen" ("_position" P)
###                       ("_position" T') ("_position" T)))))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" \<D>)
###                   ("_cargs" ("_position" body)
###                     ("\<^const>Option.option.Some"
###                       ("\<^const>Set_Interval.ord_class.lessThan"
###                         ("_applC" ("_position" size) ("_position" Ts))))))
###                 ("_applC" ("_position" \<B>)
###                   ("_cargs" ("_position" body)
###                     ("_applC" ("_position" size) ("_position" Ts))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J\<^sub>1_mdecl)
###     ("_cargs" ("_position" P) ("_position" C)))
###   ("_lambda"
###     ("_pattern" ("_position" M)
###       ("_patterns" ("_position" b)
###         ("_patterns" ("_position" Ts)
###           ("_patterns" ("_position" T) ("_position" body)))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.Not"
###         ("_applC" ("_position" sub_RI) ("_position" body)))
###       ("_case_syntax" ("_position" b)
###         ("_case2"
###           ("_case1" ("_position" NonStatic)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.Ex_binder" ("_position" T')
###                 ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P)
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" Class) ("_position" C))
###                     ("_position" Ts))
###                   ("_position" body)
###                   ("\<^const>HOL.conj" ("_position" T')
###                     ("\<^const>TypeRel.widen" ("_position" P)
###                       ("_position" T') ("_position" T)))))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" \<D>)
###                   ("_cargs" ("_position" body)
###                     ("\<^const>Option.option.Some"
###                       ("\<^const>Set_Interval.ord_class.atMost"
###                         ("_applC" ("_position" size) ("_position" Ts))))))
###                 ("_applC" ("_position" \<B>)
###                   ("_cargs" ("_position" body)
###                     ("\<^const>Groups.plus_class.plus"
###                       ("_applC" ("_position" size) ("_position" Ts))
###                       ("\<^const>Groups.one_class.one")))))))
###           ("_case1" ("_position" Static)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.Ex_binder" ("_position" T')
###                 ("\<^const>HOL.conj"
###                   ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P)
###                     ("_position" Ts) ("_position" body) ("_position" T'))
###                   ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                     ("_position" T))))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" \<D>)
###                   ("_cargs" ("_position" body)
###                     ("\<^const>Option.option.Some"
###                       ("\<^const>Set_Interval.ord_class.lessThan"
###                         ("_applC" ("_position" size) ("_position" Ts))))))
###                 ("_applC" ("_position" \<B>)
###                   ("_cargs" ("_position" body)
###                     ("_applC" ("_position" size) ("_position" Ts))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J\<^sub>1_mdecl)
###     ("_cargs" ("_position" P) ("_position" C)))
###   ("_lambda"
###     ("_pattern" ("_position" M)
###       ("_patterns" ("_position" b)
###         ("_patterns" ("_position" Ts)
###           ("_patterns" ("_position" T) ("_position" body)))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.Not"
###         ("_applC" ("_position" sub_RI) ("_position" body)))
###       ("_case_syntax" ("_position" b)
###         ("_case2"
###           ("_case1" ("_position" NonStatic)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.Ex_binder" ("_position" T')
###                 ("\<^const>HOL.conj"
###                   ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P)
###                     ("\<^const>List.list.Cons"
###                       ("_applC" ("_position" Class) ("_position" C))
###                       ("_position" Ts))
###                     ("_position" body) ("_position" T'))
###                   ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                     ("_position" T))))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" \<D>)
###                   ("_cargs" ("_position" body)
###                     ("\<^const>Option.option.Some"
###                       ("\<^const>Set_Interval.ord_class.atMost"
###                         ("_applC" ("_position" size) ("_position" Ts))))))
###                 ("_applC" ("_position" \<B>)
###                   ("_cargs" ("_position" body)
###                     ("\<^const>Groups.plus_class.plus"
###                       ("_applC" ("_position" size) ("_position" Ts))
###                       ("\<^const>Groups.one_class.one")))))))
###           ("_case1" ("_position" Static)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.Ex_binder" ("_position" T')
###                 ("\<^const>HOL.conj"
###                   ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P)
###                     ("_position" Ts) ("_position" body) ("_position" T'))
###                   ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                     ("_position" T))))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" \<D>)
###                   ("_cargs" ("_position" body)
###                     ("\<^const>Option.option.Some"
###                       ("\<^const>Set_Interval.ord_class.lessThan"
###                         ("_applC" ("_position" size) ("_position" Ts))))))
###                 ("_applC" ("_position" \<B>)
###                   ("_cargs" ("_position" body)
###                     ("_applC" ("_position" size) ("_position" Ts))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 443 of "$AFP/JinjaDCI/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J\<^sub>1_mdecl)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" C)
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" NonStatic)
###             ("_tuple_args" ("_position" Ts)
###               ("_tuple_args" ("_position" T)
###                 ("_tuple_arg" ("_position" body)))))))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.Not" ("_applC" ("_position" sub_RI) ("_position" body)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.Ex_binder" ("_position" T')
###         ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P)
###           ("\<^const>List.list.Cons"
###             ("_applC" ("_position" Class) ("_position" C)) ("_position" Ts))
###           ("_position" body)
###           ("\<^const>HOL.conj" ("_position" T')
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" \<D>)
###           ("_cargs" ("_position" body)
###             ("\<^const>Option.option.Some"
###               ("\<^const>Set_Interval.ord_class.atMost"
###                 ("_applC" ("_position" size) ("_position" Ts))))))
###         ("_applC" ("_position" \<B>)
###           ("_cargs" ("_position" body)
###             ("\<^const>Groups.plus_class.plus"
###               ("_applC" ("_position" size) ("_position" Ts))
###               ("\<^const>Groups.one_class.one"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J\<^sub>1_mdecl)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" C)
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" NonStatic)
###             ("_tuple_args" ("_position" Ts)
###               ("_tuple_args" ("_position" T)
###                 ("_tuple_arg" ("_position" body)))))))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.Not" ("_applC" ("_position" sub_RI) ("_position" body)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.Ex_binder" ("_position" T')
###         ("\<^const>HOL.conj"
###           ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P)
###             ("\<^const>List.list.Cons"
###               ("_applC" ("_position" Class) ("_position" C))
###               ("_position" Ts))
###             ("_position" body) ("_position" T'))
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" \<D>)
###           ("_cargs" ("_position" body)
###             ("\<^const>Option.option.Some"
###               ("\<^const>Set_Interval.ord_class.atMost"
###                 ("_applC" ("_position" size) ("_position" Ts))))))
###         ("_applC" ("_position" \<B>)
###           ("_cargs" ("_position" body)
###             ("\<^const>Groups.plus_class.plus"
###               ("_applC" ("_position" size) ("_position" Ts))
###               ("\<^const>Groups.one_class.one"))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 450 of "$AFP/JinjaDCI/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J\<^sub>1_mdecl)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" C)
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" Static)
###             ("_tuple_args" ("_position" Ts)
###               ("_tuple_args" ("_position" T)
###                 ("_tuple_arg" ("_position" body)))))))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.Not" ("_applC" ("_position" sub_RI) ("_position" body)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.Ex_binder" ("_position" T')
###         ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P) ("_position" Ts)
###           ("_position" body)
###           ("\<^const>HOL.conj" ("_position" T')
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" \<D>)
###           ("_cargs" ("_position" body)
###             ("\<^const>Option.option.Some"
###               ("\<^const>Set_Interval.ord_class.lessThan"
###                 ("_applC" ("_position" size) ("_position" Ts))))))
###         ("_applC" ("_position" \<B>)
###           ("_cargs" ("_position" body)
###             ("_applC" ("_position" size) ("_position" Ts))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J\<^sub>1_mdecl)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" C)
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" Static)
###             ("_tuple_args" ("_position" Ts)
###               ("_tuple_args" ("_position" T)
###                 ("_tuple_arg" ("_position" body)))))))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.Not" ("_applC" ("_position" sub_RI) ("_position" body)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.Ex_binder" ("_position" T')
###         ("\<^const>HOL.conj"
###           ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P) ("_position" Ts)
###             ("_position" body) ("_position" T'))
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" \<D>)
###           ("_cargs" ("_position" body)
###             ("\<^const>Option.option.Some"
###               ("\<^const>Set_Interval.ord_class.lessThan"
###                 ("_applC" ("_position" size) ("_position" Ts))))))
###         ("_applC" ("_position" \<B>)
###           ("_cargs" ("_position" body)
###             ("_applC" ("_position" size) ("_position" Ts))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.J1WellForm"
### 2.039s elapsed time, 2.923s cpu time, 0.195s GC time
Loading theory "Draft.J1WellFormMoreTemplates"
val templateLemmas =
   [("J1WellForm.init_nWT\<^sub>1",
     "~ ?P,?E \<turnstile>\<^sub>1 INIT ?C (?Cs,?b) \<leftarrow> ?e :: ?T",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 6),
                   template_var 5),
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 4),
                       template_var 3),
                     template_var 2),
                   template_var 1)),
               template_var 0)
             )
         )),
    ("J1WellForm.rinit_nWT\<^sub>1",
     "~ ?P,?E \<turnstile>\<^sub>1 RI (?C,?e) ; ?Cs \<leftarrow> ?e' :: ?T",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 6),
                   template_var 5),
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 4),
                       template_var 3),
                     template_var 2),
                   template_var 1)),
               template_var 0)
             )
         )),
    ("J1WellForm.WT\<^sub>1_nsub_RI",
     "?P,?E \<turnstile>\<^sub>1 ?e :: ?T ==> ~ sub_RI ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 1))
           ))),
    ("J1WellForm.WTs\<^sub>1_nsub_RIs",
     "?P,?E \<turnstile>\<^sub>1 ?es [::] ?Ts ==> ~ sub_RIs ?es",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 1))
           ))),
    ("J1WellForm.WTs\<^sub>1_same_size",
     "?P,?E \<turnstile>\<^sub>1 ?es [::] ?Ts ==> length ?es = length ?Ts",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("J1WellForm.WT\<^sub>1_implies_WTrt\<^sub>1",
     "?P,?E \<turnstile>\<^sub>1 ?e :: ?T ==>
      ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?e : ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 1),
                   template_var 0),
                 template_var 4),
               template_var 3),
             template_var 2)
           ))),
    ("J1WellForm.WTs\<^sub>1_implies_WTrts\<^sub>1",
     "?P,?E \<turnstile>\<^sub>1 ?es [::] ?Ts ==>
      ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?es [:] ?Ts",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 1),
                   template_var 0),
                 template_var 4),
               template_var 3),
             template_var 2)
           ))),
    ("J1WellForm.eee",
     "[| ?P,?E \<turnstile>\<^sub>1 [] [::] ?Ts; ?Ts = [] ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_hole 2),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 1, template_hole 0)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("J1WellForm.WT\<^sub>1_unique",
     "[| ?P,?E \<turnstile>\<^sub>1 ?e :: ?T\<^sub>1;
         ?P,?E \<turnstile>\<^sub>1 ?e :: ?T\<^sub>2 |]
      ==> ?T\<^sub>1 = ?T\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("J1WellForm.WTs\<^sub>1_unique",
     "[| ?P,?E \<turnstile>\<^sub>1 ?es [::] ?Ts\<^sub>1;
         ?P,?E \<turnstile>\<^sub>1 ?es [::] ?Ts\<^sub>2 |]
      ==> ?Ts\<^sub>1 = ?Ts\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("J1WellForm.WTrt\<^sub>1_elim_cases",
     "[| ?P,?E,?h,?sh \<turnstile>\<^sub>1 [] [:] ?Ts; ?Ts = [] ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_hole 2),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 1, template_hole 0)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("J1WellForm.sees_wf\<^sub>1_nsub_RI",
     "[| wf_J\<^sub>1_prog ?P;
         ?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = ?body in ?D |]
      ==> ~ sub_RI ?body",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 2, template_var 7),
                          template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 1))
           ))),
    ("J1WellForm.eee",
     "[| ?P,?E \<turnstile>\<^sub>1 Val ?v :: ?T;
         typeof ?v = \<lfloor>?T\<rfloor> ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 4),
                  template_var 3),
                template_app (template_hole 4, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_app
              (template_app (template_hole 2, t_empty), template_var 2),
             template_app (template_hole 0, template_var 1))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("J1WellForm.WTrt\<^sub>1_elim_cases",
     "[| ?P,?E,?h,?sh \<turnstile>\<^sub>1 Val ?v : ?T;
         typeof\<^bsub>?h\<^esub> ?v = \<lfloor>?T\<rfloor> ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 4, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_app (template_hole 3, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_app
              (template_app (template_hole 1, template_var 5),
               template_var 2),
             template_app (template_hole 0, template_var 1))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("J1WellForm.eee",
     "[| ?P,?E \<turnstile>\<^sub>1 new ?C :: ?T;
         [| ?T = Class ?C; is_class ?P ?C |] ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 3),
                template_app (template_hole 3, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app (template_hole 1, template_var 2))],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 2)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("J1WellForm.eee",
     "[| ?P,?E \<turnstile>\<^sub>1 ?C\<bullet>\<^sub>s?F{?D} :: ?T;
         ?P \<turnstile> ?C sees ?F,Static:?T in ?D ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 1, template_var 6),
                         template_var 4),
                       template_var 3),
                     template_hole 0),
                   template_var 1),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("J1WellForm.WT\<^sub>1_is_type",
     "[| wf_prog ?p ?P; ?P,?E \<turnstile>\<^sub>1 ?e :: ?T;
         set ?E <= types ?P |]
      ==> is_type ?P ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_app (template_hole 2, template_var 2),
          template_app
           (template_hole 1,
            template_app (template_hole 0, template_var 3)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 3), template_var 0)
           ))),
    ("J1WellForm.eee",
     "[| ?P,?E \<turnstile>\<^sub>1 Var ?i :: ?T;
         [| ?E ! ?i = ?T; ?i < length ?E |] ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 4),
                  template_var 3),
                template_app (template_hole 4, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1)],
          template_implication
           ([template_inequation
              (less_than, template_var 2,
               template_app (template_hole 0, template_var 3))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("J1WellForm.WTrt\<^sub>1_elim_cases",
     "[| ?P,?E,?h,?sh \<turnstile>\<^sub>1 new ?C : ?T;
         [| ?T = Class ?C; is_class ?P ?C |] ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 4, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_app (template_hole 3, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app (template_hole 1, template_var 2))],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 0, template_var 6),
                   template_var 2)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("J1WellForm.WTrt\<^sub>1_elim_cases",
     "[| ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?C\<bullet>\<^sub>s?F{?D} : ?T;
         ?P \<turnstile> ?C has ?F,Static:?T in ?D ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 8),
                      template_var 7),
                    template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 1, template_var 8),
                         template_var 4),
                       template_var 3),
                     template_hole 0),
                   template_var 1),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("J1WellForm.eee",
     "[| ?P,?E \<turnstile>\<^sub>1 throw ?e :: ?T;
         !!C. [| ?T = Void; ?P,?E \<turnstile>\<^sub>1 ?e :: Class C |]
              ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 4),
                  template_var 3),
                template_app (template_hole 4, template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("J1WellForm.WTrt\<^sub>1_elim_cases",
     "[| ?P,?E,?h,?sh \<turnstile>\<^sub>1 Var ?i : ?T;
         [| ?E ! ?i = ?T; ?i < length ?E |] ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 5, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_app (template_hole 4, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1)],
          template_implication
           ([template_inequation
              (less_than, template_var 2,
               template_app (template_hole 0, template_var 3))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("J1WellForm.eee",
     "[| ?P,?E \<turnstile>\<^sub>1 ?e\<^sub>1;; ?e\<^sub>2 :: ?T;
         !!T\<^sub>1.
            [| ?P,?E \<turnstile>\<^sub>1 ?e\<^sub>1 :: T\<^sub>1;
               ?P,?E \<turnstile>\<^sub>1 ?e\<^sub>2 :: ?T |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("J1WellForm.WTrt\<^sub>1_elim_cases",
     "[| ?P,?E,?h,?sh \<turnstile>\<^sub>1 throw ?e : ?T;
         !!T\<^sub>r.
            [| ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?e : T\<^sub>r;
               is_refT T\<^sub>r |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_app (template_hole 2, template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("J1WellForm.WTrt\<^sub>1_elim_cases",
     "[| ?P,?E,?h,?sh \<turnstile>\<^sub>1 {?i:?U; ?e} : ?T;
         ?P,?E @ [?U],?h,?sh \<turnstile>\<^sub>1 ?e : ?T ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 4, template_var 8),
                      template_var 7),
                    template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 4, template_var 8),
                         template_var 7),
                       template_var 6),
                     template_app
                      (template_app (template_hole 2, template_var 5),
                       template_app
                        (template_app (template_hole 1, template_var 3),
                         template_hole 0))),
                   template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("J1WellForm.eee",
     "[| ?P,?E \<turnstile>\<^sub>1 {?i:?U; ?e} :: ?T;
         [| is_type ?P ?U; ?P,?E @ [?U] \<turnstile>\<^sub>1 ?e :: ?T |]
         ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 6),
                 template_var 3)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 5, template_var 6),
                       template_app
                        (template_app (template_hole 2, template_var 5),
                         template_app
                          (template_app (template_hole 1, template_var 3),
                           template_hole 0))),
                     template_var 2),
                   template_var 1)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("J1WellForm.wf\<^sub>1_types_clinit",
     "[| wf_prog ?wf_md ?P; class ?P ?C = \<lfloor>?a\<rfloor>;
         ?sh ?C = \<lfloor>(?sfs, Processing)\<rfloor> |]
      ==> ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?C\<bullet>\<^sub>sclinit([]) : Void",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 7),
              template_var 6)
            ),
        template_equation
         (template_app
           (template_app (template_hole 10, template_var 6),
            template_var 5),
          template_app (template_hole 9, template_var 4)),
        template_equation
         (template_app (template_var 3, template_var 5),
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 2),
              template_hole 5)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 4, template_var 6),
                     template_var 1),
                   template_var 3),
                 template_var 0),
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 5),
                   template_hole 2),
                 template_hole 1)),
             template_hole 0)
           ))),
    ("J1WellForm.eee",
     "[| ?P,?E \<turnstile>\<^sub>1 ?e\<bullet>?F{?D} :: ?T;
         !!C. [| ?P,?E \<turnstile>\<^sub>1 ?e :: Class C;
                 ?P \<turnstile> C sees ?F,NonStatic:?T in ?D |]
              ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("J1WellForm.eee",
     "[| ?P,?E \<turnstile>\<^sub>1 while (?e) ?c :: ?T;
         !!T. [| ?T = Void; ?P,?E \<turnstile>\<^sub>1 ?e :: Boolean;
                 ?P,?E \<turnstile>\<^sub>1 ?c :: T |]
              ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("J1WellForm.WTrt\<^sub>1_elim_cases",
     "[| ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?e\<^sub>1;;
         ?e\<^sub>2 : ?T\<^sub>2;
         !!T\<^sub>1.
            [| ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?e\<^sub>1 : T\<^sub>1;
               ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?e\<^sub>2 : ?T\<^sub>2 |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("J1WellForm.eee",
     "[| ?P,?E \<turnstile>\<^sub>1 ?e # ?es [::] ?Ts;
         !!T Ts.
            [| ?Ts = T # Ts; ?P,?E \<turnstile>\<^sub>1 ?e :: T;
               ?P,?E \<turnstile>\<^sub>1 ?es [::] Ts |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("J1WellForm.eee",
     "[| ?P,?E \<turnstile>\<^sub>1 try ?e\<^sub>1
         catch(?C ?i) ?e\<^sub>2 :: ?T;
         [| ?P,?E \<turnstile>\<^sub>1 ?e\<^sub>1 :: ?T;
            ?P,?E @ [Class ?C] \<turnstile>\<^sub>1 ?e\<^sub>2 :: ?T;
            is_class ?P ?C |]
         ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 7),
                  template_var 6),
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 5, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 6, template_var 7),
                     template_var 6),
                   template_var 5),
                 template_var 1)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 6, template_var 7),
                       template_app
                        (template_app (template_hole 4, template_var 6),
                         template_app
                          (template_app
                            (template_hole 3,
                             template_app
                              (template_hole 2, template_var 4)),
                           template_hole 1))),
                     template_var 2),
                   template_var 1)
                 )],
            template_implication
             ([template_predicate
                (
                   template_app
                    (template_app (template_hole 0, template_var 7),
                     template_var 4)
                   )],
              template_predicate (template_var 0))))],
       template_predicate (template_var 0))),
    ("J1WellForm.WTrt\<^sub>1_elim_cases",
     "[| ?P,?E,?h,?sh \<turnstile>\<^sub>1 while (?e) ?c : ?T;
         !!T. [| ?T = Void; ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?e : Boolean;
                 ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?c : T |]
              ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 5, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("J1WellForm.eee",
     "[| ?P,?E \<turnstile>\<^sub>1 ?i:=?e :: ?T;
         !!T'. [| ?T = Void; ?i < length ?E;
                  ?P,?E \<turnstile>\<^sub>1 ?e :: T';
                  ?P \<turnstile> T' \<le> ?E ! ?i |]
               ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("J1WellForm.WTrt\<^sub>1_elim_cases",
     "[| ?P,?E,?h,?sh \<turnstile>\<^sub>1 Cast ?D ?e : ?T;
         !!T. [| ?T = Class ?D; ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?e : T;
                 is_refT T; is_class ?P ?D |]
              ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 6, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("J1WellForm.clinit\<^sub>1_proc_pres",
     "[| wf_J\<^sub>1_prog ?P;
         ?P \<turnstile>\<^sub>1 \<langle>?C\<^sub>0\<bullet>\<^sub>sclinit([]),
                                  (?h, ?l, ?sh)\<rangle> \<Rightarrow>
                                 \<langle>?e',(?h', ?l', ?sh')\<rangle>;
         ?sh ?C' = \<lfloor>(?sfs, Processing)\<rfloor> |]
      ==> EX sfs. ?sh' ?C' = \<lfloor>(sfs, Processing)\<rfloor>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_hole 11),
              template_var 10)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 10, template_var 10),
                    template_app
                     (template_app
                       (template_app (template_hole 9, template_var 9),
                        template_hole 8),
                      template_hole 7)),
                  template_app
                   (template_app (template_hole 6, template_var 8),
                    template_app
                     (template_app (template_hole 5, template_var 7),
                      template_var 6))),
                template_var 5),
              template_app
               (template_app (template_hole 6, template_var 4),
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)))
            ),
        template_equation
         (template_app (template_var 6, template_var 1),
          template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("J1WellForm.WTrt\<^sub>1_elim_cases",
     "[| ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?e # ?es [:] ?Ts;
         !!T Ts.
            [| ?Ts = T # Ts; ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?e : T;
               ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?es [:] Ts |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 6, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("J1WellForm.WTrt\<^sub>1_elim_cases",
     "[| ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?v:=?e : ?T;
         !!T'. [| ?T = Void; ?v < length ?E;
                  ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?e : T';
                  ?P \<turnstile> T' \<le> ?E ! ?v |]
               ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 8, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("J1WellForm.eee",
     "[| ?P,?E \<turnstile>\<^sub>1
         ?C\<bullet>\<^sub>s?F{?D} := ?e\<^sub>2 :: ?T;
         !!T T'.
            [| ?T = Void; ?P \<turnstile> ?C sees ?F,Static:T in ?D;
               ?P,?E \<turnstile>\<^sub>1 ?e\<^sub>2 :: T';
               ?P \<turnstile> T' \<le> T |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 7),
                  template_var 6),
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 6, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("J1WellForm.eval\<^sub>1_proc_pres",
     "[| wf_J\<^sub>1_prog ?P;
         ?P \<turnstile>\<^sub>1 \<langle>?e,
                                  (?h, ?l, ?sh)\<rangle> \<Rightarrow>
                                 \<langle>?e',(?h', ?l', ?sh')\<rangle>;
         not_init ?C ?e;
         EX sfs. ?sh ?C = \<lfloor>(sfs, Processing)\<rfloor> |]
      ==> EX sfs'. ?sh' ?C = \<lfloor>(sfs', Processing)\<rfloor>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_hole 9),
              template_var 9)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 8, template_var 9),
                    template_var 8),
                  template_app
                   (template_app (template_hole 7, template_var 7),
                    template_app
                     (template_app (template_hole 6, template_var 6),
                      template_var 5))),
                template_var 4),
              template_app
               (template_app (template_hole 7, template_var 3),
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_var 8)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("J1WellForm.evals\<^sub>1_proc_pres",
     "[| wf_J\<^sub>1_prog ?P;
         ?P \<turnstile>\<^sub>1 \<langle>?es,
                                  (?h, ?l, ?sh)\<rangle> [\<Rightarrow>]
                                 \<langle>?es',(?h', ?l', ?sh')\<rangle>;
         not_inits ?C ?es;
         EX sfs. ?sh ?C = \<lfloor>(sfs, Processing)\<rfloor> |]
      ==> EX sfs'. ?sh' ?C = \<lfloor>(sfs', Processing)\<rfloor>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_hole 9),
              template_var 9)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 8, template_var 9),
                    template_var 8),
                  template_app
                   (template_app (template_hole 7, template_var 7),
                    template_app
                     (template_app (template_hole 6, template_var 6),
                      template_var 5))),
                template_var 4),
              template_app
               (template_app (template_hole 7, template_var 3),
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_var 8)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("J1WellForm.WTrt\<^sub>1_elim_cases",
     "[| ?P,?E,?h,?sh \<turnstile>\<^sub>1 try ?e\<^sub>1
         catch(?C ?V) ?e\<^sub>2 : ?T;
         !!T\<^sub>1.
            [| ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?e\<^sub>1 : T\<^sub>1;
               ?P,?E @
                  [Class ?C],?h,?sh \<turnstile>\<^sub>1 ?e\<^sub>2 : ?T;
               ?P \<turnstile> T\<^sub>1 \<le> ?T |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 7, template_var 9),
                      template_var 8),
                    template_var 7),
                  template_var 6),
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 6, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("J1WellForm.WTrt\<^sub>1_elim_cases",
     "[| ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?e\<bullet>?F{?D} : ?T;
         !!C. [| ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?e : Class C;
                 ?P \<turnstile> C has ?F,NonStatic:?T in ?D |]
              ==> ?Pa;
         ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?e : NT ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 6, template_var 8),
                      template_var 7),
                    template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 5, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 6, template_var 8),
                         template_var 7),
                       template_var 6),
                     template_var 5),
                   template_var 4),
                 template_hole 0)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("J1WellForm.WTrt\<^sub>1_elim_cases",
     "[| ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?C\<bullet>\<^sub>s?F{?D} := ?v : ?T;
         !!T\<^sub>2 T.
            [| ?T = Void; ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?v : T\<^sub>2;
               ?P \<turnstile> ?C has ?F,Static:T in ?D;
               ?P \<turnstile> T\<^sub>2 \<le> T |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 7, template_var 9),
                      template_var 8),
                    template_var 7),
                  template_var 6),
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 6, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("J1WellForm.eee",
     "[| ?P,?E \<turnstile>\<^sub>1 Cast ?D ?e :: ?T;
         !!D. [| ?T = Class ?D; ?P,?E \<turnstile>\<^sub>1 ?e :: Class D;
                 is_class ?P ?D;
                 ?P \<turnstile> ?D \<preceq>\<^sup>* D |
                 ?P \<turnstile> D \<preceq>\<^sup>* ?D |]
              ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 9, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0))),
    ("J1WellForm.eee",
     "[| ?P,?E \<turnstile>\<^sub>1 ?C\<bullet>\<^sub>s?M(?es) :: ?T;
         !!Ts m D Ts'.
            [| ?P \<turnstile> ?C sees ?M, Static :  Ts\<rightarrow>?T = m in D;
               ?P,?E \<turnstile>\<^sub>1 ?es [::] Ts';
               ?P \<turnstile> Ts' [\<le>] Ts; ?M ~= clinit |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 12, template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 11, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate (template_var 0))),
    ("J1WellForm.eee",
     "[| ?P,?E \<turnstile>\<^sub>1
         ?e\<^sub>1\<bullet>?F{?D} := ?e\<^sub>2 :: ?T;
         !!C T T'.
            [| ?T = Void; ?P,?E \<turnstile>\<^sub>1 ?e\<^sub>1 :: Class C;
               ?P \<turnstile> C sees ?F,NonStatic:T in ?D;
               ?P,?E \<turnstile>\<^sub>1 ?e\<^sub>2 :: T';
               ?P \<turnstile> T' \<le> T |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 7),
                  template_var 6),
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 8, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("J1WellForm.eee",
     "[| ?P,?E \<turnstile>\<^sub>1 ?e\<bullet>?M(?es) :: ?T;
         !!C Ts' m D Ts.
            [| ?P,?E \<turnstile>\<^sub>1 ?e :: Class C;
               ?P \<turnstile> C sees ?M, NonStatic :  Ts'\<rightarrow>?T = m in D;
               ?P,?E \<turnstile>\<^sub>1 ?es [::] Ts;
               ?P \<turnstile> Ts [\<le>] Ts' |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 9, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0))),
    ("J1WellForm.eee",
     "[| ?P,?E \<turnstile>\<^sub>1
         ?e\<^sub>1 \<guillemotleft>?bop\<guillemotright> ?e\<^sub>2 :: ?T;
         !!T\<^sub>1 T\<^sub>2.
            [| ?P,?E \<turnstile>\<^sub>1 ?e\<^sub>1 :: T\<^sub>1;
               ?P,?E \<turnstile>\<^sub>1 ?e\<^sub>2 :: T\<^sub>2;
               case ?bop of
               Eq =>
                 (?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 |
                  ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1) &
                 ?T = Boolean
               | Add =>
                   T\<^sub>1 = Integer &
                   T\<^sub>2 = Integer & ?T = Integer |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 8, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("J1WellForm.eee",
     "[| ?P,?E \<turnstile>\<^sub>1 if (?e) ?e\<^sub>1
         else ?e\<^sub>2 :: ?T;
         !!T\<^sub>1 T\<^sub>2.
            [| ?P,?E \<turnstile>\<^sub>1 ?e :: Boolean;
               ?P,?E \<turnstile>\<^sub>1 ?e\<^sub>1 :: T\<^sub>1;
               ?P,?E \<turnstile>\<^sub>1 ?e\<^sub>2 :: T\<^sub>2;
               ?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 |
               ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1;
               ?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 --> ?T = T\<^sub>2;
               ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1 -->
               ?T = T\<^sub>1 |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("J1WellForm.WTrt\<^sub>1_elim_cases",
     "[| ?P,?E,?h,?sh \<turnstile>\<^sub>1 if (?e) ?e\<^sub>1
         else ?e\<^sub>2 : ?T;
         !!T\<^sub>1 T\<^sub>2.
            [| ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?e : Boolean;
               ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?e\<^sub>1 : T\<^sub>1;
               ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?e\<^sub>2 : T\<^sub>2;
               ?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 |
               ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1;
               ?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 --> ?T = T\<^sub>2;
               ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1 -->
               ?T = T\<^sub>1 |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 7, template_var 8),
                      template_var 7),
                    template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("J1WellForm.WTrt\<^sub>1_elim_cases",
     "[| ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?e\<^sub>1 \<guillemotleft>?bop\<guillemotright> ?e\<^sub>2 : ?T;
         !!T\<^sub>1 T\<^sub>2.
            [| ?bop = Eq; ?T = Boolean;
               ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?e\<^sub>1 : T\<^sub>1;
               ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?e\<^sub>2 : T\<^sub>2 |]
            ==> ?Pa;
         [| ?bop = Add; ?T = Integer;
            ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?e\<^sub>1 : Integer;
            ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?e\<^sub>2 : Integer |]
         ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 8, template_var 8),
                      template_var 7),
                    template_var 6),
                  template_var 5),
                template_app
                 (template_app
                   (template_app (template_hole 7, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_implication
         ([template_equation (template_var 3, template_hole 1)],
          template_implication
           ([template_equation (template_var 1, template_hole 0)],
            template_implication
             ([template_predicate
                (
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 8, template_var 8),
                             template_var 7),
                           template_var 6),
                         template_var 5),
                       template_var 4),
                     template_hole 0)
                   )],
              template_implication
               ([template_predicate
                  (
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 8, template_var 8),
                               template_var 7),
                             template_var 6),
                           template_var 5),
                         template_var 2),
                       template_hole 0)
                     )],
                template_predicate (template_var 0)))))],
       template_predicate (template_var 0))),
    ("J1WellForm.WTrt\<^sub>1_elim_cases",
     "[| ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?C\<bullet>\<^sub>s?M
                         {?D}(?es) : ?T;
         !!Ts m D Ts' sfs vs.
            [| ?P \<turnstile> ?C sees ?M
  {?D}, Static :  Ts\<rightarrow>?T = m in D;
               ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?es [:] Ts';
               ?P \<turnstile> Ts' [\<le>] Ts;
               ?M {?D} = clinit -->
               ?sh D = \<lfloor>(sfs, Processing)\<rfloor> &
               ?es = map Val vs |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 24, template_var 9),
                      template_var 8),
                    template_var 7),
                  template_var 6),
                template_app
                 (template_app
                   (template_app (template_hole 23, template_var 5),
                    template_app
                     (template_var 4,
                      template_app
                       (template_app (template_hole 22, template_var 3),
                        template_hole 21))),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 20, t_empty))],
       template_predicate (template_var 0))),
    ("J1WellForm.WTrt\<^sub>1_elim_cases",
     "[| ?P,?E,?h,?sh \<turnstile>\<^sub>1 INIT ?C (?Cs,?b) \<leftarrow> ?e : ?T;
         [| ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?e : ?T; ~ sub_RI ?e;
            ALL C':set (tl ?Cs).
               EX sfs. ?sh C' = \<lfloor>(sfs, Processing)\<rfloor>;
            ?b -->
            (ALL C':set ?Cs.
                EX sfs. ?sh C' = \<lfloor>(sfs, Processing)\<rfloor>);
            distinct ?Cs; supercls_lst ?P ?Cs; is_class ?P ?C;
            Ball (set ?Cs) (is_class ?P) |]
         ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 15, template_var 9),
                      template_var 8),
                    template_var 7),
                  template_var 6),
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 14, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 15, template_var 9),
                         template_var 8),
                       template_var 7),
                     template_var 6),
                   template_var 2),
                 template_var 1)
               )],
          template_implication
           ([template_negation
              (
                 template_predicate
                  (template_app (template_hole 12, template_var 2))
                 )],
            template_implication
             ([template_predicate
                (
                   template_app
                    (template_app
                      (template_hole 11,
                       template_app
                        (template_hole 10,
                         template_app (template_hole 9, template_var 4))),
                     t_empty)
                   )],
              template_implication
               ([template_predicate
                  (
                     template_app
                      (template_app (template_hole 3, template_var 3),
                       template_app
                        (template_app
                          (template_hole 11,
                           template_app (template_hole 10, template_var 4)),
                         t_empty))
                     )],
                template_implication
                 ([template_predicate
                    (template_app (template_hole 2, template_var 4))],
                  template_implication
                   ([template_predicate
                      (
                         template_app
                          (template_app (template_hole 1, template_var 9),
                           template_var 4)
                         )],
                    template_implication
                     ([template_predicate
                        (
                           template_app
                            (template_app (template_hole 0, template_var 9),
                             template_var 5)
                           )],
                      template_implication
                       ([template_predicate
                          (
                             template_app
                              (template_app
                                (template_hole 11,
                                 template_app
                                  (template_hole 10, template_var 4)),
                               template_app
                                (template_hole 0, template_var 9))
                             )],
                        template_predicate (template_var 0)))))))))],
       template_predicate (template_var 0))),
    ("J1WellForm.WTrt\<^sub>1_elim_cases",
     "[| ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?e\<bullet>?F{?D} := ?v : ?T;
         !!C T T\<^sub>2.
            [| ?T = Void; ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?e : Class C;
               ?P \<turnstile> C has ?F,NonStatic:T in ?D;
               ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?v : T\<^sub>2;
               ?P \<turnstile> T\<^sub>2 \<le> T |]
            ==> ?Pa;
         !!T\<^sub>2.
            [| ?T = Void; ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?e : NT;
               ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?v : T\<^sub>2 |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 10, template_var 9),
                      template_var 8),
                    template_var 7),
                  template_var 6),
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 9, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("J1WellForm.WTrt\<^sub>1_elim_cases",
     "[| ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?e\<bullet>?M {?D}(?es) : ?T;
         !!C Ts m D Ts'.
            [| ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?e : Class C;
               ?P \<turnstile> C sees ?M
 {?D}, NonStatic :  Ts\<rightarrow>?T = m in D;
               ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?es [:] Ts';
               ?P \<turnstile> Ts' [\<le>] Ts |]
            ==> ?Pa;
         !!Ts. [| ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?e : NT;
                  ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?es [:] Ts |]
               ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 13, template_var 9),
                      template_var 8),
                    template_var 7),
                  template_var 6),
                template_app
                 (template_app
                   (template_app (template_hole 12, template_var 5),
                    template_app
                     (template_var 4,
                      template_app
                       (template_app (template_hole 11, template_var 3),
                        template_hole 10))),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0))),
    ("J1WellForm.WTrt\<^sub>1_elim_cases",
     "[| ?P,?E,?h,?sh \<turnstile>\<^sub>1 RI (?C,?e) ; ?Cs \<leftarrow> ?e' : ?T;
         !!T sfs.
            [| ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?e : T;
               ?P,?E,?h,?sh \<turnstile>\<^sub>1 ?e' : ?T; ~ sub_RI ?e';
               ALL C':set ?Cs.
                  EX sfs. ?sh C' = \<lfloor>(sfs, Processing)\<rfloor>;
               ?sh ?C = \<lfloor>(sfs, Processing)\<rfloor> |
               ?sh ?C = \<lfloor>(sfs, Error)\<rfloor> &
               ?e = THROW NoClassDefFoundError;
               is_class ?P ?C; Ball (set ?Cs) (is_class ?P); not_init ?C ?e;
               ALL C':set ?Cs. not_init C' ?e; ?C ~: set ?Cs; distinct ?Cs;
               ALL C':set ?Cs. ?P \<turnstile> C' \<preceq>\<^sup>* ?C;
               supercls_lst ?P ?Cs |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 30, template_var 9),
                      template_var 8),
                    template_var 7),
                  template_var 6),
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 29, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 28, t_empty))],
       template_predicate (template_var 0))),
    ("J1WellForm.WT\<^sub>1_WTs\<^sub>1_inducts",
     "[| ?P,?x1a \<turnstile>\<^sub>1 ?x2a :: ?x3a;
         !!C E. is_class ?P C ==> ?P1.0 E (new C) (Class C);
         !!E e D C.
            [| ?P,E \<turnstile>\<^sub>1 e :: Class D; ?P1.0 E e (Class D);
               is_class ?P C;
               ?P \<turnstile> C \<preceq>\<^sup>* D |
               ?P \<turnstile> D \<preceq>\<^sup>* C |]
            ==> ?P1.0 E (Cast C e) (Class C);
         !!v T E. typeof v = \<lfloor>T\<rfloor> ==> ?P1.0 E (Val v) T;
         !!E i T. [| E ! i = T; i < length E |] ==> ?P1.0 E (Var i) T;
         !!E e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2 bop T.
            [| ?P,E \<turnstile>\<^sub>1 e\<^sub>1 :: T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E \<turnstile>\<^sub>1 e\<^sub>2 :: T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2;
               case bop of
               Eq =>
                 (?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 |
                  ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1) &
                 T = Boolean
               | Add =>
                   T\<^sub>1 = Integer &
                   T\<^sub>2 = Integer & T = Integer |]
            ==> ?P1.0 E
                 (e\<^sub>1 \<guillemotleft>bop\<guillemotright> e\<^sub>2)
                 T;
         !!E i T e T'.
            [| E ! i = T; i < length E; ?P,E \<turnstile>\<^sub>1 e :: T';
               ?P1.0 E e T'; ?P \<turnstile> T' \<le> T |]
            ==> ?P1.0 E (i:=e) Void;
         !!E e C F T D.
            [| ?P,E \<turnstile>\<^sub>1 e :: Class C; ?P1.0 E e (Class C);
               ?P \<turnstile> C sees F,NonStatic:T in D |]
            ==> ?P1.0 E (e\<bullet>F{D}) T;
         !!C F T D E.
            ?P \<turnstile> C sees F,Static:T in D ==>
            ?P1.0 E (C\<bullet>\<^sub>sF{D}) T;
         !!E e\<^sub>1 C F T D e\<^sub>2 T'.
            [| ?P,E \<turnstile>\<^sub>1 e\<^sub>1 :: Class C;
               ?P1.0 E e\<^sub>1 (Class C);
               ?P \<turnstile> C sees F,NonStatic:T in D;
               ?P,E \<turnstile>\<^sub>1 e\<^sub>2 :: T';
               ?P1.0 E e\<^sub>2 T'; ?P \<turnstile> T' \<le> T |]
            ==> ?P1.0 E (e\<^sub>1\<bullet>F{D} := e\<^sub>2) Void;
         !!C F T D E e\<^sub>2 T'.
            [| ?P \<turnstile> C sees F,Static:T in D;
               ?P,E \<turnstile>\<^sub>1 e\<^sub>2 :: T';
               ?P1.0 E e\<^sub>2 T'; ?P \<turnstile> T' \<le> T |]
            ==> ?P1.0 E (C\<bullet>\<^sub>sF{D} := e\<^sub>2) Void;
         !!E e C M Ts' T m D es Ts.
            [| ?P,E \<turnstile>\<^sub>1 e :: Class C; ?P1.0 E e (Class C);
               ?P \<turnstile> C sees M, NonStatic :  Ts'\<rightarrow>T = m in D;
               ?P,E \<turnstile>\<^sub>1 es [::] Ts; ?P2.0 E es Ts;
               ?P \<turnstile> Ts [\<le>] Ts' |]
            ==> ?P1.0 E (e\<bullet>M(es)) T;
         !!C M Ts T m D E es Ts'.
            [| ?P \<turnstile> C sees M, Static :  Ts\<rightarrow>T = m in D;
               ?P,E \<turnstile>\<^sub>1 es [::] Ts'; ?P2.0 E es Ts';
               ?P \<turnstile> Ts' [\<le>] Ts; M ~= clinit |]
            ==> ?P1.0 E (C\<bullet>\<^sub>sM(es)) T;
         !!T E e T' i.
            [| is_type ?P T; ?P,E @ [T] \<turnstile>\<^sub>1 e :: T';
               ?P1.0 (E @ [T]) e T' |]
            ==> ?P1.0 E {i:T; e} T';
         !!E e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2.
            [| ?P,E \<turnstile>\<^sub>1 e\<^sub>1 :: T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E \<turnstile>\<^sub>1 e\<^sub>2 :: T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2 |]
            ==> ?P1.0 E (e\<^sub>1;; e\<^sub>2) T\<^sub>2;
         !!E e e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2 T.
            [| ?P,E \<turnstile>\<^sub>1 e :: Boolean; ?P1.0 E e Boolean;
               ?P,E \<turnstile>\<^sub>1 e\<^sub>1 :: T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E \<turnstile>\<^sub>1 e\<^sub>2 :: T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2;
               ?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 |
               ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1;
               ?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 --> T = T\<^sub>2;
               ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1 -->
               T = T\<^sub>1 |]
            ==> ?P1.0 E (if (e) e\<^sub>1 else e\<^sub>2) T;
         !!E e c T.
            [| ?P,E \<turnstile>\<^sub>1 e :: Boolean; ?P1.0 E e Boolean;
               ?P,E \<turnstile>\<^sub>1 c :: T; ?P1.0 E c T |]
            ==> ?P1.0 E (while (e) c) Void;
         !!E e C.
            [| ?P,E \<turnstile>\<^sub>1 e :: Class C;
               ?P1.0 E e (Class C) |]
            ==> ?P1.0 E (throw e) Void;
         !!E e\<^sub>1 T C e\<^sub>2 i.
            [| ?P,E \<turnstile>\<^sub>1 e\<^sub>1 :: T;
               ?P1.0 E e\<^sub>1 T;
               ?P,E @ [Class C] \<turnstile>\<^sub>1 e\<^sub>2 :: T;
               ?P1.0 (E @ [Class C]) e\<^sub>2 T; is_class ?P C |]
            ==> ?P1.0 E (try e\<^sub>1 catch(C i) e\<^sub>2) T;
         !!E. ?P2.0 E [] [];
         !!E e T es Ts.
            [| ?P,E \<turnstile>\<^sub>1 e :: T; ?P1.0 E e T;
               ?P,E \<turnstile>\<^sub>1 es [::] Ts; ?P2.0 E es Ts |]
            ==> ?P2.0 E (e # es) (T # Ts) |]
      ==> ?P1.0 ?x1a ?x2a ?x3a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 63, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 62, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 50, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 62, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 62, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 62, t_empty)),
        template_predicate (template_app (template_hole 49, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 1, template_var 4),
               template_var 3),
             template_var 2)
           ))),
    ("J1WellForm.WT\<^sub>1_WTs\<^sub>1_inducts",
     "[| ?P,?x4a \<turnstile>\<^sub>1 ?x5a [::] ?x6a;
         !!C E. is_class ?P C ==> ?P1.0 E (new C) (Class C);
         !!E e D C.
            [| ?P,E \<turnstile>\<^sub>1 e :: Class D; ?P1.0 E e (Class D);
               is_class ?P C;
               ?P \<turnstile> C \<preceq>\<^sup>* D |
               ?P \<turnstile> D \<preceq>\<^sup>* C |]
            ==> ?P1.0 E (Cast C e) (Class C);
         !!v T E. typeof v = \<lfloor>T\<rfloor> ==> ?P1.0 E (Val v) T;
         !!E i T. [| E ! i = T; i < length E |] ==> ?P1.0 E (Var i) T;
         !!E e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2 bop T.
            [| ?P,E \<turnstile>\<^sub>1 e\<^sub>1 :: T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E \<turnstile>\<^sub>1 e\<^sub>2 :: T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2;
               case bop of
               Eq =>
                 (?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 |
                  ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1) &
                 T = Boolean
               | Add =>
                   T\<^sub>1 = Integer &
                   T\<^sub>2 = Integer & T = Integer |]
            ==> ?P1.0 E
                 (e\<^sub>1 \<guillemotleft>bop\<guillemotright> e\<^sub>2)
                 T;
         !!E i T e T'.
            [| E ! i = T; i < length E; ?P,E \<turnstile>\<^sub>1 e :: T';
               ?P1.0 E e T'; ?P \<turnstile> T' \<le> T |]
            ==> ?P1.0 E (i:=e) Void;
         !!E e C F T D.
            [| ?P,E \<turnstile>\<^sub>1 e :: Class C; ?P1.0 E e (Class C);
               ?P \<turnstile> C sees F,NonStatic:T in D |]
            ==> ?P1.0 E (e\<bullet>F{D}) T;
         !!C F T D E.
            ?P \<turnstile> C sees F,Static:T in D ==>
            ?P1.0 E (C\<bullet>\<^sub>sF{D}) T;
         !!E e\<^sub>1 C F T D e\<^sub>2 T'.
            [| ?P,E \<turnstile>\<^sub>1 e\<^sub>1 :: Class C;
               ?P1.0 E e\<^sub>1 (Class C);
               ?P \<turnstile> C sees F,NonStatic:T in D;
               ?P,E \<turnstile>\<^sub>1 e\<^sub>2 :: T';
               ?P1.0 E e\<^sub>2 T'; ?P \<turnstile> T' \<le> T |]
            ==> ?P1.0 E (e\<^sub>1\<bullet>F{D} := e\<^sub>2) Void;
         !!C F T D E e\<^sub>2 T'.
            [| ?P \<turnstile> C sees F,Static:T in D;
               ?P,E \<turnstile>\<^sub>1 e\<^sub>2 :: T';
               ?P1.0 E e\<^sub>2 T'; ?P \<turnstile> T' \<le> T |]
            ==> ?P1.0 E (C\<bullet>\<^sub>sF{D} := e\<^sub>2) Void;
         !!E e C M Ts' T m D es Ts.
            [| ?P,E \<turnstile>\<^sub>1 e :: Class C; ?P1.0 E e (Class C);
               ?P \<turnstile> C sees M, NonStatic :  Ts'\<rightarrow>T = m in D;
               ?P,E \<turnstile>\<^sub>1 es [::] Ts; ?P2.0 E es Ts;
               ?P \<turnstile> Ts [\<le>] Ts' |]
            ==> ?P1.0 E (e\<bullet>M(es)) T;
         !!C M Ts T m D E es Ts'.
            [| ?P \<turnstile> C sees M, Static :  Ts\<rightarrow>T = m in D;
               ?P,E \<turnstile>\<^sub>1 es [::] Ts'; ?P2.0 E es Ts';
               ?P \<turnstile> Ts' [\<le>] Ts; M ~= clinit |]
            ==> ?P1.0 E (C\<bullet>\<^sub>sM(es)) T;
         !!T E e T' i.
            [| is_type ?P T; ?P,E @ [T] \<turnstile>\<^sub>1 e :: T';
               ?P1.0 (E @ [T]) e T' |]
            ==> ?P1.0 E {i:T; e} T';
         !!E e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2.
            [| ?P,E \<turnstile>\<^sub>1 e\<^sub>1 :: T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E \<turnstile>\<^sub>1 e\<^sub>2 :: T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2 |]
            ==> ?P1.0 E (e\<^sub>1;; e\<^sub>2) T\<^sub>2;
         !!E e e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2 T.
            [| ?P,E \<turnstile>\<^sub>1 e :: Boolean; ?P1.0 E e Boolean;
               ?P,E \<turnstile>\<^sub>1 e\<^sub>1 :: T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E \<turnstile>\<^sub>1 e\<^sub>2 :: T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2;
               ?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 |
               ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1;
               ?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 --> T = T\<^sub>2;
               ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1 -->
               T = T\<^sub>1 |]
            ==> ?P1.0 E (if (e) e\<^sub>1 else e\<^sub>2) T;
         !!E e c T.
            [| ?P,E \<turnstile>\<^sub>1 e :: Boolean; ?P1.0 E e Boolean;
               ?P,E \<turnstile>\<^sub>1 c :: T; ?P1.0 E c T |]
            ==> ?P1.0 E (while (e) c) Void;
         !!E e C.
            [| ?P,E \<turnstile>\<^sub>1 e :: Class C;
               ?P1.0 E e (Class C) |]
            ==> ?P1.0 E (throw e) Void;
         !!E e\<^sub>1 T C e\<^sub>2 i.
            [| ?P,E \<turnstile>\<^sub>1 e\<^sub>1 :: T;
               ?P1.0 E e\<^sub>1 T;
               ?P,E @ [Class C] \<turnstile>\<^sub>1 e\<^sub>2 :: T;
               ?P1.0 (E @ [Class C]) e\<^sub>2 T; is_class ?P C |]
            ==> ?P1.0 E (try e\<^sub>1 catch(C i) e\<^sub>2) T;
         !!E. ?P2.0 E [] [];
         !!E e T es Ts.
            [| ?P,E \<turnstile>\<^sub>1 e :: T; ?P1.0 E e T;
               ?P,E \<turnstile>\<^sub>1 es [::] Ts; ?P2.0 E es Ts |]
            ==> ?P2.0 E (e # es) (T # Ts) |]
      ==> ?P2.0 ?x4a ?x5a ?x6a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 63, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 62, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 49, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 62, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 62, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 62, t_empty)),
        template_predicate (template_app (template_hole 48, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty)),
        template_predicate (template_app (template_hole 61, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 0, template_var 4),
               template_var 3),
             template_var 2)
           ))),
    ("J1WellForm.WT\<^sub>1_WTs\<^sub>1_induct",
     "[| !!C E. is_class ?P C ==> ?P1.0 E (new C) (Class C);
         !!E e D C.
            [| ?P,E \<turnstile>\<^sub>1 e :: Class D; ?P1.0 E e (Class D);
               is_class ?P C;
               ?P \<turnstile> C \<preceq>\<^sup>* D |
               ?P \<turnstile> D \<preceq>\<^sup>* C |]
            ==> ?P1.0 E (Cast C e) (Class C);
         !!v T E. typeof v = \<lfloor>T\<rfloor> ==> ?P1.0 E (Val v) T;
         !!E i T. [| E ! i = T; i < length E |] ==> ?P1.0 E (Var i) T;
         !!E e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2 bop T.
            [| ?P,E \<turnstile>\<^sub>1 e\<^sub>1 :: T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E \<turnstile>\<^sub>1 e\<^sub>2 :: T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2;
               case bop of
               Eq =>
                 (?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 |
                  ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1) &
                 T = Boolean
               | Add =>
                   T\<^sub>1 = Integer &
                   T\<^sub>2 = Integer & T = Integer |]
            ==> ?P1.0 E
                 (e\<^sub>1 \<guillemotleft>bop\<guillemotright> e\<^sub>2)
                 T;
         !!E i T e T'.
            [| E ! i = T; i < length E; ?P,E \<turnstile>\<^sub>1 e :: T';
               ?P1.0 E e T'; ?P \<turnstile> T' \<le> T |]
            ==> ?P1.0 E (i:=e) Void;
         !!E e C F T D.
            [| ?P,E \<turnstile>\<^sub>1 e :: Class C; ?P1.0 E e (Class C);
               ?P \<turnstile> C sees F,NonStatic:T in D |]
            ==> ?P1.0 E (e\<bullet>F{D}) T;
         !!C F T D E.
            ?P \<turnstile> C sees F,Static:T in D ==>
            ?P1.0 E (C\<bullet>\<^sub>sF{D}) T;
         !!E e\<^sub>1 C F T D e\<^sub>2 T'.
            [| ?P,E \<turnstile>\<^sub>1 e\<^sub>1 :: Class C;
               ?P1.0 E e\<^sub>1 (Class C);
               ?P \<turnstile> C sees F,NonStatic:T in D;
               ?P,E \<turnstile>\<^sub>1 e\<^sub>2 :: T';
               ?P1.0 E e\<^sub>2 T'; ?P \<turnstile> T' \<le> T |]
            ==> ?P1.0 E (e\<^sub>1\<bullet>F{D} := e\<^sub>2) Void;
         !!C F T D E e\<^sub>2 T'.
            [| ?P \<turnstile> C sees F,Static:T in D;
               ?P,E \<turnstile>\<^sub>1 e\<^sub>2 :: T';
               ?P1.0 E e\<^sub>2 T'; ?P \<turnstile> T' \<le> T |]
            ==> ?P1.0 E (C\<bullet>\<^sub>sF{D} := e\<^sub>2) Void;
         !!E e C M Ts' T m D es Ts.
            [| ?P,E \<turnstile>\<^sub>1 e :: Class C; ?P1.0 E e (Class C);
               ?P \<turnstile> C sees M, NonStatic :  Ts'\<rightarrow>T = m in D;
               ?P,E \<turnstile>\<^sub>1 es [::] Ts; ?P2.0 E es Ts;
               ?P \<turnstile> Ts [\<le>] Ts' |]
            ==> ?P1.0 E (e\<bullet>M(es)) T;
         !!C M Ts T m D E es Ts'.
            [| ?P \<turnstile> C sees M, Static :  Ts\<rightarrow>T = m in D;
               ?P,E \<turnstile>\<^sub>1 es [::] Ts'; ?P2.0 E es Ts';
               ?P \<turnstile> Ts' [\<le>] Ts; M ~= clinit |]
            ==> ?P1.0 E (C\<bullet>\<^sub>sM(es)) T;
         !!T E e T' i.
            [| is_type ?P T; ?P,E @ [T] \<turnstile>\<^sub>1 e :: T';
               ?P1.0 (E @ [T]) e T' |]
            ==> ?P1.0 E {i:T; e} T';
         !!E e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2.
            [| ?P,E \<turnstile>\<^sub>1 e\<^sub>1 :: T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E \<turnstile>\<^sub>1 e\<^sub>2 :: T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2 |]
            ==> ?P1.0 E (e\<^sub>1;; e\<^sub>2) T\<^sub>2;
         !!E e e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2 T.
            [| ?P,E \<turnstile>\<^sub>1 e :: Boolean; ?P1.0 E e Boolean;
               ?P,E \<turnstile>\<^sub>1 e\<^sub>1 :: T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E \<turnstile>\<^sub>1 e\<^sub>2 :: T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2;
               ?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 |
               ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1;
               ?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 --> T = T\<^sub>2;
               ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1 -->
               T = T\<^sub>1 |]
            ==> ?P1.0 E (if (e) e\<^sub>1 else e\<^sub>2) T;
         !!E e c T.
            [| ?P,E \<turnstile>\<^sub>1 e :: Boolean; ?P1.0 E e Boolean;
               ?P,E \<turnstile>\<^sub>1 c :: T; ?P1.0 E c T |]
            ==> ?P1.0 E (while (e) c) Void;
         !!E e C.
            [| ?P,E \<turnstile>\<^sub>1 e :: Class C;
               ?P1.0 E e (Class C) |]
            ==> ?P1.0 E (throw e) Void;
         !!E e\<^sub>1 T C e\<^sub>2 i.
            [| ?P,E \<turnstile>\<^sub>1 e\<^sub>1 :: T;
               ?P1.0 E e\<^sub>1 T;
               ?P,E @ [Class C] \<turnstile>\<^sub>1 e\<^sub>2 :: T;
               ?P1.0 (E @ [Class C]) e\<^sub>2 T; is_class ?P C |]
            ==> ?P1.0 E (try e\<^sub>1 catch(C i) e\<^sub>2) T;
         !!E. ?P2.0 E [] [];
         !!E e T es Ts.
            [| ?P,E \<turnstile>\<^sub>1 e :: T; ?P1.0 E e T;
               ?P,E \<turnstile>\<^sub>1 es [::] Ts; ?P2.0 E es Ts |]
            ==> ?P2.0 E (e # es) (T # Ts) |]
      ==> (?P,?x1a \<turnstile>\<^sub>1 ?x2a :: ?x3a -->
           ?P1.0 ?x1a ?x2a ?x3a) &
          (?P,?x4a \<turnstile>\<^sub>1 ?x5a [::] ?x6a -->
           ?P2.0 ?x4a ?x5a ?x6a)",
     template_implication
      ([template_predicate (template_app (template_hole 64, t_empty)),
        template_predicate (template_app (template_hole 63, t_empty)),
        template_predicate (template_app (template_hole 50, t_empty)),
        template_predicate (template_app (template_hole 63, t_empty)),
        template_predicate (template_app (template_hole 63, t_empty)),
        template_predicate (template_app (template_hole 63, t_empty)),
        template_predicate (template_app (template_hole 63, t_empty)),
        template_predicate (template_app (template_hole 64, t_empty)),
        template_predicate (template_app (template_hole 63, t_empty)),
        template_predicate (template_app (template_hole 64, t_empty)),
        template_predicate (template_app (template_hole 63, t_empty)),
        template_predicate (template_app (template_hole 64, t_empty)),
        template_predicate (template_app (template_hole 49, t_empty)),
        template_predicate (template_app (template_hole 63, t_empty)),
        template_predicate (template_app (template_hole 63, t_empty)),
        template_predicate (template_app (template_hole 63, t_empty)),
        template_predicate (template_app (template_hole 63, t_empty)),
        template_predicate (template_app (template_hole 63, t_empty)),
        template_predicate (template_app (template_hole 63, t_empty)),
        template_predicate (template_app (template_hole 63, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 35,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 57, template_var 8),
                         template_var 5),
                       template_var 4),
                     template_var 3)),
                 template_app
                  (template_app
                    (template_app (template_var 7, template_var 5),
                     template_var 4),
                   template_var 3))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 19, template_var 8),
                       template_var 2),
                     template_var 1),
                   template_var 0)),
               template_app
                (template_app
                  (template_app (template_var 6, template_var 2),
                   template_var 1),
                 template_var 0)))
           ))),
    ("J1WellForm.WTrt\<^sub>1_inducts",
     "[| ?P,?x1a,?h,?sh \<turnstile>\<^sub>1 ?x2a : ?x3a;
         !!C E. is_class ?P C ==> ?P1.0 E (new C) (Class C);
         !!E e T C.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e : T; ?P1.0 E e T;
               is_refT T; is_class ?P C |]
            ==> ?P1.0 E (Cast C e) (Class C);
         !!v T E.
            typeof\<^bsub>?h\<^esub> v = \<lfloor>T\<rfloor> ==>
            ?P1.0 E (Val v) T;
         !!E i T. [| E ! i = T; i < length E |] ==> ?P1.0 E (Var i) T;
         !!E e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e\<^sub>1 : T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E,?h,?sh \<turnstile>\<^sub>1 e\<^sub>2 : T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2 |]
            ==> ?P1.0 E
                 (e\<^sub>1 \<guillemotleft>Eq\<guillemotright> e\<^sub>2)
                 Boolean;
         !!E e\<^sub>1 e\<^sub>2.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e\<^sub>1 : Integer;
               ?P1.0 E e\<^sub>1 Integer;
               ?P,E,?h,?sh \<turnstile>\<^sub>1 e\<^sub>2 : Integer;
               ?P1.0 E e\<^sub>2 Integer |]
            ==> ?P1.0 E
                 (e\<^sub>1 \<guillemotleft>Add\<guillemotright> e\<^sub>2)
                 Integer;
         !!E i T e T'.
            [| E ! i = T; i < length E;
               ?P,E,?h,?sh \<turnstile>\<^sub>1 e : T'; ?P1.0 E e T';
               ?P \<turnstile> T' \<le> T |]
            ==> ?P1.0 E (i:=e) Void;
         !!E e C F T D.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e : Class C;
               ?P1.0 E e (Class C);
               ?P \<turnstile> C has F,NonStatic:T in D |]
            ==> ?P1.0 E (e\<bullet>F{D}) T;
         !!E e F D T.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e : NT; ?P1.0 E e NT |]
            ==> ?P1.0 E (e\<bullet>F{D}) T;
         !!C F T D E.
            ?P \<turnstile> C has F,Static:T in D ==>
            ?P1.0 E (C\<bullet>\<^sub>sF{D}) T;
         !!E e\<^sub>1 C F T D e\<^sub>2 T\<^sub>2.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e\<^sub>1 : Class C;
               ?P1.0 E e\<^sub>1 (Class C);
               ?P \<turnstile> C has F,NonStatic:T in D;
               ?P,E,?h,?sh \<turnstile>\<^sub>1 e\<^sub>2 : T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2;
               ?P \<turnstile> T\<^sub>2 \<le> T |]
            ==> ?P1.0 E (e\<^sub>1\<bullet>F{D} := e\<^sub>2) Void;
         !!E e\<^sub>1 e\<^sub>2 T\<^sub>2 F D.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e\<^sub>1 : NT;
               ?P1.0 E e\<^sub>1 NT;
               ?P,E,?h,?sh \<turnstile>\<^sub>1 e\<^sub>2 : T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2 |]
            ==> ?P1.0 E (e\<^sub>1\<bullet>F{D} := e\<^sub>2) Void;
         !!E e\<^sub>2 T\<^sub>2 C F T D.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e\<^sub>2 : T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2;
               ?P \<turnstile> C has F,Static:T in D;
               ?P \<turnstile> T\<^sub>2 \<le> T |]
            ==> ?P1.0 E (C\<bullet>\<^sub>sF{D} := e\<^sub>2) Void;
         !!E e C M Ts T m D es Ts'.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e : Class C;
               ?P1.0 E e (Class C);
               ?P \<turnstile> C sees M, NonStatic :  Ts\<rightarrow>T = m in D;
               ?P,E,?h,?sh \<turnstile>\<^sub>1 es [:] Ts'; ?P2.0 E es Ts';
               ?P \<turnstile> Ts' [\<le>] Ts |]
            ==> ?P1.0 E (e\<bullet>M(es)) T;
         !!E e es Ts M T.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e : NT; ?P1.0 E e NT;
               ?P,E,?h,?sh \<turnstile>\<^sub>1 es [:] Ts; ?P2.0 E es Ts |]
            ==> ?P1.0 E (e\<bullet>M(es)) T;
         !!C M Ts T m D E es Ts' sfs vs.
            [| ?P \<turnstile> C sees M, Static :  Ts\<rightarrow>T = m in D;
               ?P,E,?h,?sh \<turnstile>\<^sub>1 es [:] Ts'; ?P2.0 E es Ts';
               ?P \<turnstile> Ts' [\<le>] Ts;
               M = clinit -->
               ?sh D = \<lfloor>(sfs, Processing)\<rfloor> &
               es = map Val vs |]
            ==> ?P1.0 E (C\<bullet>\<^sub>sM(es)) T;
         !!E T e T' i.
            [| ?P,E @ [T],?h,?sh \<turnstile>\<^sub>1 e : T';
               ?P1.0 (E @ [T]) e T' |]
            ==> ?P1.0 E {i:T; e} T';
         !!E e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e\<^sub>1 : T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E,?h,?sh \<turnstile>\<^sub>1 e\<^sub>2 : T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2 |]
            ==> ?P1.0 E (e\<^sub>1;; e\<^sub>2) T\<^sub>2;
         !!E e e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2 T.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e : Boolean;
               ?P1.0 E e Boolean;
               ?P,E,?h,?sh \<turnstile>\<^sub>1 e\<^sub>1 : T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E,?h,?sh \<turnstile>\<^sub>1 e\<^sub>2 : T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2;
               ?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 |
               ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1;
               ?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 --> T = T\<^sub>2;
               ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1 -->
               T = T\<^sub>1 |]
            ==> ?P1.0 E (if (e) e\<^sub>1 else e\<^sub>2) T;
         !!E e c T.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e : Boolean;
               ?P1.0 E e Boolean; ?P,E,?h,?sh \<turnstile>\<^sub>1 c : T;
               ?P1.0 E c T |]
            ==> ?P1.0 E (while (e) c) Void;
         !!E e T\<^sub>r T.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e : T\<^sub>r;
               ?P1.0 E e T\<^sub>r; is_refT T\<^sub>r |]
            ==> ?P1.0 E (throw e) T;
         !!E e\<^sub>1 T\<^sub>1 C e\<^sub>2 T\<^sub>2 i.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e\<^sub>1 : T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E @
                  [Class
                    C],?h,?sh \<turnstile>\<^sub>1 e\<^sub>2 : T\<^sub>2;
               ?P1.0 (E @ [Class C]) e\<^sub>2 T\<^sub>2;
               ?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 |]
            ==> ?P1.0 E (try e\<^sub>1 catch(C i) e\<^sub>2) T\<^sub>2;
         !!E e T C Cs b.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e : T; ?P1.0 E e T;
               ALL C':set (C # Cs). is_class ?P C'; ~ sub_RI e;
               ALL C':set (tl Cs).
                  EX sfs. ?sh C' = \<lfloor>(sfs, Processing)\<rfloor>;
               b -->
               (ALL C':set Cs.
                   EX sfs. ?sh C' = \<lfloor>(sfs, Processing)\<rfloor>);
               distinct Cs; supercls_lst ?P Cs |]
            ==> ?P1.0 E (INIT C (Cs,b) \<leftarrow> e) T;
         !!E e T e' T' C Cs.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e : T; ?P1.0 E e T;
               ?P,E,?h,?sh \<turnstile>\<^sub>1 e' : T'; ?P1.0 E e' T';
               ALL C':set (C # Cs). is_class ?P C'; ~ sub_RI e';
               ALL C':set (C # Cs). not_init C' e;
               ALL C':set Cs.
                  EX sfs. ?sh C' = \<lfloor>(sfs, Processing)\<rfloor>;
               EX sfs.
                  ?sh C = \<lfloor>(sfs, Processing)\<rfloor> |
                  ?sh C = \<lfloor>(sfs, Error)\<rfloor> &
                  e = THROW NoClassDefFoundError;
               distinct (C # Cs); supercls_lst ?P (C # Cs) |]
            ==> ?P1.0 E (RI (C,e) ; Cs \<leftarrow> e') T';
         !!E. ?P2.0 E [] [];
         !!E e T es Ts.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e : T; ?P1.0 E e T;
               ?P,E,?h,?sh \<turnstile>\<^sub>1 es [:] Ts; ?P2.0 E es Ts |]
            ==> ?P2.0 E (e # es) (T # Ts) |]
      ==> ?P1.0 ?x1a ?x2a ?x3a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 85, template_var 7),
                      template_var 6),
                    t_empty),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 84, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty)),
        template_predicate (template_app (template_hole 75, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty)),
        template_predicate (template_app (template_hole 84, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty)),
        template_predicate (template_app (template_hole 84, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 1, template_var 4),
               template_var 3),
             template_var 2)
           ))),
    ("J1WellForm.WTrt\<^sub>1_inducts",
     "[| ?P,?x4a,?h,?sh \<turnstile>\<^sub>1 ?x5a [:] ?x6a;
         !!C E. is_class ?P C ==> ?P1.0 E (new C) (Class C);
         !!E e T C.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e : T; ?P1.0 E e T;
               is_refT T; is_class ?P C |]
            ==> ?P1.0 E (Cast C e) (Class C);
         !!v T E.
            typeof\<^bsub>?h\<^esub> v = \<lfloor>T\<rfloor> ==>
            ?P1.0 E (Val v) T;
         !!E i T. [| E ! i = T; i < length E |] ==> ?P1.0 E (Var i) T;
         !!E e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e\<^sub>1 : T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E,?h,?sh \<turnstile>\<^sub>1 e\<^sub>2 : T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2 |]
            ==> ?P1.0 E
                 (e\<^sub>1 \<guillemotleft>Eq\<guillemotright> e\<^sub>2)
                 Boolean;
         !!E e\<^sub>1 e\<^sub>2.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e\<^sub>1 : Integer;
               ?P1.0 E e\<^sub>1 Integer;
               ?P,E,?h,?sh \<turnstile>\<^sub>1 e\<^sub>2 : Integer;
               ?P1.0 E e\<^sub>2 Integer |]
            ==> ?P1.0 E
                 (e\<^sub>1 \<guillemotleft>Add\<guillemotright> e\<^sub>2)
                 Integer;
         !!E i T e T'.
            [| E ! i = T; i < length E;
               ?P,E,?h,?sh \<turnstile>\<^sub>1 e : T'; ?P1.0 E e T';
               ?P \<turnstile> T' \<le> T |]
            ==> ?P1.0 E (i:=e) Void;
         !!E e C F T D.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e : Class C;
               ?P1.0 E e (Class C);
               ?P \<turnstile> C has F,NonStatic:T in D |]
            ==> ?P1.0 E (e\<bullet>F{D}) T;
         !!E e F D T.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e : NT; ?P1.0 E e NT |]
            ==> ?P1.0 E (e\<bullet>F{D}) T;
         !!C F T D E.
            ?P \<turnstile> C has F,Static:T in D ==>
            ?P1.0 E (C\<bullet>\<^sub>sF{D}) T;
         !!E e\<^sub>1 C F T D e\<^sub>2 T\<^sub>2.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e\<^sub>1 : Class C;
               ?P1.0 E e\<^sub>1 (Class C);
               ?P \<turnstile> C has F,NonStatic:T in D;
               ?P,E,?h,?sh \<turnstile>\<^sub>1 e\<^sub>2 : T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2;
               ?P \<turnstile> T\<^sub>2 \<le> T |]
            ==> ?P1.0 E (e\<^sub>1\<bullet>F{D} := e\<^sub>2) Void;
         !!E e\<^sub>1 e\<^sub>2 T\<^sub>2 F D.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e\<^sub>1 : NT;
               ?P1.0 E e\<^sub>1 NT;
               ?P,E,?h,?sh \<turnstile>\<^sub>1 e\<^sub>2 : T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2 |]
            ==> ?P1.0 E (e\<^sub>1\<bullet>F{D} := e\<^sub>2) Void;
         !!E e\<^sub>2 T\<^sub>2 C F T D.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e\<^sub>2 : T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2;
               ?P \<turnstile> C has F,Static:T in D;
               ?P \<turnstile> T\<^sub>2 \<le> T |]
            ==> ?P1.0 E (C\<bullet>\<^sub>sF{D} := e\<^sub>2) Void;
         !!E e C M Ts T m D es Ts'.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e : Class C;
               ?P1.0 E e (Class C);
               ?P \<turnstile> C sees M, NonStatic :  Ts\<rightarrow>T = m in D;
               ?P,E,?h,?sh \<turnstile>\<^sub>1 es [:] Ts'; ?P2.0 E es Ts';
               ?P \<turnstile> Ts' [\<le>] Ts |]
            ==> ?P1.0 E (e\<bullet>M(es)) T;
         !!E e es Ts M T.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e : NT; ?P1.0 E e NT;
               ?P,E,?h,?sh \<turnstile>\<^sub>1 es [:] Ts; ?P2.0 E es Ts |]
            ==> ?P1.0 E (e\<bullet>M(es)) T;
         !!C M Ts T m D E es Ts' sfs vs.
            [| ?P \<turnstile> C sees M, Static :  Ts\<rightarrow>T = m in D;
               ?P,E,?h,?sh \<turnstile>\<^sub>1 es [:] Ts'; ?P2.0 E es Ts';
               ?P \<turnstile> Ts' [\<le>] Ts;
               M = clinit -->
               ?sh D = \<lfloor>(sfs, Processing)\<rfloor> &
               es = map Val vs |]
            ==> ?P1.0 E (C\<bullet>\<^sub>sM(es)) T;
         !!E T e T' i.
            [| ?P,E @ [T],?h,?sh \<turnstile>\<^sub>1 e : T';
               ?P1.0 (E @ [T]) e T' |]
            ==> ?P1.0 E {i:T; e} T';
         !!E e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e\<^sub>1 : T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E,?h,?sh \<turnstile>\<^sub>1 e\<^sub>2 : T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2 |]
            ==> ?P1.0 E (e\<^sub>1;; e\<^sub>2) T\<^sub>2;
         !!E e e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2 T.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e : Boolean;
               ?P1.0 E e Boolean;
               ?P,E,?h,?sh \<turnstile>\<^sub>1 e\<^sub>1 : T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E,?h,?sh \<turnstile>\<^sub>1 e\<^sub>2 : T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2;
               ?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 |
               ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1;
               ?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 --> T = T\<^sub>2;
               ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1 -->
               T = T\<^sub>1 |]
            ==> ?P1.0 E (if (e) e\<^sub>1 else e\<^sub>2) T;
         !!E e c T.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e : Boolean;
               ?P1.0 E e Boolean; ?P,E,?h,?sh \<turnstile>\<^sub>1 c : T;
               ?P1.0 E c T |]
            ==> ?P1.0 E (while (e) c) Void;
         !!E e T\<^sub>r T.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e : T\<^sub>r;
               ?P1.0 E e T\<^sub>r; is_refT T\<^sub>r |]
            ==> ?P1.0 E (throw e) T;
         !!E e\<^sub>1 T\<^sub>1 C e\<^sub>2 T\<^sub>2 i.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e\<^sub>1 : T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E @
                  [Class
                    C],?h,?sh \<turnstile>\<^sub>1 e\<^sub>2 : T\<^sub>2;
               ?P1.0 (E @ [Class C]) e\<^sub>2 T\<^sub>2;
               ?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 |]
            ==> ?P1.0 E (try e\<^sub>1 catch(C i) e\<^sub>2) T\<^sub>2;
         !!E e T C Cs b.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e : T; ?P1.0 E e T;
               ALL C':set (C # Cs). is_class ?P C'; ~ sub_RI e;
               ALL C':set (tl Cs).
                  EX sfs. ?sh C' = \<lfloor>(sfs, Processing)\<rfloor>;
               b -->
               (ALL C':set Cs.
                   EX sfs. ?sh C' = \<lfloor>(sfs, Processing)\<rfloor>);
               distinct Cs; supercls_lst ?P Cs |]
            ==> ?P1.0 E (INIT C (Cs,b) \<leftarrow> e) T;
         !!E e T e' T' C Cs.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e : T; ?P1.0 E e T;
               ?P,E,?h,?sh \<turnstile>\<^sub>1 e' : T'; ?P1.0 E e' T';
               ALL C':set (C # Cs). is_class ?P C'; ~ sub_RI e';
               ALL C':set (C # Cs). not_init C' e;
               ALL C':set Cs.
                  EX sfs. ?sh C' = \<lfloor>(sfs, Processing)\<rfloor>;
               EX sfs.
                  ?sh C = \<lfloor>(sfs, Processing)\<rfloor> |
                  ?sh C = \<lfloor>(sfs, Error)\<rfloor> &
                  e = THROW NoClassDefFoundError;
               distinct (C # Cs); supercls_lst ?P (C # Cs) |]
            ==> ?P1.0 E (RI (C,e) ; Cs \<leftarrow> e') T';
         !!E. ?P2.0 E [] [];
         !!E e T es Ts.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e : T; ?P1.0 E e T;
               ?P,E,?h,?sh \<turnstile>\<^sub>1 es [:] Ts; ?P2.0 E es Ts |]
            ==> ?P2.0 E (e # es) (T # Ts) |]
      ==> ?P2.0 ?x4a ?x5a ?x6a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 85, template_var 7),
                      template_var 6),
                    t_empty),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 84, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty)),
        template_predicate (template_app (template_hole 74, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty)),
        template_predicate (template_app (template_hole 84, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty)),
        template_predicate (template_app (template_hole 84, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty)),
        template_predicate (template_app (template_hole 83, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 0, template_var 4),
               template_var 3),
             template_var 2)
           ))),
    ("J1WellForm.WTrt\<^sub>1_induct",
     "[| !!C E. is_class ?P C ==> ?P1.0 E (new C) (Class C);
         !!E e T C.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e : T; ?P1.0 E e T;
               is_refT T; is_class ?P C |]
            ==> ?P1.0 E (Cast C e) (Class C);
         !!v T E.
            typeof\<^bsub>?h\<^esub> v = \<lfloor>T\<rfloor> ==>
            ?P1.0 E (Val v) T;
         !!E i T. [| E ! i = T; i < length E |] ==> ?P1.0 E (Var i) T;
         !!E e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e\<^sub>1 : T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E,?h,?sh \<turnstile>\<^sub>1 e\<^sub>2 : T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2 |]
            ==> ?P1.0 E
                 (e\<^sub>1 \<guillemotleft>Eq\<guillemotright> e\<^sub>2)
                 Boolean;
         !!E e\<^sub>1 e\<^sub>2.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e\<^sub>1 : Integer;
               ?P1.0 E e\<^sub>1 Integer;
               ?P,E,?h,?sh \<turnstile>\<^sub>1 e\<^sub>2 : Integer;
               ?P1.0 E e\<^sub>2 Integer |]
            ==> ?P1.0 E
                 (e\<^sub>1 \<guillemotleft>Add\<guillemotright> e\<^sub>2)
                 Integer;
         !!E i T e T'.
            [| E ! i = T; i < length E;
               ?P,E,?h,?sh \<turnstile>\<^sub>1 e : T'; ?P1.0 E e T';
               ?P \<turnstile> T' \<le> T |]
            ==> ?P1.0 E (i:=e) Void;
         !!E e C F T D.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e : Class C;
               ?P1.0 E e (Class C);
               ?P \<turnstile> C has F,NonStatic:T in D |]
            ==> ?P1.0 E (e\<bullet>F{D}) T;
         !!E e F D T.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e : NT; ?P1.0 E e NT |]
            ==> ?P1.0 E (e\<bullet>F{D}) T;
         !!C F T D E.
            ?P \<turnstile> C has F,Static:T in D ==>
            ?P1.0 E (C\<bullet>\<^sub>sF{D}) T;
         !!E e\<^sub>1 C F T D e\<^sub>2 T\<^sub>2.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e\<^sub>1 : Class C;
               ?P1.0 E e\<^sub>1 (Class C);
               ?P \<turnstile> C has F,NonStatic:T in D;
               ?P,E,?h,?sh \<turnstile>\<^sub>1 e\<^sub>2 : T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2;
               ?P \<turnstile> T\<^sub>2 \<le> T |]
            ==> ?P1.0 E (e\<^sub>1\<bullet>F{D} := e\<^sub>2) Void;
         !!E e\<^sub>1 e\<^sub>2 T\<^sub>2 F D.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e\<^sub>1 : NT;
               ?P1.0 E e\<^sub>1 NT;
               ?P,E,?h,?sh \<turnstile>\<^sub>1 e\<^sub>2 : T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2 |]
            ==> ?P1.0 E (e\<^sub>1\<bullet>F{D} := e\<^sub>2) Void;
         !!E e\<^sub>2 T\<^sub>2 C F T D.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e\<^sub>2 : T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2;
               ?P \<turnstile> C has F,Static:T in D;
               ?P \<turnstile> T\<^sub>2 \<le> T |]
            ==> ?P1.0 E (C\<bullet>\<^sub>sF{D} := e\<^sub>2) Void;
         !!E e C M Ts T m D es Ts'.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e : Class C;
               ?P1.0 E e (Class C);
               ?P \<turnstile> C sees M, NonStatic :  Ts\<rightarrow>T = m in D;
               ?P,E,?h,?sh \<turnstile>\<^sub>1 es [:] Ts'; ?P2.0 E es Ts';
               ?P \<turnstile> Ts' [\<le>] Ts |]
            ==> ?P1.0 E (e\<bullet>M(es)) T;
         !!E e es Ts M T.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e : NT; ?P1.0 E e NT;
               ?P,E,?h,?sh \<turnstile>\<^sub>1 es [:] Ts; ?P2.0 E es Ts |]
            ==> ?P1.0 E (e\<bullet>M(es)) T;
         !!C M Ts T m D E es Ts' sfs vs.
            [| ?P \<turnstile> C sees M, Static :  Ts\<rightarrow>T = m in D;
               ?P,E,?h,?sh \<turnstile>\<^sub>1 es [:] Ts'; ?P2.0 E es Ts';
               ?P \<turnstile> Ts' [\<le>] Ts;
               M = clinit -->
               ?sh D = \<lfloor>(sfs, Processing)\<rfloor> &
               es = map Val vs |]
            ==> ?P1.0 E (C\<bullet>\<^sub>sM(es)) T;
         !!E T e T' i.
            [| ?P,E @ [T],?h,?sh \<turnstile>\<^sub>1 e : T';
               ?P1.0 (E @ [T]) e T' |]
            ==> ?P1.0 E {i:T; e} T';
         !!E e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e\<^sub>1 : T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E,?h,?sh \<turnstile>\<^sub>1 e\<^sub>2 : T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2 |]
            ==> ?P1.0 E (e\<^sub>1;; e\<^sub>2) T\<^sub>2;
         !!E e e\<^sub>1 T\<^sub>1 e\<^sub>2 T\<^sub>2 T.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e : Boolean;
               ?P1.0 E e Boolean;
               ?P,E,?h,?sh \<turnstile>\<^sub>1 e\<^sub>1 : T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E,?h,?sh \<turnstile>\<^sub>1 e\<^sub>2 : T\<^sub>2;
               ?P1.0 E e\<^sub>2 T\<^sub>2;
               ?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 |
               ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1;
               ?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 --> T = T\<^sub>2;
               ?P \<turnstile> T\<^sub>2 \<le> T\<^sub>1 -->
               T = T\<^sub>1 |]
            ==> ?P1.0 E (if (e) e\<^sub>1 else e\<^sub>2) T;
         !!E e c T.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e : Boolean;
               ?P1.0 E e Boolean; ?P,E,?h,?sh \<turnstile>\<^sub>1 c : T;
               ?P1.0 E c T |]
            ==> ?P1.0 E (while (e) c) Void;
         !!E e T\<^sub>r T.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e : T\<^sub>r;
               ?P1.0 E e T\<^sub>r; is_refT T\<^sub>r |]
            ==> ?P1.0 E (throw e) T;
         !!E e\<^sub>1 T\<^sub>1 C e\<^sub>2 T\<^sub>2 i.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e\<^sub>1 : T\<^sub>1;
               ?P1.0 E e\<^sub>1 T\<^sub>1;
               ?P,E @
                  [Class
                    C],?h,?sh \<turnstile>\<^sub>1 e\<^sub>2 : T\<^sub>2;
               ?P1.0 (E @ [Class C]) e\<^sub>2 T\<^sub>2;
               ?P \<turnstile> T\<^sub>1 \<le> T\<^sub>2 |]
            ==> ?P1.0 E (try e\<^sub>1 catch(C i) e\<^sub>2) T\<^sub>2;
         !!E e T C Cs b.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e : T; ?P1.0 E e T;
               ALL C':set (C # Cs). is_class ?P C'; ~ sub_RI e;
               ALL C':set (tl Cs).
                  EX sfs. ?sh C' = \<lfloor>(sfs, Processing)\<rfloor>;
               b -->
               (ALL C':set Cs.
                   EX sfs. ?sh C' = \<lfloor>(sfs, Processing)\<rfloor>);
               distinct Cs; supercls_lst ?P Cs |]
            ==> ?P1.0 E (INIT C (Cs,b) \<leftarrow> e) T;
         !!E e T e' T' C Cs.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e : T; ?P1.0 E e T;
               ?P,E,?h,?sh \<turnstile>\<^sub>1 e' : T'; ?P1.0 E e' T';
               ALL C':set (C # Cs). is_class ?P C'; ~ sub_RI e';
               ALL C':set (C # Cs). not_init C' e;
               ALL C':set Cs.
                  EX sfs. ?sh C' = \<lfloor>(sfs, Processing)\<rfloor>;
               EX sfs.
                  ?sh C = \<lfloor>(sfs, Processing)\<rfloor> |
                  ?sh C = \<lfloor>(sfs, Error)\<rfloor> &
                  e = THROW NoClassDefFoundError;
               distinct (C # Cs); supercls_lst ?P (C # Cs) |]
            ==> ?P1.0 E (RI (C,e) ; Cs \<leftarrow> e') T';
         !!E. ?P2.0 E [] [];
         !!E e T es Ts.
            [| ?P,E,?h,?sh \<turnstile>\<^sub>1 e : T; ?P1.0 E e T;
               ?P,E,?h,?sh \<turnstile>\<^sub>1 es [:] Ts; ?P2.0 E es Ts |]
            ==> ?P2.0 E (e # es) (T # Ts) |]
      ==> (?P,?x1a,?h,?sh \<turnstile>\<^sub>1 ?x2a : ?x3a -->
           ?P1.0 ?x1a ?x2a ?x3a) &
          (?P,?x4a,?h,?sh \<turnstile>\<^sub>1 ?x5a [:] ?x6a -->
           ?P2.0 ?x4a ?x5a ?x6a)",
     template_implication
      ([template_predicate (template_app (template_hole 86, t_empty)),
        template_predicate (template_app (template_hole 85, t_empty)),
        template_predicate (template_app (template_hole 75, t_empty)),
        template_predicate (template_app (template_hole 85, t_empty)),
        template_predicate (template_app (template_hole 85, t_empty)),
        template_predicate (template_app (template_hole 85, t_empty)),
        template_predicate (template_app (template_hole 85, t_empty)),
        template_predicate (template_app (template_hole 85, t_empty)),
        template_predicate (template_app (template_hole 85, t_empty)),
        template_predicate (template_app (template_hole 86, t_empty)),
        template_predicate (template_app (template_hole 85, t_empty)),
        template_predicate (template_app (template_hole 85, t_empty)),
        template_predicate (template_app (template_hole 85, t_empty)),
        template_predicate (template_app (template_hole 85, t_empty)),
        template_predicate (template_app (template_hole 85, t_empty)),
        template_predicate (template_app (template_hole 86, t_empty)),
        template_predicate (template_app (template_hole 85, t_empty)),
        template_predicate (template_app (template_hole 85, t_empty)),
        template_predicate (template_app (template_hole 85, t_empty)),
        template_predicate (template_app (template_hole 85, t_empty)),
        template_predicate (template_app (template_hole 85, t_empty)),
        template_predicate (template_app (template_hole 85, t_empty)),
        template_predicate (template_app (template_hole 85, t_empty)),
        template_predicate (template_app (template_hole 85, t_empty)),
        template_predicate (template_app (template_hole 85, t_empty)),
        template_predicate (template_app (template_hole 85, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 38,
               template_app
                (template_app
                  (template_hole 41,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_hole 78, template_var 10),
                             template_var 8),
                           t_empty),
                         template_var 5),
                       template_var 4),
                     template_var 3)),
                 template_app
                  (template_app
                    (template_app (template_var 9, template_var 5),
                     template_var 4),
                   template_var 3))),
             template_app
              (template_app
                (template_hole 41,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 46, template_var 10),
                           template_var 8),
                         t_empty),
                       template_var 2),
                     template_var 1),
                   template_var 0)),
               template_app
                (template_app
                  (template_app (template_var 6, template_var 2),
                   template_var 1),
                 template_var 0)))
           )))]:
   (string * thm * template) list
### theory "Draft.J1WellFormMoreTemplates"
### 1.646s elapsed time, 1.890s cpu time, 0.099s GC time
val it = (): unit
