Loading theory "Draft.Auxiliary" (required by "Draft.Compiler2MoreTemplates" via "Draft.Compiler2" via "Draft.PCompiler" via "Draft.WellForm" via "Draft.TypeRel" via "Draft.Decl" via "Draft.Type")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Compiler2MoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Compiler2MoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Compiler2MoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.137s elapsed time, 0.547s cpu time, 0.048s GC time
Loading theory "HOL-Library.Transitive_Closure_Table" (required by "Draft.Compiler2MoreTemplates" via "Draft.Compiler2" via "Draft.PCompiler" via "Draft.WellForm" via "Draft.TypeRel")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "rtrancl_path"
  Proving monotonicity ...
### theory "Draft.Auxiliary"
### 0.208s elapsed time, 0.836s cpu time, 0.048s GC time
Loading theory "Draft.Type" (required by "Draft.Compiler2MoreTemplates" via "Draft.Compiler2" via "Draft.PCompiler" via "Draft.WellForm" via "Draft.TypeRel" via "Draft.Decl")
Proofs for inductive predicate(s) "rtrancl_tab"
  Proving monotonicity ...
### theory "HOL-Library.Set_Algebras"
### 0.238s elapsed time, 0.951s cpu time, 0.048s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Compiler2MoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Transitive_Closure_Table"
### 0.334s elapsed time, 1.322s cpu time, 0.106s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Compiler2MoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.506s elapsed time, 2.014s cpu time, 0.155s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Compiler2MoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "Draft.Type"
### 1.249s elapsed time, 4.762s cpu time, 0.928s GC time
Loading theory "Draft.Decl" (required by "Draft.Compiler2MoreTemplates" via "Draft.Compiler2" via "Draft.PCompiler" via "Draft.WellForm" via "Draft.TypeRel")
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### theory "Draft.Decl"
### 0.118s elapsed time, 0.459s cpu time, 0.040s GC time
Loading theory "Draft.TypeRel" (required by "Draft.Compiler2MoreTemplates" via "Draft.Compiler2" via "Draft.PCompiler" via "Draft.WellForm")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.144s elapsed time, 4.349s cpu time, 0.861s GC time
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "subcls1p"
  Proving monotonicity ...
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  supercls_lst :: "'m prog => char list list => bool"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Proofs for inductive predicate(s) "widen"
  Proving monotonicity ...
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Proofs for inductive predicate(s) "Methods"
### theory "HOL-Library.Stream"
### 1.434s elapsed time, 5.208s cpu time, 0.942s GC time
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Fields"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "Draft.TypeRel"
### 0.770s elapsed time, 2.051s cpu time, 0.234s GC time
Loading theory "Draft.Value" (required by "Draft.Compiler2MoreTemplates" via "Draft.Compiler2" via "Draft.PCompiler" via "Draft.WellForm" via "Draft.SystemClasses" via "Draft.Exceptions" via "Draft.Objects")
### theory "HOL-Library.Tree"
### 2.256s elapsed time, 7.457s cpu time, 1.202s GC time
Loading theory "Draft.Templates" (required by "Draft.Compiler2MoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.080s elapsed time, 0.187s cpu time, 0.062s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Compiler2MoreTemplates")
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Addr"
consts
  the_Intg :: "val => int"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_Addr :: "val => nat"
consts
  default_val :: "ty => val"
### theory "Draft.Value"
### 0.397s elapsed time, 0.821s cpu time, 0.062s GC time
Loading theory "Draft.Objects" (required by "Draft.Compiler2MoreTemplates" via "Draft.Compiler2" via "Draft.PCompiler" via "Draft.WellForm" via "Draft.SystemClasses" via "Draft.Exceptions")
consts
  typeof_h :: "heap => val => ty option"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.648s elapsed time, 1.355s cpu time, 0.139s GC time
Proofs for inductive predicate(s) "iprog"
  Proving monotonicity ...
### theory "Draft.Objects"
### 0.530s elapsed time, 1.067s cpu time, 0.139s GC time
Loading theory "Draft.Exceptions" (required by "Draft.Compiler2MoreTemplates" via "Draft.Compiler2" via "Draft.PCompiler" via "Draft.WellForm" via "Draft.SystemClasses")
Loading theory "Draft.JVMState" (required by "Draft.Compiler2MoreTemplates" via "Draft.Compiler2" via "Draft.JVMExec" via "Draft.JVMExecInstr" via "Draft.JVMInstructions")
### theory "Draft.Exceptions"
### 0.151s elapsed time, 0.300s cpu time, 0.000s GC time
Loading theory "Draft.Expr" (required by "Draft.Compiler2MoreTemplates" via "Draft.Compiler2" via "Draft.J1" via "Draft.BigStep")
Loading theory "Draft.State" (required by "Draft.Compiler2MoreTemplates" via "Draft.Compiler2" via "Draft.J1" via "Draft.BigStep")
Loading theory "Draft.SystemClasses" (required by "Draft.Compiler2MoreTemplates" via "Draft.Compiler2" via "Draft.PCompiler" via "Draft.WellForm")
### theory "Draft.State"
### 0.081s elapsed time, 0.311s cpu time, 0.084s GC time
### theory "Draft.SystemClasses"
### 0.129s elapsed time, 0.451s cpu time, 0.084s GC time
Loading theory "Draft.WellForm" (required by "Draft.Compiler2MoreTemplates" via "Draft.Compiler2" via "Draft.PCompiler")
### theory "Draft.WellForm"
### 0.654s elapsed time, 2.057s cpu time, 1.046s GC time
Loading theory "Draft.PCompiler" (required by "Draft.Compiler2MoreTemplates" via "Draft.Compiler2")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.PCompiler"
### 0.281s elapsed time, 0.882s cpu time, 0.202s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.JVMState"
### 1.355s elapsed time, 3.980s cpu time, 1.331s GC time
Loading theory "Draft.JVMInstructions" (required by "Draft.Compiler2MoreTemplates" via "Draft.Compiler2" via "Draft.JVMExec" via "Draft.JVMExecInstr")
### theory "Draft.JVMInstructions"
### 2.230s elapsed time, 5.266s cpu time, 1.863s GC time
Loading theory "Draft.JVMExceptions" (required by "Draft.Compiler2MoreTemplates" via "Draft.Compiler2" via "Draft.JVMExec" via "Draft.JVMExecInstr")
consts
  match_ex_table ::
    "'m prog => char list => nat => ex_table => (nat * nat) option"
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd (snd (snd p))))))
         (fst (snd (snd (snd p))))) <*mlex*>
   {}"
### theory "Draft.JVMExceptions"
### 0.980s elapsed time, 2.093s cpu time, 0.297s GC time
Loading theory "Draft.JVMExecInstr" (required by "Draft.Compiler2MoreTemplates" via "Draft.Compiler2" via "Draft.JVMExec")
Found termination order: "{}"
consts
  exec_instr ::
    "instr
     => jvm_prog
        => heap
           => val list
              => val list
                 => char list
                    => char list
                       => nat
                          => init_call_status
                             => frame list => sheap => jvm_state"
Found termination order: "{}"
### Ambiguous input (line 129 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 130 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" fv) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("_applC" ("_position" fv) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" fv) ("_position" e\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.JVMExecInstr"
### 1.534s elapsed time, 3.800s cpu time, 1.675s GC time
Loading theory "Draft.JVMExec" (required by "Draft.Compiler2MoreTemplates" via "Draft.Compiler2")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
consts
  fv :: "char list exp => char list set"
  fvs :: "char list exp list => char list set"
Found termination order: "{}"
Proofs for inductive predicate(s) "exec_1p"
  Proving monotonicity ...
Found termination order: "{}"
### Ambiguous input (line 161 of "$AFP/JinjaDCI/J/Expr.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lass_val_of)
###       ("\<^const>Expr.exp.LAss" ("_position" V)
###         ("_applC" ("_position" Val) ("_position" v))))
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" V) ("_tuple_arg" ("_position" v))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" lass_val_of)
###       ("_updbind" ("_position" V)
###         ("_applC" ("_position" Val) ("_position" v))))
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" V) ("_tuple_arg" ("_position" v))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.JVMExec"
### 2.131s elapsed time, 4.797s cpu time, 0.671s GC time
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 252 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" sub_RI)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>1))
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub_RI)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>1))
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub_RI)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>1))
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 253 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" sub_RI)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub_RI)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub_RI)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  sub_RI :: "'a exp => bool"
  sub_RIs :: "'a exp list => bool"
### Ambiguous input (line 295 of "$AFP/JinjaDCI/J/Expr.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C')
###         ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" not_init)
###         ("_cargs" ("_position" C') ("_position" e\<^sub>1)))
###       ("_applC" ("_position" not_init)
###         ("_cargs" ("_position" C') ("_position" e\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C')
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" not_init)
###         ("_cargs" ("_position" C') ("_position" e\<^sub>1)))
###       ("_applC" ("_position" not_init)
###         ("_cargs" ("_position" C') ("_position" e\<^sub>2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 296 of "$AFP/JinjaDCI/J/Expr.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C')
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C') ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C')
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C') ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  not_init :: "char list => 'a exp => bool"
  not_inits :: "char list => 'a exp list => bool"
### Ambiguous input (line 336 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" subexp)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("\<^const>Set.union"
###         ("_Finset"
###           ("_args" ("_position" e\<^sub>1) ("_position" e\<^sub>2)))
###         ("_applC" ("_position" subexp) ("_position" e\<^sub>1)))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subexp)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("\<^const>Set.union"
###         ("_Finset"
###           ("_args" ("_position" e\<^sub>1) ("_position" e\<^sub>2)))
###         ("_applC" ("_position" subexp) ("_position" e\<^sub>1)))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subexp)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("\<^const>Set.union"
###         ("_Finset"
###           ("_args" ("_position" e\<^sub>1) ("_position" e\<^sub>2)))
###         ("_applC" ("_position" subexp) ("_position" e\<^sub>1)))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 337 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" subexp)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union" ("_Finset" ("_position" e\<^sub>2))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subexp)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union" ("_Finset" ("_position" e\<^sub>2))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subexp)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union" ("_Finset" ("_position" e\<^sub>2))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  subexp :: "'a exp => 'a exp set"
  subexps :: "'a exp list => 'a exp set"
### theory "Draft.Expr"
### 10.146s elapsed time, 22.230s cpu time, 5.962s GC time
Loading theory "Draft.WWellForm" (required by "Draft.Compiler2MoreTemplates" via "Draft.Compiler2" via "Draft.J1" via "Draft.BigStep")
### theory "Draft.WWellForm"
### 0.177s elapsed time, 0.245s cpu time, 0.000s GC time
Loading theory "Draft.BigStep" (required by "Draft.Compiler2MoreTemplates" via "Draft.Compiler2" via "Draft.J1")
### Ambiguous input (line 157 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" b) ("_position" t))
###                 ("\<^const>TypeRel.has_field" ("_position" P)
###                   ("_position" C) ("_position" F) ("_position" b)
###                   ("_position" t) ("_position" D)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" b) ("_position" t))
###                 ("\<^const>TypeRel.has_field" ("_position" P)
###                   ("_position" C) ("_position" F) ("_position" b)
###                   ("_position" t) ("_position" D)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 162 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" Static) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" Static) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 268 of "$AFP/JinjaDCI/J/BigStep.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args"
###           ("_Update" ("_position" l\<^sub>0)
###             ("_updbind" ("_position" V) ("_position" None)))
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args" ("_position" l\<^sub>0)
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args"
###           ("_applC" ("_position" l\<^sub>1)
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V))))
###           ("_tuple_arg" ("_position" sh\<^sub>1)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args"
###           ("_applC" ("_position" l\<^sub>0)
###             ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args" ("_position" l\<^sub>0)
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args"
###           ("_applC" ("_position" l\<^sub>1)
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V))))
###           ("_tuple_arg" ("_position" sh\<^sub>1)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args"
###           ("_Update" ("_position" l\<^sub>0)
###             ("_updbind" ("_position" V) ("_position" None)))
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args" ("_position" l\<^sub>0)
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args"
###           ("_Update" ("_position" l\<^sub>1)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V))))
###           ("_tuple_arg" ("_position" sh\<^sub>1)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args"
###           ("_applC" ("_position" l\<^sub>0)
###             ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args" ("_position" l\<^sub>0)
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args"
###           ("_Update" ("_position" l\<^sub>1)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V))))
###           ("_tuple_arg" ("_position" sh\<^sub>1)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 167 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" sfs')
###               ("_MapUpd" ("_position" sfs)
###                 ("_maplet" ("_position" F) ("_position" v)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" sh\<^sub>1')
###                 ("_MapUpd" ("_position" sh\<^sub>1)
###                   ("_maplet" ("_position" D)
###                     ("_tuple" ("_position" sfs')
###                       ("_tuple_arg" ("_position" Done))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" sfs')
###               ("_MapUpd" ("_position" sfs)
###                 ("_maplet" ("_position" F) ("_position" v)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" sh\<^sub>1')
###                 ("_MapUpd" ("_position" sh\<^sub>1)
###                   ("_maplet" ("_position" D)
###                     ("_tuple" ("_position" sfs')
###                       ("_tuple_arg" ("_position" Done))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 139 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" NonStatic) ("_position" t)
###               ("_position" D)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" fs')
###                 ("_MapUpd" ("_position" fs)
###                   ("_maplet"
###                     ("_tuple" ("_position" F)
###                       ("_tuple_arg" ("_position" D)))
###                     ("_position" v)))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                   ("_MapUpd" ("_position" h\<^sub>2)
###                     ("_maplet" ("_position" a)
###                       ("_tuple" ("_position" C)
###                         ("_tuple_arg" ("_position" fs')))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" NonStatic) ("_position" t)
###               ("_position" D)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" fs')
###                 ("_MapUpd" ("_position" fs)
###                   ("_maplet"
###                     ("_tuple" ("_position" F)
###                       ("_tuple_arg" ("_position" D)))
###                     ("_position" v)))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                   ("_MapUpd" ("_position" h\<^sub>2)
###                     ("_maplet" ("_position" a)
###                       ("_tuple" ("_position" C)
###                         ("_tuple_arg" ("_position" fs')))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 145 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_position" null) ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_position" null) ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 149 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 173 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Not_Ex" ("_position" sfs)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" sfs)
###                   ("_tuple_arg" ("_position" Done)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P)
###               ("\<^const>Expr.exp.INIT" ("_position" D)
###                 ("_list" ("_position" D)) ("_position" False)
###                 ("_position" unit))
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args" ("_position" l\<^sub>1)
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_applC" ("_position" Val) ("_position" v'))
###               ("_tuple" ("_position" h')
###                 ("_tuple_args" ("_position" l')
###                   ("_tuple_arg" ("_position" sh'))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" sh') ("_position" D))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" sfs)
###                     ("_tuple_arg" ("_position" i))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" sfs')
###                   ("_MapUpd" ("_position" sfs)
###                     ("_maplet" ("_position" F) ("_position" v)))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" sh'')
###                     ("_MapUpd" ("_position" sh')
###                       ("_maplet" ("_position" D)
###                         ("_tuple" ("_position" sfs')
###                           ("_tuple_arg" ("_position" i))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l')
###           ("_tuple_arg" ("_position" sh'')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Not_Ex" ("_position" sfs)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" sfs)
###                   ("_tuple_arg" ("_position" Done)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P)
###               ("\<^const>Expr.exp.INIT" ("_position" D)
###                 ("_list" ("_position" D)) ("_position" False)
###                 ("_position" unit))
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args" ("_position" l\<^sub>1)
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_applC" ("_position" Val) ("_position" v'))
###               ("_tuple" ("_position" h')
###                 ("_tuple_args" ("_position" l')
###                   ("_tuple_arg" ("_position" sh'))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" sh') ("_position" D))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" sfs)
###                     ("_tuple_arg" ("_position" i))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" sfs')
###                   ("_MapUpd" ("_position" sfs)
###                     ("_maplet" ("_position" F) ("_position" v)))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" sh'')
###                     ("_MapUpd" ("_position" sh')
###                       ("_maplet" ("_position" D)
###                         ("_tuple" ("_position" sfs')
###                           ("_tuple_arg" ("_position" i))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l')
###           ("_tuple_arg" ("_position" sh'')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 153 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 324 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" Throw) ("_position" a))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" h\<^sub>1) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###             ("_position" C)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args"
###                   ("_MapUpd" ("_position" l\<^sub>1)
###                     ("_maplet" ("_position" V)
###                       ("_applC" ("_position" Addr) ("_position" a))))
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_position" e\<^sub>2')
###               ("_tuple" ("_position" h\<^sub>2)
###                 ("_tuple_args" ("_position" l\<^sub>2)
###                   ("_tuple_arg" ("_position" sh\<^sub>2))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" e\<^sub>2')
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args"
###           ("_applC" ("_position" l\<^sub>2)
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l\<^sub>1) ("_position" V))))
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" Throw) ("_position" a))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" h\<^sub>1) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###             ("_position" C)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args"
###                   ("_MapUpd" ("_position" l\<^sub>1)
###                     ("_maplet" ("_position" V)
###                       ("_applC" ("_position" Addr) ("_position" a))))
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_position" e\<^sub>2')
###               ("_tuple" ("_position" h\<^sub>2)
###                 ("_tuple_args" ("_position" l\<^sub>2)
###                   ("_tuple_arg" ("_position" sh\<^sub>2))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" e\<^sub>2')
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args"
###           ("_Update" ("_position" l\<^sub>2)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l\<^sub>1) ("_position" V))))
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 181 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Not_Ex" ("_position" sfs)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" sfs)
###                   ("_tuple_arg" ("_position" Done)))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P)
###               ("\<^const>Expr.exp.INIT" ("_position" D)
###                 ("_list" ("_position" D)) ("_position" False)
###                 ("_position" unit))
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args" ("_position" l\<^sub>1)
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_applC" ("_position" throw) ("_position" a))
###               ("_position" s')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_applC" ("_position" throw) ("_position" a))
###       ("_position" s'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Not_Ex" ("_position" sfs)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" sfs)
###                   ("_tuple_arg" ("_position" Done)))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P)
###               ("\<^const>Expr.exp.INIT" ("_position" D)
###                 ("_list" ("_position" D)) ("_position" False)
###                 ("_position" unit))
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args" ("_position" l\<^sub>1)
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_applC" ("_position" throw) ("_position" a))
###               ("_position" s')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_applC" ("_position" throw) ("_position" a))
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 187 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 191 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" b) ("_position" t))
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" b) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" b) ("_position" t))
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" b) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 196 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" t)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" t)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "eval", "evals"
  Proving monotonicity ...
### Ambiguous input (line 416 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BigStep.eval" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BigStep.eval" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 417 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BigStep.eval" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BigStep.eval" ("_position" P)
###     ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.BigStep"
### 7.719s elapsed time, 13.021s cpu time, 3.361s GC time
Loading theory "Draft.J1" (required by "Draft.Compiler2MoreTemplates" via "Draft.Compiler2")
### Ambiguous input (line 41 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" max_vars)
###       ("_updbind" ("_position" V) ("_position" e)))
###     ("_applC" ("_position" max_vars) ("_position" e))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" max_vars)
###       ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" e)))
###     ("_applC" ("_position" max_vars) ("_position" e))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  max_vars :: "'a exp => nat"
  max_varss :: "'a exp list => nat"
### Ambiguous input (line 184 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" b) ("_position" t))
###                 ("\<^const>TypeRel.has_field" ("_position" P)
###                   ("_position" C) ("_position" F) ("_position" b)
###                   ("_position" t) ("_position" D)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" b) ("_position" t))
###                 ("\<^const>TypeRel.has_field" ("_position" P)
###                   ("_position" C) ("_position" F) ("_position" b)
###                   ("_position" t) ("_position" D)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 120 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h)
###           ("_tuple_args" ("_position" ls)
###             ("_tuple_arg" ("_position" sh))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" i)
###           ("_applC" ("_position" size) ("_position" ls))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" ls')
###             ("_applC" ("_position" ls)
###               ("_list"
###                 ("\<^const>Expr.exp.LAss" ("_position" i)
###                   ("_position" v)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss" ("_position" i) ("_position" e))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" ls')
###           ("_tuple_arg" ("_position" sh)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h)
###           ("_tuple_args" ("_position" ls)
###             ("_tuple_arg" ("_position" sh))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" i)
###           ("_applC" ("_position" size) ("_position" ls))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" ls')
###             ("_LUpdate" ("_position" ls)
###               ("_lupdbind" ("_position" i) ("_position" v))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss" ("_position" i) ("_position" e))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" ls')
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 188 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" Static) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" Static) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 170 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" NonStatic) ("_position" t)
###               ("_position" D)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" fs')
###                 ("_MapUpd" ("_position" fs)
###                   ("_maplet"
###                     ("_tuple" ("_position" F)
###                       ("_tuple_arg" ("_position" D)))
###                     ("_position" v)))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                   ("_MapUpd" ("_position" h\<^sub>2)
###                     ("_maplet" ("_position" a)
###                       ("_tuple" ("_position" C)
###                         ("_tuple_arg" ("_position" fs')))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" NonStatic) ("_position" t)
###               ("_position" D)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" fs')
###                 ("_MapUpd" ("_position" fs)
###                   ("_maplet"
###                     ("_tuple" ("_position" F)
###                       ("_tuple_arg" ("_position" D)))
###                     ("_position" v)))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                   ("_MapUpd" ("_position" h\<^sub>2)
###                     ("_maplet" ("_position" a)
###                       ("_tuple" ("_position" C)
###                         ("_tuple_arg" ("_position" fs')))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 193 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" sfs')
###               ("_MapUpd" ("_position" sfs)
###                 ("_maplet" ("_position" F) ("_position" v)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" sh\<^sub>1')
###                 ("_MapUpd" ("_position" sh\<^sub>1)
###                   ("_maplet" ("_position" D)
###                     ("_tuple" ("_position" sfs')
###                       ("_tuple_arg" ("_position" Done))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" sfs')
###               ("_MapUpd" ("_position" sfs)
###                 ("_maplet" ("_position" F) ("_position" v)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" sh\<^sub>1')
###                 ("_MapUpd" ("_position" sh\<^sub>1)
###                   ("_maplet" ("_position" D)
###                     ("_tuple" ("_position" sfs')
###                       ("_tuple_arg" ("_position" Done))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 175 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_position" null) ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_position" null) ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 178 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 181 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 198 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Not_Ex" ("_position" sfs)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" sfs)
###                   ("_tuple_arg" ("_position" Done)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval\<^sub>1" ("_position" P)
###               ("\<^const>Expr.exp.INIT" ("_position" D)
###                 ("_list" ("_position" D)) ("_position" False)
###                 ("_position" unit))
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args" ("_position" l\<^sub>1)
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_applC" ("_position" Val) ("_position" v'))
###               ("_tuple" ("_position" h')
###                 ("_tuple_args" ("_position" l')
###                   ("_tuple_arg" ("_position" sh'))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" sh') ("_position" D))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" sfs)
###                     ("_tuple_arg" ("_position" i))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" sfs')
###                   ("_MapUpd" ("_position" sfs)
###                     ("_maplet" ("_position" F) ("_position" v)))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" sh'')
###                     ("_MapUpd" ("_position" sh')
###                       ("_maplet" ("_position" D)
###                         ("_tuple" ("_position" sfs')
###                           ("_tuple_arg" ("_position" i))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l')
###           ("_tuple_arg" ("_position" sh'')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Not_Ex" ("_position" sfs)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" sfs)
###                   ("_tuple_arg" ("_position" Done)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval\<^sub>1" ("_position" P)
###               ("\<^const>Expr.exp.INIT" ("_position" D)
###                 ("_list" ("_position" D)) ("_position" False)
###                 ("_position" unit))
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args" ("_position" l\<^sub>1)
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_applC" ("_position" Val) ("_position" v'))
###               ("_tuple" ("_position" h')
###                 ("_tuple_args" ("_position" l')
###                   ("_tuple_arg" ("_position" sh'))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" sh') ("_position" D))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" sfs)
###                     ("_tuple_arg" ("_position" i))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" sfs')
###                   ("_MapUpd" ("_position" sfs)
###                     ("_maplet" ("_position" F) ("_position" v)))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" sh'')
###                     ("_MapUpd" ("_position" sh')
###                       ("_maplet" ("_position" D)
###                         ("_tuple" ("_position" sfs')
###                           ("_tuple_arg" ("_position" i))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l')
###           ("_tuple_arg" ("_position" sh'')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 205 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Not_Ex" ("_position" sfs)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" sfs)
###                   ("_tuple_arg" ("_position" Done)))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval\<^sub>1" ("_position" P)
###               ("\<^const>Expr.exp.INIT" ("_position" D)
###                 ("_list" ("_position" D)) ("_position" False)
###                 ("_position" unit))
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args" ("_position" l\<^sub>1)
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_applC" ("_position" throw) ("_position" a))
###               ("_position" s')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_applC" ("_position" throw) ("_position" a))
###       ("_position" s'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Not_Ex" ("_position" sfs)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" sfs)
###                   ("_tuple_arg" ("_position" Done)))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval\<^sub>1" ("_position" P)
###               ("\<^const>Expr.exp.INIT" ("_position" D)
###                 ("_list" ("_position" D)) ("_position" False)
###                 ("_position" unit))
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args" ("_position" l\<^sub>1)
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_applC" ("_position" throw) ("_position" a))
###               ("_position" s')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_applC" ("_position" throw) ("_position" a))
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 327 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" Throw) ("_position" a))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" ls\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" h\<^sub>1) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###             ("_position" C)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" i)
###               ("_applC" ("_position" length) ("_position" ls\<^sub>1))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>eval\<^sub>1" ("_position" P)
###                 ("_position" e\<^sub>2)
###                 ("_tuple" ("_position" h\<^sub>1)
###                   ("_tuple_args"
###                     ("_LUpdate" ("_position" ls\<^sub>1)
###                       ("_lupdbind" ("_position" i)
###                         ("_applC" ("_position" Addr) ("_position" a))))
###                     ("_tuple_arg" ("_position" sh\<^sub>1))))
###                 ("_position" e\<^sub>2')
###                 ("_tuple" ("_position" h\<^sub>2)
###                   ("_tuple_args" ("_position" ls\<^sub>2)
###                     ("_tuple_arg" ("_position" sh\<^sub>2)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" i) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" e\<^sub>2')
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" ls\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" Throw) ("_position" a))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" ls\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" h\<^sub>1) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###             ("_position" C)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" i)
###               ("_applC" ("_position" length) ("_position" ls\<^sub>1))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>eval\<^sub>1" ("_position" P)
###                 ("_position" e\<^sub>2)
###                 ("_tuple" ("_position" h\<^sub>1)
###                   ("_tuple_args"
###                     ("_applC" ("_position" ls\<^sub>1)
###                       ("_list"
###                         ("\<^const>Expr.exp.LAss" ("_position" i)
###                           ("_applC" ("_position" Addr) ("_position" a)))))
###                     ("_tuple_arg" ("_position" sh\<^sub>1))))
###                 ("_position" e\<^sub>2')
###                 ("_tuple" ("_position" h\<^sub>2)
###                   ("_tuple_args" ("_position" ls\<^sub>2)
###                     ("_tuple_arg" ("_position" sh\<^sub>2)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" i) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" e\<^sub>2')
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" ls\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 210 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 213 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" b) ("_position" t))
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" b) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" b) ("_position" t))
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" b) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 217 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" t)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" t)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "eval\<^sub>1", "evals\<^sub>1"
  Proving monotonicity ...
### Ambiguous input (line 411 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1.eval\<^sub>1" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1.eval\<^sub>1" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 412 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1.eval\<^sub>1" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1.eval\<^sub>1" ("_position" P)
###     ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.J1"
### 6.516s elapsed time, 9.837s cpu time, 0.779s GC time
Loading theory "Draft.Compiler2" (required by "Draft.Compiler2MoreTemplates")
### Ambiguous input (line 27 of "$AFP/JinjaDCI/Compiler/Compiler2.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" compE\<^sub>2)
###       ("_updbind" ("_position" i) ("_position" e)))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compE\<^sub>2) ("_position" e))
###       ("_list"
###         ("_args" ("_applC" ("_position" Store) ("_position" i))
###           ("_applC" ("_position" Push) ("_position" Unit)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>2)
###       ("\<^const>Expr.exp.LAss" ("_position" i) ("_position" e)))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compE\<^sub>2) ("_position" e))
###       ("_list"
###         ("_args" ("_applC" ("_position" Store) ("_position" i))
###           ("_applC" ("_position" Push) ("_position" Unit)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 30 of "$AFP/JinjaDCI/Compiler/Compiler2.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" compE\<^sub>2)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>1))
###       ("\<^const>List.append"
###         ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>2))
###         ("_list"
###           ("_args"
###             ("_applC" ("_position" Putfield)
###               ("_cargs" ("_position" F) ("_position" D)))
###             ("_applC" ("_position" Push) ("_position" Unit))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>2)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>1))
###       ("\<^const>List.append"
###         ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>2))
###         ("_list"
###           ("_args"
###             ("_applC" ("_position" Putfield)
###               ("_cargs" ("_position" F) ("_position" D)))
###             ("_applC" ("_position" Push) ("_position" Unit))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>2)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>1))
###       ("\<^const>List.append"
###         ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>2))
###         ("_list"
###           ("_args"
###             ("_applC" ("_position" Putfield)
###               ("_cargs" ("_position" F) ("_position" D)))
###             ("_applC" ("_position" Push) ("_position" Unit))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 32 of "$AFP/JinjaDCI/Compiler/Compiler2.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" compE\<^sub>2)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>2))
###       ("_list"
###         ("_args"
###           ("_applC" ("_position" Putstatic)
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" F) ("_position" D))))
###           ("_applC" ("_position" Push) ("_position" Unit)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>2)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>2))
###       ("_list"
###         ("_args"
###           ("_applC" ("_position" Putstatic)
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" F) ("_position" D))))
###           ("_applC" ("_position" Push) ("_position" Unit)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>2)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>2))
###       ("_list"
###         ("_args"
###           ("_applC" ("_position" Putstatic)
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" F) ("_position" D))))
###           ("_applC" ("_position" Push) ("_position" Unit)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  compE\<^sub>2 :: "nat exp => bytecode"
  compEs\<^sub>2 :: "nat exp list => bytecode"
### Ambiguous input (line 75 of "$AFP/JinjaDCI/Compiler/Compiler2.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compxE\<^sub>2)
###       ("_cargs"
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))
###         ("_cargs" ("_position" pc) ("_position" d))))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compxE\<^sub>2)
###         ("_cargs" ("_position" e\<^sub>1)
###           ("_cargs" ("_position" pc) ("_position" d))))
###       ("_applC" ("_position" compxE\<^sub>2)
###         ("_cargs" ("_position" e\<^sub>2)
###           ("_cargs"
###             ("\<^const>Groups.plus_class.plus" ("_position" pc)
###               ("_applC" ("_position" size)
###                 ("_applC" ("_position" compE\<^sub>2)
###                   ("_position" e\<^sub>1))))
###             ("\<^const>Groups.plus_class.plus" ("_position" d)
###               ("\<^const>Groups.one_class.one"))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compxE\<^sub>2)
###       ("_cargs"
###         ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))
###         ("_cargs" ("_position" pc) ("_position" d))))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compxE\<^sub>2)
###         ("_cargs" ("_position" e\<^sub>1)
###           ("_cargs" ("_position" pc) ("_position" d))))
###       ("_applC" ("_position" compxE\<^sub>2)
###         ("_cargs" ("_position" e\<^sub>2)
###           ("_cargs"
###             ("\<^const>Groups.plus_class.plus" ("_position" pc)
###               ("_applC" ("_position" size)
###                 ("_applC" ("_position" compE\<^sub>2)
###                   ("_position" e\<^sub>1))))
###             ("\<^const>Groups.plus_class.plus" ("_position" d)
###               ("\<^const>Groups.one_class.one"))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 77 of "$AFP/JinjaDCI/Compiler/Compiler2.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compxE\<^sub>2)
###       ("_cargs"
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))
###         ("_cargs" ("_position" pc) ("_position" d))))
###     ("_applC" ("_position" compxE\<^sub>2)
###       ("_cargs" ("_position" e\<^sub>2)
###         ("_cargs" ("_position" pc) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compxE\<^sub>2)
###       ("_cargs"
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))
###         ("_cargs" ("_position" pc) ("_position" d))))
###     ("_applC" ("_position" compxE\<^sub>2)
###       ("_cargs" ("_position" e\<^sub>2)
###         ("_cargs" ("_position" pc) ("_position" d))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  compxE\<^sub>2 :: "nat exp => nat => nat => ex_table"
  compxEs\<^sub>2 :: "nat exp list => nat => nat => ex_table"
### Ambiguous input (line 107 of "$AFP/JinjaDCI/Compiler/Compiler2.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" max_stack)
###       ("_updbind" ("_position" i) ("_position" e)))
###     ("_applC" ("_position" max_stack) ("_position" e))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" max_stack)
###       ("\<^const>Expr.exp.LAss" ("_position" i) ("_position" e)))
###     ("_applC" ("_position" max_stack) ("_position" e))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 110 of "$AFP/JinjaDCI/Compiler/Compiler2.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" max_stack)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" max)
###         ("_cargs" ("_applC" ("_position" max_stack) ("_position" e\<^sub>1))
###           ("_applC" ("_position" max_stack) ("_position" e\<^sub>2))))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" max_stack)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" max)
###         ("_cargs" ("_applC" ("_position" max_stack) ("_position" e\<^sub>1))
###           ("_applC" ("_position" max_stack) ("_position" e\<^sub>2))))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" max_stack)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" max)
###         ("_cargs" ("_applC" ("_position" max_stack) ("_position" e\<^sub>1))
###           ("_applC" ("_position" max_stack) ("_position" e\<^sub>2))))
###       ("\<^const>Groups.one_class.one"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 111 of "$AFP/JinjaDCI/Compiler/Compiler2.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" max_stack)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" max_stack) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" max_stack)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("_applC" ("_position" max_stack) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" max_stack)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" max_stack) ("_position" e\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### No equation for constructor "INIT"
### No equation for constructor "RI"
consts
  max_stack :: "nat exp => nat"
  max_stacks :: "nat exp list => nat"
### theory "Draft.Compiler2"
### 0.554s elapsed time, 0.601s cpu time, 0.000s GC time
Loading theory "Draft.Compiler2MoreTemplates"
val templateLemmas =
   [("Compiler2.max_stack1'", "~ sub_RI ?e ==> 1 <= max_stack ?e",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 0))
            )],
       template_inequation
        (less_equals, template_hole 1,
         template_app (template_hole 0, template_var 0)))),
    ("Compiler2.compE\<^sub>2_not_Nil'",
     "~ sub_RI ?e ==> compE\<^sub>2 ?e ~= []",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 0))
            )],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Compiler2.compE\<^sub>2_nRet",
     "?i : set (compE\<^sub>2 ?e\<^sub>1) ==> ?i ~= Return",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)))
            )],
       template_negation
        (template_equation (template_var 1, template_hole 0)))),
    ("Compiler2.bop_expr_length_aux",
     "length (case ?bop of Eq => [CmpEq] | Add => [IAdd]) = Suc 0",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_hole 3)),
             template_app
              (template_app (template_hole 5, template_hole 2),
               template_hole 3)),
           template_var 0)),
       template_app (template_hole 1, template_hole 0))),
    ("Compiler2.compMb\<^sub>2",
     "compMb\<^sub>2 ?b ?e =
      (max_stack ?e, max_vars ?e, compE\<^sub>2 ?e @ [Return],
       compxE\<^sub>2 ?e 0 0)",
     template_equation
      (template_app
        (template_app (template_hole 12, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 11,
           template_app (template_hole 10, template_var 0)),
         template_app
          (template_app
            (template_hole 9,
             template_app (template_hole 8, template_var 0)),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 0)),
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_hole 2))),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0),
               template_hole 0))))))]:
   (string * thm * template) list
### theory "Draft.Compiler2MoreTemplates"
### 0.556s elapsed time, 0.856s cpu time, 0.105s GC time
val it = (): unit
