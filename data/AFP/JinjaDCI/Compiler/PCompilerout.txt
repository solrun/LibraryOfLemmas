Loading theory "Draft.Auxiliary" (required by "Draft.PCompilerMoreTemplates" via "Draft.PCompiler" via "Draft.WellForm" via "Draft.TypeRel" via "Draft.Decl" via "Draft.Type")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.PCompilerMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.PCompilerMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.PCompilerMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Auxiliary"
### 0.139s elapsed time, 0.571s cpu time, 0.035s GC time
Loading theory "Draft.Type" (required by "Draft.PCompilerMoreTemplates" via "Draft.PCompiler" via "Draft.WellForm" via "Draft.TypeRel" via "Draft.Decl")
### theory "HOL-Library.Function_Algebras"
### 0.144s elapsed time, 0.589s cpu time, 0.035s GC time
Loading theory "HOL-Library.Transitive_Closure_Table" (required by "Draft.PCompilerMoreTemplates" via "Draft.PCompiler" via "Draft.WellForm" via "Draft.TypeRel")
Proofs for inductive predicate(s) "rtrancl_path"
### theory "HOL-Library.Set_Algebras"
### 0.183s elapsed time, 0.744s cpu time, 0.035s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.PCompilerMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
  Proving monotonicity ...
Proofs for inductive predicate(s) "rtrancl_tab"
  Proving monotonicity ...
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.381s elapsed time, 1.512s cpu time, 0.127s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.PCompilerMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Transitive_Closure_Table"
### 0.346s elapsed time, 1.361s cpu time, 0.159s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.PCompilerMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
### theory "Draft.Type"
### 0.707s elapsed time, 2.781s cpu time, 0.281s GC time
Loading theory "Draft.Decl" (required by "Draft.PCompilerMoreTemplates" via "Draft.PCompiler" via "Draft.WellForm" via "Draft.TypeRel")
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "Draft.Decl"
### 0.068s elapsed time, 0.270s cpu time, 0.000s GC time
Loading theory "Draft.TypeRel" (required by "Draft.PCompilerMoreTemplates" via "Draft.PCompiler" via "Draft.WellForm")
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "subcls1p"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  supercls_lst :: "'m prog => char list list => bool"
Proofs for inductive predicate(s) "widen"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Proofs for inductive predicate(s) "Methods"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.100s elapsed time, 4.177s cpu time, 0.854s GC time
### theory "HOL-Library.BigO"
### 1.032s elapsed time, 3.886s cpu time, 0.788s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Fields"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.TypeRel"
### 0.939s elapsed time, 2.913s cpu time, 0.735s GC time
Loading theory "Draft.Value" (required by "Draft.PCompilerMoreTemplates" via "Draft.PCompiler" via "Draft.WellForm" via "Draft.SystemClasses" via "Draft.Exceptions" via "Draft.Objects")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Addr"
consts
  the_Intg :: "val => int"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_Addr :: "val => nat"
consts
  default_val :: "ty => val"
### theory "Draft.Value"
### 0.369s elapsed time, 0.792s cpu time, 0.114s GC time
Loading theory "Draft.Objects" (required by "Draft.PCompilerMoreTemplates" via "Draft.PCompiler" via "Draft.WellForm" via "Draft.SystemClasses" via "Draft.Exceptions")
### theory "HOL-Library.Tree"
### 2.047s elapsed time, 6.601s cpu time, 1.130s GC time
Loading theory "Draft.Templates" (required by "Draft.PCompilerMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.110s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.PCompilerMoreTemplates")
consts
  typeof_h :: "heap => val => ty option"
Proofs for inductive predicate(s) "iprog"
  Proving monotonicity ...
### theory "Draft.Objects"
### 0.468s elapsed time, 0.982s cpu time, 0.108s GC time
Loading theory "Draft.Exceptions" (required by "Draft.PCompilerMoreTemplates" via "Draft.PCompiler" via "Draft.WellForm" via "Draft.SystemClasses")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.534s elapsed time, 1.116s cpu time, 0.108s GC time
### theory "Draft.Exceptions"
### 0.138s elapsed time, 0.266s cpu time, 0.000s GC time
Loading theory "Draft.SystemClasses" (required by "Draft.PCompilerMoreTemplates" via "Draft.PCompiler" via "Draft.WellForm")
### theory "Draft.SystemClasses"
### 0.059s elapsed time, 0.060s cpu time, 0.000s GC time
Loading theory "Draft.WellForm" (required by "Draft.PCompilerMoreTemplates" via "Draft.PCompiler")
### theory "Draft.WellForm"
### 0.218s elapsed time, 0.253s cpu time, 0.049s GC time
Loading theory "Draft.PCompiler" (required by "Draft.PCompilerMoreTemplates")
### theory "Draft.PCompiler"
### 0.164s elapsed time, 0.205s cpu time, 0.056s GC time
Loading theory "Draft.PCompilerMoreTemplates"
val templateLemmas =
   [("PCompiler.wf_clinit_compM",
     "wf_clinit (map (compM ?f) ?ms) = wf_clinit ?ms",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("PCompiler.sblank_compP", "sblank (compP ?f ?P) ?C = sblank ?P ?C",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("PCompiler.fields_compP", "fields (compP ?f ?P) ?C = fields ?P ?C",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("PCompiler.ifields_compP", "ifields (compP ?f ?P) ?C = ifields ?P ?C",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("PCompiler.isfields_compP",
     "isfields (compP ?f ?P) ?C = isfields ?P ?C",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("PCompiler.blank_compP", "blank (compP ?f ?P) ?C = blank ?P ?C",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("PCompiler.compP_widen",
     "compP ?f ?P \<turnstile> ?T \<le> ?T' = ?P \<turnstile> ?T \<le> ?T'",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("PCompiler.field_compP", "field (compP ?f ?P) ?F ?D = field ?P ?F ?D",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("PCompiler.has_field_compP",
     "(compP ?f ?P \<turnstile> ?C has ?F,?b:?T in ?D) =
      (?P \<turnstile> ?C has ?F,?b:?T in ?D)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 6),
                     template_var 5)),
                 template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("PCompiler.sees_fields_compP",
     "(compP ?f ?P \<turnstile> ?C sees ?F,?b:?T in ?D) =
      (?P \<turnstile> ?C sees ?F,?b:?T in ?D)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 6),
                     template_var 5)),
                 template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("PCompiler.sees_method_compP",
     "?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = ?m in ?D ==>
      compP ?f
       ?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = ?f ?b
                         ?m in ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 2, template_var 8),
                          template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_hole 1,
                           template_app
                            (template_app (template_hole 0, template_var 0),
                             template_var 8)),
                         template_var 7),
                       template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_app
                (template_app (template_var 0, template_var 5),
                 template_var 2)),
             template_var 1)
           ))),
    ("PCompiler.class_compP",
     "class ?P ?C = \<lfloor>(?D, ?fs, ?ms)\<rfloor> ==>
      class (compP ?f ?P) ?C =
      \<lfloor>(?D, ?fs, map (compM ?f) ?ms)\<rfloor>",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 11, template_var 5),
            template_var 4),
          template_app
           (template_hole 10,
            template_app
             (template_app (template_hole 9, template_var 3),
              template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1))))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_var 5)),
           template_var 4),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)),
                 template_var 1))))))),
    ("PCompiler.sees_method_compPD",
     "compP ?f
       ?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = ?fm in ?D ==>
      EX m. ?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = m in ?D &
            ?f ?b m = ?fm",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_hole 5,
                            template_app
                             (template_app
                               (template_hole 4, template_var 8),
                              template_var 7)),
                          template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("PCompiler.set_compP",
     "((?C, ?D, ?fs, ?ms') : set (compP ?f ?P)) =
      (EX ms. (?C, ?D, ?fs, ms) : set ?P & ?ms' = map (compM ?f) ms)",
     template_equation
      (template_app
        (template_app
          (template_hole 15,
           template_app
            (template_app (template_hole 14, template_var 5),
             template_app
              (template_app (template_hole 13, template_var 4),
               template_app
                (template_app (template_hole 12, template_var 3),
                 template_var 2)))),
         template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, template_var 1),
             template_var 0))),
       template_app (template_hole 9, t_empty))),
    ("PCompiler.class_compPD",
     "class (compP ?f ?P) ?C = \<lfloor>(?D, ?fs, ?cms)\<rfloor> ==>
      EX ms.
         class ?P ?C = \<lfloor>(?D, ?fs, ms)\<rfloor> &
         ?cms = map (compM ?f) ms",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 14,
              template_app
               (template_app (template_hole 13, template_var 5),
                template_var 4)),
            template_var 3),
          template_app
           (template_hole 12,
            template_app
             (template_app (template_hole 11, template_var 2),
              template_app
               (template_app (template_hole 10, template_var 1),
                template_var 0))))],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("PCompiler.map_of_map4",
     "map_of (map (%(x, a, b, c). (x, a, b, ?f c)) ?ts) =
      map_option (%(a, b, c). (a, b, ?f c)) o map_of ?ts",
     template_equation
      (template_app
        (template_hole 12,
         template_app
          (template_app
            (template_hole 11, template_app (template_hole 10, t_empty)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3, template_app (template_hole 2, t_empty))),
         template_app (template_hole 0, template_var 0)))),
    ("PCompiler.sees_methods_compP",
     "?P \<turnstile> ?C sees_methods ?Mm ==>
      compP ?f
       ?P \<turnstile> ?C sees_methods map_option
  (%((b, Ts, T, m), D). ((b, Ts, T, ?f b m), D)) o
 ?Mm",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 12, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app (template_hole 10, template_var 0),
                   template_var 3)),
               template_var 2),
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_hole 8,
                   template_app
                    (template_hole 7,
                     template_app (template_hole 6, t_empty)))),
               template_var 1))
           ))),
    ("PCompiler.sees_methods_compPD",
     "[| ?cP \<turnstile> ?C sees_methods ?Mm'; ?cP = compP ?f ?P |]
      ==> EX Mm.
             ?P \<turnstile> ?C sees_methods Mm &
             ?Mm' =
             map_option (%((b, Ts, T, m), D). ((b, Ts, T, ?f b m), D)) o
             Mm",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 16, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 14, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 13, t_empty)))),
    ("PCompiler.map_of_map245",
     "map_of (map (%(x, a, b, c, d). (x, a, b, c, ?f a c d)) ?ts) =
      map_option (%(a, b, c, d). (a, b, c, ?f a c d)) o map_of ?ts",
     template_equation
      (template_app
        (template_hole 15,
         template_app
          (template_app
            (template_hole 14, template_app (template_hole 13, t_empty)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4, template_app (template_hole 3, t_empty))),
         template_app (template_hole 0, template_var 0)))),
    ("PCompiler.wf_prog_compPI",
     "[| !!C M b Ts T m.
            [| ?P \<turnstile> C sees M, b :  Ts\<rightarrow>T = m in C;
               wf_mdecl ?wf\<^sub>1 ?P C (M, b, Ts, T, m) |]
            ==> wf_mdecl ?wf\<^sub>2 (compP ?f ?P) C (M, b, Ts, T, ?f b m);
         wf_prog ?wf\<^sub>1 ?P |]
      ==> wf_prog ?wf\<^sub>2 (compP ?f ?P)",
     template_implication
      ([template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app
              (template_app (template_hole 6, template_var 0),
               template_var 3))
           ))),
    ("PCompiler.wf_cdecl_compPI",
     "[| !!C M b Ts T m.
            [| wf_mdecl ?wf\<^sub>1 ?P C (M, b, Ts, T, m);
               ?P \<turnstile> C sees M, b :  Ts\<rightarrow>T = m in C |]
            ==> wf_mdecl ?wf\<^sub>2 (compP ?f ?P) C (M, b, Ts, T, ?f b m);
         ALL x:set ?P. wf_cdecl ?wf\<^sub>1 ?P x; ?x : set (compP ?f ?P);
         wf_prog ?p ?P |]
      ==> wf_cdecl ?wf\<^sub>2 (compP ?f ?P) ?x",
     template_implication
      ([template_predicate (template_app (template_hole 24, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 4)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 11, template_var 2),
                  template_var 4)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_app
                (template_app (template_hole 11, template_var 2),
                 template_var 4)),
             template_var 1)
           )))]:
   (string * thm * template) list
### theory "Draft.PCompilerMoreTemplates"
### 0.543s elapsed time, 1.169s cpu time, 0.738s GC time
val it = (): unit
