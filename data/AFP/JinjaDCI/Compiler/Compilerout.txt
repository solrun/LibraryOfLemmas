Loading theory "Draft.Auxiliary" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.J1WellForm" via "Draft.JWellForm" via "Draft.WellForm" via "Draft.TypeRel" via "Draft.Decl" via "Draft.Type")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.CompilerMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.CompilerMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.CompilerMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Auxiliary"
### 0.137s elapsed time, 0.571s cpu time, 0.032s GC time
Loading theory "Draft.Type" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.J1WellForm" via "Draft.JWellForm" via "Draft.WellForm" via "Draft.TypeRel" via "Draft.Decl")
### theory "HOL-Library.Function_Algebras"
### 0.144s elapsed time, 0.599s cpu time, 0.032s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness2")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.282s elapsed time, 1.132s cpu time, 0.115s GC time
Loading theory "HOL-Library.Transitive_Closure_Table" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.J1WellForm" via "Draft.JWellForm" via "Draft.WellForm" via "Draft.TypeRel")
Proofs for inductive predicate(s) "rtrancl_path"
  Proving monotonicity ...
### theory "HOL-Library.Nat_Bijection"
### 0.319s elapsed time, 1.282s cpu time, 0.115s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.CompilerMoreTemplates" via "Draft.ExtrEqs")
Proofs for inductive predicate(s) "rtrancl_tab"
  Proving monotonicity ...
consts
  prefixes :: "'a list => 'a list list"
### theory "HOL-Library.Transitive_Closure_Table"
### 0.281s elapsed time, 1.110s cpu time, 0.075s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.CompilerMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### theory "Draft.Type"
### 0.700s elapsed time, 2.754s cpu time, 0.298s GC time
Loading theory "Draft.Decl" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.J1WellForm" via "Draft.JWellForm" via "Draft.WellForm" via "Draft.TypeRel")
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### theory "Draft.Decl"
### 0.238s elapsed time, 0.791s cpu time, 0.507s GC time
Loading theory "Draft.TypeRel" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.J1WellForm" via "Draft.JWellForm" via "Draft.WellForm")
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  suffixes :: "'a list => 'a list list"
consts
  cycle :: "'a list => 'a stream"
Proofs for inductive predicate(s) "list_emb"
  Proving monotonicity ...
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Proofs for inductive predicate(s) "subcls1p"
  Proving monotonicity ...
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  left :: "'a tree => 'a tree"
consts
  supercls_lst :: "'m prog => char list list => bool"
consts
  right :: "'a tree => 'a tree"
Proofs for inductive predicate(s) "widen"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
  Proving monotonicity ...
### theory "HOL-Library.Stream"
### 1.081s elapsed time, 4.113s cpu time, 0.839s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.CompilerMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Methods"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Fields"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
consts
  sublists :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Sublist"
### 1.654s elapsed time, 6.367s cpu time, 1.075s GC time
Loading theory "List-Index.List_Index" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.Compiler1" via "Draft.Hidden")
Found termination order: "size <*mlex*> {}"
consts
  find_index :: "('a => bool) => 'a list => nat"
### theory "Draft.TypeRel"
### 0.814s elapsed time, 3.206s cpu time, 0.331s GC time
Loading theory "Draft.Value" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.J1WellForm" via "Draft.JWellForm" via "Draft.WellForm" via "Draft.SystemClasses" via "Draft.Exceptions" via "Draft.Objects")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  map_index' :: "nat => (nat => 'a => 'b) => 'a list => 'b list"
Found termination order: "size <*mlex*> {}"
consts
  insert_nth :: "nat => 'a => 'a list => 'a list"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "List-Index.List_Index"
### 0.422s elapsed time, 1.663s cpu time, 0.199s GC time
Loading theory "Draft.Hidden" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.Compiler1")
### theory "HOL-Library.BigO"
### 0.850s elapsed time, 3.343s cpu time, 0.352s GC time
Found termination order: "size <*mlex*> {}"
### theory "Draft.Hidden"
### 0.081s elapsed time, 0.314s cpu time, 0.063s GC time
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Addr"
consts
  the_Intg :: "val => int"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_Addr :: "val => nat"
consts
  default_val :: "ty => val"
### theory "Draft.Value"
### 0.487s elapsed time, 1.861s cpu time, 0.201s GC time
Loading theory "Draft.Objects" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.J1WellForm" via "Draft.JWellForm" via "Draft.WellForm" via "Draft.SystemClasses" via "Draft.Exceptions")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  typeof_h :: "heap => val => ty option"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.200s elapsed time, 7.743s cpu time, 1.265s GC time
Loading theory "Draft.Templates" (required by "Draft.CompilerMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.111s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.CompilerMoreTemplates")
Proofs for inductive predicate(s) "iprog"
  Proving monotonicity ...
### theory "Draft.Objects"
### 0.519s elapsed time, 1.095s cpu time, 0.131s GC time
Loading theory "Draft.Exceptions" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.J1WellForm" via "Draft.JWellForm" via "Draft.WellForm" via "Draft.SystemClasses")
Loading theory "Draft.JVMState" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness2" via "Draft.Compiler2" via "Draft.JVMExec" via "Draft.JVMExecInstr" via "Draft.JVMInstructions")
### theory "Draft.Exceptions"
### 0.173s elapsed time, 0.528s cpu time, 0.046s GC time
Loading theory "Draft.Expr" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.J1WellForm" via "Draft.JWellForm" via "Draft.WWellForm")
Loading theory "Draft.State" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.J1WellForm" via "Draft.JWellForm" via "Draft.DefAss" via "Draft.BigStep")
### theory "Draft.State"
### 0.052s elapsed time, 0.207s cpu time, 0.000s GC time
Loading theory "Draft.SystemClasses" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.J1WellForm" via "Draft.JWellForm" via "Draft.WellForm")
### theory "Draft.SystemClasses"
### 0.091s elapsed time, 0.367s cpu time, 0.000s GC time
Loading theory "Draft.WellForm" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.J1WellForm" via "Draft.JWellForm")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.621s elapsed time, 2.161s cpu time, 0.213s GC time
Found termination order: "{}"
### theory "Draft.WellForm"
### 0.300s elapsed time, 1.092s cpu time, 0.093s GC time
Loading theory "Draft.PCompiler" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.Compiler1")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.PCompiler"
### 0.236s elapsed time, 0.719s cpu time, 0.109s GC time
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.JVMState"
### 0.970s elapsed time, 3.199s cpu time, 0.323s GC time
Loading theory "Draft.JVMInstructions" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness2" via "Draft.Compiler2" via "Draft.JVMExec" via "Draft.JVMExecInstr")
### theory "Draft.JVMInstructions"
### 2.327s elapsed time, 5.774s cpu time, 2.661s GC time
Loading theory "Draft.JVMExceptions" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness2" via "Draft.Compiler2" via "Draft.JVMExec" via "Draft.JVMExecInstr")
consts
  match_ex_table ::
    "'m prog => char list => nat => ex_table => (nat * nat) option"
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd (snd (snd p))))))
         (fst (snd (snd (snd p))))) <*mlex*>
   {}"
### theory "Draft.JVMExceptions"
### 0.806s elapsed time, 1.693s cpu time, 0.179s GC time
Loading theory "Draft.JVMExecInstr" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness2" via "Draft.Compiler2" via "Draft.JVMExec")
Found termination order: "{}"
consts
  exec_instr ::
    "instr
     => jvm_prog
        => heap
           => val list
              => val list
                 => char list
                    => char list
                       => nat
                          => init_call_status
                             => frame list => sheap => jvm_state"
Found termination order: "{}"
### Ambiguous input (line 129 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("_applC" ("_position" fv) ("_position" e\<^sub>1))
###       ("_applC" ("_position" fv) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 130 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" fv)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" fv) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("_applC" ("_position" fv) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" fv)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" fv) ("_position" e\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.JVMExecInstr"
### 0.910s elapsed time, 1.990s cpu time, 0.282s GC time
Loading theory "Draft.JVMExec" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness2" via "Draft.Compiler2")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
consts
  fv :: "char list exp => char list set"
  fvs :: "char list exp list => char list set"
Found termination order: "{}"
Proofs for inductive predicate(s) "exec_1p"
  Proving monotonicity ...
Found termination order: "{}"
### Ambiguous input (line 161 of "$AFP/JinjaDCI/J/Expr.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lass_val_of)
###       ("\<^const>Expr.exp.LAss" ("_position" V)
###         ("_applC" ("_position" Val) ("_position" v))))
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" V) ("_tuple_arg" ("_position" v))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" lass_val_of)
###       ("_updbind" ("_position" V)
###         ("_applC" ("_position" Val) ("_position" v))))
###     ("_applC" ("_position" Some)
###       ("_tuple" ("_position" V) ("_tuple_arg" ("_position" v))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.JVMExec"
### 1.816s elapsed time, 4.045s cpu time, 0.516s GC time
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 252 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" sub_RI)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>1))
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub_RI)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>1))
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub_RI)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>1))
###       ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 253 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" sub_RI)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub_RI)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub_RI)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  sub_RI :: "'a exp => bool"
  sub_RIs :: "'a exp list => bool"
### Ambiguous input (line 295 of "$AFP/JinjaDCI/J/Expr.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C')
###         ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" not_init)
###         ("_cargs" ("_position" C') ("_position" e\<^sub>1)))
###       ("_applC" ("_position" not_init)
###         ("_cargs" ("_position" C') ("_position" e\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C')
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" not_init)
###         ("_cargs" ("_position" C') ("_position" e\<^sub>1)))
###       ("_applC" ("_position" not_init)
###         ("_cargs" ("_position" C') ("_position" e\<^sub>2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 296 of "$AFP/JinjaDCI/J/Expr.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C')
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C') ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C')
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("_applC" ("_position" not_init)
###       ("_cargs" ("_position" C') ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  not_init :: "char list => 'a exp => bool"
  not_inits :: "char list => 'a exp list => bool"
### Ambiguous input (line 336 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" subexp)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("\<^const>Set.union"
###         ("_Finset"
###           ("_args" ("_position" e\<^sub>1) ("_position" e\<^sub>2)))
###         ("_applC" ("_position" subexp) ("_position" e\<^sub>1)))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subexp)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("\<^const>Set.union"
###         ("_Finset"
###           ("_args" ("_position" e\<^sub>1) ("_position" e\<^sub>2)))
###         ("_applC" ("_position" subexp) ("_position" e\<^sub>1)))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subexp)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union"
###       ("\<^const>Set.union"
###         ("_Finset"
###           ("_args" ("_position" e\<^sub>1) ("_position" e\<^sub>2)))
###         ("_applC" ("_position" subexp) ("_position" e\<^sub>1)))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 337 of "$AFP/JinjaDCI/J/Expr.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" subexp)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union" ("_Finset" ("_position" e\<^sub>2))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subexp)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Set.union" ("_Finset" ("_position" e\<^sub>2))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subexp)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Set.union" ("_Finset" ("_position" e\<^sub>2))
###       ("_applC" ("_position" subexp) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  subexp :: "'a exp => 'a exp set"
  subexps :: "'a exp list => 'a exp set"
### theory "Draft.Expr"
### 8.461s elapsed time, 18.545s cpu time, 4.251s GC time
Loading theory "Draft.WellType" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.J1WellForm" via "Draft.JWellForm")
Loading theory "Draft.WWellForm" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.J1WellForm" via "Draft.JWellForm")
### Ambiguous input (line 67 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" T)
###         ("_position" D)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" T')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" T)
###         ("_position" D)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" T')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 63 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WT" ("_position" P) ("_position" E) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" T)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WT" ("_position" P) ("_position" E) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" T)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "WT", "WTs"
  Proving monotonicity ...
### theory "Draft.WWellForm"
### 0.201s elapsed time, 0.500s cpu time, 0.072s GC time
Loading theory "Draft.BigStep" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.J1WellForm" via "Draft.JWellForm" via "Draft.DefAss")
Loading theory "Draft.SmallStep" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness2" via "Draft.EConform")
### Ambiguous input (line 129 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts)))
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E) ("_position" e)
###       ("\<^const>HOL.conj" ("_position" T)
###         ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###           ("_position" es) ("_position" Ts))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts)))
###     ("\<^const>HOL.conj"
###       ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###         ("_position" e) ("_position" T))
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("_position" es) ("_position" Ts)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 132 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" Ts))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" U) ("_position" Us))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts)
###           ("\<^const>List.list.Cons" ("_position" U) ("_position" Us)))
###         ("\<^const>HOL.conj"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e) ("_position" U))
###           ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###             ("_position" es) ("_position" Us)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" Ts))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" U) ("_position" Us))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" Ts)
###           ("\<^const>List.list.Cons" ("_position" U) ("_position" Us)))
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e)
###           ("\<^const>HOL.conj" ("_position" U)
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es) ("_position" Us))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 136 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" Ts)
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("\<^const>List.append" ("_position" es\<^sub>1)
###           ("_position" es\<^sub>2))
###         ("_position" Ts))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Ts\<^sub>1) ("_position" Ts\<^sub>2))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" Ts)
###             ("\<^const>List.append" ("_position" Ts\<^sub>1)
###               ("_position" Ts\<^sub>2)))
###           ("\<^const>HOL.conj"
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es\<^sub>1) ("_position" Ts\<^sub>1))
###             ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###               ("_position" es\<^sub>2) ("_position" Ts\<^sub>2))))))))
### ("\<^const>Pure.all_binder" ("_position" Ts)
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###         ("\<^const>List.append" ("_position" es\<^sub>1)
###           ("_position" es\<^sub>2))
###         ("_position" Ts))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Ts\<^sub>1) ("_position" Ts\<^sub>2))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" Ts)
###             ("\<^const>List.append" ("_position" Ts\<^sub>1)
###               ("_position" Ts\<^sub>2)))
###           ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###             ("_position" es\<^sub>1)
###             ("\<^const>HOL.conj" ("_position" Ts\<^sub>1)
###               ("\<^const>WellType.WTs" ("_position" P) ("_position" E)
###                 ("_position" es\<^sub>2) ("_position" Ts\<^sub>2)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 157 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("_applC" ("_position" Val) ("_position" v)) ("_position" T))
###     ("\<^const>HOL.eq" ("_applC" ("_position" typeof) ("_position" v))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("_applC" ("_position" Val) ("_position" v))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq" ("_applC" ("_position" typeof) ("_position" v))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### typeof ?v = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Val ?v :: ?T
### Ignoring duplicate safe introduction (intro!)
### typeof ?v = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Val ?v :: ?T
### Ambiguous input (line 160 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("_applC" ("_position" Var) ("_position" V)) ("_position" T))
###     ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###       ("_applC" ("_position" Some) ("_position" T)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("_applC" ("_position" Var) ("_position" V))
###     ("\<^const>HOL.eq" ("_position" T)
###       ("\<^const>HOL.eq" ("_applC" ("_position" E) ("_position" V))
###         ("_applC" ("_position" Some) ("_position" T))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### ?E ?V = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Var ?V :: ?T
### Ignoring duplicate safe introduction (intro!)
### ?E ?V = \<lfloor>?T\<rfloor> ==> ?P,?E \<turnstile> Var ?V :: ?T
### Ambiguous input (line 16 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" blocks)
###       ("_tuple" ("\<^const>List.list.Cons" ("_position" V) ("_position" Vs))
###         ("_tuple_args"
###           ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts))
###           ("_tuple_args"
###             ("\<^const>List.list.Cons" ("_position" v) ("_position" vs))
###             ("_tuple_arg" ("_position" e))))))
###     ("\<^const>Expr.exp.Block" ("_position" V)
###       ("\<^const>Expr.exp.LAss" ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_applC" ("_position" blocks)
###         ("_tuple" ("_position" Vs)
###           ("_tuple_args" ("_position" Ts)
###             ("_tuple_args" ("_position" vs)
###               ("_tuple_arg" ("_position" e)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" blocks)
###       ("_tuple" ("\<^const>List.list.Cons" ("_position" V) ("_position" Vs))
###         ("_tuple_args"
###           ("\<^const>List.list.Cons" ("_position" T) ("_position" Ts))
###           ("_tuple_args"
###             ("\<^const>List.list.Cons" ("_position" v) ("_position" vs))
###             ("_tuple_arg" ("_position" e))))))
###     ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###       ("_applC" ("_position" Val) ("_position" v))
###       ("_applC" ("_position" blocks)
###         ("_tuple" ("_position" Vs)
###           ("_tuple_args" ("_position" Ts)
###             ("_tuple_args" ("_position" vs)
###               ("_tuple_arg" ("_position" e)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 163 of "$AFP/JinjaDCI/J/WellType.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>HOL.conj"
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>1) ("_position" T\<^sub>1))
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" T\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>HOL.conj"
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>1) ("_position" T\<^sub>1))
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" T\<^sub>2))
###     ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###       ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1)
###         ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###           ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.Seq" ("_position" e\<^sub>1)
###       ("_position" e\<^sub>2))
###     ("\<^const>HOL.eq" ("_position" T\<^sub>2)
###       ("\<^const>HOL.Ex_binder" ("_position" T\<^sub>1)
###         ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>1)
###           ("\<^const>HOL.conj" ("_position" T\<^sub>1)
###             ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###               ("_position" e\<^sub>2) ("_position" T\<^sub>2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Missing patterns in function definition:
### !!vc vd vb. blocks ([], vc # vd, vb) = undefined
### !!v ve vf vd. blocks ([], v, ve # vf, vd) = undefined
### !!va vb vc. blocks (va # vb, [], vc) = undefined
### (3 more)
### Ambiguous input (line 157 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" b) ("_position" t))
###                 ("\<^const>TypeRel.has_field" ("_position" P)
###                   ("_position" C) ("_position" F) ("_position" b)
###                   ("_position" t) ("_position" D)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" b) ("_position" t))
###                 ("\<^const>TypeRel.has_field" ("_position" P)
###                   ("_position" C) ("_position" F) ("_position" b)
###                   ("_position" t) ("_position" D)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 162 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" Static) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" Static) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 139 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" NonStatic) ("_position" t)
###               ("_position" D)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" fs')
###                 ("_MapUpd" ("_position" fs)
###                   ("_maplet"
###                     ("_tuple" ("_position" F)
###                       ("_tuple_arg" ("_position" D)))
###                     ("_position" v)))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                   ("_MapUpd" ("_position" h\<^sub>2)
###                     ("_maplet" ("_position" a)
###                       ("_tuple" ("_position" C)
###                         ("_tuple_arg" ("_position" fs')))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" NonStatic) ("_position" t)
###               ("_position" D)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" fs')
###                 ("_MapUpd" ("_position" fs)
###                   ("_maplet"
###                     ("_tuple" ("_position" F)
###                       ("_tuple_arg" ("_position" D)))
###                     ("_position" v)))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                   ("_MapUpd" ("_position" h\<^sub>2)
###                     ("_maplet" ("_position" a)
###                       ("_tuple" ("_position" C)
###                         ("_tuple_arg" ("_position" fs')))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 167 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" sfs')
###               ("_MapUpd" ("_position" sfs)
###                 ("_maplet" ("_position" F) ("_position" v)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" sh\<^sub>1')
###                 ("_MapUpd" ("_position" sh\<^sub>1)
###                   ("_maplet" ("_position" D)
###                     ("_tuple" ("_position" sfs')
###                       ("_tuple_arg" ("_position" Done))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" sfs')
###               ("_MapUpd" ("_position" sfs)
###                 ("_maplet" ("_position" F) ("_position" v)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" sh\<^sub>1')
###                 ("_MapUpd" ("_position" sh\<^sub>1)
###                   ("_maplet" ("_position" D)
###                     ("_tuple" ("_position" sfs')
###                       ("_tuple_arg" ("_position" Done))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 145 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_position" null) ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_position" null) ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 149 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 173 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Not_Ex" ("_position" sfs)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" sfs)
###                   ("_tuple_arg" ("_position" Done)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P)
###               ("\<^const>Expr.exp.INIT" ("_position" D)
###                 ("_list" ("_position" D)) ("_position" False)
###                 ("_position" unit))
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args" ("_position" l\<^sub>1)
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_applC" ("_position" Val) ("_position" v'))
###               ("_tuple" ("_position" h')
###                 ("_tuple_args" ("_position" l')
###                   ("_tuple_arg" ("_position" sh'))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" sh') ("_position" D))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" sfs)
###                     ("_tuple_arg" ("_position" i))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" sfs')
###                   ("_MapUpd" ("_position" sfs)
###                     ("_maplet" ("_position" F) ("_position" v)))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" sh'')
###                     ("_MapUpd" ("_position" sh')
###                       ("_maplet" ("_position" D)
###                         ("_tuple" ("_position" sfs')
###                           ("_tuple_arg" ("_position" i))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l')
###           ("_tuple_arg" ("_position" sh'')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Not_Ex" ("_position" sfs)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" sfs)
###                   ("_tuple_arg" ("_position" Done)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P)
###               ("\<^const>Expr.exp.INIT" ("_position" D)
###                 ("_list" ("_position" D)) ("_position" False)
###                 ("_position" unit))
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args" ("_position" l\<^sub>1)
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_applC" ("_position" Val) ("_position" v'))
###               ("_tuple" ("_position" h')
###                 ("_tuple_args" ("_position" l')
###                   ("_tuple_arg" ("_position" sh'))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" sh') ("_position" D))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" sfs)
###                     ("_tuple_arg" ("_position" i))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" sfs')
###                   ("_MapUpd" ("_position" sfs)
###                     ("_maplet" ("_position" F) ("_position" v)))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" sh'')
###                     ("_MapUpd" ("_position" sh')
###                       ("_maplet" ("_position" D)
###                         ("_tuple" ("_position" sfs')
###                           ("_tuple_arg" ("_position" i))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l')
###           ("_tuple_arg" ("_position" sh'')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 153 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 181 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Not_Ex" ("_position" sfs)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" sfs)
###                   ("_tuple_arg" ("_position" Done)))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P)
###               ("\<^const>Expr.exp.INIT" ("_position" D)
###                 ("_list" ("_position" D)) ("_position" False)
###                 ("_position" unit))
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args" ("_position" l\<^sub>1)
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_applC" ("_position" throw) ("_position" a))
###               ("_position" s')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_applC" ("_position" throw) ("_position" a))
###       ("_position" s'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Not_Ex" ("_position" sfs)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" sfs)
###                   ("_tuple_arg" ("_position" Done)))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P)
###               ("\<^const>Expr.exp.INIT" ("_position" D)
###                 ("_list" ("_position" D)) ("_position" False)
###                 ("_position" unit))
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args" ("_position" l\<^sub>1)
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_applC" ("_position" throw) ("_position" a))
###               ("_position" s')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_applC" ("_position" throw) ("_position" a))
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 187 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 191 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" b) ("_position" t))
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" b) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" b) ("_position" t))
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" b) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 196 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" t)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" t)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 268 of "$AFP/JinjaDCI/J/BigStep.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args"
###           ("_Update" ("_position" l\<^sub>0)
###             ("_updbind" ("_position" V) ("_position" None)))
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args" ("_position" l\<^sub>0)
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args"
###           ("_applC" ("_position" l\<^sub>1)
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V))))
###           ("_tuple_arg" ("_position" sh\<^sub>1)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args"
###           ("_applC" ("_position" l\<^sub>0)
###             ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args" ("_position" l\<^sub>0)
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args"
###           ("_applC" ("_position" l\<^sub>1)
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V))))
###           ("_tuple_arg" ("_position" sh\<^sub>1)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args"
###           ("_Update" ("_position" l\<^sub>0)
###             ("_updbind" ("_position" V) ("_position" None)))
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args" ("_position" l\<^sub>0)
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args"
###           ("_Update" ("_position" l\<^sub>1)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V))))
###           ("_tuple_arg" ("_position" sh\<^sub>1)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>0)
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args"
###           ("_applC" ("_position" l\<^sub>0)
###             ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e\<^sub>0))
###       ("_tuple" ("_position" h\<^sub>0)
###         ("_tuple_args" ("_position" l\<^sub>0)
###           ("_tuple_arg" ("_position" sh\<^sub>0))))
###       ("_position" e\<^sub>1)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args"
###           ("_Update" ("_position" l\<^sub>1)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l\<^sub>0) ("_position" V))))
###           ("_tuple_arg" ("_position" sh\<^sub>1)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 324 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" Throw) ("_position" a))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" h\<^sub>1) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###             ("_position" C)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args"
###                   ("_MapUpd" ("_position" l\<^sub>1)
###                     ("_maplet" ("_position" V)
###                       ("_applC" ("_position" Addr) ("_position" a))))
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_position" e\<^sub>2')
###               ("_tuple" ("_position" h\<^sub>2)
###                 ("_tuple_args" ("_position" l\<^sub>2)
###                   ("_tuple_arg" ("_position" sh\<^sub>2))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" e\<^sub>2')
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args"
###           ("_applC" ("_position" l\<^sub>2)
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l\<^sub>1) ("_position" V))))
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" Throw) ("_position" a))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" h\<^sub>1) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###             ("_position" C)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval" ("_position" P) ("_position" e\<^sub>2)
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args"
###                   ("_MapUpd" ("_position" l\<^sub>1)
###                     ("_maplet" ("_position" V)
###                       ("_applC" ("_position" Addr) ("_position" a))))
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_position" e\<^sub>2')
###               ("_tuple" ("_position" h\<^sub>2)
###                 ("_tuple_args" ("_position" l\<^sub>2)
###                   ("_tuple_arg" ("_position" sh\<^sub>2))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" e\<^sub>2')
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args"
###           ("_Update" ("_position" l\<^sub>2)
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l\<^sub>1) ("_position" V))))
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order:
  "(%p. size_list size (fst (snd (snd p)))) <*mlex*> {}"
### Ambiguous input (line 47 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" icheck)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" D')
###           ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###             ("_position" D) ("_applC" ("_position" Val) ("_position" v))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" D') ("_position" D))
###       ("\<^const>HOL.Ex_binder" ("_position" T)
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" T)
###           ("_position" D))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" icheck)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" D')
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###               ("_position" D))
###             ("_applC" ("_position" Val) ("_position" v))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" D') ("_position" D))
###       ("\<^const>HOL.Ex_binder" ("_position" T)
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" T)
###           ("_position" D))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 179 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.FAss" ("_position" a) ("_position" F)
###       ("_position" D) ("_position" v))
###     ("_position" T)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" a) ("_position" F)
###         ("_position" D))
###       ("_position" v))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 180 of "$AFP/JinjaDCI/J/WellType.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###       ("_position" D) ("_position" v))
###     ("_position" T)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>WellType.WT" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_position" v))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.WellType"
### 0.837s elapsed time, 2.680s cpu time, 0.319s GC time
Proofs for inductive predicate(s) "eval", "evals"
  Proving monotonicity ...
Found termination order: "{}"
### Ambiguous input (line 51 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###       ("_position" None)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Not"
###       ("_applC" ("_position" icheck)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C')
###             ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###               ("_position" D)
###               ("_constrain" ("_position" e\<^sub>2)
###                 ("_tapp" ("_position_sort" 'a) ("_type_name" exp))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###       ("_position" None)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Not"
###       ("_applC" ("_position" icheck)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C')
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###                 ("_position" D))
###               ("_constrain" ("_position" e\<^sub>2)
###                 ("_tapp" ("_position_sort" 'a) ("_type_name" exp))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 181 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" b) ("_position" t))
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" b) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" addr) ("_position" a)) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" b) ("_position" t))
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" b) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss"
###         ("_applC" ("_position" addr) ("_position" a)) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 153 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.SFAcc"
###         ("\<^const>Expr.exp.INIT" ("_position" D) ("_list" ("_position" D))
###           ("_position" False) ("_position" C))
###         ("_position" F) ("_position" D))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.INIT" ("_position" D) ("_list" ("_position" D))
###         ("_position" False)
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 185 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" addr) ("_position" a)) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss"
###         ("_applC" ("_position" addr) ("_position" a)) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 166 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e') ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e') ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.FAss" ("_position" e') ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.FAss" ("_position" e') ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s') ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 189 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e'))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e'))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e'))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e'))
###       ("_position" s') ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 170 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e'))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e'))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" Val) ("_position" v)) ("_position" F)
###           ("_position" D))
###         ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e'))
###       ("_position" s') ("_position" b'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P) ("_position" e) ("_position" s)
###       ("_position" b) ("_position" e') ("_position" s') ("_position" b')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D) ("_position" e'))
###       ("_position" s') ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 193 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" sfs) ("_tuple_arg" ("_position" i))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" sfs')
###             ("_MapUpd" ("_position" sfs)
###               ("_maplet" ("_position" F) ("_position" v)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" sh')
###               ("_MapUpd" ("_position" sh)
###                 ("_maplet" ("_position" D)
###                   ("_tuple" ("_position" sfs')
###                     ("_tuple_arg" ("_position" i)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" True) ("_position" unit)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh'))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" sfs) ("_tuple_arg" ("_position" i))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" sfs')
###             ("_MapUpd" ("_position" sfs)
###               ("_maplet" ("_position" F) ("_position" v)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" sh')
###               ("_MapUpd" ("_position" sh)
###                 ("_maplet" ("_position" D)
###                   ("_tuple" ("_position" sfs')
###                     ("_tuple_arg" ("_position" i)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" True) ("_position" unit)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh'))))
###       ("_position" False))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 174 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" NonStatic) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc"
###           ("_applC" ("_position" addr) ("_position" a)) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" unit)
###       ("_tuple"
###         ("_MapUpd" ("_position" h)
###           ("_maplet" ("_position" a)
###             ("_tuple" ("_position" C)
###               ("_tuple_arg"
###                 ("_MapUpd" ("_position" fs)
###                   ("_maplet"
###                     ("_tuple" ("_position" F)
###                       ("_tuple_arg" ("_position" D)))
###                     ("_position" v)))))))
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" NonStatic) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.FAss"
###         ("_applC" ("_position" addr) ("_position" a)) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b) ("_position" unit)
###       ("_tuple"
###         ("_MapUpd" ("_position" h)
###           ("_maplet" ("_position" a)
###             ("_tuple" ("_position" C)
###               ("_tuple_arg"
###                 ("_MapUpd" ("_position" fs)
###                   ("_maplet"
###                     ("_tuple" ("_position" F)
###                       ("_tuple_arg" ("_position" D)))
###                     ("_position" v)))))))
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 178 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" null) ("_position" F)
###         ("_position" D))
###       ("_applC" ("_position" Val) ("_position" v)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" THROW) ("_position" NullPointer)) ("_position" s)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_position" null) ("_position" F)
###       ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" THROW) ("_position" NullPointer)) ("_position" s)
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 199 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" sfs)
###               ("_tuple_arg" ("_position" Done))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" True))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" sfs)
###               ("_tuple_arg" ("_position" Done))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" True))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" sfs)
###               ("_tuple_arg" ("_position" Done))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" True))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" sfs)
###               ("_tuple_arg" ("_position" Done))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" True))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 267 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_position" None)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 319 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" hp)
###           ("_cargs" ("_position" s) ("_position" a)))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###           ("_position" C)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch"
###         ("_applC" ("_position" Throw) ("_position" a)) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss"
###           ("_applC" ("_position" Class) ("_position" C))
###           ("_applC" ("_position" addr) ("_position" a)))
###         ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" hp)
###           ("_cargs" ("_position" s) ("_position" a)))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###           ("_position" C)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch"
###         ("_applC" ("_position" Throw) ("_position" a)) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V)
###         ("_applC" ("_position" Class) ("_position" C))
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" e\<^sub>2))
###       ("_position" s) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 271 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_applC" ("_position" l)
###               ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_Update" ("_position" l)
###               ("_updbind" ("_position" V) ("_position" None)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" assigned)
###               ("_cargs" ("_position" V) ("_position" e))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 204 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc"
###           ("\<^const>Expr.exp.INIT" ("_position" D)
###             ("_list" ("_position" D)) ("_position" False) ("_position" C))
###           ("_position" F) ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc"
###           ("\<^const>Expr.exp.INIT" ("_position" D)
###             ("_list" ("_position" D)) ("_position" False) ("_position" C))
###           ("_position" F) ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.SFAss"
###         ("\<^const>Expr.exp.INIT" ("_position" D) ("_list" ("_position" D))
###           ("_position" False) ("_position" C))
###         ("_position" F) ("_position" D)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.SFAss"
###         ("\<^const>Expr.exp.INIT" ("_position" D) ("_list" ("_position" D))
###           ("_position" False) ("_position" C))
###         ("_position" F) ("_position" D)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.INIT" ("_position" D) ("_list" ("_position" D))
###         ("_position" False)
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_applC" ("_position" Val) ("_position" v))))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.INIT" ("_position" D) ("_list" ("_position" D))
###         ("_position" False)
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_applC" ("_position" Val) ("_position" v))))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.INIT" ("_position" D) ("_list" ("_position" D))
###         ("_position" False)
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_applC" ("_position" Val) ("_position" v))))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" t)
###         ("_position" D)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Not_Ex" ("_position" sfs)
###           ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False)
###       ("\<^const>Expr.exp.INIT" ("_position" D) ("_list" ("_position" D))
###         ("_position" False)
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_applC" ("_position" Val) ("_position" v))))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" False))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 209 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Not"
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" b) ("_position" t))
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" b) ("_position" t)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_position" s) ("_position" b)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_position" s) ("_position" False))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Not"
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" b) ("_position" t))
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" b) ("_position" t)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_position" s) ("_position" b)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_position" s) ("_position" False))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 213 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###       ("_position" F) ("_position" NonStatic) ("_position" t)
###       ("_position" D)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_position" s) ("_position" b)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_position" s) ("_position" False))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###       ("_position" F) ("_position" NonStatic) ("_position" t)
###       ("_position" D)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_applC" ("_position" Val) ("_position" v)))
###       ("_position" s) ("_position" b)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_position" s) ("_position" False))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 388 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc"
###         ("_applC" ("_position" throw) ("_position" e)) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" throw) ("_position" e)) ("_position" s)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_applC" ("_position" throw) ("_position" e))
###       ("_position" F) ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" throw) ("_position" e)) ("_position" s)
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 395 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###       ("_applC" ("_position" Val) ("_position" v))
###       ("_applC" ("_position" Throw) ("_position" a)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" Throw) ("_position" a)) ("_position" s)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.Block" ("_position" V)
###       ("\<^const>Expr.exp.LAss" ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_applC" ("_position" Throw) ("_position" a)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" Throw) ("_position" a)) ("_position" s)
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 275 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_applC" ("_position" l')
###             ("\<^const>Expr.exp.LAss" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v')) ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)) ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>red'" ("_position" P) ("_position" e)
###         ("_tuple" ("_position" h)
###           ("_tuple_args"
###             ("_MapUpd" ("_position" l)
###               ("_maplet" ("_position" V) ("_position" v)))
###             ("_tuple_arg" ("_position" sh))))
###         ("_position" b) ("_position" e')
###         ("_tuple" ("_position" h')
###           ("_tuple_args" ("_position" l') ("_tuple_arg" ("_position" sh'))))
###         ("_position" b')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" l') ("_position" V))
###           ("_applC" ("_position" Some) ("_position" v'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>red'" ("_position" P)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v)))
###         ("_position" e))
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" l) ("_tuple_arg" ("_position" sh))))
###       ("_position" b)
###       ("\<^const>Expr.exp.Block" ("_position" V)
###         ("\<^const>Expr.exp.LAss" ("_position" T)
###           ("_applC" ("_position" Val) ("_position" v')))
###         ("_position" e'))
###       ("_tuple" ("_position" h')
###         ("_tuple_args"
###           ("_Update" ("_position" l')
###             ("_updbind" ("_position" V)
###               ("_applC" ("_position" l) ("_position" V))))
###           ("_tuple_arg" ("_position" sh'))))
###       ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 389 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_applC" ("_position" Val) ("_position" v))
###         ("_position" F) ("_position" D))
###       ("_applC" ("_position" throw) ("_position" e)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" throw) ("_position" e)) ("_position" s)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_applC" ("_position" Val) ("_position" v))
###       ("_position" F) ("_position" D)
###       ("_applC" ("_position" throw) ("_position" e)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" throw) ("_position" e)) ("_position" s)
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 390 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_applC" ("_position" throw) ("_position" e)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" throw) ("_position" e)) ("_position" s)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###       ("_position" D) ("_applC" ("_position" throw) ("_position" e)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" throw) ("_position" e)) ("_position" s)
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 282 of "$AFP/JinjaDCI/J/SmallStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.InitBlock" ("_position" V) ("_position" T)
###       ("_applC" ("_position" Val) ("_position" v))
###       ("_applC" ("_position" Val) ("_position" u)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" Val) ("_position" u)) ("_position" s)
###     ("_position" b)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>red'" ("_position" P)
###     ("\<^const>Expr.exp.Block" ("_position" V)
###       ("\<^const>Expr.exp.LAss" ("_position" T)
###         ("_applC" ("_position" Val) ("_position" v)))
###       ("_applC" ("_position" Val) ("_position" u)))
###     ("_position" s) ("_position" b)
###     ("_applC" ("_position" Val) ("_position" u)) ("_position" s)
###     ("_position" b)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "redp", "redsp"
  Proving monotonicity ...
### Ambiguous input (line 416 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BigStep.eval" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BigStep.eval" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 417 of "$AFP/JinjaDCI/J/BigStep.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BigStep.eval" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BigStep.eval" ("_position" P)
###     ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.BigStep"
### 8.056s elapsed time, 21.812s cpu time, 4.138s GC time
Loading theory "Draft.DefAss" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.J1WellForm" via "Draft.JWellForm")
Loading theory "Draft.J1" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.J1WellForm")
### Ambiguous input (line 41 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" max_vars)
###       ("_updbind" ("_position" V) ("_position" e)))
###     ("_applC" ("_position" max_vars) ("_position" e))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" max_vars)
###       ("\<^const>Expr.exp.LAss" ("_position" V) ("_position" e)))
###     ("_applC" ("_position" max_vars) ("_position" e))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  max_vars :: "'a exp => nat"
  max_varss :: "'a exp list => nat"
### Ambiguous input (line 91 of "$AFP/JinjaDCI/J/DefAss.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" \<A>)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>DefAss.hyperUn"
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>DefAss.hyperUn"
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>DefAss.hyperUn"
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))
###       ("_applC" ("_position" \<A>) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 92 of "$AFP/JinjaDCI/J/DefAss.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" \<A>)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" \<A>) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("_applC" ("_position" \<A>) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<A>)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" \<A>) ("_position" e\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 120 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h)
###           ("_tuple_args" ("_position" ls)
###             ("_tuple_arg" ("_position" sh))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" i)
###           ("_applC" ("_position" size) ("_position" ls))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" ls')
###             ("_applC" ("_position" ls)
###               ("_list"
###                 ("\<^const>Expr.exp.LAss" ("_position" i)
###                   ("_position" v)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss" ("_position" i) ("_position" e))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" ls')
###           ("_tuple_arg" ("_position" sh)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h)
###           ("_tuple_args" ("_position" ls)
###             ("_tuple_arg" ("_position" sh))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" i)
###           ("_applC" ("_position" size) ("_position" ls))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" ls')
###             ("_LUpdate" ("_position" ls)
###               ("_lupdbind" ("_position" i) ("_position" v))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss" ("_position" i) ("_position" e))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h)
###         ("_tuple_args" ("_position" ls')
###           ("_tuple_arg" ("_position" sh)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  \<A> :: "'a exp => 'a set option"
  \<A>s :: "'a exp list => 'a set option"
### Ambiguous input (line 170 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" NonStatic) ("_position" t)
###               ("_position" D)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" fs')
###                 ("_MapUpd" ("_position" fs)
###                   ("_maplet"
###                     ("_tuple" ("_position" F)
###                       ("_tuple_arg" ("_position" D)))
###                     ("_position" v)))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                   ("_MapUpd" ("_position" h\<^sub>2)
###                     ("_maplet" ("_position" a)
###                       ("_tuple" ("_position" C)
###                         ("_tuple_arg" ("_position" fs')))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" NonStatic) ("_position" t)
###               ("_position" D)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" fs')
###                 ("_MapUpd" ("_position" fs)
###                   ("_maplet"
###                     ("_tuple" ("_position" F)
###                       ("_tuple_arg" ("_position" D)))
###                     ("_position" v)))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" h\<^sub>2')
###                   ("_MapUpd" ("_position" h\<^sub>2)
###                     ("_maplet" ("_position" a)
###                       ("_tuple" ("_position" C)
###                         ("_tuple_arg" ("_position" fs')))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>2')
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 184 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" b) ("_position" t))
###                 ("\<^const>TypeRel.has_field" ("_position" P)
###                   ("_position" C) ("_position" F) ("_position" b)
###                   ("_position" t) ("_position" D)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Not"
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" b) ("_position" t))
###                 ("\<^const>TypeRel.has_field" ("_position" P)
###                   ("_position" C) ("_position" F) ("_position" b)
###                   ("_position" t) ("_position" D)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 175 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_position" null) ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_position" null) ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NullPointer))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 178 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 188 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" Static) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" addr) ("_position" a))
###         ("_position" s\<^sub>1)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" Val) ("_position" v))
###           ("_tuple" ("_position" h\<^sub>2)
###             ("_tuple_args" ("_position" l\<^sub>2)
###               ("_tuple_arg" ("_position" sh\<^sub>2))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" h\<^sub>2) ("_position" a))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" C) ("_tuple_arg" ("_position" fs))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" Static) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 119 of "$AFP/JinjaDCI/J/DefAss.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<D>)
###       ("_cargs"
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))
###         ("_position" A)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" \<D>)
###         ("_cargs" ("_position" e\<^sub>1) ("_position" A)))
###       ("_applC" ("_position" \<D>)
###         ("_cargs" ("_position" e\<^sub>2)
###           ("\<^const>DefAss.hyperUn" ("_position" A)
###             ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<D>)
###       ("_cargs"
###         ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))
###         ("_position" A)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" \<D>)
###         ("_cargs" ("_position" e\<^sub>1) ("_position" A)))
###       ("_applC" ("_position" \<D>)
###         ("_cargs" ("_position" e\<^sub>2)
###           ("\<^const>DefAss.hyperUn" ("_position" A)
###             ("_applC" ("_position" \<A>) ("_position" e\<^sub>1))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 181 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_position" s\<^sub>1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###           ("_position" s\<^sub>1)
###           ("_applC" ("_position" throw) ("_position" e'))
###           ("_position" s\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 120 of "$AFP/JinjaDCI/J/DefAss.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<D>)
###       ("_cargs"
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))
###         ("_position" A)))
###     ("_applC" ("_position" \<D>)
###       ("_cargs" ("_position" e\<^sub>2) ("_position" A)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<D>)
###       ("_cargs"
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))
###         ("_position" A)))
###     ("_applC" ("_position" \<D>)
###       ("_cargs" ("_position" e\<^sub>2) ("_position" A)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 193 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" sfs')
###               ("_MapUpd" ("_position" sfs)
###                 ("_maplet" ("_position" F) ("_position" v)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" sh\<^sub>1')
###                 ("_MapUpd" ("_position" sh\<^sub>1)
###                   ("_maplet" ("_position" D)
###                     ("_tuple" ("_position" sfs')
###                       ("_tuple_arg" ("_position" Done))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" sfs)
###                 ("_tuple_arg" ("_position" Done))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" sfs')
###               ("_MapUpd" ("_position" sfs)
###                 ("_maplet" ("_position" F) ("_position" v)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" sh\<^sub>1')
###                 ("_MapUpd" ("_position" sh\<^sub>1)
###                   ("_maplet" ("_position" D)
###                     ("_tuple" ("_position" sfs')
###                       ("_tuple_arg" ("_position" Done))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h\<^sub>1)
###         ("_tuple_args" ("_position" l\<^sub>1)
###           ("_tuple_arg" ("_position" sh\<^sub>1')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 198 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Not_Ex" ("_position" sfs)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" sfs)
###                   ("_tuple_arg" ("_position" Done)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval\<^sub>1" ("_position" P)
###               ("\<^const>Expr.exp.INIT" ("_position" D)
###                 ("_list" ("_position" D)) ("_position" False)
###                 ("_position" unit))
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args" ("_position" l\<^sub>1)
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_applC" ("_position" Val) ("_position" v'))
###               ("_tuple" ("_position" h')
###                 ("_tuple_args" ("_position" l')
###                   ("_tuple_arg" ("_position" sh'))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" sh') ("_position" D))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" sfs)
###                     ("_tuple_arg" ("_position" i))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" sfs')
###                   ("_MapUpd" ("_position" sfs)
###                     ("_maplet" ("_position" F) ("_position" v)))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" sh'')
###                     ("_MapUpd" ("_position" sh')
###                       ("_maplet" ("_position" D)
###                         ("_tuple" ("_position" sfs')
###                           ("_tuple_arg" ("_position" i))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l')
###           ("_tuple_arg" ("_position" sh'')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Not_Ex" ("_position" sfs)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" sfs)
###                   ("_tuple_arg" ("_position" Done)))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval\<^sub>1" ("_position" P)
###               ("\<^const>Expr.exp.INIT" ("_position" D)
###                 ("_list" ("_position" D)) ("_position" False)
###                 ("_position" unit))
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args" ("_position" l\<^sub>1)
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_applC" ("_position" Val) ("_position" v'))
###               ("_tuple" ("_position" h')
###                 ("_tuple_args" ("_position" l')
###                   ("_tuple_arg" ("_position" sh'))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" sh') ("_position" D))
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" sfs)
###                     ("_tuple_arg" ("_position" i))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" sfs')
###                   ("_MapUpd" ("_position" sfs)
###                     ("_maplet" ("_position" F) ("_position" v)))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" sh'')
###                     ("_MapUpd" ("_position" sh')
###                       ("_maplet" ("_position" D)
###                         ("_tuple" ("_position" sfs')
###                           ("_tuple_arg" ("_position" i))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" unit)
###       ("_tuple" ("_position" h')
###         ("_tuple_args" ("_position" l')
###           ("_tuple_arg" ("_position" sh'')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 205 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Not_Ex" ("_position" sfs)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" sfs)
###                   ("_tuple_arg" ("_position" Done)))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval\<^sub>1" ("_position" P)
###               ("\<^const>Expr.exp.INIT" ("_position" D)
###                 ("_list" ("_position" D)) ("_position" False)
###                 ("_position" unit))
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args" ("_position" l\<^sub>1)
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_applC" ("_position" throw) ("_position" a))
###               ("_position" s')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_applC" ("_position" throw) ("_position" a))
###       ("_position" s'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" l\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" t)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Not_Ex" ("_position" sfs)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sh\<^sub>1) ("_position" D))
###               ("_applC" ("_position" Some)
###                 ("_tuple" ("_position" sfs)
###                   ("_tuple_arg" ("_position" Done)))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^fixed>eval\<^sub>1" ("_position" P)
###               ("\<^const>Expr.exp.INIT" ("_position" D)
###                 ("_list" ("_position" D)) ("_position" False)
###                 ("_position" unit))
###               ("_tuple" ("_position" h\<^sub>1)
###                 ("_tuple_args" ("_position" l\<^sub>1)
###                   ("_tuple_arg" ("_position" sh\<^sub>1))))
###               ("_applC" ("_position" throw) ("_position" a))
###               ("_position" s')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_applC" ("_position" throw) ("_position" a))
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 210 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" throw) ("_position" e'))
###       ("_position" s\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 327 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" Throw) ("_position" a))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" ls\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" h\<^sub>1) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###             ("_position" C)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" i)
###               ("_applC" ("_position" length) ("_position" ls\<^sub>1))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>eval\<^sub>1" ("_position" P)
###                 ("_position" e\<^sub>2)
###                 ("_tuple" ("_position" h\<^sub>1)
###                   ("_tuple_args"
###                     ("_LUpdate" ("_position" ls\<^sub>1)
###                       ("_lupdbind" ("_position" i)
###                         ("_applC" ("_position" Addr) ("_position" a))))
###                     ("_tuple_arg" ("_position" sh\<^sub>1))))
###                 ("_position" e\<^sub>2')
###                 ("_tuple" ("_position" h\<^sub>2)
###                   ("_tuple_args" ("_position" ls\<^sub>2)
###                     ("_tuple_arg" ("_position" sh\<^sub>2)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" i) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" e\<^sub>2')
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" ls\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>1)
###         ("_position" s\<^sub>0)
###         ("_applC" ("_position" Throw) ("_position" a))
###         ("_tuple" ("_position" h\<^sub>1)
###           ("_tuple_args" ("_position" ls\<^sub>1)
###             ("_tuple_arg" ("_position" sh\<^sub>1))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" h\<^sub>1) ("_position" a))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" D) ("_tuple_arg" ("_position" fs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.subcls" ("_position" P) ("_position" D)
###             ("_position" C)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" i)
###               ("_applC" ("_position" length) ("_position" ls\<^sub>1))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^fixed>eval\<^sub>1" ("_position" P)
###                 ("_position" e\<^sub>2)
###                 ("_tuple" ("_position" h\<^sub>1)
###                   ("_tuple_args"
###                     ("_applC" ("_position" ls\<^sub>1)
###                       ("_list"
###                         ("\<^const>Expr.exp.LAss" ("_position" i)
###                           ("_applC" ("_position" Addr) ("_position" a)))))
###                     ("_tuple_arg" ("_position" sh\<^sub>1))))
###                 ("_position" e\<^sub>2')
###                 ("_tuple" ("_position" h\<^sub>2)
###                   ("_tuple_args" ("_position" ls\<^sub>2)
###                     ("_tuple_arg" ("_position" sh\<^sub>2)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" i) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0) ("_position" e\<^sub>2')
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" ls\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 213 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" b) ("_position" t))
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" b) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Not"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" b) ("_position" t))
###             ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###               ("_position" F) ("_position" b) ("_position" t)
###               ("_position" D)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW) ("_position" NoSuchFieldError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  \<D> :: "'a exp => 'a set option => bool"
  \<D>s :: "'a exp list => 'a set option => bool"
### Ambiguous input (line 217 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" t)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>eval\<^sub>1" ("_position" P) ("_position" e\<^sub>2)
###         ("_position" s\<^sub>0) ("_applC" ("_position" Val) ("_position" v))
###         ("_tuple" ("_position" h\<^sub>2)
###           ("_tuple_args" ("_position" l\<^sub>2)
###             ("_tuple_arg" ("_position" sh\<^sub>2))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" t)
###           ("_position" D)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>eval\<^sub>1" ("_position" P)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" s\<^sub>0)
###       ("_applC" ("_position" THROW)
###         ("_position" IncompatibleClassChangeError))
###       ("_tuple" ("_position" h\<^sub>2)
###         ("_tuple_args" ("_position" l\<^sub>2)
###           ("_tuple_arg" ("_position" sh\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.DefAss"
### 0.290s elapsed time, 0.974s cpu time, 0.101s GC time
Loading theory "Draft.JWellForm" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1" via "Draft.J1WellForm")
### Ambiguous input (line 17 of "$AFP/JinjaDCI/J/JWellForm.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J_mdecl)
###     ("_cargs" ("_position" P) ("_position" C)))
###   ("_lambda"
###     ("_pattern" ("_position" M)
###       ("_patterns" ("_position" b)
###         ("_patterns" ("_position" Ts)
###           ("_patterns" ("_position" T)
###             ("_pattern" ("_position" pns) ("_position" body))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Ts))
###         ("_applC" ("_position" length) ("_position" pns)))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" distinct) ("_position" pns))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" sub_RI) ("_position" body)))
###           ("_case_syntax" ("_position" b)
###             ("_case2"
###               ("_case1" ("_position" NonStatic)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.not_member" ("_position" this)
###                     ("_applC" ("_position" set) ("_position" pns)))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.Ex_binder" ("_position" T')
###                       ("\<^const>WellType.WT" ("_position" P)
###                         ("_Map"
###                           ("_Maplets"
###                             ("_maplet" ("_position" this)
###                               ("_applC" ("_position" Class)
###                                 ("_position" C)))
###                             ("_maplets" ("_position" pns)
###                               ("_position" Ts))))
###                         ("_position" body)
###                         ("\<^const>HOL.conj" ("_position" T')
###                           ("\<^const>TypeRel.widen" ("_position" P)
###                             ("_position" T') ("_position" T)))))
###                     ("_applC" ("_position" \<D>)
###                       ("_cargs" ("_position" body)
###                         ("\<^const>Option.option.Some"
###                           ("\<^const>Set.union"
###                             ("_Finset" ("_position" this))
###                             ("_applC" ("_position" set)
###                               ("_position" pns)))))))))
###               ("_case1" ("_position" Static)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.Ex_binder" ("_position" T')
###                     ("\<^const>WellType.WT" ("_position" P)
###                       ("_Map"
###                         ("_maplets" ("_position" pns) ("_position" Ts)))
###                       ("_position" body)
###                       ("\<^const>HOL.conj" ("_position" T')
###                         ("\<^const>TypeRel.widen" ("_position" P)
###                           ("_position" T') ("_position" T)))))
###                   ("_applC" ("_position" \<D>)
###                     ("_cargs" ("_position" body)
###                       ("\<^const>Option.option.Some"
###                         ("_applC" ("_position" set)
###                           ("_position" pns))))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J_mdecl)
###     ("_cargs" ("_position" P) ("_position" C)))
###   ("_lambda"
###     ("_pattern" ("_position" M)
###       ("_patterns" ("_position" b)
###         ("_patterns" ("_position" Ts)
###           ("_patterns" ("_position" T)
###             ("_pattern" ("_position" pns) ("_position" body))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Ts))
###         ("_applC" ("_position" length) ("_position" pns)))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" distinct) ("_position" pns))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" sub_RI) ("_position" body)))
###           ("_case_syntax" ("_position" b)
###             ("_case2"
###               ("_case1" ("_position" NonStatic)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.not_member" ("_position" this)
###                     ("_applC" ("_position" set) ("_position" pns)))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.Ex_binder" ("_position" T')
###                       ("\<^const>HOL.conj"
###                         ("\<^const>WellType.WT" ("_position" P)
###                           ("_Map"
###                             ("_Maplets"
###                               ("_maplet" ("_position" this)
###                                 ("_applC" ("_position" Class)
###                                   ("_position" C)))
###                               ("_maplets" ("_position" pns)
###                                 ("_position" Ts))))
###                           ("_position" body) ("_position" T'))
###                         ("\<^const>TypeRel.widen" ("_position" P)
###                           ("_position" T') ("_position" T))))
###                     ("_applC" ("_position" \<D>)
###                       ("_cargs" ("_position" body)
###                         ("\<^const>Option.option.Some"
###                           ("\<^const>Set.union"
###                             ("_Finset" ("_position" this))
###                             ("_applC" ("_position" set)
###                               ("_position" pns)))))))))
###               ("_case1" ("_position" Static)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.Ex_binder" ("_position" T')
###                     ("\<^const>WellType.WT" ("_position" P)
###                       ("_Map"
###                         ("_maplets" ("_position" pns) ("_position" Ts)))
###                       ("_position" body)
###                       ("\<^const>HOL.conj" ("_position" T')
###                         ("\<^const>TypeRel.widen" ("_position" P)
###                           ("_position" T') ("_position" T)))))
###                   ("_applC" ("_position" \<D>)
###                     ("_cargs" ("_position" body)
###                       ("\<^const>Option.option.Some"
###                         ("_applC" ("_position" set)
###                           ("_position" pns))))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J_mdecl)
###     ("_cargs" ("_position" P) ("_position" C)))
###   ("_lambda"
###     ("_pattern" ("_position" M)
###       ("_patterns" ("_position" b)
###         ("_patterns" ("_position" Ts)
###           ("_patterns" ("_position" T)
###             ("_pattern" ("_position" pns) ("_position" body))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Ts))
###         ("_applC" ("_position" length) ("_position" pns)))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" distinct) ("_position" pns))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" sub_RI) ("_position" body)))
###           ("_case_syntax" ("_position" b)
###             ("_case2"
###               ("_case1" ("_position" NonStatic)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.not_member" ("_position" this)
###                     ("_applC" ("_position" set) ("_position" pns)))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.Ex_binder" ("_position" T')
###                       ("\<^const>WellType.WT" ("_position" P)
###                         ("_Map"
###                           ("_Maplets"
###                             ("_maplet" ("_position" this)
###                               ("_applC" ("_position" Class)
###                                 ("_position" C)))
###                             ("_maplets" ("_position" pns)
###                               ("_position" Ts))))
###                         ("_position" body)
###                         ("\<^const>HOL.conj" ("_position" T')
###                           ("\<^const>TypeRel.widen" ("_position" P)
###                             ("_position" T') ("_position" T)))))
###                     ("_applC" ("_position" \<D>)
###                       ("_cargs" ("_position" body)
###                         ("\<^const>Option.option.Some"
###                           ("\<^const>Set.union"
###                             ("_Finset" ("_position" this))
###                             ("_applC" ("_position" set)
###                               ("_position" pns)))))))))
###               ("_case1" ("_position" Static)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.Ex_binder" ("_position" T')
###                     ("\<^const>HOL.conj"
###                       ("\<^const>WellType.WT" ("_position" P)
###                         ("_Map"
###                           ("_maplets" ("_position" pns) ("_position" Ts)))
###                         ("_position" body) ("_position" T'))
###                       ("\<^const>TypeRel.widen" ("_position" P)
###                         ("_position" T') ("_position" T))))
###                   ("_applC" ("_position" \<D>)
###                     ("_cargs" ("_position" body)
###                       ("\<^const>Option.option.Some"
###                         ("_applC" ("_position" set)
###                           ("_position" pns))))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J_mdecl)
###     ("_cargs" ("_position" P) ("_position" C)))
###   ("_lambda"
###     ("_pattern" ("_position" M)
###       ("_patterns" ("_position" b)
###         ("_patterns" ("_position" Ts)
###           ("_patterns" ("_position" T)
###             ("_pattern" ("_position" pns) ("_position" body))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Ts))
###         ("_applC" ("_position" length) ("_position" pns)))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" distinct) ("_position" pns))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" sub_RI) ("_position" body)))
###           ("_case_syntax" ("_position" b)
###             ("_case2"
###               ("_case1" ("_position" NonStatic)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.not_member" ("_position" this)
###                     ("_applC" ("_position" set) ("_position" pns)))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.Ex_binder" ("_position" T')
###                       ("\<^const>HOL.conj"
###                         ("\<^const>WellType.WT" ("_position" P)
###                           ("_Map"
###                             ("_Maplets"
###                               ("_maplet" ("_position" this)
###                                 ("_applC" ("_position" Class)
###                                   ("_position" C)))
###                               ("_maplets" ("_position" pns)
###                                 ("_position" Ts))))
###                           ("_position" body) ("_position" T'))
###                         ("\<^const>TypeRel.widen" ("_position" P)
###                           ("_position" T') ("_position" T))))
###                     ("_applC" ("_position" \<D>)
###                       ("_cargs" ("_position" body)
###                         ("\<^const>Option.option.Some"
###                           ("\<^const>Set.union"
###                             ("_Finset" ("_position" this))
###                             ("_applC" ("_position" set)
###                               ("_position" pns)))))))))
###               ("_case1" ("_position" Static)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.Ex_binder" ("_position" T')
###                     ("\<^const>HOL.conj"
###                       ("\<^const>WellType.WT" ("_position" P)
###                         ("_Map"
###                           ("_maplets" ("_position" pns) ("_position" Ts)))
###                         ("_position" body) ("_position" T'))
###                       ("\<^const>TypeRel.widen" ("_position" P)
###                         ("_position" T') ("_position" T))))
###                   ("_applC" ("_position" \<D>)
###                     ("_cargs" ("_position" body)
###                       ("\<^const>Option.option.Some"
###                         ("_applC" ("_position" set)
###                           ("_position" pns))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 29 of "$AFP/JinjaDCI/J/JWellForm.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J_mdecl)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" C)
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" NonStatic)
###             ("_tuple_args" ("_position" Ts)
###               ("_tuple_args" ("_position" T)
###                 ("_tuple_args" ("_position" pns)
###                   ("_tuple_arg" ("_position" body))))))))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Ts))
###       ("_applC" ("_position" length) ("_position" pns)))
###     ("\<^const>HOL.conj" ("_applC" ("_position" distinct) ("_position" pns))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.Not"
###           ("_applC" ("_position" sub_RI) ("_position" body)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" this)
###             ("_applC" ("_position" set) ("_position" pns)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.Ex_binder" ("_position" T')
###               ("\<^const>WellType.WT" ("_position" P)
###                 ("_Map"
###                   ("_Maplets"
###                     ("_maplet" ("_position" this)
###                       ("_applC" ("_position" Class) ("_position" C)))
###                     ("_maplets" ("_position" pns) ("_position" Ts))))
###                 ("_position" body)
###                 ("\<^const>HOL.conj" ("_position" T')
###                   ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                     ("_position" T)))))
###             ("_applC" ("_position" \<D>)
###               ("_cargs" ("_position" body)
###                 ("\<^const>Option.option.Some"
###                   ("\<^const>Set.union" ("_Finset" ("_position" this))
###                     ("_applC" ("_position" set) ("_position" pns))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J_mdecl)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" C)
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" NonStatic)
###             ("_tuple_args" ("_position" Ts)
###               ("_tuple_args" ("_position" T)
###                 ("_tuple_args" ("_position" pns)
###                   ("_tuple_arg" ("_position" body))))))))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Ts))
###       ("_applC" ("_position" length) ("_position" pns)))
###     ("\<^const>HOL.conj" ("_applC" ("_position" distinct) ("_position" pns))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.Not"
###           ("_applC" ("_position" sub_RI) ("_position" body)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" this)
###             ("_applC" ("_position" set) ("_position" pns)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.Ex_binder" ("_position" T')
###               ("\<^const>HOL.conj"
###                 ("\<^const>WellType.WT" ("_position" P)
###                   ("_Map"
###                     ("_Maplets"
###                       ("_maplet" ("_position" this)
###                         ("_applC" ("_position" Class) ("_position" C)))
###                       ("_maplets" ("_position" pns) ("_position" Ts))))
###                   ("_position" body) ("_position" T'))
###                 ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                   ("_position" T))))
###             ("_applC" ("_position" \<D>)
###               ("_cargs" ("_position" body)
###                 ("\<^const>Option.option.Some"
###                   ("\<^const>Set.union" ("_Finset" ("_position" this))
###                     ("_applC" ("_position" set) ("_position" pns))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 39 of "$AFP/JinjaDCI/J/JWellForm.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J_mdecl)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" C)
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" Static)
###             ("_tuple_args" ("_position" Ts)
###               ("_tuple_args" ("_position" T)
###                 ("_tuple_args" ("_position" pns)
###                   ("_tuple_arg" ("_position" body))))))))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Ts))
###       ("_applC" ("_position" length) ("_position" pns)))
###     ("\<^const>HOL.conj" ("_applC" ("_position" distinct) ("_position" pns))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.Not"
###           ("_applC" ("_position" sub_RI) ("_position" body)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Ex_binder" ("_position" T')
###             ("\<^const>WellType.WT" ("_position" P)
###               ("_Map" ("_maplets" ("_position" pns) ("_position" Ts)))
###               ("_position" body)
###               ("\<^const>HOL.conj" ("_position" T')
###                 ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                   ("_position" T)))))
###           ("_applC" ("_position" \<D>)
###             ("_cargs" ("_position" body)
###               ("\<^const>Option.option.Some"
###                 ("_applC" ("_position" set) ("_position" pns))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J_mdecl)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" C)
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" Static)
###             ("_tuple_args" ("_position" Ts)
###               ("_tuple_args" ("_position" T)
###                 ("_tuple_args" ("_position" pns)
###                   ("_tuple_arg" ("_position" body))))))))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" Ts))
###       ("_applC" ("_position" length) ("_position" pns)))
###     ("\<^const>HOL.conj" ("_applC" ("_position" distinct) ("_position" pns))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.Not"
###           ("_applC" ("_position" sub_RI) ("_position" body)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Ex_binder" ("_position" T')
###             ("\<^const>HOL.conj"
###               ("\<^const>WellType.WT" ("_position" P)
###                 ("_Map" ("_maplets" ("_position" pns) ("_position" Ts)))
###                 ("_position" body) ("_position" T'))
###               ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                 ("_position" T))))
###           ("_applC" ("_position" \<D>)
###             ("_cargs" ("_position" body)
###               ("\<^const>Option.option.Some"
###                 ("_applC" ("_position" set) ("_position" pns))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.JWellForm"
### 0.296s elapsed time, 0.869s cpu time, 0.121s GC time
Proofs for inductive predicate(s) "eval\<^sub>1", "evals\<^sub>1"
  Proving monotonicity ...
### theory "Draft.SmallStep"
### 22.965s elapsed time, 64.140s cpu time, 36.374s GC time
Loading theory "Draft.EConform" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness2")
### Ambiguous input (line 21 of "$AFP/JinjaDCI/J/EConform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" init_class)
###       ("_cargs" ("_position" P)
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("_applC" ("_position" Some) ("_position" D))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" init_class)
###       ("_cargs" ("_position" P)
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("_applC" ("_position" Some) ("_position" D))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 41 of "$AFP/JinjaDCI/J/EConform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ss_exp)
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D)))
###     ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###       ("_position" D))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Expr.exp.SFAcc"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" ss_exp)
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D)))
###       ("_position" C))
###     ("_position" F) ("_position" D)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 42 of "$AFP/JinjaDCI/J/EConform.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" ss_exp)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("_case_syntax"
###             ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" v))
###                 ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1)
###                   ("_position" F) ("_position" D) ("_position" e\<^sub>2)))
###               ("_case1" ("\<^const>Pure.dummy_pattern")
###                 ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2))))))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>1)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ss_exp)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("_case_syntax"
###             ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" v))
###                 ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1)
###                   ("_position" F) ("_position" D) ("_position" e\<^sub>2)))
###               ("_case1" ("\<^const>Pure.dummy_pattern")
###                 ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2))))))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>1)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ss_exp)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("_case_syntax"
###             ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" v))
###                 ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1)
###                   ("_position" F) ("_position" D) ("_position" e\<^sub>2)))
###               ("_case1" ("\<^const>Pure.dummy_pattern")
###                 ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2))))))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>1)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" ss_exp)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("_case_syntax"
###             ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" v))
###                 ("\<^const>Expr.exp.LAss"
###                   ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1)
###                     ("_position" F) ("_position" D))
###                   ("_position" e\<^sub>2)))
###               ("_case1" ("\<^const>Pure.dummy_pattern")
###                 ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2))))))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>1)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ss_exp)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("_case_syntax"
###             ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" v))
###                 ("\<^const>Expr.exp.LAss"
###                   ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1)
###                     ("_position" F) ("_position" D))
###                   ("_position" e\<^sub>2)))
###               ("_case1" ("\<^const>Pure.dummy_pattern")
###                 ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2))))))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>1)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ss_exp)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("_case_syntax"
###             ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" v))
###                 ("\<^const>Expr.exp.LAss"
###                   ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1)
###                     ("_position" F) ("_position" D))
###                   ("_position" e\<^sub>2)))
###               ("_case1" ("\<^const>Pure.dummy_pattern")
###                 ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2))))))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>1)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 44 of "$AFP/JinjaDCI/J/EConform.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" ss_exp)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###               ("_position" D))
###             ("_position" e\<^sub>2)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ss_exp)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###               ("_position" D))
###             ("_position" e\<^sub>2)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ss_exp)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###               ("_position" D))
###             ("_position" e\<^sub>2)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" ss_exp)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###             ("_position" D) ("_position" e\<^sub>2)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ss_exp)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###             ("_position" D) ("_position" e\<^sub>2)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ss_exp)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>2))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###             ("_position" D) ("_position" e\<^sub>2)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_applC" ("_position" ss_exp) ("_position" e\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 411 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1.eval\<^sub>1" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1.eval\<^sub>1" ("_position" P)
###     ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 412 of "$AFP/JinjaDCI/Compiler/J1.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1.eval\<^sub>1" ("_position" P)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1.eval\<^sub>1" ("_position" P)
###     ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" s) ("_position" e') ("_position" s')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.J1"
### 17.226s elapsed time, 50.150s cpu time, 32.815s GC time
Loading theory "Draft.Compiler2" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness2")
Loading theory "Draft.J1WellForm" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1")
Loading theory "Draft.Compiler1" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler" via "Draft.Correctness1")
### Ambiguous input (line 63 of "$AFP/JinjaDCI/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WT\<^sub>1" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" T)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WT\<^sub>1" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT\<^sub>1" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WT\<^sub>1" ("_position" P) ("_position" E)
###         ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" T)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WT\<^sub>1" ("_position" P) ("_position" E)
###             ("_position" e\<^sub>2) ("_position" T')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT\<^sub>1" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 67 of "$AFP/JinjaDCI/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" T)
###         ("_position" D)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WT\<^sub>1" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" T')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT\<^sub>1" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>TypeRel.sees_field" ("_position" P) ("_position" C)
###         ("_position" F) ("_position" Static) ("_position" T)
###         ("_position" D)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WT\<^sub>1" ("_position" P) ("_position" E)
###           ("_position" e\<^sub>2) ("_position" T')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WT\<^sub>1" ("_position" P) ("_position" E)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "WT\<^sub>1", "WTs\<^sub>1"
  Proving monotonicity ...
### Ambiguous input (line 22 of "$AFP/JinjaDCI/Compiler/Compiler1.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs)
###         ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###           ("_position" D))))
###     ("\<^const>Expr.exp.FAcc"
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e)))
###       ("_position" F) ("_position" D))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Expr.exp.FAcc"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs)
###           ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###             ("_position" D))))
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e))))
###     ("_position" F) ("_position" D)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 23 of "$AFP/JinjaDCI/Compiler/Compiler1.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs)
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))))
###     ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###       ("_position" D))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Expr.exp.SFAcc"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs)
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))))
###       ("_position" C))
###     ("_position" F) ("_position" D)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 24 of "$AFP/JinjaDCI/Compiler/Compiler1.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs)
###         ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("\<^const>Expr.exp.FAss"
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e\<^sub>1)))
###       ("_position" F) ("_position" D)
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs)
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("\<^const>Expr.exp.FAss"
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e\<^sub>1)))
###       ("_position" F) ("_position" D)
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs)
###         ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc"
###         ("_applC" ("_position" compE\<^sub>1)
###           ("_cargs" ("_position" Vs) ("_position" e\<^sub>1)))
###         ("_position" F) ("_position" D))
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs)
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc"
###         ("_applC" ("_position" compE\<^sub>1)
###           ("_cargs" ("_position" Vs) ("_position" e\<^sub>1)))
###         ("_position" F) ("_position" D))
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Expr.exp.LAss"
###     ("\<^const>Expr.exp.FAcc"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" compE\<^sub>1)
###           ("_cargs" ("_position" Vs)
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1)
###                 ("_position" F) ("_position" D))
###               ("_position" e\<^sub>2))))
###         ("_applC" ("_position" compE\<^sub>1)
###           ("_cargs" ("_position" Vs) ("_position" e\<^sub>1))))
###       ("_position" F) ("_position" D))
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Expr.exp.FAss"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs)
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1)
###               ("_position" F) ("_position" D))
###             ("_position" e\<^sub>2))))
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e\<^sub>1))))
###     ("_position" F) ("_position" D)
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Expr.exp.LAss"
###     ("\<^const>Expr.exp.FAcc"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" compE\<^sub>1)
###           ("_cargs" ("_position" Vs)
###             ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1)
###               ("_position" F) ("_position" D) ("_position" e\<^sub>2))))
###         ("_applC" ("_position" compE\<^sub>1)
###           ("_cargs" ("_position" Vs) ("_position" e\<^sub>1))))
###       ("_position" F) ("_position" D))
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Expr.exp.FAss"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs)
###           ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D) ("_position" e\<^sub>2))))
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e\<^sub>1))))
###     ("_position" F) ("_position" D)
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 27 of "$AFP/JinjaDCI/Compiler/Compiler2.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" compE\<^sub>2)
###       ("_updbind" ("_position" i) ("_position" e)))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compE\<^sub>2) ("_position" e))
###       ("_list"
###         ("_args" ("_applC" ("_position" Store) ("_position" i))
###           ("_applC" ("_position" Push) ("_position" Unit)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>2)
###       ("\<^const>Expr.exp.LAss" ("_position" i) ("_position" e)))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compE\<^sub>2) ("_position" e))
###       ("_list"
###         ("_args" ("_applC" ("_position" Store) ("_position" i))
###           ("_applC" ("_position" Push) ("_position" Unit)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 25 of "$AFP/JinjaDCI/Compiler/Compiler1.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs)
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###       ("_position" D)
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs)
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###       ("_position" D)
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs)
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs)
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs) ("_position" e\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Expr.exp.LAss"
###     ("\<^const>Expr.exp.SFAcc"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" compE\<^sub>1)
###           ("_cargs" ("_position" Vs)
###             ("\<^const>Expr.exp.LAss"
###               ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###                 ("_position" D))
###               ("_position" e\<^sub>2))))
###         ("_position" C))
###       ("_position" F) ("_position" D))
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Expr.exp.SFAss"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs)
###           ("\<^const>Expr.exp.LAss"
###             ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###               ("_position" D))
###             ("_position" e\<^sub>2))))
###       ("_position" C))
###     ("_position" F) ("_position" D)
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Expr.exp.LAss"
###     ("\<^const>Expr.exp.SFAcc"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" compE\<^sub>1)
###           ("_cargs" ("_position" Vs)
###             ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###               ("_position" D) ("_position" e\<^sub>2))))
###         ("_position" C))
###       ("_position" F) ("_position" D))
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Expr.exp.SFAss"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" compE\<^sub>1)
###         ("_cargs" ("_position" Vs)
###           ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###             ("_position" D) ("_position" e\<^sub>2))))
###       ("_position" C))
###     ("_position" F) ("_position" D)
###     ("_applC" ("_position" compE\<^sub>1)
###       ("_cargs" ("_position" Vs) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 30 of "$AFP/JinjaDCI/Compiler/Compiler2.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" compE\<^sub>2)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>1))
###       ("\<^const>List.append"
###         ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>2))
###         ("_list"
###           ("_args"
###             ("_applC" ("_position" Putfield)
###               ("_cargs" ("_position" F) ("_position" D)))
###             ("_applC" ("_position" Push) ("_position" Unit))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>2)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>1))
###       ("\<^const>List.append"
###         ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>2))
###         ("_list"
###           ("_args"
###             ("_applC" ("_position" Putfield)
###               ("_cargs" ("_position" F) ("_position" D)))
###             ("_applC" ("_position" Push) ("_position" Unit))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>2)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>1))
###       ("\<^const>List.append"
###         ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>2))
###         ("_list"
###           ("_args"
###             ("_applC" ("_position" Putfield)
###               ("_cargs" ("_position" F) ("_position" D)))
###             ("_applC" ("_position" Push) ("_position" Unit))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 32 of "$AFP/JinjaDCI/Compiler/Compiler2.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" compE\<^sub>2)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>2))
###       ("_list"
###         ("_args"
###           ("_applC" ("_position" Putstatic)
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" F) ("_position" D))))
###           ("_applC" ("_position" Push) ("_position" Unit)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>2)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>2))
###       ("_list"
###         ("_args"
###           ("_applC" ("_position" Putstatic)
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" F) ("_position" D))))
###           ("_applC" ("_position" Push) ("_position" Unit)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compE\<^sub>2)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compE\<^sub>2) ("_position" e\<^sub>2))
###       ("_list"
###         ("_args"
###           ("_applC" ("_position" Putstatic)
###             ("_cargs" ("_position" C)
###               ("_cargs" ("_position" F) ("_position" D))))
###           ("_applC" ("_position" Push) ("_position" Unit)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  compE\<^sub>1 :: "char list list => char list exp => nat exp"
  compEs\<^sub>1 :: "char list list => char list exp list => nat exp list"
consts
  compE\<^sub>2 :: "nat exp => bytecode"
  compEs\<^sub>2 :: "nat exp list => bytecode"
### Ignoring duplicate safe introduction (intro!)
### ?P,?E \<turnstile>\<^sub>1 [] [::] []
### Ignoring duplicate safe introduction (intro!)
### ?P,?E \<turnstile>\<^sub>1 [] [::] []
### No equation for constructor "new"
### No equation for constructor "Cast"
### No equation for constructor "BinOp"
### No equation for constructor "Var"
### No equation for constructor "LAss"
### No equation for constructor "FAcc"
### No equation for constructor "SFAcc"
### No equation for constructor "FAss"
### No equation for constructor "SFAss"
### No equation for constructor "Call"
### No equation for constructor "SCall"
### No equation for constructor "Block"
### No equation for constructor "Seq"
### No equation for constructor "Cond"
### No equation for constructor "While"
### No equation for constructor "TryCatch"
### No equation for constructor "INIT"
### No equation for constructor "RI"
consts
  fin\<^sub>1 :: "char list exp => nat exp"
### Ambiguous input (line 75 of "$AFP/JinjaDCI/Compiler/Compiler2.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compxE\<^sub>2)
###       ("_cargs"
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))
###         ("_cargs" ("_position" pc) ("_position" d))))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compxE\<^sub>2)
###         ("_cargs" ("_position" e\<^sub>1)
###           ("_cargs" ("_position" pc) ("_position" d))))
###       ("_applC" ("_position" compxE\<^sub>2)
###         ("_cargs" ("_position" e\<^sub>2)
###           ("_cargs"
###             ("\<^const>Groups.plus_class.plus" ("_position" pc)
###               ("_applC" ("_position" size)
###                 ("_applC" ("_position" compE\<^sub>2)
###                   ("_position" e\<^sub>1))))
###             ("\<^const>Groups.plus_class.plus" ("_position" d)
###               ("\<^const>Groups.one_class.one"))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compxE\<^sub>2)
###       ("_cargs"
###         ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))
###         ("_cargs" ("_position" pc) ("_position" d))))
###     ("\<^const>List.append"
###       ("_applC" ("_position" compxE\<^sub>2)
###         ("_cargs" ("_position" e\<^sub>1)
###           ("_cargs" ("_position" pc) ("_position" d))))
###       ("_applC" ("_position" compxE\<^sub>2)
###         ("_cargs" ("_position" e\<^sub>2)
###           ("_cargs"
###             ("\<^const>Groups.plus_class.plus" ("_position" pc)
###               ("_applC" ("_position" size)
###                 ("_applC" ("_position" compE\<^sub>2)
###                   ("_position" e\<^sub>1))))
###             ("\<^const>Groups.plus_class.plus" ("_position" d)
###               ("\<^const>Groups.one_class.one"))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 77 of "$AFP/JinjaDCI/Compiler/Compiler2.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compxE\<^sub>2)
###       ("_cargs"
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))
###         ("_cargs" ("_position" pc) ("_position" d))))
###     ("_applC" ("_position" compxE\<^sub>2)
###       ("_cargs" ("_position" e\<^sub>2)
###         ("_cargs" ("_position" pc) ("_position" d))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" compxE\<^sub>2)
###       ("_cargs"
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))
###         ("_cargs" ("_position" pc) ("_position" d))))
###     ("_applC" ("_position" compxE\<^sub>2)
###       ("_cargs" ("_position" e\<^sub>2)
###         ("_cargs" ("_position" pc) ("_position" d))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Compiler1"
### 0.479s elapsed time, 1.887s cpu time, 0.165s GC time
consts
  compxE\<^sub>2 :: "nat exp => nat => nat => ex_table"
  compxEs\<^sub>2 :: "nat exp list => nat => nat => ex_table"
### Ambiguous input (line 107 of "$AFP/JinjaDCI/Compiler/Compiler2.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" max_stack)
###       ("_updbind" ("_position" i) ("_position" e)))
###     ("_applC" ("_position" max_stack) ("_position" e))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" max_stack)
###       ("\<^const>Expr.exp.LAss" ("_position" i) ("_position" e)))
###     ("_applC" ("_position" max_stack) ("_position" e))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 110 of "$AFP/JinjaDCI/Compiler/Compiler2.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" max_stack)
###       ("_updbind"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" max)
###         ("_cargs" ("_applC" ("_position" max_stack) ("_position" e\<^sub>1))
###           ("_applC" ("_position" max_stack) ("_position" e\<^sub>2))))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" max_stack)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" max)
###         ("_cargs" ("_applC" ("_position" max_stack) ("_position" e\<^sub>1))
###           ("_applC" ("_position" max_stack) ("_position" e\<^sub>2))))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" max_stack)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" max)
###         ("_cargs" ("_applC" ("_position" max_stack) ("_position" e\<^sub>1))
###           ("_applC" ("_position" max_stack) ("_position" e\<^sub>2))))
###       ("\<^const>Groups.one_class.one"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 111 of "$AFP/JinjaDCI/Compiler/Compiler2.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" max_stack)
###       ("_updbind"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" max_stack) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" max_stack)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2)))
###     ("_applC" ("_position" max_stack) ("_position" e\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" max_stack)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2)))
###     ("_applC" ("_position" max_stack) ("_position" e\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### No equation for constructor "INIT"
### No equation for constructor "RI"
consts
  max_stack :: "nat exp => nat"
  max_stacks :: "nat exp list => nat"
### theory "Draft.Compiler2"
### 0.741s elapsed time, 2.931s cpu time, 0.235s GC time
### Ambiguous input (line 132 of "$AFP/JinjaDCI/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" T)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 133 of "$AFP/JinjaDCI/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###       ("_position" D) ("_position" e\<^sub>2))
###     ("_position" T)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P) ("_position" E)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_position" e\<^sub>2))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "case_sum size (size_list size) <*mlex*> {}"
### Ambiguous input (line 263 of "$AFP/JinjaDCI/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" sh) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" T)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" sh) ("_position" e\<^sub>2)
###             ("_position" T\<^sub>2)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P)
###               ("_position" T\<^sub>2) ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" sh) ("_position" e\<^sub>1)
###         ("_applC" ("_position" Class) ("_position" C))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" NonStatic) ("_position" T)
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###             ("_position" h) ("_position" sh) ("_position" e\<^sub>2)
###             ("_position" T\<^sub>2)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>TypeRel.widen" ("_position" P)
###               ("_position" T\<^sub>2) ("_position" T)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 267 of "$AFP/JinjaDCI/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" sh) ("_position" e\<^sub>1)
###         ("_position" NT)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" sh) ("_position" e\<^sub>2)
###           ("_position" T\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" sh) ("_position" e\<^sub>1)
###         ("_position" NT)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###           ("_position" h) ("_position" sh) ("_position" e\<^sub>2)
###           ("_position" T\<^sub>2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 271 of "$AFP/JinjaDCI/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" sh) ("_position" e\<^sub>2)
###         ("_position" T\<^sub>2)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" T)
###           ("_position" D)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T\<^sub>2)
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###         ("_position" D) ("_position" e\<^sub>2))
###       ("_position" Void))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###         ("_position" h) ("_position" sh) ("_position" e\<^sub>2)
###         ("_position" T\<^sub>2)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.has_field" ("_position" P) ("_position" C)
###           ("_position" F) ("_position" Static) ("_position" T)
###           ("_position" D)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T\<^sub>2)
###             ("_position" T))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>WTrt2\<^sub>1" ("_position" P) ("_position" E)
###       ("_position" h) ("_position" sh)
###       ("\<^const>Expr.exp.LAss"
###         ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###           ("_position" D))
###         ("_position" e\<^sub>2))
###       ("_position" Void))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 126 of "$AFP/JinjaDCI/J/EConform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" iconf)
###       ("_cargs" ("_position" sh)
###         ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("_applC" ("_position" iconf)
###             ("_cargs" ("_position" sh) ("_position" e\<^sub>2))))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" iconf)
###               ("_cargs" ("_position" sh) ("_position" e\<^sub>1)))
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" iconf)
###       ("_cargs" ("_position" sh)
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e\<^sub>1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("_applC" ("_position" iconf)
###             ("_cargs" ("_position" sh) ("_position" e\<^sub>2))))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" iconf)
###               ("_cargs" ("_position" sh) ("_position" e\<^sub>1)))
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" sub_RI) ("_position" e\<^sub>2)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 127 of "$AFP/JinjaDCI/J/EConform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" iconf)
###       ("_cargs" ("_position" sh)
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))))
###     ("_applC" ("_position" iconf)
###       ("_cargs" ("_position" sh) ("_position" e\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" iconf)
###       ("_cargs" ("_position" sh)
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))))
###     ("_applC" ("_position" iconf)
###       ("_cargs" ("_position" sh) ("_position" e\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "WTrt\<^sub>1", "WTrts\<^sub>1"
  Proving monotonicity ...
### Ignoring duplicate safe introduction (intro!)
### ?P,?E,?h,?sh \<turnstile>\<^sub>1 [] [:] []
### Ignoring duplicate safe introduction (intro!)
### ?P,?E,?h,?sh \<turnstile>\<^sub>1 [] [:] []
### Ambiguous input (line 363 of "$AFP/JinjaDCI/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1WellForm.WTrt2\<^sub>1" ("_position" P) ("_position" E)
###     ("_position" h) ("_position" sh)
###     ("\<^const>Expr.exp.FAss" ("_position" e) ("_position" F)
###       ("_position" D) ("_position" v))
###     ("_position" T)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1WellForm.WTrt2\<^sub>1" ("_position" P) ("_position" E)
###     ("_position" h) ("_position" sh)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###         ("_position" D))
###       ("_position" v))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 364 of "$AFP/JinjaDCI/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1WellForm.WTrt2\<^sub>1" ("_position" P) ("_position" E)
###     ("_position" h) ("_position" sh)
###     ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###       ("_position" D) ("_position" v))
###     ("_position" T)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>J1WellForm.WTrt2\<^sub>1" ("_position" P) ("_position" E)
###     ("_position" h) ("_position" sh)
###     ("\<^const>Expr.exp.LAss"
###       ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###         ("_position" D))
###       ("_position" v))
###     ("_position" T)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 414 of "$AFP/JinjaDCI/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<B>)
###       ("_cargs"
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))
###         ("_position" i)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" \<B>)
###         ("_cargs" ("_position" e\<^sub>1) ("_position" i)))
###       ("_applC" ("_position" \<B>)
###         ("_cargs" ("_position" e\<^sub>2) ("_position" i))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<B>)
###       ("_cargs"
###         ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))
###         ("_position" i)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" \<B>)
###         ("_cargs" ("_position" e\<^sub>1) ("_position" i)))
###       ("_applC" ("_position" \<B>)
###         ("_cargs" ("_position" e\<^sub>2) ("_position" i))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 415 of "$AFP/JinjaDCI/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<B>)
###       ("_cargs"
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))
###         ("_position" i)))
###     ("_applC" ("_position" \<B>)
###       ("_cargs" ("_position" e\<^sub>2) ("_position" i)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<B>)
###       ("_cargs"
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))
###         ("_position" i)))
###     ("_applC" ("_position" \<B>)
###       ("_cargs" ("_position" e\<^sub>2) ("_position" i)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  \<B> :: "nat exp => nat => bool"
  \<B>s :: "nat exp list => nat => bool"
### Ambiguous input (line 433 of "$AFP/JinjaDCI/Compiler/J1WellForm.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J\<^sub>1_mdecl)
###     ("_cargs" ("_position" P) ("_position" C)))
###   ("_lambda"
###     ("_pattern" ("_position" M)
###       ("_patterns" ("_position" b)
###         ("_patterns" ("_position" Ts)
###           ("_patterns" ("_position" T) ("_position" body)))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.Not"
###         ("_applC" ("_position" sub_RI) ("_position" body)))
###       ("_case_syntax" ("_position" b)
###         ("_case2"
###           ("_case1" ("_position" NonStatic)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.Ex_binder" ("_position" T')
###                 ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P)
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" Class) ("_position" C))
###                     ("_position" Ts))
###                   ("_position" body)
###                   ("\<^const>HOL.conj" ("_position" T')
###                     ("\<^const>TypeRel.widen" ("_position" P)
###                       ("_position" T') ("_position" T)))))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" \<D>)
###                   ("_cargs" ("_position" body)
###                     ("\<^const>Option.option.Some"
###                       ("\<^const>Set_Interval.ord_class.atMost"
###                         ("_applC" ("_position" size) ("_position" Ts))))))
###                 ("_applC" ("_position" \<B>)
###                   ("_cargs" ("_position" body)
###                     ("\<^const>Groups.plus_class.plus"
###                       ("_applC" ("_position" size) ("_position" Ts))
###                       ("\<^const>Groups.one_class.one")))))))
###           ("_case1" ("_position" Static)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.Ex_binder" ("_position" T')
###                 ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P)
###                   ("_position" Ts) ("_position" body)
###                   ("\<^const>HOL.conj" ("_position" T')
###                     ("\<^const>TypeRel.widen" ("_position" P)
###                       ("_position" T') ("_position" T)))))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" \<D>)
###                   ("_cargs" ("_position" body)
###                     ("\<^const>Option.option.Some"
###                       ("\<^const>Set_Interval.ord_class.lessThan"
###                         ("_applC" ("_position" size) ("_position" Ts))))))
###                 ("_applC" ("_position" \<B>)
###                   ("_cargs" ("_position" body)
###                     ("_applC" ("_position" size) ("_position" Ts))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J\<^sub>1_mdecl)
###     ("_cargs" ("_position" P) ("_position" C)))
###   ("_lambda"
###     ("_pattern" ("_position" M)
###       ("_patterns" ("_position" b)
###         ("_patterns" ("_position" Ts)
###           ("_patterns" ("_position" T) ("_position" body)))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.Not"
###         ("_applC" ("_position" sub_RI) ("_position" body)))
###       ("_case_syntax" ("_position" b)
###         ("_case2"
###           ("_case1" ("_position" NonStatic)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.Ex_binder" ("_position" T')
###                 ("\<^const>HOL.conj"
###                   ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P)
###                     ("\<^const>List.list.Cons"
###                       ("_applC" ("_position" Class) ("_position" C))
###                       ("_position" Ts))
###                     ("_position" body) ("_position" T'))
###                   ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                     ("_position" T))))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" \<D>)
###                   ("_cargs" ("_position" body)
###                     ("\<^const>Option.option.Some"
###                       ("\<^const>Set_Interval.ord_class.atMost"
###                         ("_applC" ("_position" size) ("_position" Ts))))))
###                 ("_applC" ("_position" \<B>)
###                   ("_cargs" ("_position" body)
###                     ("\<^const>Groups.plus_class.plus"
###                       ("_applC" ("_position" size) ("_position" Ts))
###                       ("\<^const>Groups.one_class.one")))))))
###           ("_case1" ("_position" Static)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.Ex_binder" ("_position" T')
###                 ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P)
###                   ("_position" Ts) ("_position" body)
###                   ("\<^const>HOL.conj" ("_position" T')
###                     ("\<^const>TypeRel.widen" ("_position" P)
###                       ("_position" T') ("_position" T)))))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" \<D>)
###                   ("_cargs" ("_position" body)
###                     ("\<^const>Option.option.Some"
###                       ("\<^const>Set_Interval.ord_class.lessThan"
###                         ("_applC" ("_position" size) ("_position" Ts))))))
###                 ("_applC" ("_position" \<B>)
###                   ("_cargs" ("_position" body)
###                     ("_applC" ("_position" size) ("_position" Ts))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J\<^sub>1_mdecl)
###     ("_cargs" ("_position" P) ("_position" C)))
###   ("_lambda"
###     ("_pattern" ("_position" M)
###       ("_patterns" ("_position" b)
###         ("_patterns" ("_position" Ts)
###           ("_patterns" ("_position" T) ("_position" body)))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.Not"
###         ("_applC" ("_position" sub_RI) ("_position" body)))
###       ("_case_syntax" ("_position" b)
###         ("_case2"
###           ("_case1" ("_position" NonStatic)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.Ex_binder" ("_position" T')
###                 ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P)
###                   ("\<^const>List.list.Cons"
###                     ("_applC" ("_position" Class) ("_position" C))
###                     ("_position" Ts))
###                   ("_position" body)
###                   ("\<^const>HOL.conj" ("_position" T')
###                     ("\<^const>TypeRel.widen" ("_position" P)
###                       ("_position" T') ("_position" T)))))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" \<D>)
###                   ("_cargs" ("_position" body)
###                     ("\<^const>Option.option.Some"
###                       ("\<^const>Set_Interval.ord_class.atMost"
###                         ("_applC" ("_position" size) ("_position" Ts))))))
###                 ("_applC" ("_position" \<B>)
###                   ("_cargs" ("_position" body)
###                     ("\<^const>Groups.plus_class.plus"
###                       ("_applC" ("_position" size) ("_position" Ts))
###                       ("\<^const>Groups.one_class.one")))))))
###           ("_case1" ("_position" Static)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.Ex_binder" ("_position" T')
###                 ("\<^const>HOL.conj"
###                   ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P)
###                     ("_position" Ts) ("_position" body) ("_position" T'))
###                   ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                     ("_position" T))))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" \<D>)
###                   ("_cargs" ("_position" body)
###                     ("\<^const>Option.option.Some"
###                       ("\<^const>Set_Interval.ord_class.lessThan"
###                         ("_applC" ("_position" size) ("_position" Ts))))))
###                 ("_applC" ("_position" \<B>)
###                   ("_cargs" ("_position" body)
###                     ("_applC" ("_position" size) ("_position" Ts))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J\<^sub>1_mdecl)
###     ("_cargs" ("_position" P) ("_position" C)))
###   ("_lambda"
###     ("_pattern" ("_position" M)
###       ("_patterns" ("_position" b)
###         ("_patterns" ("_position" Ts)
###           ("_patterns" ("_position" T) ("_position" body)))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.Not"
###         ("_applC" ("_position" sub_RI) ("_position" body)))
###       ("_case_syntax" ("_position" b)
###         ("_case2"
###           ("_case1" ("_position" NonStatic)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.Ex_binder" ("_position" T')
###                 ("\<^const>HOL.conj"
###                   ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P)
###                     ("\<^const>List.list.Cons"
###                       ("_applC" ("_position" Class) ("_position" C))
###                       ("_position" Ts))
###                     ("_position" body) ("_position" T'))
###                   ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                     ("_position" T))))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" \<D>)
###                   ("_cargs" ("_position" body)
###                     ("\<^const>Option.option.Some"
###                       ("\<^const>Set_Interval.ord_class.atMost"
###                         ("_applC" ("_position" size) ("_position" Ts))))))
###                 ("_applC" ("_position" \<B>)
###                   ("_cargs" ("_position" body)
###                     ("\<^const>Groups.plus_class.plus"
###                       ("_applC" ("_position" size) ("_position" Ts))
###                       ("\<^const>Groups.one_class.one")))))))
###           ("_case1" ("_position" Static)
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.Ex_binder" ("_position" T')
###                 ("\<^const>HOL.conj"
###                   ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P)
###                     ("_position" Ts) ("_position" body) ("_position" T'))
###                   ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###                     ("_position" T))))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" \<D>)
###                   ("_cargs" ("_position" body)
###                     ("\<^const>Option.option.Some"
###                       ("\<^const>Set_Interval.ord_class.lessThan"
###                         ("_applC" ("_position" size) ("_position" Ts))))))
###                 ("_applC" ("_position" \<B>)
###                   ("_cargs" ("_position" body)
###                     ("_applC" ("_position" size) ("_position" Ts))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 443 of "$AFP/JinjaDCI/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J\<^sub>1_mdecl)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" C)
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" NonStatic)
###             ("_tuple_args" ("_position" Ts)
###               ("_tuple_args" ("_position" T)
###                 ("_tuple_arg" ("_position" body)))))))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.Not" ("_applC" ("_position" sub_RI) ("_position" body)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.Ex_binder" ("_position" T')
###         ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P)
###           ("\<^const>List.list.Cons"
###             ("_applC" ("_position" Class) ("_position" C)) ("_position" Ts))
###           ("_position" body)
###           ("\<^const>HOL.conj" ("_position" T')
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" \<D>)
###           ("_cargs" ("_position" body)
###             ("\<^const>Option.option.Some"
###               ("\<^const>Set_Interval.ord_class.atMost"
###                 ("_applC" ("_position" size) ("_position" Ts))))))
###         ("_applC" ("_position" \<B>)
###           ("_cargs" ("_position" body)
###             ("\<^const>Groups.plus_class.plus"
###               ("_applC" ("_position" size) ("_position" Ts))
###               ("\<^const>Groups.one_class.one"))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J\<^sub>1_mdecl)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" C)
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" NonStatic)
###             ("_tuple_args" ("_position" Ts)
###               ("_tuple_args" ("_position" T)
###                 ("_tuple_arg" ("_position" body)))))))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.Not" ("_applC" ("_position" sub_RI) ("_position" body)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.Ex_binder" ("_position" T')
###         ("\<^const>HOL.conj"
###           ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P)
###             ("\<^const>List.list.Cons"
###               ("_applC" ("_position" Class) ("_position" C))
###               ("_position" Ts))
###             ("_position" body) ("_position" T'))
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" \<D>)
###           ("_cargs" ("_position" body)
###             ("\<^const>Option.option.Some"
###               ("\<^const>Set_Interval.ord_class.atMost"
###                 ("_applC" ("_position" size) ("_position" Ts))))))
###         ("_applC" ("_position" \<B>)
###           ("_cargs" ("_position" body)
###             ("\<^const>Groups.plus_class.plus"
###               ("_applC" ("_position" size) ("_position" Ts))
###               ("\<^const>Groups.one_class.one"))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 450 of "$AFP/JinjaDCI/Compiler/J1WellForm.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J\<^sub>1_mdecl)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" C)
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" Static)
###             ("_tuple_args" ("_position" Ts)
###               ("_tuple_args" ("_position" T)
###                 ("_tuple_arg" ("_position" body)))))))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.Not" ("_applC" ("_position" sub_RI) ("_position" body)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.Ex_binder" ("_position" T')
###         ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P) ("_position" Ts)
###           ("_position" body)
###           ("\<^const>HOL.conj" ("_position" T')
###             ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###               ("_position" T)))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" \<D>)
###           ("_cargs" ("_position" body)
###             ("\<^const>Option.option.Some"
###               ("\<^const>Set_Interval.ord_class.lessThan"
###                 ("_applC" ("_position" size) ("_position" Ts))))))
###         ("_applC" ("_position" \<B>)
###           ("_cargs" ("_position" body)
###             ("_applC" ("_position" size) ("_position" Ts))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf_J\<^sub>1_mdecl)
###     ("_cargs" ("_position" P)
###       ("_cargs" ("_position" C)
###         ("_tuple" ("_position" M)
###           ("_tuple_args" ("_position" Static)
###             ("_tuple_args" ("_position" Ts)
###               ("_tuple_args" ("_position" T)
###                 ("_tuple_arg" ("_position" body)))))))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.Not" ("_applC" ("_position" sub_RI) ("_position" body)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.Ex_binder" ("_position" T')
###         ("\<^const>HOL.conj"
###           ("\<^const>J1WellForm.WT\<^sub>1" ("_position" P) ("_position" Ts)
###             ("_position" body) ("_position" T'))
###           ("\<^const>TypeRel.widen" ("_position" P) ("_position" T')
###             ("_position" T))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" \<D>)
###           ("_cargs" ("_position" body)
###             ("\<^const>Option.option.Some"
###               ("\<^const>Set_Interval.ord_class.lessThan"
###                 ("_applC" ("_position" size) ("_position" Ts))))))
###         ("_applC" ("_position" \<B>)
###           ("_cargs" ("_position" body)
###             ("_applC" ("_position" size) ("_position" Ts))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.J1WellForm"
### 2.415s elapsed time, 7.251s cpu time, 0.642s GC time
Loading theory "Draft.Correctness1" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler")
Found termination order:
  "case_sum (%p. size (snd p)) (%p. size_list size (snd p)) <*mlex*> {}"
### Ambiguous input (line 26 of "$AFP/JinjaDCI/Compiler/Correctness1.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" unmod)
###       ("_cargs"
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.FAcc" ("_position" e\<^sub>1) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))
###         ("_position" i)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" unmod)
###         ("_cargs" ("_position" e\<^sub>1) ("_position" i)))
###       ("_applC" ("_position" unmod)
###         ("_cargs" ("_position" e\<^sub>2) ("_position" i))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" unmod)
###       ("_cargs"
###         ("\<^const>Expr.exp.FAss" ("_position" e\<^sub>1) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))
###         ("_position" i)))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" unmod)
###         ("_cargs" ("_position" e\<^sub>1) ("_position" i)))
###       ("_applC" ("_position" unmod)
###         ("_cargs" ("_position" e\<^sub>2) ("_position" i))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 27 of "$AFP/JinjaDCI/Compiler/Correctness1.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" unmod)
###       ("_cargs"
###         ("\<^const>Expr.exp.LAss"
###           ("\<^const>Expr.exp.SFAcc" ("_position" C) ("_position" F)
###             ("_position" D))
###           ("_position" e\<^sub>2))
###         ("_position" i)))
###     ("_applC" ("_position" unmod)
###       ("_cargs" ("_position" e\<^sub>2) ("_position" i)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" unmod)
###       ("_cargs"
###         ("\<^const>Expr.exp.SFAss" ("_position" C) ("_position" F)
###           ("_position" D) ("_position" e\<^sub>2))
###         ("_position" i)))
###     ("_applC" ("_position" unmod)
###       ("_cargs" ("_position" e\<^sub>2) ("_position" i)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 195 of "$AFP/JinjaDCI/J/EConform.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>bconfs" ("_position" P) ("_position" sh) ("_position" es)
###     ("_position" b))
###   ("\<^const>HOL.implies" ("_position" b)
###     ("\<^const>HOL.Ex_binder" ("_position" C)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" icheck)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C)
###               ("_applC" ("_position" the)
###                 ("_applC" ("_position" ss_exps) ("_position" es))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" curr_inits)
###               ("_cargs" ("_position" P) ("_position" es)))
###             ("_applC" ("_position" Some) ("_position" C)))
###           ("_applC" ("_position" initPD)
###             ("_cargs" ("_position" sh) ("_position" C))))))))
### ("\<^const>Pure.eq"
###   ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###     ("_position" es) ("_position" b))
###   ("\<^const>HOL.implies" ("_position" b)
###     ("\<^const>HOL.Ex_binder" ("_position" C)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" icheck)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" C)
###               ("_applC" ("_position" the)
###                 ("_applC" ("_position" ss_exps) ("_position" es))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" curr_inits)
###               ("_cargs" ("_position" P) ("_position" es)))
###             ("_applC" ("_position" Some) ("_position" C)))
###           ("_applC" ("_position" initPD)
###             ("_cargs" ("_position" sh) ("_position" C))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  unmod :: "nat exp => nat => bool"
  unmods :: "nat exp list => nat => bool"
### Ambiguous input (line 202 of "$AFP/JinjaDCI/J/EConform.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" True)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" val_of) ("_position" e))
###       ("_position" None))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" True)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" val_of) ("_position" e))
###       ("_position" None))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 206 of "$AFP/JinjaDCI/J/EConform.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" es) ("_position" True)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" map_vals_of) ("_position" es))
###       ("_position" None))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" es) ("_position" True)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" map_vals_of) ("_position" es))
###       ("_position" None))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 210 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" Cast)
###         ("_cargs" ("_position" C) ("_position" e)))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" Cast)
###         ("_cargs" ("_position" C) ("_position" e)))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" Cast)
###         ("_cargs" ("_position" C) ("_position" e)))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" Cast)
###         ("_cargs" ("_position" C) ("_position" e)))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 214 of "$AFP/JinjaDCI/J/EConform.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.BinOp" ("_position" e1) ("_position" bop)
###         ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.BinOp" ("_position" e1) ("_position" bop)
###         ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.BinOp" ("_position" e1) ("_position" bop)
###         ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.BinOp" ("_position" e1) ("_position" bop)
###         ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.BinOp" ("_position" e1) ("_position" bop)
###         ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.BinOp" ("_position" e1) ("_position" bop)
###         ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.BinOp" ("_position" e1) ("_position" bop)
###         ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.BinOp" ("_position" e1) ("_position" bop)
###         ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 67 of "$AFP/JinjaDCI/Compiler/Correctness1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" set) ("_position" xs))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less_eq"
###           ("_applC" ("_position" size) ("_position" xs))
###           ("_applC" ("_position" size) ("_position" ys))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Map.map_le" ("_position" m\<^sub>1)
###         ("_MapUpd" ("_position" m\<^sub>2)
###           ("_maplets" ("_position" xs) ("_position" ys)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Map.map_le"
###         ("_MapUpd" ("_position" m\<^sub>1)
###           ("_maplet" ("_position" x) ("_position" y)))
###         ("_MapUpd" ("_position" m\<^sub>2)
###           ("_maplets" ("_position" xs)
###             ("_applC" ("_position" ys)
###               ("_list"
###                 ("\<^const>Expr.exp.LAss"
###                   ("_applC" ("_position" last_index)
###                     ("_cargs" ("_position" xs) ("_position" x)))
###                   ("_position" y))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" x)
###         ("_applC" ("_position" set) ("_position" xs))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less_eq"
###           ("_applC" ("_position" size) ("_position" xs))
###           ("_applC" ("_position" size) ("_position" ys))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Map.map_le" ("_position" m\<^sub>1)
###         ("_MapUpd" ("_position" m\<^sub>2)
###           ("_maplets" ("_position" xs) ("_position" ys)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Map.map_le"
###         ("_MapUpd" ("_position" m\<^sub>1)
###           ("_maplet" ("_position" x) ("_position" y)))
###         ("_MapUpd" ("_position" m\<^sub>2)
###           ("_maplets" ("_position" xs)
###             ("_LUpdate" ("_position" ys)
###               ("_lupdbind"
###                 ("_applC" ("_position" last_index)
###                   ("_cargs" ("_position" xs) ("_position" x)))
###                 ("_position" y)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 219 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" LAss)
###         ("_cargs" ("_position" V) ("_position" e)))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" LAss)
###         ("_cargs" ("_position" V) ("_position" e)))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" LAss)
###         ("_cargs" ("_position" V) ("_position" e)))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" LAss)
###         ("_cargs" ("_position" V) ("_position" e)))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 78 of "$AFP/JinjaDCI/Compiler/Correctness1.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Map.map_le"
###     ("_applC" ("_position" l')
###       ("\<^const>Expr.exp.LAss" ("_position" V)
###         ("_applC" ("_position" l) ("_position" V))))
###     ("_Map" ("_maplets" ("_position" Vs) ("_position" ls')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Map.map_le"
###     ("_Update" ("_position" l')
###       ("_updbind" ("_position" V)
###         ("_applC" ("_position" l) ("_position" V))))
###     ("_Map" ("_maplets" ("_position" Vs) ("_position" ls')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 223 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###         ("_position" D))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###         ("_position" D))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###         ("_position" D))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###         ("_position" D))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 227 of "$AFP/JinjaDCI/J/EConform.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" FAss)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" D) ("_position" e2)))))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" FAss)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" D) ("_position" e2)))))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" FAss)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" D) ("_position" e2)))))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" FAss)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" D) ("_position" e2)))))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" FAss)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" D) ("_position" e2)))))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" FAss)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" D) ("_position" e2)))))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" FAss)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" D) ("_position" e2)))))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" FAss)
###         ("_cargs" ("_position" e1)
###           ("_cargs" ("_position" F)
###             ("_cargs" ("_position" D) ("_position" e2)))))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e1) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 232 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" val_of) ("_position" e2))
###       ("_position" None)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.iff"
###       ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###         ("_applC" ("_position" SFAss)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" F)
###               ("_cargs" ("_position" D) ("_position" e2)))))
###         ("_position" b))
###       ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###         ("_position" e2) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" val_of) ("_position" e2))
###       ("_position" None)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.iff"
###       ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###         ("_applC" ("_position" SFAss)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" F)
###               ("_cargs" ("_position" D) ("_position" e2)))))
###         ("_position" b))
###       ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###         ("_position" e2) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" val_of) ("_position" e2))
###       ("_position" None)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.iff"
###       ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###         ("_applC" ("_position" SFAss)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" F)
###               ("_cargs" ("_position" D) ("_position" e2)))))
###         ("_position" b))
###       ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###         ("_position" e2) ("_position" b)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" val_of) ("_position" e2))
###       ("_position" None)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.iff"
###       ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###         ("_applC" ("_position" SFAss)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" F)
###               ("_cargs" ("_position" D) ("_position" e2)))))
###         ("_position" b))
###       ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###         ("_position" e2) ("_position" b)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 236 of "$AFP/JinjaDCI/J/EConform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" map)
###         ("_cargs" ("_position" Val) ("_position" vs)))
###       ("_position" b))
###     ("\<^const>HOL.Not" ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" map)
###         ("_cargs" ("_position" Val) ("_position" vs)))
###       ("_position" b))
###     ("\<^const>HOL.Not" ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 240 of "$AFP/JinjaDCI/J/EConform.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Call" ("_position" e) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Call" ("_position" e) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Call" ("_position" e) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Call" ("_position" e) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Call" ("_position" e) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Call" ("_position" e) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Call" ("_position" e) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Call" ("_position" e) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 258 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.SCall" ("_position" C) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" es) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.SCall" ("_position" C) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" es) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.SCall" ("_position" C) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" es) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.SCall" ("_position" C) ("_position" M)
###         ("_position" es))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" es) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 273 of "$AFP/JinjaDCI/J/EConform.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>List.list.Cons" ("_position" e) ("_position" es))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" es) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e) ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 289 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss" ("_position" V)
###             ("_applC" ("_position" Val) ("_position" v)))
###           ("_position" e\<^sub>2)))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e\<^sub>2) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss" ("_position" V)
###             ("_applC" ("_position" Val) ("_position" v)))
###           ("_position" e\<^sub>2)))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e\<^sub>2) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss" ("_position" V)
###             ("_applC" ("_position" Val) ("_position" v)))
###           ("_position" e\<^sub>2)))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e\<^sub>2) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("\<^const>Expr.exp.Seq"
###           ("\<^const>Expr.exp.LAss" ("_position" V)
###             ("_applC" ("_position" Val) ("_position" v)))
###           ("_position" e\<^sub>2)))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e\<^sub>2) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 293 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Block" ("_position" V) ("_position" T)
###         ("_position" e))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 297 of "$AFP/JinjaDCI/J/EConform.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e1) ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_case_syntax"
###             ("_applC" ("_position" lass_val_of) ("_position" e1))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" p))
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e2) ("_position" b)))
###               ("_case1" ("_position" None)
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e1) ("_position" b))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e1) ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_case_syntax"
###             ("_applC" ("_position" lass_val_of) ("_position" e1))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" p))
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e2) ("_position" b)))
###               ("_case1" ("_position" None)
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e1) ("_position" b))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e1) ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_case_syntax"
###             ("_applC" ("_position" lass_val_of) ("_position" e1))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" p))
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e2) ("_position" b)))
###               ("_case1" ("_position" None)
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e1) ("_position" b))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e1) ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_case_syntax"
###             ("_applC" ("_position" lass_val_of) ("_position" e1))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" p))
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e2) ("_position" b)))
###               ("_case1" ("_position" None)
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e1) ("_position" b))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e1) ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_case_syntax"
###             ("_applC" ("_position" lass_val_of) ("_position" e1))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" p))
###                 ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###                   ("_position" e2) ("_position" b)))
###               ("_case1" ("_position" None)
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e1) ("_position" b))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e1) ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_case_syntax"
###             ("_applC" ("_position" lass_val_of) ("_position" e1))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" p))
###                 ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###                   ("_position" e2) ("_position" b)))
###               ("_case1" ("_position" None)
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e1) ("_position" b))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e1) ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_case_syntax"
###             ("_applC" ("_position" lass_val_of) ("_position" e1))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" p))
###                 ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###                   ("_position" e2) ("_position" b)))
###               ("_case1" ("_position" None)
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e1) ("_position" b))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e1) ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_case_syntax"
###             ("_applC" ("_position" lass_val_of) ("_position" e1))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" p))
###                 ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###                   ("_position" e2) ("_position" b)))
###               ("_case1" ("_position" None)
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e1) ("_position" b))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e1) ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_case_syntax"
###             ("_applC" ("_position" lass_val_of) ("_position" e1))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" p))
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e2) ("_position" b)))
###               ("_case1" ("_position" None)
###                 ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###                   ("_position" e1) ("_position" b))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Seq" ("_position" e1) ("_position" e2))
###       ("_position" b))
###     ("_case_syntax" ("_applC" ("_position" val_of) ("_position" e1))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###             ("_position" e2) ("_position" b)))
###         ("_case1" ("\<^const>Pure.dummy_pattern")
###           ("_case_syntax"
###             ("_applC" ("_position" lass_val_of) ("_position" e1))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" p))
###                 ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###                   ("_position" e2) ("_position" b)))
###               ("_case1" ("_position" None)
###                 ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###                   ("_position" e1) ("_position" b))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 304 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Cond" ("_position" b) ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" b'))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" b) ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Cond" ("_position" b) ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" b'))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" b) ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Cond" ("_position" b) ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" b'))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" b) ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.Cond" ("_position" b) ("_position" e\<^sub>1)
###         ("_position" e\<^sub>2))
###       ("_position" b'))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" b) ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 314 of "$AFP/JinjaDCI/J/EConform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.While" ("_position" b) ("_position" e))
###       ("_position" b'))
###     ("\<^const>HOL.Not" ("_position" b'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.While" ("_position" b) ("_position" e))
###       ("_position" b'))
###     ("\<^const>HOL.Not" ("_position" b'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 318 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" throw) ("_position" e)) ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" throw) ("_position" e)) ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" throw) ("_position" e)) ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_applC" ("_position" throw) ("_position" e)) ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 322 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e\<^sub>1) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e\<^sub>1) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e\<^sub>1) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.TryCatch" ("_position" e\<^sub>1) ("_position" C)
###         ("_position" V) ("_position" e\<^sub>2))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e\<^sub>1) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 326 of "$AFP/JinjaDCI/J/EConform.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.INIT" ("_position" C) ("_position" Cs)
###         ("_position" b') ("_position" e))
###       ("_position" b))
###     ("\<^const>HOL.Not" ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.INIT" ("_position" C) ("_position" Cs)
###         ("_position" b') ("_position" e))
###       ("_position" b))
###     ("\<^const>HOL.Not" ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 330 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.RI" ("_position" C) ("_position" e)
###         ("_position" Cs) ("_position" e'))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.RI" ("_position" C) ("_position" e)
###         ("_position" Cs) ("_position" e'))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.RI" ("_position" C) ("_position" e)
###         ("_position" Cs) ("_position" e'))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>Expr.exp.RI" ("_position" C) ("_position" e)
###         ("_position" Cs) ("_position" e'))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 334 of "$AFP/JinjaDCI/J/EConform.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>List.append"
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" Val) ("_position" vs)))
###         ("\<^const>List.list.Cons"
###           ("_applC" ("_position" throw) ("_position" e)) ("_position" es')))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>List.append"
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" Val) ("_position" vs)))
###         ("\<^const>List.list.Cons"
###           ("_applC" ("_position" throw) ("_position" e)) ("_position" es')))
###       ("_position" b))
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconfs" ("_position" P) ("_position" sh)
###       ("\<^const>List.append"
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" Val) ("_position" vs)))
###         ("\<^const>List.list.Cons"
###           ("_applC" ("_position" throw) ("_position" e)) ("_position" es')))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("\<^const>List.append"
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" Val) ("_position" vs)))
###         ("\<^const>List.list.Cons"
###           ("_applC" ("_position" throw) ("_position" e)) ("_position" es')))
###       ("_position" b))
###     ("\<^const>EConform.bconf" ("_position" P) ("_position" sh)
###       ("_position" e) ("_position" b))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Correctness1"
### 0.385s elapsed time, 0.832s cpu time, 0.107s GC time
### theory "Draft.EConform"
### 5.147s elapsed time, 16.003s cpu time, 1.327s GC time
Loading theory "Draft.Correctness2" (required by "Draft.CompilerMoreTemplates" via "Draft.Compiler")
### Ambiguous input (line 208 of "$AFP/JinjaDCI/Compiler/Correctness2.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^fixed>dummyx" ("_position" P) ("_position" C) ("_position" M)
###       ("_position" xt) ("_position" I) ("_position" d))
###     ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###       ("_position" M) ("_position" xt) ("_position" I) ("_position" d))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>dummyx" ("_position" P) ("_position" C) ("_position" M)
###     ("\<^const>Correctness2.before"
###       ("\<^const>Fields.inverse_class.inverse_divide" ("_position" xt)
###         ("_position" I))
###       ("\<^const>HOL.iff" ("_position" d) ("_position" P)) ("_position" C)
###       ("_position" M) ("_position" xt))
###     ("_position" I) ("_position" d)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>dummyx" ("_position" P) ("_position" C) ("_position" M)
###     ("_position" xt)
###     ("\<^const>Correctness2.before" ("_position" I)
###       ("\<^const>HOL.iff" ("_position" d) ("_position" P)) ("_position" C)
###       ("_position" M)
###       ("\<^const>Fields.inverse_class.inverse_divide" ("_position" xt)
###         ("_position" I)))
###     ("_position" d)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 232 of "$AFP/JinjaDCI/Compiler/Correctness2.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###       ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>List.append" ("_position" xt\<^sub>1)
###           ("_position" xt\<^sub>2))
###         ("_position" I) ("_position" d))
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M) ("_position" xt\<^sub>1)
###         ("\<^const>Correctness2.at"
###           ("\<^const>Groups.minus_class.minus" ("_position" I)
###             ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###           ("\<^const>HOL.conj" ("_position" d)
###             ("\<^const>HOL.conj"
###               ("\<^const>Correctness2.beforex" ("_position" P)
###                 ("_position" C) ("_position" M) ("_position" xt\<^sub>2)
###                 ("\<^const>Groups.minus_class.minus" ("_position" I)
###                   ("_applC" ("_position" pcs) ("_position" xt\<^sub>1)))
###                 ("_position" d))
###               ("_position" P)))
###           ("_position" C) ("_position" M)
###           ("\<^const>List.append" ("_position" xt\<^sub>1)
###             ("\<^const>Fields.inverse_class.inverse_divide"
###               ("_position" xt\<^sub>2) ("_position" I))))
###         ("_position" d)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###       ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>List.append" ("_position" xt\<^sub>1)
###           ("_position" xt\<^sub>2))
###         ("_position" I) ("_position" d))
###       ("\<^const>HOL.conj"
###         ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" xt\<^sub>1)
###           ("\<^const>Groups.minus_class.minus" ("_position" I)
###             ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###           ("_position" d))
###         ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" xt\<^sub>2)
###           ("\<^const>Correctness2.at"
###             ("\<^const>Groups.minus_class.minus" ("_position" I)
###               ("_applC" ("_position" pcs) ("_position" xt\<^sub>1)))
###             ("\<^const>HOL.conj" ("_position" d) ("_position" P))
###             ("_position" C) ("_position" M)
###             ("\<^const>List.append" ("_position" xt\<^sub>1)
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_position" xt\<^sub>2) ("_position" I))))
###           ("_position" d))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###       ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>List.append" ("_position" xt\<^sub>1)
###           ("_position" xt\<^sub>2))
###         ("_position" I) ("_position" d))
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>Correctness2.before"
###           ("\<^const>Groups.minus_class.minus"
###             ("\<^const>Fields.inverse_class.inverse_divide"
###               ("_position" xt\<^sub>1) ("_position" I))
###             ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###           ("\<^const>HOL.conj" ("_position" d) ("_position" P))
###           ("_position" C) ("_position" M) ("_position" xt\<^sub>2))
###         ("\<^const>Correctness2.at"
###           ("\<^const>Groups.minus_class.minus" ("_position" I)
###             ("_applC" ("_position" pcs) ("_position" xt\<^sub>1)))
###           ("\<^const>HOL.conj" ("_position" d) ("_position" P))
###           ("_position" C) ("_position" M)
###           ("\<^const>List.append" ("_position" xt\<^sub>1)
###             ("\<^const>Fields.inverse_class.inverse_divide"
###               ("_position" xt\<^sub>2) ("_position" I))))
###         ("_position" d)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###       ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>List.append" ("_position" xt\<^sub>1)
###           ("_position" xt\<^sub>2))
###         ("_position" I) ("_position" d))
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>Correctness2.at"
###           ("\<^const>Groups.minus_class.minus"
###             ("\<^const>Fields.inverse_class.inverse_divide"
###               ("_position" xt\<^sub>1) ("_position" I))
###             ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###           ("\<^const>HOL.conj" ("_position" d)
###             ("\<^const>HOL.conj"
###               ("\<^const>Correctness2.beforex" ("_position" P)
###                 ("_position" C) ("_position" M) ("_position" xt\<^sub>2)
###                 ("\<^const>Groups.minus_class.minus" ("_position" I)
###                   ("_applC" ("_position" pcs) ("_position" xt\<^sub>1)))
###                 ("_position" d))
###               ("_position" P)))
###           ("_position" C) ("_position" M)
###           ("\<^const>List.append" ("_position" xt\<^sub>1)
###             ("_position" xt\<^sub>2)))
###         ("_position" I) ("_position" d)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###       ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>List.append" ("_position" xt\<^sub>1)
###           ("_position" xt\<^sub>2))
###         ("_position" I) ("_position" d))
###       ("\<^const>HOL.conj"
###         ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" xt\<^sub>1)
###           ("\<^const>Correctness2.before"
###             ("\<^const>Groups.minus_class.minus" ("_position" I)
###               ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###             ("\<^const>HOL.conj" ("_position" d) ("_position" P))
###             ("_position" C) ("_position" M)
###             ("\<^const>Groups.minus_class.minus"
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_position" xt\<^sub>2) ("_position" I))
###               ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))))
###           ("_position" d))
###         ("\<^const>Correctness2.dummyx" ("_position" P) ("_position" C)
###           ("_position" M)
###           ("\<^const>List.append" ("_position" xt\<^sub>1)
###             ("_position" xt\<^sub>2))
###           ("_position" I) ("_position" d))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###       ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>List.append" ("_position" xt\<^sub>1)
###           ("_position" xt\<^sub>2))
###         ("_position" I) ("_position" d))
###       ("\<^const>HOL.conj"
###         ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" xt\<^sub>1)
###           ("\<^const>Groups.minus_class.minus" ("_position" I)
###             ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###           ("_position" d))
###         ("\<^const>HOL.conj"
###           ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###             ("_position" M) ("_position" xt\<^sub>2)
###             ("\<^const>Groups.minus_class.minus" ("_position" I)
###               ("_applC" ("_position" pcs) ("_position" xt\<^sub>1)))
###             ("_position" d))
###           ("\<^const>Correctness2.dummyx" ("_position" P) ("_position" C)
###             ("_position" M)
###             ("\<^const>List.append" ("_position" xt\<^sub>1)
###               ("_position" xt\<^sub>2))
###             ("_position" I) ("_position" d)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###       ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>List.append" ("_position" xt\<^sub>1)
###           ("_position" xt\<^sub>2))
###         ("_position" I) ("_position" d))
###       ("\<^const>HOL.conj"
###         ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###           ("_position" M)
###           ("\<^const>Correctness2.before"
###             ("\<^const>Groups.minus_class.minus"
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_position" xt\<^sub>1) ("_position" I))
###               ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###             ("\<^const>HOL.conj" ("_position" d) ("_position" P))
###             ("_position" C) ("_position" M) ("_position" xt\<^sub>2))
###           ("\<^const>Groups.minus_class.minus" ("_position" I)
###             ("_applC" ("_position" pcs) ("_position" xt\<^sub>1)))
###           ("_position" d))
###         ("\<^const>Correctness2.dummyx" ("_position" P) ("_position" C)
###           ("_position" M)
###           ("\<^const>List.append" ("_position" xt\<^sub>1)
###             ("_position" xt\<^sub>2))
###           ("_position" I) ("_position" d))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Set.inter"
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>1))
###         ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###       ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###         ("_position" M)
###         ("\<^const>List.append" ("_position" xt\<^sub>1)
###           ("_position" xt\<^sub>2))
###         ("_position" I) ("_position" d))
###       ("\<^const>HOL.conj"
###         ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" xt\<^sub>1)
###           ("\<^const>Groups.minus_class.minus" ("_position" I)
###             ("_applC" ("_position" pcs) ("_position" xt\<^sub>2)))
###           ("_position" d))
###         ("\<^const>Correctness2.beforex" ("_position" P) ("_position" C)
###           ("_position" M)
###           ("\<^const>Correctness2.at"
###             ("\<^const>Groups.minus_class.minus"
###               ("\<^const>Fields.inverse_class.inverse_divide"
###                 ("_position" xt\<^sub>2) ("_position" I))
###               ("_applC" ("_position" pcs) ("_position" xt\<^sub>1)))
###             ("\<^const>HOL.conj" ("_position" d) ("_position" P))
###             ("_position" C) ("_position" M)
###             ("\<^const>List.append" ("_position" xt\<^sub>1)
###               ("_position" xt\<^sub>2)))
###           ("_position" I) ("_position" d))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 562 of "$AFP/JinjaDCI/Compiler/Correctness2.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Jcc_pieces)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" E)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" M)
###               ("_cargs" ("_position" h\<^sub>0)
###                 ("_cargs" ("_position" vs)
###                   ("_cargs" ("_position" ls\<^sub>0)
###                     ("_cargs" ("_position" pc)
###                       ("_cargs" ("_position" ics)
###                         ("_cargs" ("_position" frs)
###                           ("_cargs" ("_position" sh\<^sub>0)
###                             ("_cargs" ("_position" I)
###                               ("_cargs" ("_position" h\<^sub>2)
###                                 ("_cargs" ("_position" ls\<^sub>2)
###                                   ("_cargs" ("_position" sh\<^sub>2)
###                                     ("_cargs" ("_position" v)
### ("_cargs" ("_position" xa)
###   ("\<^const>Expr.exp.FAss" ("_position" e) ("_position" F) ("_position" D)
###     ("_position" e'))))))))))))))))))))
###     ("_tuple" ("_position" True)
###       ("_tuple_args" ("_position" frs\<^sub>0)
###         ("_tuple_args"
###           ("_tuple" ("_position" xp')
###             ("_tuple_args" ("_position" h')
###               ("_tuple_args"
###                 ("\<^const>List.list.Cons"
###                   ("_tuple"
###                     ("\<^const>List.list.Cons" ("_position" v)
###                       ("_position" vs'))
###                     ("_tuple_args" ("_position" ls')
###                       ("_tuple_args" ("_position" C\<^sub>0)
###                         ("_tuple_args" ("_position" M')
###                           ("_tuple_args" ("_position" pc')
###                             ("_tuple_arg" ("_position" ics')))))))
###                   ("_position" frs'))
###                 ("_tuple_arg" ("_position" sh')))))
###           ("_tuple_arg" ("_position" err)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Jcc_pieces)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" E)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" M)
###               ("_cargs" ("_position" h\<^sub>0)
###                 ("_cargs" ("_position" vs)
###                   ("_cargs" ("_position" ls\<^sub>0)
###                     ("_cargs" ("_position" pc)
###                       ("_cargs" ("_position" ics)
###                         ("_cargs" ("_position" frs)
###                           ("_cargs" ("_position" sh\<^sub>0)
###                             ("_cargs" ("_position" I)
###                               ("_cargs" ("_position" h\<^sub>2)
###                                 ("_cargs" ("_position" ls\<^sub>2)
###                                   ("_cargs" ("_position" sh\<^sub>2)
###                                     ("_cargs" ("_position" v)
### ("_cargs" ("_position" xa)
###   ("\<^const>Expr.exp.LAss"
###     ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###       ("_position" D))
###     ("_position" e'))))))))))))))))))))
###     ("_tuple" ("_position" True)
###       ("_tuple_args" ("_position" frs\<^sub>0)
###         ("_tuple_args"
###           ("_tuple" ("_position" xp')
###             ("_tuple_args" ("_position" h')
###               ("_tuple_args"
###                 ("\<^const>List.list.Cons"
###                   ("_tuple"
###                     ("\<^const>List.list.Cons" ("_position" v)
###                       ("_position" vs'))
###                     ("_tuple_args" ("_position" ls')
###                       ("_tuple_args" ("_position" C\<^sub>0)
###                         ("_tuple_args" ("_position" M')
###                           ("_tuple_args" ("_position" pc')
###                             ("_tuple_arg" ("_position" ics')))))))
###                   ("_position" frs'))
###                 ("_tuple_arg" ("_position" sh')))))
###           ("_tuple_arg" ("_position" err)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 573 of "$AFP/JinjaDCI/Compiler/Correctness2.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Jcc_pieces)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" E)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" M)
###               ("_cargs" ("_position" h\<^sub>0)
###                 ("_cargs" ("_position" vs)
###                   ("_cargs" ("_position" ls\<^sub>0)
###                     ("_cargs" ("_position" pc)
###                       ("_cargs" ("_position" ics)
###                         ("_cargs" ("_position" frs)
###                           ("_cargs" ("_position" sh\<^sub>0)
###                             ("_cargs" ("_position" I)
###                               ("_cargs" ("_position" h\<^sub>2)
###                                 ("_cargs" ("_position" ls\<^sub>2)
###                                   ("_cargs" ("_position" sh\<^sub>2)
###                                     ("_cargs" ("_position" v)
### ("_cargs" ("_position" xa)
###   ("\<^const>Expr.exp.FAss" ("_position" e) ("_position" F) ("_position" D)
###     ("_position" e'))))))))))))))))))))
###     ("_tuple" ("_position" True)
###       ("_tuple_args" ("_position" frs\<^sub>0)
###         ("_tuple_args"
###           ("_tuple" ("_position" xp')
###             ("_tuple_args" ("_position" h')
###               ("_tuple_args"
###                 ("\<^const>List.list.Cons"
###                   ("_tuple"
###                     ("\<^const>List.list.Cons" ("_position" v)
###                       ("_position" vs'))
###                     ("_tuple_args" ("_position" ls')
###                       ("_tuple_args" ("_position" C\<^sub>0)
###                         ("_tuple_args" ("_position" M')
###                           ("_tuple_args" ("_position" pc')
###                             ("_tuple_arg" ("_position" ics')))))))
###                   ("_position" frs'))
###                 ("_tuple_arg" ("_position" sh')))))
###           ("_tuple_arg" ("_position" err)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Jcc_pieces)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" E)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" M)
###               ("_cargs" ("_position" h\<^sub>0)
###                 ("_cargs" ("_position" vs)
###                   ("_cargs" ("_position" ls\<^sub>0)
###                     ("_cargs" ("_position" pc)
###                       ("_cargs" ("_position" ics)
###                         ("_cargs" ("_position" frs)
###                           ("_cargs" ("_position" sh\<^sub>0)
###                             ("_cargs" ("_position" I)
###                               ("_cargs" ("_position" h\<^sub>2)
###                                 ("_cargs" ("_position" ls\<^sub>2)
###                                   ("_cargs" ("_position" sh\<^sub>2)
###                                     ("_cargs" ("_position" v)
### ("_cargs" ("_position" xa)
###   ("\<^const>Expr.exp.LAss"
###     ("\<^const>Expr.exp.FAcc" ("_position" e) ("_position" F)
###       ("_position" D))
###     ("_position" e'))))))))))))))))))))
###     ("_tuple" ("_position" True)
###       ("_tuple_args" ("_position" frs\<^sub>0)
###         ("_tuple_args"
###           ("_tuple" ("_position" xp')
###             ("_tuple_args" ("_position" h')
###               ("_tuple_args"
###                 ("\<^const>List.list.Cons"
###                   ("_tuple"
###                     ("\<^const>List.list.Cons" ("_position" v)
###                       ("_position" vs'))
###                     ("_tuple_args" ("_position" ls')
###                       ("_tuple_args" ("_position" C\<^sub>0)
###                         ("_tuple_args" ("_position" M')
###                           ("_tuple_args" ("_position" pc')
###                             ("_tuple_arg" ("_position" ics')))))))
###                   ("_position" frs'))
###                 ("_tuple_arg" ("_position" sh')))))
###           ("_tuple_arg" ("_position" err)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 589 of "$AFP/JinjaDCI/Compiler/Correctness2.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Jcc_pieces)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" E)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" M)
###               ("_cargs" ("_position" h\<^sub>0)
###                 ("_cargs" ("_position" vs)
###                   ("_cargs" ("_position" ls\<^sub>0)
###                     ("_cargs" ("_position" pc)
###                       ("_cargs" ("_position" ics)
###                         ("_cargs" ("_position" frs)
###                           ("_cargs" ("_position" sh\<^sub>0)
###                             ("_cargs" ("_position" I)
###                               ("_cargs" ("_position" h')
###                                 ("_cargs" ("_position" ls')
###                                   ("_cargs" ("_position" sh')
###                                     ("_cargs" ("_position" v)
### ("_cargs" ("_position" xa)
###   ("\<^const>Expr.exp.SFAss" ("_position" C') ("_position" F)
###     ("_position" D) ("_position" e))))))))))))))))))))
###     ("_tuple" ("_position" True)
###       ("_tuple_args" ("_position" frs\<^sub>0)
###         ("_tuple_args"
###           ("_tuple" ("_position" xp')
###             ("_tuple_args" ("_position" h')
###               ("_tuple_args"
###                 ("\<^const>List.list.Cons"
###                   ("_tuple"
###                     ("\<^const>List.list.Cons" ("_position" v)
###                       ("_position" vs'))
###                     ("_tuple_args" ("_position" ls')
###                       ("_tuple_args" ("_position" C\<^sub>0)
###                         ("_tuple_args" ("_position" M')
###                           ("_tuple_args" ("_position" pc')
###                             ("_tuple_arg" ("_position" ics')))))))
###                   ("_position" frs'))
###                 ("_tuple_arg" ("_position" sh')))))
###           ("_tuple_arg" ("_position" err)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Jcc_pieces)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" E)
###           ("_cargs" ("_position" C)
###             ("_cargs" ("_position" M)
###               ("_cargs" ("_position" h\<^sub>0)
###                 ("_cargs" ("_position" vs)
###                   ("_cargs" ("_position" ls\<^sub>0)
###                     ("_cargs" ("_position" pc)
###                       ("_cargs" ("_position" ics)
###                         ("_cargs" ("_position" frs)
###                           ("_cargs" ("_position" sh\<^sub>0)
###                             ("_cargs" ("_position" I)
###                               ("_cargs" ("_position" h')
###                                 ("_cargs" ("_position" ls')
###                                   ("_cargs" ("_position" sh')
###                                     ("_cargs" ("_position" v)
### ("_cargs" ("_position" xa)
###   ("\<^const>Expr.exp.LAss"
###     ("\<^const>Expr.exp.SFAcc" ("_position" C') ("_position" F)
###       ("_position" D))
###     ("_position" e))))))))))))))))))))
###     ("_tuple" ("_position" True)
###       ("_tuple_args" ("_position" frs\<^sub>0)
###         ("_tuple_args"
###           ("_tuple" ("_position" xp')
###             ("_tuple_args" ("_position" h')
###               ("_tuple_args"
###                 ("\<^const>List.list.Cons"
###                   ("_tuple"
###                     ("\<^const>List.list.Cons" ("_position" v)
###                       ("_position" vs'))
###                     ("_tuple_args" ("_position" ls')
###                       ("_tuple_args" ("_position" C\<^sub>0)
###                         ("_tuple_args" ("_position" M')
###                           ("_tuple_args" ("_position" pc')
###                             ("_tuple_arg" ("_position" ics')))))))
###                   ("_position" frs'))
###                 ("_tuple_arg" ("_position" sh')))))
###           ("_tuple_arg" ("_position" err)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 996 of "$AFP/JinjaDCI/Compiler/Correctness2.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>JVMExec.exec_all" ("_position" P)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" vs)
###               ("_tuple_args" ("_position" l)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg"
###                         ("_applC" ("_position" Throwing)
###                           ("_cargs" ("_list" ("_position" C'))
###                             ("_position" xa)))))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))
###     ("_applC" ("_position" handle)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" M)
###             ("_cargs" ("_position" xa)
###               ("_cargs" ("_position" h)
###                 ("_cargs" ("_position" vs)
###                   ("_cargs" ("_position" l)
###                     ("_cargs" ("_position" pc)
###                       ("_cargs" ("_position" No_ics)
###                         ("_cargs" ("_position" frs)
###                           ("_Update" ("_position" sh)
###                             ("_updbind" ("_position" C')
###                               ("_applC" ("_position" Some)
###                                 ("_tuple"
###                                   ("_applC" ("_position" fst)
###                                     ("_applC" ("_position" the)
### ("_applC" ("_position" sh) ("_position" C'))))
###                                   ("_tuple_arg"
###                                     ("_position" Error)))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>JVMExec.exec_all" ("_position" P)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_args"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" vs)
###               ("_tuple_args" ("_position" l)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_args" ("_position" pc)
###                       ("_tuple_arg"
###                         ("_applC" ("_position" Throwing)
###                           ("_cargs" ("_list" ("_position" C'))
###                             ("_position" xa)))))))))
###             ("_position" frs))
###           ("_tuple_arg" ("_position" sh)))))
###     ("_applC" ("_position" handle)
###       ("_cargs" ("_position" P)
###         ("_cargs" ("_position" C)
###           ("_cargs" ("_position" M)
###             ("_cargs" ("_position" xa)
###               ("_cargs" ("_position" h)
###                 ("_cargs" ("_position" vs)
###                   ("_cargs" ("_position" l)
###                     ("_cargs" ("_position" pc)
###                       ("_cargs" ("_position" No_ics)
###                         ("_cargs" ("_position" frs)
###                           ("_applC" ("_position" sh)
###                             ("\<^const>Expr.exp.LAss" ("_position" C')
###                               ("_applC" ("_position" Some)
###                                 ("_tuple"
###                                   ("_applC" ("_position" fst)
###                                     ("_applC" ("_position" the)
### ("_applC" ("_position" sh) ("_position" C'))))
###                                   ("_tuple_arg"
###                                     ("_position" Error)))))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### theory "Draft.Correctness2"
### 32.062s elapsed time, 54.589s cpu time, 13.865s GC time
Loading theory "Draft.Compiler" (required by "Draft.CompilerMoreTemplates")
### theory "Draft.Compiler"
### 0.259s elapsed time, 0.366s cpu time, 0.000s GC time
Loading theory "Draft.CompilerMoreTemplates"
val templateLemmas =
   [("PCompiler.wf_clinit_compM",
     "wf_clinit (map (compM ?f) ?ms) = wf_clinit ?ms",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("PCompiler.sblank_compP", "sblank (compP ?f ?P) ?C = sblank ?P ?C",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("PCompiler.fields_compP", "fields (compP ?f ?P) ?C = fields ?P ?C",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("PCompiler.ifields_compP", "ifields (compP ?f ?P) ?C = ifields ?P ?C",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("PCompiler.isfields_compP",
     "isfields (compP ?f ?P) ?C = isfields ?P ?C",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("PCompiler.blank_compP", "blank (compP ?f ?P) ?C = blank ?P ?C",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Compiler2.max_stack1'", "~ sub_RI ?e ==> 1 <= max_stack ?e",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 0))
            )],
       template_inequation
        (less_equals, template_hole 1,
         template_app (template_hole 0, template_var 0)))),
    ("Compiler1.comp_final",
     "final ?e ==> compE\<^sub>1 ?Vs ?e = fin\<^sub>1 ?e",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app (template_hole 0, template_var 1)))),
    ("Compiler2.compE\<^sub>2_not_Nil'",
     "~ sub_RI ?e ==> compE\<^sub>2 ?e ~= []",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 0))
            )],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("PCompiler.compP_widen",
     "compP ?f ?P \<turnstile> ?T \<le> ?T' = ?P \<turnstile> ?T \<le> ?T'",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("PCompiler.field_compP", "field (compP ?f ?P) ?F ?D = field ?P ?F ?D",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Compiler2.compE\<^sub>2_nRet",
     "?i : set (compE\<^sub>2 ?e\<^sub>1) ==> ?i ~= Return",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)))
            )],
       template_negation
        (template_equation (template_var 1, template_hole 0)))),
    ("Compiler2.bop_expr_length_aux",
     "length (case ?bop of Eq => [CmpEq] | Add => [IAdd]) = Suc 0",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_hole 3)),
             template_app
              (template_app (template_hole 5, template_hole 2),
               template_hole 3)),
           template_var 0)),
       template_app (template_hole 1, template_hole 0))),
    ("PCompiler.has_field_compP",
     "(compP ?f ?P \<turnstile> ?C has ?F,?b:?T in ?D) =
      (?P \<turnstile> ?C has ?F,?b:?T in ?D)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 6),
                     template_var 5)),
                 template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("PCompiler.sees_fields_compP",
     "(compP ?f ?P \<turnstile> ?C sees ?F,?b:?T in ?D) =
      (?P \<turnstile> ?C sees ?F,?b:?T in ?D)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 6),
                     template_var 5)),
                 template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("Compiler2.compMb\<^sub>2",
     "compMb\<^sub>2 ?b ?e =
      (max_stack ?e, max_vars ?e, compE\<^sub>2 ?e @ [Return],
       compxE\<^sub>2 ?e 0 0)",
     template_equation
      (template_app
        (template_app (template_hole 12, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 11,
           template_app (template_hole 10, template_var 0)),
         template_app
          (template_app
            (template_hole 9,
             template_app (template_hole 8, template_var 0)),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 0)),
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_hole 2))),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0),
               template_hole 0)))))),
    ("PCompiler.sees_method_compP",
     "?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = ?m in ?D ==>
      compP ?f
       ?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = ?f ?b
                         ?m in ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 2, template_var 8),
                          template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_hole 1,
                           template_app
                            (template_app (template_hole 0, template_var 0),
                             template_var 8)),
                         template_var 7),
                       template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_app
                (template_app (template_var 0, template_var 5),
                 template_var 2)),
             template_var 1)
           ))),
    ("PCompiler.class_compP",
     "class ?P ?C = \<lfloor>(?D, ?fs, ?ms)\<rfloor> ==>
      class (compP ?f ?P) ?C =
      \<lfloor>(?D, ?fs, map (compM ?f) ?ms)\<rfloor>",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 11, template_var 5),
            template_var 4),
          template_app
           (template_hole 10,
            template_app
             (template_app (template_hole 9, template_var 3),
              template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1))))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_var 5)),
           template_var 4),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)),
                 template_var 1))))))),
    ("PCompiler.sees_method_compPD",
     "compP ?f
       ?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = ?fm in ?D ==>
      EX m. ?P \<turnstile> ?C sees ?M, ?b :  ?Ts\<rightarrow>?T = m in ?D &
            ?f ?b m = ?fm",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_hole 5,
                            template_app
                             (template_app
                               (template_hole 4, template_var 8),
                              template_var 7)),
                          template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("PCompiler.set_compP",
     "((?C, ?D, ?fs, ?ms') : set (compP ?f ?P)) =
      (EX ms. (?C, ?D, ?fs, ms) : set ?P & ?ms' = map (compM ?f) ms)",
     template_equation
      (template_app
        (template_app
          (template_hole 15,
           template_app
            (template_app (template_hole 14, template_var 5),
             template_app
              (template_app (template_hole 13, template_var 4),
               template_app
                (template_app (template_hole 12, template_var 3),
                 template_var 2)))),
         template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, template_var 1),
             template_var 0))),
       template_app (template_hole 9, t_empty))),
    ("PCompiler.class_compPD",
     "class (compP ?f ?P) ?C = \<lfloor>(?D, ?fs, ?cms)\<rfloor> ==>
      EX ms.
         class ?P ?C = \<lfloor>(?D, ?fs, ms)\<rfloor> &
         ?cms = map (compM ?f) ms",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 14,
              template_app
               (template_app (template_hole 13, template_var 5),
                template_var 4)),
            template_var 3),
          template_app
           (template_hole 12,
            template_app
             (template_app (template_hole 11, template_var 2),
              template_app
               (template_app (template_hole 10, template_var 1),
                template_var 0))))],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("PCompiler.map_of_map4",
     "map_of (map (%(x, a, b, c). (x, a, b, ?f c)) ?ts) =
      map_option (%(a, b, c). (a, b, ?f c)) o map_of ?ts",
     template_equation
      (template_app
        (template_hole 12,
         template_app
          (template_app
            (template_hole 11, template_app (template_hole 10, t_empty)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3, template_app (template_hole 2, t_empty))),
         template_app (template_hole 0, template_var 0)))),
    ("PCompiler.sees_methods_compP",
     "?P \<turnstile> ?C sees_methods ?Mm ==>
      compP ?f
       ?P \<turnstile> ?C sees_methods map_option
  (%((b, Ts, T, m), D). ((b, Ts, T, ?f b m), D)) o
 ?Mm",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 12, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app (template_hole 10, template_var 0),
                   template_var 3)),
               template_var 2),
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_hole 8,
                   template_app
                    (template_hole 7,
                     template_app (template_hole 6, t_empty)))),
               template_var 1))
           ))),
    ("PCompiler.sees_methods_compPD",
     "[| ?cP \<turnstile> ?C sees_methods ?Mm'; ?cP = compP ?f ?P |]
      ==> EX Mm.
             ?P \<turnstile> ?C sees_methods Mm &
             ?Mm' =
             map_option (%((b, Ts, T, m), D). ((b, Ts, T, ?f b m), D)) o
             Mm",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 16, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 14, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 13, t_empty)))),
    ("PCompiler.map_of_map245",
     "map_of (map (%(x, a, b, c, d). (x, a, b, c, ?f a c d)) ?ts) =
      map_option (%(a, b, c, d). (a, b, c, ?f a c d)) o map_of ?ts",
     template_equation
      (template_app
        (template_hole 15,
         template_app
          (template_app
            (template_hole 14, template_app (template_hole 13, t_empty)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4, template_app (template_hole 3, t_empty))),
         template_app (template_hole 0, template_var 0)))),
    ("PCompiler.wf_prog_compPI",
     "[| !!C M b Ts T m.
            [| ?P \<turnstile> C sees M, b :  Ts\<rightarrow>T = m in C;
               wf_mdecl ?wf\<^sub>1 ?P C (M, b, Ts, T, m) |]
            ==> wf_mdecl ?wf\<^sub>2 (compP ?f ?P) C (M, b, Ts, T, ?f b m);
         wf_prog ?wf\<^sub>1 ?P |]
      ==> wf_prog ?wf\<^sub>2 (compP ?f ?P)",
     template_implication
      ([template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app
              (template_app (template_hole 6, template_var 0),
               template_var 3))
           ))),
    ("PCompiler.wf_cdecl_compPI",
     "[| !!C M b Ts T m.
            [| wf_mdecl ?wf\<^sub>1 ?P C (M, b, Ts, T, m);
               ?P \<turnstile> C sees M, b :  Ts\<rightarrow>T = m in C |]
            ==> wf_mdecl ?wf\<^sub>2 (compP ?f ?P) C (M, b, Ts, T, ?f b m);
         ALL x:set ?P. wf_cdecl ?wf\<^sub>1 ?P x; ?x : set (compP ?f ?P);
         wf_prog ?p ?P |]
      ==> wf_cdecl ?wf\<^sub>2 (compP ?f ?P) ?x",
     template_implication
      ([template_predicate (template_app (template_hole 24, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 4)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 11, template_var 2),
                  template_var 4)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_app
                (template_app (template_hole 11, template_var 2),
                 template_var 4)),
             template_var 1)
           ))),
    ("Compiler.comp_correct_NonStatic",
     "[| wf_J_prog ?P;
         ?P \<turnstile> ?C sees ?M, NonStatic :  ?Ts\<rightarrow>?T = (?pns,
                                  ?body) in ?C;
         ?P \<turnstile> \<langle>?body,
                          (?h, [this # ?pns [|->] ?vs],
                           ?sh)\<rangle> \<Rightarrow>
                         \<langle>?e',(?h', ?l', ?sh')\<rangle>;
         length ?vs = length ?pns + 1; length ?rest = max_vars ?body |]
      ==> J2JVM ?P |-
          (None, ?h, [([], ?vs @ ?rest, ?C, ?M, 0, No_ics)], ?sh) -jvm->
          (exception ?e', ?h', [], ?sh')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 35, template_hole 34),
              template_var 14)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 33, template_var 14),
                          template_var 13),
                        template_var 12),
                      template_hole 32),
                    template_var 11),
                  template_var 10),
                template_app
                 (template_app (template_hole 31, template_var 9),
                  template_var 8)),
              template_var 13)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 30, template_var 14),
                    template_var 8),
                  template_app
                   (template_app (template_hole 29, template_var 7),
                    template_app
                     (template_app
                       (template_hole 28,
                        template_app
                         (template_app
                           (template_app (template_hole 27, t_empty),
                            template_app
                             (template_app
                               (template_hole 25, template_hole 24),
                              template_var 9)),
                          template_var 6)),
                      template_var 5))),
                template_var 4),
              template_app
               (template_app (template_hole 29, template_var 3),
                template_app
                 (template_app (template_hole 28, template_var 2),
                  template_var 1)))
            ),
        template_equation
         (template_app (template_hole 22, template_var 6),
          template_app
           (template_app
             (template_hole 21,
              template_app (template_hole 20, template_var 9)),
            template_hole 19)),
        template_equation
         (template_app (template_hole 22, template_var 0),
          template_app (template_hole 18, template_var 8))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 17,
                 template_app (template_hole 16, template_var 14)),
               template_app
                (template_app (template_hole 15, template_hole 14),
                 template_app
                  (template_app (template_hole 13, template_var 7),
                   template_app
                    (template_app
                      (template_hole 12,
                       template_app
                        (template_app
                          (template_hole 11,
                           template_app
                            (template_app
                              (template_hole 10, template_hole 9),
                             template_app
                              (template_app
                                (template_hole 8,
                                 template_app
                                  (template_app
                                    (template_hole 7, template_var 6),
                                   template_var 0)),
                               template_app
                                (template_app
                                  (template_hole 6, template_var 13),
                                 template_app
                                  (template_app
                                    (template_hole 5, template_var 12),
                                   template_app
                                    (template_app
(template_hole 4, template_hole 3),
                                     template_hole 2)))))),
                         template_hole 1)),
                     template_var 5)))),
             template_app
              (template_app
                (template_hole 15,
                 template_app (template_hole 0, template_var 4)),
               template_app
                (template_app (template_hole 13, template_var 3),
                 template_app
                  (template_app (template_hole 12, template_hole 1),
                   template_var 1))))
           ))),
    ("Compiler.comp_correct_Static",
     "[| wf_J_prog ?P;
         ?P \<turnstile> ?C sees ?M, Static :  ?Ts\<rightarrow>?T = (?pns,
                               ?body) in ?C;
         ?P \<turnstile> \<langle>?body,
                          (?h, [?pns [|->] ?vs], ?sh)\<rangle> \<Rightarrow>
                         \<langle>?e',(?h', ?l', ?sh')\<rangle>;
         length ?vs = length ?pns; length ?rest = max_vars ?body;
         ?M ~= clinit |]
      ==> J2JVM ?P |-
          (None, ?h, [([], ?vs @ ?rest, ?C, ?M, 0, No_ics)], ?sh) -jvm->
          (exception ?e', ?h', [], ?sh')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 34, template_hole 33),
              template_var 14)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 32, template_var 14),
                          template_var 13),
                        template_var 12),
                      template_hole 31),
                    template_var 11),
                  template_var 10),
                template_app
                 (template_app (template_hole 30, template_var 9),
                  template_var 8)),
              template_var 13)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 29, template_var 14),
                    template_var 8),
                  template_app
                   (template_app (template_hole 28, template_var 7),
                    template_app
                     (template_app
                       (template_hole 27,
                        template_app
                         (template_app
                           (template_app (template_hole 26, t_empty),
                            template_var 9),
                          template_var 6)),
                      template_var 5))),
                template_var 4),
              template_app
               (template_app (template_hole 28, template_var 3),
                template_app
                 (template_app (template_hole 27, template_var 2),
                  template_var 1)))
            ),
        template_equation
         (template_app (template_hole 23, template_var 6),
          template_app (template_hole 22, template_var 9)),
        template_equation
         (template_app (template_hole 23, template_var 0),
          template_app (template_hole 21, template_var 8)),
        template_negation
         (template_equation (template_var 12, template_hole 18))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 17,
                 template_app (template_hole 16, template_var 14)),
               template_app
                (template_app (template_hole 15, template_hole 14),
                 template_app
                  (template_app (template_hole 13, template_var 7),
                   template_app
                    (template_app
                      (template_hole 12,
                       template_app
                        (template_app
                          (template_hole 11,
                           template_app
                            (template_app
                              (template_hole 10, template_hole 9),
                             template_app
                              (template_app
                                (template_hole 8,
                                 template_app
                                  (template_app
                                    (template_hole 7, template_var 6),
                                   template_var 0)),
                               template_app
                                (template_app
                                  (template_hole 6, template_var 13),
                                 template_app
                                  (template_app
                                    (template_hole 5, template_var 12),
                                   template_app
                                    (template_app
(template_hole 4, template_hole 3),
                                     template_hole 2)))))),
                         template_hole 1)),
                     template_var 5)))),
             template_app
              (template_app
                (template_hole 15,
                 template_app (template_hole 0, template_var 4)),
               template_app
                (template_app (template_hole 13, template_var 3),
                 template_app
                  (template_app (template_hole 12, template_hole 1),
                   template_var 1))))
           )))]:
   (string * thm * template) list
### theory "Draft.CompilerMoreTemplates"
### 0.650s elapsed time, 1.053s cpu time, 0.241s GC time
val it = (): unit
