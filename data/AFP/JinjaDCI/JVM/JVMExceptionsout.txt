Loading theory "Draft.Auxiliary" (required by "Draft.JVMExceptionsMoreTemplates" via "Draft.JVMExceptions" via "Draft.Exceptions" via "Draft.Objects" via "Draft.TypeRel" via "Draft.Decl" via "Draft.Type")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.JVMExceptionsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.JVMExceptionsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.JVMExceptionsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.146s elapsed time, 0.601s cpu time, 0.044s GC time
Loading theory "HOL-Library.Transitive_Closure_Table" (required by "Draft.JVMExceptionsMoreTemplates" via "Draft.JVMExceptions" via "Draft.Exceptions" via "Draft.Objects" via "Draft.TypeRel")
### theory "Draft.Auxiliary"
### 0.177s elapsed time, 0.725s cpu time, 0.044s GC time
Loading theory "Draft.Type" (required by "Draft.JVMExceptionsMoreTemplates" via "Draft.JVMExceptions" via "Draft.Exceptions" via "Draft.Objects" via "Draft.TypeRel" via "Draft.Decl")
Proofs for inductive predicate(s) "rtrancl_path"
  Proving monotonicity ...
### theory "HOL-Library.Set_Algebras"
### 0.194s elapsed time, 0.791s cpu time, 0.044s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.JVMExceptionsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
Proofs for inductive predicate(s) "rtrancl_tab"
  Proving monotonicity ...
### theory "HOL-Library.Nat_Bijection"
### 0.330s elapsed time, 1.310s cpu time, 0.126s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.JVMExceptionsMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Transitive_Closure_Table"
### 0.314s elapsed time, 1.224s cpu time, 0.156s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.JVMExceptionsMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### theory "Draft.Type"
### 0.723s elapsed time, 2.851s cpu time, 0.281s GC time
Loading theory "Draft.Decl" (required by "Draft.JVMExceptionsMoreTemplates" via "Draft.JVMExceptions" via "Draft.Exceptions" via "Draft.Objects" via "Draft.TypeRel")
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "Draft.Decl"
### 0.077s elapsed time, 0.307s cpu time, 0.000s GC time
Loading theory "Draft.TypeRel" (required by "Draft.JVMExceptionsMoreTemplates" via "Draft.JVMExceptions" via "Draft.Exceptions" via "Draft.Objects")
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Proofs for inductive predicate(s) "subcls1p"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
### theory "HOL-Library.Stream"
### 1.062s elapsed time, 4.043s cpu time, 0.848s GC time
Found termination order: "size <*mlex*> {}"
consts
  supercls_lst :: "'m prog => char list list => bool"
Proofs for inductive predicate(s) "widen"
  Proving monotonicity ...
### theory "HOL-Library.BigO"
### 0.999s elapsed time, 3.747s cpu time, 0.807s GC time
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Methods"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Fields"
  Proving monotonicity ...
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.TypeRel"
### 0.915s elapsed time, 2.608s cpu time, 0.753s GC time
Loading theory "Draft.Value" (required by "Draft.JVMExceptionsMoreTemplates" via "Draft.JVMExceptions" via "Draft.Exceptions" via "Draft.Objects")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.999s elapsed time, 6.344s cpu time, 1.132s GC time
Loading theory "Draft.Templates" (required by "Draft.JVMExceptionsMoreTemplates" via "Draft.ExtrEqs")
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Addr"
consts
  the_Intg :: "val => int"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.109s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.JVMExceptionsMoreTemplates")
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_Addr :: "val => nat"
consts
  default_val :: "ty => val"
### theory "Draft.Value"
### 0.346s elapsed time, 0.708s cpu time, 0.036s GC time
Loading theory "Draft.Objects" (required by "Draft.JVMExceptionsMoreTemplates" via "Draft.JVMExceptions" via "Draft.Exceptions")
consts
  typeof_h :: "heap => val => ty option"
Proofs for inductive predicate(s) "iprog"
  Proving monotonicity ...
### theory "Draft.Objects"
### 0.461s elapsed time, 0.968s cpu time, 0.110s GC time
Loading theory "Draft.Exceptions" (required by "Draft.JVMExceptionsMoreTemplates" via "Draft.JVMExceptions")
Loading theory "Draft.JVMState" (required by "Draft.JVMExceptionsMoreTemplates" via "Draft.JVMExceptions" via "Draft.JVMInstructions")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.534s elapsed time, 1.176s cpu time, 0.110s GC time
### theory "Draft.Exceptions"
### 0.164s elapsed time, 0.417s cpu time, 0.059s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.JVMState"
### 0.739s elapsed time, 1.030s cpu time, 0.107s GC time
Loading theory "Draft.JVMInstructions" (required by "Draft.JVMExceptionsMoreTemplates" via "Draft.JVMExceptions")
### theory "Draft.JVMInstructions"
### 1.660s elapsed time, 2.407s cpu time, 1.042s GC time
Loading theory "Draft.JVMExceptions" (required by "Draft.JVMExceptionsMoreTemplates")
consts
  match_ex_table ::
    "'m prog => char list => nat => ex_table => (nat * nat) option"
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd (snd (snd p))))))
         (fst (snd (snd (snd p))))) <*mlex*>
   {}"
### theory "Draft.JVMExceptions"
### 0.690s elapsed time, 0.792s cpu time, 0.127s GC time
Loading theory "Draft.JVMExceptionsMoreTemplates"
val templateLemmas =
   [("JVMExceptions.find_handler_heap",
     "find_handler ?P ?a ?h ?frs ?sh = (?xp', ?h', ?frs', ?sh') ==>
      ?h' = ?h",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5),
            template_var 4),
          template_app
           (template_app (template_hole 3, template_var 3),
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))))],
       template_equation (template_var 2, template_var 6))),
    ("JVMExceptions.find_handler_sheap",
     "find_handler ?P ?a ?h ?frs ?sh = (?xp', ?h', ?frs', ?sh') ==>
      ?sh' = ?sh",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5),
            template_var 4),
          template_app
           (template_app (template_hole 3, template_var 3),
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))))],
       template_equation (template_var 0, template_var 4))),
    ("JVMExceptions.find_handler_None",
     "find_handler ?P ?a ?h ?frs ?sh = (None, ?h, ?frs', ?sh') ==>
      ?frs' ~= []",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3),
            template_var 2),
          template_app
           (template_app (template_hole 6, template_hole 5),
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))))],
       template_negation
        (template_equation (template_var 1, template_hole 0)))),
    ("JVMExceptions.find_handler_Some",
     "find_handler ?P ?a ?h ?frs ?sh =
      (\<lfloor>?x\<rfloor>, ?h, ?frs', ?sh') ==>
      ?frs' = []",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4),
            template_var 3),
          template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 2)),
            template_app
             (template_app (template_hole 3, template_var 5),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))))],
       template_equation (template_var 1, template_hole 0))),
    ("JVMExceptions.find_handler_frames",
     "find_handler ?P ?a ?h ?frs ?sh = (?xp', ?h', ?frs', ?sh') ==>
      length ?frs' <= length ?frs",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5),
            template_var 4),
          template_app
           (template_app (template_hole 4, template_var 3),
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 5)))),
    ("JVMExceptions.find_handler_prealloc_pres",
     "[| preallocated ?h;
         find_handler ?P ?a ?h ?frs ?sh = (?xp', ?h', ?frs', ?sh') |]
      ==> preallocated ?h'",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 8)),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 7),
                  template_var 6),
                template_var 8),
              template_var 5),
            template_var 4),
          template_app
           (template_app (template_hole 2, template_var 3),
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))))],
       template_predicate
        (template_app (template_hole 5, template_var 2)))),
    ("JVMExceptions.find_handler_frs_tl_neq",
     "ics_of ?f ~= No_ics ==>
      (?xp, ?h, ?f # ?frs, ?sh) ~=
      find_handler ?P ?xa ?h' (?f' # ?frs) ?sh'",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 7, template_var 9),
              template_hole 6)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 4, template_var 8),
               template_app
                (template_app (template_hole 3, template_var 7),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 9),
                       template_var 6)),
                   template_var 5))),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 6)),
               template_var 0))
           ))),
    ("JVMExceptions.find_handler_Some_same_error_same_heap",
     "find_handler ?P ?a ?h ?frs ?sh =
      (\<lfloor>?x\<rfloor>, ?h', ?frs', ?sh') ==>
      ?x = ?a & ?h = ?h' & ?sh = ?sh'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5),
            template_var 4),
          template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 3)),
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 7)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 1, template_var 6),
                   template_var 2)),
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 0)))
           ))),
    ("JVMExceptions.find_handler_cases",
     "find_handler ?P ?a ?h ?frs ?sh = ?js ==>
      (EX frs'. frs' ~= [] & ?js = (None, ?h, frs', ?sh)) |
      ?js = (\<lfloor>?a\<rfloor>, ?h, [], ?sh)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 11, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2),
            template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10, template_app (template_hole 9, t_empty)),
             template_app
              (template_app (template_hole 12, template_var 0),
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 0, template_var 4)),
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_app
                    (template_app (template_hole 1, template_hole 5),
                     template_var 1)))))
           )))]:
   (string * thm * template) list
### theory "Draft.JVMExceptionsMoreTemplates"
### 0.386s elapsed time, 0.554s cpu time, 0.074s GC time
val it = (): unit
