Loading theory "Draft.Auxiliary" (required by "Draft.JVMExecMoreTemplates" via "Draft.JVMExec" via "Draft.JVMExecInstr" via "Draft.JVMInstructions" via "Draft.JVMState" via "Draft.Objects" via "Draft.TypeRel" via "Draft.Decl" via "Draft.Type")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.JVMExecMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.JVMExecMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.JVMExecMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Auxiliary"
### 0.144s elapsed time, 0.586s cpu time, 0.036s GC time
Loading theory "Draft.Type" (required by "Draft.JVMExecMoreTemplates" via "Draft.JVMExec" via "Draft.JVMExecInstr" via "Draft.JVMInstructions" via "Draft.JVMState" via "Draft.Objects" via "Draft.TypeRel" via "Draft.Decl")
### theory "HOL-Library.Function_Algebras"
### 0.147s elapsed time, 0.597s cpu time, 0.036s GC time
Loading theory "HOL-Library.Transitive_Closure_Table" (required by "Draft.JVMExecMoreTemplates" via "Draft.JVMExec" via "Draft.JVMExecInstr" via "Draft.JVMInstructions" via "Draft.JVMState" via "Draft.Objects" via "Draft.TypeRel")
Proofs for inductive predicate(s) "rtrancl_path"
  Proving monotonicity ...
### theory "HOL-Library.Set_Algebras"
### 0.192s elapsed time, 0.780s cpu time, 0.036s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.JVMExecMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Proofs for inductive predicate(s) "rtrancl_tab"
  Proving monotonicity ...
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.350s elapsed time, 1.390s cpu time, 0.125s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.JVMExecMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Transitive_Closure_Table"
### 0.315s elapsed time, 1.225s cpu time, 0.157s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.JVMExecMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "Draft.Type"
### 0.718s elapsed time, 2.827s cpu time, 0.321s GC time
Loading theory "Draft.Decl" (required by "Draft.JVMExecMoreTemplates" via "Draft.JVMExec" via "Draft.JVMExecInstr" via "Draft.JVMInstructions" via "Draft.JVMState" via "Draft.Objects" via "Draft.TypeRel")
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### theory "Draft.Decl"
### 0.073s elapsed time, 0.291s cpu time, 0.000s GC time
Loading theory "Draft.TypeRel" (required by "Draft.JVMExecMoreTemplates" via "Draft.JVMExec" via "Draft.JVMExecInstr" via "Draft.JVMInstructions" via "Draft.JVMState" via "Draft.Objects")
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Proofs for inductive predicate(s) "subcls1p"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  supercls_lst :: "'m prog => char list list => bool"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Proofs for inductive predicate(s) "widen"
  Proving monotonicity ...
### theory "HOL-Library.Stream"
### 1.098s elapsed time, 4.187s cpu time, 0.915s GC time
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Methods"
  Proving monotonicity ...
### theory "HOL-Library.BigO"
### 1.037s elapsed time, 3.908s cpu time, 0.847s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Fields"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.TypeRel"
### 0.915s elapsed time, 2.786s cpu time, 0.766s GC time
Loading theory "Draft.Value" (required by "Draft.JVMExecMoreTemplates" via "Draft.JVMExec" via "Draft.JVMExecInstr" via "Draft.JVMInstructions" via "Draft.JVMState" via "Draft.Objects")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Addr"
consts
  the_Intg :: "val => int"
### theory "HOL-Library.Tree"
### 2.014s elapsed time, 6.484s cpu time, 1.204s GC time
Loading theory "Draft.Templates" (required by "Draft.JVMExecMoreTemplates" via "Draft.ExtrEqs")
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_Addr :: "val => nat"
consts
  default_val :: "ty => val"
### theory "Draft.Value"
### 0.366s elapsed time, 0.783s cpu time, 0.116s GC time
Loading theory "Draft.Objects" (required by "Draft.JVMExecMoreTemplates" via "Draft.JVMExec" via "Draft.JVMExecInstr" via "Draft.JVMInstructions" via "Draft.JVMState")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.105s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.JVMExecMoreTemplates")
consts
  typeof_h :: "heap => val => ty option"
Proofs for inductive predicate(s) "iprog"
  Proving monotonicity ...
### theory "Draft.Objects"
### 0.474s elapsed time, 1.004s cpu time, 0.131s GC time
Loading theory "Draft.Exceptions" (required by "Draft.JVMExecMoreTemplates" via "Draft.JVMExec" via "Draft.JVMExecInstr" via "Draft.JVMExceptions")
Loading theory "Draft.JVMState" (required by "Draft.JVMExecMoreTemplates" via "Draft.JVMExec" via "Draft.JVMExecInstr" via "Draft.JVMInstructions")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.538s elapsed time, 1.235s cpu time, 0.131s GC time
### theory "Draft.Exceptions"
### 0.141s elapsed time, 0.389s cpu time, 0.000s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.JVMState"
### 0.718s elapsed time, 1.037s cpu time, 0.095s GC time
Loading theory "Draft.JVMInstructions" (required by "Draft.JVMExecMoreTemplates" via "Draft.JVMExec" via "Draft.JVMExecInstr")
### theory "Draft.JVMInstructions"
### 1.632s elapsed time, 2.394s cpu time, 1.059s GC time
Loading theory "Draft.JVMExceptions" (required by "Draft.JVMExecMoreTemplates" via "Draft.JVMExec" via "Draft.JVMExecInstr")
consts
  match_ex_table ::
    "'m prog => char list => nat => ex_table => (nat * nat) option"
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd (snd (snd p))))))
         (fst (snd (snd (snd p))))) <*mlex*>
   {}"
### theory "Draft.JVMExceptions"
### 0.672s elapsed time, 0.775s cpu time, 0.128s GC time
Loading theory "Draft.JVMExecInstr" (required by "Draft.JVMExecMoreTemplates" via "Draft.JVMExec")
Found termination order: "{}"
consts
  exec_instr ::
    "instr
     => jvm_prog
        => heap
           => val list
              => val list
                 => char list
                    => char list
                       => nat
                          => init_call_status
                             => frame list => sheap => jvm_state"
### theory "Draft.JVMExecInstr"
### 0.999s elapsed time, 1.740s cpu time, 1.014s GC time
Loading theory "Draft.JVMExec" (required by "Draft.JVMExecMoreTemplates")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Proofs for inductive predicate(s) "exec_1p"
  Proving monotonicity ...
### theory "Draft.JVMExec"
### 1.557s elapsed time, 1.842s cpu time, 0.212s GC time
Loading theory "Draft.JVMExecMoreTemplates"
val templateLemmas =
   [("JVMExec.jvm_refl", "?P |- ?\<sigma> -jvm-> ?\<sigma>",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 0)
         )),
    ("JVMExec.exec_1p_exec_1_eq", "exec_1p ?P = exec_1' ?P",
     template_equation
      (template_app (template_hole 3, template_var 0), t_empty)),
    ("JVMExec.exec_1_eq",
     "exec_1 ?P =
      {(\<sigma>, \<sigma>').
       exec (?P, \<sigma>) = \<lfloor>\<sigma>'\<rfloor>}",
     template_equation
      (template_app (template_hole 6, template_var 0),
       template_app
        (template_hole 5, template_app (template_hole 4, t_empty)))),
    ("JVMExec.exec_1_iff",
     "?P \<turnstile> ?\<sigma> -jvm\<rightarrow>\<^sub>1 ?\<sigma>' =
      (exec (?P, ?\<sigma>) = \<lfloor>?\<sigma>'\<rfloor>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2)),
         template_app (template_hole 0, template_var 1)))),
    ("JVMExec.jvm_trans",
     "[| ?P |- ?\<sigma> -jvm-> ?\<sigma>';
         ?P |- ?\<sigma>' -jvm-> ?\<sigma>'' |]
      ==> ?P |- ?\<sigma> -jvm-> ?\<sigma>''",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("JVMExec.jvm_one_step2",
     "[| ?P |- ?\<sigma> -jvm-> ?\<sigma>';
         ?P \<turnstile> ?\<sigma>' -jvm\<rightarrow>\<^sub>1 ?\<sigma>'' |]
      ==> ?P |- ?\<sigma> -jvm-> ?\<sigma>''",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)),
              template_app (template_hole 0, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("JVMExec.jvm_one_step1",
     "[| ?P \<turnstile> ?\<sigma> -jvm\<rightarrow>\<^sub>1 ?\<sigma>';
         ?P |- ?\<sigma>' -jvm-> ?\<sigma>'' |]
      ==> ?P |- ?\<sigma> -jvm-> ?\<sigma>''",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 1),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3),
             template_var 0)
           ))),
    ("JVMExec.exec_all_finalD",
     "?P |- (?x, ?h, [], ?sh) -jvm-> ?\<sigma> ==>
      ?\<sigma> = (?x, ?h, [], ?sh)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_app
                     (template_app (template_hole 2, template_hole 1),
                      template_var 1)))),
              template_var 0)
            )],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 4, template_var 3),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1)))))),
    ("JVMExec.exec_all_conf",
     "[| ?P |- ?\<sigma> -jvm-> ?\<sigma>';
         ?P |- ?\<sigma> -jvm-> ?\<sigma>'' |]
      ==> ?P |- ?\<sigma>' -jvm-> ?\<sigma>'' | ?P |- ?\<sigma>'' -jvm->
          ?\<sigma>'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0),
               template_var 1))
           ))),
    ("JVMExec.exec_1_exec_all_conf",
     "[| exec (?P, ?\<sigma>) = \<lfloor>?\<sigma>'\<rfloor>;
         ?P |- ?\<sigma> -jvm-> ?\<sigma>''; ?\<sigma> ~= ?\<sigma>'' |]
      ==> ?P |- ?\<sigma>' -jvm-> ?\<sigma>''",
     template_implication
      ([template_equation
         (template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)),
          template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 1),
             template_var 0)
           ))),
    ("JVMExec.exec_prealloc_pres",
     "[| preallocated ?h;
         exec (?P, ?xp, ?h, ?frs, ?sh) =
         \<lfloor>(?xp', ?h', ?frs', ?sh')\<rfloor> |]
      ==> preallocated ?h'",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 8)),
        template_equation
         (template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 7),
              template_app
               (template_app (template_hole 3, template_var 6),
                template_app
                 (template_app (template_hole 2, template_var 8),
                  template_app
                   (template_app (template_hole 1, template_var 5),
                    template_var 4))))),
          template_app
           (template_hole 0,
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)))))],
       template_predicate
        (template_app (template_hole 7, template_var 2)))),
    ("JVMExec.exec_step_prealloc_pres",
     "[| preallocated ?h;
         exec_step ?P ?h ?stk ?loc ?C ?M ?pc ?ics ?frs ?sh =
         (?xp', ?h', ?frs', ?sh') |]
      ==> preallocated ?h'",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 13)),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app (template_hole 3, template_var 12),
                            template_var 13),
                          template_var 11),
                        template_var 10),
                      template_var 9),
                    template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5),
            template_var 4),
          template_app
           (template_app (template_hole 2, template_var 3),
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))))],
       template_predicate
        (template_app (template_hole 5, template_var 2)))),
    ("JVMExec.exec_Calling_prealloc_pres",
     "[| preallocated ?h;
         exec_Calling ?C ?Cs ?P ?h ?stk ?loc ?C\<^sub>0 ?M\<^sub>0 ?pc ?frs
          ?sh =
         (?xp', ?h', ?frs', ?sh') |]
      ==> preallocated ?h'",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 14)),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 3, template_var 13),
                              template_var 12),
                            template_var 11),
                          template_var 14),
                        template_var 10),
                      template_var 9),
                    template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5),
            template_var 4),
          template_app
           (template_app (template_hole 2, template_var 3),
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))))],
       template_predicate
        (template_app (template_hole 5, template_var 2)))),
    ("JVMExecInstr.exec_instr_prealloc_pres",
     "[| preallocated ?h;
         exec_instr ?i ?P ?h ?stk ?loc ?C\<^sub>0 ?M\<^sub>0 ?pc ?ics ?frs
          ?sh =
         (?xp', ?h', ?frs', ?sh') |]
      ==> preallocated ?h'",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 14)),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 3, template_var 13),
                              template_var 12),
                            template_var 14),
                          template_var 11),
                        template_var 10),
                      template_var 9),
                    template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5),
            template_var 4),
          template_app
           (template_app (template_hole 2, template_var 3),
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))))],
       template_predicate
        (template_app (template_hole 5, template_var 2)))),
    ("JVMExec.exec_all_deterministic",
     "[| ?P |- ?\<sigma> -jvm-> (?x, ?h, [], ?sh);
         ?P |- ?\<sigma> -jvm-> ?\<sigma>' |]
      ==> ?P |- ?\<sigma>' -jvm-> (?x, ?h, [], ?sh)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 5),
                template_var 4),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_app
                   (template_app (template_hole 1, template_hole 0),
                    template_var 1))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 5),
                template_var 4),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 5),
               template_var 0),
             template_app
              (template_app (template_hole 3, template_var 3),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 1))))
           ))),
    ("JVMExecInstr.exec_instr_xcpts",
     "[| ?\<sigma>' =
         exec_instr ?i ?P ?h ?stk ?loc ?C ?M ?pc ?ics' ?frs ?sh;
         fst ?\<sigma>' = \<lfloor>?a\<rfloor> |]
      ==> ?i = Throw | ?a : {a. EX x:sys_xcpts. a = addr_of_sys_xcpt x}",
     template_implication
      ([template_equation
         (template_var 12,
          template_app
           (template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 12, template_var 11),
                              template_var 10),
                            template_var 9),
                          template_var 8),
                        template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2),
            template_var 1)),
        template_equation
         (template_app (template_hole 10, template_var 12),
          template_app (template_hole 9, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 11),
                 template_hole 6)),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_app (template_hole 4, t_empty)))
           )))]:
   (string * thm * template) list
### theory "Draft.JVMExecMoreTemplates"
### 0.379s elapsed time, 0.542s cpu time, 0.066s GC time
val it = (): unit
