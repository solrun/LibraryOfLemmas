Loading theory "Draft.Auxiliary" (required by "Draft.JVMDefensiveMoreTemplates" via "Draft.JVMDefensive" via "Draft.JVMExec" via "Draft.JVMExecInstr" via "Draft.JVMInstructions" via "Draft.JVMState" via "Draft.Objects" via "Draft.TypeRel" via "Draft.Decl" via "Draft.Type")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.JVMDefensiveMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.JVMDefensiveMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.JVMDefensiveMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Auxiliary"
### 0.137s elapsed time, 0.565s cpu time, 0.035s GC time
Loading theory "Draft.Type" (required by "Draft.JVMDefensiveMoreTemplates" via "Draft.JVMDefensive" via "Draft.JVMExec" via "Draft.JVMExecInstr" via "Draft.JVMInstructions" via "Draft.JVMState" via "Draft.Objects" via "Draft.TypeRel" via "Draft.Decl")
### theory "HOL-Library.Function_Algebras"
### 0.143s elapsed time, 0.588s cpu time, 0.035s GC time
Loading theory "HOL-Library.Transitive_Closure_Table" (required by "Draft.JVMDefensiveMoreTemplates" via "Draft.JVMDefensive" via "Draft.JVMExec" via "Draft.JVMExecInstr" via "Draft.JVMInstructions" via "Draft.JVMState" via "Draft.Objects" via "Draft.TypeRel")
Proofs for inductive predicate(s) "rtrancl_path"
  Proving monotonicity ...
### theory "HOL-Library.Set_Algebras"
### 0.182s elapsed time, 0.743s cpu time, 0.035s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.JVMDefensiveMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Proofs for inductive predicate(s) "rtrancl_tab"
  Proving monotonicity ...
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.365s elapsed time, 1.456s cpu time, 0.119s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.JVMDefensiveMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Transitive_Closure_Table"
### 0.324s elapsed time, 1.274s cpu time, 0.150s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.JVMDefensiveMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### theory "Draft.Type"
### 0.688s elapsed time, 2.712s cpu time, 0.271s GC time
Loading theory "Draft.Decl" (required by "Draft.JVMDefensiveMoreTemplates" via "Draft.JVMDefensive" via "Draft.JVMExec" via "Draft.JVMExecInstr" via "Draft.JVMInstructions" via "Draft.JVMState" via "Draft.Objects" via "Draft.TypeRel")
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
### theory "Draft.Decl"
### 0.070s elapsed time, 0.277s cpu time, 0.000s GC time
Loading theory "Draft.TypeRel" (required by "Draft.JVMDefensiveMoreTemplates" via "Draft.JVMDefensive" via "Draft.JVMExec" via "Draft.JVMExecInstr" via "Draft.JVMInstructions" via "Draft.JVMState" via "Draft.Objects")
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Proofs for inductive predicate(s) "subcls1p"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  supercls_lst :: "'m prog => char list list => bool"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "widen"
  Proving monotonicity ...
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Methods"
### theory "HOL-Library.Stream"
### 1.076s elapsed time, 4.089s cpu time, 0.860s GC time
  Proving monotonicity ...
### theory "HOL-Library.BigO"
### 1.006s elapsed time, 3.804s cpu time, 0.794s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Fields"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.TypeRel"
### 0.933s elapsed time, 2.853s cpu time, 0.740s GC time
Loading theory "Draft.Value" (required by "Draft.JVMDefensiveMoreTemplates" via "Draft.JVMDefensive" via "Draft.JVMExec" via "Draft.JVMExecInstr" via "Draft.JVMInstructions" via "Draft.JVMState" via "Draft.Objects")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Addr"
consts
  the_Intg :: "val => int"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_Addr :: "val => nat"
### theory "HOL-Library.Tree"
### 2.016s elapsed time, 6.463s cpu time, 1.126s GC time
Loading theory "Draft.Templates" (required by "Draft.JVMDefensiveMoreTemplates" via "Draft.ExtrEqs")
consts
  default_val :: "ty => val"
### theory "Draft.Value"
### 0.368s elapsed time, 0.785s cpu time, 0.114s GC time
Loading theory "Draft.Objects" (required by "Draft.JVMDefensiveMoreTemplates" via "Draft.JVMDefensive" via "Draft.JVMExec" via "Draft.JVMExecInstr" via "Draft.JVMInstructions" via "Draft.JVMState")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.108s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.JVMDefensiveMoreTemplates")
consts
  typeof_h :: "heap => val => ty option"
Proofs for inductive predicate(s) "iprog"
  Proving monotonicity ...
### theory "Draft.Objects"
### 0.467s elapsed time, 0.980s cpu time, 0.106s GC time
Loading theory "Draft.Exceptions" (required by "Draft.JVMDefensiveMoreTemplates" via "Draft.JVMDefensive" via "Draft.JVMExec" via "Draft.JVMExecInstr" via "Draft.JVMExceptions")
Loading theory "Draft.JVMState" (required by "Draft.JVMDefensiveMoreTemplates" via "Draft.JVMDefensive" via "Draft.JVMExec" via "Draft.JVMExecInstr" via "Draft.JVMInstructions")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.534s elapsed time, 1.230s cpu time, 0.106s GC time
### theory "Draft.Exceptions"
### 0.171s elapsed time, 0.478s cpu time, 0.049s GC time
Loading theory "Draft.Conform" (required by "Draft.JVMDefensiveMoreTemplates" via "Draft.JVMDefensive")
### Ambiguous input (line 34 of "$AFP/JinjaDCI/Common/Conform.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>hconf" ("_position" P) ("_position" h))
###   ("\<^const>HOL.conj"
###     ("_tuple"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" obj))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###             ("_applC" ("_position" Some) ("_position" obj)))
###           ("_position" P)))
###       ("_tuple_arg" ("\<^fixed>hconf" ("_position" h) ("_position" obj))))
###     ("_applC" ("_position" preallocated) ("_position" h))))
### ("\<^const>Pure.eq" ("\<^fixed>hconf" ("_position" P) ("_position" h))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" obj))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some) ("_position" obj)))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" h)
###           ("_position" obj))))
###     ("_applC" ("_position" preallocated) ("_position" h))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 39 of "$AFP/JinjaDCI/Common/Conform.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>shconf" ("_position" P) ("_position" h) ("_position" sh))
###   ("_tuple"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" C) ("_idts" ("_position" sfs) ("_position" i)))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" C))
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" sfs) ("_tuple_arg" ("_position" i)))))
###         ("_position" P)))
###     ("_tuple_arg"
###       ("\<^fixed>shconf" ("_position" h) ("_position" C)
###         ("_position" sfs)))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>shconf" ("_position" P) ("_position" h) ("_position" sh))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" C) ("_idts" ("_position" sfs) ("_position" i)))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_applC" ("_position" sh) ("_position" C))
###         ("_applC" ("_position" Some)
###           ("_tuple" ("_position" sfs) ("_tuple_arg" ("_position" i)))))
###       ("\<^const>Conform.soconf" ("_position" P) ("_position" h)
###         ("_position" C) ("_position" sfs)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Conform"
### 0.161s elapsed time, 0.325s cpu time, 0.000s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.JVMState"
### 0.783s elapsed time, 1.319s cpu time, 0.134s GC time
Loading theory "Draft.JVMInstructions" (required by "Draft.JVMDefensiveMoreTemplates" via "Draft.JVMDefensive" via "Draft.JVMExec" via "Draft.JVMExecInstr")
### theory "Draft.JVMInstructions"
### 1.555s elapsed time, 2.225s cpu time, 0.933s GC time
Loading theory "Draft.JVMExceptions" (required by "Draft.JVMDefensiveMoreTemplates" via "Draft.JVMDefensive" via "Draft.JVMExec" via "Draft.JVMExecInstr")
consts
  match_ex_table ::
    "'m prog => char list => nat => ex_table => (nat * nat) option"
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd (snd (snd p))))))
         (fst (snd (snd (snd p))))) <*mlex*>
   {}"
### theory "Draft.JVMExceptions"
### 0.686s elapsed time, 0.725s cpu time, 0.040s GC time
Loading theory "Draft.JVMExecInstr" (required by "Draft.JVMDefensiveMoreTemplates" via "Draft.JVMDefensive" via "Draft.JVMExec")
Found termination order: "{}"
consts
  exec_instr ::
    "instr
     => jvm_prog
        => heap
           => val list
              => val list
                 => char list
                    => char list
                       => nat
                          => init_call_status
                             => frame list => sheap => jvm_state"
### theory "Draft.JVMExecInstr"
### 0.747s elapsed time, 0.871s cpu time, 0.151s GC time
Loading theory "Draft.JVMExec" (required by "Draft.JVMDefensiveMoreTemplates" via "Draft.JVMDefensive")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Proofs for inductive predicate(s) "exec_1p"
  Proving monotonicity ...
### theory "Draft.JVMExec"
### 1.814s elapsed time, 2.711s cpu time, 1.058s GC time
Loading theory "Draft.JVMDefensive" (required by "Draft.JVMDefensiveMoreTemplates")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
consts
  check_instr ::
    "instr
     => jvm_prog
        => heap
           => val list
              => val list
                 => char list
                    => char list => nat => frame list => sheap => bool"
Proofs for inductive predicate(s) "exec_1_dp"
  Proving monotonicity ...
### theory "Draft.JVMDefensive"
### 0.821s elapsed time, 0.904s cpu time, 0.089s GC time
Loading theory "Draft.JVMDefensiveMoreTemplates"
val templateLemmas =
   [("JVMDefensive.if_neq", "(if ?P then ?A else ?B) ~= ?B ==> ?P",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1),
                template_var 0),
              template_var 0)
            )],
       template_predicate (template_var 2))),
    ("JVMDefensive.exec_1_dp_exec_1_d_eq", "exec_1_dp ?P = exec_1_d' ?P",
     template_equation
      (template_app (template_hole 3, template_var 0), t_empty)),
    ("JVMDefensive.exec_d_no_errorI",
     "check ?P ?\<sigma> ==> exec_d ?P ?\<sigma> ~= TypeError",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("JVMDefensive.defensive_imp_aggressive",
     "?P |- Normal ?\<sigma> -jvmd-> Normal ?\<sigma>' ==>
      ?P |- ?\<sigma> -jvm-> ?\<sigma>'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_app (template_hole 1, template_var 1)),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("JVMDefensive.no_type_error_commutes",
     "exec_d ?P ?\<sigma> ~= TypeError ==>
      exec_d ?P ?\<sigma> = Normal (exec (?P, ?\<sigma>))",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1), template_var 0),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("JVMDefensive.exec_1_d_eq",
     "exec_1_d ?P =
      {(s, t).
       EX \<sigma>.
          s = Normal \<sigma> &
          t = TypeError & exec_d ?P \<sigma> = TypeError} Un
      {(s, t).
       EX \<sigma> \<sigma>'.
          s = Normal \<sigma> &
          t = Normal \<sigma>' &
          exec_d ?P \<sigma> = Normal \<lfloor>\<sigma>'\<rfloor>}",
     template_equation
      (template_app (template_hole 13, template_var 0),
       template_app
        (template_app
          (template_hole 12,
           template_app
            (template_hole 11, template_app (template_hole 10, t_empty))),
         template_app
          (template_hole 11, template_app (template_hole 10, t_empty)))))]:
   (string * thm * template) list
### theory "Draft.JVMDefensiveMoreTemplates"
### 0.394s elapsed time, 0.562s cpu time, 0.055s GC time
val it = (): unit
