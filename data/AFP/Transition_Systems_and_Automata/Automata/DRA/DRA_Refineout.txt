Loading theory "Draft.Basic" (required by "Draft.DRA_RefineTemplates" via "Draft.DRA_Refine" via "Draft.DRA" via "Draft.Deterministic" via "Draft.Transition_System" via "Draft.Sequence")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.DRA_RefineTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.DRA_RefineTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.DRA_RefineTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Draft.Basic"
### 0.051s elapsed time, 0.241s cpu time, 0.000s GC time
Loading theory "Draft.Sequence" (required by "Draft.DRA_RefineTemplates" via "Draft.DRA_Refine" via "Draft.DRA" via "Draft.Deterministic" via "Draft.Transition_System")
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.135s elapsed time, 0.535s cpu time, 0.053s GC time
[| inj_on ?f ?A; ?B <= ?A |] ==> inj_on ?f ?B
[| inj_on ?f ?B; ?A <= ?B |] ==> inj_on ?f ?A
### theory "HOL-Library.Set_Algebras"
### 0.212s elapsed time, 0.771s cpu time, 0.053s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.DRA_RefineTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  scan :: "('a => 'b => 'b) => 'a list => 'b => 'b list"
Found termination order: "size <*mlex*> {}"
consts
  sscan :: "('a => 'b => 'b) => 'a stream => 'b => 'b stream"
Found termination order: "size <*mlex*> {}"
consts
  stranspose :: "'a stream list => 'a list stream"
Proofs for coinductive predicate(s) "sdistinct"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "sascending"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
  Proving monotonicity ...
Proofs for coinductive predicate(s) "sdescending"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
### theory "Draft.Sequence"
### 0.795s elapsed time, 2.433s cpu time, 0.311s GC time
Loading theory "Draft.Transition_System" (required by "Draft.DRA_RefineTemplates" via "Draft.DRA_Refine" via "Draft.DRA" via "Draft.Deterministic")
Loading theory "Draft.Sequence_LTL" (required by "Draft.DRA_RefineTemplates" via "Draft.DRA_Refine" via "Draft.DRA" via "Draft.Deterministic" via "Draft.Transition_System_Extra")
Found termination order: "size <*mlex*> {}"
locale transition_system_universal
  fixes execute :: "'transition => 'state => 'state"
locale transition_system
  fixes execute :: "'transition => 'state => 'state"
    and enabled :: "'transition => 'state => bool"
Proofs for inductive predicate(s) "path"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "run"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
Proofs for inductive predicate(s) "reachablep"
  Proving monotonicity ...
### theory "HOL-Library.BigO"
### 0.769s elapsed time, 2.419s cpu time, 0.344s GC time
Found termination order: "size <*mlex*> {}"
locale transition_system_initial
  fixes execute :: "'transition => 'state => 'state"
    and enabled :: "'transition => 'state => bool"
    and initial :: "'state => bool"
Proofs for inductive predicate(s) "nodesp"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
### theory "Draft.Transition_System"
### 0.407s elapsed time, 1.391s cpu time, 0.588s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Sequence_LTL"
### 0.679s elapsed time, 1.960s cpu time, 0.645s GC time
Loading theory "Draft.Acceptance" (required by "Draft.DRA_RefineTemplates" via "Draft.DRA_Refine" via "Draft.DRA" via "Draft.Deterministic" via "Draft.Degeneralization")
Loading theory "Draft.Sequence_Zip" (required by "Draft.DRA_RefineTemplates" via "Draft.DRA_Refine" via "Draft.DRA" via "Draft.Deterministic" via "Draft.Degeneralization")
Loading theory "Draft.Transition_System_Construction" (required by "Draft.DRA_RefineTemplates" via "Draft.DRA_Refine" via "Draft.DRA" via "Draft.Deterministic")
### theory "Draft.Acceptance"
### 0.129s elapsed time, 0.478s cpu time, 0.077s GC time
Loading theory "Draft.Transition_System_Extra" (required by "Draft.DRA_RefineTemplates" via "Draft.DRA_Refine" via "Draft.DRA" via "Draft.Deterministic")
### theory "Draft.Sequence_Zip"
### 0.161s elapsed time, 0.612s cpu time, 0.077s GC time
Loading theory "Draft.Degeneralization" (required by "Draft.DRA_RefineTemplates" via "Draft.DRA_Refine" via "Draft.DRA" via "Draft.Deterministic")
locale transition_system
  fixes execute :: "'transition => 'state => 'state"
    and enabled :: "'transition => 'state => bool"
### theory "Draft.Transition_System_Construction"
### 0.293s elapsed time, 1.115s cpu time, 0.143s GC time
Loading theory "Draft.Maps" (required by "Draft.DRA_RefineTemplates" via "Draft.DRA_Refine" via "Draft.Acceptance_Refine" via "Draft.Refine")
Found termination order: "size <*mlex*> {}"
### theory "Draft.Maps"
### 0.075s elapsed time, 0.303s cpu time, 0.000s GC time
Loading theory "Draft.Refine" (required by "Draft.DRA_RefineTemplates" via "Draft.DRA_Refine" via "Draft.Acceptance_Refine")
locale transition_system
  fixes execute :: "'transition => 'state => 'state"
    and enabled :: "'transition => 'state => bool"
### theory "Draft.Degeneralization"
### 0.271s elapsed time, 1.036s cpu time, 0.138s GC time
locale transition_system_initial
  fixes execute :: "'transition => 'state => 'state"
    and enabled :: "'transition => 'state => bool"
    and initial :: "'state => bool"
### theory "Draft.Transition_System_Extra"
### 0.346s elapsed time, 1.292s cpu time, 0.138s GC time
Loading theory "Draft.Deterministic" (required by "Draft.DRA_RefineTemplates" via "Draft.DRA_Refine" via "Draft.DRA")
### theory "HOL-Library.Tree"
### 2.063s elapsed time, 6.602s cpu time, 1.170s GC time
Loading theory "Draft.Templates" (required by "Draft.DRA_RefineTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.090s elapsed time, 0.303s cpu time, 0.102s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.DRA_RefineTemplates")
locale automaton
  fixes
    automaton ::
      "'label set
       => 'state
          => ('label => 'state => 'state) => 'condition => 'automaton"
    and alphabet :: "'automaton => 'label set"
    and initial :: "'automaton => 'state"
    and transition :: "'automaton => 'label => 'state => 'state"
    and condition :: "'automaton => 'condition"
  assumes "automaton automaton alphabet initial transition condition"
rel_fun (rel_fun ?A ?B) (rel_fun (rel_set ?A) (rel_set ?B)) (`) (`)
((`), (`))
: (?A \<rightarrow> ?B) \<rightarrow>
  \<langle>?A\<rangle>set_rel \<rightarrow> \<langle>?B\<rangle>set_rel
bi_unique ?A ==>
rel_fun (rel_fun ?A ?B) (rel_fun ?A (rel_fun ?B (rel_fun ?A ?B))) fun_upd
 fun_upd
bijective ?A ==>
(fun_upd, fun_upd)
: (?A \<rightarrow> ?B) \<rightarrow>
  ?A \<rightarrow> ?B \<rightarrow> ?A \<rightarrow> ?B
locale automaton_path
  fixes
    automaton ::
      "'label set
       => 'state
          => ('label => 'state => 'state) => 'condition => 'automaton"
    and alphabet :: "'automaton => 'label set"
    and initial :: "'automaton => 'state"
    and transition :: "'automaton => 'label => 'state => 'state"
    and condition :: "'automaton => 'condition"
    and test :: "'condition => 'label list => 'state list => 'state => bool"
  assumes "automaton_path automaton alphabet initial transition condition"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.781s elapsed time, 2.508s cpu time, 0.871s GC time
locale automaton_run
  fixes
    automaton ::
      "'label set
       => 'state
          => ('label => 'state => 'state) => 'condition => 'automaton"
    and alphabet :: "'automaton => 'label set"
    and initial :: "'automaton => 'state"
    and transition :: "'automaton => 'label => 'state => 'state"
    and condition :: "'automaton => 'condition"
    and
    test :: "'condition => 'label stream => 'state stream => 'state => bool"
  assumes "automaton_run automaton alphabet initial transition condition"
single_valued ?Ra ==>
(set, set)
: \<langle>?Ra\<rangle>list_rel \<rightarrow> \<langle>?Ra\<rangle>set_rel
(set, set)
: \<langle>?R\<rangle>list_rel \<rightarrow> \<langle>?R\<rangle>set_rel
"(set \<circ>\<circ> sort_key) (%x. x)"
  :: "'a list => 'a set"
### theory "Draft.Refine"
### 1.301s elapsed time, 3.892s cpu time, 1.106s GC time
Loading theory "Draft.Acceptance_Refine" (required by "Draft.DRA_RefineTemplates" via "Draft.DRA_Refine")
Loading theory "Draft.Transition_System_Refine" (required by "Draft.DRA_RefineTemplates" via "Draft.DRA_Refine")
"(((set \<circ>\<circ> map) f \<circ>\<circ> map) g \<circ>\<circ> map) h"
  :: "'c list => 'b set"
locale automaton_degeneralization
  fixes
    automaton\<^sub>1 ::
      "'label set
       => 'state
          => ('label => 'state => 'state)
             => ('item => bool) list => 'automaton\<^sub>1"
    and alphabet\<^sub>1 :: "'automaton\<^sub>1 => 'label set"
    and initial\<^sub>1 :: "'automaton\<^sub>1 => 'state"
    and
    transition\<^sub>1 :: "'automaton\<^sub>1 => 'label => 'state => 'state"
    and condition\<^sub>1 :: "'automaton\<^sub>1 => ('item => bool) list"
    and
    automaton\<^sub>2 ::
      "'label set
       => 'state * nat
          => ('label => 'state * nat => 'state * nat)
             => ('item_degen => bool) => 'automaton\<^sub>2"
    and alphabet\<^sub>2 :: "'automaton\<^sub>2 => 'label set"
    and initial\<^sub>2 :: "'automaton\<^sub>2 => 'state * nat"
    and
    transition\<^sub>2 ::
      "'automaton\<^sub>2 => 'label => 'state * nat => 'state * nat"
    and condition\<^sub>2 :: "'automaton\<^sub>2 => 'item_degen => bool"
    and item :: "'state * 'label * 'state => 'item"
    and translate :: "'item_degen => 'item * nat"
  assumes
    "automaton_degeneralization automaton\<^sub>1 alphabet\<^sub>1
      initial\<^sub>1 transition\<^sub>1 condition\<^sub>1 automaton\<^sub>2
      alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2 condition\<^sub>2"
### theory "Draft.Acceptance_Refine"
### 0.387s elapsed time, 1.163s cpu time, 0.147s GC time
### theory "Draft.Transition_System_Refine"
### 0.413s elapsed time, 1.212s cpu time, 0.147s GC time
locale automaton_degeneralization_run
  fixes
    automaton\<^sub>1 ::
      "'a set => 'b => ('a => 'b => 'b) => ('c => bool) list => 'd"
    and alphabet\<^sub>1 :: "'d => 'a set"
    and initial\<^sub>1 :: "'d => 'b"
    and transition\<^sub>1 :: "'d => 'a => 'b => 'b"
    and condition\<^sub>1 :: "'d => ('c => bool) list"
    and
    test\<^sub>1 ::
      "('c => bool) list => 'a stream => 'b stream => 'b => bool"
    and
    automaton\<^sub>2 ::
      "'a set
       => 'b * nat => ('a => 'b * nat => 'b * nat) => ('e => bool) => 'f"
    and alphabet\<^sub>2 :: "'f => 'a set"
    and initial\<^sub>2 :: "'f => 'b * nat"
    and transition\<^sub>2 :: "'f => 'a => 'b * nat => 'b * nat"
    and condition\<^sub>2 :: "'f => 'e => bool"
    and
    test\<^sub>2 ::
      "('e => bool) => 'a stream => ('b * nat) stream => 'b * nat => bool"
    and item :: "'b * 'a * 'b => 'c"
    and translate :: "'e => 'c * nat"
  assumes
    "automaton_degeneralization_run automaton\<^sub>1 alphabet\<^sub>1
      initial\<^sub>1 transition\<^sub>1 condition\<^sub>1 test\<^sub>1
      automaton\<^sub>2 alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2
      condition\<^sub>2 test\<^sub>2 item translate"
locale automaton_product
  fixes
    automaton\<^sub>1 ::
      "'label set
       => 'state\<^sub>1
          => ('label => 'state\<^sub>1 => 'state\<^sub>1)
             => 'condition\<^sub>1 => 'automaton\<^sub>1"
    and alphabet\<^sub>1 :: "'automaton\<^sub>1 => 'label set"
    and initial\<^sub>1 :: "'automaton\<^sub>1 => 'state\<^sub>1"
    and
    transition\<^sub>1 ::
      "'automaton\<^sub>1 => 'label => 'state\<^sub>1 => 'state\<^sub>1"
    and condition\<^sub>1 :: "'automaton\<^sub>1 => 'condition\<^sub>1"
    and
    automaton\<^sub>2 ::
      "'label set
       => 'state\<^sub>2
          => ('label => 'state\<^sub>2 => 'state\<^sub>2)
             => 'condition\<^sub>2 => 'automaton\<^sub>2"
    and alphabet\<^sub>2 :: "'automaton\<^sub>2 => 'label set"
    and initial\<^sub>2 :: "'automaton\<^sub>2 => 'state\<^sub>2"
    and
    transition\<^sub>2 ::
      "'automaton\<^sub>2 => 'label => 'state\<^sub>2 => 'state\<^sub>2"
    and condition\<^sub>2 :: "'automaton\<^sub>2 => 'condition\<^sub>2"
    and
    automaton\<^sub>3 ::
      "'label set
       => 'state\<^sub>1 * 'state\<^sub>2
          => ('label
              => 'state\<^sub>1 * 'state\<^sub>2
                 => 'state\<^sub>1 * 'state\<^sub>2)
             => 'condition\<^sub>3 => 'automaton\<^sub>3"
    and alphabet\<^sub>3 :: "'automaton\<^sub>3 => 'label set"
    and
    initial\<^sub>3 ::
      "'automaton\<^sub>3 => 'state\<^sub>1 * 'state\<^sub>2"
    and
    transition\<^sub>3 ::
      "'automaton\<^sub>3
       => 'label
          => 'state\<^sub>1 * 'state\<^sub>2
             => 'state\<^sub>1 * 'state\<^sub>2"
    and condition\<^sub>3 :: "'automaton\<^sub>3 => 'condition\<^sub>3"
    and
    condition ::
      "'condition\<^sub>1 => 'condition\<^sub>2 => 'condition\<^sub>3"
  assumes
    "automaton_product automaton\<^sub>1 alphabet\<^sub>1 initial\<^sub>1
      transition\<^sub>1 condition\<^sub>1 automaton\<^sub>2
      alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2 condition\<^sub>2
      automaton\<^sub>3 alphabet\<^sub>3 initial\<^sub>3 transition\<^sub>3
      condition\<^sub>3"
locale automaton_intersection_path
  fixes automaton\<^sub>1 :: "'a set => 'b => ('a => 'b => 'b) => 'c => 'd"
    and alphabet\<^sub>1 :: "'d => 'a set"
    and initial\<^sub>1 :: "'d => 'b"
    and transition\<^sub>1 :: "'d => 'a => 'b => 'b"
    and condition\<^sub>1 :: "'d => 'c"
    and test\<^sub>1 :: "'c => 'a list => 'b list => 'b => bool"
    and automaton\<^sub>2 :: "'a set => 'e => ('a => 'e => 'e) => 'f => 'g"
    and alphabet\<^sub>2 :: "'g => 'a set"
    and initial\<^sub>2 :: "'g => 'e"
    and transition\<^sub>2 :: "'g => 'a => 'e => 'e"
    and condition\<^sub>2 :: "'g => 'f"
    and test\<^sub>2 :: "'f => 'a list => 'e list => 'e => bool"
    and
    automaton\<^sub>3 ::
      "'a set => 'b * 'e => ('a => 'b * 'e => 'b * 'e) => 'h => 'i"
    and alphabet\<^sub>3 :: "'i => 'a set"
    and initial\<^sub>3 :: "'i => 'b * 'e"
    and transition\<^sub>3 :: "'i => 'a => 'b * 'e => 'b * 'e"
    and condition\<^sub>3 :: "'i => 'h"
    and test\<^sub>3 :: "'h => 'a list => ('b * 'e) list => 'b * 'e => bool"
    and condition :: "'c => 'f => 'h"
  assumes
    "automaton_intersection_path automaton\<^sub>1 alphabet\<^sub>1
      initial\<^sub>1 transition\<^sub>1 condition\<^sub>1 test\<^sub>1
      automaton\<^sub>2 alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2
      condition\<^sub>2 test\<^sub>2 automaton\<^sub>3 alphabet\<^sub>3
      initial\<^sub>3 transition\<^sub>3 condition\<^sub>3 test\<^sub>3
      condition"
locale automaton_union_path
  fixes automaton\<^sub>1 :: "'a set => 'b => ('a => 'b => 'b) => 'c => 'd"
    and alphabet\<^sub>1 :: "'d => 'a set"
    and initial\<^sub>1 :: "'d => 'b"
    and transition\<^sub>1 :: "'d => 'a => 'b => 'b"
    and condition\<^sub>1 :: "'d => 'c"
    and test\<^sub>1 :: "'c => 'a list => 'b list => 'b => bool"
    and automaton\<^sub>2 :: "'a set => 'e => ('a => 'e => 'e) => 'f => 'g"
    and alphabet\<^sub>2 :: "'g => 'a set"
    and initial\<^sub>2 :: "'g => 'e"
    and transition\<^sub>2 :: "'g => 'a => 'e => 'e"
    and condition\<^sub>2 :: "'g => 'f"
    and test\<^sub>2 :: "'f => 'a list => 'e list => 'e => bool"
    and
    automaton\<^sub>3 ::
      "'a set => 'b * 'e => ('a => 'b * 'e => 'b * 'e) => 'h => 'i"
    and alphabet\<^sub>3 :: "'i => 'a set"
    and initial\<^sub>3 :: "'i => 'b * 'e"
    and transition\<^sub>3 :: "'i => 'a => 'b * 'e => 'b * 'e"
    and condition\<^sub>3 :: "'i => 'h"
    and test\<^sub>3 :: "'h => 'a list => ('b * 'e) list => 'b * 'e => bool"
    and condition :: "'c => 'f => 'h"
  assumes
    "automaton_union_path automaton\<^sub>1 alphabet\<^sub>1 initial\<^sub>1
      transition\<^sub>1 condition\<^sub>1 test\<^sub>1 automaton\<^sub>2
      alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2 condition\<^sub>2
      test\<^sub>2 automaton\<^sub>3 alphabet\<^sub>3 initial\<^sub>3
      transition\<^sub>3 condition\<^sub>3 test\<^sub>3 condition"
locale automaton_intersection_run
  fixes automaton\<^sub>1 :: "'a set => 'b => ('a => 'b => 'b) => 'c => 'd"
    and alphabet\<^sub>1 :: "'d => 'a set"
    and initial\<^sub>1 :: "'d => 'b"
    and transition\<^sub>1 :: "'d => 'a => 'b => 'b"
    and condition\<^sub>1 :: "'d => 'c"
    and test\<^sub>1 :: "'c => 'a stream => 'b stream => 'b => bool"
    and automaton\<^sub>2 :: "'a set => 'e => ('a => 'e => 'e) => 'f => 'g"
    and alphabet\<^sub>2 :: "'g => 'a set"
    and initial\<^sub>2 :: "'g => 'e"
    and transition\<^sub>2 :: "'g => 'a => 'e => 'e"
    and condition\<^sub>2 :: "'g => 'f"
    and test\<^sub>2 :: "'f => 'a stream => 'e stream => 'e => bool"
    and
    automaton\<^sub>3 ::
      "'a set => 'b * 'e => ('a => 'b * 'e => 'b * 'e) => 'h => 'i"
    and alphabet\<^sub>3 :: "'i => 'a set"
    and initial\<^sub>3 :: "'i => 'b * 'e"
    and transition\<^sub>3 :: "'i => 'a => 'b * 'e => 'b * 'e"
    and condition\<^sub>3 :: "'i => 'h"
    and
    test\<^sub>3 :: "'h => 'a stream => ('b * 'e) stream => 'b * 'e => bool"
    and condition :: "'c => 'f => 'h"
  assumes
    "automaton_intersection_run automaton\<^sub>1 alphabet\<^sub>1
      initial\<^sub>1 transition\<^sub>1 condition\<^sub>1 test\<^sub>1
      automaton\<^sub>2 alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2
      condition\<^sub>2 test\<^sub>2 automaton\<^sub>3 alphabet\<^sub>3
      initial\<^sub>3 transition\<^sub>3 condition\<^sub>3 test\<^sub>3
      condition"
locale automaton_union_run
  fixes automaton\<^sub>1 :: "'a set => 'b => ('a => 'b => 'b) => 'c => 'd"
    and alphabet\<^sub>1 :: "'d => 'a set"
    and initial\<^sub>1 :: "'d => 'b"
    and transition\<^sub>1 :: "'d => 'a => 'b => 'b"
    and condition\<^sub>1 :: "'d => 'c"
    and test\<^sub>1 :: "'c => 'a stream => 'b stream => 'b => bool"
    and automaton\<^sub>2 :: "'a set => 'e => ('a => 'e => 'e) => 'f => 'g"
    and alphabet\<^sub>2 :: "'g => 'a set"
    and initial\<^sub>2 :: "'g => 'e"
    and transition\<^sub>2 :: "'g => 'a => 'e => 'e"
    and condition\<^sub>2 :: "'g => 'f"
    and test\<^sub>2 :: "'f => 'a stream => 'e stream => 'e => bool"
    and
    automaton\<^sub>3 ::
      "'a set => 'b * 'e => ('a => 'b * 'e => 'b * 'e) => 'h => 'i"
    and alphabet\<^sub>3 :: "'i => 'a set"
    and initial\<^sub>3 :: "'i => 'b * 'e"
    and transition\<^sub>3 :: "'i => 'a => 'b * 'e => 'b * 'e"
    and condition\<^sub>3 :: "'i => 'h"
    and
    test\<^sub>3 :: "'h => 'a stream => ('b * 'e) stream => 'b * 'e => bool"
    and condition :: "'c => 'f => 'h"
  assumes
    "automaton_union_run automaton\<^sub>1 alphabet\<^sub>1 initial\<^sub>1
      transition\<^sub>1 condition\<^sub>1 test\<^sub>1 automaton\<^sub>2
      alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2 condition\<^sub>2
      test\<^sub>2 automaton\<^sub>3 alphabet\<^sub>3 initial\<^sub>3
      transition\<^sub>3 condition\<^sub>3 test\<^sub>3 condition"
locale automaton_product_list
  fixes
    automaton\<^sub>1 ::
      "'label set
       => 'state
          => ('label => 'state => 'state)
             => 'condition\<^sub>1 => 'automaton\<^sub>1"
    and alphabet\<^sub>1 :: "'automaton\<^sub>1 => 'label set"
    and initial\<^sub>1 :: "'automaton\<^sub>1 => 'state"
    and
    transition\<^sub>1 :: "'automaton\<^sub>1 => 'label => 'state => 'state"
    and condition\<^sub>1 :: "'automaton\<^sub>1 => 'condition\<^sub>1"
    and
    automaton\<^sub>2 ::
      "'label set
       => 'state list
          => ('label => 'state list => 'state list)
             => 'condition\<^sub>2 => 'automaton\<^sub>2"
    and alphabet\<^sub>2 :: "'automaton\<^sub>2 => 'label set"
    and initial\<^sub>2 :: "'automaton\<^sub>2 => 'state list"
    and
    transition\<^sub>2 ::
      "'automaton\<^sub>2 => 'label => 'state list => 'state list"
    and condition\<^sub>2 :: "'automaton\<^sub>2 => 'condition\<^sub>2"
    and condition :: "'condition\<^sub>1 list => 'condition\<^sub>2"
  assumes
    "automaton_product_list automaton\<^sub>1 alphabet\<^sub>1
      initial\<^sub>1 transition\<^sub>1 condition\<^sub>1 automaton\<^sub>2
      alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2 condition\<^sub>2"
locale automaton_intersection_list_run
  fixes automaton\<^sub>1 :: "'a set => 'b => ('a => 'b => 'b) => 'c => 'd"
    and alphabet\<^sub>1 :: "'d => 'a set"
    and initial\<^sub>1 :: "'d => 'b"
    and transition\<^sub>1 :: "'d => 'a => 'b => 'b"
    and condition\<^sub>1 :: "'d => 'c"
    and test\<^sub>1 :: "'c => 'a stream => 'b stream => 'b => bool"
    and
    automaton\<^sub>2 ::
      "'a set => 'b list => ('a => 'b list => 'b list) => 'e => 'f"
    and alphabet\<^sub>2 :: "'f => 'a set"
    and initial\<^sub>2 :: "'f => 'b list"
    and transition\<^sub>2 :: "'f => 'a => 'b list => 'b list"
    and condition\<^sub>2 :: "'f => 'e"
    and
    test\<^sub>2 :: "'e => 'a stream => 'b list stream => 'b list => bool"
    and condition :: "'c list => 'e"
  assumes
    "automaton_intersection_list_run automaton\<^sub>1 alphabet\<^sub>1
      initial\<^sub>1 transition\<^sub>1 condition\<^sub>1 test\<^sub>1
      automaton\<^sub>2 alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2
      condition\<^sub>2 test\<^sub>2 condition"
locale automaton_union_list_run
  fixes automaton\<^sub>1 :: "'a set => 'b => ('a => 'b => 'b) => 'c => 'd"
    and alphabet\<^sub>1 :: "'d => 'a set"
    and initial\<^sub>1 :: "'d => 'b"
    and transition\<^sub>1 :: "'d => 'a => 'b => 'b"
    and condition\<^sub>1 :: "'d => 'c"
    and test\<^sub>1 :: "'c => 'a stream => 'b stream => 'b => bool"
    and
    automaton\<^sub>2 ::
      "'a set => 'b list => ('a => 'b list => 'b list) => 'e => 'f"
    and alphabet\<^sub>2 :: "'f => 'a set"
    and initial\<^sub>2 :: "'f => 'b list"
    and transition\<^sub>2 :: "'f => 'a => 'b list => 'b list"
    and condition\<^sub>2 :: "'f => 'e"
    and
    test\<^sub>2 :: "'e => 'a stream => 'b list stream => 'b list => bool"
    and condition :: "'c list => 'e"
  assumes
    "automaton_union_list_run automaton\<^sub>1 alphabet\<^sub>1
      initial\<^sub>1 transition\<^sub>1 condition\<^sub>1 test\<^sub>1
      automaton\<^sub>2 alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2
      condition\<^sub>2 test\<^sub>2 condition"
locale automaton_complement
  fixes
    automaton\<^sub>1 ::
      "'label set
       => 'state
          => ('label => 'state => 'state)
             => 'condition\<^sub>1 => 'automaton\<^sub>1"
    and alphabet\<^sub>1 :: "'automaton\<^sub>1 => 'label set"
    and initial\<^sub>1 :: "'automaton\<^sub>1 => 'state"
    and
    transition\<^sub>1 :: "'automaton\<^sub>1 => 'label => 'state => 'state"
    and condition\<^sub>1 :: "'automaton\<^sub>1 => 'condition\<^sub>1"
    and
    automaton\<^sub>2 ::
      "'label set
       => 'state
          => ('label => 'state => 'state)
             => 'condition\<^sub>2 => 'automaton\<^sub>2"
    and alphabet\<^sub>2 :: "'automaton\<^sub>2 => 'label set"
    and initial\<^sub>2 :: "'automaton\<^sub>2 => 'state"
    and
    transition\<^sub>2 :: "'automaton\<^sub>2 => 'label => 'state => 'state"
    and condition\<^sub>2 :: "'automaton\<^sub>2 => 'condition\<^sub>2"
    and condition :: "'condition\<^sub>1 => 'condition\<^sub>2"
  assumes
    "automaton_complement automaton\<^sub>1 alphabet\<^sub>1 initial\<^sub>1
      transition\<^sub>1 condition\<^sub>1 automaton\<^sub>2
      alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2 condition\<^sub>2"
locale automaton_complement_path
  fixes automaton\<^sub>1 :: "'a set => 'b => ('a => 'b => 'b) => 'c => 'd"
    and alphabet\<^sub>1 :: "'d => 'a set"
    and initial\<^sub>1 :: "'d => 'b"
    and transition\<^sub>1 :: "'d => 'a => 'b => 'b"
    and condition\<^sub>1 :: "'d => 'c"
    and test\<^sub>1 :: "'c => 'a list => 'b list => 'b => bool"
    and automaton\<^sub>2 :: "'a set => 'b => ('a => 'b => 'b) => 'e => 'f"
    and alphabet\<^sub>2 :: "'f => 'a set"
    and initial\<^sub>2 :: "'f => 'b"
    and transition\<^sub>2 :: "'f => 'a => 'b => 'b"
    and condition\<^sub>2 :: "'f => 'e"
    and test\<^sub>2 :: "'e => 'a list => 'b list => 'b => bool"
    and condition :: "'c => 'e"
  assumes
    "automaton_complement_path automaton\<^sub>1 alphabet\<^sub>1
      initial\<^sub>1 transition\<^sub>1 condition\<^sub>1 test\<^sub>1
      automaton\<^sub>2 alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2
      condition\<^sub>2 test\<^sub>2 condition"
locale automaton_complement_run
  fixes automaton\<^sub>1 :: "'a set => 'b => ('a => 'b => 'b) => 'c => 'd"
    and alphabet\<^sub>1 :: "'d => 'a set"
    and initial\<^sub>1 :: "'d => 'b"
    and transition\<^sub>1 :: "'d => 'a => 'b => 'b"
    and condition\<^sub>1 :: "'d => 'c"
    and test\<^sub>1 :: "'c => 'a stream => 'b stream => 'b => bool"
    and automaton\<^sub>2 :: "'a set => 'b => ('a => 'b => 'b) => 'e => 'f"
    and alphabet\<^sub>2 :: "'f => 'a set"
    and initial\<^sub>2 :: "'f => 'b"
    and transition\<^sub>2 :: "'f => 'a => 'b => 'b"
    and condition\<^sub>2 :: "'f => 'e"
    and test\<^sub>2 :: "'e => 'a stream => 'b stream => 'b => bool"
    and condition :: "'c => 'e"
  assumes
    "automaton_complement_run automaton\<^sub>1 alphabet\<^sub>1
      initial\<^sub>1 transition\<^sub>1 condition\<^sub>1 test\<^sub>1
      automaton\<^sub>2 alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2
      condition\<^sub>2 test\<^sub>2 condition"
### theory "Draft.Deterministic"
### 5.764s elapsed time, 9.714s cpu time, 2.344s GC time
Loading theory "Draft.DRA" (required by "Draft.DRA_RefineTemplates" via "Draft.DRA_Refine")
### theory "Draft.DRA"
### 0.668s elapsed time, 0.707s cpu time, 0.057s GC time
Loading theory "Draft.DRA_Refine" (required by "Draft.DRA_RefineTemplates")
### theory "Draft.DRA_Refine"
### 0.480s elapsed time, 0.545s cpu time, 0.070s GC time
Loading theory "Draft.DRA_RefineTemplates"
val templateLemmas =
   [("DRA_Refine.dra_param",
     "(initial, initial)
      : \<langle>?L, ?S\<rangle>dra_rel \<rightarrow> ?S",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_hole 7),
               template_hole 6)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_hole 0),
                       template_var 1)),
                   template_var 0))),
             template_var 0))
         )),
    ("DRA_Refine.dra_rel_eq",
     "(?A, ?A) : \<langle>Id_on (alphabet ?A),
      Id_on (nodes ?A)\<rangle>dra_rel",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_var 0),
               template_var 0)),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)))),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0))))
         )),
    ("DRA_Refine.dra_rel_converse",
     "(\<langle>?L, ?S\<rangle>dra_rel)^-1 = \<langle>?L^-1,
      ?S^-1\<rangle>dra_rel",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app (template_hole 1, template_var 1))),
         template_app (template_hole 0, template_var 0)))),
    ("DRA_Refine.dra_param",
     "(alphabet, alphabet)
      : \<langle>?L, ?S\<rangle>dra_rel \<rightarrow>
        \<langle>?L\<rangle>set_rel",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app (template_hole 10, template_hole 9),
               template_hole 8)),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_hole 2),
                       template_var 1)),
                   template_var 0))),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)))
         )),
    ("DRA_Refine.nodes_param",
     "(nodes, nodes)
      : \<langle>?L, ?S\<rangle>dra_rel \<rightarrow>
        \<langle>?S\<rangle>set_rel",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app (template_hole 10, template_hole 9),
               template_hole 8)),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_hole 2),
                       template_var 1)),
                   template_var 0))),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0)))
         )),
    ("DRA_Refine.language_param",
     "(language, language)
      : \<langle>?L, ?S\<rangle>dra_rel \<rightarrow>
        \<langle>\<langle>?L\<rangle>stream_rel\<rangle>set_rel",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app (template_hole 12, template_hole 11),
               template_hole 10)),
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_hole 4),
                       template_var 1)),
                   template_var 0))),
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1))))
         )),
    ("DRA_Refine.reachable_param",
     "(reachable, reachable)
      : \<langle>?L, ?S\<rangle>dra_rel \<rightarrow>
        ?S \<rightarrow> \<langle>?S\<rangle>set_rel",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 14,
             template_app
              (template_app (template_hole 13, template_hole 12),
               template_hole 11)),
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 9, template_hole 8),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 6, template_hole 5),
                       template_var 1)),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_var 0)),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0))))
         )),
    ("DRA_Refine.dra_param",
     "(transition, transition)
      : \<langle>?L, ?S\<rangle>dra_rel \<rightarrow>
        ?L \<rightarrow> ?S \<rightarrow> ?S",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 15,
             template_app
              (template_app (template_hole 14, template_hole 13),
               template_hole 12)),
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app (template_hole 10, template_hole 9),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 7, template_hole 6),
                       template_var 1)),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_var 0)),
                 template_var 0))))
         )),
    ("DRA_Refine.dra_param",
     "(condition, condition)
      : \<langle>?L, ?S\<rangle>dra_rel \<rightarrow>
        \<langle>(?S \<rightarrow> bool_rel) \<times>\<^sub>r
                 (?S \<rightarrow> bool_rel)\<rangle>list_rel",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 18,
             template_app
              (template_app (template_hole 17, template_hole 16),
               template_hole 15)),
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app (template_hole 13, template_hole 12),
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_app (template_hole 10, template_hole 9),
                       template_var 1)),
                   template_var 0))),
             template_app
              (template_app (template_hole 8, template_hole 7),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_app (template_hole 2, template_hole 1),
                           template_var 0)),
                       template_hole 0))),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_hole 1),
                       template_var 0)),
                   template_hole 0)))))
         )),
    ("DRA_Refine.enableds_param",
     "(dra.enableds, dra.enableds)
      : \<langle>?L, ?S\<rangle>dra_rel \<rightarrow>
        ?S \<rightarrow> \<langle>?L\<rangle>set_rel",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 18,
             template_app
              (template_app (template_hole 17, t_empty), t_empty)),
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 9, template_hole 8),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 6, template_hole 5),
                       template_var 1)),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_var 0)),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1))))
         )),
    ("DRA_Refine.dra_rel_comp",
     "[| (?A, ?B) : \<langle>?L\<^sub>1, ?S\<^sub>1\<rangle>dra_rel;
         (?B, ?C) : \<langle>?L\<^sub>2, ?S\<^sub>2\<rangle>dra_rel |]
      ==> (?A, ?C) : \<langle>?L\<^sub>1 O ?L\<^sub>2,
          ?S\<^sub>1 O ?S\<^sub>2\<rangle>dra_rel",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app (template_hole 15, template_var 6),
                  template_var 5)),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app (template_hole 13, template_hole 12),
                    template_var 4)),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 5),
                  template_var 2)),
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 8, template_hole 7),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 6),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_app
                    (template_app (template_hole 1, template_var 4),
                     template_var 1))),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)))
           ))),
    ("DRA_Refine.paths_param",
     "(dra.paths, dra.paths)
      : \<langle>?L, ?S\<rangle>dra_rel \<rightarrow>
        ?S \<rightarrow>
        \<langle>\<langle>?L\<rangle>list_rel\<rangle>set_rel",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 22,
             template_app
              (template_app (template_hole 21, t_empty), t_empty)),
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app (template_hole 11, template_hole 10),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app (template_hole 8, template_hole 7),
                       template_var 1)),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_var 0)),
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 1)))))
         )),
    ("DRA_Refine.runs_param",
     "(dra.runs, dra.runs)
      : \<langle>?L, ?S\<rangle>dra_rel \<rightarrow>
        ?S \<rightarrow>
        \<langle>\<langle>?L\<rangle>stream_rel\<rangle>set_rel",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 22,
             template_app
              (template_app (template_hole 21, t_empty), t_empty)),
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app (template_hole 11, template_hole 10),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app (template_hole 8, template_hole 7),
                       template_var 1)),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_var 0)),
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 1)))))
         )),
    ("DRA_Refine.dra_param",
     "(dra, dra)
      : \<langle>?L\<rangle>set_rel \<rightarrow>
        ?S \<rightarrow>
        (?L \<rightarrow> ?S \<rightarrow> ?S) \<rightarrow>
        \<langle>(?S \<rightarrow> bool_rel) \<times>\<^sub>r
                 (?S \<rightarrow> bool_rel)\<rangle>list_rel \<rightarrow>
        \<langle>?L, ?S\<rangle>dra_rel",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 35,
             template_app
              (template_app (template_hole 34, template_hole 33),
               template_hole 32)),
           template_app
            (template_app
              (template_hole 31,
               template_app
                (template_app (template_hole 30, template_hole 29),
                 template_app
                  (template_app (template_hole 28, template_hole 27),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 26,
                 template_app
                  (template_app (template_hole 25, template_hole 24),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 23,
                   template_app
                    (template_app (template_hole 22, template_hole 21),
                     template_app
                      (template_app
                        (template_hole 20,
                         template_app
                          (template_app
                            (template_hole 19, template_hole 18),
                           template_var 1)),
                       template_app
                        (template_app
                          (template_hole 17,
                           template_app
                            (template_app
                              (template_hole 16, template_hole 15),
                             template_var 0)),
                         template_var 0)))),
                 template_app
                  (template_app
                    (template_hole 14,
                     template_app
                      (template_app (template_hole 13, template_hole 12),
                       template_app
                        (template_app (template_hole 11, template_hole 10),
                         template_app
                          (template_app
                            (template_hole 9,
                             template_app
                              (template_app
                                (template_hole 8, template_hole 7),
                               template_app
                                (template_app
                                  (template_hole 6,
                                   template_app
                                    (template_app
(template_hole 5, template_hole 4),
                                     template_var 0)),
                                 template_hole 3))),
                           template_app
                            (template_app
                              (template_hole 6,
                               template_app
                                (template_app
                                  (template_hole 5, template_hole 4),
                                 template_var 0)),
                             template_hole 3))))),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_hole 0),
                         template_var 1)),
                     template_var 0))))))
         ))]:
   (string * thm * template) list
### theory "Draft.DRA_RefineTemplates"
### 0.535s elapsed time, 0.720s cpu time, 0.091s GC time
val it = (): unit
