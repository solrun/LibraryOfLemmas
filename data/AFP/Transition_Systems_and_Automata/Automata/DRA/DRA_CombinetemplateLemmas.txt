   [("DRA_Combine.intersect_bc_language",
     "DRA.language (intersect_bc ?A ?B) =
      DBA.language ?A Int DCA.language ?B",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("DRA_Combine.union_list_nodes_finite",
     "list_all (finite o DRA.nodes) ?AA ==>
      finite (DRA.nodes (union_list ?AA))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  t_empty)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("DRA_Combine.intersect_bc_nodes_finite",
     "[| finite (DBA.nodes ?A); finite (DCA.nodes ?B) |]
      ==> finite (DRA.nodes (intersect_bc ?A ?B))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("DRA_Combine.union_list_nodes_card",
     "list_all (finite o DRA.nodes) ?AA ==>
      card (DRA.nodes (union_list ?AA))
      <= prod_list (map (card o DRA.nodes) ?AA)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_hole 9),
                  t_empty)),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0))),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 0), t_empty)),
             template_var 0))))),
    ("DRA_Combine.union_list_language",
     "\<Inter> (dra.alphabet ` set ?AA) =
      \<Union> (dra.alphabet ` set ?AA) ==>
      DRA.language (union_list ?AA) = \<Union> (DRA.language ` set ?AA)",
     template_implication
      ([template_equation
         (template_app
           (template_hole 10,
            template_app
             (template_app (template_hole 9, template_hole 8),
              template_app (template_hole 7, template_var 0))),
          template_app
           (template_hole 6,
            template_app
             (template_app (template_hole 9, template_hole 8),
              template_app (template_hole 7, template_var 0))))],
       template_equation
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_app (template_hole 7, template_var 0)))))),
    ("DRA_Combine.intersect_bc_nodes_card",
     "[| finite (DBA.nodes ?A); finite (DCA.nodes ?B) |]
      ==> card (DRA.nodes (intersect_bc ?A ?B))
          <= card (DBA.nodes ?A) * card (DCA.nodes ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 9, template_var 1))),
           template_app
            (template_hole 0,
             template_app (template_hole 7, template_var 0))))))]
