Loading theory "Draft.Basic" (required by "Draft.DRA_TranslateTemplates" via "Draft.DRA_Translate" via "Draft.DRA_Explicit" via "Draft.DRA_Nodes" via "Draft.DRA_Implement" via "Draft.DRA_Refine" via "Draft.DRA" via "Draft.Deterministic" via "Draft.Transition_System" via "Draft.Sequence")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.DRA_TranslateTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.DRA_TranslateTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.DRA_TranslateTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Draft.Basic"
### 0.057s elapsed time, 0.265s cpu time, 0.000s GC time
Loading theory "Draft.Sequence" (required by "Draft.DRA_TranslateTemplates" via "Draft.DRA_Translate" via "Draft.DRA_Explicit" via "Draft.DRA_Nodes" via "Draft.DRA_Implement" via "Draft.DRA_Refine" via "Draft.DRA" via "Draft.Deterministic" via "Draft.Transition_System")
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.158s elapsed time, 0.637s cpu time, 0.057s GC time
[| inj_on ?f ?A; ?B <= ?A |] ==> inj_on ?f ?B
[| inj_on ?f ?B; ?A <= ?B |] ==> inj_on ?f ?A
### theory "HOL-Library.Set_Algebras"
### 0.225s elapsed time, 0.845s cpu time, 0.057s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.DRA_TranslateTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  scan :: "('a => 'b => 'b) => 'a list => 'b => 'b list"
Found termination order: "size <*mlex*> {}"
consts
  sscan :: "('a => 'b => 'b) => 'a stream => 'b => 'b stream"
Found termination order: "size <*mlex*> {}"
consts
  stranspose :: "'a stream list => 'a list stream"
Proofs for coinductive predicate(s) "sdistinct"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Proofs for coinductive predicate(s) "sascending"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "sdescending"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "Draft.Sequence"
### 0.810s elapsed time, 2.502s cpu time, 0.281s GC time
Loading theory "Draft.Transition_System" (required by "Draft.DRA_TranslateTemplates" via "Draft.DRA_Translate" via "Draft.DRA_Explicit" via "Draft.DRA_Nodes" via "Draft.DRA_Implement" via "Draft.DRA_Refine" via "Draft.DRA" via "Draft.Deterministic")
Loading theory "Draft.Sequence_LTL" (required by "Draft.DRA_TranslateTemplates" via "Draft.DRA_Translate" via "Draft.DRA_Explicit" via "Draft.DRA_Nodes" via "Draft.DRA_Implement" via "Draft.DRA_Refine" via "Draft.DRA" via "Draft.Deterministic" via "Draft.Transition_System_Extra")
locale transition_system_universal
  fixes execute :: "'transition => 'state => 'state"
locale transition_system
  fixes execute :: "'transition => 'state => 'state"
    and enabled :: "'transition => 'state => bool"
Proofs for inductive predicate(s) "path"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "run"
  Proving monotonicity ...
### theory "HOL-Library.BigO"
### 0.749s elapsed time, 2.321s cpu time, 0.293s GC time
Proofs for inductive predicate(s) "reachablep"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale transition_system_initial
  fixes execute :: "'transition => 'state => 'state"
    and enabled :: "'transition => 'state => bool"
    and initial :: "'state => bool"
Proofs for inductive predicate(s) "nodesp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "Draft.Transition_System"
### 0.409s elapsed time, 1.347s cpu time, 0.558s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Sequence_LTL"
### 0.706s elapsed time, 1.975s cpu time, 0.603s GC time
Loading theory "Draft.Sequence_Zip" (required by "Draft.DRA_TranslateTemplates" via "Draft.DRA_Translate" via "Draft.DRA_Explicit" via "Draft.DRA_Nodes" via "Draft.DRA_Implement" via "Draft.DRA_Refine" via "Draft.DRA" via "Draft.Deterministic" via "Draft.Degeneralization")
Loading theory "Draft.Acceptance" (required by "Draft.DRA_TranslateTemplates" via "Draft.DRA_Translate" via "Draft.DRA_Explicit" via "Draft.DRA_Nodes" via "Draft.DRA_Implement" via "Draft.DRA_Refine" via "Draft.DRA" via "Draft.Deterministic" via "Draft.Degeneralization")
Loading theory "Draft.Transition_System_Construction" (required by "Draft.DRA_TranslateTemplates" via "Draft.DRA_Translate" via "Draft.DRA_Explicit" via "Draft.DRA_Nodes" via "Draft.DRA_Implement" via "Draft.DRA_Refine" via "Draft.DRA" via "Draft.Deterministic")
### theory "Draft.Acceptance"
### 0.108s elapsed time, 0.397s cpu time, 0.082s GC time
Loading theory "Draft.Transition_System_Extra" (required by "Draft.DRA_TranslateTemplates" via "Draft.DRA_Translate" via "Draft.DRA_Explicit" via "Draft.DRA_Nodes" via "Draft.DRA_Implement" via "Draft.DRA_Refine" via "Draft.DRA" via "Draft.Deterministic")
### theory "Draft.Sequence_Zip"
### 0.168s elapsed time, 0.640s cpu time, 0.082s GC time
Loading theory "Draft.Degeneralization" (required by "Draft.DRA_TranslateTemplates" via "Draft.DRA_Translate" via "Draft.DRA_Explicit" via "Draft.DRA_Nodes" via "Draft.DRA_Implement" via "Draft.DRA_Refine" via "Draft.DRA" via "Draft.Deterministic")
locale transition_system
  fixes execute :: "'transition => 'state => 'state"
    and enabled :: "'transition => 'state => bool"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Transition_System_Construction"
### 0.324s elapsed time, 1.232s cpu time, 0.152s GC time
Loading theory "Draft.Maps" (required by "Draft.DRA_TranslateTemplates" via "Draft.DRA_Translate" via "Draft.DRA_Explicit" via "Draft.DRA_Nodes" via "Draft.DRA_Implement" via "Draft.DRA_Refine" via "Draft.Acceptance_Refine" via "Draft.Refine")
locale transition_system
  fixes execute :: "'transition => 'state => 'state"
    and enabled :: "'transition => 'state => bool"
### theory "Draft.Maps"
### 0.095s elapsed time, 0.347s cpu time, 0.062s GC time
Loading theory "Draft.Refine" (required by "Draft.DRA_TranslateTemplates" via "Draft.DRA_Translate" via "Draft.DRA_Explicit" via "Draft.DRA_Nodes" via "Draft.DRA_Implement" via "Draft.DRA_Refine" via "Draft.Acceptance_Refine")
locale transition_system_initial
  fixes execute :: "'transition => 'state => 'state"
    and enabled :: "'transition => 'state => bool"
    and initial :: "'state => bool"
### theory "Draft.Transition_System_Extra"
### 0.326s elapsed time, 1.251s cpu time, 0.132s GC time
### theory "Draft.Degeneralization"
### 0.270s elapsed time, 1.013s cpu time, 0.132s GC time
Loading theory "Draft.Deterministic" (required by "Draft.DRA_TranslateTemplates" via "Draft.DRA_Translate" via "Draft.DRA_Explicit" via "Draft.DRA_Nodes" via "Draft.DRA_Implement" via "Draft.DRA_Refine" via "Draft.DRA")
### theory "HOL-Library.Tree"
### 2.074s elapsed time, 6.590s cpu time, 1.099s GC time
Loading theory "Draft.Templates" (required by "Draft.DRA_TranslateTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.057s elapsed time, 0.195s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.DRA_TranslateTemplates")
locale automaton
  fixes
    automaton ::
      "'label set
       => 'state
          => ('label => 'state => 'state) => 'condition => 'automaton"
    and alphabet :: "'automaton => 'label set"
    and initial :: "'automaton => 'state"
    and transition :: "'automaton => 'label => 'state => 'state"
    and condition :: "'automaton => 'condition"
  assumes "automaton automaton alphabet initial transition condition"
rel_fun (rel_fun ?A ?B) (rel_fun (rel_set ?A) (rel_set ?B)) (`) (`)
((`), (`))
: (?A \<rightarrow> ?B) \<rightarrow>
  \<langle>?A\<rangle>set_rel \<rightarrow> \<langle>?B\<rangle>set_rel
bi_unique ?A ==>
rel_fun (rel_fun ?A ?B) (rel_fun ?A (rel_fun ?B (rel_fun ?A ?B))) fun_upd
 fun_upd
bijective ?A ==>
(fun_upd, fun_upd)
: (?A \<rightarrow> ?B) \<rightarrow>
  ?A \<rightarrow> ?B \<rightarrow> ?A \<rightarrow> ?B
locale automaton_path
  fixes
    automaton ::
      "'label set
       => 'state
          => ('label => 'state => 'state) => 'condition => 'automaton"
    and alphabet :: "'automaton => 'label set"
    and initial :: "'automaton => 'state"
    and transition :: "'automaton => 'label => 'state => 'state"
    and condition :: "'automaton => 'condition"
    and test :: "'condition => 'label list => 'state list => 'state => bool"
  assumes "automaton_path automaton alphabet initial transition condition"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.812s elapsed time, 2.566s cpu time, 0.945s GC time
locale automaton_run
  fixes
    automaton ::
      "'label set
       => 'state
          => ('label => 'state => 'state) => 'condition => 'automaton"
    and alphabet :: "'automaton => 'label set"
    and initial :: "'automaton => 'state"
    and transition :: "'automaton => 'label => 'state => 'state"
    and condition :: "'automaton => 'condition"
    and
    test :: "'condition => 'label stream => 'state stream => 'state => bool"
  assumes "automaton_run automaton alphabet initial transition condition"
single_valued ?Ra ==>
(set, set)
: \<langle>?Ra\<rangle>list_rel \<rightarrow> \<langle>?Ra\<rangle>set_rel
(set, set)
: \<langle>?R\<rangle>list_rel \<rightarrow> \<langle>?R\<rangle>set_rel
locale automaton_degeneralization
  fixes
    automaton\<^sub>1 ::
      "'label set
       => 'state
          => ('label => 'state => 'state)
             => ('item => bool) list => 'automaton\<^sub>1"
    and alphabet\<^sub>1 :: "'automaton\<^sub>1 => 'label set"
    and initial\<^sub>1 :: "'automaton\<^sub>1 => 'state"
    and
    transition\<^sub>1 :: "'automaton\<^sub>1 => 'label => 'state => 'state"
    and condition\<^sub>1 :: "'automaton\<^sub>1 => ('item => bool) list"
    and
    automaton\<^sub>2 ::
      "'label set
       => 'state * nat
          => ('label => 'state * nat => 'state * nat)
             => ('item_degen => bool) => 'automaton\<^sub>2"
    and alphabet\<^sub>2 :: "'automaton\<^sub>2 => 'label set"
    and initial\<^sub>2 :: "'automaton\<^sub>2 => 'state * nat"
    and
    transition\<^sub>2 ::
      "'automaton\<^sub>2 => 'label => 'state * nat => 'state * nat"
    and condition\<^sub>2 :: "'automaton\<^sub>2 => 'item_degen => bool"
    and item :: "'state * 'label * 'state => 'item"
    and translate :: "'item_degen => 'item * nat"
  assumes
    "automaton_degeneralization automaton\<^sub>1 alphabet\<^sub>1
      initial\<^sub>1 transition\<^sub>1 condition\<^sub>1 automaton\<^sub>2
      alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2 condition\<^sub>2"
"(set \<circ>\<circ> sort_key) (%x. x)"
  :: "'a list => 'a set"
"(((set \<circ>\<circ> map) f \<circ>\<circ> map) g \<circ>\<circ> map) h"
  :: "'c list => 'b set"
### theory "Draft.Refine"
### 1.267s elapsed time, 3.651s cpu time, 0.994s GC time
Loading theory "Draft.Acceptance_Refine" (required by "Draft.DRA_TranslateTemplates" via "Draft.DRA_Translate" via "Draft.DRA_Explicit" via "Draft.DRA_Nodes" via "Draft.DRA_Implement" via "Draft.DRA_Refine")
Loading theory "Draft.Transition_System_Refine" (required by "Draft.DRA_TranslateTemplates" via "Draft.DRA_Translate" via "Draft.DRA_Explicit" via "Draft.DRA_Nodes" via "Draft.DRA_Implement" via "Draft.DRA_Refine")
Loading theory "Draft.Implement" (required by "Draft.DRA_TranslateTemplates" via "Draft.DRA_Translate" via "Draft.DRA_Explicit" via "Draft.DRA_Nodes" via "Draft.DRA_Implement")
### theory "Draft.Acceptance_Refine"
### 0.446s elapsed time, 1.728s cpu time, 0.203s GC time
### theory "Draft.Transition_System_Refine"
### 0.841s elapsed time, 3.077s cpu time, 1.301s GC time
locale automaton_degeneralization_run
  fixes
    automaton\<^sub>1 ::
      "'a set => 'b => ('a => 'b => 'b) => ('c => bool) list => 'd"
    and alphabet\<^sub>1 :: "'d => 'a set"
    and initial\<^sub>1 :: "'d => 'b"
    and transition\<^sub>1 :: "'d => 'a => 'b => 'b"
    and condition\<^sub>1 :: "'d => ('c => bool) list"
    and
    test\<^sub>1 ::
      "('c => bool) list => 'a stream => 'b stream => 'b => bool"
    and
    automaton\<^sub>2 ::
      "'a set
       => 'b * nat => ('a => 'b * nat => 'b * nat) => ('e => bool) => 'f"
    and alphabet\<^sub>2 :: "'f => 'a set"
    and initial\<^sub>2 :: "'f => 'b * nat"
    and transition\<^sub>2 :: "'f => 'a => 'b * nat => 'b * nat"
    and condition\<^sub>2 :: "'f => 'e => bool"
    and
    test\<^sub>2 ::
      "('e => bool) => 'a stream => ('b * nat) stream => 'b * nat => bool"
    and item :: "'b * 'a * 'b => 'c"
    and translate :: "'e => 'c * nat"
  assumes
    "automaton_degeneralization_run automaton\<^sub>1 alphabet\<^sub>1
      initial\<^sub>1 transition\<^sub>1 condition\<^sub>1 test\<^sub>1
      automaton\<^sub>2 alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2
      condition\<^sub>2 test\<^sub>2 item translate"
locale automaton_product
  fixes
    automaton\<^sub>1 ::
      "'label set
       => 'state\<^sub>1
          => ('label => 'state\<^sub>1 => 'state\<^sub>1)
             => 'condition\<^sub>1 => 'automaton\<^sub>1"
    and alphabet\<^sub>1 :: "'automaton\<^sub>1 => 'label set"
    and initial\<^sub>1 :: "'automaton\<^sub>1 => 'state\<^sub>1"
    and
    transition\<^sub>1 ::
      "'automaton\<^sub>1 => 'label => 'state\<^sub>1 => 'state\<^sub>1"
    and condition\<^sub>1 :: "'automaton\<^sub>1 => 'condition\<^sub>1"
    and
    automaton\<^sub>2 ::
      "'label set
       => 'state\<^sub>2
          => ('label => 'state\<^sub>2 => 'state\<^sub>2)
             => 'condition\<^sub>2 => 'automaton\<^sub>2"
    and alphabet\<^sub>2 :: "'automaton\<^sub>2 => 'label set"
    and initial\<^sub>2 :: "'automaton\<^sub>2 => 'state\<^sub>2"
    and
    transition\<^sub>2 ::
      "'automaton\<^sub>2 => 'label => 'state\<^sub>2 => 'state\<^sub>2"
    and condition\<^sub>2 :: "'automaton\<^sub>2 => 'condition\<^sub>2"
    and
    automaton\<^sub>3 ::
      "'label set
       => 'state\<^sub>1 * 'state\<^sub>2
          => ('label
              => 'state\<^sub>1 * 'state\<^sub>2
                 => 'state\<^sub>1 * 'state\<^sub>2)
             => 'condition\<^sub>3 => 'automaton\<^sub>3"
    and alphabet\<^sub>3 :: "'automaton\<^sub>3 => 'label set"
    and
    initial\<^sub>3 ::
      "'automaton\<^sub>3 => 'state\<^sub>1 * 'state\<^sub>2"
    and
    transition\<^sub>3 ::
      "'automaton\<^sub>3
       => 'label
          => 'state\<^sub>1 * 'state\<^sub>2
             => 'state\<^sub>1 * 'state\<^sub>2"
    and condition\<^sub>3 :: "'automaton\<^sub>3 => 'condition\<^sub>3"
    and
    condition ::
      "'condition\<^sub>1 => 'condition\<^sub>2 => 'condition\<^sub>3"
  assumes
    "automaton_product automaton\<^sub>1 alphabet\<^sub>1 initial\<^sub>1
      transition\<^sub>1 condition\<^sub>1 automaton\<^sub>2
      alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2 condition\<^sub>2
      automaton\<^sub>3 alphabet\<^sub>3 initial\<^sub>3 transition\<^sub>3
      condition\<^sub>3"
### theory "Draft.Implement"
### 1.718s elapsed time, 4.876s cpu time, 1.501s GC time
locale automaton_intersection_path
  fixes automaton\<^sub>1 :: "'a set => 'b => ('a => 'b => 'b) => 'c => 'd"
    and alphabet\<^sub>1 :: "'d => 'a set"
    and initial\<^sub>1 :: "'d => 'b"
    and transition\<^sub>1 :: "'d => 'a => 'b => 'b"
    and condition\<^sub>1 :: "'d => 'c"
    and test\<^sub>1 :: "'c => 'a list => 'b list => 'b => bool"
    and automaton\<^sub>2 :: "'a set => 'e => ('a => 'e => 'e) => 'f => 'g"
    and alphabet\<^sub>2 :: "'g => 'a set"
    and initial\<^sub>2 :: "'g => 'e"
    and transition\<^sub>2 :: "'g => 'a => 'e => 'e"
    and condition\<^sub>2 :: "'g => 'f"
    and test\<^sub>2 :: "'f => 'a list => 'e list => 'e => bool"
    and
    automaton\<^sub>3 ::
      "'a set => 'b * 'e => ('a => 'b * 'e => 'b * 'e) => 'h => 'i"
    and alphabet\<^sub>3 :: "'i => 'a set"
    and initial\<^sub>3 :: "'i => 'b * 'e"
    and transition\<^sub>3 :: "'i => 'a => 'b * 'e => 'b * 'e"
    and condition\<^sub>3 :: "'i => 'h"
    and test\<^sub>3 :: "'h => 'a list => ('b * 'e) list => 'b * 'e => bool"
    and condition :: "'c => 'f => 'h"
  assumes
    "automaton_intersection_path automaton\<^sub>1 alphabet\<^sub>1
      initial\<^sub>1 transition\<^sub>1 condition\<^sub>1 test\<^sub>1
      automaton\<^sub>2 alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2
      condition\<^sub>2 test\<^sub>2 automaton\<^sub>3 alphabet\<^sub>3
      initial\<^sub>3 transition\<^sub>3 condition\<^sub>3 test\<^sub>3
      condition"
locale automaton_union_path
  fixes automaton\<^sub>1 :: "'a set => 'b => ('a => 'b => 'b) => 'c => 'd"
    and alphabet\<^sub>1 :: "'d => 'a set"
    and initial\<^sub>1 :: "'d => 'b"
    and transition\<^sub>1 :: "'d => 'a => 'b => 'b"
    and condition\<^sub>1 :: "'d => 'c"
    and test\<^sub>1 :: "'c => 'a list => 'b list => 'b => bool"
    and automaton\<^sub>2 :: "'a set => 'e => ('a => 'e => 'e) => 'f => 'g"
    and alphabet\<^sub>2 :: "'g => 'a set"
    and initial\<^sub>2 :: "'g => 'e"
    and transition\<^sub>2 :: "'g => 'a => 'e => 'e"
    and condition\<^sub>2 :: "'g => 'f"
    and test\<^sub>2 :: "'f => 'a list => 'e list => 'e => bool"
    and
    automaton\<^sub>3 ::
      "'a set => 'b * 'e => ('a => 'b * 'e => 'b * 'e) => 'h => 'i"
    and alphabet\<^sub>3 :: "'i => 'a set"
    and initial\<^sub>3 :: "'i => 'b * 'e"
    and transition\<^sub>3 :: "'i => 'a => 'b * 'e => 'b * 'e"
    and condition\<^sub>3 :: "'i => 'h"
    and test\<^sub>3 :: "'h => 'a list => ('b * 'e) list => 'b * 'e => bool"
    and condition :: "'c => 'f => 'h"
  assumes
    "automaton_union_path automaton\<^sub>1 alphabet\<^sub>1 initial\<^sub>1
      transition\<^sub>1 condition\<^sub>1 test\<^sub>1 automaton\<^sub>2
      alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2 condition\<^sub>2
      test\<^sub>2 automaton\<^sub>3 alphabet\<^sub>3 initial\<^sub>3
      transition\<^sub>3 condition\<^sub>3 test\<^sub>3 condition"
locale automaton_intersection_run
  fixes automaton\<^sub>1 :: "'a set => 'b => ('a => 'b => 'b) => 'c => 'd"
    and alphabet\<^sub>1 :: "'d => 'a set"
    and initial\<^sub>1 :: "'d => 'b"
    and transition\<^sub>1 :: "'d => 'a => 'b => 'b"
    and condition\<^sub>1 :: "'d => 'c"
    and test\<^sub>1 :: "'c => 'a stream => 'b stream => 'b => bool"
    and automaton\<^sub>2 :: "'a set => 'e => ('a => 'e => 'e) => 'f => 'g"
    and alphabet\<^sub>2 :: "'g => 'a set"
    and initial\<^sub>2 :: "'g => 'e"
    and transition\<^sub>2 :: "'g => 'a => 'e => 'e"
    and condition\<^sub>2 :: "'g => 'f"
    and test\<^sub>2 :: "'f => 'a stream => 'e stream => 'e => bool"
    and
    automaton\<^sub>3 ::
      "'a set => 'b * 'e => ('a => 'b * 'e => 'b * 'e) => 'h => 'i"
    and alphabet\<^sub>3 :: "'i => 'a set"
    and initial\<^sub>3 :: "'i => 'b * 'e"
    and transition\<^sub>3 :: "'i => 'a => 'b * 'e => 'b * 'e"
    and condition\<^sub>3 :: "'i => 'h"
    and
    test\<^sub>3 :: "'h => 'a stream => ('b * 'e) stream => 'b * 'e => bool"
    and condition :: "'c => 'f => 'h"
  assumes
    "automaton_intersection_run automaton\<^sub>1 alphabet\<^sub>1
      initial\<^sub>1 transition\<^sub>1 condition\<^sub>1 test\<^sub>1
      automaton\<^sub>2 alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2
      condition\<^sub>2 test\<^sub>2 automaton\<^sub>3 alphabet\<^sub>3
      initial\<^sub>3 transition\<^sub>3 condition\<^sub>3 test\<^sub>3
      condition"
locale automaton_union_run
  fixes automaton\<^sub>1 :: "'a set => 'b => ('a => 'b => 'b) => 'c => 'd"
    and alphabet\<^sub>1 :: "'d => 'a set"
    and initial\<^sub>1 :: "'d => 'b"
    and transition\<^sub>1 :: "'d => 'a => 'b => 'b"
    and condition\<^sub>1 :: "'d => 'c"
    and test\<^sub>1 :: "'c => 'a stream => 'b stream => 'b => bool"
    and automaton\<^sub>2 :: "'a set => 'e => ('a => 'e => 'e) => 'f => 'g"
    and alphabet\<^sub>2 :: "'g => 'a set"
    and initial\<^sub>2 :: "'g => 'e"
    and transition\<^sub>2 :: "'g => 'a => 'e => 'e"
    and condition\<^sub>2 :: "'g => 'f"
    and test\<^sub>2 :: "'f => 'a stream => 'e stream => 'e => bool"
    and
    automaton\<^sub>3 ::
      "'a set => 'b * 'e => ('a => 'b * 'e => 'b * 'e) => 'h => 'i"
    and alphabet\<^sub>3 :: "'i => 'a set"
    and initial\<^sub>3 :: "'i => 'b * 'e"
    and transition\<^sub>3 :: "'i => 'a => 'b * 'e => 'b * 'e"
    and condition\<^sub>3 :: "'i => 'h"
    and
    test\<^sub>3 :: "'h => 'a stream => ('b * 'e) stream => 'b * 'e => bool"
    and condition :: "'c => 'f => 'h"
  assumes
    "automaton_union_run automaton\<^sub>1 alphabet\<^sub>1 initial\<^sub>1
      transition\<^sub>1 condition\<^sub>1 test\<^sub>1 automaton\<^sub>2
      alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2 condition\<^sub>2
      test\<^sub>2 automaton\<^sub>3 alphabet\<^sub>3 initial\<^sub>3
      transition\<^sub>3 condition\<^sub>3 test\<^sub>3 condition"
locale automaton_product_list
  fixes
    automaton\<^sub>1 ::
      "'label set
       => 'state
          => ('label => 'state => 'state)
             => 'condition\<^sub>1 => 'automaton\<^sub>1"
    and alphabet\<^sub>1 :: "'automaton\<^sub>1 => 'label set"
    and initial\<^sub>1 :: "'automaton\<^sub>1 => 'state"
    and
    transition\<^sub>1 :: "'automaton\<^sub>1 => 'label => 'state => 'state"
    and condition\<^sub>1 :: "'automaton\<^sub>1 => 'condition\<^sub>1"
    and
    automaton\<^sub>2 ::
      "'label set
       => 'state list
          => ('label => 'state list => 'state list)
             => 'condition\<^sub>2 => 'automaton\<^sub>2"
    and alphabet\<^sub>2 :: "'automaton\<^sub>2 => 'label set"
    and initial\<^sub>2 :: "'automaton\<^sub>2 => 'state list"
    and
    transition\<^sub>2 ::
      "'automaton\<^sub>2 => 'label => 'state list => 'state list"
    and condition\<^sub>2 :: "'automaton\<^sub>2 => 'condition\<^sub>2"
    and condition :: "'condition\<^sub>1 list => 'condition\<^sub>2"
  assumes
    "automaton_product_list automaton\<^sub>1 alphabet\<^sub>1
      initial\<^sub>1 transition\<^sub>1 condition\<^sub>1 automaton\<^sub>2
      alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2 condition\<^sub>2"
locale automaton_intersection_list_run
  fixes automaton\<^sub>1 :: "'a set => 'b => ('a => 'b => 'b) => 'c => 'd"
    and alphabet\<^sub>1 :: "'d => 'a set"
    and initial\<^sub>1 :: "'d => 'b"
    and transition\<^sub>1 :: "'d => 'a => 'b => 'b"
    and condition\<^sub>1 :: "'d => 'c"
    and test\<^sub>1 :: "'c => 'a stream => 'b stream => 'b => bool"
    and
    automaton\<^sub>2 ::
      "'a set => 'b list => ('a => 'b list => 'b list) => 'e => 'f"
    and alphabet\<^sub>2 :: "'f => 'a set"
    and initial\<^sub>2 :: "'f => 'b list"
    and transition\<^sub>2 :: "'f => 'a => 'b list => 'b list"
    and condition\<^sub>2 :: "'f => 'e"
    and
    test\<^sub>2 :: "'e => 'a stream => 'b list stream => 'b list => bool"
    and condition :: "'c list => 'e"
  assumes
    "automaton_intersection_list_run automaton\<^sub>1 alphabet\<^sub>1
      initial\<^sub>1 transition\<^sub>1 condition\<^sub>1 test\<^sub>1
      automaton\<^sub>2 alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2
      condition\<^sub>2 test\<^sub>2 condition"
locale automaton_union_list_run
  fixes automaton\<^sub>1 :: "'a set => 'b => ('a => 'b => 'b) => 'c => 'd"
    and alphabet\<^sub>1 :: "'d => 'a set"
    and initial\<^sub>1 :: "'d => 'b"
    and transition\<^sub>1 :: "'d => 'a => 'b => 'b"
    and condition\<^sub>1 :: "'d => 'c"
    and test\<^sub>1 :: "'c => 'a stream => 'b stream => 'b => bool"
    and
    automaton\<^sub>2 ::
      "'a set => 'b list => ('a => 'b list => 'b list) => 'e => 'f"
    and alphabet\<^sub>2 :: "'f => 'a set"
    and initial\<^sub>2 :: "'f => 'b list"
    and transition\<^sub>2 :: "'f => 'a => 'b list => 'b list"
    and condition\<^sub>2 :: "'f => 'e"
    and
    test\<^sub>2 :: "'e => 'a stream => 'b list stream => 'b list => bool"
    and condition :: "'c list => 'e"
  assumes
    "automaton_union_list_run automaton\<^sub>1 alphabet\<^sub>1
      initial\<^sub>1 transition\<^sub>1 condition\<^sub>1 test\<^sub>1
      automaton\<^sub>2 alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2
      condition\<^sub>2 test\<^sub>2 condition"
locale automaton_complement
  fixes
    automaton\<^sub>1 ::
      "'label set
       => 'state
          => ('label => 'state => 'state)
             => 'condition\<^sub>1 => 'automaton\<^sub>1"
    and alphabet\<^sub>1 :: "'automaton\<^sub>1 => 'label set"
    and initial\<^sub>1 :: "'automaton\<^sub>1 => 'state"
    and
    transition\<^sub>1 :: "'automaton\<^sub>1 => 'label => 'state => 'state"
    and condition\<^sub>1 :: "'automaton\<^sub>1 => 'condition\<^sub>1"
    and
    automaton\<^sub>2 ::
      "'label set
       => 'state
          => ('label => 'state => 'state)
             => 'condition\<^sub>2 => 'automaton\<^sub>2"
    and alphabet\<^sub>2 :: "'automaton\<^sub>2 => 'label set"
    and initial\<^sub>2 :: "'automaton\<^sub>2 => 'state"
    and
    transition\<^sub>2 :: "'automaton\<^sub>2 => 'label => 'state => 'state"
    and condition\<^sub>2 :: "'automaton\<^sub>2 => 'condition\<^sub>2"
    and condition :: "'condition\<^sub>1 => 'condition\<^sub>2"
  assumes
    "automaton_complement automaton\<^sub>1 alphabet\<^sub>1 initial\<^sub>1
      transition\<^sub>1 condition\<^sub>1 automaton\<^sub>2
      alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2 condition\<^sub>2"
locale automaton_complement_path
  fixes automaton\<^sub>1 :: "'a set => 'b => ('a => 'b => 'b) => 'c => 'd"
    and alphabet\<^sub>1 :: "'d => 'a set"
    and initial\<^sub>1 :: "'d => 'b"
    and transition\<^sub>1 :: "'d => 'a => 'b => 'b"
    and condition\<^sub>1 :: "'d => 'c"
    and test\<^sub>1 :: "'c => 'a list => 'b list => 'b => bool"
    and automaton\<^sub>2 :: "'a set => 'b => ('a => 'b => 'b) => 'e => 'f"
    and alphabet\<^sub>2 :: "'f => 'a set"
    and initial\<^sub>2 :: "'f => 'b"
    and transition\<^sub>2 :: "'f => 'a => 'b => 'b"
    and condition\<^sub>2 :: "'f => 'e"
    and test\<^sub>2 :: "'e => 'a list => 'b list => 'b => bool"
    and condition :: "'c => 'e"
  assumes
    "automaton_complement_path automaton\<^sub>1 alphabet\<^sub>1
      initial\<^sub>1 transition\<^sub>1 condition\<^sub>1 test\<^sub>1
      automaton\<^sub>2 alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2
      condition\<^sub>2 test\<^sub>2 condition"
locale automaton_complement_run
  fixes automaton\<^sub>1 :: "'a set => 'b => ('a => 'b => 'b) => 'c => 'd"
    and alphabet\<^sub>1 :: "'d => 'a set"
    and initial\<^sub>1 :: "'d => 'b"
    and transition\<^sub>1 :: "'d => 'a => 'b => 'b"
    and condition\<^sub>1 :: "'d => 'c"
    and test\<^sub>1 :: "'c => 'a stream => 'b stream => 'b => bool"
    and automaton\<^sub>2 :: "'a set => 'b => ('a => 'b => 'b) => 'e => 'f"
    and alphabet\<^sub>2 :: "'f => 'a set"
    and initial\<^sub>2 :: "'f => 'b"
    and transition\<^sub>2 :: "'f => 'a => 'b => 'b"
    and condition\<^sub>2 :: "'f => 'e"
    and test\<^sub>2 :: "'e => 'a stream => 'b stream => 'b => bool"
    and condition :: "'c => 'e"
  assumes
    "automaton_complement_run automaton\<^sub>1 alphabet\<^sub>1
      initial\<^sub>1 transition\<^sub>1 condition\<^sub>1 test\<^sub>1
      automaton\<^sub>2 alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2
      condition\<^sub>2 test\<^sub>2 condition"
### theory "Draft.Deterministic"
### 6.317s elapsed time, 12.101s cpu time, 2.905s GC time
Loading theory "Draft.DRA" (required by "Draft.DRA_TranslateTemplates" via "Draft.DRA_Translate" via "Draft.DRA_Explicit" via "Draft.DRA_Nodes" via "Draft.DRA_Implement" via "Draft.DRA_Refine")
### theory "Draft.DRA"
### 0.723s elapsed time, 0.782s cpu time, 0.084s GC time
Loading theory "Draft.DRA_Refine" (required by "Draft.DRA_TranslateTemplates" via "Draft.DRA_Translate" via "Draft.DRA_Explicit" via "Draft.DRA_Nodes" via "Draft.DRA_Implement")
### theory "Draft.DRA_Refine"
### 0.509s elapsed time, 0.589s cpu time, 0.092s GC time
Loading theory "Draft.DRA_Implement" (required by "Draft.DRA_TranslateTemplates" via "Draft.DRA_Translate" via "Draft.DRA_Explicit" via "Draft.DRA_Nodes")
### theory "Draft.DRA_Implement"
### 1.484s elapsed time, 1.654s cpu time, 0.218s GC time
Loading theory "Draft.DRA_Nodes" (required by "Draft.DRA_TranslateTemplates" via "Draft.DRA_Translate" via "Draft.DRA_Explicit")
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### theory "Draft.DRA_Nodes"
### 3.062s elapsed time, 3.221s cpu time, 0.231s GC time
Loading theory "Draft.DRA_Explicit" (required by "Draft.DRA_TranslateTemplates" via "Draft.DRA_Translate")
### theory "Draft.DRA_Explicit"
### 2.424s elapsed time, 2.572s cpu time, 0.215s GC time
Loading theory "Draft.DRA_Translate" (required by "Draft.DRA_TranslateTemplates")
### Cannot skip proof of schematic goal statement
### theory "Draft.DRA_Translate"
### 2.542s elapsed time, 2.662s cpu time, 0.177s GC time
Loading theory "Draft.DRA_TranslateTemplates"
val templateLemmas =
   [("DRA_Translate.drae_image_param",
     "(drae_image, drae_image)
      : (?S \<rightarrow> ?T) \<rightarrow>
        \<langle>?L, ?S\<rangle>drae_rel \<rightarrow> \<langle>?L,
        ?T\<rangle>drae_rel",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 18,
             template_app
              (template_app (template_hole 17, template_hole 16),
               template_hole 15)),
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app (template_hole 13, template_hole 12),
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_app (template_hole 10, template_hole 9),
                       template_var 2)),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_hole 3),
                         template_var 0)),
                     template_var 2))),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_var 0)),
                 template_var 1))))
         )),
    ("DRA_Translate.trans_algo_refine",
     "[| finite (nodes ?A); finite (alphabet ?A); inj_on ?f (nodes ?A);
         ?N = nodes ?A; ?L = alphabet ?A; ?S = transition ?A |]
      ==> (trans_algo ?N ?L ?S ?f, SPEC ((=) (trans_spec ?A ?f)))
          : \<langle>Id\<rangle>nres_rel",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 18,
              template_app (template_hole 17, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_hole 16,
              template_app (template_hole 15, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 3),
              template_app (template_hole 17, template_var 4))
            ),
        template_equation
         (template_var 2, template_app (template_hole 17, template_var 4)),
        template_equation
         (template_var 1, template_app (template_hole 15, template_var 4)),
        template_equation
         (template_var 0, template_app (template_hole 10, template_var 4))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 7, template_var 2),
                         template_var 1),
                       template_var 0),
                     template_var 3)),
                 template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 4),
                         template_var 3)))))),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0))
           ))),
    ("DRA_Translate.inj_f",
     "[| finite (nodes ?A); is_bounded_hashcode ?S ?seq ?bhc;
         is_valid_def_hm_size TYPE(?'statei) ?hms;
         (?seq, (=)) : ?S \<rightarrow> ?S \<rightarrow> bool_rel;
         (?Ai, ?A) : \<langle>Id, ?S\<rangle>drai_dra_rel |]
      ==> inj_on (f ?Ai ?A ?seq ?bhc ?hms) (nodes ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 22,
              template_app (template_hole 21, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 20, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 19, template_hole 18),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app (template_hole 16, template_var 3),
                  template_hole 15)),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app (template_hole 13, template_hole 12),
                    template_var 4)),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app (template_hole 10, template_hole 9),
                      template_var 4)),
                  template_hole 8)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 0),
                  template_var 5)),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_hole 3),
                    template_hole 2)),
                template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 5),
                     template_var 3),
                   template_var 2),
                 template_var 1)),
             template_app (template_hole 21, template_var 5))
           ))),
    ("DRA_Translate.f'_inj",
     "[| finite (nodes ?A); is_bounded_hashcode ?S ?seq ?bhc;
         is_valid_def_hm_size TYPE(?'statei) ?hms;
         (?seq, (=)) : ?S \<rightarrow> ?S \<rightarrow> bool_rel;
         (?Ai, ?A) : \<langle>Id, ?S\<rangle>drai_dra_rel |]
      ==> inj_on (f' ?Ai ?A ?seq ?bhc ?hms) (nodes ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 22,
              template_app (template_hole 21, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 20, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 19, template_hole 18),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app (template_hole 16, template_var 3),
                  template_hole 15)),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app (template_hole 13, template_hole 12),
                    template_var 4)),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app (template_hole 10, template_hole 9),
                      template_var 4)),
                  template_hole 8)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 0),
                  template_var 5)),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_hole 3),
                    template_hole 2)),
                template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 5),
                     template_var 3),
                   template_var 2),
                 template_var 1)),
             template_app (template_hole 21, template_var 5))
           ))),
    ("DRA_Translate.f'_dom",
     "[| finite (nodes ?A); is_bounded_hashcode ?S ?seq ?bhc;
         is_valid_def_hm_size TYPE(?'statei) ?hms;
         (?seq, (=)) : ?S \<rightarrow> ?S \<rightarrow> bool_rel;
         (?Ai, ?A) : \<langle>Id, ?S\<rangle>drai_dra_rel |]
      ==> dom (f' ?Ai ?A ?seq ?bhc ?hms) = nodes ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 23,
              template_app (template_hole 22, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 21, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 20, template_hole 19),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_app (template_hole 17, template_var 3),
                  template_hole 16)),
              template_app
               (template_app
                 (template_hole 15,
                  template_app
                   (template_app (template_hole 14, template_hole 13),
                    template_var 4)),
                template_app
                 (template_app
                   (template_hole 12,
                    template_app
                     (template_app (template_hole 11, template_hole 10),
                      template_var 4)),
                  template_hole 9)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 0),
                  template_var 5)),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_hole 4),
                    template_hole 3)),
                template_var 4))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 5),
                 template_var 3),
               template_var 2),
             template_var 1)),
         template_app (template_hole 22, template_var 5)))),
    ("DRA_Translate.rel_range",
     "[| finite (nodes ?A); is_bounded_hashcode ?S ?seq ?bhc;
         is_valid_def_hm_size TYPE(?'statei) ?hms;
         (?seq, (=)) : ?S \<rightarrow> ?S \<rightarrow> bool_rel;
         (?Ai, ?A) : \<langle>Id, ?S\<rangle>drai_dra_rel |]
      ==> Range (rel ?Ai ?A ?seq ?bhc ?hms) = nodes ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 23,
              template_app (template_hole 22, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 21, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 20, template_hole 19),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_app (template_hole 17, template_var 3),
                  template_hole 16)),
              template_app
               (template_app
                 (template_hole 15,
                  template_app
                   (template_app (template_hole 14, template_hole 13),
                    template_var 4)),
                template_app
                 (template_app
                   (template_hole 12,
                    template_app
                     (template_app (template_hole 11, template_hole 10),
                      template_var 4)),
                  template_hole 9)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 0),
                  template_var 5)),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_hole 4),
                    template_hole 3)),
                template_var 4))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 5),
                 template_var 3),
               template_var 2),
             template_var 1)),
         template_app (template_hole 22, template_var 5)))),
    ("DRA_Translate.inj_g",
     "[| finite (nodes ?A); is_bounded_hashcode ?S ?seq ?bhc;
         is_valid_def_hm_size TYPE(?'statei) ?hms;
         (?seq, (=)) : ?S \<rightarrow> ?S \<rightarrow> bool_rel;
         (?Ai, ?A) : \<langle>Id, ?S\<rangle>drai_dra_rel |]
      ==> inj_on (g ?Ai ?A ?seq ?bhc ?hms)
           (f ?Ai ?A ?seq ?bhc ?hms ` nodes ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 24,
              template_app (template_hole 23, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 22, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 21, template_hole 20),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 19,
                template_app
                 (template_app (template_hole 18, template_var 3),
                  template_hole 17)),
              template_app
               (template_app
                 (template_hole 16,
                  template_app
                   (template_app (template_hole 15, template_hole 14),
                    template_var 4)),
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_app (template_hole 12, template_hole 11),
                      template_var 4)),
                  template_hole 10)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 0),
                  template_var 5)),
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_hole 5),
                    template_hole 4)),
                template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 2, template_var 0),
                       template_var 5),
                     template_var 3),
                   template_var 2),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 0),
                         template_var 5),
                       template_var 3),
                     template_var 2),
                   template_var 1)),
               template_app (template_hole 23, template_var 5)))
           ))),
    ("DRA_Translate.rel_domain",
     "[| finite (nodes ?A); is_bounded_hashcode ?S ?seq ?bhc;
         is_valid_def_hm_size TYPE(?'statei) ?hms;
         (?seq, (=)) : ?S \<rightarrow> ?S \<rightarrow> bool_rel;
         (?Ai, ?A) : \<langle>Id, ?S\<rangle>drai_dra_rel |]
      ==> Domain (rel ?Ai ?A ?seq ?bhc ?hms) =
          f ?Ai ?A ?seq ?bhc ?hms ` nodes ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 25,
              template_app (template_hole 24, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 23, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 22, template_hole 21),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 20,
                template_app
                 (template_app (template_hole 19, template_var 3),
                  template_hole 18)),
              template_app
               (template_app
                 (template_hole 17,
                  template_app
                   (template_app (template_hole 16, template_hole 15),
                    template_var 4)),
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_app (template_hole 13, template_hole 12),
                      template_var 4)),
                  template_hole 11)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 0),
                  template_var 5)),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_hole 6),
                    template_hole 5)),
                template_var 4))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 5),
                 template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 5),
                   template_var 3),
                 template_var 2),
               template_var 1)),
           template_app (template_hole 24, template_var 5))))),
    ("DRA_Translate.to_draei_impl_refine'",
     "[| finite (nodes ?A); is_bounded_hashcode ?S ?seq ?bhc;
         is_valid_def_hm_size TYPE(?'statei) ?hms;
         (?seq, (=)) : ?S \<rightarrow> ?S \<rightarrow> bool_rel;
         (?Ai, ?A) : \<langle>Id, ?S\<rangle>drai_dra_rel |]
      ==> (to_draei_impl ?seq ?bhc ?hms ?Ai, to_draei ?A)
          : \<langle>Id_on (alphabet ?A),
          rel ?Ai ?A ?seq ?bhc ?hms\<rangle>draei_dra_rel",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 30,
              template_app (template_hole 29, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 28, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 27, template_hole 26),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 25,
                template_app
                 (template_app (template_hole 24, template_var 3),
                  template_hole 23)),
              template_app
               (template_app
                 (template_hole 22,
                  template_app
                   (template_app (template_hole 21, template_hole 20),
                    template_var 4)),
                template_app
                 (template_app
                   (template_hole 19,
                    template_app
                     (template_app (template_hole 18, template_hole 17),
                      template_var 4)),
                  template_hole 16)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app (template_hole 14, template_var 0),
                  template_var 5)),
              template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_app (template_hole 12, template_hole 11),
                    template_hole 10)),
                template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 7, template_var 3),
                         template_var 2),
                       template_var 1),
                     template_var 0)),
                 template_app (template_hole 6, template_var 5))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 5)))),
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 5),
                     template_var 3),
                   template_var 2),
                 template_var 1)))
           ))),
    ("DRA_Translate.f'_refine",
     "[| finite (nodes ?A); is_bounded_hashcode ?S ?seq ?bhc;
         is_valid_def_hm_size TYPE(?'statei) ?hms;
         (?seq, (=)) : ?S \<rightarrow> ?S \<rightarrow> bool_rel;
         (?Ai, ?A) : \<langle>Id, ?S\<rangle>drai_dra_rel |]
      ==> (to_draei_impl ?seq ?bhc ?hms ?Ai,
           drae_image ((the \<circ>\<circ>\<circ> f' ?Ai ?A ?seq) ?bhc ?hms)
            (dra_drae ?A))
          : \<langle>Id, nat_rel\<rangle>draei_drae_rel",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 32,
              template_app (template_hole 31, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 30, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 29, template_hole 28),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 27,
                template_app
                 (template_app (template_hole 26, template_var 3),
                  template_hole 25)),
              template_app
               (template_app
                 (template_hole 24,
                  template_app
                   (template_app (template_hole 23, template_hole 22),
                    template_var 4)),
                template_app
                 (template_app
                   (template_hole 21,
                    template_app
                     (template_app (template_hole 20, template_hole 19),
                      template_var 4)),
                  template_hole 18)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app (template_hole 16, template_var 0),
                  template_var 5)),
              template_app
               (template_app
                 (template_hole 15,
                  template_app
                   (template_app (template_hole 14, template_hole 13),
                    template_hole 12)),
                template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 9, template_var 3),
                         template_var 2),
                       template_var 1),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 7, template_hole 6),
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 5, template_var 0),
                               template_var 5),
                             template_var 3),
                           template_var 2),
                         template_var 1))),
                   template_app (template_hole 4, template_var 5)))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_hole 12)),
               template_hole 0))
           ))),
    ("DRA_Translate.to_draei_impl_refine''",
     "[| finite (nodes ?A); is_bounded_hashcode ?S ?seq ?bhc;
         is_valid_def_hm_size TYPE(?'statei) ?hms;
         (?seq, (=)) : ?S \<rightarrow> ?S \<rightarrow> bool_rel;
         (?Ai, ?A) : \<langle>?L, ?S\<rangle>drai_dra_rel |]
      ==> (RETURN (to_draei_impl ?seq ?bhc ?hms ?Ai),
           op_set_enumerate (nodes ?A) >>=
           (%f. RETURN (drae_image (the o f) (dra_drae ?A))))
          : \<langle>\<langle>?L,
          nat_rel\<rangle>draei_drae_rel\<rangle>nres_rel",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 36,
              template_app (template_hole 35, template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 34, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 33, template_hole 32),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 31,
                template_app
                 (template_app (template_hole 30, template_var 4),
                  template_hole 29)),
              template_app
               (template_app
                 (template_hole 28,
                  template_app
                   (template_app (template_hole 27, template_hole 26),
                    template_var 5)),
                template_app
                 (template_app
                   (template_hole 25,
                    template_app
                     (template_app (template_hole 24, template_hole 23),
                      template_var 5)),
                  template_hole 22)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 21,
                template_app
                 (template_app (template_hole 20, template_var 1),
                  template_var 6)),
              template_app
               (template_app
                 (template_hole 19,
                  template_app
                   (template_app (template_hole 18, template_hole 17),
                    template_var 0)),
                template_var 5))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 16,
               template_app
                (template_app
                  (template_hole 15,
                   template_app
                    (template_hole 14,
                     template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 13, template_var 4),
                           template_var 3),
                         template_var 2),
                       template_var 1))),
                 template_app
                  (template_app
                    (template_hole 12,
                     template_app
                      (template_hole 11,
                       template_app (template_hole 35, template_var 6))),
                   t_empty))),
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_var 0)),
                 template_hole 0)))
           ))),
    ("DRA_Translate.drae_image_dra_drae",
     "drae_image ?f (dra_drae ?A) =
      drae (alphabet ?A) (?f (initial ?A))
       (UN p:nodes ?A.
           UN a:alphabet ?A.
              ?f ` {p} \<times> {a} \<times> ?f ` {transition ?A a p})
       (map (%(P, Q). (?f ` {p: nodes ?A. P p}, ?f ` {p: nodes ?A. Q p}))
         (condition ?A))",
     template_equation
      (template_app
        (template_app (template_hole 23, template_var 1),
         template_app (template_hole 22, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 21,
               template_app (template_hole 20, template_var 0)),
             template_app
              (template_var 1,
               template_app (template_hole 19, template_var 0))),
           template_app
            (template_hole 18,
             template_app
              (template_app (template_hole 17, t_empty),
               template_app (template_hole 7, template_var 0)))),
         template_app
          (template_app
            (template_hole 6, template_app (template_hole 5, t_empty)),
           template_app (template_hole 0, template_var 0))))),
    ("DRA_Translate.1",
     "[| finite (nodes ?A); is_bounded_hashcode ?S ?seq ?bhc;
         is_valid_def_hm_size TYPE(?'statei) ?hms;
         (?seq, (=)) : ?S \<rightarrow> ?S \<rightarrow> bool_rel;
         (?Ai, ?A) : \<langle>Id, ?S\<rangle>drai_dra_rel |]
      ==> EX f'.
             (to_draei_impl ?seq ?bhc ?hms ?Ai,
              drae_image (the o f') (dra_drae ?A))
             : \<langle>Id, nat_rel\<rangle>draei_drae_rel &
             dom f' = nodes ?A & inj_on f' (nodes ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 36,
              template_app (template_hole 35, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 34, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 33, template_hole 32),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 31,
                template_app
                 (template_app (template_hole 30, template_var 3),
                  template_hole 29)),
              template_app
               (template_app
                 (template_hole 28,
                  template_app
                   (template_app (template_hole 27, template_hole 26),
                    template_var 4)),
                template_app
                 (template_app
                   (template_hole 25,
                    template_app
                     (template_app (template_hole 24, template_hole 23),
                      template_var 4)),
                  template_hole 22)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 21,
                template_app
                 (template_app (template_hole 20, template_var 0),
                  template_var 5)),
              template_app
               (template_app
                 (template_hole 19,
                  template_app
                   (template_app (template_hole 18, template_hole 17),
                    template_hole 16)),
                template_var 4))
            )],
       template_predicate (template_app (template_hole 15, t_empty)))),
    ("DRA_Translate.to_draei_impl_refine",
     "[| SIDE_PRECOND (finite (nodes ?A));
         SIDE_GEN_ALGO (is_bounded_hashcode ?S ?seq ?bhc);
         SIDE_GEN_ALGO (is_valid_def_hm_size TYPE(?'statei) ?hms);
         GEN_OP ?seq (=) (?S \<rightarrow> ?S \<rightarrow> bool_rel);
         (?Ai, ?A) : \<langle>Id, ?S\<rangle>drai_dra_rel |]
      ==> (to_draei_impl ?seq ?bhc ?hms ?Ai,
           (Autoref_Tagging.OP to_draei :::
            \<langle>Id, ?S\<rangle>drai_dra_rel \<rightarrow>
            \<langle>Id_on (alphabet ?A),
            rel ?Ai ?A ?seq ?bhc ?hms\<rangle>draei_dra_rel) $
           ?A)
          : \<langle>Id_on (alphabet ?A),
          rel ?Ai ?A ?seq ?bhc ?hms\<rangle>draei_dra_rel",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 45,
              template_app
               (template_hole 44,
                template_app
                 (template_hole 43,
                  template_app
                   (template_hole 42,
                    template_app (template_hole 41, template_var 5)))))
            ),
        template_predicate
         (
            template_app
             (template_hole 45,
              template_app
               (template_hole 40,
                template_app
                 (template_app
                   (template_app (template_hole 39, template_var 4),
                    template_var 3),
                  template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_hole 45,
              template_app
               (template_hole 40,
                template_app
                 (template_app (template_hole 38, template_hole 37),
                  template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_hole 45,
              template_app
               (template_hole 36,
                template_app
                 (template_app
                   (template_hole 35,
                    template_app
                     (template_app (template_hole 34, template_var 3),
                      template_app
                       (template_app
                         (template_hole 33,
                          template_app
                           (template_hole 32, template_hole 31)),
                        template_app
                         (template_hole 30,
                          template_app
                           (template_app
                             (template_hole 29,
                              template_app
                               (template_app
                                 (template_hole 28, template_hole 27),
                                template_var 4)),
                            template_app
                             (template_app
                               (template_hole 26,
                                template_app
                                 (template_app
                                   (template_hole 25, template_hole 24),
                                  template_var 4)),
                              template_hole 23)))))),
                  template_app
                   (template_app
                     (template_hole 29,
                      template_app
                       (template_app (template_hole 28, template_hole 27),
                        template_var 4)),
                    template_app
                     (template_app
                       (template_hole 26,
                        template_app
                         (template_app (template_hole 25, template_hole 24),
                          template_var 4)),
                      template_hole 23)))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 22,
                template_app
                 (template_app (template_hole 21, template_var 0),
                  template_var 5)),
              template_app
               (template_app
                 (template_hole 20,
                  template_app
                   (template_app (template_hole 19, template_hole 18),
                    template_hole 17)),
                template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 16,
               template_app
                (template_app
                  (template_hole 15,
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 14, template_var 3),
                         template_var 2),
                       template_var 1),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 13,
                     template_app
                      (template_app
                        (template_hole 12,
                         template_app (template_hole 11, template_hole 10)),
                       template_app
                        (template_hole 9,
                         template_app
                          (template_app
                            (template_hole 8,
                             template_app
                              (template_app
                                (template_hole 7, template_hole 6),
                               template_app
                                (template_app
                                  (template_hole 20,
                                   template_app
                                    (template_app
(template_hole 19, template_hole 18),
                                     template_hole 17)),
                                 template_var 4))),
                           template_app
                            (template_app
                              (template_hole 5,
                               template_app
                                (template_app
                                  (template_hole 4, template_hole 3),
                                 template_app
                                  (template_hole 2,
                                   template_app
                                    (template_hole 1, template_var 5)))),
                             template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_hole 0, template_var 0),
                                     template_var 5),
                                   template_var 3),
                                 template_var 2),
                               template_var 1)))))),
                   template_var 5))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 5)))),
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 5),
                     template_var 3),
                   template_var 2),
                 template_var 1)))
           ))),
    ("DRA_Translate.to_draei_impl",
     "[| finite (nodes ?A); is_bounded_hashcode ?S ?seq ?bhc;
         is_valid_def_hm_size TYPE(?'statei) ?hms;
         (?seq, (=)) : ?S \<rightarrow> ?S \<rightarrow> bool_rel;
         (?Ai, ?A) : \<langle>?L, ?S\<rangle>drai_dra_rel |]
      ==> (RETURN
            (let x = dra_nodes ?seq ?bhc ?hms ?Ai;
                 xa = snd ((map_iterator_dom o
                            Impl_Array_Hash_Map.ahm_iteratei)
                            x (%_. True)
                            (%x (k, m).
                                (Suc k,
                                 Impl_Array_Hash_Map.ahm_update ?seq ?bhc x
                                  k m))
                            (0, Impl_Array_Hash_Map.ahm_empty ?hms));
                 xb = (map_iterator_dom o Impl_Array_Hash_Map.ahm_iteratei)
                       x (%xa. True)
                       (%xb. foldli (alphabeti ?Ai) (%xc. True)
                              (%xc \<sigma>'.
                                  let xd = transitioni ?Ai xc xb
                                  in (the
 (Impl_Array_Hash_Map.ahm_lookup ?seq ?bhc xb xa),
xc, the (Impl_Array_Hash_Map.ahm_lookup ?seq ?bhc xd xa)) #
                                     \<sigma>'))
                       []
             in draei (alphabeti ?Ai)
                 (the (Impl_Array_Hash_Map.ahm_lookup ?seq ?bhc
                        (initiali ?Ai) xa))
                 xb (map (%(xb, xc).
                             (gen_image
                               (map_iterator_dom o
                                Impl_Array_Hash_Map.ahm_iteratei)
                               [] (glist_insert (=))
                               (%xi. the
(Impl_Array_Hash_Map.ahm_lookup ?seq ?bhc xi xa))
                               (gen_filter
                                 (map_iterator_dom o
                                  Impl_Array_Hash_Map.ahm_iteratei)
                                 (Impl_Array_Hash_Map.ahm_empty ?hms)
                                 (map2set_insert
                                   (Impl_Array_Hash_Map.ahm_update ?seq
                                     ?bhc))
                                 xb x),
                              gen_image
                               (map_iterator_dom o
                                Impl_Array_Hash_Map.ahm_iteratei)
                               [] (glist_insert (=))
                               (%xi. the
(Impl_Array_Hash_Map.ahm_lookup ?seq ?bhc xi xa))
                               (gen_filter
                                 (map_iterator_dom o
                                  Impl_Array_Hash_Map.ahm_iteratei)
                                 (Impl_Array_Hash_Map.ahm_empty ?hms)
                                 (map2set_insert
                                   (Impl_Array_Hash_Map.ahm_update ?seq
                                     ?bhc))
                                 xc x)))
                      (conditioni ?Ai))),
           let N = nodes ?A
           in op_set_enumerate N >>=
              (%f. ASSERT (dom f = N) >>=
                   (%_. ASSERT (f (initial ?A) ~= None) >>=
                        (%_. ASSERT
                              (ALL a:alphabet ?A.
                                  ALL p:dom f.
                                     f (transition ?A a p) ~= None) >>=
                             (%_. trans_algo N (alphabet ?A) (transition ?A)
                                   (%x. the (f x)) >>=
                                  (%T.
RETURN
 (drae (alphabet ?A) (the (f (initial ?A))) T
   (map (%(P, Q).
            ((%x. the (f x)) ` {p: N. P p}, (%x. the (f x)) ` {p: N. Q p}))
     (condition ?A)))))))))
          : \<langle>\<langle>?L,
          nat_rel\<rangle>draei_drae_rel\<rangle>nres_rel",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 103,
              template_app (template_hole 102, template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 101, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 100, template_hole 99),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 98,
                template_app
                 (template_app (template_hole 97, template_var 4),
                  template_hole 96)),
              template_app
               (template_app
                 (template_hole 95,
                  template_app
                   (template_app (template_hole 94, template_hole 93),
                    template_var 5)),
                template_app
                 (template_app
                   (template_hole 92,
                    template_app
                     (template_app (template_hole 91, template_hole 90),
                      template_var 5)),
                  template_hole 89)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 88,
                template_app
                 (template_app (template_hole 87, template_var 1),
                  template_var 6)),
              template_app
               (template_app
                 (template_hole 86,
                  template_app
                   (template_app (template_hole 85, template_hole 84),
                    template_var 0)),
                template_var 5))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 83,
               template_app
                (template_app
                  (template_hole 82,
                   template_app
                    (template_hole 81,
                     template_app
                      (template_app
                        (template_hole 80,
                         template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 79, template_var 4),
                               template_var 3),
                             template_var 2),
                           template_var 1)),
                       t_empty))),
                 template_app
                  (template_app
                    (template_hole 32,
                     template_app (template_hole 102, template_var 6)),
                   t_empty))),
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_var 0)),
                 template_hole 0)))
           )))]:
   (string * thm * template) list
### theory "Draft.DRA_TranslateTemplates"
### 3.420s elapsed time, 5.053s cpu time, 1.859s GC time
val it = (): unit
