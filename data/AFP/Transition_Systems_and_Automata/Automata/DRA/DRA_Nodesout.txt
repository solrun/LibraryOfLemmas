Loading theory "Draft.Basic" (required by "Draft.DRA_NodesTemplates" via "Draft.DRA_Nodes" via "Draft.DRA_Implement" via "Draft.DRA_Refine" via "Draft.DRA" via "Draft.Deterministic" via "Draft.Transition_System" via "Draft.Sequence")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.DRA_NodesTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.DRA_NodesTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.DRA_NodesTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
### theory "Draft.Basic"
### 0.047s elapsed time, 0.226s cpu time, 0.000s GC time
Loading theory "Draft.Sequence" (required by "Draft.DRA_NodesTemplates" via "Draft.DRA_Nodes" via "Draft.DRA_Implement" via "Draft.DRA_Refine" via "Draft.DRA" via "Draft.Deterministic" via "Draft.Transition_System")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.147s elapsed time, 0.590s cpu time, 0.057s GC time
[| inj_on ?f ?A; ?B <= ?A |] ==> inj_on ?f ?B
[| inj_on ?f ?B; ?A <= ?B |] ==> inj_on ?f ?A
### theory "HOL-Library.Set_Algebras"
### 0.226s elapsed time, 0.839s cpu time, 0.057s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.DRA_NodesTemplates" via "Draft.ExtrEqs")
consts
  scan :: "('a => 'b => 'b) => 'a list => 'b => 'b list"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sscan :: "('a => 'b => 'b) => 'a stream => 'b => 'b stream"
Found termination order: "size <*mlex*> {}"
consts
  stranspose :: "'a stream list => 'a list stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "sdistinct"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "sascending"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Proofs for coinductive predicate(s) "sdescending"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "Draft.Sequence"
### 0.773s elapsed time, 2.393s cpu time, 0.299s GC time
Loading theory "Draft.Transition_System" (required by "Draft.DRA_NodesTemplates" via "Draft.DRA_Nodes" via "Draft.DRA_Implement" via "Draft.DRA_Refine" via "Draft.DRA" via "Draft.Deterministic")
Loading theory "Draft.Sequence_LTL" (required by "Draft.DRA_NodesTemplates" via "Draft.DRA_Nodes" via "Draft.DRA_Implement" via "Draft.DRA_Refine" via "Draft.DRA" via "Draft.Deterministic" via "Draft.Transition_System_Extra")
Found termination order: "size <*mlex*> {}"
locale transition_system_universal
  fixes execute :: "'transition => 'state => 'state"
locale transition_system
  fixes execute :: "'transition => 'state => 'state"
    and enabled :: "'transition => 'state => bool"
Proofs for inductive predicate(s) "path"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "run"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "reachablep"
  Proving monotonicity ...
### theory "HOL-Library.BigO"
### 0.756s elapsed time, 2.407s cpu time, 0.336s GC time
Found termination order: "size <*mlex*> {}"
locale transition_system_initial
  fixes execute :: "'transition => 'state => 'state"
    and enabled :: "'transition => 'state => bool"
    and initial :: "'state => bool"
Proofs for inductive predicate(s) "nodesp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "Draft.Transition_System"
### 0.472s elapsed time, 1.582s cpu time, 0.637s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Sequence_LTL"
### 0.788s elapsed time, 2.240s cpu time, 0.685s GC time
Loading theory "Draft.Acceptance" (required by "Draft.DRA_NodesTemplates" via "Draft.DRA_Nodes" via "Draft.DRA_Implement" via "Draft.DRA_Refine" via "Draft.DRA" via "Draft.Deterministic" via "Draft.Degeneralization")
Loading theory "Draft.Transition_System_Construction" (required by "Draft.DRA_NodesTemplates" via "Draft.DRA_Nodes" via "Draft.DRA_Implement" via "Draft.DRA_Refine" via "Draft.DRA" via "Draft.Deterministic")
Loading theory "Draft.Sequence_Zip" (required by "Draft.DRA_NodesTemplates" via "Draft.DRA_Nodes" via "Draft.DRA_Implement" via "Draft.DRA_Refine" via "Draft.DRA" via "Draft.Deterministic" via "Draft.Degeneralization")
### theory "Draft.Acceptance"
### 0.100s elapsed time, 0.371s cpu time, 0.075s GC time
Loading theory "Draft.Transition_System_Extra" (required by "Draft.DRA_NodesTemplates" via "Draft.DRA_Nodes" via "Draft.DRA_Implement" via "Draft.DRA_Refine" via "Draft.DRA" via "Draft.Deterministic")
### theory "Draft.Sequence_Zip"
### 0.206s elapsed time, 0.794s cpu time, 0.075s GC time
Loading theory "Draft.Degeneralization" (required by "Draft.DRA_NodesTemplates" via "Draft.DRA_Nodes" via "Draft.DRA_Implement" via "Draft.DRA_Refine" via "Draft.DRA" via "Draft.Deterministic")
Found termination order: "size <*mlex*> {}"
locale transition_system
  fixes execute :: "'transition => 'state => 'state"
    and enabled :: "'transition => 'state => bool"
### theory "Draft.Transition_System_Construction"
### 0.348s elapsed time, 1.332s cpu time, 0.138s GC time
Loading theory "Draft.Maps" (required by "Draft.DRA_NodesTemplates" via "Draft.DRA_Nodes" via "Draft.DRA_Implement" via "Draft.DRA_Refine" via "Draft.Acceptance_Refine" via "Draft.Refine")
locale transition_system
  fixes execute :: "'transition => 'state => 'state"
    and enabled :: "'transition => 'state => bool"
locale transition_system_initial
  fixes execute :: "'transition => 'state => 'state"
    and enabled :: "'transition => 'state => bool"
    and initial :: "'state => bool"
### theory "Draft.Maps"
### 0.112s elapsed time, 0.419s cpu time, 0.067s GC time
Loading theory "Draft.Refine" (required by "Draft.DRA_NodesTemplates" via "Draft.DRA_Nodes" via "Draft.DRA_Implement" via "Draft.DRA_Refine" via "Draft.Acceptance_Refine")
### theory "Draft.Transition_System_Extra"
### 0.363s elapsed time, 1.392s cpu time, 0.130s GC time
### theory "HOL-Library.Tree"
### 2.123s elapsed time, 6.782s cpu time, 1.189s GC time
Loading theory "Draft.Templates" (required by "Draft.DRA_NodesTemplates" via "Draft.ExtrEqs")
### theory "Draft.Degeneralization"
### 0.309s elapsed time, 1.124s cpu time, 0.130s GC time
Loading theory "Draft.Deterministic" (required by "Draft.DRA_NodesTemplates" via "Draft.DRA_Nodes" via "Draft.DRA_Implement" via "Draft.DRA_Refine" via "Draft.DRA")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.067s elapsed time, 0.228s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.DRA_NodesTemplates")
locale automaton
  fixes
    automaton ::
      "'label set
       => 'state
          => ('label => 'state => 'state) => 'condition => 'automaton"
    and alphabet :: "'automaton => 'label set"
    and initial :: "'automaton => 'state"
    and transition :: "'automaton => 'label => 'state => 'state"
    and condition :: "'automaton => 'condition"
  assumes "automaton automaton alphabet initial transition condition"
rel_fun (rel_fun ?A ?B) (rel_fun (rel_set ?A) (rel_set ?B)) (`) (`)
((`), (`))
: (?A \<rightarrow> ?B) \<rightarrow>
  \<langle>?A\<rangle>set_rel \<rightarrow> \<langle>?B\<rangle>set_rel
bi_unique ?A ==>
rel_fun (rel_fun ?A ?B) (rel_fun ?A (rel_fun ?B (rel_fun ?A ?B))) fun_upd
 fun_upd
bijective ?A ==>
(fun_upd, fun_upd)
: (?A \<rightarrow> ?B) \<rightarrow>
  ?A \<rightarrow> ?B \<rightarrow> ?A \<rightarrow> ?B
locale automaton_path
  fixes
    automaton ::
      "'label set
       => 'state
          => ('label => 'state => 'state) => 'condition => 'automaton"
    and alphabet :: "'automaton => 'label set"
    and initial :: "'automaton => 'state"
    and transition :: "'automaton => 'label => 'state => 'state"
    and condition :: "'automaton => 'condition"
    and test :: "'condition => 'label list => 'state list => 'state => bool"
  assumes "automaton_path automaton alphabet initial transition condition"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.913s elapsed time, 2.867s cpu time, 0.996s GC time
single_valued ?Ra ==>
(set, set)
: \<langle>?Ra\<rangle>list_rel \<rightarrow> \<langle>?Ra\<rangle>set_rel
(set, set)
: \<langle>?R\<rangle>list_rel \<rightarrow> \<langle>?R\<rangle>set_rel
locale automaton_run
  fixes
    automaton ::
      "'label set
       => 'state
          => ('label => 'state => 'state) => 'condition => 'automaton"
    and alphabet :: "'automaton => 'label set"
    and initial :: "'automaton => 'state"
    and transition :: "'automaton => 'label => 'state => 'state"
    and condition :: "'automaton => 'condition"
    and
    test :: "'condition => 'label stream => 'state stream => 'state => bool"
  assumes "automaton_run automaton alphabet initial transition condition"
"(set \<circ>\<circ> sort_key) (%x. x)"
  :: "'a list => 'a set"
### theory "Draft.Refine"
### 1.373s elapsed time, 3.941s cpu time, 1.048s GC time
Loading theory "Draft.Acceptance_Refine" (required by "Draft.DRA_NodesTemplates" via "Draft.DRA_Nodes" via "Draft.DRA_Implement" via "Draft.DRA_Refine")
Loading theory "Draft.Transition_System_Refine" (required by "Draft.DRA_NodesTemplates" via "Draft.DRA_Nodes" via "Draft.DRA_Implement" via "Draft.DRA_Refine")
"(((set \<circ>\<circ> map) f \<circ>\<circ> map) g \<circ>\<circ> map) h"
  :: "'c list => 'b set"
Loading theory "Draft.Implement" (required by "Draft.DRA_NodesTemplates" via "Draft.DRA_Nodes" via "Draft.DRA_Implement")
locale automaton_degeneralization
  fixes
    automaton\<^sub>1 ::
      "'label set
       => 'state
          => ('label => 'state => 'state)
             => ('item => bool) list => 'automaton\<^sub>1"
    and alphabet\<^sub>1 :: "'automaton\<^sub>1 => 'label set"
    and initial\<^sub>1 :: "'automaton\<^sub>1 => 'state"
    and
    transition\<^sub>1 :: "'automaton\<^sub>1 => 'label => 'state => 'state"
    and condition\<^sub>1 :: "'automaton\<^sub>1 => ('item => bool) list"
    and
    automaton\<^sub>2 ::
      "'label set
       => 'state * nat
          => ('label => 'state * nat => 'state * nat)
             => ('item_degen => bool) => 'automaton\<^sub>2"
    and alphabet\<^sub>2 :: "'automaton\<^sub>2 => 'label set"
    and initial\<^sub>2 :: "'automaton\<^sub>2 => 'state * nat"
    and
    transition\<^sub>2 ::
      "'automaton\<^sub>2 => 'label => 'state * nat => 'state * nat"
    and condition\<^sub>2 :: "'automaton\<^sub>2 => 'item_degen => bool"
    and item :: "'state * 'label * 'state => 'item"
    and translate :: "'item_degen => 'item * nat"
  assumes
    "automaton_degeneralization automaton\<^sub>1 alphabet\<^sub>1
      initial\<^sub>1 transition\<^sub>1 condition\<^sub>1 automaton\<^sub>2
      alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2 condition\<^sub>2"
### theory "Draft.Acceptance_Refine"
### 0.480s elapsed time, 1.864s cpu time, 0.157s GC time
### theory "Draft.Transition_System_Refine"
### 0.510s elapsed time, 1.955s cpu time, 0.157s GC time
locale automaton_degeneralization_run
  fixes
    automaton\<^sub>1 ::
      "'a set => 'b => ('a => 'b => 'b) => ('c => bool) list => 'd"
    and alphabet\<^sub>1 :: "'d => 'a set"
    and initial\<^sub>1 :: "'d => 'b"
    and transition\<^sub>1 :: "'d => 'a => 'b => 'b"
    and condition\<^sub>1 :: "'d => ('c => bool) list"
    and
    test\<^sub>1 ::
      "('c => bool) list => 'a stream => 'b stream => 'b => bool"
    and
    automaton\<^sub>2 ::
      "'a set
       => 'b * nat => ('a => 'b * nat => 'b * nat) => ('e => bool) => 'f"
    and alphabet\<^sub>2 :: "'f => 'a set"
    and initial\<^sub>2 :: "'f => 'b * nat"
    and transition\<^sub>2 :: "'f => 'a => 'b * nat => 'b * nat"
    and condition\<^sub>2 :: "'f => 'e => bool"
    and
    test\<^sub>2 ::
      "('e => bool) => 'a stream => ('b * nat) stream => 'b * nat => bool"
    and item :: "'b * 'a * 'b => 'c"
    and translate :: "'e => 'c * nat"
  assumes
    "automaton_degeneralization_run automaton\<^sub>1 alphabet\<^sub>1
      initial\<^sub>1 transition\<^sub>1 condition\<^sub>1 test\<^sub>1
      automaton\<^sub>2 alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2
      condition\<^sub>2 test\<^sub>2 item translate"
locale automaton_product
  fixes
    automaton\<^sub>1 ::
      "'label set
       => 'state\<^sub>1
          => ('label => 'state\<^sub>1 => 'state\<^sub>1)
             => 'condition\<^sub>1 => 'automaton\<^sub>1"
    and alphabet\<^sub>1 :: "'automaton\<^sub>1 => 'label set"
    and initial\<^sub>1 :: "'automaton\<^sub>1 => 'state\<^sub>1"
    and
    transition\<^sub>1 ::
      "'automaton\<^sub>1 => 'label => 'state\<^sub>1 => 'state\<^sub>1"
    and condition\<^sub>1 :: "'automaton\<^sub>1 => 'condition\<^sub>1"
    and
    automaton\<^sub>2 ::
      "'label set
       => 'state\<^sub>2
          => ('label => 'state\<^sub>2 => 'state\<^sub>2)
             => 'condition\<^sub>2 => 'automaton\<^sub>2"
    and alphabet\<^sub>2 :: "'automaton\<^sub>2 => 'label set"
    and initial\<^sub>2 :: "'automaton\<^sub>2 => 'state\<^sub>2"
    and
    transition\<^sub>2 ::
      "'automaton\<^sub>2 => 'label => 'state\<^sub>2 => 'state\<^sub>2"
    and condition\<^sub>2 :: "'automaton\<^sub>2 => 'condition\<^sub>2"
    and
    automaton\<^sub>3 ::
      "'label set
       => 'state\<^sub>1 * 'state\<^sub>2
          => ('label
              => 'state\<^sub>1 * 'state\<^sub>2
                 => 'state\<^sub>1 * 'state\<^sub>2)
             => 'condition\<^sub>3 => 'automaton\<^sub>3"
    and alphabet\<^sub>3 :: "'automaton\<^sub>3 => 'label set"
    and
    initial\<^sub>3 ::
      "'automaton\<^sub>3 => 'state\<^sub>1 * 'state\<^sub>2"
    and
    transition\<^sub>3 ::
      "'automaton\<^sub>3
       => 'label
          => 'state\<^sub>1 * 'state\<^sub>2
             => 'state\<^sub>1 * 'state\<^sub>2"
    and condition\<^sub>3 :: "'automaton\<^sub>3 => 'condition\<^sub>3"
    and
    condition ::
      "'condition\<^sub>1 => 'condition\<^sub>2 => 'condition\<^sub>3"
  assumes
    "automaton_product automaton\<^sub>1 alphabet\<^sub>1 initial\<^sub>1
      transition\<^sub>1 condition\<^sub>1 automaton\<^sub>2
      alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2 condition\<^sub>2
      automaton\<^sub>3 alphabet\<^sub>3 initial\<^sub>3 transition\<^sub>3
      condition\<^sub>3"
### theory "Draft.Implement"
### 1.672s elapsed time, 4.797s cpu time, 1.442s GC time
locale automaton_intersection_path
  fixes automaton\<^sub>1 :: "'a set => 'b => ('a => 'b => 'b) => 'c => 'd"
    and alphabet\<^sub>1 :: "'d => 'a set"
    and initial\<^sub>1 :: "'d => 'b"
    and transition\<^sub>1 :: "'d => 'a => 'b => 'b"
    and condition\<^sub>1 :: "'d => 'c"
    and test\<^sub>1 :: "'c => 'a list => 'b list => 'b => bool"
    and automaton\<^sub>2 :: "'a set => 'e => ('a => 'e => 'e) => 'f => 'g"
    and alphabet\<^sub>2 :: "'g => 'a set"
    and initial\<^sub>2 :: "'g => 'e"
    and transition\<^sub>2 :: "'g => 'a => 'e => 'e"
    and condition\<^sub>2 :: "'g => 'f"
    and test\<^sub>2 :: "'f => 'a list => 'e list => 'e => bool"
    and
    automaton\<^sub>3 ::
      "'a set => 'b * 'e => ('a => 'b * 'e => 'b * 'e) => 'h => 'i"
    and alphabet\<^sub>3 :: "'i => 'a set"
    and initial\<^sub>3 :: "'i => 'b * 'e"
    and transition\<^sub>3 :: "'i => 'a => 'b * 'e => 'b * 'e"
    and condition\<^sub>3 :: "'i => 'h"
    and test\<^sub>3 :: "'h => 'a list => ('b * 'e) list => 'b * 'e => bool"
    and condition :: "'c => 'f => 'h"
  assumes
    "automaton_intersection_path automaton\<^sub>1 alphabet\<^sub>1
      initial\<^sub>1 transition\<^sub>1 condition\<^sub>1 test\<^sub>1
      automaton\<^sub>2 alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2
      condition\<^sub>2 test\<^sub>2 automaton\<^sub>3 alphabet\<^sub>3
      initial\<^sub>3 transition\<^sub>3 condition\<^sub>3 test\<^sub>3
      condition"
locale automaton_union_path
  fixes automaton\<^sub>1 :: "'a set => 'b => ('a => 'b => 'b) => 'c => 'd"
    and alphabet\<^sub>1 :: "'d => 'a set"
    and initial\<^sub>1 :: "'d => 'b"
    and transition\<^sub>1 :: "'d => 'a => 'b => 'b"
    and condition\<^sub>1 :: "'d => 'c"
    and test\<^sub>1 :: "'c => 'a list => 'b list => 'b => bool"
    and automaton\<^sub>2 :: "'a set => 'e => ('a => 'e => 'e) => 'f => 'g"
    and alphabet\<^sub>2 :: "'g => 'a set"
    and initial\<^sub>2 :: "'g => 'e"
    and transition\<^sub>2 :: "'g => 'a => 'e => 'e"
    and condition\<^sub>2 :: "'g => 'f"
    and test\<^sub>2 :: "'f => 'a list => 'e list => 'e => bool"
    and
    automaton\<^sub>3 ::
      "'a set => 'b * 'e => ('a => 'b * 'e => 'b * 'e) => 'h => 'i"
    and alphabet\<^sub>3 :: "'i => 'a set"
    and initial\<^sub>3 :: "'i => 'b * 'e"
    and transition\<^sub>3 :: "'i => 'a => 'b * 'e => 'b * 'e"
    and condition\<^sub>3 :: "'i => 'h"
    and test\<^sub>3 :: "'h => 'a list => ('b * 'e) list => 'b * 'e => bool"
    and condition :: "'c => 'f => 'h"
  assumes
    "automaton_union_path automaton\<^sub>1 alphabet\<^sub>1 initial\<^sub>1
      transition\<^sub>1 condition\<^sub>1 test\<^sub>1 automaton\<^sub>2
      alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2 condition\<^sub>2
      test\<^sub>2 automaton\<^sub>3 alphabet\<^sub>3 initial\<^sub>3
      transition\<^sub>3 condition\<^sub>3 test\<^sub>3 condition"
locale automaton_intersection_run
  fixes automaton\<^sub>1 :: "'a set => 'b => ('a => 'b => 'b) => 'c => 'd"
    and alphabet\<^sub>1 :: "'d => 'a set"
    and initial\<^sub>1 :: "'d => 'b"
    and transition\<^sub>1 :: "'d => 'a => 'b => 'b"
    and condition\<^sub>1 :: "'d => 'c"
    and test\<^sub>1 :: "'c => 'a stream => 'b stream => 'b => bool"
    and automaton\<^sub>2 :: "'a set => 'e => ('a => 'e => 'e) => 'f => 'g"
    and alphabet\<^sub>2 :: "'g => 'a set"
    and initial\<^sub>2 :: "'g => 'e"
    and transition\<^sub>2 :: "'g => 'a => 'e => 'e"
    and condition\<^sub>2 :: "'g => 'f"
    and test\<^sub>2 :: "'f => 'a stream => 'e stream => 'e => bool"
    and
    automaton\<^sub>3 ::
      "'a set => 'b * 'e => ('a => 'b * 'e => 'b * 'e) => 'h => 'i"
    and alphabet\<^sub>3 :: "'i => 'a set"
    and initial\<^sub>3 :: "'i => 'b * 'e"
    and transition\<^sub>3 :: "'i => 'a => 'b * 'e => 'b * 'e"
    and condition\<^sub>3 :: "'i => 'h"
    and
    test\<^sub>3 :: "'h => 'a stream => ('b * 'e) stream => 'b * 'e => bool"
    and condition :: "'c => 'f => 'h"
  assumes
    "automaton_intersection_run automaton\<^sub>1 alphabet\<^sub>1
      initial\<^sub>1 transition\<^sub>1 condition\<^sub>1 test\<^sub>1
      automaton\<^sub>2 alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2
      condition\<^sub>2 test\<^sub>2 automaton\<^sub>3 alphabet\<^sub>3
      initial\<^sub>3 transition\<^sub>3 condition\<^sub>3 test\<^sub>3
      condition"
locale automaton_union_run
  fixes automaton\<^sub>1 :: "'a set => 'b => ('a => 'b => 'b) => 'c => 'd"
    and alphabet\<^sub>1 :: "'d => 'a set"
    and initial\<^sub>1 :: "'d => 'b"
    and transition\<^sub>1 :: "'d => 'a => 'b => 'b"
    and condition\<^sub>1 :: "'d => 'c"
    and test\<^sub>1 :: "'c => 'a stream => 'b stream => 'b => bool"
    and automaton\<^sub>2 :: "'a set => 'e => ('a => 'e => 'e) => 'f => 'g"
    and alphabet\<^sub>2 :: "'g => 'a set"
    and initial\<^sub>2 :: "'g => 'e"
    and transition\<^sub>2 :: "'g => 'a => 'e => 'e"
    and condition\<^sub>2 :: "'g => 'f"
    and test\<^sub>2 :: "'f => 'a stream => 'e stream => 'e => bool"
    and
    automaton\<^sub>3 ::
      "'a set => 'b * 'e => ('a => 'b * 'e => 'b * 'e) => 'h => 'i"
    and alphabet\<^sub>3 :: "'i => 'a set"
    and initial\<^sub>3 :: "'i => 'b * 'e"
    and transition\<^sub>3 :: "'i => 'a => 'b * 'e => 'b * 'e"
    and condition\<^sub>3 :: "'i => 'h"
    and
    test\<^sub>3 :: "'h => 'a stream => ('b * 'e) stream => 'b * 'e => bool"
    and condition :: "'c => 'f => 'h"
  assumes
    "automaton_union_run automaton\<^sub>1 alphabet\<^sub>1 initial\<^sub>1
      transition\<^sub>1 condition\<^sub>1 test\<^sub>1 automaton\<^sub>2
      alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2 condition\<^sub>2
      test\<^sub>2 automaton\<^sub>3 alphabet\<^sub>3 initial\<^sub>3
      transition\<^sub>3 condition\<^sub>3 test\<^sub>3 condition"
locale automaton_product_list
  fixes
    automaton\<^sub>1 ::
      "'label set
       => 'state
          => ('label => 'state => 'state)
             => 'condition\<^sub>1 => 'automaton\<^sub>1"
    and alphabet\<^sub>1 :: "'automaton\<^sub>1 => 'label set"
    and initial\<^sub>1 :: "'automaton\<^sub>1 => 'state"
    and
    transition\<^sub>1 :: "'automaton\<^sub>1 => 'label => 'state => 'state"
    and condition\<^sub>1 :: "'automaton\<^sub>1 => 'condition\<^sub>1"
    and
    automaton\<^sub>2 ::
      "'label set
       => 'state list
          => ('label => 'state list => 'state list)
             => 'condition\<^sub>2 => 'automaton\<^sub>2"
    and alphabet\<^sub>2 :: "'automaton\<^sub>2 => 'label set"
    and initial\<^sub>2 :: "'automaton\<^sub>2 => 'state list"
    and
    transition\<^sub>2 ::
      "'automaton\<^sub>2 => 'label => 'state list => 'state list"
    and condition\<^sub>2 :: "'automaton\<^sub>2 => 'condition\<^sub>2"
    and condition :: "'condition\<^sub>1 list => 'condition\<^sub>2"
  assumes
    "automaton_product_list automaton\<^sub>1 alphabet\<^sub>1
      initial\<^sub>1 transition\<^sub>1 condition\<^sub>1 automaton\<^sub>2
      alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2 condition\<^sub>2"
locale automaton_intersection_list_run
  fixes automaton\<^sub>1 :: "'a set => 'b => ('a => 'b => 'b) => 'c => 'd"
    and alphabet\<^sub>1 :: "'d => 'a set"
    and initial\<^sub>1 :: "'d => 'b"
    and transition\<^sub>1 :: "'d => 'a => 'b => 'b"
    and condition\<^sub>1 :: "'d => 'c"
    and test\<^sub>1 :: "'c => 'a stream => 'b stream => 'b => bool"
    and
    automaton\<^sub>2 ::
      "'a set => 'b list => ('a => 'b list => 'b list) => 'e => 'f"
    and alphabet\<^sub>2 :: "'f => 'a set"
    and initial\<^sub>2 :: "'f => 'b list"
    and transition\<^sub>2 :: "'f => 'a => 'b list => 'b list"
    and condition\<^sub>2 :: "'f => 'e"
    and
    test\<^sub>2 :: "'e => 'a stream => 'b list stream => 'b list => bool"
    and condition :: "'c list => 'e"
  assumes
    "automaton_intersection_list_run automaton\<^sub>1 alphabet\<^sub>1
      initial\<^sub>1 transition\<^sub>1 condition\<^sub>1 test\<^sub>1
      automaton\<^sub>2 alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2
      condition\<^sub>2 test\<^sub>2 condition"
locale automaton_union_list_run
  fixes automaton\<^sub>1 :: "'a set => 'b => ('a => 'b => 'b) => 'c => 'd"
    and alphabet\<^sub>1 :: "'d => 'a set"
    and initial\<^sub>1 :: "'d => 'b"
    and transition\<^sub>1 :: "'d => 'a => 'b => 'b"
    and condition\<^sub>1 :: "'d => 'c"
    and test\<^sub>1 :: "'c => 'a stream => 'b stream => 'b => bool"
    and
    automaton\<^sub>2 ::
      "'a set => 'b list => ('a => 'b list => 'b list) => 'e => 'f"
    and alphabet\<^sub>2 :: "'f => 'a set"
    and initial\<^sub>2 :: "'f => 'b list"
    and transition\<^sub>2 :: "'f => 'a => 'b list => 'b list"
    and condition\<^sub>2 :: "'f => 'e"
    and
    test\<^sub>2 :: "'e => 'a stream => 'b list stream => 'b list => bool"
    and condition :: "'c list => 'e"
  assumes
    "automaton_union_list_run automaton\<^sub>1 alphabet\<^sub>1
      initial\<^sub>1 transition\<^sub>1 condition\<^sub>1 test\<^sub>1
      automaton\<^sub>2 alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2
      condition\<^sub>2 test\<^sub>2 condition"
locale automaton_complement
  fixes
    automaton\<^sub>1 ::
      "'label set
       => 'state
          => ('label => 'state => 'state)
             => 'condition\<^sub>1 => 'automaton\<^sub>1"
    and alphabet\<^sub>1 :: "'automaton\<^sub>1 => 'label set"
    and initial\<^sub>1 :: "'automaton\<^sub>1 => 'state"
    and
    transition\<^sub>1 :: "'automaton\<^sub>1 => 'label => 'state => 'state"
    and condition\<^sub>1 :: "'automaton\<^sub>1 => 'condition\<^sub>1"
    and
    automaton\<^sub>2 ::
      "'label set
       => 'state
          => ('label => 'state => 'state)
             => 'condition\<^sub>2 => 'automaton\<^sub>2"
    and alphabet\<^sub>2 :: "'automaton\<^sub>2 => 'label set"
    and initial\<^sub>2 :: "'automaton\<^sub>2 => 'state"
    and
    transition\<^sub>2 :: "'automaton\<^sub>2 => 'label => 'state => 'state"
    and condition\<^sub>2 :: "'automaton\<^sub>2 => 'condition\<^sub>2"
    and condition :: "'condition\<^sub>1 => 'condition\<^sub>2"
  assumes
    "automaton_complement automaton\<^sub>1 alphabet\<^sub>1 initial\<^sub>1
      transition\<^sub>1 condition\<^sub>1 automaton\<^sub>2
      alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2 condition\<^sub>2"
locale automaton_complement_path
  fixes automaton\<^sub>1 :: "'a set => 'b => ('a => 'b => 'b) => 'c => 'd"
    and alphabet\<^sub>1 :: "'d => 'a set"
    and initial\<^sub>1 :: "'d => 'b"
    and transition\<^sub>1 :: "'d => 'a => 'b => 'b"
    and condition\<^sub>1 :: "'d => 'c"
    and test\<^sub>1 :: "'c => 'a list => 'b list => 'b => bool"
    and automaton\<^sub>2 :: "'a set => 'b => ('a => 'b => 'b) => 'e => 'f"
    and alphabet\<^sub>2 :: "'f => 'a set"
    and initial\<^sub>2 :: "'f => 'b"
    and transition\<^sub>2 :: "'f => 'a => 'b => 'b"
    and condition\<^sub>2 :: "'f => 'e"
    and test\<^sub>2 :: "'e => 'a list => 'b list => 'b => bool"
    and condition :: "'c => 'e"
  assumes
    "automaton_complement_path automaton\<^sub>1 alphabet\<^sub>1
      initial\<^sub>1 transition\<^sub>1 condition\<^sub>1 test\<^sub>1
      automaton\<^sub>2 alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2
      condition\<^sub>2 test\<^sub>2 condition"
locale automaton_complement_run
  fixes automaton\<^sub>1 :: "'a set => 'b => ('a => 'b => 'b) => 'c => 'd"
    and alphabet\<^sub>1 :: "'d => 'a set"
    and initial\<^sub>1 :: "'d => 'b"
    and transition\<^sub>1 :: "'d => 'a => 'b => 'b"
    and condition\<^sub>1 :: "'d => 'c"
    and test\<^sub>1 :: "'c => 'a stream => 'b stream => 'b => bool"
    and automaton\<^sub>2 :: "'a set => 'b => ('a => 'b => 'b) => 'e => 'f"
    and alphabet\<^sub>2 :: "'f => 'a set"
    and initial\<^sub>2 :: "'f => 'b"
    and transition\<^sub>2 :: "'f => 'a => 'b => 'b"
    and condition\<^sub>2 :: "'f => 'e"
    and test\<^sub>2 :: "'e => 'a stream => 'b stream => 'b => bool"
    and condition :: "'c => 'e"
  assumes
    "automaton_complement_run automaton\<^sub>1 alphabet\<^sub>1
      initial\<^sub>1 transition\<^sub>1 condition\<^sub>1 test\<^sub>1
      automaton\<^sub>2 alphabet\<^sub>2 initial\<^sub>2 transition\<^sub>2
      condition\<^sub>2 test\<^sub>2 condition"
### theory "Draft.Deterministic"
### 6.394s elapsed time, 12.178s cpu time, 2.799s GC time
Loading theory "Draft.DRA" (required by "Draft.DRA_NodesTemplates" via "Draft.DRA_Nodes" via "Draft.DRA_Implement" via "Draft.DRA_Refine")
### theory "Draft.DRA"
### 0.748s elapsed time, 0.844s cpu time, 0.139s GC time
Loading theory "Draft.DRA_Refine" (required by "Draft.DRA_NodesTemplates" via "Draft.DRA_Nodes" via "Draft.DRA_Implement")
### theory "Draft.DRA_Refine"
### 0.481s elapsed time, 0.498s cpu time, 0.000s GC time
Loading theory "Draft.DRA_Implement" (required by "Draft.DRA_NodesTemplates" via "Draft.DRA_Nodes")
### theory "Draft.DRA_Implement"
### 1.487s elapsed time, 1.674s cpu time, 0.240s GC time
Loading theory "Draft.DRA_Nodes" (required by "Draft.DRA_NodesTemplates")
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### theory "Draft.DRA_Nodes"
### 3.093s elapsed time, 3.368s cpu time, 0.390s GC time
Loading theory "Draft.DRA_NodesTemplates"
val templateLemmas =
   [("DRA_Nodes.dra_G_graph", "graph (dra_G ?A)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("DRA_Nodes.dra_G_reachable_nodes",
     "op_reachable (dra_G ?A) = nodes ?A",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("DRA_Nodes.dra_G_ahs",
     "dra_G ?A =
      (| g_V = UNIV,
         g_E =
           E_of_succ
            (%p. CAST
                  ((%a. transition ?A a p ::: ?S) ` alphabet ?A :::
                   \<langle>?S\<rangle>ahs_rel ?bhc)),
         g_V0 = {initial ?A} |)",
     template_equation
      (template_app (template_hole 18, template_var 2),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 17, template_hole 16),
             template_app (template_hole 15, t_empty)),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 2)),
             template_hole 1)),
         template_hole 0))),
    ("DRA_Nodes.drai_Gi_refine",
     "[| SIDE_GEN_ALGO (is_bounded_hashcode ?S ?seq ?bhc);
         SIDE_GEN_ALGO (is_valid_def_hm_size TYPE(?'statei) ?hms);
         GEN_OP ?seq (=) (?S \<rightarrow> ?S \<rightarrow> bool_rel) |]
      ==> (drai_Gi ?seq ?bhc ?hms, dra_G)
          : \<langle>?L, ?S\<rangle>drai_dra_rel \<rightarrow>
            \<langle>unit_rel, ?S\<rangle>g_impl_rel_ext",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 32,
              template_app
               (template_hole 31,
                template_app
                 (template_app
                   (template_app (template_hole 30, template_var 4),
                    template_var 3),
                  template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_hole 32,
              template_app
               (template_hole 31,
                template_app
                 (template_app (template_hole 29, template_hole 28),
                  template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_hole 32,
              template_app
               (template_hole 27,
                template_app
                 (template_app
                   (template_hole 26,
                    template_app
                     (template_app (template_hole 25, template_var 3),
                      template_app
                       (template_app
                         (template_hole 24,
                          template_app
                           (template_hole 23, template_hole 22)),
                        template_app
                         (template_hole 21,
                          template_app
                           (template_app
                             (template_hole 20,
                              template_app
                               (template_app
                                 (template_hole 19, template_hole 18),
                                template_var 4)),
                            template_app
                             (template_app
                               (template_hole 17,
                                template_app
                                 (template_app
                                   (template_hole 16, template_hole 15),
                                  template_var 4)),
                              template_hole 14)))))),
                  template_app
                   (template_app
                     (template_hole 20,
                      template_app
                       (template_app (template_hole 19, template_hole 18),
                        template_var 4)),
                    template_app
                     (template_app
                       (template_hole 17,
                        template_app
                         (template_app (template_hole 16, template_hole 15),
                          template_var 4)),
                      template_hole 14)))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app
                      (template_app (template_hole 11, template_var 3),
                       template_var 2),
                     template_var 1)),
                 template_hole 10)),
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_hole 7),
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 5, template_hole 4),
                         template_var 0)),
                     template_var 4))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_hole 0)),
                 template_var 4)))
           ))),
    ("DRA_Nodes.dra_nodes",
     "[| finite ((g_E (dra_G ?A))^* `` g_V0 (dra_G ?A));
         is_bounded_hashcode ?S ?seq ?bhc;
         is_valid_def_hm_size TYPE(?'statei) ?hms;
         (?seq, (=)) : ?S \<rightarrow> ?S \<rightarrow> bool_rel;
         (?Ai, ?A) : \<langle>?L, ?S\<rangle>drai_dra_rel |]
      ==> (find_reachable_codeT ?seq ?bhc ?hms (drai_Gi ?seq ?bhc ?hms ?Ai),
           op_reachable (dra_G ?A))
          : \<langle>?S\<rangle>ahs_rel ?bhc",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 31,
              template_app
               (template_app
                 (template_hole 30,
                  template_app
                   (template_hole 29,
                    template_app
                     (template_hole 28,
                      template_app (template_hole 27, template_var 6)))),
                template_app
                 (template_hole 26,
                  template_app (template_hole 27, template_var 6))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 25, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 24, template_hole 23),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 22,
                template_app
                 (template_app (template_hole 21, template_var 4),
                  template_hole 20)),
              template_app
               (template_app
                 (template_hole 19,
                  template_app
                   (template_app (template_hole 18, template_hole 17),
                    template_var 5)),
                template_app
                 (template_app
                   (template_hole 16,
                    template_app
                     (template_app (template_hole 15, template_hole 14),
                      template_var 5)),
                  template_hole 13)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 1),
                  template_var 6)),
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_hole 8),
                    template_var 0)),
                template_var 5))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 5, template_var 4),
                         template_var 3),
                       template_var 2),
                     template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 4, template_var 4),
                           template_var 3),
                         template_var 2),
                       template_var 1))),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 27, template_var 6)))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 3))),
               template_var 5))
           ))),
    ("DRA_Nodes.drai_Gi",
     "[| is_bounded_hashcode ?S ?seq ?bhc;
         is_valid_def_hm_size TYPE(?'statei) ?hms;
         (?seq, (=)) : ?S \<rightarrow> ?S \<rightarrow> bool_rel;
         (?Ai, ?A) : \<langle>?L, ?S\<rangle>drai_dra_rel |]
      ==> (RETURN
            (| gi_V = %_. True,
               gi_E =
                 %x. to_list
                      (map_iterator_dom o Impl_Array_Hash_Map.ahm_iteratei)
                      (gen_image foldli (Impl_Array_Hash_Map.ahm_empty ?hms)
                        (map2set_insert
                          (Impl_Array_Hash_Map.ahm_update ?seq ?bhc))
                        (%xi. transitioni ?Ai xi x) (alphabeti ?Ai)),
               gi_V0 = [initiali ?Ai] |),
           RETURN (dra_G ?A))
          : \<langle>\<langle>unit_rel,
          ?S\<rangle>g_impl_rel_ext\<rangle>nres_rel",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 45, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 44, template_hole 43),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 42,
                template_app
                 (template_app (template_hole 41, template_var 5),
                  template_hole 40)),
              template_app
               (template_app
                 (template_hole 39,
                  template_app
                   (template_app (template_hole 38, template_hole 37),
                    template_var 6)),
                template_app
                 (template_app
                   (template_hole 36,
                    template_app
                     (template_app (template_hole 35, template_hole 34),
                      template_var 6)),
                  template_hole 33)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 32,
                template_app
                 (template_app (template_hole 31, template_var 2),
                  template_var 1)),
              template_app
               (template_app
                 (template_hole 30,
                  template_app
                   (template_app (template_hole 29, template_hole 28),
                    template_var 0)),
                template_var 6))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 27,
               template_app
                (template_app
                  (template_hole 26,
                   template_app
                    (template_hole 25,
                     template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 24, t_empty),
                           t_empty),
                         template_app
                          (template_app
                            (template_hole 11,
                             template_app
                              (template_hole 10, template_var 2)),
                           template_hole 9)),
                       template_hole 8))),
                 template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_var 1)))),
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_hole 0)),
                 template_var 6)))
           ))),
    ("DRA_Nodes.dra_nodes_refine",
     "[| SIDE_PRECOND (finite (nodes ?A));
         SIDE_GEN_ALGO (is_bounded_hashcode ?S ?seq ?bhc);
         SIDE_GEN_ALGO (is_valid_def_hm_size TYPE(?'statei) ?hms);
         GEN_OP ?seq (=) (?S \<rightarrow> ?S \<rightarrow> bool_rel);
         (?Ai, ?A) : \<langle>?L, ?S\<rangle>drai_dra_rel |]
      ==> (dra_nodes ?seq ?bhc ?hms ?Ai,
           (Autoref_Tagging.OP nodes :::
            \<langle>?L, ?S\<rangle>drai_dra_rel \<rightarrow>
            \<langle>?S\<rangle>ahs_rel ?bhc) $
           ?A)
          : \<langle>?S\<rangle>ahs_rel ?bhc",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 40,
              template_app
               (template_hole 39,
                template_app
                 (template_hole 38,
                  template_app
                   (template_hole 37,
                    template_app (template_hole 36, template_var 6)))))
            ),
        template_predicate
         (
            template_app
             (template_hole 40,
              template_app
               (template_hole 35,
                template_app
                 (template_app
                   (template_app (template_hole 34, template_var 5),
                    template_var 4),
                  template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_hole 40,
              template_app
               (template_hole 35,
                template_app
                 (template_app (template_hole 33, template_hole 32),
                  template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_hole 40,
              template_app
               (template_hole 31,
                template_app
                 (template_app
                   (template_hole 30,
                    template_app
                     (template_app (template_hole 29, template_var 4),
                      template_app
                       (template_app
                         (template_hole 28,
                          template_app
                           (template_hole 27, template_hole 26)),
                        template_app
                         (template_hole 25,
                          template_app
                           (template_app
                             (template_hole 24,
                              template_app
                               (template_app
                                 (template_hole 23, template_hole 22),
                                template_var 5)),
                            template_app
                             (template_app
                               (template_hole 21,
                                template_app
                                 (template_app
                                   (template_hole 20, template_hole 19),
                                  template_var 5)),
                              template_hole 18)))))),
                  template_app
                   (template_app
                     (template_hole 24,
                      template_app
                       (template_app (template_hole 23, template_hole 22),
                        template_var 5)),
                    template_app
                     (template_app
                       (template_hole 21,
                        template_app
                         (template_app (template_hole 20, template_hole 19),
                          template_var 5)),
                      template_hole 18)))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app (template_hole 16, template_var 1),
                  template_var 6)),
              template_app
               (template_app
                 (template_hole 15,
                  template_app
                   (template_app (template_hole 14, template_hole 13),
                    template_var 0)),
                template_var 5))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 10, template_var 4),
                         template_var 3),
                       template_var 2),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app (template_hole 7, template_hole 36)),
                       template_app
                        (template_hole 6,
                         template_app
                          (template_app
                            (template_hole 5,
                             template_app
                              (template_app
                                (template_hole 4, template_hole 3),
                               template_app
                                (template_app
                                  (template_hole 15,
                                   template_app
                                    (template_app
(template_hole 14, template_hole 13),
                                     template_var 0)),
                                 template_var 5))),
                           template_app
                            (template_app
                              (template_hole 2,
                               template_app
                                (template_hole 1,
                                 template_app
                                  (template_hole 0, template_var 3))),
                             template_var 5))))),
                   template_var 6))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 3))),
               template_var 5))
           )))]:
   (string * thm * template) list
### theory "Draft.DRA_NodesTemplates"
### 2.897s elapsed time, 4.412s cpu time, 1.744s GC time
val it = (): unit
