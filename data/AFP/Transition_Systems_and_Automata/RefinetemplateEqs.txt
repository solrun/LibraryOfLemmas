   [("Refine_Transfer.detTAGI", "?x = detTAG ?x",
     template_equation
      (template_var 0, template_app (template_hole 0, template_var 0))),
    ("RefineG_Domain.flat_lub_simps", "flat_lub ?b {} = ?b",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Refine_Basic.nofail_simps", "nofail (RES ?X) = True",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Refine_Basic.nofail_simps", "nofail (RETURN ?x) = True",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Refine_Basic.pw_ASSERT", "nofail (ASSERT ?\<Phi>) = ?\<Phi>",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Refine_Det.inf_dres_addsimps", "inf dSUCCEEDi ?x = dSUCCEEDi",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Refine_Det.inf_dres_addsimps", "inf ?x dFAILi = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Refine_Det.inf_dres_addsimps", "inf ?x dSUCCEEDi = dSUCCEEDi",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Refine_Det.sup_dres_addsimps", "sup ?x dFAILi = dFAILi",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Refine_Det.sup_dres_addsimps", "sup ?x dSUCCEEDi = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Refine_Det.dres_monad2", "?M >>= dRETURN = ?M",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Refine_Mono_Prover.refine_mono", "dSUCCEED >>= ?f = dSUCCEED",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Refine_Mono_Prover.refine_mono", "dFAIL >>= ?f = dFAIL",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Refine_Basic.abs_fun_strict", "\<Up> ?R SUCCEED = SUCCEED",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Refine_Basic.abs_fun_simps", "\<Up> ?R FAIL = FAIL",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Refine_Basic.nres_monad2", "?M >>= RETURN = ?M",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Refine_Basic.bind_SUCCEED", "SUCCEED >>= ?f = SUCCEED",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Refine_Basic.bind_FAIL", "FAIL >>= ?f = FAIL",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Refine_Basic.conc_fun_strict", "\<Down> ?R SUCCEED = SUCCEED",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Refine_Basic.conc_fun_FAIL", "\<Down> ?R FAIL = FAIL",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Refine_While.filter_nb_FAIL", "filter_nb ?cond FAIL = FAIL",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Refine_Basic.pw_ASSUME", "inres (ASSUME ?\<Phi>) ?x = ?\<Phi>",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_var 1)),
    ("Refine_Transfer.Let_dRETURN_simp", "Let ?m dRETURN = dRETURN ?m",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_app (template_hole 0, template_var 0))),
    ("Refine_Transfer.nres_of_simps", "nres_of (dRETURN ?x) = RETURN ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("RefineG_Domain.flat_lub_simps", "flat_lub ?b {?x} = ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_var 0)),
    ("RefineG_Domain.fun_lub_simps", "fun_lub ?lub {} = (%x. ?lub {})",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       t_empty)),
    ("Refine.stream_Rangep_rel",
     "Rangep (stream_all2 ?R) = pred_stream (Rangep ?R)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Refine.build_rel_domain", "Domain (br ?\<alpha> ?I) = Collect ?I",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Refine_Basic.not_nofail_iff", "(~ nofail ?S) = (?S = FAIL)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 0))
            )],
       template_equation (template_var 0, template_hole 0))),
    ("Refine_Det.dres_order_simps", "(dFAIL <= ?x) = (?x = dFAIL)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_equation (template_var 0, template_hole 1))),
    ("Refine_Det.dres_order_simps", "(?x <= dSUCCEED) = (?x = dSUCCEED)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_equation (template_var 0, template_hole 1))),
    ("Refine_Basic.nres_order_simps", "(?M <= SUCCEED) = (?M = SUCCEED)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_equation (template_var 0, template_hole 1))),
    ("Refine_Basic.nres_order_simps", "(FAIL <= ?M) = (?M = FAIL)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_equation (template_var 0, template_hole 1))),
    ("Refine_Misc.ccpo_mono_simp", "monotone (<=) (<=) ?f = mono ?f",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_hole 2),
           template_hole 1),
         template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Refine_Basic.intro_nofail", "(FAIL ~= ?S) = nofail ?S",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Refine_Basic.intro_nofail", "(?S ~= FAIL) = nofail ?S",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("Refine_Basic.pw_conc_nofail", "nofail (\<Down> ?R ?S) = nofail ?S",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Refine_Basic.refine_pw_simps",
     "nofail (filter_ASSUME ?c ?m) = nofail ?m",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Refine_While.pw_filter_nb", "nofail (filter_nb ?b ?I) = nofail ?I",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Refine.list_rel_single_valued",
     "single_valued (\<langle>?R\<rangle>list_rel) = single_valued ?R",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Refine.stream_rel_single_valued",
     "single_valued (\<langle>?A\<rangle>stream_rel) = single_valued ?A",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Refine_Det.dres_monad1", "dRETURN ?x >>= ?f = ?f ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app (template_var 0, template_var 1))),
    ("Refine_Transfer.dres_unit_simps", "dRETURN ?u >>= ?f = ?f ()",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app (template_var 0, template_hole 0))),
    ("Refine_Basic.RES_Sup_RETURN", "Sup (RETURN ` ?X) = RES ?X",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Refine_Basic.nres_monad1", "RETURN ?x >>= ?f = ?f ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app (template_var 0, template_var 1))),
    ("Refine_Basic.SPEC_eq_is_RETURN", "SPEC ((=) ?x) = RETURN ?x",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app (template_hole 0, template_var 0))),
    ("Refine_Basic.RES_sng_eq_RETURN", "RES {?x} = RETURN ?x",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("Refine_Foreach.FOREACH_emp",
     "FOREACH {} ?f ?\<sigma> = RETURN ?\<sigma>",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 1),
         template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Refine_Basic.inres_simps", "inres (RES ?X) = (%x. x : ?X)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       t_empty)),
    ("Refine_Basic.inres_simps", "inres (RETURN ?x) = (=) ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       t_empty)),
    ("Refine.stream_rel_domain",
     "Domain (\<langle>?R\<rangle>stream_rel) = streams (Domain ?R)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Refine.stream_rel_range",
     "Range (\<langle>?R\<rangle>stream_rel) = streams (Range ?R)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Refine.set_rel_Id_on",
     "\<langle>Id_on ?S\<rangle>set_rel = Id_on (Pow ?S)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Refine.list_rel_simps",
     "\<langle>Id_on ?P\<rangle>list_rel = Id_on (lists ?P)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Refine.stream_rel_simps",
     "\<langle>Id_on ?P\<rangle>stream_rel = Id_on (streams ?P)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Refine_Basic.nres_more_simps", "(SUCCEED = RES ?X) = (?X = {})",
     template_bimplication
      (template_equation
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_equation (template_var 0, template_hole 0))),
    ("Refine_Basic.nres_more_simps", "(RES ?X = SUCCEED) = (?X = {})",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Refine_Basic.nres_order_simps", "(Sup ?X = FAIL) = (FAIL : ?X)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_hole 1), template_var 0))),
    ("Refine_Basic.nres_order_simps", "(FAIL = Sup ?X) = (FAIL : ?X)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_hole 2), template_var 0))),
    ("Refine_Basic.nf_inres_RES", "nf_inres (RES ?X) ?x = (?x : ?X)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Refine_Basic.nf_inres_SPEC",
     "nf_inres (SPEC ?\<Phi>) ?x = ?\<Phi> ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))),
         template_var 0),
       template_app (template_var 1, template_var 0))),
    ("Refine_Foreach.dfoldli_simps", "dfoldli [] ?c ?f ?s = dRETURN ?s",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Refine_Basic.let_to_bind_conv", "Let ?x ?f = RETURN ?x >>= ?f",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Refine_Basic.ife_FAIL_to_ASSERT_cnv",
     "(if ?\<Phi> then ?m else FAIL) = op_nres_ASSERT_bnd ?\<Phi> ?m",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Refine_Basic.bind_to_let_conv", "RETURN ?x >>= ?f = Let ?x ?f",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Refine_Foreach.FOREACHc_emp",
     "FOREACH\<^sub>C {} ?c ?f ?\<sigma> = RETURN ?\<sigma>",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Refine_Foreach.nfoldli_simps", "nfoldli [] ?c ?f ?s = RETURN ?s",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Refine_Basic.nres_order_simps", "Sup (RES ` ?A) = RES (\<Union> ?A)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Refine_Basic.nres_order_simps", "Sup (RES ` ?A) = RES (\<Union> ?A)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("RefineG_Domain.flat_lub_simps",
     "flat_lub ?b (insert ?b ?X) = flat_lub ?b ?X",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Refine.build_rel_range",
     "Range (br ?\<alpha> ?I) = ?\<alpha> ` Collect ?I",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Refine.set_rel_converse",
     "(\<langle>?A\<rangle>set_rel)^-1 = \<langle>?A^-1\<rangle>set_rel",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("Refine.list_rel_simps",
     "(\<langle>?R\<rangle>list_rel)^-1 = \<langle>?R^-1\<rangle>list_rel",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("Refine.inv_option_rel_eq",
     "(\<langle>?K\<rangle>option_rel)^-1 =
      \<langle>?K^-1\<rangle>option_rel",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("Refine.stream_rel_simps",
     "\<langle>?R^-1\<rangle>stream_rel =
      (\<langle>?R\<rangle>stream_rel)^-1",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Refine_Basic.nofail_RES_conv", "nofail ?m = (EX M. ?m = RES M)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Refine_Basic.nofail_SPEC_iff", "nofail ?m = (?m <= SPEC (%_. True))",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2, template_app (template_hole 1, t_empty))))),
    ("Refine_Basic.pw_Inf_nofail", "nofail (Inf ?C) = (EX x:?C. nofail x)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Refine_Basic.pw_Sup_nofail", "nofail (Sup ?X) = (ALL x:?X. nofail x)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Refine_Basic.conc_fun_fail_iff",
     "(FAIL = \<Down> ?R ?S) = (?S = FAIL)",
     template_bimplication
      (template_equation
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_equation (template_var 0, template_hole 0))),
    ("Refine_Basic.nres_more_simps", "(RETURN ?x = RETURN ?y) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Refine_Basic.nres_more_simps", "(RES ?X = RES ?Y) = (?X = ?Y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Refine_Basic.conc_fun_fail_iff",
     "(\<Down> ?R ?S = FAIL) = (?S = FAIL)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Refine_Transfer.nres_transfer",
     "(nres_of ?a < nres_of ?b) = (?a < ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Refine_Transfer.nres_transfer",
     "(nres_of ?a <= nres_of ?b) = (?a <= ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Refine_Basic.nres_order_simps", "(RES ?X <= RES ?Y) = (?X <= ?Y)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Refine_Basic.nres_order_simps",
     "(RETURN ?x <= RETURN ?y) = (?x = ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)),
              template_app (template_hole 1, template_var 0))
            )],
       template_equation (template_var 1, template_var 0))),
    ("Refine_Basic.nres_order_simps", "(RETURN ?x <= RES ?Y) = (?x : ?Y)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Refine_Leof.RETURN_leof_RES_iff",
     "(RETURN ?x \<le>\<^sub>n RES ?Y) = (?x : ?Y)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Refine_Leof.RES_leof_RES_iff",
     "(RES ?X \<le>\<^sub>n RES ?Y) = (?X <= ?Y)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Refine_Basic.RETURN_SPEC_conv", "RETURN ?r = SPEC (%x. x = ?r)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_hole 2, template_app (template_hole 1, t_empty)))),
    ("Refine_Basic.bind_RES", "RES ?X >>= ?f = Sup (?f ` ?X)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Refine_Basic.SPEC_eq_is_RETURN", "SPEC (%x. x = ?y) = RETURN ?y",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, t_empty)),
       template_app (template_hole 0, template_var 0))),
    ("Refine.relcomp_Id_on", "Id_on ?A O Id_on ?B = Id_on (?A Int ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Refine_Basic.pw_inf_nofail",
     "nofail (inf ?a ?b) = (nofail ?a | nofail ?b)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Refine_Basic.pw_sup_nofail",
     "nofail (sup ?a ?b) = (nofail ?a & nofail ?b)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Refine_Basic.conc_fun_RES", "\<Down> ?R (RES ?X) = RES (?R^-1 `` ?X)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Refine_Basic.push_in_let_conv",
     "Let ?x (RETURN o ?f) = RETURN (Let ?x ?f)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Refine_Basic.bind_ASSERT_eq_if",
     "ASSERT ?\<Phi> >>= (%_. ?m) = (if ?\<Phi> then ?m else FAIL)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         t_empty),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Refine_Misc.map_to_set_simps",
     "map_to_set ?m Int dom ?m \<times> UNIV = map_to_set ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           t_empty)),
       template_app (template_hole 3, template_var 0))),
    ("Refine.br_list_rel",
     "\<langle>br ?f ?P\<rangle>list_rel = br (map ?f) (list_all ?P)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Refine_Basic.pw_Inf_inres",
     "inres (Inf ?C) ?r = (ALL M:?C. inres M ?r)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Refine_Basic.pw_Sup_inres",
     "inres (Sup ?X) ?r = (EX M:?X. inres M ?r)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Refine_Basic.nres_more_simps", "(RETURN ?x = RES ?X) = ({?x} = ?X)",
     template_bimplication
      (template_equation
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_hole 0),
         template_var 0))),
    ("Refine_Basic.nres_more_simps", "(RES ?X = RETURN ?x) = (?X = {?x})",
     template_bimplication
      (template_equation
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Refine_Basic.nres_order_simps",
     "(RES ?X <= RETURN ?y) = (?X <= {?y})",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Refine_Leof.ASSUME_leof_iff",
     "(ASSUME ?\<Phi> \<le>\<^sub>n SPEC ?\<Psi>) =
      (?\<Phi> --> ?\<Psi> ())",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_var 0, template_hole 0)))),
    ("Refine_Misc.dual_chain_iff", "is_dual_chain ?C = is_chain ?C",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty), template_var 0),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Refine_Heuristics.refine_hsimp",
     "(([], ?l') : \<langle>?R\<rangle>list_rel) = (?l' = [])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_var 1)),
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_var 0))
            )],
       template_equation (template_var 1, template_hole 0))),
    ("Refine_Heuristics.refine_hsimp",
     "((?l, []) : \<langle>?R\<rangle>list_rel) = (?l = [])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_hole 4)),
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_var 0))
            )],
       template_equation (template_var 1, template_hole 0))),
    ("Refine.bi_unique_pred_set_conv",
     "bi_unique (%x y. (x, y) : ?R) = bijective ?R",
     template_equation
      (template_app (template_hole 3, t_empty),
       template_app (template_hole 0, template_var 0))),
    ("Refine_Basic.pull_out_let_conv",
     "RETURN (Let ?x ?f) = (let x = ?x in RETURN (?f x))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Refine_Basic.conc_fun_chain",
     "\<Down> ?R (\<Down> ?S ?M) = \<Down> (?R O ?S) ?M",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Refine_While.bounded_WHILE'_eq",
     "bounded_WHILE' ?n ?cond ?step ?m = bounded_WHILE ?n ?cond ?step ?m",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("Refine_Basic.push_in_let_conv",
     "(let x = ?x in RETURN (?f x)) = RETURN (Let ?x ?f)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), t_empty),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("RefineG_Domain.fun_lub_simps",
     "fun_lub ?lub {?f} = (%x. ?lub {?f x})",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       t_empty)),
    ("Refine.build_rel_image",
     "br ?\<alpha> ?I `` ?A = ?\<alpha> ` (?A Int Collect ?I)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 1))))),
    ("Refine_Transfer.plain_nres_rel_as_br_conv",
     "\<langle>?R\<rangle>plain_nres_rel =
      br RETURN (%_. True) O \<langle>?R\<rangle>nres_rel",
     template_equation
      (template_app
        (template_app (template_hole 7, template_hole 6), template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3), t_empty)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Refine_Misc.map_to_set_simps",
     "map_to_set (?m |` ?K) = map_to_set ?m Int ?K \<times> UNIV",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 4, template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0), t_empty)))),
    ("Refine_Transfer.dres_nres_rel_as_br_conv",
     "\<langle>?R\<rangle>dres_nres_rel =
      br nres_of (%_. True) O \<langle>?R\<rangle>nres_rel",
     template_equation
      (template_app
        (template_app (template_hole 7, template_hole 6), template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3), t_empty)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("RefineG_Recursion.trimono_alt",
     "trimono ?B = (ALL ord:fun_ord ` triords. monotone ord ord ?B)",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_hole 1)),
         t_empty))),
    ("Refine_Basic.pw_INF_nofail",
     "nofail (Inf (?f ` ?C)) = (EX x:?C. nofail (?f x))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Refine_Basic.pw_SUP_nofail",
     "nofail (Sup (?f ` ?X)) = (ALL x:?X. nofail (?f x))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Refine_Basic.pw_RES_bind_choose",
     "nofail (RES ?X >>= ?f) = (ALL x:?X. nofail (?f x))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Refine_Basic.nres_order_simps",
     "(Sup (?f ` ?X) = FAIL) = (FAIL : ?f ` ?X)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_hole 1),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Refine_Basic.nres_order_simps",
     "(FAIL = Sup (?f ` ?X)) = (FAIL : ?f ` ?X)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 0, template_hole 3),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Refine_Misc.greater_bounded_Suc_iff",
     "((Suc ?x, ?x) : greater_bounded ?N) = (Suc ?x <= ?N)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_var 0))),
    ("Refine_Basic.bind_distrib_Sup1",
     "Sup ?M >>= ?f = (SUP m\<in>?M. m >>= ?f)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Refine_Heuristics.refine_hsimp",
     "?R `` (?A Un ?B) = ?R `` ?A Un ?R `` ?B",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Refine.prod_rel_domain",
     "Domain (?A \<times>\<^sub>r ?B) = Domain ?A \<times> Domain ?B",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         t_empty))),
    ("Refine.prod_rel_range",
     "Range (?A \<times>\<^sub>r ?B) = Range ?A \<times> Range ?B",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         t_empty))),
    ("Refine_Misc.map_to_set_simps", "map_to_set [?a |-> ?b] = {(?a, ?b)}",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_app (template_hole 5, t_empty), template_var 1),
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Refine.br_set_rel",
     "\<langle>br ?f ?P\<rangle>set_rel = br ((`) ?f) (%A. Ball A ?P)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         t_empty))),
    ("Refine.list_rel_simps",
     "\<langle>?R O ?S\<rangle>list_rel =
      \<langle>?R\<rangle>list_rel O \<langle>?S\<rangle>list_rel",
     template_equation
      (template_app
        (template_app (template_hole 7, template_hole 6),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Refine.stream_rel_simps",
     "\<langle>?R O ?S\<rangle>stream_rel =
      \<langle>?R\<rangle>stream_rel O \<langle>?S\<rangle>stream_rel",
     template_equation
      (template_app
        (template_app (template_hole 7, template_hole 6),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Refine.prod_rel_Id_on",
     "Id_on ?A \<times>\<^sub>r Id_on ?B = Id_on (?A \<times> ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_app (template_hole 3, template_var 1))),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), t_empty)))),
    ("Refine_Basic.nres_rel_comp",
     "\<langle>?A\<rangle>nres_rel O \<langle>?B\<rangle>nres_rel =
      \<langle>?A O ?B\<rangle>nres_rel",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_var 1)),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Refine_Basic.pw_inf_inres",
     "inres (inf ?a ?b) ?x = (inres ?a ?x & inres ?b ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Refine_Basic.pw_sup_inres",
     "inres (sup ?a ?b) ?x = (inres ?a ?x | inres ?b ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Refine_Misc.less_than_bool_iff",
     "((?x, ?y) : less_than_bool) = (?x = False & ?y = True)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)),
              template_hole 3)
            )],
       template_dunno)),
    ("Refine_Basic.RETURN_refine_iff",
     "(RETURN ?x <= \<Down> ?R (RETURN ?y)) = ((?x, ?y) : ?R)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Refine_Basic.in_nres_rel_iff",
     "((?a, ?b) : \<langle>?R\<rangle>nres_rel) = (?a <= \<Down> ?R ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Refine_Basic.rel2p_nres_RETURN",
     "rel2p (\<langle>?A\<rangle>nres_rel) (RETURN ?x) (RETURN ?y) =
      rel2p ?A ?x ?y",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 2)),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Refine_Det.dres_monad3",
     "?M >>= ?f >>= ?g = ?M >>= (%x. ?f x >>= ?g)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("Refine_Basic.conc_fun_RETURN",
     "\<Down> ?R (RETURN ?x) = SPEC (%y. (y, ?x) : ?R)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_hole 3, template_app (template_hole 2, t_empty)))),
    ("Refine_Basic.inf_RETURN_RES",
     "inf (RETURN ?x) (RES ?X) = (if ?x : ?X then RETURN ?x else SUCCEED)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app (template_hole 4, template_var 1)),
         template_hole 0))),
    ("Refine_Basic.inf_RETURN_RES",
     "inf (RES ?X) (RETURN ?x) = (if ?x : ?X then RETURN ?x else SUCCEED)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_app (template_hole 3, template_var 0)),
         template_hole 0))),
    ("Refine_Basic.bind_distrib_sup1",
     "sup ?M ?N >>= ?f = sup (?M >>= ?f) (?N >>= ?f)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Refine_Basic.nres_monad3",
     "?M >>= ?f >>= ?g = ?M >>= (%x. ?f x >>= ?g)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("Refine.eq_onp_Id_on_eq",
     "eq_onp (%a. a : ?A) = (%x y. (x, y) : Id_on ?A)",
     template_equation (template_app (template_hole 4, t_empty), t_empty)),
    ("Refine.inv_fun_rel_eq",
     "(?A \<rightarrow> ?B)^-1 = ?A^-1 \<rightarrow> ?B^-1",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app (template_hole 1, template_var 1))),
         template_app (template_hole 0, template_var 0)))),
    ("Refine.inv_sum_rel_eq",
     "(\<langle>?P, ?Q\<rangle>sum_rel)^-1 = \<langle>?P^-1,
      ?Q^-1\<rangle>sum_rel",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app (template_hole 1, template_var 1))),
         template_app (template_hole 0, template_var 0)))),
    ("Refine.inv_prod_rel_eq",
     "(?P \<times>\<^sub>r ?Q)^-1 = ?P^-1 \<times>\<^sub>r ?Q^-1",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app (template_hole 1, template_var 1))),
         template_app (template_hole 0, template_var 0)))),
    ("Refine_Basic.pw_INF_inres",
     "inres (Inf (?f ` ?C)) ?r = (ALL M:?C. inres (?f M) ?r)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Refine_Basic.pw_SUP_inres",
     "inres (Sup (?f ` ?X)) ?r = (EX M:?X. inres (?f M) ?r)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Refine_Basic.pw_RES_bind_choose",
     "inres (RES ?X >>= ?f) ?y = (EX x:?X. inres (?f x) ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("Refine.member_Id_on", "((?x, ?y) : Id_on ?A) = (?x = ?y & ?y : ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_app (template_hole 3, template_var 0))
            )],
       template_dunno)),
    ("Refine_Foreach.FOREACHi_emp",
     "FOREACH\<^bsup>?\<Phi>\<^esup> {} ?f ?\<sigma> =
      ASSERT (?\<Phi> {} ?\<sigma>) >>= (%_. RETURN ?\<sigma>)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_hole 3),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_var 2, template_hole 3),
               template_var 0))),
         t_empty))),
    ("Refine_Basic.pull_out_RETURN_case_option",
     "(case ?x of None => RETURN ?a | Some v => RETURN (?f v)) =
      RETURN (case ?x of None => ?a | Some x => ?f x)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           t_empty),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Refine_Foreach.LIST_FOREACH'_eq",
     "LIST_FOREACH (%_ _. True) ?tsl' ?c' ?f' ?\<sigma>' =
      LIST_FOREACH' ?tsl' ?c' ?f' ?\<sigma>'",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, t_empty), template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("Refine_Misc.map_to_set_simps",
     "map_to_set (?m(?x := None)) = map_to_set ?m - {?x} \<times> UNIV",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_app (template_hole 6, template_var 1),
             template_var 0),
           template_hole 5)),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 7, template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)),
           t_empty)))),
    ("Refine.br_fun_rel1",
     "Id \<rightarrow> br ?f ?P =
      br ((o) ?f) ((All \<circ>\<circ> (o)) ?P)",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_hole 7),
             template_hole 6)),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))))),
    ("Refine_Basic.refine_pw_simps",
     "inres (filter_ASSUME ?c ?m) ?x = (nofail ?m --> inres ?m ?x & ?c ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0)),
           template_app (template_var 2, template_var 0))))),
    ("Refine_Misc.dual_ccpo_mono_simp",
     "monotone (%x y. y <= x) (%x y. y <= x) ?f = mono ?f",
     template_equation
      (template_app
        (template_app (template_app (template_hole 3, t_empty), t_empty),
         template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Refine_Foreach.foldli_dres_pres_SUCCEED",
     "foldli ?l (case_dres False False ?c) (%x s. s >>= ?f x) dSUCCEED =
      dSUCCEED",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 3, template_hole 2),
                 template_hole 2),
               template_var 1)),
           t_empty),
         template_hole 0),
       template_hole 0)),
    ("Refine_Foreach.foldli_dres_pres_FAIL",
     "foldli ?l (case_dres False False ?c) (%x s. s >>= ?f x) dFAIL =
      dFAIL",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 3, template_hole 2),
                 template_hole 2),
               template_var 1)),
           t_empty),
         template_hole 0),
       template_hole 0)),
    ("Refine_While.filter_nb_RES",
     "filter_nb ?cond (RES ?X) = SPEC (%x. x : ?X & ~ ?cond x)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_hole 4, template_app (template_hole 3, t_empty)))),
    ("Refine_While.WHILE_eq_I_rwof",
     "?m >>= WHILE ?c ?f = ?m >>= WHILE\<^bsup>rwof ?m ?c ?f\<^esup> ?c ?f",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_var 1),
           template_var 0)))),
    ("Refine_While.WHILET_eq_I_rwof",
     "?m >>= WHILE\<^sub>T ?c ?f =
      ?m >>= WHILE\<^sub>T\<^bsup>rwof ?m ?c ?f\<^esup> ?c ?f",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_var 1),
           template_var 0)))),
    ("Refine_Foreach.FOREACHci_emp",
     "FOREACH\<^sub>C\<^bsup>?\<Phi>\<^esup> {} ?c ?f ?\<sigma> =
      ASSERT (?\<Phi> {} ?\<sigma>) >>= (%_. RETURN ?\<sigma>)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_var 3),
               template_hole 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_var 3, template_hole 3),
               template_var 0))),
         t_empty))),
    ("Refine_Foreach.FOREACHoi_emp",
     "FOREACH\<^sub>O\<^bsup>?R,?\<Phi>\<^esup> {} ?f ?\<sigma> =
      ASSERT (?\<Phi> {} ?\<sigma>) >>= (%_. RETURN ?\<sigma>)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2),
             template_hole 3),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_var 2, template_hole 3),
               template_var 0))),
         t_empty))),
    ("Refine_Foreach.nfoldli_map",
     "nfoldli (map ?f ?l) ?ctd ?g ?s = nfoldli ?l ?ctd (?g o ?f) ?s",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 3)),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 4)),
         template_var 0))),
    ("Refine_Leof.pw_leof_iff",
     "(?m \<le>\<^sub>n ?m') =
      (nofail ?m --> (ALL x. inres ?m x --> inres ?m' x))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, t_empty)))),
    ("Refine_While.pw_filter_nb",
     "inres (filter_nb ?b ?I) ?x = (nofail ?I --> inres ?I ?x & ~ ?b ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0)),
           template_app
            (template_hole 0,
             template_app (template_var 2, template_var 0)))))),
    ("Refine_Leof.leof_fun_conv_le",
     "(?f ?x \<le>\<^sub>n ?M ?x) =
      (?f ?x <= (if nofail (?f ?x) then ?M ?x else FAIL))",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_var 2, template_var 1)),
         template_app (template_var 0, template_var 1)),
       template_app
        (template_app
          (template_hole 3, template_app (template_var 2, template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_var 2, template_var 1))),
             template_app (template_var 0, template_var 1)),
           template_hole 0)))),
    ("Refine_Basic.RETURN_RES_refine_iff",
     "(RETURN ?x <= \<Down> ?R (RES ?Y)) = (EX y:?Y. (?x, y) : ?R)",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 2)),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_app (template_hole 2, template_var 0), t_empty))),
    ("Refine_While.tailrec_transform'",
     "?m >>= REC (tailrec_body ?a ?b) = lfp (%x. sup ?m (x >>= ?a)) >>= ?b",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 2, t_empty)),
         template_var 0))),
    ("Refine_Foreach.FOREACHoci_emp",
     "FOREACH\<^sub>O\<^sub>C\<^bsup>?R,?\<Phi>\<^esup> {} ?c ?f ?\<sigma> =
      ASSERT (?\<Phi> {} ?\<sigma>) >>= (%_. RETURN ?\<sigma>)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 4),
                 template_var 3),
               template_hole 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_var 3, template_hole 3),
               template_var 0))),
         t_empty))),
    ("Refine_Basic.bind_distrib_sup2",
     "?m >>= (%x. sup (?f x) (?g x)) = sup (?m >>= ?f) (?m >>= ?g)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2), t_empty),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Refine_Basic.pw_bind_nofail",
     "nofail (?M >>= ?f) =
      (nofail ?M & (ALL x. inres ?M x --> nofail (?f x)))",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app (template_hole 2, t_empty)))),
    ("Refine_Basic.assert_bind_spec_conv",
     "(ASSERT ?\<Phi> >>= (%_. ?m) <= SPEC ?\<Psi>) =
      (?\<Phi> & ?m <= SPEC ?\<Psi>)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 2)),
             t_empty)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)))))),
    ("Refine_Basic.ASSERT_same_eq_conv",
     "(ASSERT ?\<Phi> >>= (%_. ?m) = ASSERT ?\<Phi> >>= (%_. ?n)) =
      (?\<Phi> --> ?m = ?n)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           t_empty),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           t_empty)),
       template_dunno)),
    ("Refine_Basic.build_rel_SPEC_conv",
     "\<Down> (br ?\<alpha> ?I) (SPEC ?\<Phi>) =
      SPEC (%x. ?I x & ?\<Phi> (?\<alpha> x))",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_hole 2, template_app (template_hole 1, t_empty)))),
    ("Refine_Basic.summarize_ASSERT_conv",
     "ASSERT ?\<Phi> >>= (%_. ASSERT ?\<Psi> >>= (%_. ?m)) =
      ASSERT (?\<Phi> & ?\<Psi>) >>= (%_. ?m)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         t_empty),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))),
         t_empty))),
    ("Refine.rel_set_set_rel_eq",
     "rel_set (%x y. (x, y) : ?A) =
      (%f g. (f, g) : \<langle>?A\<rangle>set_rel)",
     template_equation (template_app (template_hole 6, t_empty), t_empty)),
    ("Refine.list_all2_list_rel_conv",
     "list_all2 (%x y. (x, y) : ?R) =
      (%x y. (x, y) : \<langle>?R\<rangle>list_rel)",
     template_equation (template_app (template_hole 6, t_empty), t_empty)),
    ("Refine.rel_option_option_rel_eq",
     "rel_option (%x y. (x, y) : ?A) =
      (%f g. (f, g) : \<langle>?A\<rangle>option_rel)",
     template_equation (template_app (template_hole 6, t_empty), t_empty)),
    ("Refine.stream_all2_stream_rel_conv",
     "stream_all2 (%x y. (x, y) : ?R) =
      (%x y. (x, y) : \<langle>?R\<rangle>stream_rel)",
     template_equation (template_app (template_hole 6, t_empty), t_empty)),
    ("Refine_Basic.pw_abs_nofail",
     "nofail (\<Up> ?R ?M) =
      (nofail ?M & (ALL x. inres ?M x --> x : Domain ?R))",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 0)),
         template_app (template_hole 4, t_empty)))),
    ("Refine_Basic.intro_spec_refine_iff",
     "(RES ?X >>= ?f <= \<Down> ?R ?M) = (ALL x:?X. ?f x <= \<Down> ?R ?M)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 3)),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 3), t_empty))),
    ("Refine_While.WHILE_msii_conv",
     "?m >>= WHILE\<^bsup>?I\<^esup> ?c ?f =
      filter_ASSUME (Not o ?c) (filter_ASSERT ?I (msii ?I ?m ?c ?f))",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 3),
               template_var 1),
             template_var 0))))),
    ("Refine_Foreach.nfoldli_append",
     "nfoldli (?l1.0 @ ?l2.0) ?ctd ?f ?s =
      nfoldli ?l1.0 ?ctd ?f ?s >>= nfoldli ?l2.0 ?ctd ?f",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3)),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_var 1)))),
    ("Refine_Basic.inf_RETURN_SPEC",
     "inf (RETURN ?x) (SPEC ?\<Phi>) = SPEC (%y. y = ?x & ?\<Phi> ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app
          (template_hole 3, template_app (template_hole 2, t_empty))),
       template_app
        (template_hole 3, template_app (template_hole 2, t_empty)))),
    ("Refine_Basic.inf_RETURN_SPEC",
     "inf (SPEC ?\<Phi>) (RETURN ?x) = SPEC (%y. y = ?x & ?\<Phi> ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4, template_app (template_hole 3, t_empty))),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 4, template_app (template_hole 3, t_empty)))),
    ("Refine_Basic.pw_bind_inres",
     "inres (?M >>= ?f) =
      (%x. nofail ?M --> (EX y. inres ?M y & inres (?f y) x))",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       t_empty)),
    ("Refine_Basic.pw_eq_iff",
     "(?S = ?S') =
      (nofail ?S = nofail ?S' & (ALL x. inres ?S x = inres ?S' x))",
     template_bimplication
      (template_equation (template_var 1, template_var 0), template_dunno)),
    ("Refine_Basic.pw_le_iff",
     "(?S <= ?S') =
      (nofail ?S' --> nofail ?S & (ALL x. inres ?S x --> inres ?S' x))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 1, t_empty))))),
    ("Refine_Basic.bind_le_shift",
     "(?m >>= ?f <= ?m') =
      (?m <= (if nofail ?m' then SPEC (%x. ?f x <= ?m') else FAIL))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)),
             template_app
              (template_hole 2, template_app (template_hole 1, t_empty))),
           template_hole 0)))),
    ("Refine_Leof.sup_leof_iff",
     "(sup ?a ?b \<le>\<^sub>n ?m) =
      (nofail ?a & nofail ?b -->
       ?a \<le>\<^sub>n ?m & ?b \<le>\<^sub>n ?m)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_app (template_hole 0, template_var 1))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0))))),
    ("Refine_Basic.bind_rule_complete",
     "(?M >>= ?f <= SPEC ?\<Phi>) =
      (?M <= SPEC (%x. ?f x <= SPEC ?\<Phi>))",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_hole 1, template_app (template_hole 0, t_empty))))),
    ("Refine_While.filter_nb_cont",
     "filter_nb ?cond (Sup ?M) = Sup {filter_nb ?cond m |m. m : ?M}",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_hole 4, template_app (template_hole 3, t_empty)))),
    ("Refine_Basic.nres_bind_let_law",
     "Let ?v ?f >>= ?g = (let y = ?v in ?f y >>= ?g)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)),
         t_empty),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("Refine_Basic.pw_conc_inres",
     "inres (\<Down> ?R ?S') =
      (%s. nofail ?S' --> (EX s'. (s, s') : ?R & inres ?S' s'))",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       t_empty)),
    ("Refine.br_list_set_rel",
     "\<langle>br ?f ?P\<rangle>list_set_rel =
      br ((set \<circ>\<circ> map) ?f)
       (%s. list_all ?P s & distinct (map ?f s))",
     template_equation
      (template_app
        (template_app (template_hole 9, template_hole 8),
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_app (template_hole 3, template_var 1))),
         t_empty))),
    ("Refine_Basic.pw_flat_ge_iff",
     "flat_ge ?S ?S' =
      (nofail ?S --> nofail ?S' & (ALL x. inres ?S x = inres ?S' x))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, template_hole 5), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 3, template_var 0)),
           template_app (template_hole 1, t_empty))))),
    ("Refine_Foreach.dfoldli_by_foldli",
     "dfoldli ?l ?c ?f ?\<sigma> =
      foldli ?l (case_dres False False ?c) (%x s. s >>= ?f x)
       (dRETURN ?\<sigma>)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 3, template_hole 2),
                 template_hole 2),
               template_var 2)),
           t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("Refine_While.mWHILE_unfold",
     "?m >>= WHILE ?cond ?step =
      ?m >>=
      (%x. if ?cond x then ?step x >>= WHILE ?cond ?step else RETURN x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 2), t_empty))),
    ("Refine_Foreach.while_eq_nfoldli",
     "WHILE\<^sub>T (FOREACH_cond ?c) (FOREACH_body ?f) (?l, ?\<sigma>) >>=
      (%(uu_, \<sigma>). RETURN \<sigma>) =
      nfoldli ?l ?c ?f ?\<sigma>",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 5, template_var 3)),
               template_app (template_hole 4, template_var 2)),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))),
         template_app (template_hole 2, t_empty)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3),
           template_var 2),
         template_var 0))),
    ("Refine_Basic.SUP_img_rule_complete",
     "(ALL x. x : ?S --> ?f x <= SPEC ?\<Phi>) =
      (Sup (?f ` ?S) <= SPEC ?\<Phi>)",
     template_equation
      (template_app (template_hole 7, t_empty),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2))),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))))),
    ("Refine_Basic.bind_RES_RETURN_eq",
     "RES ?X >>= (%x. RETURN (?f x)) =
      SPEC (%uu_. EX x. uu_ = ?f x & x : ?X)",
     template_equation
      (template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 1)),
         t_empty),
       template_app
        (template_hole 5, template_app (template_hole 4, t_empty)))),
    ("Refine_Basic.conc_fun_SPEC",
     "\<Down> ?R (SPEC ?\<Phi>) = SPEC (%y. EX x. (y, x) : ?R & ?\<Phi> x)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1),
         template_app
          (template_hole 7, template_app (template_hole 6, t_empty))),
       template_app
        (template_hole 5, template_app (template_hole 4, t_empty)))),
    ("Refine_Foreach.FOREACHoci_by_LIST_FOREACH",
     "FOREACH\<^sub>O\<^sub>C\<^bsup>?R,?\<Phi>\<^esup> ?S ?c ?f
       ?\<sigma>0.0 =
      ASSERT (finite ?S) >>=
      (%_. LIST_FOREACH ?\<Phi> (it_to_sorted_list ?R ?S) ?c ?f
            ?\<sigma>0.0)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 3))),
         t_empty))),
    ("Refine_Basic.If_bind_distrib",
     "(if ?b then ?t else ?e) >>= ?f =
      (if ?b then ?t >>= ?f else ?e >>= ?f)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)),
         t_empty),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2), t_empty)),
         template_app
          (template_app (template_hole 2, template_var 1), t_empty)))),
    ("Refine_Misc.map_to_set_simps",
     "map_to_set (?m(?x |-> ?v)) =
      map_to_set ?m - {?x} \<times> UNIV Un {(?x, ?v)}",
     template_equation
      (template_app
        (template_hole 11,
         template_app
          (template_app
            (template_app (template_hole 10, template_var 2),
             template_var 1),
           template_app (template_hole 9, template_var 0))),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 11, template_var 2)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_hole 4)),
               t_empty))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_hole 0)))),
    ("Refine_Basic.pw_abs_inres",
     "inres (\<Up> ?R ?M) ?a =
      (nofail (\<Up> ?R ?M) --> (EX c. inres ?M c & (c, ?a) : ?R))",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 7, template_var 2),
               template_var 1))),
         template_app (template_hole 4, t_empty)))),
    ("Refine_While.WHILE_bounded",
     "?m >>= WHILE ?cond ?step =
      filter_nb ?cond (Sup {bounded_WHILE n ?cond ?step ?m |n. True})",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 2),
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 6, template_var 1),
         template_app
          (template_hole 5, template_app (template_hole 4, t_empty))))),
    ("Refine_While.tailrec_transform",
     "?m >>= REC (%D s. sup (?a s >>= D) (?b s)) =
      lfp (%x. sup ?m (x >>= ?a)) >>= ?b",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app (template_hole 4, t_empty)),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 2, t_empty)),
         template_var 0))),
    ("Refine_Basic.case_prod_bind_simp",
     "(%x. (case x of (a, b) => ?f a b) <= SPEC ?\<Phi>) =
      (%(a, b). ?f a b <= SPEC ?\<Phi>)",
     template_equation (t_empty, template_app (template_hole 0, t_empty))),
    ("Refine_Basic.ignore_snd_refine_conv",
     "(?m <= \<Down> (?R \<times>\<^sub>r UNIV) ?m') =
      (?m >>= RETURN o fst <= \<Down> ?R (?m' >>= RETURN o fst))",
     template_equation
      (template_app
        (template_app (template_hole 15, template_var 2),
         template_app
          (template_app
            (template_hole 14,
             template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_app (template_hole 12, template_hole 11),
                   template_var 1)),
               template_hole 10)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 2),
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_hole 5))),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0)))))),
    ("Refine_Foreach.dfoldli_simps",
     "dfoldli (?x # ?ls) ?c ?f ?s =
      (if ?c ?s then ?f ?x ?s >>= dfoldli ?ls ?c ?f else dRETURN ?s)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 4),
                 template_var 3)),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_var 2, template_var 0)),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_var 1, template_var 4),
                 template_var 0)),
             t_empty)),
         template_app (template_hole 0, template_var 0)))),
    ("Refine_Foreach.nfoldli_simps",
     "nfoldli (?x # ?ls) ?c ?f ?s =
      (if ?c ?s then ?f ?x ?s >>= nfoldli ?ls ?c ?f else RETURN ?s)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 4),
                 template_var 3)),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_var 2, template_var 0)),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_var 1, template_var 4),
                 template_var 0)),
             t_empty)),
         template_app (template_hole 0, template_var 0)))),
    ("Refine_Foreach.nfoldli_nfoldli_prod_conv",
     "nfoldli ?l2.0 ?ctd (%i. nfoldli ?l1.0 ?ctd (?f i)) ?s =
      nfoldli (List.product ?l2.0 ?l1.0) ?ctd (%(i, j). ?f i j) ?s",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 4),
             template_var 3),
           t_empty),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 2)),
             template_var 3),
           template_app (template_hole 0, t_empty)),
         template_var 0))),
    ("Refine_Basic.refine2spec_aux",
     "(?a <= \<Down> ?R ?b) =
      (nofail ?b --> ?a <= SPEC (%r. EX x. inres ?b x & (r, x) : ?R))",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 2),
         template_app
          (template_app (template_hole 9, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 0)),
         template_app
          (template_app (template_hole 10, template_var 2),
           template_app
            (template_hole 6, template_app (template_hole 5, t_empty)))))),
    ("Refine_Basic.pw_bind_le_iff",
     "(?M >>= ?f <= ?S) =
      ((nofail ?S --> nofail ?M) &
       (ALL x. nofail ?M & inres ?M x --> ?f x <= ?S))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)),
             template_app (template_hole 2, template_var 2))),
         template_app (template_hole 1, t_empty)))),
    ("Refine_Heuristics.refine_hsimp",
     "((?x # ?l, ?x' # ?l') : \<langle>?R\<rangle>list_rel) =
      ((?x, ?x') : ?R & (?l, ?l') : \<langle>?R\<rangle>list_rel)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 4),
                 template_var 3)),
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1))),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 0))))),
    ("Refine.stream_rel_inject",
     "((?x1.0 ## ?x2.0, ?y1.0 ## ?y2.0) : \<langle>?R\<rangle>stream_rel) =
      ((?x1.0, ?y1.0) : ?R &
       (?x2.0, ?y2.0) : \<langle>?R\<rangle>stream_rel)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 4),
                 template_var 3)),
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1))),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 0))))),
    ("Refine_Heuristics.prod_rel_iff",
     "(((?a, ?b), ?a', ?b') : ?A \<times>\<^sub>r ?B) =
      ((?a, ?a') : ?A & (?b, ?b') : ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 9, template_var 5),
                 template_var 4)),
             template_app
              (template_app (template_hole 8, template_var 3),
               template_var 2))),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 5),
                 template_var 3)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 2)),
           template_var 0)))),
    ("Refine_Foreach.nfoldli_shift",
     "nfoldli ?l ?c ?f =
      nfoldli (map (%i. i + ?ofs) ?l) ?c
       (%x s. ASSERT (?ofs <= x) >>= (%_. ?f (x - ?ofs) s))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, template_var 3), template_var 2),
         template_var 1),
       template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, t_empty), template_var 3)),
           template_var 2),
         t_empty))),
    ("Refine_Basic.pw_flat_le_iff",
     "flat_le ?S ?S' =
      ((EX x. inres ?S x) -->
       nofail ?S = nofail ?S' & (ALL x. inres ?S x = inres ?S' x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_hole 6),
                template_var 1),
              template_var 0)
            )],
       template_dunno)),
    ("Refine.rel_fun_fun_rel_eq",
     "rel_fun (%x y. (x, y) : ?A) (%x y. (x, y) : ?B) =
      (%f g. (f, g) : ?A \<rightarrow> ?B)",
     template_equation
      (template_app (template_app (template_hole 9, t_empty), t_empty),
       t_empty)),
    ("Refine.rel_sum_sum_rel_eq",
     "rel_sum (%x y. (x, y) : ?A) (%x y. (x, y) : ?B) =
      (%f g. (f, g) : \<langle>?A, ?B\<rangle>sum_rel)",
     template_equation
      (template_app (template_app (template_hole 9, t_empty), t_empty),
       t_empty)),
    ("Refine.rel_prod_prod_rel_eq",
     "rel_prod (%x y. (x, y) : ?A) (%x y. (x, y) : ?B) =
      (%f g. (f, g) : ?A \<times>\<^sub>r ?B)",
     template_equation
      (template_app (template_app (template_hole 9, t_empty), t_empty),
       t_empty)),
    ("Refine_Basic.pw_nres_rel_iff",
     "((?a, ?b) : \<langle>?A\<rangle>nres_rel) =
      (nofail (\<Down> ?A ?b) -->
       nofail ?a & (ALL x. inres ?a x --> inres (\<Down> ?A ?b) x))",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 7, template_hole 6),
           template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 1))),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 4, template_var 2)),
           template_app (template_hole 1, t_empty))))),
    ("Refine_Det.less_eq_dres_split_conv",
     "(?a <= ?b) =
      (case (?a, ?b) of (dSUCCEEDi, xa) => True | (dFAILi, dFAILi) => True
       | (dFAILi, _) => False | (dRETURN aa, dSUCCEEDi) => False
       | (dRETURN aa, dFAILi) => True | (dRETURN aa, dRETURN b) => aa = b)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 5, t_empty),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Refine_While.WHILEI_lfp_conv",
     "?m >>= WHILE\<^bsup>?I\<^esup> ?c ?f =
      lfp (WHILEI_lfp_body ?I ?m ?c ?f) >>=
      (%s. ASSERT (?I s) >>= (%_. ASSUME (~ ?c s) >>= (%_. RETURN s)))",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 5, template_var 2),
                   template_var 3),
                 template_var 1),
               template_var 0))),
         t_empty))),
    ("Refine_Foreach.nfoldli_foreach_shift",
     "nfoldli [?a..<?b] ?c ?f =
      nfoldli [?a + ?ofs..<?b + ?ofs] ?c
       (%x s. ASSERT (?ofs <= x) >>= (%_. ?f (x - ?ofs) s))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 4),
               template_var 3)),
           template_var 2),
         template_var 1),
       template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 4),
                   template_var 0)),
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 0))),
           template_var 2),
         t_empty))),
    ("Refine_Basic.pw_ref_iff",
     "(?S <= \<Down> ?R ?S') =
      (nofail ?S' -->
       nofail ?S &
       (ALL x. inres ?S x --> (EX s'. (x, s') : ?R & inres ?S' s')))",
     template_equation
      (template_app
        (template_app (template_hole 11, template_var 2),
         template_app
          (template_app (template_hole 10, template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 9, template_app (template_hole 8, template_var 0)),
         template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 2)),
           template_app (template_hole 5, t_empty))))),
    ("Refine_Basic.bind_RES_RETURN2_eq",
     "RES ?X >>= (%(x, y). RETURN (?f x y)) =
      SPEC (%uu_. EX x y. uu_ = ?f x y & (x, y) : ?X)",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app (template_hole 10, template_var 1)),
         template_app (template_hole 9, t_empty)),
       template_app
        (template_hole 7, template_app (template_hole 6, t_empty)))),
    ("Refine_While.bounded_WHILE_shift",
     "?m >>=
      (%x. if ?cond x then bounded_WHILE ?n ?cond ?step (?step x)
           else RETURN x) =
      bounded_WHILE ?n ?cond ?step ?m >>=
      (%x. if ?cond x then ?step x else RETURN x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 3), t_empty),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2),
               template_var 0),
             template_var 3)),
         t_empty))),
    ("Refine_Foreach.nfoldli_by_idx",
     "nfoldli ?l ?c ?f ?s =
      nfoldli [0..<length ?l] ?c
       (%i s. ASSERT (i < length ?l) >>= (%_. let x = ?l ! i in ?f x s))
       ?s",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 9, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_app (template_hole 5, template_var 3))),
             template_var 2),
           t_empty),
         template_var 0))),
    ("Refine_Foreach.nfoldli_by_idx_gen",
     "nfoldli (drop ?k ?l) ?c ?f ?s =
      nfoldli [?k..<length ?l] ?c
       (%i s. ASSERT (i < length ?l) >>= (%_. let x = ?l ! i in ?f x s))
       ?s",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_var 4),
                 template_var 3)),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 4),
                 template_app (template_hole 5, template_var 3))),
             template_var 2),
           t_empty),
         template_var 0))),
    ("Refine_Det.inf_dres_split_conv",
     "inf ?a ?b =
      (case (?a, ?b) of (dSUCCEEDi, dSUCCEEDi) => dSUCCEEDi
       | (dSUCCEEDi, _) => dSUCCEEDi | (dFAILi, xa) => xa
       | (dRETURN aa, dSUCCEEDi) => dSUCCEEDi
       | (dRETURN aa, dFAILi) => dRETURN aa
       | (dRETURN aa, dRETURN b) =>
           if aa = b then dRETURN b else dSUCCEEDi)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 6, t_empty),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Refine_Det.sup_dres_split_conv",
     "sup ?a ?b =
      (case (?a, ?b) of (dSUCCEEDi, xa) => xa
       | (dFAILi, dSUCCEEDi) => dFAILi | (dFAILi, _) => dFAILi
       | (dRETURN aa, dSUCCEEDi) => dRETURN aa
       | (dRETURN aa, dFAILi) => dFAILi
       | (dRETURN aa, dRETURN b) => if aa = b then dRETURN b else dFAILi)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 6, t_empty),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Refine_While.WHILEI_tailrec_conv",
     "WHILE\<^bsup>?I\<^esup> ?c ?f =
      REC (tailrec_body
            (%s. ASSERT (?I s) >>= (%_. ASSUME (?c s) >>= (%_. ?f s)))
            (%s. ASSERT (?I s) >>=
                 (%_. ASSUME (~ ?c s) >>= (%_. RETURN s))))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 7, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_hole 6,
         template_app (template_app (template_hole 5, t_empty), t_empty)))),
    ("Refine_While.WHILEIT_tailrec_conv",
     "WHILE\<^sub>T\<^bsup>?I\<^esup> ?c ?f =
      REC\<^sub>T
       (tailrec_body
         (%s. ASSERT (?I s) >>= (%_. ASSUME (?c s) >>= (%_. ?f s)))
         (%s. ASSERT (?I s) >>= (%_. ASSUME (~ ?c s) >>= (%_. RETURN s))))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 7, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_hole 6,
         template_app (template_app (template_hole 5, t_empty), t_empty)))),
    ("Refine_Basic.pw_REC_nofail",
     "nofail (REC ?B ?x) =
      (trimono ?B &
       (EX F. (ALL x.
                  nofail (F x) -->
                  nofail (?B F x) &
                  (ALL x'. inres (?B F x) x' --> inres (F x) x')) &
              nofail (F ?x)))",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_app (template_hole 4, t_empty)))),
    ("Refine_Basic.pw_RECT_nofail",
     "nofail (REC\<^sub>T ?B ?x) =
      (trimono ?B &
       (ALL F.
           (ALL y.
               nofail (?B F y) -->
               nofail (F y) &
               (ALL x. inres (F y) x --> inres (?B F y) x)) -->
           nofail (F ?x)))",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_app (template_hole 4, t_empty)))),
    ("Refine_Basic.pw_REC_inres",
     "inres (REC ?B ?x) ?x' =
      (trimono ?B -->
       (ALL F.
           (ALL x''.
               nofail (F x'') -->
               nofail (?B F x'') &
               (ALL x. inres (?B F x'') x --> inres (F x'') x)) -->
           inres (F ?x) ?x'))",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 2)),
         template_app (template_hole 4, t_empty)))),
    ("Refine_Basic.pw_RECT_inres",
     "inres (REC\<^sub>T ?B ?x) ?x' =
      (trimono ?B -->
       (EX M. (ALL y.
                  nofail (?B M y) -->
                  nofail (M y) &
                  (ALL x. inres (M y) x --> inres (?B M y) x)) &
              inres (M ?x) ?x'))",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 2)),
         template_app (template_hole 4, t_empty))))]
