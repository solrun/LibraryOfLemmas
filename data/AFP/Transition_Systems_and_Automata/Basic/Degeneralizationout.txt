Loading theory "Draft.Basic" (required by "Draft.DegeneralizationTemplates" via "Draft.Degeneralization" via "Draft.Acceptance" via "Draft.Sequence_LTL" via "Draft.Sequence")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.DegeneralizationTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.DegeneralizationTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.DegeneralizationTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Draft.Basic"
### 0.056s elapsed time, 0.255s cpu time, 0.000s GC time
Loading theory "Draft.Sequence" (required by "Draft.DegeneralizationTemplates" via "Draft.Degeneralization" via "Draft.Acceptance" via "Draft.Sequence_LTL")
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.138s elapsed time, 0.552s cpu time, 0.053s GC time
[| inj_on ?f ?A; ?B <= ?A |] ==> inj_on ?f ?B
[| inj_on ?f ?B; ?A <= ?B |] ==> inj_on ?f ?A
### theory "HOL-Library.Set_Algebras"
### 0.216s elapsed time, 0.779s cpu time, 0.053s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.DegeneralizationTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  scan :: "('a => 'b => 'b) => 'a list => 'b => 'b list"
Found termination order: "size <*mlex*> {}"
consts
  sscan :: "('a => 'b => 'b) => 'a stream => 'b => 'b stream"
Found termination order: "size <*mlex*> {}"
consts
  stranspose :: "'a stream list => 'a list stream"
Proofs for coinductive predicate(s) "sdistinct"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Proofs for coinductive predicate(s) "sascending"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "sdescending"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "Draft.Sequence"
### 0.761s elapsed time, 2.326s cpu time, 0.268s GC time
Loading theory "Draft.Sequence_LTL" (required by "Draft.DegeneralizationTemplates" via "Draft.Degeneralization" via "Draft.Acceptance")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.728s elapsed time, 2.179s cpu time, 0.293s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Sequence_LTL"
### 0.728s elapsed time, 1.791s cpu time, 0.651s GC time
Loading theory "Draft.Acceptance" (required by "Draft.DegeneralizationTemplates" via "Draft.Degeneralization")
Loading theory "Draft.Sequence_Zip" (required by "Draft.DegeneralizationTemplates" via "Draft.Degeneralization")
### theory "Draft.Acceptance"
### 0.084s elapsed time, 0.254s cpu time, 0.000s GC time
### theory "Draft.Sequence_Zip"
### 0.184s elapsed time, 0.471s cpu time, 0.069s GC time
Loading theory "Draft.Degeneralization" (required by "Draft.DegeneralizationTemplates")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.980s elapsed time, 5.377s cpu time, 1.048s GC time
Loading theory "Draft.Templates" (required by "Draft.DegeneralizationTemplates" via "Draft.ExtrEqs")
### theory "Draft.Degeneralization"
### 0.241s elapsed time, 0.501s cpu time, 0.061s GC time
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.077s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.DegeneralizationTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.504s elapsed time, 0.574s cpu time, 0.094s GC time
Loading theory "Draft.DegeneralizationTemplates"
val templateLemmas =
   [("Degeneralization.count_empty", "count [] ?a ?k = ?k",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 1),
         template_var 0),
       template_var 0)),
    ("Degeneralization.count_nonempty",
     "?cs ~= [] ==> count ?cs ?a ?k < length ?cs",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 3))],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0),
         template_app (template_hole 0, template_var 2)))),
    ("Degeneralization.degen_simps",
     "degen ?cs (?a, ?k) = (length ?cs <= ?k | (?cs ! ?k) ?a)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0),
           template_var 1)))),
    ("Degeneralization.count_step",
     "[| ?k < length ?cs; (?cs ! ?k) ?a |]
      ==> count ?cs ?a ?k = Suc ?k mod length ?cs",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_var 2),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0),
           template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_app (template_hole 5, template_var 1))))),
    ("Degeneralization.degen_infs",
     "infs (degen ?cs) (?w ||| ?k ## sscan (count ?cs) ?w ?k) =
      gen infs ?cs ?w",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_hole 10,
             template_app
              (template_hole 9,
               template_app (template_hole 8, template_var 2)))),
         template_app
          (template_app (template_hole 7, template_var 1),
           template_app
            (template_app (template_hole 6, template_var 0),
             template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 2)),
                 template_var 1),
               template_var 0)))),
       template_app
        (template_app
          (template_app (template_hole 3, t_empty), template_var 2),
         template_var 1))),
    ("Degeneralization.count_constant_1",
     "[| ?k < length ?cs; !!a. a : set ?w ==> ~ (?cs ! ?k) a |]
      ==> fold (count ?cs) ?w ?k = ?k",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 8, template_var 1)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0),
           template_var 2),
         template_var 2))),
    ("Degeneralization.count_constant_2",
     "[| ?k < length ?cs;
         !!a. a : set (?w || ?k # scan (count ?cs) ?w ?k) ==>
              ~ degen ?cs a |]
      ==> fold (count ?cs) ?w ?k = ?k",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 11, template_var 1)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 4, template_var 1)),
             template_var 0),
           template_var 2),
         template_var 2))),
    ("Degeneralization.gen_degen_step",
     "[| gen infs ?cs ?w;
         !!u a v.
            [| ?w = u @- a ## v; degen ?cs (a, fold (count ?cs) u ?k) |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, t_empty), template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_var 0))),
    ("Degeneralization.degen_skip_arbitrary",
     "[| ?k < length ?cs; ?l < length ?cs;
         infs (degen ?cs) (?w ||| ?k ## sscan (count ?cs) ?w ?k);
         !!u v. [| ?w = u @- v; fold (count ?cs) u ?k = ?l |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation
         (less_than, template_var 4,
          template_app (template_hole 14, template_var 3)),
        template_inequation
         (less_than, template_var 2,
          template_app (template_hole 14, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_hole 12,
                  template_app
                   (template_hole 11,
                    template_app (template_hole 10, template_var 3)))),
              template_app
               (template_app (template_hole 9, template_var 1),
                template_app
                 (template_app (template_hole 8, template_var 4),
                  template_app
                   (template_app
                     (template_app
                       (template_hole 7,
                        template_app (template_hole 6, template_var 3)),
                      template_var 1),
                    template_var 4))))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Degeneralization.degen_skip_condition",
     "[| ?k < length ?cs;
         infs (degen ?cs) (?w ||| ?k ## sscan (count ?cs) ?w ?k);
         !!u a v.
            [| ?w = u @- a ## v; fold (count ?cs) u ?k = ?k; (?cs ! ?k) a |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 17, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_hole 15,
                  template_app
                   (template_hole 14,
                    template_app (template_hole 13, template_var 2)))),
              template_app
               (template_app (template_hole 12, template_var 1),
                template_app
                 (template_app (template_hole 11, template_var 3),
                  template_app
                   (template_app
                     (template_app
                       (template_hole 10,
                        template_app (template_hole 9, template_var 2)),
                      template_var 1),
                    template_var 3))))
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0))),
    ("Degeneralization.degen_skip_arbitrary_condition",
     "[| ?l < length ?cs;
         infs (degen ?cs) (?w ||| ?k ## sscan (count ?cs) ?w ?k);
         !!u a v.
            [| ?w = u @- a ## v; fold (count ?cs) u ?k = ?l; (?cs ! ?l) a |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation
         (less_than, template_var 4,
          template_app (template_hole 17, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_hole 15,
                  template_app
                   (template_hole 14,
                    template_app (template_hole 13, template_var 3)))),
              template_app
               (template_app (template_hole 12, template_var 2),
                template_app
                 (template_app (template_hole 11, template_var 1),
                  template_app
                   (template_app
                     (template_app
                       (template_hole 10,
                        template_app (template_hole 9, template_var 3)),
                      template_var 2),
                    template_var 1))))
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.DegeneralizationTemplates"
### 0.373s elapsed time, 0.497s cpu time, 0.000s GC time
val it = (): unit
