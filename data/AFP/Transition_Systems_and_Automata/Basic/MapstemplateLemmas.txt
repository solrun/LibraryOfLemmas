   [("Maps.expand_map_dom", "?g : expand_map ?f ==> dom ?g = dom ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Maps.fun_upd_None", "?p ~: dom ?f ==> ?f(?p := None) = ?f",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_app (template_hole 3, template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1),
           template_hole 0),
         template_var 0))),
    ("Maps.finite_set_of_finite_maps'",
     "[| finite ?A; finite ?B |] ==> finite {m. dom m <= ?A & ran m <= ?B}",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 6, template_app (template_hole 5, t_empty))
           ))),
    ("Maps.expand_map_update",
     "expand_map (?f(?x |-> ?S)) =
      (UN y:?S. (%g. g(?x |-> y)) ` expand_map (?f(?x := None)))",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1),
           template_app (template_hole 6, template_var 0))),
       template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, t_empty), template_var 0)))),
    ("Maps.expand_update",
     "?f ?x ~= {} ==>
      expand (?f(?x := ?S)) = (UN y:?S. (%g. g(?x := y)) ` expand ?f)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_var 2, template_var 1),
              template_hole 7)
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 0))))),
    ("Maps.fold_map_of",
     "distinct ?xs ==>
      fold (%x (k, m). (Suc k, m(x |-> k))) ?xs (?k, ?m) =
      (?k + length ?xs, ?m ++ map_of (?xs || [?k..<?k + length ?xs]))",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 11, t_empty), template_var 2),
           template_app
            (template_app (template_hole 9, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_app (template_hole 4, template_var 2))),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_app
                      (template_hole 4, template_var 2))))))))))]
