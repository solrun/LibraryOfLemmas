   [("TTree.repeatable_many_calls", "repeatable (many_calls ?x)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("TTree.paths_Nil", "[] : paths ?t",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("TTree.possible_singles", "possible (singles ?S) ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)
         )),
    ("TTree.carrier_many_among", "carrier (many_among ?S) = ?S",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("TTree.carrier_singles", "carrier (singles ?S) = UNIV",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("TTree.possible_anything", "possible anything ?x' = True",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("TTree.possible_empty", "possible TTree.empty ?x' = False",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("TTree.both_empty1", "TTree.empty \<otimes>\<otimes> ?t = ?t",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("TTree.both_empty2", "?t \<otimes>\<otimes> TTree.empty = ?t",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("TTree.either_empty1", "TTree.empty \<oplus>\<oplus> ?t = ?t",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("TTree.either_empty2", "?t \<oplus>\<oplus> TTree.empty = ?t",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("TTree.either_idem", "?t \<oplus>\<oplus> ?t = ?t",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("TTree.nxt_anything", "nxt anything ?x = anything",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("TTree.f_nxt_empty_set", "f_nxt ?f {} ?x = ?f",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_hole 0),
         template_var 0),
       template_var 1)),
    ("TTree.paths_not_empty", "(paths ?t = {}) = False",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("TTree.nxt_single", "nxt (single ?x) ?x' = TTree.empty",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_hole 0)),
    ("TTree.downset_substitute", "downset (Collect (substitute' ?f ?T ?t))",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0)))
         )),
    ("TTree.carrier_many_calls", "carrier (many_calls ?x) = {?x}",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("TTree.carrier_single", "carrier (single ?y) = {?y}",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("TTree.substitute'_Nil", "substitute' ?f ?T ?t [] = True",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0),
         template_hole 1),
       template_hole 0)),
    ("TTree.both_comm",
     "?t \<otimes>\<otimes> ?t' = ?t' \<otimes>\<otimes> ?t",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("TTree.either_sym",
     "?t \<oplus>\<oplus> ?t2.0 = ?t2.0 \<oplus>\<oplus> ?t",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("TTree.carrier_nxt_subset", "carrier (nxt ?t ?x) <= carrier ?t",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("TTree.both_contains_arg1",
     "paths ?t <= paths (?t \<otimes>\<otimes> ?t')",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 1),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("TTree.either_contains_arg1",
     "paths ?t <= paths (?t \<oplus>\<oplus> ?t')",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 1),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("TTree.both_contains_arg2",
     "paths ?t' <= paths (?t \<otimes>\<otimes> ?t')",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 1),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("TTree.either_contains_arg2",
     "paths ?t' <= paths (?t \<oplus>\<oplus> ?t')",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 1),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("TTree.downset_set_subset", "downset {xs. set xs <= ?S}",
     template_predicate
      (
         template_app
          (template_hole 3, template_app (template_hole 2, t_empty))
         )),
    ("TTree.possible_many_calls",
     "possible (many_calls ?x) ?x' = (?x = ?x')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("TTree.possible_single", "possible (single ?x) ?x' = (?x = ?x')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("TTree.carrier_substitute1",
     "carrier ?t <= carrier (substitute ?f ?T ?t)",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 2),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2)))),
    ("TTree.substitute_contains_arg",
     "paths ?t <= paths (substitute ?f ?T ?t)",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 2),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2)))),
    ("TTree.carrier_ttree_restr",
     "carrier (ttree_restr ?S ?t) = ?S Int carrier ?t",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("TTree.paths_injs_simps", "(paths ?t = paths ?t') = (?t = ?t')",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("TTree.substitute_simps", "([] : paths (substitute ?f ?T ?t)) = True",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0))),
       template_hole 0)),
    ("TTree.downset_filter", "downset ?xss ==> downset (filter ?P ` ?xss)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_var 1))
           ))),
    ("TTree.downset_mapI", "downset ?xss ==> downset (map ?f ` ?xss)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_var 1))
           ))),
    ("TTree.repeatable_both_self",
     "repeatable ?t ==> ?t \<otimes>\<otimes> ?t = ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 0),
         template_var 0))),
    ("TTree.carrier_possible", "possible ?t ?x ==> ?x : carrier ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("TTree.carrier_both",
     "carrier (?t \<otimes>\<otimes> ?t') = carrier ?t Un carrier ?t'",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("TTree.carrier_either",
     "carrier (?t \<oplus>\<oplus> ?t') = carrier ?t Un carrier ?t'",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("TTree.Union_paths_carrier", "\<Union> (set ` paths ?t) = carrier ?t",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty),
           template_app (template_hole 1, template_var 0))),
       template_app (template_hole 0, template_var 0))),
    ("TTree.paths_Either",
     "paths (Either ?ts) = insert [] (\<Union> (paths ` ?ts))",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, template_var 0)),
       template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_hole 5),
             template_var 0))))),
    ("TTree.paths_either",
     "paths (?t \<oplus>\<oplus> ?t') = paths ?t Un paths ?t'",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("TTree.paths_intersect",
     "paths (?t \<inter>\<inter> ?t') = paths ?t Int paths ?t'",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("TTree.possible_substitute",
     "possible (substitute ?f ?T ?t) ?x = possible ?t ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("TTree.carrier_intersect",
     "carrier (?t \<inter>\<inter> ?t') <= carrier ?t Int carrier ?t'",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("TTree.carrier_f_nxt",
     "carrier (f_nxt ?f ?T ?x ?x') <= carrier (?f ?x')",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 1, template_app (template_var 3, template_var 0)))),
    ("TTree.paths_many_calls_subset",
     "paths ?t <= paths (many_calls ?x \<otimes>\<otimes> without ?x ?t)",
     template_inequation
      (less_equals, template_app (template_hole 3, template_var 1),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("TTree.paths_inj", "paths ?t = paths ?t' ==> ?t = ?t'",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("TTree.ttree_restr_possible2",
     "possible (ttree_restr ?S ?t') ?x ==> ?x : ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 2)
           ))),
    ("TTree.carrier_without", "carrier (without ?x ?t) = carrier ?t - {?x}",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 4, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("TTree.paths_single", "paths (single ?x) = {[], [?x]}",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, template_var 0)),
       template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 2)),
           template_hole 0)))),
    ("TTree.both_assoc",
     "?t \<otimes>\<otimes> (?t' \<otimes>\<otimes> ?t'') =
      ?t \<otimes>\<otimes> ?t' \<otimes>\<otimes> ?t''",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("TTree.ttree_restr_tree_restr",
     "ttree_restr ?S (ttree_restr ?S' ?t) = ttree_restr (?S' Int ?S) ?t",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_var 0))),
    ("TTree.repeatable_f_nxt_upd",
     "repeatable (?f ?x) ==> repeatable (f_nxt ?f ?T ?x' ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app (template_var 3, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("TTree.nxt_not_possible",
     "~ possible ?t ?x ==> nxt ?t ?x = TTree.empty",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("TTree.ttree_restr_noop",
     "carrier ?t <= ?S ==> ttree_restr ?S ?t = ?t",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 2, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("TTree.nxt_many_calls",
     "nxt (many_calls ?x) ?x' =
      (if ?x' = ?x then many_calls ?x else TTree.empty)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 1)),
               template_app (template_hole 3, template_var 1)),
             template_hole 0)
           ))),
    ("TTree.singles_mono",
     "?S <= ?S' ==> paths (singles ?S') <= paths (singles ?S)",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 1))))),
    ("TTree.f_nxt_empty'", "?f ?x = TTree.empty ==> f_nxt ?f ?T ?x = ?f",
     template_implication
      ([template_equation
         (template_app (template_var 2, template_var 1), template_hole 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0),
           template_var 1),
         template_var 2))),
    ("TTree.carrier_mono",
     "paths ?t <= paths ?t' ==> carrier ?t <= carrier ?t'",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("TTree.filter_paths_conv_free_restr",
     "filter (%x'. x' : ?S) ` paths ?t = paths (ttree_restr ?S ?t)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("TTree.possible_both",
     "possible (?t \<otimes>\<otimes> ?t') ?x =
      (possible ?t ?x | possible ?t' ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("TTree.possible_either",
     "possible (?t \<oplus>\<oplus> ?t') ?x =
      (possible ?t ?x | possible ?t' ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("TTree.elim_substitute'",
     "substitute' ?f ?T ?t ?xs = (?xs : paths (substitute ?f ?T ?t))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1))))),
    ("TTree.nxt_either",
     "nxt (?t \<oplus>\<oplus> ?t') ?x =
      nxt ?t ?x \<oplus>\<oplus> nxt ?t' ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("TTree.ttree_restr_both",
     "ttree_restr ?S (?t \<otimes>\<otimes> ?t') =
      ttree_restr ?S ?t \<otimes>\<otimes> ttree_restr ?S ?t'",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("TTree.either_both_distr",
     "?t' \<otimes>\<otimes> ?t \<oplus>\<oplus>
      ?t' \<otimes>\<otimes> ?t'' =
      ?t' \<otimes>\<otimes> (?t \<oplus>\<oplus> ?t'')",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("TTree.either_both_distr2",
     "?t' \<otimes>\<otimes> ?t \<oplus>\<oplus>
      ?t'' \<otimes>\<otimes> ?t =
      (?t' \<oplus>\<oplus> ?t'') \<otimes>\<otimes> ?t",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_var 1))),
    ("TTree.repeatable_both_both",
     "repeatable ?t ==>
      ?t \<otimes>\<otimes> ?t' \<otimes>\<otimes> ?t =
      ?t \<otimes>\<otimes> ?t'",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("TTree.repeatable_both_both2",
     "repeatable ?t ==>
      ?t' \<otimes>\<otimes> ?t \<otimes>\<otimes> ?t =
      ?t' \<otimes>\<otimes> ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("TTree.f_nxt_empty",
     "?f ?x = TTree.empty ==> f_nxt ?f ?T ?x' ?x = TTree.empty",
     template_implication
      ([template_equation
         (template_app (template_var 3, template_var 2), template_hole 1)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0),
           template_var 2),
         template_hole 1))),
    ("TTree.substitute_only_empty",
     "const_on ?f (carrier ?t) TTree.empty ==> substitute ?f ?T ?t = ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_app (template_hole 3, template_var 1)),
              template_hole 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0),
           template_var 1),
         template_var 1))),
    ("TTree.ttree_restr_is_empty",
     "carrier ?t Int ?S = {} ==> ttree_restr ?S ?t = TTree.empty",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 1)),
            template_var 0),
          template_hole 3)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("TTree.downsetE",
     "[| downset ?xss; ?xs : ?xss |] ==> butlast ?xs : ?xss",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("TTree.filter_paths_conv_free_without",
     "filter (%x'. x' ~= ?y) ` paths ?t = paths (without ?y ?t)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, t_empty)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("TTree.downset_appendE",
     "[| downset ?xss; ?xs @ ?ys : ?xss |] ==> ?xs : ?xss",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), template_var 2)
           ))),
    ("TTree.nxt_repeatable",
     "[| repeatable ?t; possible ?t ?x |] ==> nxt ?t ?x = ?t",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1))),
    ("TTree.carrier_possible_subset",
     "[| carrier ?t <= ?A; possible ?t ?x |] ==> ?x : ?A",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 2, template_var 2),
          template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("TTree.f_nxt_upd_empty",
     "f_nxt (?f(?x' := TTree.empty)) ?T ?x = (f_nxt ?f ?T ?x)
      (?x' := TTree.empty)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_hole 0)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 1),
               template_var 0)),
           template_var 2),
         template_hole 0))),
    ("TTree.filter_paths_conv_free_restr2",
     "filter (%x'. x' ~: ?S) ` paths ?t = paths (ttree_restr (- ?S) ?t)",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, t_empty)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("TTree.nxt_singles",
     "nxt (singles ?S) ?x' =
      (if ?x' : ?S then without ?x' (singles ?S) else singles ?S)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_app (template_hole 3, template_var 1))),
         template_app (template_hole 3, template_var 1)))),
    ("TTree.nxt_both_many_calls",
     "nxt (many_calls ?x \<otimes>\<otimes> ?t) ?x =
      many_calls ?x \<otimes>\<otimes> (?t \<oplus>\<oplus> nxt ?t ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_var 0)),
         template_var 1),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_var 1))))),
    ("TTree.ttree_restr_possible",
     "[| ?x : ?S; possible ?t ?x |] ==> possible (ttree_restr ?S ?t) ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("TTree.possible_mono",
     "[| paths ?t <= paths ?t'; possible ?t ?x |] ==> possible ?t' ?x",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 1, template_var 2),
          template_app (template_hole 1, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("TTree.paths_substitute_substitute''",
     "paths (substitute ?f ?T ?t) =
      (UN xs:paths ?t. Collect (substitute'' ?f ?T xs))",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app (template_hole 5, template_var 0))))),
    ("TTree.substitute_either",
     "substitute ?f ?T (?t \<oplus>\<oplus> ?t') =
      substitute ?f ?T ?t \<oplus>\<oplus> substitute ?f ?T ?t'",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 0)))),
    ("TTree.substitute_monoT",
     "?T <= ?T' ==>
      paths (substitute ?f ?T' ?t) <= paths (substitute ?f ?T ?t)",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3),
             template_var 0))))),
    ("TTree.repeatable_both_both_nxt",
     "?t' \<otimes>\<otimes> ?t = ?t' ==>
      ?t' \<otimes>\<otimes> ?t'' \<otimes>\<otimes> ?t =
      ?t' \<otimes>\<otimes> ?t''",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 0, template_var 2), template_var 1),
          template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("TTree.both_mono1",
     "paths ?t <= paths ?t' ==>
      paths (?t \<otimes>\<otimes> ?t'')
      <= paths (?t' \<otimes>\<otimes> ?t'')",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 1, template_var 2),
          template_app (template_hole 1, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("TTree.both_mono2",
     "paths ?t <= paths ?t' ==>
      paths (?t'' \<otimes>\<otimes> ?t)
      <= paths (?t'' \<otimes>\<otimes> ?t')",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 1, template_var 2),
          template_app (template_hole 1, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("TTree.nxt_mono",
     "paths ?t <= paths ?t' ==> paths (nxt ?t ?x) <= paths (nxt ?t' ?x)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 1, template_var 2),
          template_app (template_hole 1, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("TTree.substitute''_NilE",
     "[| substitute'' ?f ?T [] ?xs; ?xs = [] ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_hole 1),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 1, template_hole 1)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("TTree.substitute''_NilE",
     "[| substitute'' ?f ?T ?xs []; ?xs = [] ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_hole 1)
            ),
        template_implication
         ([template_equation (template_var 1, template_hole 1)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("TTree.paths_nxt_eq",
     "(?xs : paths (nxt ?t ?x)) = (?xs = [] | ?x # ?xs : paths ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_hole 1)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2)),
               template_app (template_hole 5, template_var 1)))
           ))),
    ("TTree.Cons_path",
     "(?x # ?xs : paths ?t) = (possible ?t ?x & ?xs : paths (nxt ?t ?x))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)))))),
    ("TTree.substitute_substitute''",
     "(?xs : paths (substitute ?f ?T ?t)) =
      (EX xs':paths ?t. substitute'' ?f ?T xs' ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 3),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 0)),
         t_empty))),
    ("TTree.ttree_restr_nxt_subset2",
     "?x ~: ?S ==>
      paths (ttree_restr ?S (nxt ?t ?x)) <= paths (ttree_restr ?S ?t)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)
                )
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("TTree.ttree_restr_nxt_subset",
     "?x : ?S ==>
      paths (ttree_restr ?S (nxt ?t ?x))
      <= paths (nxt (ttree_restr ?S ?t) ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_var 2))))),
    ("TTree.paths_Cons_nxt_iff",
     "possible ?t ?x ==> (?xs : paths (nxt ?t ?x)) = (?x # ?xs : paths ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_app (template_hole 2, template_var 2))))),
    ("TTree.f_nxt_cong",
     "?f ?x' = ?f' ?x' ==> f_nxt ?f ?T ?x ?x' = f_nxt ?f' ?T ?x ?x'",
     template_implication
      ([template_equation
         (template_app (template_var 4, template_var 3),
          template_app (template_var 2, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1),
             template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0),
           template_var 3)))),
    ("TTree.substitute_mono2",
     "paths ?t <= paths ?t' ==>
      paths (substitute ?f ?T ?t) <= paths (substitute ?f ?T ?t')",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 1, template_var 3),
          template_app (template_hole 1, template_var 2))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 3)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2))))),
    ("TTree.f_nxt_T_delete",
     "?f ?x = TTree.empty ==> f_nxt ?f (?T - {?x}) ?x' = f_nxt ?f ?T ?x'",
     template_implication
      ([template_equation
         (template_app (template_var 3, template_var 2), template_hole 5)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 0))),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 1),
           template_var 0)))),
    ("TTree.substitute_T_delete",
     "?f ?x = TTree.empty ==>
      substitute ?f (?T - {?x}) ?t = substitute ?f ?T ?t",
     template_implication
      ([template_equation
         (template_app (template_var 3, template_var 2), template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 0))),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 1),
           template_var 0)))),
    ("TTree.length_filter_mono",
     "(!!x. ?P x ==> ?Q x) ==>
      length (filter ?P ?xs) <= length (filter ?Q ?xs)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("TTree.paths_Cons_nxt",
     "[| possible ?t ?x; ?xs : paths (nxt ?t ?x) |]
      ==> ?x # ?xs : paths ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app (template_hole 2, template_var 2))
           ))),
    ("TTree.paths_withoutI",
     "[| ?xs : paths ?t; ?x ~: set ?xs |] ==> ?xs : paths (without ?x ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_app (template_hole 1, template_var 2))
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("TTree.paths_both",
     "(?xs : paths (?t \<otimes>\<otimes> ?t')) =
      (EX ys:paths ?t. EX zs:paths ?t'. ?xs : ys \<otimes> zs)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 1)),
         t_empty))),
    ("TTree.f_nxt_eq_empty_iff",
     "(f_nxt ?f ?T ?x ?x' = TTree.empty) =
      (?f ?x' = TTree.empty | ?x' = ?x & ?x : ?T)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 5, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0),
         template_hole 4),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_var 3, template_var 0)),
                 template_hole 4)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)))
           ))),
    ("TTree.substitute_only_empty_both",
     "const_on ?f (carrier ?t') TTree.empty ==>
      substitute ?f ?T (?t \<otimes>\<otimes> ?t') =
      substitute ?f ?T ?t \<otimes>\<otimes> ?t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_app (template_hole 4, template_var 2)),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1),
               template_var 0)),
           template_var 2)))),
    ("TTree.ttree_rest_substitute",
     "(!!x. carrier (?f x) Int ?S = {}) ==>
      ttree_restr ?S (substitute ?f ?T ?t) = ttree_restr ?S ?t",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("TTree.downsetI",
     "(!!xs. [| xs : ?xss; xs ~= [] |] ==> butlast xs : ?xss) ==>
      downset ?xss",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("TTree.downset_hdE",
     "[| downset ?xss; ?xs : ?xss; ?xs ~= [] |] ==> [hd ?xs] : ?xss",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)),
                 template_hole 2)),
             template_var 1)
           ))),
    ("TTree.substitute_mono1",
     "(!!x. paths (?f x) <= paths (?f' x)) ==>
      paths (substitute ?f ?T ?t) <= paths (substitute ?f' ?T ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))))),
    ("TTree.ttree_eqI",
     "(!!x xs. (x # xs : paths ?t) = (x # xs : paths ?t')) ==> ?t = ?t'",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("TTree.nxt_both_repeatable",
     "[| repeatable ?t'; possible ?t' ?x |]
      ==> nxt (?t' \<otimes>\<otimes> ?t) ?x =
          ?t' \<otimes>\<otimes> (?t \<oplus>\<oplus> nxt ?t ?x)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)))))),
    ("TTree.substitute_cong_T",
     "(!!x. (x : ?T) = (x : ?T') | ?f x = TTree.empty) ==>
      substitute ?f ?T = substitute ?f ?T'",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("TTree.Cons_both_possible_leftE",
     "[| possible ?t ?x; ?xs : paths (nxt ?t ?x \<otimes>\<otimes> ?t') |]
      ==> ?x # ?xs : paths (?t \<otimes>\<otimes> ?t')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_hole 2,
                    template_app
                     (template_app (template_hole 1, template_var 3),
                      template_var 2)),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 0)))
           ))),
    ("TTree.Cons_both_possible_rightE",
     "[| possible ?t' ?x; ?xs : paths (?t \<otimes>\<otimes> nxt ?t' ?x) |]
      ==> ?x # ?xs : paths (?t \<otimes>\<otimes> ?t')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_app
                   (template_app (template_hole 1, template_var 3),
                    template_var 2))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 3)))
           ))),
    ("TTree.nxt_substitute",
     "possible ?t ?x ==>
      nxt (substitute ?f ?T ?t) ?x =
      substitute (f_nxt ?f ?T ?x) ?T (nxt ?t ?x \<otimes>\<otimes> ?f ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0),
               template_var 3)),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0),
                 template_var 2)),
             template_var 0),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2)),
             template_app (template_var 1, template_var 2)))))),
    ("TTree.f_nxt_mono1",
     "(!!x. paths (?f x) <= paths (?f' x)) ==>
      paths (f_nxt ?f ?T ?x ?x') <= paths (f_nxt ?f' ?T ?x ?x')",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0))))),
    ("TTree.substitute'_Cons",
     "substitute' ?f ?T ?t (?x # ?xs) =
      (possible ?t ?x &
       substitute' (f_nxt ?f ?T ?x) ?T (nxt ?t ?x \<otimes>\<otimes> ?f ?x)
        ?xs)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 6, template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_app (template_hole 2, template_var 4),
                     template_var 3),
                   template_var 1)),
               template_var 3),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_app (template_var 4, template_var 1))),
           template_var 0)))),
    ("TTree.repeatable_both_nxt",
     "[| repeatable ?t; possible ?t' ?x; ?t' \<otimes>\<otimes> ?t = ?t' |]
      ==> nxt ?t' ?x \<otimes>\<otimes> ?t = nxt ?t' ?x",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 1), template_var 2),
          template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("TTree.substitute_remove_anyways",
     "[| repeatable ?t; ?f ?x = ?t |]
      ==> substitute ?f ?T (?t \<otimes>\<otimes> ?t') =
          substitute (?f(?x := TTree.empty)) ?T
           (?t \<otimes>\<otimes> ?t')",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 4)),
        template_equation
         (template_app (template_var 3, template_var 2), template_var 4)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 1),
           template_app
            (template_app (template_hole 2, template_var 4),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_hole 0)),
             template_var 1),
           template_app
            (template_app (template_hole 2, template_var 4),
             template_var 0))))),
    ("TTree.substitute_substitute",
     "(!!x. const_on ?f' (carrier (?f x)) TTree.empty) ==>
      substitute ?f ?T (substitute ?f' ?T ?t) =
      substitute (%x. ?f x \<otimes>\<otimes> ?f' x) ?T ?t",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 1, t_empty), template_var 1),
           template_var 0)))),
    ("TTree.substitute_cong",
     "(!!x. x : carrier (substitute ?f ?T ?t) ==> ?f x = ?f' x) ==>
      substitute ?f ?T ?t = substitute ?f' ?T ?t",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2),
           template_var 1)))),
    ("TTree.carrier_substitute_below",
     "[| !!x. x : ?A ==> carrier (?f x) <= ?A; carrier ?t <= ?A |]
      ==> carrier (substitute ?f ?T ?t) <= ?A",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_inequation
         (less_equals, template_app (template_hole 1, template_var 1),
          template_var 3)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1)),
         template_var 3))),
    ("TTree.paths_nxt",
     "[| ?xs : paths (nxt ?t ?x); ?x # ?xs : paths ?t ==> ?thesis;
         ?xs = [] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 3)),
                 template_app (template_hole 4, template_var 2))
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation (template_var 3, template_hole 0)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("TTree.substitute_simps",
     "(?x # ?xs : paths (substitute ?f ?T ?t)) =
      (possible ?t ?x &
       ?xs
       : paths
          (substitute (f_nxt ?f ?T ?x) ?T
            (nxt ?t ?x \<otimes>\<otimes> ?f ?x)))",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 4),
             template_var 3)),
         template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_var 4)),
         template_app
          (template_app (template_hole 8, template_var 3),
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_app (template_hole 2, template_var 2),
                       template_var 1),
                     template_var 4)),
                 template_var 1),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 4)),
                 template_app (template_var 2, template_var 4)))))))),
    ("TTree.ttree_rest_substitute2",
     "[| !!x. carrier (?f x) <= ?S; const_on ?f (- ?S) TTree.empty |]
      ==> ttree_restr ?S (substitute ?f ?T ?t) =
          substitute ?f ?T (ttree_restr ?S ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_app (template_hole 4, template_var 2)),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("TTree.ex_ex_eq_hint",
     "(EX x. (EX xs ys. x = ?f xs ys & ?P xs ys) & ?Q x) =
      (EX xs ys. ?Q (?f xs ys) & ?P xs ys)",
     template_equation
      (template_app (template_hole 4, t_empty),
       template_app (template_hole 2, t_empty))),
    ("TTree.substitute_T_cong'",
     "[| ?xs : paths (substitute ?f ?T ?t);
         !!x. (x : ?T) = (x : ?T') | ?f x = TTree.empty |]
      ==> ?xs : paths (substitute ?f ?T' ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 3),
                    template_var 2),
                  template_var 1)))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 8, template_var 4),
             template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_app (template_hole 6, template_var 3),
                   template_var 0),
                 template_var 1)))
           ))),
    ("TTree.substitute_remove_anyways_aux",
     "[| repeatable (?f ?x); ?xs : paths (substitute ?f ?T ?t);
         ?t \<otimes>\<otimes> ?f ?x = ?t |]
      ==> ?xs : paths (substitute (?f(?x := TTree.empty)) ?T ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app (template_var 4, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 1),
                  template_var 0)))
            ),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 0),
            template_app (template_var 4, template_var 3)),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 2),
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_app (template_hole 1, template_var 4),
                         template_var 3),
                       template_hole 0)),
                   template_var 1),
                 template_var 0)))
           ))),
    ("TTree.carrier_substitute_aux",
     "[| ?xs : paths (substitute ?f ?T ?t); carrier ?t <= ?A;
         !!x. x : ?A ==> carrier (?f x) <= ?A |]
      ==> set ?xs <= ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_app (template_hole 5, template_var 3),
                    template_var 2),
                  template_var 1)))
            ),
        template_inequation
         (less_equals, template_app (template_hole 3, template_var 1),
          template_var 0),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 4),
         template_var 0))),
    ("TTree.substitute_cong_induct",
     "[| !!x. x : ?A ==> carrier (?f x) <= ?A; carrier ?t <= ?A;
         !!x. x : ?A ==> ?f x = ?f' x |]
      ==> substitute ?f ?T ?t = substitute ?f' ?T ?t",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_inequation
         (less_equals, template_app (template_hole 2, template_var 2),
          template_var 4),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2)))),
    ("TTree.nxt_both",
     "nxt (?t' \<otimes>\<otimes> ?t) ?x =
      (if possible ?t' ?x & possible ?t ?x
       then nxt ?t' ?x \<otimes>\<otimes> ?t \<oplus>\<oplus>
            ?t' \<otimes>\<otimes> nxt ?t ?x
       else if possible ?t' ?x then nxt ?t' ?x \<otimes>\<otimes> ?t
            else if possible ?t ?x then ?t' \<otimes>\<otimes> nxt ?t ?x
                 else TTree.empty)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 0)),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 6, template_var 2),
                     template_var 0)),
                 template_var 1)),
             template_app
              (template_app (template_hole 5, template_var 2),
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_var 0)))),
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 0)),
               template_var 1)),
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0)),
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_var 0))),
             template_hole 0))))),
    ("TTree.Cons_pathI",
     "[| possible ?t ?x = possible ?t' ?x;
         [| possible ?t ?x; possible ?t' ?x |]
         ==> (?xs : paths (nxt ?t ?x)) = (?xs : paths (nxt ?t' ?x)) |]
      ==> (?x # ?xs : paths ?t) = (?x # ?xs : paths ?t')",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 2)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 2)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_var 2)
                 )],
            template_equation
             (template_app
               (template_app (template_hole 3, template_var 0),
                template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 3),
                    template_var 2))),
              template_app
               (template_app (template_hole 3, template_var 0),
                template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 1),
                    template_var 2))))))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_app (template_hole 2, template_var 3)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_app (template_hole 2, template_var 1))))),
    ("TTree.substitute''_ConsE",
     "[| substitute'' ?f ?T (?x # ?xs) ?ys;
         !!zs xs' ys.
            [| ?ys = ?x # ys; zs : paths (?f ?x); xs' : ?xs \<otimes> zs;
               substitute'' (f_nxt ?f ?T ?x) ?T xs' ys |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 5),
                  template_var 4),
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("TTree.substitute_induct",
     "[| !!f T t. ?P f T t [];
         !!f T t x xs.
            ?P (f_nxt f T x) T (nxt t x \<otimes>\<otimes> f x) xs ==>
            ?P f T t (x # xs) |]
      ==> ?P ?a0.0 ?a1.0 ?a2.0 ?a3.0",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_var 4, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("TTree.substitute_cong'",
     "[| ?xs : paths (substitute ?f ?T ?t);
         !!x n. x : ?A ==> carrier (?f x) <= ?A; carrier ?t <= ?A;
         !!x. x : ?A ==> ?f x = ?f' x |]
      ==> ?xs : paths (substitute ?f' ?T ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 5),
              template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_var 2)))
            ),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_inequation
         (less_equals, template_app (template_hole 1, template_var 2),
          template_var 1),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 8, template_var 5),
             template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_app (template_hole 6, template_var 0),
                   template_var 3),
                 template_var 2)))
           ))),
    ("TTree.ttree_coinduct",
     "[| ?P ?t ?t'; !!t t' x. ?P t t' ==> possible t x = possible t' x;
         !!t t' x.
            [| ?P t t'; possible t x; possible t' x |]
            ==> ?P (nxt t x) (nxt t' x) |]
      ==> ?t = ?t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 1), template_var 0)
            ),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("TTree.Cons_both",
     "(?x # ?xs : paths (?t' \<otimes>\<otimes> ?t)) =
      (if possible ?t' ?x & possible ?t ?x
       then ?xs : paths (nxt ?t' ?x \<otimes>\<otimes> ?t) |
            ?xs : paths (?t' \<otimes>\<otimes> nxt ?t ?x)
       else if possible ?t' ?x
            then ?xs : paths (nxt ?t' ?x \<otimes>\<otimes> ?t)
            else if possible ?t ?x
                 then ?xs : paths (?t' \<otimes>\<otimes> nxt ?t ?x)
                 else False)",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 3),
             template_var 2)),
         template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 3)),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 3))),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 9, template_var 2),
                 template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 1, template_var 1),
                         template_var 3)),
                     template_var 0)))),
             template_app
              (template_app (template_hole 9, template_var 2),
               template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 3)))))),
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 3)),
             template_app
              (template_app (template_hole 9, template_var 2),
               template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_var 3)),
                   template_var 0)))),
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_var 3)),
               template_app
                (template_app (template_hole 9, template_var 2),
                 template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 1),
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_var 3))))),
             template_hole 0)))))]
