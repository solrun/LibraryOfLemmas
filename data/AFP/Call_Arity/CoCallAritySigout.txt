Loading theory "HOL-Library.Stream" (required by "Draft.CoCallAritySigTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.CoCallAritySigTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.CoCallAritySigTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.CoCallAritySigTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.151s elapsed time, 0.609s cpu time, 0.060s GC time
Loading theory "Draft.Set-Cpo" (required by "Draft.CoCallAritySigTemplates" via "Draft.CoCallAritySig" via "Draft.CoCallAnalysisSig" via "Draft.CoCallGraph")
instantiation
  set :: (type) below
  below_set == below :: 'a set => 'a set => bool
### theory "Draft.Set-Cpo"
### 0.051s elapsed time, 0.209s cpu time, 0.000s GC time
Loading theory "Draft.Arity" (required by "Draft.CoCallAritySigTemplates" via "Draft.CoCallAritySig" via "Draft.ArityAnalysisSig" via "Draft.AEnv")
### theory "HOL-Library.Set_Algebras"
### 0.237s elapsed time, 0.953s cpu time, 0.060s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.CoCallAritySigTemplates" via "Draft.ExtrEqs")
instantiation
  Arity :: po
  below_Arity == below :: Arity => Arity => bool
instantiation
  Arity :: zero
  zero_Arity == zero_class.zero :: Arity
instantiation
  Arity :: one
  one_Arity == one_class.one :: Arity
### theory "Draft.Arity"
### 0.203s elapsed time, 0.792s cpu time, 0.104s GC time
Loading theory "Draft.AEnv" (required by "Draft.CoCallAritySigTemplates" via "Draft.CoCallAritySig" via "Draft.ArityAnalysisSig")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  left :: "'a tree => 'a tree"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.882s elapsed time, 3.470s cpu time, 0.410s GC time
Loading theory "Draft.CoCallGraph" (required by "Draft.CoCallAritySigTemplates" via "Draft.CoCallAritySig" via "Draft.CoCallAnalysisSig")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.962s elapsed time, 3.674s cpu time, 0.974s GC time
Loading theory "Draft.Arity-Nominal" (required by "Draft.CoCallAritySigTemplates" via "Draft.CoCallAritySig" via "Draft.ArityAnalysisSig")
### theory "Draft.AEnv"
### 0.821s elapsed time, 3.130s cpu time, 0.871s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  Arity :: pure
  permute_Arity == permute :: perm => Arity => Arity
### theory "Draft.Arity-Nominal"
### 0.480s elapsed time, 1.472s cpu time, 0.111s GC time
Loading theory "Draft.ArityAnalysisSig" (required by "Draft.CoCallAritySigTemplates" via "Draft.CoCallAritySig")
instantiation
  CoCalls :: po
  below_CoCalls == below :: CoCalls => CoCalls => bool
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.090s elapsed time, 7.358s cpu time, 1.280s GC time
Loading theory "Draft.Templates" (required by "Draft.CoCallAritySigTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.061s elapsed time, 0.206s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.CoCallAritySigTemplates")
### Ambiguous input (line 284 of "$AFP/Call_Arity/CoCallGraph.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>ccSquare" ("_position" S))
###     ("_applC" ("_position" ccProd)
###       ("_cargs" ("_position" S) ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^const>Power.power_class.power2" ("_position" S))
###     ("_applC" ("_position" ccProd)
###       ("_cargs" ("_position" S) ("_position" S)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 286 of "$AFP/Call_Arity/CoCallGraph.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ccField)
###       ("\<^const>CoCallGraph.ccSquare" ("_position" S)))
###     ("_position" S)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ccField)
###       ("\<^const>Power.power_class.power2" ("_position" S)))
###     ("_position" S)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 289 of "$AFP/Call_Arity/CoCallGraph.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Porder.below_class.below" ("_position" G)
###       ("\<^const>Power.power_class.power2" ("_position" S)))
###     ("\<^const>Set.subset_eq"
###       ("_applC" ("_position" ccField) ("_position" G)) ("_position" S))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Porder.below_class.below" ("_position" G)
###       ("\<^const>CoCallGraph.ccSquare" ("_position" S)))
###     ("\<^const>Set.subset_eq"
###       ("_applC" ("_position" ccField) ("_position" G)) ("_position" S))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 292 of "$AFP/Call_Arity/CoCallGraph.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>CoCallGraph.cc_restr_sym"
###       ("\<^const>CoCallGraph.ccSquare" ("_position" S')) ("_position" S))
###     ("\<^const>CoCallGraph.ccSquare"
###       ("\<^const>Set.inter" ("_position" S') ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>CoCallGraph.cc_restr_sym"
###       ("\<^const>Power.power_class.power2" ("_position" S'))
###       ("_position" S))
###     ("\<^const>CoCallGraph.ccSquare"
###       ("\<^const>Set.inter" ("_position" S') ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>CoCallGraph.cc_restr_sym"
###       ("\<^const>CoCallGraph.ccSquare" ("_position" S')) ("_position" S))
###     ("\<^const>Power.power_class.power2"
###       ("\<^const>Set.inter" ("_position" S') ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>CoCallGraph.cc_restr_sym"
###       ("\<^const>Power.power_class.power2" ("_position" S'))
###       ("_position" S))
###     ("\<^const>Power.power_class.power2"
###       ("\<^const>Set.inter" ("_position" S') ("_position" S)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 295 of "$AFP/Call_Arity/CoCallGraph.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>CoCallGraph.ccSquare" ("\<^const>Set.empty"))
###     ("\<^const>Pcpo.pcpo_class.bottom")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Power.power_class.power2" ("\<^const>Set.empty"))
###     ("\<^const>Pcpo.pcpo_class.bottom")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "list_pairs"
  Proving monotonicity ...
locale ArityAnalysis
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
locale ArityAnalysisHeap
  fixes
    Aheap ::
      "(Vars.var * exp) list
       => exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
### theory "Draft.CoCallGraph"
### 1.414s elapsed time, 4.539s cpu time, 0.940s GC time
Loading theory "Draft.CoCallAnalysisSig" (required by "Draft.CoCallAritySigTemplates" via "Draft.CoCallAritySig")
locale EdomArityAnalysis
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "EdomArityAnalysis Aexp"
locale ArityAnalysisHeapEqvt
  fixes
    Aheap ::
      "(Vars.var * exp) list
       => exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "ArityAnalysisHeapEqvt Aheap"
### theory "Draft.ArityAnalysisSig"
### 0.640s elapsed time, 1.976s cpu time, 0.205s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.590s elapsed time, 1.411s cpu time, 0.146s GC time
locale CoCallAnalysis
  fixes ccExp :: "exp => Arity -> CoCalls"
locale CoCallAnalyisHeap
  fixes ccHeap :: "(Vars.var * exp) list => exp => Arity -> CoCalls"
### theory "Draft.CoCallAnalysisSig"
### 0.518s elapsed time, 1.025s cpu time, 0.076s GC time
Loading theory "Draft.CoCallAritySig" (required by "Draft.CoCallAritySigTemplates")
locale CoCallArity
  fixes ccExp :: "exp => Arity -> CoCalls"
    and Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
### theory "Draft.CoCallAritySig"
### 0.256s elapsed time, 0.256s cpu time, 0.000s GC time
Loading theory "Draft.CoCallAritySigTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.CoCallAritySigTemplates"
### 0.686s elapsed time, 0.894s cpu time, 0.141s GC time
val it = (): unit
