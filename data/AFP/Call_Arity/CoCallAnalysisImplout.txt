Loading theory "HOL-Library.Function_Algebras" (required by "Draft.CoCallAnalysisImplTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.CoCallAnalysisImplTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "HOL-Library.Stream" (required by "Draft.CoCallAnalysisImplTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.CoCallAnalysisImplTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.134s elapsed time, 0.550s cpu time, 0.052s GC time
Loading theory "Draft.Set-Cpo" (required by "Draft.CoCallAnalysisImplTemplates" via "Draft.CoCallAnalysisImpl" via "Draft.Env-Set-Cpo")
instantiation
  set :: (type) below
  below_set == below :: 'a set => 'a set => bool
### theory "Draft.Set-Cpo"
### 0.049s elapsed time, 0.194s cpu time, 0.000s GC time
Loading theory "Draft.Arity" (required by "Draft.CoCallAnalysisImplTemplates" via "Draft.CoCallAnalysisImpl" via "Draft.Arity-Nominal")
### theory "HOL-Library.Set_Algebras"
### 0.216s elapsed time, 0.883s cpu time, 0.052s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.CoCallAnalysisImplTemplates" via "Draft.ExtrEqs")
instantiation
  Arity :: po
  below_Arity == below :: Arity => Arity => bool
instantiation
  Arity :: zero
  zero_Arity == zero_class.zero :: Arity
instantiation
  Arity :: one
  one_Arity == one_class.one :: Arity
### theory "Draft.Arity"
### 0.200s elapsed time, 0.782s cpu time, 0.099s GC time
Loading theory "Draft.AEnv" (required by "Draft.CoCallAnalysisImplTemplates" via "Draft.CoCallAnalysisImpl" via "Draft.CoCallFix" via "Draft.CoCallAnalysisBinds")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.909s elapsed time, 3.594s cpu time, 0.383s GC time
Loading theory "Draft.Env-Set-Cpo" (required by "Draft.CoCallAnalysisImplTemplates" via "Draft.CoCallAnalysisImpl")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.750s elapsed time, 2.932s cpu time, 0.331s GC time
Loading theory "Draft.AList-Utils-HOLCF" (required by "Draft.CoCallAnalysisImplTemplates" via "Draft.CoCallAnalysisImpl" via "Draft.CoCallFix" via "Draft.CoCallAnalysisBinds")
### theory "Draft.AEnv"
### 0.623s elapsed time, 2.452s cpu time, 0.233s GC time
Loading theory "Draft.CoCallGraph" (required by "Draft.CoCallAnalysisImplTemplates" via "Draft.CoCallAnalysisImpl" via "Draft.CoCallFix" via "Draft.CoCallAnalysisSig")
Found termination order: "size <*mlex*> {}"
### theory "Draft.Env-Set-Cpo"
### 0.380s elapsed time, 1.367s cpu time, 0.585s GC time
Loading theory "Draft.Arity-Nominal" (required by "Draft.CoCallAnalysisImplTemplates" via "Draft.CoCallAnalysisImpl")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.AList-Utils-HOLCF"
### 0.672s elapsed time, 2.508s cpu time, 0.718s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  Arity :: pure
  permute_Arity == permute :: perm => Arity => Arity
### theory "Draft.Arity-Nominal"
### 0.492s elapsed time, 1.814s cpu time, 0.133s GC time
Loading theory "Draft.ArityAnalysisSig" (required by "Draft.CoCallAnalysisImplTemplates" via "Draft.CoCallAnalysisImpl" via "Draft.CoCallFix")
Found termination order: "size <*mlex*> {}"
instantiation
  CoCalls :: po
  below_CoCalls == below :: CoCalls => CoCalls => bool
### theory "HOL-Library.Tree"
### 2.173s elapsed time, 7.971s cpu time, 1.225s GC time
Loading theory "Draft.Templates" (required by "Draft.CoCallAnalysisImplTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.062s elapsed time, 0.202s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.CoCallAnalysisImplTemplates")
### Ambiguous input (line 284 of "$AFP/Call_Arity/CoCallGraph.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>ccSquare" ("_position" S))
###     ("_applC" ("_position" ccProd)
###       ("_cargs" ("_position" S) ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^const>Power.power_class.power2" ("_position" S))
###     ("_applC" ("_position" ccProd)
###       ("_cargs" ("_position" S) ("_position" S)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 286 of "$AFP/Call_Arity/CoCallGraph.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ccField)
###       ("\<^const>CoCallGraph.ccSquare" ("_position" S)))
###     ("_position" S)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ccField)
###       ("\<^const>Power.power_class.power2" ("_position" S)))
###     ("_position" S)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 289 of "$AFP/Call_Arity/CoCallGraph.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Porder.below_class.below" ("_position" G)
###       ("\<^const>Power.power_class.power2" ("_position" S)))
###     ("\<^const>Set.subset_eq"
###       ("_applC" ("_position" ccField) ("_position" G)) ("_position" S))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Porder.below_class.below" ("_position" G)
###       ("\<^const>CoCallGraph.ccSquare" ("_position" S)))
###     ("\<^const>Set.subset_eq"
###       ("_applC" ("_position" ccField) ("_position" G)) ("_position" S))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 292 of "$AFP/Call_Arity/CoCallGraph.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>CoCallGraph.cc_restr_sym"
###       ("\<^const>CoCallGraph.ccSquare" ("_position" S')) ("_position" S))
###     ("\<^const>CoCallGraph.ccSquare"
###       ("\<^const>Set.inter" ("_position" S') ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>CoCallGraph.cc_restr_sym"
###       ("\<^const>Power.power_class.power2" ("_position" S'))
###       ("_position" S))
###     ("\<^const>CoCallGraph.ccSquare"
###       ("\<^const>Set.inter" ("_position" S') ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>CoCallGraph.cc_restr_sym"
###       ("\<^const>CoCallGraph.ccSquare" ("_position" S')) ("_position" S))
###     ("\<^const>Power.power_class.power2"
###       ("\<^const>Set.inter" ("_position" S') ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>CoCallGraph.cc_restr_sym"
###       ("\<^const>Power.power_class.power2" ("_position" S'))
###       ("_position" S))
###     ("\<^const>Power.power_class.power2"
###       ("\<^const>Set.inter" ("_position" S') ("_position" S)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 295 of "$AFP/Call_Arity/CoCallGraph.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>CoCallGraph.ccSquare" ("\<^const>Set.empty"))
###     ("\<^const>Pcpo.pcpo_class.bottom")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Power.power_class.power2" ("\<^const>Set.empty"))
###     ("\<^const>Pcpo.pcpo_class.bottom")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "list_pairs"
locale ArityAnalysis
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  Proving monotonicity ...
locale ArityAnalysisHeap
  fixes
    Aheap ::
      "(Vars.var * exp) list
       => exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
locale EdomArityAnalysis
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "EdomArityAnalysis Aexp"
locale ArityAnalysisHeapEqvt
  fixes
    Aheap ::
      "(Vars.var * exp) list
       => exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "ArityAnalysisHeapEqvt Aheap"
### theory "Draft.ArityAnalysisSig"
### 0.638s elapsed time, 1.965s cpu time, 0.200s GC time
Loading theory "Draft.ArityAnalysisAbinds" (required by "Draft.CoCallAnalysisImplTemplates" via "Draft.CoCallAnalysisImpl" via "Draft.CoCallFix" via "Draft.ArityAnalysisFix")
### theory "Draft.CoCallGraph"
### 1.256s elapsed time, 4.251s cpu time, 0.333s GC time
Loading theory "Draft.CoCallAnalysisSig" (required by "Draft.CoCallAnalysisImplTemplates" via "Draft.CoCallAnalysisImpl" via "Draft.CoCallFix")
Loading theory "Draft.CoCallGraph-Nominal" (required by "Draft.CoCallAnalysisImplTemplates" via "Draft.CoCallAnalysisImpl" via "Draft.CoCallFix" via "Draft.CoCallAnalysisBinds")
locale ArityAnalysis
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
Found termination order: "size_list size <*mlex*> {}"
instantiation
  CoCalls :: pt
  permute_CoCalls == permute :: perm => CoCalls => CoCalls
### theory "Draft.CoCallGraph-Nominal"
### 0.338s elapsed time, 1.318s cpu time, 0.164s GC time
locale EdomArityAnalysis
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "EdomArityAnalysis Aexp"
### theory "Draft.ArityAnalysisAbinds"
### 0.369s elapsed time, 1.415s cpu time, 0.164s GC time
Loading theory "Draft.ArityAnalysisFix" (required by "Draft.CoCallAnalysisImplTemplates" via "Draft.CoCallAnalysisImpl" via "Draft.CoCallFix")
locale ArityAnalysis
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.674s elapsed time, 2.350s cpu time, 0.241s GC time
locale EdomArityAnalysis
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "EdomArityAnalysis Aexp"
### theory "Draft.ArityAnalysisFix"
### 0.144s elapsed time, 0.406s cpu time, 0.000s GC time
locale CoCallAnalysis
  fixes ccExp :: "exp => Arity -> CoCalls"
locale CoCallAnalyisHeap
  fixes ccHeap :: "(Vars.var * exp) list => exp => Arity -> CoCalls"
### theory "Draft.CoCallAnalysisSig"
### 0.613s elapsed time, 1.922s cpu time, 0.217s GC time
Loading theory "Draft.CoCallAnalysisBinds" (required by "Draft.CoCallAnalysisImplTemplates" via "Draft.CoCallAnalysisImpl" via "Draft.CoCallFix")
locale CoCallAnalysis
  fixes ccExp :: "exp => Arity -> CoCalls"
### Ambiguous input (line 12 of "$AFP/Call_Arity/CoCallAnalysisBinds.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Cfun.cfun.Rep_cfun"
###       ("_applC" ("_position" ccBind)
###         ("_cargs" ("_position" v) ("_position" e)))
###       ("_tuple" ("_position" ae) ("_tuple_arg" ("_position" G))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.disj"
###         ("\<^const>CoCallGraph.notInCC" ("_position" v) ("_position" v)
###           ("_position" G))
###         ("\<^const>HOL.Not" ("_applC" ("_position" isVal) ("_position" e))))
###       ("\<^const>CoCallGraph.cc_restr_sym"
###         ("_applC"
###           ("\<^const>local.ccExp_bot_syn"
###             ("_applC" ("_position" ae) ("_position" v)))
###           ("_position" e))
###         ("_applC" ("_position" fv) ("_position" e)))
###       ("\<^const>Power.power_class.power2"
###         ("_applC" ("_position" fv) ("_position" e))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Cfun.cfun.Rep_cfun"
###       ("_applC" ("_position" ccBind)
###         ("_cargs" ("_position" v) ("_position" e)))
###       ("_tuple" ("_position" ae) ("_tuple_arg" ("_position" G))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.disj"
###         ("\<^const>CoCallGraph.notInCC" ("_position" v) ("_position" v)
###           ("_position" G))
###         ("\<^const>HOL.Not" ("_applC" ("_position" isVal) ("_position" e))))
###       ("\<^const>CoCallGraph.cc_restr_sym"
###         ("_applC"
###           ("\<^const>local.ccExp_bot_syn"
###             ("_applC" ("_position" ae) ("_position" v)))
###           ("_position" e))
###         ("_applC" ("_position" fv) ("_position" e)))
###       ("\<^const>CoCallGraph.ccSquare"
###         ("_applC" ("_position" fv) ("_position" e))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.CoCallAnalysisBinds"
### 0.761s elapsed time, 0.782s cpu time, 0.030s GC time
Loading theory "Draft.CoCallFix" (required by "Draft.CoCallAnalysisImplTemplates" via "Draft.CoCallAnalysisImpl")
locale CoCallArityAnalysis
  fixes
    cccExp ::
      "exp => Arity -> (Vars.var => Arity\<^sub>\<bottom>) * CoCalls"
locale CoCallArityAnalysis
  fixes
    cccExp ::
      "exp => Arity -> (Vars.var => Arity\<^sub>\<bottom>) * CoCalls"
locale CoCallArityAnalysis
  fixes
    cccExp ::
      "exp => Arity -> (Vars.var => Arity\<^sub>\<bottom>) * CoCalls"
locale CoCallArityAnalysis
  fixes
    cccExp ::
      "exp => Arity -> (Vars.var => Arity\<^sub>\<bottom>) * CoCalls"
### theory "Draft.CoCallFix"
### 0.674s elapsed time, 0.702s cpu time, 0.040s GC time
Loading theory "Draft.CoCallAnalysisImpl" (required by "Draft.CoCallAnalysisImplTemplates")
Found termination order: "{}"
locale CoCallAnalysisImpl
### Ambiguous input (line 218 of "$AFP/Call_Arity/CoCallAnalysisImpl.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>CoCallAnalysisImpl.CoCallAnalysisImpl.ccExp_syn''"
###         ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>Terms.Lam" ("_position" x) ("_position" e)))
###     ("\<^const>CoCallGraph.ccSquare"
###       ("_applC" ("_position" fv)
###         ("\<^const>Terms.Lam" ("_position" x) ("_position" e))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>CoCallAnalysisImpl.CoCallAnalysisImpl.ccExp_syn''"
###         ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>Terms.Lam" ("_position" x) ("_position" e)))
###     ("\<^const>Power.power_class.power2"
###       ("_applC" ("_position" fv)
###         ("\<^const>Terms.Lam" ("_position" x) ("_position" e))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Replacing existing raw equivariance theorem for "Aheap".
### Replacing existing raw equivariance theorem for "Aheap".
### theory "Draft.CoCallAnalysisImpl"
### 0.979s elapsed time, 1.076s cpu time, 0.138s GC time
Loading theory "Draft.CoCallAnalysisImplTemplates"
val templateLemmas =
   [("CoCallAnalysisImpl.combined_restrict_cont",
     "cont (combined_restrict ?S)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("CoCallAnalysisImpl.fst_combined_restrict",
     "fst (combined_restrict ?S ?p) = fst ?p f|` ?S",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("CoCallAnalysisImpl.snd_combined_restrict",
     "snd (combined_restrict ?S ?p) = snd ?p G|` ?S",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("CoCallAnalysisImpl.predCC_eqvt",
     "?\<pi> \<bullet> predCC ?S ?f =
      predCC (?\<pi> \<bullet> ?S) (?\<pi> \<bullet> ?f)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("CoCallAnalysisImpl.combined_restrict_eqvt",
     "?\<pi> \<bullet> combined_restrict ?S ?p =
      combined_restrict (?\<pi> \<bullet> ?S) (?\<pi> \<bullet> ?p)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("CoCallAnalysisImpl.cc_restr_predCC'",
     "predCC ?S ?f$?n G|` ?S = predCC ?S ?f$?n",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("CoCallAnalysisImpl.combined_restrict_perm",
     "[| supp ?\<pi> \<sharp>* ?S; finite ?S |]
      ==> combined_restrict ?S (?\<pi> \<bullet> ?p) =
          combined_restrict ?S ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 2)),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("CoCallAnalysisImpl.predCC_eq",
     "predCC ?S ?f$?a =
      (if ?a ~= 0 then ?f$(pred$?a) G|` ?S else ?S\<^sup>2)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_hole 4))),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_app (template_hole 9, template_var 1),
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_var 0)))),
             template_app (template_hole 0, template_var 2))
           ))),
    ("CoCallAnalysisImpl.cc_restr_predCC",
     "predCC ?S' ?f$?n G|` ?S =
      predCC (?S' Int ?S) (LAM n. ?f$n G|` ?S)$?n",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 3),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 3)),
             template_app (template_hole 0, t_empty))),
         template_var 0)))]:
   (string * thm * template) list
### theory "Draft.CoCallAnalysisImplTemplates"
### 0.625s elapsed time, 0.801s cpu time, 0.075s GC time
val it = (): unit
