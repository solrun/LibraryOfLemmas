Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ArityTransformTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ArityTransformTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.ArityTransformTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Tree" (required by "Draft.ArityTransformTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.149s elapsed time, 0.615s cpu time, 0.050s GC time
Loading theory "Draft.Arity" (required by "Draft.ArityTransformTemplates" via "Draft.ArityTransform" via "Draft.ArityAnalysisSig" via "Draft.AEnv")
### theory "HOL-Library.Set_Algebras"
### 0.213s elapsed time, 0.874s cpu time, 0.050s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ArityTransformTemplates" via "Draft.ExtrEqs")
instantiation
  Arity :: po
  below_Arity == below :: Arity => Arity => bool
instantiation
  Arity :: zero
  zero_Arity == zero_class.zero :: Arity
instantiation
  Arity :: one
  one_Arity == one_class.one :: Arity
### theory "Draft.Arity"
### 0.227s elapsed time, 0.893s cpu time, 0.086s GC time
Loading theory "Draft.EtaExpansion" (required by "Draft.ArityTransformTemplates" via "Draft.ArityTransform" via "Draft.ArityEtaExpansionSafe" via "Draft.EtaExpansionSafe")
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### theory "Draft.EtaExpansion"
### 0.100s elapsed time, 0.400s cpu time, 0.000s GC time
Loading theory "Draft.SestoftConf" (required by "Draft.ArityTransformTemplates" via "Draft.ArityTransform" via "Draft.ArityEtaExpansionSafe" via "Draft.EtaExpansionSafe" via "Draft.Sestoft")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.921s elapsed time, 3.640s cpu time, 0.378s GC time
Loading theory "Draft.AEnv" (required by "Draft.ArityTransformTemplates" via "Draft.ArityTransform" via "Draft.ArityAnalysisSig")
Found termination order: "size <*mlex*> {}"
instantiation
  stack_elem :: pt
  permute_stack_elem == permute :: perm => stack_elem => stack_elem
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.177s elapsed time, 4.476s cpu time, 0.964s GC time
Loading theory "Draft.Arity-Nominal" (required by "Draft.ArityTransformTemplates" via "Draft.ArityTransform" via "Draft.ArityAnalysisSig")
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.AEnv"
### 0.839s elapsed time, 3.167s cpu time, 0.727s GC time
Loading theory "Draft.TransformTools" (required by "Draft.ArityTransformTemplates" via "Draft.ArityTransform" via "Draft.AbstractTransform")
Found termination order: "size_list size <*mlex*> {}"
Proofs for inductive predicate(s) "boring_step"
  Proving monotonicity ...
instantiation
  Arity :: pure
  permute_Arity == permute :: perm => Arity => Arity
### theory "Draft.Arity-Nominal"
### 0.511s elapsed time, 2.011s cpu time, 0.174s GC time
Loading theory "Draft.ArityAnalysisSig" (required by "Draft.ArityTransformTemplates" via "Draft.ArityTransform")
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "invariant"
  Proving monotonicity ...
Found termination order: "{}"
Found termination order: "{}"
### theory "HOL-Library.Tree"
### 2.233s elapsed time, 8.664s cpu time, 1.322s GC time
Loading theory "Draft.Templates" (required by "Draft.ArityTransformTemplates" via "Draft.ExtrEqs")
### theory "Draft.SestoftConf"
### 1.775s elapsed time, 6.832s cpu time, 1.111s GC time
Loading theory "Draft.ArityStack" (required by "Draft.ArityTransformTemplates" via "Draft.ArityTransform" via "Draft.ArityEtaExpansionSafe")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.067s elapsed time, 0.269s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ArityTransformTemplates")
Found termination order: "{}"
locale supp_bounded_transform
  fixes trans :: "'a => exp => exp"
  assumes "supp_bounded_transform trans"
locale ArityAnalysis
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
locale ArityAnalysisHeap
  fixes
    Aheap ::
      "(Vars.var * exp) list
       => exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
### theory "Draft.TransformTools"
### 0.829s elapsed time, 3.244s cpu time, 0.376s GC time
Loading theory "Draft.Sestoft" (required by "Draft.ArityTransformTemplates" via "Draft.ArityTransform" via "Draft.ArityEtaExpansionSafe" via "Draft.EtaExpansionSafe")
locale EdomArityAnalysis
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "EdomArityAnalysis Aexp"
locale ArityAnalysisHeapEqvt
  fixes
    Aheap ::
      "(Vars.var * exp) list
       => exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "ArityAnalysisHeapEqvt Aheap"
### theory "Draft.ArityAnalysisSig"
### 0.715s elapsed time, 2.809s cpu time, 0.293s GC time
Loading theory "Draft.AbstractTransform" (required by "Draft.ArityTransformTemplates" via "Draft.ArityTransform")
Proofs for inductive predicate(s) "step"
  Proving monotonicity ...
locale AbstractAnalProp
  fixes PropApp :: "'a => 'a"
    and PropLam :: "'a => 'a"
    and AnalLet :: "(Vars.var * exp) list => exp => 'a => 'b"
    and PropLetBody :: "'b => 'a"
    and PropLetHeap :: "'b => Vars.var => 'a\<^sub>\<bottom>"
    and PropIfScrut :: "'a => 'a"
  assumes
    "AbstractAnalProp PropApp PropLam AnalLet PropLetBody PropLetHeap
      PropIfScrut"
locale AbstractAnalPropSubst
  fixes PropApp :: "'a => 'a"
    and PropLam :: "'a => 'a"
    and AnalLet :: "(Vars.var * exp) list => exp => 'a => 'b"
    and PropLetBody :: "'b => 'a"
    and PropLetHeap :: "'b => Vars.var => 'a\<^sub>\<bottom>"
    and PropIfScrut :: "'a => 'a"
  assumes
    "AbstractAnalPropSubst PropApp PropLam AnalLet PropLetBody PropLetHeap
      PropIfScrut"
locale AbstractTransform
  fixes PropApp :: "'a => 'a"
    and PropLam :: "'a => 'a"
    and AnalLet :: "(Vars.var * exp) list => exp => 'a => 'b"
    and PropLetBody :: "'b => 'a"
    and PropLetHeap :: "'b => Vars.var => 'a\<^sub>\<bottom>"
    and PropIfScrut :: "'a => 'a"
    and TransVar :: "'a => Vars.var => exp"
    and TransApp :: "'a => exp => Vars.var => exp"
    and TransLam :: "'a => Vars.var => exp => exp"
    and TransLet :: "'b => (Vars.var * exp) list => exp => exp"
  assumes
    "AbstractTransform PropApp PropLam AnalLet PropLetBody PropLetHeap
      PropIfScrut TransVar TransApp TransLam TransLet"
### theory "Draft.Sestoft"
### 0.226s elapsed time, 0.882s cpu time, 0.092s GC time
Loading theory "Draft.EtaExpansionSafe" (required by "Draft.ArityTransformTemplates" via "Draft.ArityTransform" via "Draft.ArityEtaExpansionSafe")
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.ArityStack"
### 0.685s elapsed time, 2.680s cpu time, 0.324s GC time
Loading theory "Draft.ArityEtaExpansion" (required by "Draft.ArityTransformTemplates" via "Draft.ArityTransform" via "Draft.ArityEtaExpansionSafe")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.734s elapsed time, 2.872s cpu time, 0.324s GC time
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.EtaExpansionSafe"
### 0.322s elapsed time, 1.241s cpu time, 0.143s GC time
locale AbstractTransformSubst
  fixes PropApp :: "'a => 'a"
    and PropLam :: "'a => 'a"
    and AnalLet :: "(Vars.var * exp) list => exp => 'a => 'b"
    and PropLetBody :: "'b => 'a"
    and PropLetHeap :: "'b => Vars.var => 'a\<^sub>\<bottom>"
    and PropIfScrut :: "'a => 'a"
    and TransVar :: "'a => Vars.var => exp"
    and TransApp :: "'a => exp => Vars.var => exp"
    and TransLam :: "'a => Vars.var => exp => exp"
    and TransLet :: "'b => (Vars.var * exp) list => exp => exp"
  assumes
    "AbstractTransformSubst PropApp PropLam AnalLet PropLetBody PropLetHeap
      PropIfScrut TransVar TransApp TransLam TransLet"
locale AbstractTransformBound
  fixes PropApp :: "'a => 'a"
    and PropLam :: "'a => 'a"
    and AnalLet :: "(Vars.var * exp) list => exp => 'a => 'b"
    and PropLetBody :: "'b => 'a"
    and PropLetHeap :: "'b => Vars.var => 'a\<^sub>\<bottom>"
    and PropIfScrut :: "'a => 'a"
    and trans :: "'c => exp => exp"
    and PropLetHeapTrans :: "'b => Vars.var => 'c\<^sub>\<bottom>"
  assumes
    "AbstractTransformBound PropApp PropLam AnalLet PropLetBody PropLetHeap
      PropIfScrut trans PropLetHeapTrans"
### theory "Draft.ArityEtaExpansion"
### 0.551s elapsed time, 1.453s cpu time, 0.119s GC time
Loading theory "Draft.ArityEtaExpansionSafe" (required by "Draft.ArityTransformTemplates" via "Draft.ArityTransform")
locale AbstractTransformBoundSubst
  fixes PropApp :: "'a => 'a"
    and PropLam :: "'a => 'a"
    and AnalLet :: "(Vars.var * exp) list => exp => 'a => 'b"
    and PropLetBody :: "'b => 'a"
    and PropLetHeap :: "'b => Vars.var => 'a\<^sub>\<bottom>"
    and PropIfScrut :: "'a => 'a"
    and trans :: "'c => exp => exp"
    and PropLetHeapTrans :: "'b => Vars.var => 'c\<^sub>\<bottom>"
  assumes
    "AbstractTransformBoundSubst PropApp PropLam AnalLet PropLetBody
      PropLetHeap PropIfScrut trans PropLetHeapTrans"
### theory "Draft.AbstractTransform"
### 0.906s elapsed time, 2.798s cpu time, 0.284s GC time
### theory "Draft.ArityEtaExpansionSafe"
### 0.475s elapsed time, 0.539s cpu time, 0.051s GC time
Loading theory "Draft.ArityTransform" (required by "Draft.ArityTransformTemplates")
locale ArityAnalysisHeapEqvt
  fixes
    Aheap ::
      "(Vars.var * exp) list
       => exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "ArityAnalysisHeapEqvt Aheap"
### theory "Draft.ArityTransform"
### 0.495s elapsed time, 0.495s cpu time, 0.000s GC time
Loading theory "Draft.ArityTransformTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.ArityTransformTemplates"
### 0.641s elapsed time, 0.817s cpu time, 0.110s GC time
val it = (): unit
