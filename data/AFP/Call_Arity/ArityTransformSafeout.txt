Loading theory "Draft.ConstOn" (required by "Draft.ArityTransformSafeTemplates" via "Draft.ArityTransformSafe")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ArityTransformSafeTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ArityTransformSafeTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.ArityTransformSafeTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
### theory "Draft.ConstOn"
### 0.048s elapsed time, 0.228s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ArityTransformSafeTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.134s elapsed time, 0.551s cpu time, 0.050s GC time
Loading theory "Draft.Arity" (required by "Draft.ArityTransformSafeTemplates" via "Draft.ArityTransformSafe" via "Draft.ArityTransform" via "Draft.ArityAnalysisSig" via "Draft.AEnv")
instantiation
  Arity :: po
  below_Arity == below :: Arity => Arity => bool
### theory "HOL-Library.Set_Algebras"
### 0.231s elapsed time, 0.941s cpu time, 0.050s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ArityTransformSafeTemplates" via "Draft.ExtrEqs")
instantiation
  Arity :: zero
  zero_Arity == zero_class.zero :: Arity
instantiation
  Arity :: one
  one_Arity == one_class.one :: Arity
### theory "Draft.Arity"
### 0.221s elapsed time, 0.863s cpu time, 0.112s GC time
Loading theory "Draft.EtaExpansion" (required by "Draft.ArityTransformSafeTemplates" via "Draft.ArityTransformSafe" via "Draft.ArityTransform" via "Draft.ArityEtaExpansionSafe" via "Draft.EtaExpansionSafe")
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### theory "Draft.EtaExpansion"
### 0.110s elapsed time, 0.446s cpu time, 0.000s GC time
Loading theory "Draft.SestoftConf" (required by "Draft.ArityTransformSafeTemplates" via "Draft.ArityTransformSafe" via "Draft.ArityTransform" via "Draft.ArityEtaExpansionSafe" via "Draft.EtaExpansionSafe" via "Draft.Sestoft")
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
instantiation
  stack_elem :: pt
  permute_stack_elem == permute :: perm => stack_elem => stack_elem
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.929s elapsed time, 3.667s cpu time, 0.366s GC time
Loading theory "Draft.AEnv" (required by "Draft.ArityTransformSafeTemplates" via "Draft.ArityTransformSafe" via "Draft.ArityTransform" via "Draft.ArityAnalysisSig")
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.087s elapsed time, 4.134s cpu time, 0.885s GC time
Loading theory "Draft.Arity-Nominal" (required by "Draft.ArityTransformSafeTemplates" via "Draft.ArityTransformSafe" via "Draft.ArityTransform" via "Draft.ArityAnalysisSig")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Proofs for inductive predicate(s) "boring_step"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "Draft.AEnv"
### 0.864s elapsed time, 3.265s cpu time, 0.715s GC time
Loading theory "Draft.TransformTools" (required by "Draft.ArityTransformSafeTemplates" via "Draft.ArityTransformSafe" via "Draft.ArityTransform" via "Draft.AbstractTransform")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  Arity :: pure
  permute_Arity == permute :: perm => Arity => Arity
### theory "Draft.Arity-Nominal"
### 0.522s elapsed time, 2.053s cpu time, 0.146s GC time
Loading theory "Draft.ArityAnalysisSig" (required by "Draft.ArityTransformSafeTemplates" via "Draft.ArityTransformSafe" via "Draft.ArityTransform")
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "invariant"
  Proving monotonicity ...
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.SestoftConf"
### 1.633s elapsed time, 6.287s cpu time, 0.981s GC time
Loading theory "Draft.ArityStack" (required by "Draft.ArityTransformSafeTemplates" via "Draft.ArityTransformSafe" via "Draft.ArityTransform" via "Draft.ArityEtaExpansionSafe")
### theory "HOL-Library.Tree"
### 2.234s elapsed time, 8.644s cpu time, 1.200s GC time
Loading theory "Draft.Templates" (required by "Draft.ArityTransformSafeTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.089s elapsed time, 0.339s cpu time, 0.075s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ArityTransformSafeTemplates")
Found termination order: "{}"
locale ArityAnalysis
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
locale ArityAnalysisHeap
  fixes
    Aheap ::
      "(Vars.var * exp) list
       => exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
locale EdomArityAnalysis
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "EdomArityAnalysis Aexp"
locale ArityAnalysisHeapEqvt
  fixes
    Aheap ::
      "(Vars.var * exp) list
       => exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "ArityAnalysisHeapEqvt Aheap"
### theory "Draft.ArityAnalysisSig"
### 0.717s elapsed time, 2.809s cpu time, 0.257s GC time
Loading theory "Draft.Sestoft" (required by "Draft.ArityTransformSafeTemplates" via "Draft.ArityTransformSafe" via "Draft.ArityTransform" via "Draft.ArityEtaExpansionSafe" via "Draft.EtaExpansionSafe")
locale supp_bounded_transform
  fixes trans :: "'a => exp => exp"
  assumes "supp_bounded_transform trans"
### theory "Draft.TransformTools"
### 0.801s elapsed time, 3.144s cpu time, 0.257s GC time
Loading theory "Draft.ArityAnalysisAbinds" (required by "Draft.ArityTransformSafeTemplates" via "Draft.ArityTransformSafe" via "Draft.ArityConsistent" via "Draft.ArityAnalysisSpec")
Proofs for inductive predicate(s) "step"
  Proving monotonicity ...
locale ArityAnalysis
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.ArityStack"
### 0.672s elapsed time, 2.629s cpu time, 0.262s GC time
Loading theory "Draft.ArityAnalysisStack" (required by "Draft.ArityTransformSafeTemplates" via "Draft.ArityTransformSafe" via "Draft.ArityConsistent")
### theory "Draft.Sestoft"
### 0.219s elapsed time, 0.851s cpu time, 0.067s GC time
Loading theory "Draft.EtaExpansionSafe" (required by "Draft.ArityTransformSafeTemplates" via "Draft.ArityTransformSafe" via "Draft.ArityTransform" via "Draft.ArityEtaExpansionSafe")
Found termination order: "size_list size <*mlex*> {}"
locale EdomArityAnalysis
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "EdomArityAnalysis Aexp"
### theory "Draft.ArityAnalysisAbinds"
### 0.369s elapsed time, 1.444s cpu time, 0.124s GC time
Loading theory "Draft.ArityAnalysisSpec" (required by "Draft.ArityTransformSafeTemplates" via "Draft.ArityTransformSafe" via "Draft.ArityConsistent")
locale SubstArityAnalysis
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "SubstArityAnalysis Aexp"
Found termination order: "size_list size <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.724s elapsed time, 2.839s cpu time, 0.251s GC time
Loading theory "Draft.AbstractTransform" (required by "Draft.ArityTransformSafeTemplates" via "Draft.ArityTransformSafe" via "Draft.ArityTransform")
### theory "Draft.EtaExpansionSafe"
### 0.321s elapsed time, 1.253s cpu time, 0.122s GC time
Loading theory "Draft.ArityEtaExpansion" (required by "Draft.ArityTransformSafeTemplates" via "Draft.ArityTransformSafe" via "Draft.ArityTransform" via "Draft.ArityEtaExpansionSafe")
locale ArityAnalysisSafe
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "ArityAnalysisSafe Aexp"
locale AbstractAnalProp
  fixes PropApp :: "'a => 'a"
    and PropLam :: "'a => 'a"
    and AnalLet :: "(Vars.var * exp) list => exp => 'a => 'b"
    and PropLetBody :: "'b => 'a"
    and PropLetHeap :: "'b => Vars.var => 'a\<^sub>\<bottom>"
    and PropIfScrut :: "'a => 'a"
  assumes
    "AbstractAnalProp PropApp PropLam AnalLet PropLetBody PropLetHeap
      PropIfScrut"
locale ArityAnalysisHeapSafe
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
    and
    Aheap ::
      "(Vars.var * exp) list
       => exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "ArityAnalysisHeapSafe Aexp Aheap"
locale ArityAnalysis
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
locale AbstractAnalPropSubst
  fixes PropApp :: "'a => 'a"
    and PropLam :: "'a => 'a"
    and AnalLet :: "(Vars.var * exp) list => exp => 'a => 'b"
    and PropLetBody :: "'b => 'a"
    and PropLetHeap :: "'b => Vars.var => 'a\<^sub>\<bottom>"
    and PropIfScrut :: "'a => 'a"
  assumes
    "AbstractAnalPropSubst PropApp PropLam AnalLet PropLetBody PropLetHeap
      PropIfScrut"
locale ArityAnalysisLetSafe
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
    and
    Aheap ::
      "(Vars.var * exp) list
       => exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "ArityAnalysisLetSafe Aexp Aheap"
locale AbstractTransform
  fixes PropApp :: "'a => 'a"
    and PropLam :: "'a => 'a"
    and AnalLet :: "(Vars.var * exp) list => exp => 'a => 'b"
    and PropLetBody :: "'b => 'a"
    and PropLetHeap :: "'b => Vars.var => 'a\<^sub>\<bottom>"
    and PropIfScrut :: "'a => 'a"
    and TransVar :: "'a => Vars.var => exp"
    and TransApp :: "'a => exp => Vars.var => exp"
    and TransLam :: "'a => Vars.var => exp => exp"
    and TransLet :: "'b => (Vars.var * exp) list => exp => exp"
  assumes
    "AbstractTransform PropApp PropLam AnalLet PropLetBody PropLetHeap
      PropIfScrut TransVar TransApp TransLam TransLet"
locale ArityAnalysisLetSafeNoCard
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
    and
    Aheap ::
      "(Vars.var * exp) list
       => exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "ArityAnalysisLetSafeNoCard Aexp Aheap"
locale SubstArityAnalysis
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "SubstArityAnalysis Aexp"
locale ArityAnalysisSafe
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "ArityAnalysisSafe Aexp"
locale ArityAnalysisLetSafe
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
    and
    Aheap ::
      "(Vars.var * exp) list
       => exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "ArityAnalysisLetSafe Aexp Aheap"
### theory "Draft.ArityAnalysisSpec"
### 0.348s elapsed time, 1.362s cpu time, 0.126s GC time
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
locale EdomArityAnalysis
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "EdomArityAnalysis Aexp"
### theory "Draft.ArityAnalysisStack"
### 0.641s elapsed time, 2.510s cpu time, 0.183s GC time
Loading theory "Draft.ArityConsistent" (required by "Draft.ArityTransformSafeTemplates" via "Draft.ArityTransformSafe")
locale AbstractTransformSubst
  fixes PropApp :: "'a => 'a"
    and PropLam :: "'a => 'a"
    and AnalLet :: "(Vars.var * exp) list => exp => 'a => 'b"
    and PropLetBody :: "'b => 'a"
    and PropLetHeap :: "'b => Vars.var => 'a\<^sub>\<bottom>"
    and PropIfScrut :: "'a => 'a"
    and TransVar :: "'a => Vars.var => exp"
    and TransApp :: "'a => exp => Vars.var => exp"
    and TransLam :: "'a => Vars.var => exp => exp"
    and TransLet :: "'b => (Vars.var * exp) list => exp => exp"
  assumes
    "AbstractTransformSubst PropApp PropLam AnalLet PropLetBody PropLetHeap
      PropIfScrut TransVar TransApp TransLam TransLet"
locale AbstractTransformBound
  fixes PropApp :: "'a => 'a"
    and PropLam :: "'a => 'a"
    and AnalLet :: "(Vars.var * exp) list => exp => 'a => 'b"
    and PropLetBody :: "'b => 'a"
    and PropLetHeap :: "'b => Vars.var => 'a\<^sub>\<bottom>"
    and PropIfScrut :: "'a => 'a"
    and trans :: "'c => exp => exp"
    and PropLetHeapTrans :: "'b => Vars.var => 'c\<^sub>\<bottom>"
  assumes
    "AbstractTransformBound PropApp PropLam AnalLet PropLetBody PropLetHeap
      PropIfScrut trans PropLetHeapTrans"
### theory "Draft.ArityEtaExpansion"
### 0.611s elapsed time, 2.107s cpu time, 0.122s GC time
Loading theory "Draft.ArityEtaExpansionSafe" (required by "Draft.ArityTransformSafeTemplates" via "Draft.ArityTransformSafe" via "Draft.ArityTransform")
locale ArityAnalysisLetSafe
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
    and
    Aheap ::
      "(Vars.var * exp) list
       => exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "ArityAnalysisLetSafe Aexp Aheap"
Proofs for inductive predicate(s) "stack_consistent"
  Proving monotonicity ...
locale AbstractTransformBoundSubst
  fixes PropApp :: "'a => 'a"
    and PropLam :: "'a => 'a"
    and AnalLet :: "(Vars.var * exp) list => exp => 'a => 'b"
    and PropLetBody :: "'b => 'a"
    and PropLetHeap :: "'b => Vars.var => 'a\<^sub>\<bottom>"
    and PropIfScrut :: "'a => 'a"
    and trans :: "'c => exp => exp"
    and PropLetHeapTrans :: "'b => Vars.var => 'c\<^sub>\<bottom>"
  assumes
    "AbstractTransformBoundSubst PropApp PropLam AnalLet PropLetBody
      PropLetHeap PropIfScrut trans PropLetHeapTrans"
### theory "Draft.AbstractTransform"
### 0.901s elapsed time, 2.989s cpu time, 0.214s GC time
Proofs for inductive predicate(s) "a_consistent"
  Proving monotonicity ...
### theory "Draft.ArityConsistent"
### 0.704s elapsed time, 2.004s cpu time, 0.153s GC time
### theory "Draft.ArityEtaExpansionSafe"
### 0.585s elapsed time, 1.300s cpu time, 0.125s GC time
Loading theory "Draft.ArityTransform" (required by "Draft.ArityTransformSafeTemplates" via "Draft.ArityTransformSafe")
locale ArityAnalysisHeapEqvt
  fixes
    Aheap ::
      "(Vars.var * exp) list
       => exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "ArityAnalysisHeapEqvt Aheap"
### theory "Draft.ArityTransform"
### 0.524s elapsed time, 0.525s cpu time, 0.000s GC time
Loading theory "Draft.ArityTransformSafe" (required by "Draft.ArityTransformSafeTemplates")
locale CardinalityArityTransformation
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
    and
    Aheap ::
      "(Vars.var * exp) list
       => exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "CardinalityArityTransformation Aexp Aheap"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Proofs for inductive predicate(s) "consistent"
  Proving monotonicity ...
### theory "Draft.ArityTransformSafe"
### 0.939s elapsed time, 1.022s cpu time, 0.096s GC time
Loading theory "Draft.ArityTransformSafeTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.ArityTransformSafeTemplates"
### 0.672s elapsed time, 0.833s cpu time, 0.066s GC time
val it = (): unit
