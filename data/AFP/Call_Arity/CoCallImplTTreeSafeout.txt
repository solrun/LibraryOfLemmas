Loading theory "Draft.List-Interleavings" (required by "Draft.CoCallImplTTreeSafeTemplates" via "Draft.CoCallImplTTreeSafe" via "Draft.CoCallImplTTree" via "Draft.TTreeAnalysisSig" via "Draft.TTree-HOLCF" via "Draft.TTree")
Loading theory "HOL-Library.Stream" (required by "Draft.CoCallImplTTreeSafeTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.CoCallImplTTreeSafeTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.ConstOn" (required by "Draft.CoCallImplTTreeSafeTemplates" via "Draft.CoCallImplTTreeSafe" via "Draft.CoCallImplTTree" via "Draft.TTreeAnalysisSig" via "Draft.TTree-HOLCF" via "Draft.TTree")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
Proofs for inductive predicate(s) "interleave'"
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
  Proving monotonicity ...
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Draft.ConstOn"
### 0.060s elapsed time, 0.265s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.CoCallImplTTreeSafeTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.133s elapsed time, 0.538s cpu time, 0.044s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.CoCallImplTTreeSafeTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "Draft.List-Interleavings"
### 0.262s elapsed time, 1.058s cpu time, 0.044s GC time
Loading theory "Draft.TTree" (required by "Draft.CoCallImplTTreeSafeTemplates" via "Draft.CoCallImplTTreeSafe" via "Draft.CoCallImplTTree" via "Draft.TTreeAnalysisSig" via "Draft.TTree-HOLCF")
### theory "HOL-Library.Set_Algebras"
### 0.308s elapsed time, 1.198s cpu time, 0.129s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.CoCallImplTTreeSafeTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.930s elapsed time, 3.680s cpu time, 0.328s GC time
Loading theory "Draft.Set-Cpo" (required by "Draft.CoCallImplTTreeSafeTemplates" via "Draft.CoCallImplTTreeSafe" via "Draft.CoCallImplTTree" via "Draft.TTreeAnalysisSig" via "Draft.TTree-HOLCF")
instantiation
  set :: (type) below
  below_set == below :: 'a set => 'a set => bool
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd (snd (snd p)))) <*mlex*> {}"
### theory "Draft.Set-Cpo"
### 0.237s elapsed time, 0.798s cpu time, 0.535s GC time
Loading theory "Draft.Arity" (required by "Draft.CoCallImplTTreeSafeTemplates" via "Draft.CoCallImplTTreeSafe" via "Draft.CoCallImplTTree" via "Draft.TTreeAnalysisSig")
Found termination order: "size <*mlex*> {}"
### Ignoring conversion rule for operator Set.member
### Ignoring conversion rule for operator Set.member
instantiation
  Arity :: po
  below_Arity == below :: Arity => Arity => bool
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.950s elapsed time, 3.608s cpu time, 0.796s GC time
Loading theory "Draft.Env-Set-Cpo" (required by "Draft.CoCallImplTTreeSafeTemplates" via "Draft.CoCallImplTTreeSafe" via "Draft.CoCallImplTTree")
instantiation
  Arity :: zero
  zero_Arity == zero_class.zero :: Arity
instantiation
  Arity :: one
  one_Arity == one_class.one :: Arity
Proofs for inductive predicate(s) "substitute''"
  Proving monotonicity ...
### theory "Draft.Arity"
### 0.254s elapsed time, 0.987s cpu time, 0.193s GC time
Loading theory "Draft.AEnv" (required by "Draft.CoCallImplTTreeSafeTemplates" via "Draft.CoCallImplTTreeSafe" via "Draft.CoCallImplTTree" via "Draft.CoCallAritySig" via "Draft.ArityAnalysisSig")
Found termination order: "size <*mlex*> {}"
### theory "Draft.TTree"
### 1.185s elapsed time, 4.507s cpu time, 1.013s GC time
Loading theory "Draft.AnalBinds" (required by "Draft.CoCallImplTTreeSafeTemplates" via "Draft.CoCallImplTTreeSafe" via "Draft.CoCallImplTTree" via "Draft.TTreeAnalysisSig")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Env-Set-Cpo"
### 0.257s elapsed time, 1.005s cpu time, 0.131s GC time
Loading theory "Draft.Cardinality-Domain" (required by "Draft.CoCallImplTTreeSafeTemplates" via "Draft.CoCallImplTTreeSafe" via "Draft.TTreeAnalysisSpec" via "Draft.Cardinality-Domain-Lists")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Cardinality-Domain"
### 0.122s elapsed time, 0.481s cpu time, 0.128s GC time
Loading theory "Draft.CoCallGraph" (required by "Draft.CoCallImplTTreeSafeTemplates" via "Draft.CoCallImplTTreeSafe" via "Draft.CoCallImplTTree" via "Draft.CoCallAritySig" via "Draft.CoCallAnalysisSig")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale ExpAnalysis
  fixes exp :: "exp => 'a -> 'b"
Found termination order: "size <*mlex*> {}"
### theory "Draft.AEnv"
### 0.682s elapsed time, 2.682s cpu time, 0.321s GC time
Loading theory "Draft.TTree-HOLCF" (required by "Draft.CoCallImplTTreeSafeTemplates" via "Draft.CoCallImplTTreeSafe" via "Draft.CoCallImplTTree" via "Draft.TTreeAnalysisSig")
### Additional type variable(s) in specification of "AnalBinds_rel": 'a
### Additional type variable(s) in specification of "AnalBinds_dom": 'a
Found termination order: "size_list (%p. size (snd p)) <*mlex*> {}"
### theory "Draft.AnalBinds"
### 0.747s elapsed time, 2.952s cpu time, 0.321s GC time
Loading theory "Draft.Arity-Nominal" (required by "Draft.CoCallImplTTreeSafeTemplates" via "Draft.CoCallImplTTreeSafe" via "Draft.CoCallImplTTree" via "Draft.CoCallAritySig" via "Draft.ArityAnalysisSig")
### theory "HOL-Library.Tree"
### 2.167s elapsed time, 8.388s cpu time, 1.409s GC time
Loading theory "Draft.Templates" (required by "Draft.CoCallImplTTreeSafeTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.064s elapsed time, 0.256s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.CoCallImplTTreeSafeTemplates")
instantiation
  CoCalls :: po
  below_CoCalls == below :: CoCalls => CoCalls => bool
instantiation
  Arity :: pure
  permute_Arity == permute :: perm => Arity => Arity
### theory "Draft.Arity-Nominal"
### 0.514s elapsed time, 2.020s cpu time, 0.235s GC time
Loading theory "Draft.ArityAnalysisSig" (required by "Draft.CoCallImplTTreeSafeTemplates" via "Draft.CoCallImplTTreeSafe" via "Draft.CoCallImplTTree" via "Draft.CoCallAritySig")
### Ambiguous input (line 284 of "$AFP/Call_Arity/CoCallGraph.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>ccSquare" ("_position" S))
###     ("_applC" ("_position" ccProd)
###       ("_cargs" ("_position" S) ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^const>Power.power_class.power2" ("_position" S))
###     ("_applC" ("_position" ccProd)
###       ("_cargs" ("_position" S) ("_position" S)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  ttree :: (type) below
  below_ttree == below :: 'a ttree => 'a ttree => bool
### Ambiguous input (line 286 of "$AFP/Call_Arity/CoCallGraph.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ccField)
###       ("\<^const>CoCallGraph.ccSquare" ("_position" S)))
###     ("_position" S)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ccField)
###       ("\<^const>Power.power_class.power2" ("_position" S)))
###     ("_position" S)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 289 of "$AFP/Call_Arity/CoCallGraph.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Porder.below_class.below" ("_position" G)
###       ("\<^const>Power.power_class.power2" ("_position" S)))
###     ("\<^const>Set.subset_eq"
###       ("_applC" ("_position" ccField) ("_position" G)) ("_position" S))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Porder.below_class.below" ("_position" G)
###       ("\<^const>CoCallGraph.ccSquare" ("_position" S)))
###     ("\<^const>Set.subset_eq"
###       ("_applC" ("_position" ccField) ("_position" G)) ("_position" S))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 292 of "$AFP/Call_Arity/CoCallGraph.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>CoCallGraph.cc_restr_sym"
###       ("\<^const>CoCallGraph.ccSquare" ("_position" S')) ("_position" S))
###     ("\<^const>CoCallGraph.ccSquare"
###       ("\<^const>Set.inter" ("_position" S') ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>CoCallGraph.cc_restr_sym"
###       ("\<^const>Power.power_class.power2" ("_position" S'))
###       ("_position" S))
###     ("\<^const>CoCallGraph.ccSquare"
###       ("\<^const>Set.inter" ("_position" S') ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>CoCallGraph.cc_restr_sym"
###       ("\<^const>CoCallGraph.ccSquare" ("_position" S')) ("_position" S))
###     ("\<^const>Power.power_class.power2"
###       ("\<^const>Set.inter" ("_position" S') ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>CoCallGraph.cc_restr_sym"
###       ("\<^const>Power.power_class.power2" ("_position" S'))
###       ("_position" S))
###     ("\<^const>Power.power_class.power2"
###       ("\<^const>Set.inter" ("_position" S') ("_position" S)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 295 of "$AFP/Call_Arity/CoCallGraph.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>CoCallGraph.ccSquare" ("\<^const>Set.empty"))
###     ("\<^const>Pcpo.pcpo_class.bottom")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Power.power_class.power2" ("\<^const>Set.empty"))
###     ("\<^const>Pcpo.pcpo_class.bottom")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "list_pairs"
  Proving monotonicity ...
### theory "Draft.TTree-HOLCF"
### 0.900s elapsed time, 3.545s cpu time, 0.308s GC time
Loading theory "Draft.TTreeAnalysisSig" (required by "Draft.CoCallImplTTreeSafeTemplates" via "Draft.CoCallImplTTreeSafe" via "Draft.CoCallImplTTree")
### theory "Draft.CoCallGraph"
### 1.324s elapsed time, 5.215s cpu time, 0.500s GC time
Loading theory "Draft.CoCallAnalysisSig" (required by "Draft.CoCallImplTTreeSafeTemplates" via "Draft.CoCallImplTTreeSafe" via "Draft.CoCallImplTTree" via "Draft.CoCallAritySig")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.713s elapsed time, 2.795s cpu time, 0.307s GC time
Loading theory "Draft.CoCallGraph-TTree" (required by "Draft.CoCallImplTTreeSafeTemplates" via "Draft.CoCallImplTTreeSafe" via "Draft.CoCallImplTTree")
locale ArityAnalysis
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
locale ArityAnalysisHeap
  fixes
    Aheap ::
      "(Vars.var * exp) list
       => exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
locale EdomArityAnalysis
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "EdomArityAnalysis Aexp"
locale ArityAnalysisHeapEqvt
  fixes
    Aheap ::
      "(Vars.var * exp) list
       => exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "ArityAnalysisHeapEqvt Aheap"
### theory "Draft.ArityAnalysisSig"
### 0.676s elapsed time, 2.662s cpu time, 0.240s GC time
Loading theory "Draft.ArityAnalysisAbinds" (required by "Draft.CoCallImplTTreeSafeTemplates" via "Draft.CoCallImplTTreeSafe" via "Draft.CoCallAnalysisSpec" via "Draft.ArityAnalysisSpec")
locale ArityAnalysis
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
Proofs for inductive predicate(s) "valid_listsp"
  Proving monotonicity ...
Found termination order: "size_list size <*mlex*> {}"
locale CoCallAnalysis
  fixes ccExp :: "exp => Arity -> CoCalls"
Proofs for inductive predicate(s) "valid_lists'"
locale CoCallAnalyisHeap
  fixes ccHeap :: "(Vars.var * exp) list => exp => Arity -> CoCalls"
### theory "Draft.CoCallAnalysisSig"
### 0.673s elapsed time, 2.644s cpu time, 0.305s GC time
Loading theory "Draft.CoCallAritySig" (required by "Draft.CoCallImplTTreeSafeTemplates" via "Draft.CoCallImplTTreeSafe" via "Draft.CoCallImplTTree")
  Proving monotonicity ...
### theory "Draft.CoCallGraph-TTree"
### 0.680s elapsed time, 2.664s cpu time, 0.295s GC time
Loading theory "Draft.Cardinality-Domain-Lists" (required by "Draft.CoCallImplTTreeSafeTemplates" via "Draft.CoCallImplTTreeSafe" via "Draft.TTreeAnalysisSpec")
locale EdomArityAnalysis
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "EdomArityAnalysis Aexp"
### theory "Draft.ArityAnalysisAbinds"
### 0.389s elapsed time, 1.522s cpu time, 0.203s GC time
Loading theory "Draft.ArityAnalysisSpec" (required by "Draft.CoCallImplTTreeSafeTemplates" via "Draft.CoCallImplTTreeSafe" via "Draft.CoCallAnalysisSpec")
locale TTreeAnalysis
  fixes Texp :: "exp => Arity -> Vars.var ttree"
### theory "Draft.TTreeAnalysisSig"
### 0.826s elapsed time, 3.239s cpu time, 0.370s GC time
locale SubstArityAnalysis
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "SubstArityAnalysis Aexp"
locale ArityAnalysisSafe
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "ArityAnalysisSafe Aexp"
locale ArityAnalysisHeapSafe
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
    and
    Aheap ::
      "(Vars.var * exp) list
       => exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "ArityAnalysisHeapSafe Aexp Aheap"
locale ArityAnalysisLetSafe
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
    and
    Aheap ::
      "(Vars.var * exp) list
       => exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "ArityAnalysisLetSafe Aexp Aheap"
locale ArityAnalysisLetSafeNoCard
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
    and
    Aheap ::
      "(Vars.var * exp) list
       => exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "ArityAnalysisLetSafeNoCard Aexp Aheap"
locale SubstArityAnalysis
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "SubstArityAnalysis Aexp"
locale ArityAnalysisSafe
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "ArityAnalysisSafe Aexp"
locale CoCallArity
  fixes ccExp :: "exp => Arity -> CoCalls"
    and Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
### theory "Draft.CoCallAritySig"
### 0.708s elapsed time, 2.481s cpu time, 1.242s GC time
Loading theory "Draft.CoCallImplTTree" (required by "Draft.CoCallImplTTreeSafeTemplates" via "Draft.CoCallImplTTreeSafe")
locale ArityAnalysisLetSafe
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
    and
    Aheap ::
      "(Vars.var * exp) list
       => exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "ArityAnalysisLetSafe Aexp Aheap"
### theory "Draft.ArityAnalysisSpec"
### 0.641s elapsed time, 2.211s cpu time, 1.178s GC time
Loading theory "Draft.CoCallAnalysisSpec" (required by "Draft.CoCallImplTTreeSafeTemplates" via "Draft.CoCallImplTTreeSafe")
locale CoCallArityEdom
  fixes ccExp :: "exp => Arity -> CoCalls"
    and Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "CoCallArityEdom Aexp"
locale CoCallAritySafe
  fixes ccExp :: "exp => Arity -> CoCalls"
    and Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
    and ccHeap :: "(Vars.var * exp) list => exp => Arity -> CoCalls"
    and
    Aheap ::
      "(Vars.var * exp) list
       => exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "CoCallAritySafe ccExp Aexp ccHeap Aheap"
### theory "Draft.CoCallAnalysisSpec"
### 0.309s elapsed time, 0.925s cpu time, 0.044s GC time
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Draft.Cardinality-Domain-Lists"
### 1.272s elapsed time, 3.850s cpu time, 1.276s GC time
Loading theory "Draft.TTreeAnalysisSpec" (required by "Draft.CoCallImplTTreeSafeTemplates" via "Draft.CoCallImplTTreeSafe")
locale CoCallArity
  fixes ccExp :: "exp => Arity -> CoCalls"
    and Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
### theory "Draft.CoCallImplTTree"
### 0.743s elapsed time, 1.837s cpu time, 0.098s GC time
locale TTreeAnalysisCarrier
  fixes Texp :: "exp => Arity -> Vars.var ttree"
    and Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "TTreeAnalysisCarrier Texp Aexp"
locale TTreeAnalysisSafe
  fixes Texp :: "exp => Arity -> Vars.var ttree"
    and Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "TTreeAnalysisSafe Texp Aexp"
locale TTreeAnalysisCardinalityHeap
  fixes Texp :: "exp => Arity -> Vars.var ttree"
    and Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
    and
    Aheap ::
      "(Vars.var * exp) list
       => exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
    and Theap :: "(Vars.var * exp) list => exp => Arity -> Vars.var ttree"
  assumes "TTreeAnalysisCardinalityHeap Texp Aexp Aheap Theap"
### theory "Draft.TTreeAnalysisSpec"
### 0.599s elapsed time, 0.745s cpu time, 0.039s GC time
Loading theory "Draft.CoCallImplTTreeSafe" (required by "Draft.CoCallImplTTreeSafeTemplates")
locale CoCallArityEdom
  fixes ccExp :: "exp => Arity -> CoCalls"
    and Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "CoCallArityEdom Aexp"
locale CoCallAritySafe
  fixes ccExp :: "exp => Arity -> CoCalls"
    and Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
    and ccHeap :: "(Vars.var * exp) list => exp => Arity -> CoCalls"
    and
    Aheap ::
      "(Vars.var * exp) list
       => exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "CoCallAritySafe ccExp Aexp ccHeap Aheap"
### theory "Draft.CoCallImplTTreeSafe"
### 0.446s elapsed time, 0.473s cpu time, 0.039s GC time
Loading theory "Draft.CoCallImplTTreeSafeTemplates"
val templateLemmas =
   [("CoCallImplTTreeSafe.paths_singles",
     "(?xs : paths (singles ?S)) = (ALL x:?S. one_call_in_path x ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app (template_hole 1, template_var 0), t_empty))),
    ("CoCallImplTTreeSafe.paths_singles'",
     "(?xs : paths (singles ?S)) =
      (ALL x:set ?xs Int ?S. one_call_in_path x ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1),
         template_app
          (template_hole 5,
           template_app (template_hole 4, template_var 0))),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_var 0)),
         t_empty))),
    ("CoCallImplTTreeSafe.valid_lists_many_calls",
     "[| ~ one_call_in_path ?x ?p; ?p : valid_lists ?S ?G |]
      ==> ?x--?x\<in>?G",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 3),
             template_var 0)
           ))),
    ("CoCallImplTTreeSafe.paths_ttree_restr_singles",
     "(?xs : paths (ttree_restr ?S' (singles ?S))) =
      (set ?xs <= ?S' & (ALL x:?S. one_call_in_path x ?xs))",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 2),
         template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 1),
             template_app (template_hole 5, template_var 0)))),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 2)),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0), t_empty)))),
    ("CoCallImplTTreeSafe.both_below_singles1",
     "[| ?t << singles ?S; carrier ?t' Int ?S = {} |]
      ==> ?t \<otimes>\<otimes> ?t' << singles ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 1))
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 0)),
            template_var 1),
          template_hole 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app (template_hole 5, template_var 1))
           ))),
    ("CoCallImplTTreeSafe.substitute_below_singlesI",
     "[| ?t << singles ?S; !!x. carrier (?f x) Int ?S = {} |]
      ==> substitute ?f ?T ?t << singles ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app (template_hole 6, template_var 2))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 3)),
             template_app (template_hole 6, template_var 2))
           ))),
    ("CoCallImplTTreeSafe.substitute_not_carrier",
     "[| ?x ~: carrier ?t; !!x'. ?x ~: carrier (?f x') |]
      ==> ?x ~: carrier (substitute ?f ?T ?t)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_app (template_hole 2, template_var 2))
                )
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 1),
                       template_var 0),
                     template_var 2)))
               )
           )))]:
   (string * thm * template) list
### theory "Draft.CoCallImplTTreeSafeTemplates"
### 0.642s elapsed time, 0.815s cpu time, 0.083s GC time
val it = (): unit
