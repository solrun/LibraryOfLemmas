Loading theory "HOL-Library.Stream" (required by "Draft.ArityEtaExpansionTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ArityEtaExpansionTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ArityEtaExpansionTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.ArityEtaExpansionTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.131s elapsed time, 0.537s cpu time, 0.056s GC time
Loading theory "Draft.Arity" (required by "Draft.ArityEtaExpansionTemplates" via "Draft.ArityEtaExpansion" via "Draft.Arity-Nominal")
instantiation
  Arity :: po
  below_Arity == below :: Arity => Arity => bool
### theory "HOL-Library.Set_Algebras"
### 0.217s elapsed time, 0.885s cpu time, 0.056s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ArityEtaExpansionTemplates" via "Draft.ExtrEqs")
instantiation
  Arity :: zero
  zero_Arity == zero_class.zero :: Arity
instantiation
  Arity :: one
  one_Arity == one_class.one :: Arity
### theory "Draft.Arity"
### 0.188s elapsed time, 0.751s cpu time, 0.000s GC time
Loading theory "Draft.EtaExpansion" (required by "Draft.ArityEtaExpansionTemplates" via "Draft.ArityEtaExpansion")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.EtaExpansion"
### 0.126s elapsed time, 0.483s cpu time, 0.086s GC time
Loading theory "Draft.Arity-Nominal" (required by "Draft.ArityEtaExpansionTemplates" via "Draft.ArityEtaExpansion")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  left :: "'a tree => 'a tree"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  right :: "'a tree => 'a tree"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
instantiation
  Arity :: pure
  permute_Arity == permute :: perm => Arity => Arity
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### theory "Draft.Arity-Nominal"
### 0.521s elapsed time, 2.039s cpu time, 0.224s GC time
Found termination order: "size <*mlex*> {}"
Loading theory "Draft.TransformTools" (required by "Draft.ArityEtaExpansionTemplates" via "Draft.ArityEtaExpansion")
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.014s elapsed time, 4.001s cpu time, 0.366s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.828s elapsed time, 3.216s cpu time, 0.310s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale supp_bounded_transform
  fixes trans :: "'a => exp => exp"
  assumes "supp_bounded_transform trans"
### theory "Draft.TransformTools"
### 0.872s elapsed time, 2.171s cpu time, 0.681s GC time
Loading theory "Draft.ArityEtaExpansion" (required by "Draft.ArityEtaExpansionTemplates")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.102s elapsed time, 6.528s cpu time, 1.089s GC time
Loading theory "Draft.Templates" (required by "Draft.ArityEtaExpansionTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.122s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ArityEtaExpansionTemplates")
### theory "Draft.ArityEtaExpansion"
### 0.483s elapsed time, 1.008s cpu time, 0.042s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.494s elapsed time, 0.717s cpu time, 0.064s GC time
Loading theory "Draft.ArityEtaExpansionTemplates"
val templateLemmas =
   [("ArityEtaExpansion.Aeta_expand_0", "Aeta_expand 0 ?e = ?e",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("ArityEtaExpansion.supp_trans", "supp (Aeta_expand ?a ?e) <= supp ?e",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("ArityEtaExpansion.supp_map_transform",
     "supp (map_transform Aeta_expand ?ae ?\<Gamma>) <= supp ?\<Gamma>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("ArityEtaExpansion.supp_lift_transform",
     "supp (lift_transform Aeta_expand ?a ?e) <= supp ?e",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("ArityEtaExpansion.isLam_Aeta_expand",
     "isLam ?e ==> isLam (Aeta_expand ?a ?e)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("ArityEtaExpansion.isVal_Aeta_expand",
     "isVal ?e ==> isVal (Aeta_expand ?a ?e)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("ArityEtaExpansion.Aeta_expand_fresh_star",
     "?a \<sharp>* Aeta_expand ?n ?e = ?a \<sharp>* ?e",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2), template_var 0))),
    ("ArityEtaExpansion.Aeta_expand_fresh",
     "?a \<sharp> Aeta_expand ?n ?e = ?a \<sharp> ?e",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2), template_var 0))),
    ("ArityEtaExpansion.fresh_star_transform",
     "?a \<sharp>* ?e ==> ?a \<sharp>* Aeta_expand ?n ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("ArityEtaExpansion.fresh_transform",
     "?a \<sharp> ?e ==> ?a \<sharp> Aeta_expand ?n ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("ArityEtaExpansion.fresh_star_map_transform",
     "?a \<sharp>* ?\<Gamma> ==>
      ?a \<sharp>* map_transform Aeta_expand ?ae ?\<Gamma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0),
               template_var 1))
           ))),
    ("ArityEtaExpansion.fresh_map_transform",
     "?a \<sharp> ?\<Gamma> ==>
      ?a \<sharp> map_transform Aeta_expand ?ae ?\<Gamma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0),
               template_var 1))
           ))),
    ("ArityEtaExpansion.Aeta_expand_eqvt",
     "?\<pi> \<bullet> Aeta_expand ?a ?e =
      Aeta_expand (?\<pi> \<bullet> ?a) (?\<pi> \<bullet> ?e)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("ArityEtaExpansion.subst_Aeta_expand",
     "(Aeta_expand ?n ?e)[?x::=?y] = Aeta_expand ?n ?e[?x::=?y]",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("ArityEtaExpansion.Aeta_expand_inc",
     "Aeta_expand (inc$?n) ?e =
      Lam [fresh_var ?e]. Aeta_expand ?n (App ?e (fresh_var ?e))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_app (template_hole 1, template_var 0))))))]:
   (string * thm * template) list
### theory "Draft.ArityEtaExpansionTemplates"
### 0.609s elapsed time, 0.761s cpu time, 0.078s GC time
val it = (): unit
