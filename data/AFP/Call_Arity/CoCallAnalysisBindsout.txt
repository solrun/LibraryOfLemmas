Loading theory "HOL-Library.Function_Algebras" (required by "Draft.CoCallAnalysisBindsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.CoCallAnalysisBindsTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Tree" (required by "Draft.CoCallAnalysisBindsTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.CoCallAnalysisBindsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.153s elapsed time, 0.620s cpu time, 0.059s GC time
Loading theory "Draft.Set-Cpo" (required by "Draft.CoCallAnalysisBindsTemplates" via "Draft.CoCallAnalysisBinds" via "Draft.CoCallAnalysisSig" via "Draft.CoCallGraph")
instantiation
  set :: (type) below
  below_set == below :: 'a set => 'a set => bool
### theory "Draft.Set-Cpo"
### 0.051s elapsed time, 0.207s cpu time, 0.000s GC time
Loading theory "Draft.Arity" (required by "Draft.CoCallAnalysisBindsTemplates" via "Draft.CoCallAnalysisBinds" via "Draft.CoCallAnalysisSig")
### theory "HOL-Library.Set_Algebras"
### 0.260s elapsed time, 1.052s cpu time, 0.059s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.CoCallAnalysisBindsTemplates" via "Draft.ExtrEqs")
instantiation
  Arity :: po
  below_Arity == below :: Arity => Arity => bool
instantiation
  Arity :: zero
  zero_Arity == zero_class.zero :: Arity
instantiation
  Arity :: one
  one_Arity == one_class.one :: Arity
### theory "Draft.Arity"
### 0.198s elapsed time, 0.770s cpu time, 0.094s GC time
Loading theory "Draft.AEnv" (required by "Draft.CoCallAnalysisBindsTemplates" via "Draft.CoCallAnalysisBinds")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.872s elapsed time, 3.438s cpu time, 0.371s GC time
Loading theory "Draft.AList-Utils-HOLCF" (required by "Draft.CoCallAnalysisBindsTemplates" via "Draft.CoCallAnalysisBinds")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.AEnv"
### 0.589s elapsed time, 2.315s cpu time, 0.218s GC time
Loading theory "Draft.CoCallGraph" (required by "Draft.CoCallAnalysisBindsTemplates" via "Draft.CoCallAnalysisBinds" via "Draft.CoCallAnalysisSig")
### theory "HOL-Library.BigO"
### 0.918s elapsed time, 3.477s cpu time, 0.840s GC time
Loading theory "Draft.Arity-Nominal" (required by "Draft.CoCallAnalysisBindsTemplates" via "Draft.CoCallAnalysisBinds")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.AList-Utils-HOLCF"
### 0.594s elapsed time, 2.225s cpu time, 0.570s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
instantiation
  Arity :: pure
  permute_Arity == permute :: perm => Arity => Arity
Found termination order: "size <*mlex*> {}"
### theory "Draft.Arity-Nominal"
### 0.484s elapsed time, 1.739s cpu time, 0.127s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  CoCalls :: po
  below_CoCalls == below :: CoCalls => CoCalls => bool
### theory "HOL-Library.Tree"
### 2.113s elapsed time, 7.231s cpu time, 1.132s GC time
Loading theory "Draft.Templates" (required by "Draft.CoCallAnalysisBindsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.134s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.CoCallAnalysisBindsTemplates")
### Ambiguous input (line 284 of "$AFP/Call_Arity/CoCallGraph.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>ccSquare" ("_position" S))
###     ("_applC" ("_position" ccProd)
###       ("_cargs" ("_position" S) ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^const>Power.power_class.power2" ("_position" S))
###     ("_applC" ("_position" ccProd)
###       ("_cargs" ("_position" S) ("_position" S)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 286 of "$AFP/Call_Arity/CoCallGraph.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ccField)
###       ("\<^const>CoCallGraph.ccSquare" ("_position" S)))
###     ("_position" S)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ccField)
###       ("\<^const>Power.power_class.power2" ("_position" S)))
###     ("_position" S)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 289 of "$AFP/Call_Arity/CoCallGraph.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Porder.below_class.below" ("_position" G)
###       ("\<^const>Power.power_class.power2" ("_position" S)))
###     ("\<^const>Set.subset_eq"
###       ("_applC" ("_position" ccField) ("_position" G)) ("_position" S))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Porder.below_class.below" ("_position" G)
###       ("\<^const>CoCallGraph.ccSquare" ("_position" S)))
###     ("\<^const>Set.subset_eq"
###       ("_applC" ("_position" ccField) ("_position" G)) ("_position" S))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 292 of "$AFP/Call_Arity/CoCallGraph.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>CoCallGraph.cc_restr_sym"
###       ("\<^const>CoCallGraph.ccSquare" ("_position" S')) ("_position" S))
###     ("\<^const>CoCallGraph.ccSquare"
###       ("\<^const>Set.inter" ("_position" S') ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>CoCallGraph.cc_restr_sym"
###       ("\<^const>Power.power_class.power2" ("_position" S'))
###       ("_position" S))
###     ("\<^const>CoCallGraph.ccSquare"
###       ("\<^const>Set.inter" ("_position" S') ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>CoCallGraph.cc_restr_sym"
###       ("\<^const>CoCallGraph.ccSquare" ("_position" S')) ("_position" S))
###     ("\<^const>Power.power_class.power2"
###       ("\<^const>Set.inter" ("_position" S') ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>CoCallGraph.cc_restr_sym"
###       ("\<^const>Power.power_class.power2" ("_position" S'))
###       ("_position" S))
###     ("\<^const>Power.power_class.power2"
###       ("\<^const>Set.inter" ("_position" S') ("_position" S)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 295 of "$AFP/Call_Arity/CoCallGraph.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>CoCallGraph.ccSquare" ("\<^const>Set.empty"))
###     ("\<^const>Pcpo.pcpo_class.bottom")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Power.power_class.power2" ("\<^const>Set.empty"))
###     ("\<^const>Pcpo.pcpo_class.bottom")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "list_pairs"
  Proving monotonicity ...
### theory "Draft.CoCallGraph"
### 1.231s elapsed time, 3.386s cpu time, 0.297s GC time
Loading theory "Draft.CoCallAnalysisSig" (required by "Draft.CoCallAnalysisBindsTemplates" via "Draft.CoCallAnalysisBinds")
Loading theory "Draft.CoCallGraph-Nominal" (required by "Draft.CoCallAnalysisBindsTemplates" via "Draft.CoCallAnalysisBinds")
instantiation
  CoCalls :: pt
  permute_CoCalls == permute :: perm => CoCalls => CoCalls
### theory "Draft.CoCallGraph-Nominal"
### 0.257s elapsed time, 0.769s cpu time, 0.000s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.585s elapsed time, 1.493s cpu time, 0.144s GC time
locale CoCallAnalysis
  fixes ccExp :: "exp => Arity -> CoCalls"
locale CoCallAnalyisHeap
  fixes ccHeap :: "(Vars.var * exp) list => exp => Arity -> CoCalls"
### theory "Draft.CoCallAnalysisSig"
### 0.512s elapsed time, 1.174s cpu time, 0.079s GC time
Loading theory "Draft.CoCallAnalysisBinds" (required by "Draft.CoCallAnalysisBindsTemplates")
locale CoCallAnalysis
  fixes ccExp :: "exp => Arity -> CoCalls"
### Ambiguous input (line 12 of "$AFP/Call_Arity/CoCallAnalysisBinds.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Cfun.cfun.Rep_cfun"
###       ("_applC" ("_position" ccBind)
###         ("_cargs" ("_position" v) ("_position" e)))
###       ("_tuple" ("_position" ae) ("_tuple_arg" ("_position" G))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.disj"
###         ("\<^const>CoCallGraph.notInCC" ("_position" v) ("_position" v)
###           ("_position" G))
###         ("\<^const>HOL.Not" ("_applC" ("_position" isVal) ("_position" e))))
###       ("\<^const>CoCallGraph.cc_restr_sym"
###         ("_applC"
###           ("\<^const>local.ccExp_bot_syn"
###             ("_applC" ("_position" ae) ("_position" v)))
###           ("_position" e))
###         ("_applC" ("_position" fv) ("_position" e)))
###       ("\<^const>Power.power_class.power2"
###         ("_applC" ("_position" fv) ("_position" e))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Cfun.cfun.Rep_cfun"
###       ("_applC" ("_position" ccBind)
###         ("_cargs" ("_position" v) ("_position" e)))
###       ("_tuple" ("_position" ae) ("_tuple_arg" ("_position" G))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.disj"
###         ("\<^const>CoCallGraph.notInCC" ("_position" v) ("_position" v)
###           ("_position" G))
###         ("\<^const>HOL.Not" ("_applC" ("_position" isVal) ("_position" e))))
###       ("\<^const>CoCallGraph.cc_restr_sym"
###         ("_applC"
###           ("\<^const>local.ccExp_bot_syn"
###             ("_applC" ("_position" ae) ("_position" v)))
###           ("_position" e))
###         ("_applC" ("_position" fv) ("_position" e)))
###       ("\<^const>CoCallGraph.ccSquare"
###         ("_applC" ("_position" fv) ("_position" e))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.CoCallAnalysisBinds"
### 0.799s elapsed time, 0.822s cpu time, 0.036s GC time
Loading theory "Draft.CoCallAnalysisBindsTemplates"
val templateLemmas =
   [("CoCallAnalysisBinds.ccBinds_eqvt",
     "?\<pi> \<bullet> CoCallAnalysis.ccBinds ?cccExp ?\<Gamma> =
      CoCallAnalysis.ccBinds (?\<pi> \<bullet> ?cccExp)
       (?\<pi> \<bullet> ?\<Gamma>)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("CoCallAnalysisBinds.ccBindsExtra_eqvt",
     "?\<pi> \<bullet> CoCallAnalysis.ccBindsExtra ?cccExp ?\<Gamma> =
      CoCallAnalysis.ccBindsExtra (?\<pi> \<bullet> ?cccExp)
       (?\<pi> \<bullet> ?\<Gamma>)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("CoCallAnalysisBinds.ccBind_cong",
     "?cccexp1.0 ?e = ?cccexp2.0 ?e ==>
      CoCallAnalysis.ccBind ?cccexp1.0 ?x ?e =
      CoCallAnalysis.ccBind ?cccexp2.0 ?x ?e",
     template_implication
      ([template_equation
         (template_app (template_var 3, template_var 2),
          template_app (template_var 1, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2)))),
    ("CoCallAnalysisBinds.ccBind_eqvt",
     "?\<pi> \<bullet> CoCallAnalysis.ccBind ?cccExp ?x ?e =
      CoCallAnalysis.ccBind (?\<pi> \<bullet> ?cccExp) (?\<pi> \<bullet> ?x)
       (?\<pi> \<bullet> ?e)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 0)))),
    ("CoCallAnalysisBinds.ccBinds_cong",
     "[| !!e. e : snd ` set ?heap2.0 ==> ?cccexp1.0 e = ?cccexp2.0 e;
         ?heap1.0 = ?heap2.0 |]
      ==> CoCallAnalysis.ccBinds ?cccexp1.0 ?heap1.0 =
          CoCallAnalysis.ccBinds ?cccexp2.0 ?heap2.0",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_equation (template_var 0, template_var 3)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 3)))),
    ("CoCallAnalysisBinds.ccBindsExtra_cong",
     "[| !!e. e : snd ` set ?heap2.0 ==> ?cccexp1.0 e = ?cccexp2.0 e;
         ?heap1.0 = ?heap2.0 |]
      ==> CoCallAnalysis.ccBindsExtra ?cccexp1.0 ?heap1.0 =
          CoCallAnalysis.ccBindsExtra ?cccexp2.0 ?heap2.0",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_equation (template_var 0, template_var 3)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 3))))]:
   (string * thm * template) list
### theory "Draft.CoCallAnalysisBindsTemplates"
### 0.643s elapsed time, 0.773s cpu time, 0.057s GC time
val it = (): unit
