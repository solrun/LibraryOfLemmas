Loading theory "HOL-Library.Stream" (required by "Draft.TransformToolsTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.TransformToolsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.TransformToolsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.TransformToolsTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.135s elapsed time, 0.555s cpu time, 0.063s GC time
Loading theory "Draft.TransformTools" (required by "Draft.TransformToolsTemplates")
### theory "HOL-Library.Set_Algebras"
### 0.216s elapsed time, 0.880s cpu time, 0.063s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.TransformToolsTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
locale supp_bounded_transform
  fixes trans :: "'a => exp => exp"
  assumes "supp_bounded_transform trans"
Found termination order: "size <*mlex*> {}"
### theory "Draft.TransformTools"
### 0.709s elapsed time, 2.780s cpu time, 0.293s GC time
### theory "HOL-Library.Stream"
### 0.853s elapsed time, 3.363s cpu time, 0.356s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.748s elapsed time, 2.695s cpu time, 0.293s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.910s elapsed time, 4.967s cpu time, 0.943s GC time
Loading theory "Draft.Templates" (required by "Draft.TransformToolsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.067s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.TransformToolsTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.470s elapsed time, 0.477s cpu time, 0.000s GC time
Loading theory "Draft.TransformToolsTemplates"
val templateLemmas =
   [("TransformTools.map_transform_Nil", "map_transform ?t ?ae [] = []",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_hole 0)),
    ("TransformTools.lift_transform_simps",
     "lift_transform ?t \<bottom> ?e = ?e",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_hole 0),
         template_var 0),
       template_var 0)),
    ("TransformTools.length_map_transform",
     "length (map_transform ?t ?ae ?xs) = length ?xs",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("TransformTools.domA_map_transform",
     "domA (map_transform ?t ?ae ?\<Gamma>) = domA ?\<Gamma>",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("TransformTools.lift_transform_simps",
     "lift_transform ?t (up$?a) ?e = ?t ?a ?e",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_var 2, template_var 1), template_var 0))),
    ("TransformTools.map_transform_eqvt",
     "?\<pi> \<bullet> map_transform ?t ?ae =
      map_transform (?\<pi> \<bullet> ?t) (?\<pi> \<bullet> ?ae)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("TransformTools.map_transform_delete",
     "map_transform ?t ?ae (delete ?x ?\<Gamma>) =
      delete ?x (map_transform ?t ?ae ?\<Gamma>)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 0)))),
    ("TransformTools.map_transform_restrA",
     "map_transform ?t ?ae (restrictA ?S ?\<Gamma>) =
      restrictA ?S (map_transform ?t ?ae ?\<Gamma>)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 0)))),
    ("TransformTools.delete_map_transform_env_delete",
     "delete ?x (map_transform ?t (env_delete ?x ?ae) ?\<Gamma>) =
      delete ?x (map_transform ?t ?ae ?\<Gamma>)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("TransformTools.map_of_map_transform",
     "map_of (map_transform ?t ?ae ?\<Gamma>) ?x =
      map_option (lift_transform ?t (?ae ?x)) (map_of ?\<Gamma> ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_app (template_var 2, template_var 0))),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("TransformTools.map_transform_append",
     "map_transform ?t ?ae (?\<Delta> @ ?\<Gamma>) =
      map_transform ?t ?ae ?\<Delta> @ map_transform ?t ?ae ?\<Gamma>",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 0)))),
    ("TransformTools.lift_transform_eqvt",
     "?\<pi> \<bullet> lift_transform ?t ?a ?e =
      lift_transform (?\<pi> \<bullet> ?t) (?\<pi> \<bullet> ?a)
       (?\<pi> \<bullet> ?e)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 3),
           template_var 0)))),
    ("TransformTools.map_transform_Cons",
     "map_transform ?t ?ae ((?x, ?e) # ?\<Gamma>) =
      (?x, lift_transform ?t (?ae ?x) ?e) # map_transform ?t ?ae ?\<Gamma>",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 4), template_var 3),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_app (template_var 3, template_var 2)),
               template_var 1))),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_var 0)))),
    ("TransformTools.map_transform_cong",
     "[| !!x. x : domA ?m1.0 ==> ?ae x = ?ae' x; ?m1.0 = ?m2.0 |]
      ==> map_transform ?t ?ae ?m1.0 = map_transform ?t ?ae' ?m2.0",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_equation (template_var 4, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 3),
           template_var 4),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2),
           template_var 1)))),
    ("TransformTools.lift_transform_fun_cong",
     "[| !!a. ?t1.0 a ?e1.0 = ?t2.0 a ?e1.0; ?a1.0 = ?a2.0; ?e1.0 = ?e2.0 |]
      ==> lift_transform ?t1.0 ?a1.0 ?e1.0 =
          lift_transform ?t2.0 ?a2.0 ?e2.0",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_equation (template_var 2, template_var 1),
        template_equation (template_var 4, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 5),
             template_var 2),
           template_var 4),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1),
           template_var 0)))),
    ("TransformTools.supp_map_transform_step",
     "(!!x e a. (x, e) : set ?\<Gamma> ==> supp (?t a e) <= supp e) ==>
      supp (map_transform ?t ?ae ?\<Gamma>) <= supp ?\<Gamma>",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)),
         template_app (template_hole 1, template_var 2)))),
    ("TransformTools.subst_lift_transform",
     "(!!a. (?t a ?e)[?x::=?y] = ?t a ?e[?x::=?y]) ==>
      (lift_transform ?t ?a ?e)[?x::=?y] =
      lift_transform ?t ?a ?e[?x::=?y]",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 0),
                 template_var 3)),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 0),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1))))),
    ("TransformTools.map_transform_fundef_cong",
     "[| !!x e a. (x, e) : set ?m1.0 ==> ?t1.0 a e = ?t2.0 a e;
         ?ae1.0 = ?ae2.0; ?m1.0 = ?m2.0 |]
      ==> map_transform ?t1.0 ?ae1.0 ?m1.0 =
          map_transform ?t2.0 ?ae2.0 ?m2.0",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_equation (template_var 2, template_var 1),
        template_equation (template_var 5, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 2),
           template_var 5),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1),
           template_var 0)))),
    ("TransformTools.subst_map_transform",
     "(!!x' e a.
          (x', e) : set ?\<Gamma> ==>
          (?t a e)[?x::=?y] = ?t a e[?x::=?y]) ==>
      (map_transform ?t ?ae ?\<Gamma>)[?x::h=?y] =
      map_transform ?t ?ae ?\<Gamma>[?x::h=?y]",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0),
                 template_var 4)),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 2),
             template_var 1)))))]:
   (string * thm * template) list
### theory "Draft.TransformToolsTemplates"
### 0.669s elapsed time, 0.872s cpu time, 0.142s GC time
val it = (): unit
