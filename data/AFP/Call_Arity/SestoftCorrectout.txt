Loading theory "Draft.BalancedTraces" (required by "Draft.SestoftCorrectTemplates" via "Draft.SestoftCorrect")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SestoftCorrectTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SestoftCorrectTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.SestoftCorrectTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
locale traces
  fixes step :: "'c => 'c => bool"  (infix \<open>\<Rightarrow>\<close> 50)
Proofs for inductive predicate(s) "trace"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
  Proving monotonicity ...
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
locale balance_trace
  fixes step :: "'a => 'a => bool"  (infix \<open>\<Rightarrow>\<close> 50)
    and stack :: "'a => 's list"
  assumes "balance_trace (\<Rightarrow>) stack"
Proofs for inductive predicate(s) "bal"
### theory "HOL-Library.Function_Algebras"
### 0.130s elapsed time, 0.530s cpu time, 0.053s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SestoftCorrectTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
  Proving monotonicity ...
### theory "Draft.BalancedTraces"
### 0.158s elapsed time, 0.646s cpu time, 0.053s GC time
Loading theory "Draft.SestoftConf" (required by "Draft.SestoftCorrectTemplates" via "Draft.SestoftCorrect" via "Draft.Sestoft")
### theory "HOL-Library.Set_Algebras"
### 0.214s elapsed time, 0.875s cpu time, 0.053s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SestoftCorrectTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
instantiation
  stack_elem :: pt
  permute_stack_elem == permute :: perm => stack_elem => stack_elem
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size_list size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  right :: "'a tree => 'a tree"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size_list size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.839s elapsed time, 3.310s cpu time, 0.361s GC time
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.968s elapsed time, 3.500s cpu time, 0.866s GC time
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "boring_step"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "invariant"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.SestoftConf"
### 1.433s elapsed time, 4.622s cpu time, 0.974s GC time
Loading theory "Draft.Sestoft" (required by "Draft.SestoftCorrectTemplates" via "Draft.SestoftCorrect")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Proofs for inductive predicate(s) "step"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Sestoft"
### 0.158s elapsed time, 0.316s cpu time, 0.000s GC time
Loading theory "Draft.SestoftCorrect" (required by "Draft.SestoftCorrectTemplates")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.955s elapsed time, 5.779s cpu time, 1.102s GC time
Loading theory "Draft.Templates" (required by "Draft.SestoftCorrectTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.134s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SestoftCorrectTemplates")
Found termination order: "{}"
### theory "Draft.SestoftCorrect"
### 0.702s elapsed time, 1.525s cpu time, 0.205s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.514s elapsed time, 0.872s cpu time, 0.078s GC time
Loading theory "Draft.SestoftCorrectTemplates"
val templateLemmas =
   [("SestoftCorrect.trace_nil",
     "(?c \<Rightarrow>\<^sup>*\<^bsub>[]\<^esub> ?c') = (?c = ?c')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_var 1),
                template_hole 1),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("SestoftCorrect.bal_nil",
     "(?c \<Rightarrow>\<^sup>b\<^sup>*\<^bsub>[]\<^esub> ?c') =
      (?c = ?c')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_hole 3),
                    template_hole 2),
                  template_var 1),
                template_hole 1),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("SestoftCorrect.destruct_trace",
     "?c \<Rightarrow>\<^sup>*\<^bsub>?T\<^esub> ?c' ==>
      SestoftCorrect.steps ?c ?c'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_hole 1),
               template_var 2),
             template_var 0)
           ))),
    ("SestoftCorrect.build_trace",
     "SestoftCorrect.steps ?c ?c' ==>
      EX T. ?c \<Rightarrow>\<^sup>*\<^bsub>T\<^esub> ?c'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_hole 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("SestoftCorrect.bal_stackD",
     "?c \<Rightarrow>\<^sup>b\<^sup>*\<^bsub>?T\<^esub> ?c' ==>
      stack ?c' = stack ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_hole 2),
                    template_hole 1),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 1, template_var 2)))),
    ("SestoftCorrect.isVal_stops",
     "[| isVal ?e;
         (?\<Gamma>, ?e,
          ?S) \<Rightarrow>\<^sup>b\<^sup>*\<^bsub>?T\<^esub> (?\<Delta>,
                         ?z, ?S) |]
      ==> ?T = []",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_hole 5),
                    template_hole 4),
                  template_app
                   (template_app (template_hole 3, template_var 4),
                    template_app
                     (template_app (template_hole 2, template_var 5),
                      template_var 3))),
                template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_var 3)))
            )],
       template_equation (template_var 2, template_hole 0))),
    ("SestoftCorrect.Ball_subst",
     "(ALL p:set ?\<Gamma>[?y::h=?x]. ?f p) =
      (ALL p:set ?\<Gamma>. case p of (z, e) => ?f (z, e[?y::=?x]))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2),
               template_var 1))),
         t_empty),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 3)),
         t_empty))),
    ("SestoftCorrect.dummy_stack_extended",
     "[| set ?S <= range Dummy; ?x ~: range Dummy |]
      ==> (?S \<lesssim> ?x # ?S') = (?S \<lesssim> ?S')",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 8, template_var 2),
          template_app
           (template_app (template_hole 7, template_hole 6),
            template_hole 5)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_app
                   (template_app (template_hole 7, template_hole 6),
                    template_hole 5))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("SestoftCorrect.trace_consE",
     "[| ?conf \<Rightarrow>\<^sup>*\<^bsub>?conf' # ?T\<^esub> ?final;
         [| ?conf' \<Rightarrow>\<^sup>*\<^bsub>?T\<^esub> ?final;
            ?conf \<Rightarrow> ?conf' |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 4),
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 3)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("SestoftCorrect.stack_passes_lower_bound",
     "[| ?c\<^sub>3 \<Rightarrow> ?c\<^sub>4;
         stack ?c\<^sub>2 \<lesssim> stack ?c\<^sub>3;
         ~ stack ?c\<^sub>2 \<lesssim> stack ?c\<^sub>4 |]
      ==> stack ?c\<^sub>3 = stack ?c\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)),
              template_app (template_hole 2, template_var 2))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 0)),
                  template_app (template_hole 2, template_var 1))
                )
            )],
       template_equation
        (template_app (template_hole 2, template_var 2),
         template_app (template_hole 2, template_var 0)))),
    ("SestoftCorrect.stack_passes_lower_bound",
     "[| ?c\<^sub>3 \<Rightarrow> ?c\<^sub>4;
         stack ?c\<^sub>2 \<lesssim> stack ?c\<^sub>3;
         ~ stack ?c\<^sub>2 \<lesssim> stack ?c\<^sub>4 |]
      ==> stack ?c\<^sub>4 = tl (stack ?c\<^sub>2)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)),
              template_app (template_hole 3, template_var 2))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 0)),
                  template_app (template_hole 3, template_var 1))
                )
            )],
       template_equation
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_hole 0,
           template_app (template_hole 3, template_var 0))))),
    ("SestoftCorrect.lemma_3",
     "[| (?\<Gamma>, ?e,
          ?S) \<Rightarrow>\<^sup>b\<^sup>*\<^bsub>?T\<^esub> (?\<Delta>,
                         ?z, ?S);
         isVal ?z |]
      ==> ?\<Gamma> : ?e \<Down>\<^bsub>upds_list
   ?S\<^esub> ?\<Delta> : ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 7, template_hole 6),
                    template_hole 5),
                  template_app
                   (template_app (template_hole 4, template_var 5),
                    template_app
                     (template_app (template_hole 3, template_var 4),
                      template_var 3))),
                template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_var 3)))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 5),
                   template_var 4),
                 template_app (template_hole 0, template_var 3)),
               template_var 1),
             template_var 0)
           ))),
    ("SestoftCorrect.one_step_only",
     "?c \<Rightarrow> ?c' ==>
      stack ?c = stack ?c' |
      (EX x. stack ?c' = x # stack ?c) | (EX x. stack ?c = x # stack ?c')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 1)),
                 template_app (template_hole 2, template_var 0))),
             template_app
              (template_app
                (template_hole 4, template_app (template_hole 1, t_empty)),
               template_app (template_hole 1, t_empty)))
           ))),
    ("SestoftCorrect.lemma_2",
     "[| ?\<Gamma> : ?e \<Down>\<^bsub>?L\<^esub> ?\<Delta> : ?z;
         fv (?\<Gamma>, ?e, ?S) <= set ?L Un domA ?\<Gamma> |]
      ==> SestoftCorrect.steps (?\<Gamma>, ?e, ?S) (?\<Delta>, ?z, ?S)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 9, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 5),
              template_app
               (template_app (template_hole 5, template_var 4),
                template_var 0))),
          template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 3)),
            template_app (template_hole 2, template_var 5)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_hole 0),
               template_app
                (template_app (template_hole 6, template_var 5),
                 template_app
                  (template_app (template_hole 5, template_var 4),
                   template_var 0))),
             template_app
              (template_app (template_hole 6, template_var 2),
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 0)))
           ))),
    ("SestoftCorrect.balE",
     "[| ?c \<Rightarrow>\<^sup>b\<^sup>*\<^bsub>?T\<^esub> ?c';
         [| ?c \<Rightarrow>\<^sup>*\<^bsub>?T\<^esub> ?c';
            ALL c':set ?T. stack ?c \<lesssim> stack c';
            stack ?c' = stack ?c |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 7, template_hole 6),
                    template_hole 5),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 4, template_hole 6),
                     template_var 3),
                   template_var 2),
                 template_var 1)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 2)),
                   t_empty)
                 )],
            template_implication
             ([template_equation
                (template_app (template_hole 5, template_var 1),
                 template_app (template_hole 5, template_var 3))],
              template_predicate (template_var 0))))],
       template_predicate (template_var 0))),
    ("SestoftCorrect.traces_list_all",
     "[| ?c \<Rightarrow>\<^sup>*\<^bsub>?T\<^esub> ?c'; ?P ?c';
         !!c c'. [| c \<Rightarrow> c'; ?P c' |] ==> ?P c |]
      ==> (ALL x:set ?T. ?P x) & ?P ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_var 0, template_var 1)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)),
                 t_empty)),
             template_app (template_var 0, template_var 3))
           ))),
    ("SestoftCorrect.dummy_stack_balanced",
     "[| set ?S <= range Dummy;
         SestoftCorrect.steps (?\<Gamma>, ?e, ?S) (?\<Delta>, ?z, ?S);
         !!T. (?\<Gamma>, ?e,
               ?S) \<Rightarrow>\<^sup>b\<^sup>*\<^bsub>T\<^esub> (?\<Delta>,
                             ?z, ?S) ==>
              ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 10, template_var 5),
          template_app
           (template_app (template_hole 9, template_hole 8),
            template_hole 7)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_hole 5),
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 5))),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 5)))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("SestoftCorrect.trace_induct_final",
     "[| ?x1.0 \<Rightarrow>\<^sup>*\<^bsub>?x2.0\<^esub> ?final;
         ?P ?final [] ?final;
         !!conf' T conf.
            [| conf' \<Rightarrow>\<^sup>*\<^bsub>T\<^esub> ?final;
               ?P conf' T ?final; conf \<Rightarrow> conf' |]
            ==> ?P conf (conf' # T) ?final |]
      ==> ?P ?x1.0 ?x2.0 ?final",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 0, template_var 1),
                template_hole 3),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 0, template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("SestoftCorrect.bal_consE",
     "[| ?c\<^sub>1 \<Rightarrow>\<^sup>b\<^sup>*\<^bsub>?c\<^sub>2 #
                   ?T\<^esub> ?c\<^sub>5;
         stack ?c\<^sub>2 = ?s # stack ?c\<^sub>1;
         !!T\<^sub>1 c\<^sub>3 c\<^sub>4 T\<^sub>2.
            [| ?T = T\<^sub>1 @ c\<^sub>4 # T\<^sub>2;
               ?c\<^sub>2 \<Rightarrow>\<^sup>b\<^sup>*\<^bsub>T\<^sub>1\<^esub> c\<^sub>3;
               c\<^sub>3 \<Rightarrow> c\<^sub>4;
               c\<^sub>4 \<Rightarrow>\<^sup>b\<^sup>*\<^bsub>T\<^sub>2\<^esub> ?c\<^sub>5 |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 9, template_hole 8),
                    template_hole 7),
                  template_var 5),
                template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3)),
              template_var 2)
            ),
        template_equation
         (template_app (template_hole 7, template_var 4),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_app (template_hole 7, template_var 5))),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("SestoftCorrect.traceWhile",
     "[| ?c\<^sub>1 \<Rightarrow>\<^sup>*\<^bsub>?T\<^esub> ?c\<^sub>4;
         ?P ?c\<^sub>1; ~ ?P ?c\<^sub>4;
         !!T\<^sub>1 c\<^sub>2 c\<^sub>3 T\<^sub>2.
            [| ?T = T\<^sub>1 @ c\<^sub>3 # T\<^sub>2;
               ?c\<^sub>1 \<Rightarrow>\<^sup>*\<^bsub>T\<^sub>1\<^esub> c\<^sub>2;
               ALL x:set T\<^sub>1. ?P x; ?P c\<^sub>2;
               c\<^sub>2 \<Rightarrow> c\<^sub>3; ~ ?P c\<^sub>3;
               c\<^sub>3 \<Rightarrow>\<^sup>*\<^bsub>T\<^sub>2\<^esub> ?c\<^sub>4 |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_var 1, template_var 4)),
        template_negation
         (
            template_predicate
             (template_app (template_var 1, template_var 2))
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("SestoftCorrect.conf_trace_induct_final",
     "[| (?\<Gamma>, ?e, ?S) \<Rightarrow>\<^sup>*\<^bsub>?T\<^esub> ?final;
         !!\<Gamma> e S.
            ?final = (\<Gamma>, e, S) ==>
            ?P \<Gamma> e S [] (\<Gamma>, e, S);
         !!\<Gamma> e S T \<Gamma>' e' S'.
            [| (\<Gamma>', e',
                S') \<Rightarrow>\<^sup>*\<^bsub>T\<^esub> ?final;
               ?P \<Gamma>' e' S' T ?final;
               (\<Gamma>, e, S) \<Rightarrow> (\<Gamma>', e', S') |]
            ==> ?P \<Gamma> e S ((\<Gamma>', e', S') # T) ?final |]
      ==> ?P ?\<Gamma> ?e ?S ?T ?final",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_hole 9),
                  template_app
                   (template_app (template_hole 8, template_var 5),
                    template_app
                     (template_app (template_hole 7, template_var 4),
                      template_var 3))),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_var 0, template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)
           )))]:
   (string * thm * template) list
### theory "Draft.SestoftCorrectTemplates"
### 0.515s elapsed time, 0.693s cpu time, 0.088s GC time
val it = (): unit
