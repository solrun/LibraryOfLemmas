Loading theory "HOL-Library.Function_Algebras" (required by "Draft.CallArityEnd2EndTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.CallArityEnd2EndTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.CallArityEnd2EndTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.CallArityEnd2EndTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.131s elapsed time, 0.538s cpu time, 0.047s GC time
Loading theory "Draft.Set-Cpo" (required by "Draft.CallArityEnd2EndTemplates" via "Draft.CallArityEnd2End" via "Draft.CoCallAnalysisImpl" via "Draft.Env-Set-Cpo")
instantiation
  set :: (type) below
  below_set == below :: 'a set => 'a set => bool
### theory "Draft.Set-Cpo"
### 0.045s elapsed time, 0.179s cpu time, 0.000s GC time
Loading theory "Draft.Arity" (required by "Draft.CallArityEnd2EndTemplates" via "Draft.CallArityEnd2End" via "Draft.ArityTransform" via "Draft.ArityAnalysisSig" via "Draft.AEnv")
### theory "HOL-Library.Set_Algebras"
### 0.239s elapsed time, 0.965s cpu time, 0.047s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.CallArityEnd2EndTemplates" via "Draft.ExtrEqs")
instantiation
  Arity :: po
  below_Arity == below :: Arity => Arity => bool
instantiation
  Arity :: zero
  zero_Arity == zero_class.zero :: Arity
instantiation
  Arity :: one
  one_Arity == one_class.one :: Arity
### theory "Draft.Arity"
### 0.210s elapsed time, 0.826s cpu time, 0.114s GC time
Loading theory "Draft.EtaExpansion" (required by "Draft.CallArityEnd2EndTemplates" via "Draft.CallArityEnd2End" via "Draft.ArityTransform" via "Draft.ArityEtaExpansionSafe" via "Draft.EtaExpansionSafe")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.EtaExpansion"
### 0.134s elapsed time, 0.529s cpu time, 0.072s GC time
Loading theory "Draft.SestoftConf" (required by "Draft.CallArityEnd2EndTemplates" via "Draft.CallArityEnd2End" via "Draft.ArityTransform" via "Draft.ArityEtaExpansionSafe" via "Draft.EtaExpansionSafe" via "Draft.Sestoft")
consts
  snth :: "'a stream => nat => 'a"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
instantiation
  stack_elem :: pt
  permute_stack_elem == permute :: perm => stack_elem => stack_elem
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.957s elapsed time, 3.778s cpu time, 0.414s GC time
Loading theory "Draft.AEnv" (required by "Draft.CallArityEnd2EndTemplates" via "Draft.CallArityEnd2End" via "Draft.ArityTransform" via "Draft.ArityAnalysisSig")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.058s elapsed time, 4.037s cpu time, 0.958s GC time
Loading theory "Draft.Env-Set-Cpo" (required by "Draft.CallArityEnd2EndTemplates" via "Draft.CallArityEnd2End" via "Draft.CoCallAnalysisImpl")
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Env-Set-Cpo"
### 0.207s elapsed time, 0.812s cpu time, 0.050s GC time
Loading theory "Draft.AList-Utils-HOLCF" (required by "Draft.CallArityEnd2EndTemplates" via "Draft.CallArityEnd2End" via "Draft.CoCallAnalysisImpl" via "Draft.CoCallFix" via "Draft.CoCallAnalysisBinds")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Proofs for inductive predicate(s) "boring_step"
  Proving monotonicity ...
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.AEnv"
### 0.895s elapsed time, 3.404s cpu time, 0.801s GC time
Loading theory "Draft.CoCallGraph" (required by "Draft.CallArityEnd2EndTemplates" via "Draft.CallArityEnd2End" via "Draft.CoCallAnalysisImpl" via "Draft.CoCallFix" via "Draft.CoCallAnalysisSig")
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "invariant"
  Proving monotonicity ...
Found termination order: "{}"
### theory "Draft.AList-Utils-HOLCF"
### 0.518s elapsed time, 2.027s cpu time, 0.232s GC time
Loading theory "Draft.Arity-Nominal" (required by "Draft.CallArityEnd2EndTemplates" via "Draft.CallArityEnd2End" via "Draft.ArityTransform" via "Draft.ArityAnalysisSig")
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.SestoftConf"
### 1.636s elapsed time, 6.309s cpu time, 1.131s GC time
Loading theory "Draft.ArityStack" (required by "Draft.CallArityEnd2EndTemplates" via "Draft.CallArityEnd2End" via "Draft.ArityTransform" via "Draft.ArityEtaExpansionSafe")
### theory "HOL-Library.Tree"
### 2.245s elapsed time, 8.724s cpu time, 1.363s GC time
Loading theory "Draft.Templates" (required by "Draft.CallArityEnd2EndTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.066s elapsed time, 0.258s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.CallArityEnd2EndTemplates")
instantiation
  Arity :: pure
  permute_Arity == permute :: perm => Arity => Arity
### theory "Draft.Arity-Nominal"
### 0.504s elapsed time, 1.984s cpu time, 0.178s GC time
Loading theory "Draft.Sestoft" (required by "Draft.CallArityEnd2EndTemplates" via "Draft.CallArityEnd2End" via "Draft.ArityTransform" via "Draft.ArityEtaExpansionSafe" via "Draft.EtaExpansionSafe")
Proofs for inductive predicate(s) "step"
  Proving monotonicity ...
### theory "Draft.Sestoft"
### 0.239s elapsed time, 0.919s cpu time, 0.178s GC time
Loading theory "Draft.EtaExpansionSafe" (required by "Draft.CallArityEnd2EndTemplates" via "Draft.CallArityEnd2End" via "Draft.ArityTransform" via "Draft.ArityEtaExpansionSafe")
instantiation
  CoCalls :: po
  below_CoCalls == below :: CoCalls => CoCalls => bool
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.ArityStack"
### 0.657s elapsed time, 2.581s cpu time, 0.280s GC time
Loading theory "Draft.ArityAnalysisSig" (required by "Draft.CallArityEnd2EndTemplates" via "Draft.CallArityEnd2End" via "Draft.ArityTransform")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.999s elapsed time, 3.793s cpu time, 1.176s GC time
Loading theory "Draft.TransformTools" (required by "Draft.CallArityEnd2EndTemplates" via "Draft.CallArityEnd2End" via "Draft.ArityTransform" via "Draft.AbstractTransform")
Found termination order: "size_list size <*mlex*> {}"
### Ambiguous input (line 284 of "$AFP/Call_Arity/CoCallGraph.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>ccSquare" ("_position" S))
###     ("_applC" ("_position" ccProd)
###       ("_cargs" ("_position" S) ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^const>Power.power_class.power2" ("_position" S))
###     ("_applC" ("_position" ccProd)
###       ("_cargs" ("_position" S) ("_position" S)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 286 of "$AFP/Call_Arity/CoCallGraph.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ccField)
###       ("\<^const>CoCallGraph.ccSquare" ("_position" S)))
###     ("_position" S)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ccField)
###       ("\<^const>Power.power_class.power2" ("_position" S)))
###     ("_position" S)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 289 of "$AFP/Call_Arity/CoCallGraph.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Porder.below_class.below" ("_position" G)
###       ("\<^const>Power.power_class.power2" ("_position" S)))
###     ("\<^const>Set.subset_eq"
###       ("_applC" ("_position" ccField) ("_position" G)) ("_position" S))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Porder.below_class.below" ("_position" G)
###       ("\<^const>CoCallGraph.ccSquare" ("_position" S)))
###     ("\<^const>Set.subset_eq"
###       ("_applC" ("_position" ccField) ("_position" G)) ("_position" S))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.EtaExpansionSafe"
### 0.573s elapsed time, 2.131s cpu time, 0.930s GC time
### Ambiguous input (line 292 of "$AFP/Call_Arity/CoCallGraph.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>CoCallGraph.cc_restr_sym"
###       ("\<^const>CoCallGraph.ccSquare" ("_position" S')) ("_position" S))
###     ("\<^const>CoCallGraph.ccSquare"
###       ("\<^const>Set.inter" ("_position" S') ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>CoCallGraph.cc_restr_sym"
###       ("\<^const>Power.power_class.power2" ("_position" S'))
###       ("_position" S))
###     ("\<^const>CoCallGraph.ccSquare"
###       ("\<^const>Set.inter" ("_position" S') ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>CoCallGraph.cc_restr_sym"
###       ("\<^const>CoCallGraph.ccSquare" ("_position" S')) ("_position" S))
###     ("\<^const>Power.power_class.power2"
###       ("\<^const>Set.inter" ("_position" S') ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>CoCallGraph.cc_restr_sym"
###       ("\<^const>Power.power_class.power2" ("_position" S'))
###       ("_position" S))
###     ("\<^const>Power.power_class.power2"
###       ("\<^const>Set.inter" ("_position" S') ("_position" S)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 295 of "$AFP/Call_Arity/CoCallGraph.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>CoCallGraph.ccSquare" ("\<^const>Set.empty"))
###     ("\<^const>Pcpo.pcpo_class.bottom")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Power.power_class.power2" ("\<^const>Set.empty"))
###     ("\<^const>Pcpo.pcpo_class.bottom")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "list_pairs"
  Proving monotonicity ...
### theory "Draft.CoCallGraph"
### 1.608s elapsed time, 6.121s cpu time, 1.359s GC time
Loading theory "Draft.CoCallAnalysisSig" (required by "Draft.CallArityEnd2EndTemplates" via "Draft.CallArityEnd2End" via "Draft.CoCallAnalysisImpl" via "Draft.CoCallFix")
Loading theory "Draft.CoCallGraph-Nominal" (required by "Draft.CallArityEnd2EndTemplates" via "Draft.CallArityEnd2End" via "Draft.CoCallAnalysisImpl" via "Draft.CoCallFix" via "Draft.CoCallAnalysisBinds")
locale ArityAnalysis
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
locale ArityAnalysisHeap
  fixes
    Aheap ::
      "(Vars.var * exp) list
       => exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
locale EdomArityAnalysis
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "EdomArityAnalysis Aexp"
instantiation
  CoCalls :: pt
  permute_CoCalls == permute :: perm => CoCalls => CoCalls
locale ArityAnalysisHeapEqvt
  fixes
    Aheap ::
      "(Vars.var * exp) list
       => exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "ArityAnalysisHeapEqvt Aheap"
### theory "Draft.ArityAnalysisSig"
### 0.946s elapsed time, 3.536s cpu time, 1.011s GC time
Loading theory "Draft.ArityAnalysisAbinds" (required by "Draft.CallArityEnd2EndTemplates" via "Draft.CallArityEnd2End" via "Draft.CoCallAnalysisImpl" via "Draft.CoCallFix" via "Draft.ArityAnalysisFix")
### theory "Draft.CoCallGraph-Nominal"
### 0.323s elapsed time, 1.274s cpu time, 0.081s GC time
locale ArityAnalysis
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
locale supp_bounded_transform
  fixes trans :: "'a => exp => exp"
  assumes "supp_bounded_transform trans"
### theory "Draft.TransformTools"
### 0.775s elapsed time, 2.726s cpu time, 0.240s GC time
Loading theory "Draft.AbstractTransform" (required by "Draft.CallArityEnd2EndTemplates" via "Draft.CallArityEnd2End" via "Draft.ArityTransform")
Loading theory "Draft.ArityEtaExpansion" (required by "Draft.CallArityEnd2EndTemplates" via "Draft.CallArityEnd2End" via "Draft.ArityTransform" via "Draft.ArityEtaExpansionSafe")
locale CoCallAnalysis
  fixes ccExp :: "exp => Arity -> CoCalls"
locale CoCallAnalyisHeap
  fixes ccHeap :: "(Vars.var * exp) list => exp => Arity -> CoCalls"
### theory "Draft.CoCallAnalysisSig"
### 0.635s elapsed time, 2.248s cpu time, 0.206s GC time
Loading theory "Draft.CoCallAnalysisBinds" (required by "Draft.CallArityEnd2EndTemplates" via "Draft.CallArityEnd2End" via "Draft.CoCallAnalysisImpl" via "Draft.CoCallFix")
locale EdomArityAnalysis
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "EdomArityAnalysis Aexp"
### theory "Draft.ArityAnalysisAbinds"
### 0.349s elapsed time, 1.127s cpu time, 0.125s GC time
Loading theory "Draft.ArityAnalysisFix" (required by "Draft.CallArityEnd2EndTemplates" via "Draft.CallArityEnd2End" via "Draft.CoCallAnalysisImpl" via "Draft.CoCallFix")
locale AbstractAnalProp
  fixes PropApp :: "'a => 'a"
    and PropLam :: "'a => 'a"
    and AnalLet :: "(Vars.var * exp) list => exp => 'a => 'b"
    and PropLetBody :: "'b => 'a"
    and PropLetHeap :: "'b => Vars.var => 'a\<^sub>\<bottom>"
    and PropIfScrut :: "'a => 'a"
  assumes
    "AbstractAnalProp PropApp PropLam AnalLet PropLetBody PropLetHeap
      PropIfScrut"
locale AbstractAnalPropSubst
  fixes PropApp :: "'a => 'a"
    and PropLam :: "'a => 'a"
    and AnalLet :: "(Vars.var * exp) list => exp => 'a => 'b"
    and PropLetBody :: "'b => 'a"
    and PropLetHeap :: "'b => Vars.var => 'a\<^sub>\<bottom>"
    and PropIfScrut :: "'a => 'a"
  assumes
    "AbstractAnalPropSubst PropApp PropLam AnalLet PropLetBody PropLetHeap
      PropIfScrut"
locale ArityAnalysis
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
locale AbstractTransform
  fixes PropApp :: "'a => 'a"
    and PropLam :: "'a => 'a"
    and AnalLet :: "(Vars.var * exp) list => exp => 'a => 'b"
    and PropLetBody :: "'b => 'a"
    and PropLetHeap :: "'b => Vars.var => 'a\<^sub>\<bottom>"
    and PropIfScrut :: "'a => 'a"
    and TransVar :: "'a => Vars.var => exp"
    and TransApp :: "'a => exp => Vars.var => exp"
    and TransLam :: "'a => Vars.var => exp => exp"
    and TransLet :: "'b => (Vars.var * exp) list => exp => exp"
  assumes
    "AbstractTransform PropApp PropLam AnalLet PropLetBody PropLetHeap
      PropIfScrut TransVar TransApp TransLam TransLet"
locale EdomArityAnalysis
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "EdomArityAnalysis Aexp"
### theory "Draft.ArityAnalysisFix"
### 0.208s elapsed time, 0.820s cpu time, 0.080s GC time
locale AbstractTransformSubst
  fixes PropApp :: "'a => 'a"
    and PropLam :: "'a => 'a"
    and AnalLet :: "(Vars.var * exp) list => exp => 'a => 'b"
    and PropLetBody :: "'b => 'a"
    and PropLetHeap :: "'b => Vars.var => 'a\<^sub>\<bottom>"
    and PropIfScrut :: "'a => 'a"
    and TransVar :: "'a => Vars.var => exp"
    and TransApp :: "'a => exp => Vars.var => exp"
    and TransLam :: "'a => Vars.var => exp => exp"
    and TransLet :: "'b => (Vars.var * exp) list => exp => exp"
  assumes
    "AbstractTransformSubst PropApp PropLam AnalLet PropLetBody PropLetHeap
      PropIfScrut TransVar TransApp TransLam TransLet"
locale AbstractTransformBound
  fixes PropApp :: "'a => 'a"
    and PropLam :: "'a => 'a"
    and AnalLet :: "(Vars.var * exp) list => exp => 'a => 'b"
    and PropLetBody :: "'b => 'a"
    and PropLetHeap :: "'b => Vars.var => 'a\<^sub>\<bottom>"
    and PropIfScrut :: "'a => 'a"
    and trans :: "'c => exp => exp"
    and PropLetHeapTrans :: "'b => Vars.var => 'c\<^sub>\<bottom>"
  assumes
    "AbstractTransformBound PropApp PropLam AnalLet PropLetBody PropLetHeap
      PropIfScrut trans PropLetHeapTrans"
### theory "Draft.ArityEtaExpansion"
### 0.921s elapsed time, 3.149s cpu time, 1.165s GC time
Loading theory "Draft.ArityEtaExpansionSafe" (required by "Draft.CallArityEnd2EndTemplates" via "Draft.CallArityEnd2End" via "Draft.ArityTransform")
locale AbstractTransformBoundSubst
  fixes PropApp :: "'a => 'a"
    and PropLam :: "'a => 'a"
    and AnalLet :: "(Vars.var * exp) list => exp => 'a => 'b"
    and PropLetBody :: "'b => 'a"
    and PropLetHeap :: "'b => Vars.var => 'a\<^sub>\<bottom>"
    and PropIfScrut :: "'a => 'a"
    and trans :: "'c => exp => exp"
    and PropLetHeapTrans :: "'b => Vars.var => 'c\<^sub>\<bottom>"
  assumes
    "AbstractTransformBoundSubst PropApp PropLam AnalLet PropLetBody
      PropLetHeap PropIfScrut trans PropLetHeapTrans"
### theory "Draft.AbstractTransform"
### 1.180s elapsed time, 3.917s cpu time, 1.213s GC time
locale CoCallAnalysis
  fixes ccExp :: "exp => Arity -> CoCalls"
### Ambiguous input (line 12 of "$AFP/Call_Arity/CoCallAnalysisBinds.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Cfun.cfun.Rep_cfun"
###       ("_applC" ("_position" ccBind)
###         ("_cargs" ("_position" v) ("_position" e)))
###       ("_tuple" ("_position" ae) ("_tuple_arg" ("_position" G))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.disj"
###         ("\<^const>CoCallGraph.notInCC" ("_position" v) ("_position" v)
###           ("_position" G))
###         ("\<^const>HOL.Not" ("_applC" ("_position" isVal) ("_position" e))))
###       ("\<^const>CoCallGraph.cc_restr_sym"
###         ("_applC"
###           ("\<^const>local.ccExp_bot_syn"
###             ("_applC" ("_position" ae) ("_position" v)))
###           ("_position" e))
###         ("_applC" ("_position" fv) ("_position" e)))
###       ("\<^const>Power.power_class.power2"
###         ("_applC" ("_position" fv) ("_position" e))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Cfun.cfun.Rep_cfun"
###       ("_applC" ("_position" ccBind)
###         ("_cargs" ("_position" v) ("_position" e)))
###       ("_tuple" ("_position" ae) ("_tuple_arg" ("_position" G))))
###     ("\<^const>HOL.If"
###       ("\<^const>HOL.disj"
###         ("\<^const>CoCallGraph.notInCC" ("_position" v) ("_position" v)
###           ("_position" G))
###         ("\<^const>HOL.Not" ("_applC" ("_position" isVal) ("_position" e))))
###       ("\<^const>CoCallGraph.cc_restr_sym"
###         ("_applC"
###           ("\<^const>local.ccExp_bot_syn"
###             ("_applC" ("_position" ae) ("_position" v)))
###           ("_position" e))
###         ("_applC" ("_position" fv) ("_position" e)))
###       ("\<^const>CoCallGraph.ccSquare"
###         ("_applC" ("_position" fv) ("_position" e))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.CoCallAnalysisBinds"
### 1.394s elapsed time, 4.343s cpu time, 1.282s GC time
Loading theory "Draft.CoCallFix" (required by "Draft.CallArityEnd2EndTemplates" via "Draft.CallArityEnd2End" via "Draft.CoCallAnalysisImpl")
### theory "Draft.ArityEtaExpansionSafe"
### 0.606s elapsed time, 1.509s cpu time, 0.116s GC time
Loading theory "Draft.ArityTransform" (required by "Draft.CallArityEnd2EndTemplates" via "Draft.CallArityEnd2End")
locale CoCallArityAnalysis
  fixes
    cccExp ::
      "exp => Arity -> (Vars.var => Arity\<^sub>\<bottom>) * CoCalls"
locale ArityAnalysisHeapEqvt
  fixes
    Aheap ::
      "(Vars.var * exp) list
       => exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "ArityAnalysisHeapEqvt Aheap"
locale CoCallArityAnalysis
  fixes
    cccExp ::
      "exp => Arity -> (Vars.var => Arity\<^sub>\<bottom>) * CoCalls"
locale CoCallArityAnalysis
  fixes
    cccExp ::
      "exp => Arity -> (Vars.var => Arity\<^sub>\<bottom>) * CoCalls"
### theory "Draft.ArityTransform"
### 0.608s elapsed time, 1.271s cpu time, 0.128s GC time
locale CoCallArityAnalysis
  fixes
    cccExp ::
      "exp => Arity -> (Vars.var => Arity\<^sub>\<bottom>) * CoCalls"
### theory "Draft.CoCallFix"
### 0.812s elapsed time, 1.592s cpu time, 0.128s GC time
Loading theory "Draft.CoCallAnalysisImpl" (required by "Draft.CallArityEnd2EndTemplates" via "Draft.CallArityEnd2End")
Found termination order: "{}"
locale CoCallAnalysisImpl
### Ambiguous input (line 218 of "$AFP/Call_Arity/CoCallAnalysisImpl.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>CoCallAnalysisImpl.CoCallAnalysisImpl.ccExp_syn''"
###         ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>Terms.Lam" ("_position" x) ("_position" e)))
###     ("\<^const>CoCallGraph.ccSquare"
###       ("_applC" ("_position" fv)
###         ("\<^const>Terms.Lam" ("_position" x) ("_position" e))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>CoCallAnalysisImpl.CoCallAnalysisImpl.ccExp_syn''"
###         ("\<^const>Groups.zero_class.zero"))
###       ("\<^const>Terms.Lam" ("_position" x) ("_position" e)))
###     ("\<^const>Power.power_class.power2"
###       ("_applC" ("_position" fv)
###         ("\<^const>Terms.Lam" ("_position" x) ("_position" e))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Replacing existing raw equivariance theorem for "Aheap".
### Replacing existing raw equivariance theorem for "Aheap".
### theory "Draft.CoCallAnalysisImpl"
### 1.064s elapsed time, 1.166s cpu time, 0.142s GC time
Loading theory "Draft.CallArityEnd2End" (required by "Draft.CallArityEnd2EndTemplates")
locale CallArityEnd2End
### Replacing existing raw equivariance theorem for "Aheap".
### Replacing existing raw equivariance theorem for "Aheap".
### theory "Draft.CallArityEnd2End"
### 0.515s elapsed time, 0.561s cpu time, 0.057s GC time
Loading theory "Draft.CallArityEnd2EndTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.CallArityEnd2EndTemplates"
### 0.708s elapsed time, 0.913s cpu time, 0.122s GC time
val it = (): unit
