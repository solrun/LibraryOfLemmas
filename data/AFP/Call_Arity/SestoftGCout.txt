Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SestoftGCTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SestoftGCTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.SestoftGCTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Tree" (required by "Draft.SestoftGCTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.129s elapsed time, 0.537s cpu time, 0.050s GC time
Loading theory "Draft.SestoftConf" (required by "Draft.SestoftGCTemplates" via "Draft.SestoftGC" via "Draft.Sestoft")
### theory "HOL-Library.Set_Algebras"
### 0.216s elapsed time, 0.878s cpu time, 0.050s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SestoftGCTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
instantiation
  stack_elem :: pt
  permute_stack_elem == permute :: perm => stack_elem => stack_elem
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size_list size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.937s elapsed time, 3.702s cpu time, 0.401s GC time
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.075s elapsed time, 3.901s cpu time, 0.918s GC time
Proofs for inductive predicate(s) "boring_step"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "invariant"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.SestoftConf"
### 1.549s elapsed time, 5.104s cpu time, 1.033s GC time
Loading theory "Draft.Sestoft" (required by "Draft.SestoftGCTemplates" via "Draft.SestoftGC")
Proofs for inductive predicate(s) "step"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
  Proving monotonicity ...
### theory "Draft.Sestoft"
### 0.163s elapsed time, 0.329s cpu time, 0.000s GC time
Loading theory "Draft.SestoftGC" (required by "Draft.SestoftGCTemplates")
Proofs for inductive predicate(s) "gc_step"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.SestoftGC"
### 0.257s elapsed time, 0.578s cpu time, 0.145s GC time
### theory "HOL-Library.Tree"
### 2.115s elapsed time, 6.561s cpu time, 1.228s GC time
Loading theory "Draft.Templates" (required by "Draft.SestoftGCTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.071s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SestoftGCTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.458s elapsed time, 0.466s cpu time, 0.000s GC time
Loading theory "Draft.SestoftGCTemplates"
val templateLemmas =
   [("SestoftGC.safe_hd_None", "(safe_hd ?xs = None) = (?xs = [])",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("SestoftGC.restr_stack_map_Dummy",
     "restr_stack ?V (map Dummy ?l) = map Dummy ?l",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("SestoftGC.delete_restrictA_conv",
     "delete ?x ?\<Gamma> = restrictA (- {?x}) ?\<Gamma>",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))),
         template_var 0))),
    ("SestoftGC.normal_trans",
     "?c \<Rightarrow>\<^sup>* ?c' ==>
      ?c \<Rightarrow>\<^sub>G\<^sup>* ?c'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 0),
               template_var 1),
             template_var 0)
           ))),
    ("SestoftGC.to_gc_conf_append",
     "to_gc_conf (?r @ ?r') ?c = to_gc_conf ?r (to_gc_conf ?r' ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("SestoftGC.dummies_unchanged_invariant",
     "invariant (\<Rightarrow>) (%(\<Gamma>, e, S). dummies S = ?V)",
     template_predicate
      (
         template_app
          (template_app (template_hole 5, template_hole 4),
           template_app (template_hole 3, t_empty))
         )),
    ("SestoftGC.upds_list_restr_stack",
     "upds_list (restr_stack ?V ?S) = filter (%x. x : ?V) (upds_list ?S)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, t_empty),
         template_app (template_hole 3, template_var 0)))),
    ("SestoftGC.perm_exI_trivial",
     "?P ?x ?x ==> EX \<pi>. ?P (\<pi> \<bullet> ?x) ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 1, template_var 0), template_var 0)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("SestoftGC.restr_stack_append",
     "restr_stack ?V (?l @ ?l') = restr_stack ?V ?l @ restr_stack ?V ?l'",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("SestoftGC.subset_bound_invariant",
     "invariant (\<Rightarrow>) (r_ok ?r)",
     template_predicate
      (
         template_app
          (template_app (template_hole 9, template_hole 8), t_empty)
         )),
    ("SestoftGC.gc_step_intros",
     "(?\<Gamma>, App ?e ?x, ?S) \<Rightarrow>\<^sub>G
      (?\<Gamma>, ?e, stack_elem.Arg ?x # ?S)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 3),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 1)),
                 template_var 0))),
           template_app
            (template_app (template_hole 4, template_var 3),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1)),
                 template_var 0))))
         )),
    ("SestoftGC.gc_step_intros",
     "(?\<Gamma>, ?e, Upd ?x # ?S) \<Rightarrow>\<^sub>G
      (?\<Gamma>, ?e, ?S @ [Dummy ?x])",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 3),
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 1)),
                   template_var 0)))),
           template_app
            (template_app (template_hole 6, template_var 3),
             template_app
              (template_app (template_hole 5, template_var 2),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 1, template_var 1)),
                   template_hole 0)))))
         )),
    ("SestoftGC.gc_step_intros",
     "(?\<Gamma>, Lam [?y]. ?e,
       stack_elem.Arg ?x # ?S) \<Rightarrow>\<^sub>G
      (?\<Gamma>, ?e[?y::=?x], ?S)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 4),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 1)),
                   template_var 0)))),
           template_app
            (template_app (template_hole 5, template_var 4),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 3),
                   template_var 1)),
               template_var 0)))
         )),
    ("SestoftGC.safe_hd_restr_stack",
     "(Some ?a = safe_hd (restr_stack ?V (?a # ?S))) =
      (restr_stack ?V (?a # ?S) = ?a # restr_stack ?V ?S)",
     template_bimplication
      (template_equation
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)))),
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("SestoftGC.gc_step_intros",
     "map_of ?\<Gamma> ?x = Some ?e ==>
      (?\<Gamma>, Var ?x, ?S) \<Rightarrow>\<^sub>G
      (delete ?x ?\<Gamma>, ?e, Upd ?x # ?S)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, template_var 3), template_var 2),
          template_app (template_hole 7, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 2)),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 3)),
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 2)),
                   template_var 0))))
           ))),
    ("SestoftGC.heap_upd_ok_to_gc_conf",
     "[| heap_upds_ok (?\<Gamma>, ?S);
         to_gc_conf ?r (?\<Gamma>, ?e, ?S) = (?\<Gamma>'', ?e'', ?S'') |]
      ==> heap_upds_ok (?\<Gamma>'', ?S'')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 6),
                template_var 5))
            ),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 4),
            template_app
             (template_app (template_hole 1, template_var 6),
              template_app
               (template_app (template_hole 0, template_var 3),
                template_var 5))),
          template_app
           (template_app (template_hole 1, template_var 2),
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)))],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 0))
           ))),
    ("SestoftGC.var_onceI",
     "map_of ?\<Gamma> ?x = Some ?e ==>
      (?\<Gamma>, Var ?x, ?S) \<Rightarrow>\<^sub>G\<^sup>*
      (delete ?x ?\<Gamma>, ?e, ?S @ [Dummy ?x])",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 11, template_var 3),
            template_var 2),
          template_app (template_hole 10, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 9, template_hole 8),
               template_app
                (template_app (template_hole 7, template_var 3),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_var 2)),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 3)),
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 2)),
                     template_hole 0)))))
           ))),
    ("SestoftGC.gc_step_intros",
     "[| ?x ~: domA ?\<Gamma>; isVal ?e |]
      ==> (?\<Gamma>, ?e, Upd ?x # ?S) \<Rightarrow>\<^sub>G
          ((?x, ?e) # ?\<Gamma>, ?e, ?S)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 9, template_var 3),
                  template_app (template_hole 8, template_var 2))
                )
            ),
        template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 3)),
                     template_var 0)))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 1)),
                   template_var 2)),
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0)))
           ))),
    ("SestoftGC.gc_step_intros",
     "[| atom ` domA ?\<Delta> \<sharp>* ?\<Gamma>;
         atom ` domA ?\<Delta> \<sharp>* ?S |]
      ==> (?\<Gamma>, Terms.Let ?\<Delta> ?e, ?S) \<Rightarrow>\<^sub>G
          (?\<Delta> @ ?\<Gamma>, ?e, ?S)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_app (template_hole 6, template_var 3))),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_app (template_hole 6, template_var 3))),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 3),
                       template_var 0)),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2)),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1)))
           ))),
    ("SestoftGC.to_gc_conf_eqE",
     "[| to_gc_conf ?r ?c = (?\<Gamma>, ?e, ?S);
         !!\<Gamma>' S'.
            [| ?c = (\<Gamma>', ?e, S');
               ?\<Gamma> = restrictA (- set ?r) \<Gamma>';
               ?S = restr_stack (- set ?r) S' @ map Dummy (rev ?r) |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 14, template_var 5),
            template_var 4),
          template_app
           (template_app (template_hole 13, template_var 3),
            template_app
             (template_app (template_hole 12, template_var 2),
              template_var 1))),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate (template_var 0))),
    ("SestoftGC.sestoftUnGC'",
     "[| ([], ?e, []) \<Rightarrow>\<^sub>G\<^sup>*
         (?\<Gamma>, ?e', map Dummy ?r);
         isVal ?e'; fv ?e = {} |]
      ==> EX \<Gamma>''.
             ([], ?e, []) \<Rightarrow>\<^sup>* (\<Gamma>'', ?e', []) &
             ?\<Gamma> = restrictA (- set ?r) \<Gamma>'' &
             set ?r <= domA \<Gamma>''",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 20, template_hole 19),
                template_app
                 (template_app (template_hole 18, template_hole 17),
                  template_app
                   (template_app (template_hole 16, template_var 3),
                    template_hole 15))),
              template_app
               (template_app (template_hole 18, template_var 2),
                template_app
                 (template_app (template_hole 16, template_var 1),
                  template_app
                   (template_app (template_hole 14, template_hole 13),
                    template_var 0))))
            ),
        template_predicate
         (template_app (template_hole 12, template_var 1)),
        template_equation
         (template_app (template_hole 10, template_var 3),
          template_hole 9)],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("SestoftGC.sestoftUnGCstep",
     "[| to_gc_conf ?r ?c \<Rightarrow>\<^sub>G ?d; heap_upds_ok_conf ?c;
         SestoftConf.closed ?c; r_ok ?r ?c |]
      ==> EX r' c'.
             ?c \<Rightarrow>\<^sup>* c' &
             ?d = to_gc_conf r' c' & r_ok r' c'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_app (template_hole 17, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 16,
              template_app
               (template_app
                 (template_hole 15,
                  template_app (template_hole 14, template_var 1)),
                template_app
                 (template_hole 13,
                  template_app (template_hole 12, template_var 1))))
            ),
        template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 9, template_var 2),
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 14, template_var 1))),
            template_app
             (template_hole 6,
              template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 1)))))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("SestoftGC.sestoftUnGCStack",
     "[| heap_upds_ok (?\<Gamma>, ?S);
         !!\<Gamma>' S'.
            [| (?\<Gamma>, ?e, ?S) \<Rightarrow>\<^sup>*
               (\<Gamma>', ?e, S');
               to_gc_conf ?r (?\<Gamma>, ?e, ?S) =
               to_gc_conf ?r (\<Gamma>', ?e, S');
               ~ isVal ?e |
               safe_hd S' = safe_hd (restr_stack (- set ?r) S') |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 17,
              template_app
               (template_app (template_hole 16, template_var 4),
                template_var 3))
            ),
        template_predicate (template_app (template_hole 15, t_empty))],
       template_predicate (template_var 0))),
    ("SestoftGC.sestoftUnGC",
     "[| to_gc_conf ?r ?c \<Rightarrow>\<^sub>G\<^sup>* ?d;
         heap_upds_ok_conf ?c; SestoftConf.closed ?c; r_ok ?r ?c |]
      ==> EX r' c'.
             ?c \<Rightarrow>\<^sup>* c' &
             ?d = to_gc_conf r' c' & r_ok r' c'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 18, template_hole 17),
                template_app
                 (template_app (template_hole 16, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 15,
              template_app
               (template_app
                 (template_hole 14,
                  template_app (template_hole 13, template_var 1)),
                template_app
                 (template_hole 12,
                  template_app (template_hole 11, template_var 1))))
            ),
        template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 8, template_var 2),
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 13, template_var 1))),
            template_app
             (template_hole 5,
              template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 1)))))],
       template_predicate (template_app (template_hole 4, t_empty))))]:
   (string * thm * template) list
### theory "Draft.SestoftGCTemplates"
### 0.526s elapsed time, 0.743s cpu time, 0.134s GC time
val it = (): unit
