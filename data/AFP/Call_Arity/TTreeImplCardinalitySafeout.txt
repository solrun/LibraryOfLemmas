Loading theory "Draft.ConstOn" (required by "Draft.TTreeImplCardinalitySafeTemplates" via "Draft.TTreeImplCardinalitySafe" via "Draft.TTreeImplCardinality" via "Draft.TTreeAnalysisSig" via "Draft.TTree-HOLCF" via "Draft.TTree")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.TTreeImplCardinalitySafeTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.List-Interleavings" (required by "Draft.TTreeImplCardinalitySafeTemplates" via "Draft.TTreeImplCardinalitySafe" via "Draft.TTreeImplCardinality" via "Draft.TTreeAnalysisSig" via "Draft.TTree-HOLCF" via "Draft.TTree")
Loading theory "HOL-Library.Stream" (required by "Draft.TTreeImplCardinalitySafeTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
Proofs for inductive predicate(s) "interleave'"
  Proving monotonicity ...
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "Draft.ConstOn"
### 0.051s elapsed time, 0.240s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.TTreeImplCardinalitySafeTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.144s elapsed time, 0.589s cpu time, 0.045s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.TTreeImplCardinalitySafeTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.208s elapsed time, 0.810s cpu time, 0.045s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.TTreeImplCardinalitySafeTemplates" via "Draft.ExtrEqs")
### theory "Draft.List-Interleavings"
### 0.266s elapsed time, 1.070s cpu time, 0.045s GC time
Loading theory "Draft.TTree" (required by "Draft.TTreeImplCardinalitySafeTemplates" via "Draft.TTreeImplCardinalitySafe" via "Draft.TTreeImplCardinality" via "Draft.TTreeAnalysisSig" via "Draft.TTree-HOLCF")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.849s elapsed time, 3.341s cpu time, 0.315s GC time
Loading theory "Draft.Set-Cpo" (required by "Draft.TTreeImplCardinalitySafeTemplates" via "Draft.TTreeImplCardinalitySafe" via "Draft.TTreeImplCardinality" via "Draft.TTreeAnalysisSig" via "Draft.TTree-HOLCF")
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
instantiation
  set :: (type) below
  below_set == below :: 'a set => 'a set => bool
### theory "Draft.Set-Cpo"
### 0.055s elapsed time, 0.214s cpu time, 0.000s GC time
Loading theory "Draft.Arity" (required by "Draft.TTreeImplCardinalitySafeTemplates" via "Draft.TTreeImplCardinalitySafe" via "Draft.TTreeImplCardinality" via "Draft.TTreeAnalysisSig")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  Arity :: po
  below_Arity == below :: Arity => Arity => bool
Found termination order: "(%p. length (snd (snd (snd p)))) <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.933s elapsed time, 3.543s cpu time, 0.721s GC time
Loading theory "Draft.SestoftConf" (required by "Draft.TTreeImplCardinalitySafeTemplates" via "Draft.TTreeImplCardinalitySafe" via "Draft.TTreeImplCardinality" via "Draft.CardinalityAnalysisSig")
instantiation
  Arity :: zero
  zero_Arity == zero_class.zero :: Arity
Found termination order: "size <*mlex*> {}"
### Ignoring conversion rule for operator Set.member
### Ignoring conversion rule for operator Set.member
instantiation
  Arity :: one
  one_Arity == one_class.one :: Arity
### theory "Draft.Arity"
### 0.378s elapsed time, 1.357s cpu time, 0.538s GC time
Loading theory "Draft.AEnv" (required by "Draft.TTreeImplCardinalitySafeTemplates" via "Draft.TTreeImplCardinalitySafe" via "Draft.TTreeImplCardinality" via "Draft.CardinalityAnalysisSig")
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "substitute''"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
### theory "Draft.TTree"
### 1.171s elapsed time, 4.480s cpu time, 0.811s GC time
Loading theory "Draft.Env-Set-Cpo" (required by "Draft.TTreeImplCardinalitySafeTemplates" via "Draft.TTreeImplCardinalitySafe" via "Draft.TTreeImplCardinality" via "Draft.Cardinality-Domain-Lists")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  stack_elem :: pt
  permute_stack_elem == permute :: perm => stack_elem => stack_elem
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Env-Set-Cpo"
### 0.239s elapsed time, 0.945s cpu time, 0.085s GC time
Loading theory "Draft.AnalBinds" (required by "Draft.TTreeImplCardinalitySafeTemplates" via "Draft.TTreeImplCardinalitySafe" via "Draft.TTreeImplCardinality" via "Draft.TTreeAnalysisSig")
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.AEnv"
### 0.728s elapsed time, 2.848s cpu time, 0.315s GC time
Loading theory "Draft.Cardinality-Domain" (required by "Draft.TTreeImplCardinalitySafeTemplates" via "Draft.TTreeImplCardinalitySafe" via "Draft.TTreeImplCardinality" via "Draft.CardinalityAnalysisSig")
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.Cardinality-Domain"
### 0.089s elapsed time, 0.365s cpu time, 0.000s GC time
Loading theory "Draft.TTree-HOLCF" (required by "Draft.TTreeImplCardinalitySafeTemplates" via "Draft.TTreeImplCardinalitySafe" via "Draft.TTreeImplCardinality" via "Draft.TTreeAnalysisSig")
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Proofs for inductive predicate(s) "boring_step"
  Proving monotonicity ...
### theory "HOL-Library.Tree"
### 2.153s elapsed time, 8.325s cpu time, 1.174s GC time
Loading theory "Draft.Templates" (required by "Draft.TTreeImplCardinalitySafeTemplates" via "Draft.ExtrEqs")
locale ExpAnalysis
  fixes exp :: "exp => 'a -> 'b"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.067s elapsed time, 0.259s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.TTreeImplCardinalitySafeTemplates")
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### Additional type variable(s) in specification of "AnalBinds_rel": 'a
Proofs for inductive predicate(s) "invariant"
### Additional type variable(s) in specification of "AnalBinds_dom": 'a
  Proving monotonicity ...
Found termination order: "size_list (%p. size (snd p)) <*mlex*> {}"
### theory "Draft.AnalBinds"
### 0.802s elapsed time, 3.140s cpu time, 0.331s GC time
Loading theory "Draft.Arity-Nominal" (required by "Draft.TTreeImplCardinalitySafeTemplates" via "Draft.TTreeImplCardinalitySafe" via "Draft.TTreeAnalysisSpec" via "Draft.ArityAnalysisSpec" via "Draft.ArityAnalysisAbinds" via "Draft.ArityAnalysisSig")
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.SestoftConf"
### 1.408s elapsed time, 5.526s cpu time, 0.505s GC time
Loading theory "Draft.CardinalityAnalysisSig" (required by "Draft.TTreeImplCardinalitySafeTemplates" via "Draft.TTreeImplCardinalitySafe" via "Draft.TTreeImplCardinality")
instantiation
  ttree :: (type) below
  below_ttree == below :: 'a ttree => 'a ttree => bool
instantiation
  Arity :: pure
  permute_Arity == permute :: perm => Arity => Arity
### theory "Draft.Arity-Nominal"
### 0.496s elapsed time, 1.950s cpu time, 0.141s GC time
Loading theory "Draft.ArityAnalysisSig" (required by "Draft.TTreeImplCardinalitySafeTemplates" via "Draft.TTreeImplCardinalitySafe" via "Draft.TTreeAnalysisSpec" via "Draft.ArityAnalysisSpec" via "Draft.ArityAnalysisAbinds")
### theory "Draft.TTree-HOLCF"
### 0.940s elapsed time, 3.680s cpu time, 0.331s GC time
Loading theory "Draft.TTreeAnalysisSig" (required by "Draft.TTreeImplCardinalitySafeTemplates" via "Draft.TTreeImplCardinalitySafe" via "Draft.TTreeImplCardinality")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.699s elapsed time, 2.751s cpu time, 0.203s GC time
Loading theory "Draft.Cardinality-Domain-Lists" (required by "Draft.TTreeImplCardinalitySafeTemplates" via "Draft.TTreeImplCardinalitySafe" via "Draft.TTreeImplCardinality")
locale CardinalityPrognosis
  fixes
    prognosis ::
      "(Vars.var => Arity\<^sub>\<bottom>)
       => Arity list
          => Arity
             => (Vars.var * exp) list * exp * stack_elem list
                => Vars.var => one\<^sub>\<bottom>"
locale CardinalityHeap
  fixes
    cHeap ::
      "(Vars.var * exp) list
       => exp => Arity -> Vars.var => one\<^sub>\<bottom>"
### theory "Draft.CardinalityAnalysisSig"
### 0.628s elapsed time, 2.464s cpu time, 0.200s GC time
locale ArityAnalysis
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
locale ArityAnalysisHeap
  fixes
    Aheap ::
      "(Vars.var * exp) list
       => exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
locale EdomArityAnalysis
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "EdomArityAnalysis Aexp"
locale ArityAnalysisHeapEqvt
  fixes
    Aheap ::
      "(Vars.var * exp) list
       => exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "ArityAnalysisHeapEqvt Aheap"
### theory "Draft.ArityAnalysisSig"
### 0.636s elapsed time, 2.207s cpu time, 0.178s GC time
Loading theory "Draft.ArityAnalysisAbinds" (required by "Draft.TTreeImplCardinalitySafeTemplates" via "Draft.TTreeImplCardinalitySafe" via "Draft.TTreeAnalysisSpec" via "Draft.ArityAnalysisSpec")
locale ArityAnalysis
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
locale TTreeAnalysis
  fixes Texp :: "exp => Arity -> Vars.var ttree"
### theory "Draft.TTreeAnalysisSig"
### 0.731s elapsed time, 2.465s cpu time, 0.178s GC time
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale EdomArityAnalysis
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "EdomArityAnalysis Aexp"
### theory "Draft.ArityAnalysisAbinds"
### 0.305s elapsed time, 0.758s cpu time, 0.047s GC time
Loading theory "Draft.ArityAnalysisSpec" (required by "Draft.TTreeImplCardinalitySafeTemplates" via "Draft.TTreeImplCardinalitySafe" via "Draft.TTreeAnalysisSpec")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale SubstArityAnalysis
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "SubstArityAnalysis Aexp"
locale ArityAnalysisSafe
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "ArityAnalysisSafe Aexp"
### theory "Draft.Cardinality-Domain-Lists"
### 1.003s elapsed time, 2.954s cpu time, 0.260s GC time
Loading theory "Draft.TTreeImplCardinality" (required by "Draft.TTreeImplCardinalitySafeTemplates" via "Draft.TTreeImplCardinalitySafe")
locale ArityAnalysisHeapSafe
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
    and
    Aheap ::
      "(Vars.var * exp) list
       => exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "ArityAnalysisHeapSafe Aexp Aheap"
locale ArityAnalysisLetSafe
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
    and
    Aheap ::
      "(Vars.var * exp) list
       => exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "ArityAnalysisLetSafe Aexp Aheap"
locale ArityAnalysisLetSafeNoCard
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
    and
    Aheap ::
      "(Vars.var * exp) list
       => exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "ArityAnalysisLetSafeNoCard Aexp Aheap"
locale SubstArityAnalysis
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "SubstArityAnalysis Aexp"
locale ArityAnalysisSafe
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "ArityAnalysisSafe Aexp"
locale ArityAnalysisLetSafe
  fixes Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
    and
    Aheap ::
      "(Vars.var * exp) list
       => exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "ArityAnalysisLetSafe Aexp Aheap"
### theory "Draft.ArityAnalysisSpec"
### 0.258s elapsed time, 0.527s cpu time, 0.035s GC time
Loading theory "Draft.CardinalityAnalysisSpec" (required by "Draft.TTreeImplCardinalitySafeTemplates" via "Draft.TTreeImplCardinalitySafe")
Loading theory "Draft.TTreeAnalysisSpec" (required by "Draft.TTreeImplCardinalitySafeTemplates" via "Draft.TTreeImplCardinalitySafe")
locale TTreeAnalysis
  fixes Texp :: "exp => Arity -> Vars.var ttree"
locale CardinalityPrognosisEdom
  fixes
    prognosis ::
      "(Vars.var => Arity\<^sub>\<bottom>)
       => Arity list
          => Arity
             => (Vars.var * exp) list * exp * stack_elem list
                => Vars.var => one\<^sub>\<bottom>"
  assumes "CardinalityPrognosisEdom prognosis"
locale CardinalityPrognosisShape
  fixes
    prognosis ::
      "(Vars.var => Arity\<^sub>\<bottom>)
       => Arity list
          => Arity
             => (Vars.var * exp) list * exp * stack_elem list
                => Vars.var => one\<^sub>\<bottom>"
  assumes "CardinalityPrognosisShape prognosis"
locale CardinalityPrognosisApp
  fixes
    prognosis ::
      "(Vars.var => Arity\<^sub>\<bottom>)
       => Arity list
          => Arity
             => (Vars.var * exp) list * exp * stack_elem list
                => Vars.var => one\<^sub>\<bottom>"
  assumes "CardinalityPrognosisApp prognosis"
locale CardinalityPrognosisLam
  fixes
    prognosis ::
      "(Vars.var => Arity\<^sub>\<bottom>)
       => Arity list
          => Arity
             => (Vars.var * exp) list * exp * stack_elem list
                => Vars.var => one\<^sub>\<bottom>"
  assumes "CardinalityPrognosisLam prognosis"
locale CardinalityPrognosisVar
  fixes
    prognosis ::
      "(Vars.var => Arity\<^sub>\<bottom>)
       => Arity list
          => Arity
             => (Vars.var * exp) list * exp * stack_elem list
                => Vars.var => one\<^sub>\<bottom>"
  assumes "CardinalityPrognosisVar prognosis"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
locale CardinalityPrognosisIfThenElse
  fixes
    prognosis ::
      "(Vars.var => Arity\<^sub>\<bottom>)
       => Arity list
          => Arity
             => (Vars.var * exp) list * exp * stack_elem list
                => Vars.var => one\<^sub>\<bottom>"
  assumes "CardinalityPrognosisIfThenElse prognosis"
locale CardinalityPrognosisLet
  fixes
    prognosis ::
      "(Vars.var => Arity\<^sub>\<bottom>)
       => Arity list
          => Arity
             => (Vars.var * exp) list * exp * stack_elem list
                => Vars.var => one\<^sub>\<bottom>"
    and
    cHeap ::
      "(Vars.var * exp) list
       => exp => Arity -> Vars.var => one\<^sub>\<bottom>"
    and
    Aheap ::
      "(Vars.var * exp) list
       => exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "CardinalityPrognosisLet prognosis cHeap Aheap"
locale CardinalityHeapSafe
  fixes
    cHeap ::
      "(Vars.var * exp) list
       => exp => Arity -> Vars.var => one\<^sub>\<bottom>"
    and
    Aheap ::
      "(Vars.var * exp) list
       => exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "CardinalityHeapSafe cHeap Aheap"
locale TTreeAnalysisCarrier
  fixes Texp :: "exp => Arity -> Vars.var ttree"
    and Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "TTreeAnalysisCarrier Texp Aexp"
locale CardinalityPrognosisSafe
  fixes
    prognosis ::
      "(Vars.var => Arity\<^sub>\<bottom>)
       => Arity list
          => Arity
             => (Vars.var * exp) list * exp * stack_elem list
                => Vars.var => one\<^sub>\<bottom>"
    and
    cHeap ::
      "(Vars.var * exp) list
       => exp => Arity -> Vars.var => one\<^sub>\<bottom>"
    and
    Aheap ::
      "(Vars.var * exp) list
       => exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
    and Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "CardinalityPrognosisSafe prognosis cHeap Aheap Aexp"
### theory "Draft.CardinalityAnalysisSpec"
### 0.626s elapsed time, 1.888s cpu time, 0.119s GC time
locale TTreeAnalysisSafe
  fixes Texp :: "exp => Arity -> Vars.var ttree"
    and Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "TTreeAnalysisSafe Texp Aexp"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
locale TTreeAnalysisCardinalityHeap
  fixes Texp :: "exp => Arity -> Vars.var ttree"
    and Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
    and
    Aheap ::
      "(Vars.var * exp) list
       => exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
    and Theap :: "(Vars.var * exp) list => exp => Arity -> Vars.var ttree"
  assumes "TTreeAnalysisCardinalityHeap Texp Aexp Aheap Theap"
### theory "Draft.TTreeAnalysisSpec"
### 0.775s elapsed time, 2.222s cpu time, 0.159s GC time
Found termination order: "{}"
### theory "Draft.TTreeImplCardinality"
### 0.929s elapsed time, 2.499s cpu time, 0.159s GC time
Loading theory "Draft.TTreeImplCardinalitySafe" (required by "Draft.TTreeImplCardinalitySafeTemplates")
locale TTreeAnalysisCarrier
  fixes Texp :: "exp => Arity -> Vars.var ttree"
    and Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "TTreeAnalysisCarrier Texp Aexp"
locale TTreeAnalysisSafe
  fixes Texp :: "exp => Arity -> Vars.var ttree"
    and Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
  assumes "TTreeAnalysisSafe Texp Aexp"
locale TTreeAnalysisCardinalityHeap
  fixes Texp :: "exp => Arity -> Vars.var ttree"
    and Aexp :: "exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
    and
    Aheap ::
      "(Vars.var * exp) list
       => exp => Arity -> Vars.var => Arity\<^sub>\<bottom>"
    and Theap :: "(Vars.var * exp) list => exp => Arity -> Vars.var ttree"
  assumes "TTreeAnalysisCardinalityHeap Texp Aexp Aheap Theap"
### theory "Draft.TTreeImplCardinalitySafe"
### 0.591s elapsed time, 0.613s cpu time, 0.032s GC time
Loading theory "Draft.TTreeImplCardinalitySafeTemplates"
val templateLemmas =
   [("TTreeImplCardinalitySafe.const_on_edom_disj",
     "const_on ?f ?S TTree.empty = (edom ?f Int ?S = {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_hole 0))),
    ("TTreeImplCardinalitySafe.pathsCard_paths_nxt",
     "pathsCard (paths (nxt ?f ?x)) <<
      record_call ?x$(pathsCard (paths ?f))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0)))),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1))))
         )),
    ("TTreeImplCardinalitySafe.pathsCards_none",
     "pathsCard (paths ?t) ?x = none ==> ?x ~: carrier ?t",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 1)),
            template_var 0),
          template_hole 3)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 1))
               )
           )))]:
   (string * thm * template) list
### theory "Draft.TTreeImplCardinalitySafeTemplates"
### 0.694s elapsed time, 0.866s cpu time, 0.094s GC time
val it = (): unit
