Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ZTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.ZTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Tree" (required by "Draft.ZTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ZTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.130s elapsed time, 0.543s cpu time, 0.050s GC time
Loading theory "Draft.Z" (required by "Draft.ZTemplates")
locale z_property
  fixes bullet :: "'a => 'a"  (\<open>_\<^sup>\<bullet>\<close> [1000])
    and R :: "('a * 'a) set"
  assumes "z_property bullet R"
locale angle_property
  fixes bullet :: "'a => 'a"  (\<open>_\<^sup>\<bullet>\<close> [1000])
    and R :: "('a * 'a) set"
    and R\<^sub>d :: "('a * 'a) set"
  assumes "angle_property bullet R R\<^sub>d"
### theory "Draft.Z"
### 0.048s elapsed time, 0.192s cpu time, 0.000s GC time
### theory "HOL-Library.Set_Algebras"
### 0.196s elapsed time, 0.784s cpu time, 0.050s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ZTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.863s elapsed time, 2.821s cpu time, 0.279s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.728s elapsed time, 2.160s cpu time, 0.229s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.859s elapsed time, 4.292s cpu time, 0.851s GC time
Loading theory "Draft.Templates" (required by "Draft.ZTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.049s elapsed time, 0.065s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ZTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.541s elapsed time, 0.597s cpu time, 0.067s GC time
Loading theory "Draft.ZTemplates"
val templateLemmas =
   [("Set_Interval.finite_atLeastZeroLessThan_int", "finite {0..<?u}",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))
         )),
    ("Limits.Zfun_zero", "Zfun (%x. 0::?'b) ?F",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)
         )),
    ("Zorn.well_order_on", "EX r. well_order_on ?A r",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Nat.Suc_Rep_not_Zero_Rep", "Suc_Rep ?x ~= Zero_Rep",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Nat.Zero_not_Suc", "0 ~= Suc ?m",
     template_negation
      (
         template_equation
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Nat.Suc_not_Zero", "Suc ?m ~= 0",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Transitive_Closure.ntrancl_Zero", "ntrancl 0 ?R = ?R",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Zorn.refl_on_init_seg_of", "?r initial_segment_of ?r",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 0)),
           template_hole 0)
         )),
    ("Set_Interval.card_atLeastZeroLessThan_int", "card {0..<?u} = nat ?u",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Nat.Zero_neq_Suc", "0 = Suc ?m ==> ?R",
     template_implication
      ([template_equation
         (template_hole 1, template_app (template_hole 0, template_var 1))],
       template_predicate (template_var 0))),
    ("Nat.Suc_neq_Zero", "Suc ?m = 0 ==> ?R",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 1), template_hole 0)],
       template_predicate (template_var 0))),
    ("Regular_Exp.le_rexp_Zero",
     "Regular_Exp.le_rexp ?r Zero ==> ?r = Zero",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_equation (template_var 0, template_hole 1))),
    ("Zorn.chainsD2", "?c : chains ?S ==> ?c <= ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("Zorn.mono_Chains", "?r <= ?s ==> Chains ?r <= Chains ?s",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Limits.Zfun_minus", "Zfun ?f ?F ==> Zfun (%x. - ?f x) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty), template_var 0)
           ))),
    ("Zorn.Chains_relation_of",
     "?C : Chains (relation_of ?P ?A) ==> ?C <= ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)))
            )],
       template_inequation (less_equals, template_var 2, template_var 0))),
    ("Limits.Zfun_norm_iff", "Zfun (%x. norm (?f x)) ?F = Zfun ?f ?F",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty), template_var 0),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Limits.Zfun_mult_right", "Zfun ?f ?F ==> Zfun (%x. ?a * ?f x) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty), template_var 1)
           ))),
    ("Limits.Zfun_mult_left", "Zfun ?f ?F ==> Zfun (%x. ?f x * ?a) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty), template_var 1)
           ))),
    ("Limits.tendsto_Zfun_iff",
     "(?f \<longlongrightarrow> ?a) ?F = Zfun (%x. ?f x - ?a) ?F",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, t_empty), template_var 0))),
    ("Set_Interval.image_atLeastZeroLessThan_int",
     "0 <= ?u ==> {0..<?u} = int ` {..<nat ?u}",
     template_implication
      ([template_inequation (less_equals, template_hole 6, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 4, template_hole 6), template_var 0),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("Zorn.chain_subset_antisym_Union",
     "[| chain\<^sub>\<subseteq> ?R; ALL r:?R. antisym r |]
      ==> antisym (\<Union> ?R)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Zorn.chain_subset_trans_Union",
     "[| chain\<^sub>\<subseteq> ?R; ALL r:?R. trans r |]
      ==> trans (\<Union> ?R)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Zorn.Chains_subset",
     "Chains ?r <= {C. pred_on.chain UNIV (%x y. (x, y) : ?r) C}",
     template_inequation
      (less_equals, template_app (template_hole 5, template_var 0),
       template_app (template_hole 4, t_empty))),
    ("Zorn.initial_segment_of_Diff",
     "?p initial_segment_of ?q ==> ?p - ?s initial_segment_of ?q - ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))),
             template_hole 1)
           ))),
    ("Zorn.wf_Union_wf_init_segs",
     "[| ?R : Chains init_seg_of; ALL r:?R. wf r |] ==> wf (\<Union> ?R)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_hole 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Zorn.Chains_init_seg_of_Union",
     "[| ?R : Chains init_seg_of; ?r : ?R |]
      ==> ?r initial_segment_of \<Union> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_hole 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 1))),
             template_hole 4)
           ))),
    ("Zorn.antisym_init_seg_of",
     "[| ?r initial_segment_of ?s; ?s initial_segment_of ?r |] ==> ?r = ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_var 1)),
              template_hole 1)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Limits.Zfun_diff",
     "[| Zfun ?f ?F; Zfun ?g ?F |] ==> Zfun (%x. ?f x - ?g x) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty), template_var 1)
           ))),
    ("Limits.Zfun_add",
     "[| Zfun ?f ?F; Zfun ?g ?F |] ==> Zfun (%x. ?f x + ?g x) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty), template_var 1)
           ))),
    ("Limits.ZfunD",
     "[| Zfun ?f ?F; 0 < ?r |]
      ==> \<forall>\<^sub>F x in ?F. norm (?f x) < ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_inequation (less_than, template_hole 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty), template_var 1)
           ))),
    ("Limits.Zfun_mult",
     "[| Zfun ?f ?F; Zfun ?g ?F |] ==> Zfun (%x. ?f x * ?g x) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty), template_var 1)
           ))),
    ("Limits.Zfun_ssubst",
     "[| \<forall>\<^sub>F x in ?F. ?f x = ?g x; Zfun ?g ?F |]
      ==> Zfun ?f ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, t_empty), template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Zorn.chain_subset_Total_Union",
     "[| chain\<^sub>\<subseteq> ?R; ALL r:?R. Total r |]
      ==> Total (\<Union> ?R)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0))),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Limits.Zfun_le",
     "[| Zfun ?g ?F; ALL x. norm (?f x) <= norm (?g x) |] ==> Zfun ?f ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Zorn.trans_init_seg_of",
     "[| ?r initial_segment_of ?s; ?s initial_segment_of ?t |]
      ==> ?r initial_segment_of ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_hole 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)),
              template_hole 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Zorn.Chains_subset'",
     "refl ?r ==>
      {C. pred_on.chain UNIV (%x y. (x, y) : ?r) C} <= Chains ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 4, t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("Limits.ZfunI",
     "(!!r. 0 < r ==> \<forall>\<^sub>F x in ?F. norm (?f x) < r) ==>
      Zfun ?f ?F",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Zorn.pairwise_chain_Union",
     "[| !!S. S : ?\<C> ==> pairwise ?R S; chain\<^sub>\<subseteq> ?\<C> |]
      ==> pairwise ?R (\<Union> ?\<C>)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Zorn.Inter_in_chain",
     "[| finite ?\<B>; ?\<B> ~= {}; subset.chain ?\<A> ?\<B> |]
      ==> \<Inter> ?\<B> : ?\<B>",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 0),
                template_hole 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 1)
           ))),
    ("Zorn.Union_in_chain",
     "[| finite ?\<B>; ?\<B> ~= {}; subset.chain ?\<A> ?\<B> |]
      ==> \<Union> ?\<B> : ?\<B>",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 0),
                template_hole 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 1)
           ))),
    ("Zorn.subset_maxchain_max",
     "[| subset.maxchain ?A ?C; ?X : ?A; \<Union> ?C <= ?X |]
      ==> \<Union> ?C = ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_hole 4),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 2)
            ),
        template_inequation
         (less_equals, template_app (template_hole 1, template_var 1),
          template_var 0)],
       template_equation
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Zorn.Chains_inits_DiffI",
     "?R : Chains init_seg_of ==> {r - ?s |r. r : ?R} : Chains init_seg_of",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app (template_hole 7, template_hole 6))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8, template_app (template_hole 5, t_empty)),
             template_app (template_hole 7, template_hole 6))
           ))),
    ("Zorn.Zorn_Lemma",
     "ALL C:chains ?A. \<Union> C : ?A ==>
      EX M:?A. ALL X:?A. M <= X --> X = M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 0)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 0), t_empty)
           ))),
    ("Zorn.chainsD",
     "[| ?c : chains ?S; ?x : ?c; ?y : ?c |] ==> ?x <= ?y | ?y <= ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app (template_hole 3, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Limits.Zfun_imp_Zfun",
     "[| Zfun ?f ?F;
         \<forall>\<^sub>F x in ?F. norm (?g x) <= norm (?f x) * ?K |]
      ==> Zfun ?g ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, t_empty), template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, t_empty), template_var 2)
           ))),
    ("Zorn.subset_chain_insert",
     "subset.chain ?\<A> (insert ?B ?\<B>) =
      (?B : ?\<A> &
       (ALL X:?\<B>. X <= ?B | ?B <= X) & subset.chain ?\<A> ?\<B>)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 7, template_var 2), template_hole 6),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 2)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 2, template_var 0), t_empty)),
           template_app
            (template_app
              (template_app (template_hole 7, template_var 2),
               template_hole 6),
             template_var 0))))),
    ("Zorn.subset_Zorn'",
     "(!!C. subset.chain ?A C ==> \<Union> C : ?A) ==>
      EX M:?A. ALL X:?A. M <= X --> X = M",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 0), t_empty)
           ))),
    ("Zorn.chains_extend",
     "[| ?c : chains ?S; ?z : ?S; ALL x:?c. x <= ?z |]
      ==> {?z} Un ?c : chains ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_hole 0)),
                 template_var 2)),
             template_app (template_hole 6, template_var 1))
           ))),
    ("Zorn.Zorn_Lemma2",
     "ALL C:chains ?A. EX U:?A. ALL X:C. X <= U ==>
      EX M:?A. ALL X:?A. M <= X --> X = M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 0)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 0), t_empty)
           ))),
    ("Zorn.subset_Zorn",
     "(!!C. subset.chain ?A C ==> EX U:?A. ALL X:C. X <= U) ==>
      EX M:?A. ALL X:?A. M <= X --> X = M",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 0), t_empty)
           ))),
    ("Zorn.chain_mono",
     "[| !!x y. [| x : ?A; y : ?A; ?P x y |] ==> ?Q x y;
         pred_on.chain ?A ?P ?C |]
      ==> pred_on.chain ?A ?Q ?C",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)
           ))),
    ("Zorn.finite_subset_Union_chain",
     "[| finite ?A; ?A <= \<Union> ?\<B>; ?\<B> ~= {};
         subset.chain ?\<A> ?\<B>;
         !!B. [| B : ?\<B>; ?A <= B |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 3)),
        template_inequation
         (less_equals, template_var 3,
          template_app (template_hole 7, template_var 2)),
        template_negation
         (template_equation (template_var 2, template_hole 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_hole 2),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Zorn.subset_Zorn_nonempty",
     "[| ?\<A> ~= {};
         !!\<C>.
            [| \<C> ~= {}; subset.chain ?\<A> \<C> |]
            ==> \<Union> \<C> : ?\<A> |]
      ==> EX M:?\<A>. ALL X:?\<A>. M <= X --> X = M",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 10)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 0), t_empty)
           ))),
    ("Zorn.predicate_Zorn",
     "[| partial_order_on ?A (relation_of ?P ?A);
         !!C. C : Chains (relation_of ?P ?A) ==> EX u:?A. ALL a:C. ?P a u |]
      ==> EX m:?A. ALL a:?A. ?P m a --> a = m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app
               (template_app (template_hole 7, template_var 0),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1), t_empty)
           ))),
    ("Zorn.Zorns_po_lemma",
     "[| Partial_order ?r;
         !!C. C : Chains ?r ==> EX u:Field ?r. ALL a:C. (a, u) : ?r |]
      ==> EX m:Field ?r. ALL a:Field ?r. (m, a) : ?r --> a = m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 0)),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 9, template_var 0)),
             t_empty)
           ))),
    ("Zorn.dependent_wf_choice",
     "[| wf ?R;
         !!f g x r.
            (!!z. (z, x) : ?R ==> f z = g z) ==> ?P f x r = ?P g x r;
         !!x f. (!!y. (y, x) : ?R ==> ?P f y (f y)) ==> EX r. ?P f x r |]
      ==> EX f. ALL x. ?P f x (f x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty))))]:
   (string * thm * template) list
### theory "Draft.ZTemplates"
### 0.343s elapsed time, 0.453s cpu time, 0.000s GC time
val it = (): unit
