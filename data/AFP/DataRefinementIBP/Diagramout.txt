Loading theory "HOL-Library.Function_Algebras" (required by "Draft.DiagramMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.DiagramMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Tree" (required by "Draft.DiagramMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.DiagramMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.122s elapsed time, 0.510s cpu time, 0.044s GC time
Loading theory "LatticeProperties.Conj_Disj" (required by "Draft.DiagramMoreTemplates" via "Draft.Diagram" via "Draft.Hoare" via "Draft.Statements" via "Draft.Preliminaries")
locale conjunctive
  fixes inf_b :: "'b => 'b => 'b"
    and inf_c :: "'c => 'c => 'c"
    and times_abc :: "'a => 'b => 'c"
locale disjunctive
  fixes sup_b :: "'b => 'b => 'b"
    and sup_c :: "'c => 'c => 'c"
    and times_abc :: "'a => 'b => 'c"
locale Conjunctive
  fixes Inf_b :: "'b set => 'b"
    and Inf_c :: "'c set => 'c"
    and times_abc :: "'a => 'b => 'c"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.208s elapsed time, 0.853s cpu time, 0.044s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.DiagramMoreTemplates" via "Draft.ExtrEqs")
locale Disjunctive
  fixes Sup_b :: "'b set => 'b"
    and Sup_c :: "'c set => 'c"
    and times_abc :: "'a => 'b => 'c"
### theory "LatticeProperties.Conj_Disj"
### 0.173s elapsed time, 0.674s cpu time, 0.078s GC time
Loading theory "LatticeProperties.WellFoundedTransitive" (required by "Draft.DiagramMoreTemplates" via "Draft.Diagram" via "Draft.Hoare" via "Draft.Statements" via "Draft.Preliminaries" via "LatticeProperties.Complete_Lattice_Prop")
### theory "HOL-Library.Nat_Bijection"
### 0.331s elapsed time, 1.328s cpu time, 0.122s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.DiagramMoreTemplates" via "Draft.ExtrEqs")
class transitive = ord +
  assumes "order_trans1": "!!x y z. [| x < y; y < z |] ==> x < z"
    and "less_eq_def": "!!x y. (x <= y) = (x = y | x < y)"
class well_founded = ord +
  assumes
    "less_induct1": "!!P a. (!!x. (!!y. y < x ==> P y) ==> P x) ==> P a"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
instantiation
  prod :: (ord, ord) ord
  less_eq_prod == less_eq :: 'a * 'b => 'a * 'b => bool
  less_prod == less :: 'a * 'b => 'a * 'b => bool
instantiation
  prod :: (transitive, transitive) transitive
instantiation
  prod :: (well_founded, well_founded) well_founded
instantiation
  prod :: (well_founded_transitive, well_founded_transitive)
    well_founded_transitive
instantiation
  nat :: transitive
instantiation
  nat :: well_founded
instantiation
  nat :: well_founded_transitive
### theory "LatticeProperties.WellFoundedTransitive"
### 0.319s elapsed time, 1.269s cpu time, 0.060s GC time
Loading theory "LatticeProperties.Complete_Lattice_Prop" (required by "Draft.DiagramMoreTemplates" via "Draft.Diagram" via "Draft.Hoare" via "Draft.Statements" via "Draft.Preliminaries")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
class complete_lattice = ccpo + conditionally_complete_lattice +
  bounded_lattice +
  assumes "Inf_lower": "!!x A. x : A ==> Inf A <= x"
    and "Inf_greatest": "!!A z. (!!x. x : A ==> z <= x) ==> z <= Inf A"
    and "Sup_upper": "!!x A. x : A ==> x <= Sup A"
    and "Sup_least": "!!A z. (!!x. x : A ==> x <= z) ==> Sup A <= z"
    and "Inf_empty": "Inf {} = top"
    and "Sup_empty": "Sup {} = bot"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
class complete_lattice = ccpo + conditionally_complete_lattice +
  bounded_lattice +
  assumes "Inf_lower": "!!x A. x : A ==> Inf A <= x"
    and "Inf_greatest": "!!A z. (!!x. x : A ==> z <= x) ==> z <= Inf A"
    and "Sup_upper": "!!x A. x : A ==> x <= Sup A"
    and "Sup_least": "!!A z. (!!x. x : A ==> x <= z) ==> Sup A <= z"
    and "Inf_empty": "Inf {} = top"
    and "Sup_empty": "Sup {} = bot"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "LatticeProperties.Complete_Lattice_Prop"
### 0.243s elapsed time, 0.959s cpu time, 0.106s GC time
Loading theory "Draft.Preliminaries" (required by "Draft.DiagramMoreTemplates" via "Draft.Diagram" via "Draft.Hoare" via "Draft.Statements")
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.BigO"
### 0.903s elapsed time, 3.410s cpu time, 0.719s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Preliminaries"
### 0.340s elapsed time, 1.126s cpu time, 0.511s GC time
Loading theory "Draft.Statements" (required by "Draft.DiagramMoreTemplates" via "Draft.Diagram" via "Draft.Hoare")
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
"{: y, z \<leadsto> x, z' . P x y z z' :}"
  :: "('c * 'd) set => ('a * 'b) set"
### theory "Draft.Statements"
### 0.069s elapsed time, 0.214s cpu time, 0.000s GC time
Loading theory "Draft.Hoare" (required by "Draft.DiagramMoreTemplates" via "Draft.Diagram")
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.009s elapsed time, 3.632s cpu time, 0.678s GC time
### theory "Draft.Hoare"
### 0.104s elapsed time, 0.294s cpu time, 0.000s GC time
Loading theory "Draft.Diagram" (required by "Draft.DiagramMoreTemplates")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale DiagramTermination
  fixes pair :: "'a => 'b => 'c"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Diagram"
### 0.185s elapsed time, 0.408s cpu time, 0.071s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.899s elapsed time, 5.832s cpu time, 0.917s GC time
Loading theory "Draft.Templates" (required by "Draft.DiagramMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.049s elapsed time, 0.066s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.DiagramMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.476s elapsed time, 0.517s cpu time, 0.051s GC time
Loading theory "Draft.DiagramMoreTemplates"
val templateLemmas =
   [("Diagram.dgr_demonic_mono", "dmono (dgr_demonic ?Q)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Diagram.dmono_mono", "dmono ?D ==> mono (?D ?ij)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 0, template_app (template_var 1, template_var 0))
           ))),
    ("Diagram.mono_pt", "dmono ?D ==> mono (pt ?D)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Diagram.mono_mono_dgr", "dmono ?D ==> mono_mono (dgr ?D)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Diagram.mono_step", "dmono ?D ==> mono (step ?D)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Diagram.grd_dgr",
     "grd (step ?D) ?i = \<Squnion>{P. EX j. P = grd (?D (?i, j))}",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_var 0),
       template_app
        (template_hole 4, template_app (template_hole 3, t_empty)))),
    ("Diagram.grd_dgr_set",
     "grd (step ?D) ?i = \<Union> {P. EX j. P = grd (?D (?i, j))}",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_var 0),
       template_app
        (template_hole 4, template_app (template_hole 3, t_empty)))),
    ("Diagram.not_grd_dgr2",
     "(?a ~: grd (step ?D) ?i) = (ALL j. ?a ~: grd (?D (?i, j)))",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 2),
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1)),
             template_var 0))),
       template_app (template_hole 2, t_empty))),
    ("Diagram.not_grd_dgr",
     "(?a : - grd (step ?D) ?i) = (ALL j. ?a ~: grd (?D (?i, j)))",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 2),
         template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 1)),
             template_var 0))),
       template_app (template_hole 3, t_empty))),
    ("Diagram.hoare_step",
     "(ALL i j. \<Turnstile> ?P i{| ?D (i, j) |}?Q j) =
      \<Turnstile> ?P{| step ?D |}?Q",
     template_equation
      (template_app (template_hole 5, t_empty),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Diagram.hoare_diagram",
     "[| dmono ?D;
         ALL w i j. \<Turnstile> ?X w i{| ?D (i, j) |}Sup_less ?X w j |]
      ==> \<Turnstile> \<Squnion>range
                                  ?X{| pt
  ?D |}(\<Squnion>range ?X \<sqinter> - grd (step ?D))",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 1)),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_hole 5))),
               template_app (template_hole 4, template_var 1)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_hole 5))),
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1)))))
           )))]:
   (string * thm * template) list
### theory "Draft.DiagramMoreTemplates"
### 0.325s elapsed time, 0.468s cpu time, 0.050s GC time
val it = (): unit
