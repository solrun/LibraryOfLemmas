Loading theory "HOL-Library.Function_Algebras" (required by "Draft.HoareMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.HoareMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.HoareMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Tree" (required by "Draft.HoareMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.140s elapsed time, 0.577s cpu time, 0.042s GC time
Loading theory "LatticeProperties.Conj_Disj" (required by "Draft.HoareMoreTemplates" via "Draft.Hoare" via "Draft.Statements" via "Draft.Preliminaries")
locale conjunctive
  fixes inf_b :: "'b => 'b => 'b"
    and inf_c :: "'c => 'c => 'c"
    and times_abc :: "'a => 'b => 'c"
Found termination order: "size_list size <*mlex*> {}"
locale disjunctive
  fixes sup_b :: "'b => 'b => 'b"
    and sup_c :: "'c => 'c => 'c"
    and times_abc :: "'a => 'b => 'c"
locale Conjunctive
  fixes Inf_b :: "'b set => 'b"
    and Inf_c :: "'c set => 'c"
    and times_abc :: "'a => 'b => 'c"
### theory "HOL-Library.Set_Algebras"
### 0.254s elapsed time, 1.029s cpu time, 0.042s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.HoareMoreTemplates" via "Draft.ExtrEqs")
locale Disjunctive
  fixes Sup_b :: "'b set => 'b"
    and Sup_c :: "'c set => 'c"
    and times_abc :: "'a => 'b => 'c"
### theory "HOL-Library.Nat_Bijection"
### 0.337s elapsed time, 1.350s cpu time, 0.123s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.HoareMoreTemplates" via "Draft.ExtrEqs")
### theory "LatticeProperties.Conj_Disj"
### 0.218s elapsed time, 0.857s cpu time, 0.081s GC time
Loading theory "LatticeProperties.WellFoundedTransitive" (required by "Draft.HoareMoreTemplates" via "Draft.Hoare" via "Draft.Statements" via "Draft.Preliminaries" via "LatticeProperties.Complete_Lattice_Prop")
class transitive = ord +
  assumes "order_trans1": "!!x y z. [| x < y; y < z |] ==> x < z"
    and "less_eq_def": "!!x y. (x <= y) = (x = y | x < y)"
consts
  left :: "'a tree => 'a tree"
class well_founded = ord +
  assumes
    "less_induct1": "!!P a. (!!x. (!!y. y < x ==> P y) ==> P x) ==> P a"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  prod :: (ord, ord) ord
  less_eq_prod == less_eq :: 'a * 'b => 'a * 'b => bool
  less_prod == less :: 'a * 'b => 'a * 'b => bool
instantiation
  prod :: (transitive, transitive) transitive
instantiation
  prod :: (well_founded, well_founded) well_founded
instantiation
  prod :: (well_founded_transitive, well_founded_transitive)
    well_founded_transitive
instantiation
  nat :: transitive
instantiation
  nat :: well_founded
instantiation
  nat :: well_founded_transitive
### theory "LatticeProperties.WellFoundedTransitive"
### 0.366s elapsed time, 1.450s cpu time, 0.124s GC time
Loading theory "LatticeProperties.Complete_Lattice_Prop" (required by "Draft.HoareMoreTemplates" via "Draft.Hoare" via "Draft.Statements" via "Draft.Preliminaries")
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
class complete_lattice = ccpo + conditionally_complete_lattice +
  bounded_lattice +
  assumes "Inf_lower": "!!x A. x : A ==> Inf A <= x"
    and "Inf_greatest": "!!A z. (!!x. x : A ==> z <= x) ==> z <= Inf A"
    and "Sup_upper": "!!x A. x : A ==> x <= Sup A"
    and "Sup_least": "!!A z. (!!x. x : A ==> x <= z) ==> Sup A <= z"
    and "Inf_empty": "Inf {} = top"
    and "Sup_empty": "Sup {} = bot"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class complete_lattice = ccpo + conditionally_complete_lattice +
  bounded_lattice +
  assumes "Inf_lower": "!!x A. x : A ==> Inf A <= x"
    and "Inf_greatest": "!!A z. (!!x. x : A ==> z <= x) ==> z <= Inf A"
    and "Sup_upper": "!!x A. x : A ==> x <= Sup A"
    and "Sup_least": "!!A z. (!!x. x : A ==> x <= z) ==> Sup A <= z"
    and "Inf_empty": "Inf {} = top"
    and "Sup_empty": "Sup {} = bot"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
### theory "LatticeProperties.Complete_Lattice_Prop"
### 0.272s elapsed time, 1.074s cpu time, 0.065s GC time
Loading theory "Draft.Preliminaries" (required by "Draft.HoareMoreTemplates" via "Draft.Hoare" via "Draft.Statements")
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.064s elapsed time, 3.965s cpu time, 0.885s GC time
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### theory "Draft.Preliminaries"
### 0.395s elapsed time, 1.288s cpu time, 0.615s GC time
Loading theory "Draft.Statements" (required by "Draft.HoareMoreTemplates" via "Draft.Hoare")
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.086s elapsed time, 3.986s cpu time, 0.804s GC time
"{: y, z \<leadsto> x, z' . P x y z z' :}"
  :: "('c * 'd) set => ('a * 'b) set"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Statements"
### 0.086s elapsed time, 0.218s cpu time, 0.000s GC time
Loading theory "Draft.Hoare" (required by "Draft.HoareMoreTemplates")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Hoare"
### 0.116s elapsed time, 0.268s cpu time, 0.082s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.008s elapsed time, 6.185s cpu time, 1.052s GC time
Loading theory "Draft.Templates" (required by "Draft.HoareMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.047s elapsed time, 0.061s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.HoareMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.475s elapsed time, 0.531s cpu time, 0.069s GC time
Loading theory "Draft.HoareMoreTemplates"
val templateLemmas =
   [("Hoare.post_mono", "mono (post_fun ?p)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Hoare.hoare_magic", "\<Turnstile> ?P{| \<top> |}?Q",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0),
           template_var 0)
         )),
    ("Hoare.post_top", "post_fun ?p ?p = \<top>",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_var 0),
       template_hole 0)),
    ("Hoare.assert_Sup", "{. \<Squnion>?X .} = \<Squnion>(assert ` ?X)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_hole 3),
           template_var 0)))),
    ("Hoare.Sup_less_assert",
     "Sup_less (%w. {. ?p w .}) ?w = {. Sup_less ?p ?w .}",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty), template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Hoare.hoare_assume",
     "\<Turnstile> ?P{| [. ?R .] |}?Q = (?P \<sqinter> ?R <= ?Q)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Hoare.assert_Sup_range",
     "{. \<Squnion>range ?p .} = \<Squnion>range (assert o ?p)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 0),
             template_hole 3))),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_hole 6),
               template_var 0)),
           template_hole 3)))),
    ("Hoare.Sup_less_comp",
     "Sup_less ?P ?w o ?S = Sup_less (%w. ?P w o ?S) ?w",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, t_empty), template_var 1))),
    ("Hoare.hoare_Sup",
     "(ALL p:?P. \<Turnstile> p{| ?S |}?q) =
      \<Turnstile> \<Squnion>?P{| ?S |}?q",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2), t_empty),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0))),
    ("Hoare.post_refin",
     "mono ?S ==> ?S ?p \<sqinter> post_fun ?p ?x <= ?S ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_var 2, template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_var 2, template_var 0)))),
    ("Hoare.Sup_range_comp", "\<Squnion>range ?p o ?S = (SUP w. ?p w o ?S)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_hole 2))),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_hole 2)))),
    ("Hoare.hoare_pre",
     "[| ?R <= ?P; \<Turnstile> ?P{| ?S |}?Q |]
      ==> \<Turnstile> ?R{| ?S |}?Q",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)
           ))),
    ("Hoare.hoare_demonic",
     "\<Turnstile> ?P{| [: ?R :] |}?Q = (ALL s. s : ?P --> ?R s <= ?Q)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2),
           template_app (template_hole 4, template_var 1)),
         template_var 0),
       template_app (template_hole 3, t_empty))),
    ("Hoare.hoare_choice",
     "\<Turnstile> ?p{| ?S \<sqinter> ?T |}?q =
      (\<Turnstile> ?p{| ?S |}?q & \<Turnstile> ?p{| ?T |}?q)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 1),
           template_var 0)))),
    ("Hoare.hoare_refinement_post",
     "mono ?f ==>
      \<Turnstile> ?x{| ?f |}?y = ({. ?x .} o post_fun ?y <= ?f)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 1),
             template_var 2),
           template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_app (template_hole 0, template_var 0))),
           template_var 2)))),
    ("Hoare.hoare_not_guard",
     "mono ?S ==>
      \<Turnstile> ?p{| ?S |}?q =
      \<Turnstile> ?p \<squnion> - grd ?S{| ?S |}?q",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_var 2),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)))),
             template_var 2),
           template_var 0)))),
    ("Hoare.hoare_mono",
     "[| mono ?S; ?Q <= ?R; \<Turnstile> ?P{| ?S |}?Q |]
      ==> \<Turnstile> ?P{| ?S |}?R",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 3)),
        template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 0),
                template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3),
             template_var 1)
           ))),
    ("Hoare.hoare_sequential",
     "mono ?S ==>
      \<Turnstile> ?p{| ?S o ?T |}?r =
      (EX q. \<Turnstile> ?p{| ?S |}q & \<Turnstile> q{| ?T |}?r)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app (template_hole 4, template_var 3),
               template_var 1)),
           template_var 0),
         template_app (template_hole 3, t_empty)))),
    ("Hoare.lfp_wf_induction",
     "[| mono ?f; ALL w. ?p w <= ?f (Sup_less ?p w) |]
      ==> \<Squnion>range ?p <= lfp ?f",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1)),
         template_app (template_hole 0, template_var 1)))),
    ("Hoare.hoare_fixpoint",
     "[| mono_mono ?F;
         !!w f.
            mono f & \<Turnstile> Sup_less ?p w{| f |}?y ==>
            \<Turnstile> ?p w{| ?F f |}?y |]
      ==> \<Turnstile> \<Squnion>range ?p{| lfp ?F |}?y",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_hole 1))),
               template_app (template_hole 0, template_var 2)),
             template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.HoareMoreTemplates"
### 0.305s elapsed time, 0.411s cpu time, 0.000s GC time
val it = (): unit
