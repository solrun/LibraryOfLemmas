   [("Statements.mono_demonic", "mono [: ?Q :]",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Statements.mono_assert", "mono {. ?p .}",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Statements.mono_assume", "mono [. ?P .]",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Statements.angelic_bottom", "{: ?R :} \<bottom> = {}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Statements.grd_angelic", "grd {: ?R :} = UNIV",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Statements.angelic_disjunctive", "{: ?R :} : Apply.Disjunctive",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0),
             t_empty))
         )),
    ("Statements.grd_choice",
     "grd (?S \<sqinter> ?T) = grd ?S \<squnion> grd ?T",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Statements.demonic_sup_inf",
     "[: ?Q \<squnion> ?Q' :] = [: ?Q :] \<sqinter> [: ?Q' :]",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Statements.demonic_bottom",
     "[: ?R :] \<bottom> = {s. ?R s = \<bottom>}",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_app (template_hole 1, t_empty))),
    ("Statements.grd_demonic", "grd [: ?Q :] = {s. EX s'. s' : ?Q s}",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("Statements.mono_choice",
     "[| mono ?S; mono ?T |] ==> mono (?S \<sqinter> ?T)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Statements.grd_demonic_2",
     "(?s ~: grd [: ?Q :]) = (ALL s'. s' ~: ?Q ?s)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)))),
       template_app (template_hole 1, t_empty)))]
