Loading theory "Draft.ListUtilities" (required by "Draft.ListUtilitiesMoreTemplates")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ListUtilitiesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ListUtilitiesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ListUtilitiesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
Proofs for inductive predicate(s) "prefixList"
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
  Proving monotonicity ...
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.124s elapsed time, 0.511s cpu time, 0.043s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ListUtilitiesMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.ListUtilities"
### 0.140s elapsed time, 0.579s cpu time, 0.043s GC time
### theory "HOL-Library.Set_Algebras"
### 0.188s elapsed time, 0.725s cpu time, 0.043s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ListUtilitiesMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.346s elapsed time, 1.205s cpu time, 0.127s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ListUtilitiesMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.BigO"
### 0.730s elapsed time, 2.230s cpu time, 0.219s GC time
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.775s elapsed time, 2.177s cpu time, 0.200s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.829s elapsed time, 4.060s cpu time, 0.772s GC time
Loading theory "Draft.Templates" (required by "Draft.ListUtilitiesMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.067s elapsed time, 0.113s cpu time, 0.038s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ListUtilitiesMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.464s elapsed time, 0.469s cpu time, 0.000s GC time
Loading theory "Draft.ListUtilitiesMoreTemplates"
val templateLemmas =
   [("ListUtilities.PrefixListMonotonicity",
     "prefixList ?l1.0 ?l2.0 ==> length ?l1.0 < length ?l2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("ListUtilities.TailIsPrefixList",
     "?tail ~= [] ==> prefixList ?l1.0 (?l1.0 @ ?tail)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("ListUtilities.PrefixListTransitive",
     "[| prefixList ?l1.0 ?l2.0; prefixList ?l2.0 ?l3.0 |]
      ==> prefixList ?l1.0 ?l3.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("ListUtilities.PrefixListHasTail",
     "prefixList ?l1.0 ?l2.0 ==> EX l. ?l2.0 = ?l1.0 @ l & l ~= []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("ListUtilities.SetToIndex",
     "?a : set ?liste ==> EX index<length ?liste. ?a = ?liste ! index",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, template_var 0))
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("ListUtilities.PrefixSameOnLow",
     "prefixList ?l1.0 ?l2.0 ==>
      ALL index<length ?l1.0. ?l1.0 ! index = ?l2.0 ! index",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("ListUtilities.MinPredicate",
     "EX n. ?P n ==> EX n0. ?P n0 & (ALL n'. ?P n' --> n0 <= n')",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("ListUtilities.DropToShift",
     "?l + ?i < length ?list ==> drop ?l ?list ! ?i = ?list ! (?l + ?i)",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1))))),
    ("ListUtilities.ListLenDrop",
     "[| ?i < length ?lb; ?la <= ?i |] ==> ?lb ! ?i : set (drop ?la ?lb)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 5, template_var 1)),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 2)),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("ListUtilities.MinPredicate2",
     "EX n. ?P n ==> EX n0. ?P n0 & (n0 = 0 | ~ ?P (n0 - 1))",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("ListUtilities.DropToIndex",
     "?a : set (drop ?l ?liste) ==>
      EX i>=?l. i < length ?liste & ?a = ?liste ! i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_var 0)))
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("ListUtilities.NatPredicateTippingPoint",
     "[| 0 < ?n2.0; ?Pr 0; ~ ?Pr ?n2.0 |]
      ==> EX n<?n2.0. ?Pr n & ~ ?Pr (Suc n)",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 1),
        template_predicate (template_app (template_var 0, template_hole 4)),
        template_negation
         (
            template_predicate
             (template_app (template_var 0, template_var 1))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("ListUtilities.SmallerMultipleStepsWithLimit",
     "ALL n>=?limit. ?A (Suc n) < ?A n ==>
      ALL n>=?limit. ?A (n + ?k) <= ?A n - ?k",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("ListUtilities.KeepProperty",
     "[| ALL i>=?low. ?P i --> ?P (Suc i) & ?Q i; ?P ?low |]
      ==> ALL i>=?low. ?Q i",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_var 1, template_var 2))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("ListUtilities.PredicatePairFunctions2Inv",
     "[| ALL x1 x2. EX y1 y2. ?P x1 x2 y1 y2;
         !!f1 f2. ALL x1 x2. ?P x1 x2 (f1 x1 x2) (f2 x1 x2) ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("ListUtilities.PredicatePairFunction",
     "ALL x1 x2. EX y1 y2. ?P x1 x2 y1 y2 ==>
      EX f. ALL x1 x2.
               EX y1 y2.
                  f x1 x2 = (y1, y2) &
                  ?P x1 x2 (fst (f x1 x2)) (snd (f x1 x2))",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("ListUtilities.PredicatePairFunctions2",
     "[| ALL x1 x2. EX y1 y2. ?P x1 x2 y1 y2;
         !!f1 f2.
            ALL x1 x2.
               EX y1 y2.
                  f1 x1 x2 = y1 &
                  f2 x1 x2 = y2 & ?P x1 x2 (f1 x1 x2) (f2 x1 x2) ==>
            ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.ListUtilitiesMoreTemplates"
### 0.290s elapsed time, 0.412s cpu time, 0.062s GC time
val it = (): unit
