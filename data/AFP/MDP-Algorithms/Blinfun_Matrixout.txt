Loading theory "Draft.Matrix_Util" (required by "Draft.Blinfun_MatrixTemplates" via "Draft.Blinfun_Matrix")
Loading theory "Draft.Templates" (required by "Draft.Blinfun_MatrixTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.BigO" (required by "Draft.Blinfun_MatrixTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.069s elapsed time, 0.242s cpu time, 0.000s GC time
consts
  matpow :: "(('a, 'n) vec, 'n) vec => nat => (('a, 'n) vec, 'n) vec"
### theory "Draft.Matrix_Util"
### 0.196s elapsed time, 0.509s cpu time, 0.034s GC time
Loading theory "Draft.Blinfun_Matrix" (required by "Draft.Blinfun_MatrixTemplates")
### theory "Draft.Blinfun_Matrix"
### 0.484s elapsed time, 0.994s cpu time, 0.079s GC time
### theory "HOL-Library.BigO"
### 0.713s elapsed time, 1.520s cpu time, 0.113s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Blinfun_MatrixTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.461s elapsed time, 0.461s cpu time, 0.000s GC time
Loading theory "Draft.Blinfun_MatrixTemplates"
val templateLemmas =
   [("Blinfun_Matrix.blinfun_to_matrix_inv",
     "blinfun_to_matrix (matrix_to_blinfun ?f) = ?f",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Blinfun_Matrix.matrix_to_blinfun_inv",
     "matrix_to_blinfun (blinfun_to_matrix ?f) = ?f",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Blinfun_Matrix.blinfun_to_matrix_matpow",
     "blinfun_to_matrix (?X ^^ ?i) = matpow (blinfun_to_matrix ?X) ?i",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 0)),
         template_var 1))),
    ("Blinfun_Matrix.blinfun_to_matrix_scaleR",
     "blinfun_to_matrix (?c *\<^sub>R ?f) =
      ?c *\<^sub>R blinfun_to_matrix ?f",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Blinfun_Matrix.matrix_to_blinfun_scaleR",
     "matrix_to_blinfun (?c *\<^sub>R ?f) =
      ?c *\<^sub>R matrix_to_blinfun ?f",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Blinfun_Matrix.summable_blinfun_to_matrix",
     "summable ?f ==> summable (%i. blinfun_to_matrix (?f i))",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Blinfun_Matrix.blinfun_to_matrix_comp",
     "blinfun_to_matrix (?f o\<^sub>L ?g) =
      blinfun_to_matrix ?f ** blinfun_to_matrix ?g",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Blinfun_Matrix.blinfun_to_matrix_diff",
     "blinfun_to_matrix (?f - ?g) =
      blinfun_to_matrix ?f - blinfun_to_matrix ?g",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Blinfun_Matrix.blinfun_to_matrix_add",
     "blinfun_to_matrix (?f + ?g) =
      blinfun_to_matrix ?f + blinfun_to_matrix ?g",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Blinfun_Matrix.matrix_to_blinfun_comp",
     "matrix_to_blinfun (?m ** ?n) =
      matrix_to_blinfun ?m o\<^sub>L matrix_to_blinfun ?n",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Blinfun_Matrix.matrix_to_blinfun_diff",
     "matrix_to_blinfun (?f - ?g) =
      matrix_to_blinfun ?f - matrix_to_blinfun ?g",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Blinfun_Matrix.matrix_to_blinfun_add",
     "matrix_to_blinfun (?f + ?g) =
      matrix_to_blinfun ?f + matrix_to_blinfun ?g",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Blinfun_Matrix.matrix_to_blinfun_inv\<^sub>L",
     "invertible ?m ==> invertible\<^sub>L (matrix_to_blinfun ?m)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Blinfun_Matrix.invertible_invertible\<^sub>L_I",
     "invertible (blinfun_to_matrix ?f) ==> invertible\<^sub>L ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Blinfun_Matrix.blinfun_to_matrix_inverse",
     "invertible\<^sub>L ?X ==> invertible (blinfun_to_matrix ?X)",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Blinfun_Matrix.invertible_invertible\<^sub>L_I",
     "invertible\<^sub>L (matrix_to_blinfun ?X) ==> invertible ?X",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Blinfun_Matrix.matrix_to_blinfun_inv\<^sub>L",
     "invertible ?m ==>
      matrix_to_blinfun (matrix_inv ?m) =
      inv\<^sub>L (matrix_to_blinfun ?m)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Blinfun_Matrix.norm_nonneg_blinfun_one",
     "nonneg_blinfun ?X ==> norm ?X = norm (blinfun_apply ?X 1)",
     template_implication
      ([template_inequation
         (less_equals, template_hole 6,
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Blinfun_Matrix.blinfun_to_matrix_inverse",
     "invertible\<^sub>L ?X ==>
      blinfun_to_matrix (inv\<^sub>L ?X) =
      matrix_inv (blinfun_to_matrix ?X)",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Blinfun_Matrix.nonneg_blinfun_iff",
     "nonneg_blinfun ?X = (ALL v>=0. 0 <= blinfun_apply ?X v)",
     template_equation
      (template_app
        (template_app (template_hole 9, template_hole 8),
         template_app (template_hole 7, template_var 0)),
       template_app (template_hole 6, t_empty))),
    ("Blinfun_Matrix.matrix_to_blinfun_mult",
     "apply_bfun (blinfun_apply (matrix_to_blinfun ?m) ?v) ?i =
      (?m *v (\<chi>i. apply_bfun ?v i)) $ ?i",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 2)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, t_empty))),
         template_var 0))),
    ("Blinfun_Matrix.blinfun_to_matrix_mult'",
     "(blinfun_to_matrix ?f *v ?v) $ ?i =
      apply_bfun (blinfun_apply ?f (bfun.Bfun (($) ?v))) ?i",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 2)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, t_empty))),
         template_var 0))),
    ("Blinfun_Matrix.blinfun_to_matrix_mult",
     "(blinfun_to_matrix ?f *v (\<chi>i. apply_bfun ?v i)) $ ?i =
      apply_bfun (blinfun_apply ?f ?v) ?i",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 2)),
             template_app (template_hole 3, t_empty))),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Blinfun_Matrix.blinfun_to_matrix_mult''",
     "blinfun_to_matrix ?f *v ?v =
      (\<chi>i. apply_bfun (blinfun_apply ?f (bfun.Bfun (($) ?v))) i)",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_var 0),
       template_app (template_hole 4, t_empty))),
    ("Blinfun_Matrix.nonneg_blinfun_nonneg",
     "[| nonneg_blinfun ?Q; 0 <= ?v |] ==> 0 <= blinfun_apply ?Q ?v",
     template_implication
      ([template_inequation
         (less_equals, template_hole 6,
          template_app (template_hole 5, template_var 1)),
        template_inequation (less_equals, template_hole 3, template_var 0)],
       template_inequation
        (less_equals, template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Blinfun_Matrix.plus_vec_eq",
     "(\<chi>i. ?f i + ?g i) = (\<chi>i. ?f i) + (\<chi>i. ?g i)",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, t_empty)),
         template_app (template_hole 2, t_empty)))),
    ("Blinfun_Matrix.matrix_le_norm_mono",
     "[| nonneg_blinfun ?C; blinfun_to_matrix ?C <= blinfun_to_matrix ?D |]
      ==> norm ?C <= norm ?D",
     template_implication
      ([template_inequation
         (less_equals, template_hole 3,
          template_app (template_hole 2, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Blinfun_Matrix.nonneg_blinfun_mono",
     "[| nonneg_blinfun ?Q; ?u <= ?v |]
      ==> blinfun_apply ?Q ?u <= blinfun_apply ?Q ?v",
     template_implication
      ([template_inequation
         (less_equals, template_hole 4,
          template_app (template_hole 3, template_var 2)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Blinfun_Matrix.blinfun_apply_mono",
     "[| nonneg_blinfun ?X; 0 <= ?v;
         blinfun_to_matrix ?X <= blinfun_to_matrix ?Y |]
      ==> blinfun_apply ?X ?v <= blinfun_apply ?Y ?v",
     template_implication
      ([template_inequation
         (less_equals, template_hole 5,
          template_app (template_hole 4, template_var 2)),
        template_inequation (less_equals, template_hole 2, template_var 1),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 2),
          template_app (template_hole 4, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1))))]:
   (string * thm * template) list
### theory "Draft.Blinfun_MatrixTemplates"
### 1.291s elapsed time, 1.633s cpu time, 0.253s GC time
val it = (): unit
