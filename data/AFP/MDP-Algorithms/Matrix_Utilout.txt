Loading theory "Draft.Matrix_Util" (required by "Draft.Matrix_UtilTemplates")
Loading theory "HOL-Library.BigO" (required by "Draft.Matrix_UtilTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Templates" (required by "Draft.Matrix_UtilTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.066s elapsed time, 0.245s cpu time, 0.000s GC time
consts
  matpow :: "(('a, 'n) vec, 'n) vec => nat => (('a, 'n) vec, 'n) vec"
### theory "Draft.Matrix_Util"
### 0.172s elapsed time, 0.467s cpu time, 0.027s GC time
### theory "HOL-Library.BigO"
### 0.598s elapsed time, 0.873s cpu time, 0.027s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Matrix_UtilTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.465s elapsed time, 0.517s cpu time, 0.075s GC time
Loading theory "Draft.Matrix_UtilTemplates"
val templateLemmas =
   [("Matrix_Util.lower_triangular_mat_mat",
     "lower_triangular_mat (mat ?x)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Matrix_Util.stlI",
     "strict_lower_triangular_mat ?X ==> lower_triangular_mat ?X",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Matrix_Util.zero_le_mat_iff", "(0 <= mat ?x) = ((0::?'c) <= ?x)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Matrix_Util.lower_triangular_pow",
     "lower_triangular_mat ?X ==> lower_triangular_mat (matpow ?X ?i)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Matrix_Util.nonneg_matpow", "0 <= ?X ==> 0 <= matpow ?X ?i",
     template_implication
      ([template_inequation (less_equals, template_hole 1, template_var 1)],
       template_inequation
        (less_equals, template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Matrix_Util.scalar_matrix_assoc'",
     "?k *\<^sub>R (?C ** ?D) = ?C ** ?k *\<^sub>R ?D",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Matrix_Util.matrix_inv_left",
     "invertible ?M ==> matrix_inv ?M ** ?M = mat (1::?'a)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("Matrix_Util.matrix_inv_right",
     "invertible ?M ==> ?M ** matrix_inv ?M = mat (1::?'a)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app (template_hole 2, template_var 0)),
         template_app (template_hole 1, template_hole 0)))),
    ("Matrix_Util.nonneg_matrix_nonneg",
     "0 <= ?m ==> (0::?'a) <= ?m $ ?i $ ?j",
     template_implication
      ([template_inequation (less_equals, template_hole 4, template_var 2)],
       template_inequation
        (less_equals, template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Matrix_Util.lower_triangular_mult",
     "[| lower_triangular_mat ?X; lower_triangular_mat ?Y |]
      ==> lower_triangular_mat (?X ** ?Y)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Matrix_Util.matpow_scaleR",
     "matpow (?c *\<^sub>R ?X) ?n = ?c ^ ?n *\<^sub>R matpow ?X ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Matrix_Util.nonneg_mat_iff", "(0 <= ?X) = (ALL v>=0. 0 <= ?X *v v)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_hole 7), template_var 0),
       template_app (template_hole 6, t_empty))),
    ("Matrix_Util.nonneg_matrix_mult",
     "[| 0 <= ?C; 0 <= ?D |] ==> 0 <= ?C ** ?D",
     template_implication
      ([template_inequation (less_equals, template_hole 5, template_var 1),
        template_inequation (less_equals, template_hole 3, template_var 0)],
       template_inequation
        (less_equals, template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Matrix_Util.nonneg_mat_ge_zero",
     "[| 0 <= ?Q; 0 <= ?v |] ==> 0 <= ?Q *v ?v",
     template_implication
      ([template_inequation (less_equals, template_hole 5, template_var 1),
        template_inequation (less_equals, template_hole 3, template_var 0)],
       template_inequation
        (less_equals, template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Matrix_Util.lower_triangular_suminf",
     "[| !!i. lower_triangular_mat (?f i); summable ?f |]
      ==> lower_triangular_mat (\<Sum>i. ?f i)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2, template_app (template_hole 0, t_empty))
           ))),
    ("Matrix_Util.mat_le_iff",
     "(?X <= ?Y) = (ALL x>=0. ?X *v x <= ?Y *v x)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app (template_hole 5, t_empty))),
    ("Matrix_Util.nonneg_mult_imp_nonneg_mat",
     "(!!v. 0 <= v ==> 0 <= ?X *v v) ==> 0 <= ?X",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_inequation (less_equals, template_hole 0, template_var 0))),
    ("Matrix_Util.matpow_mono",
     "[| 0 <= ?C; ?C <= ?D |] ==> matpow ?C ?n <= matpow ?D ?n",
     template_implication
      ([template_inequation (less_equals, template_hole 1, template_var 2),
        template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Matrix_Util.nonneg_mat_mono",
     "[| 0 <= ?Q; ?u <= ?v |] ==> ?Q *v ?u <= ?Q *v ?v",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 2),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Matrix_Util.matrix_vector_mult_code'",
     "(?X *v ?x) $ ?i = (SUM j:UNIV. ?X $ ?i $ j * ?x $ j)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 4, t_empty), template_hole 0))),
    ("Matrix_Util.matrix_inv_unique",
     "[| ?A ** ?B = mat (1::?'a); ?B ** ?A = mat (1::?'a) |]
      ==> matrix_inv ?A = ?B",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 1), template_var 0),
          template_app (template_hole 2, template_hole 1)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 0), template_var 1),
          template_app (template_hole 2, template_hole 1))],
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Matrix_Util.matrix_vector_mult_mono",
     "[| 0 <= ?X; 0 <= ?v; ?X <= ?Y |] ==> ?X *v ?v <= ?Y *v ?v",
     template_implication
      ([template_inequation (less_equals, template_hole 4, template_var 2),
        template_inequation (less_equals, template_hole 2, template_var 1),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Matrix_Util.matrix_mult_mono",
     "[| 0 <= ?E; 0 <= ?C; ?E <= ?B; ?C <= ?D |] ==> ?E ** ?C <= ?B ** ?D",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 3),
        template_inequation (less_equals, template_hole 1, template_var 2),
        template_inequation (less_equals, template_var 3, template_var 1),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Matrix_Util.lower_triangular_mat_mult",
     "[| lower_triangular_mat ?M; !!i. i <= ?j ==> ?v $ i = ?v' $ i |]
      ==> (?M *v ?v) $ ?j = (?M *v ?v') $ ?j",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1)),
           template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0)),
           template_var 2)))),
    ("Matrix_Util.lower_triangular_pow_eq",
     "[| lower_triangular_mat ?X; lower_triangular_mat ?Y;
         !!s'. s' <= ?s ==> row s' ?X = row s' ?Y; ?s' <= ?s |]
      ==> row ?s' (matpow ?X ?i) = row ?s' (matpow ?Y ?i)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 4)),
        template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_inequation (less_equals, template_var 1, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 4),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0)))))]:
   (string * thm * template) list
### theory "Draft.Matrix_UtilTemplates"
### 0.948s elapsed time, 1.224s cpu time, 0.151s GC time
val it = (): unit
