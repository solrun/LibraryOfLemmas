   [("Splitting_Methods.is_splitting_blinD",
     "is_splitting_blin ?X ?Q ?R ==> nonneg_blinfun ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_hole 1,
         template_app (template_hole 0, template_var 0)))),
    ("Splitting_Methods.is_splitting_blinD",
     "is_splitting_blin ?X ?Q ?R ==> invertible\<^sub>L ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Splitting_Methods.is_splitting_blinD",
     "is_splitting_blin ?X ?Q ?R ==> ?X = ?Q - ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Splitting_Methods.is_splitting_blinD",
     "is_splitting_blin ?X ?Q ?R ==> nonneg_blinfun (inv\<^sub>L ?Q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 1)))))]
