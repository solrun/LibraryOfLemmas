Loading theory "Draft.Graph" (required by "Draft.LinkMarkMoreTemplates" via "Draft.LinkMark" via "Draft.StackMark" via "Draft.SetMark")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.LinkMarkMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.LinkMarkMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.LinkMarkMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
locale node
  fixes nil :: "'node"
    and root :: "'node"
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
locale graph
  fixes nil :: "'node"
    and root :: "'node"
    and "next" :: "('node * 'node) set"
  assumes "graph nil next"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "Draft.Graph"
### 0.094s elapsed time, 0.409s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.LinkMarkMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.120s elapsed time, 0.500s cpu time, 0.045s GC time
Loading theory "LatticeProperties.Conj_Disj" (required by "Draft.LinkMarkMoreTemplates" via "Draft.LinkMark" via "Draft.StackMark" via "Draft.SetMark" via "DataRefinementIBP.DataRefinement" via "DataRefinementIBP.Diagram" via "DataRefinementIBP.Hoare" via "DataRefinementIBP.Statements" via "DataRefinementIBP.Preliminaries")
locale conjunctive
  fixes inf_b :: "'b => 'b => 'b"
    and inf_c :: "'c => 'c => 'c"
    and times_abc :: "'a => 'b => 'c"
locale disjunctive
  fixes sup_b :: "'b => 'b => 'b"
    and sup_c :: "'c => 'c => 'c"
    and times_abc :: "'a => 'b => 'c"
locale Conjunctive
  fixes Inf_b :: "'b set => 'b"
    and Inf_c :: "'c set => 'c"
    and times_abc :: "'a => 'b => 'c"
Found termination order: "size_list size <*mlex*> {}"
locale Disjunctive
  fixes Sup_b :: "'b set => 'b"
    and Sup_c :: "'c set => 'c"
    and times_abc :: "'a => 'b => 'c"
### theory "HOL-Library.Set_Algebras"
### 0.227s elapsed time, 0.923s cpu time, 0.045s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.LinkMarkMoreTemplates" via "Draft.ExtrEqs")
### theory "LatticeProperties.Conj_Disj"
### 0.175s elapsed time, 0.685s cpu time, 0.103s GC time
Loading theory "LatticeProperties.WellFoundedTransitive" (required by "Draft.LinkMarkMoreTemplates" via "Draft.LinkMark" via "Draft.StackMark" via "Draft.SetMark" via "DataRefinementIBP.DataRefinement" via "DataRefinementIBP.Diagram" via "DataRefinementIBP.Hoare" via "DataRefinementIBP.Statements" via "DataRefinementIBP.Preliminaries" via "LatticeProperties.Complete_Lattice_Prop")
### theory "HOL-Library.Nat_Bijection"
### 0.335s elapsed time, 1.343s cpu time, 0.148s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.LinkMarkMoreTemplates" via "Draft.ExtrEqs")
class transitive = ord +
  assumes "order_trans1": "!!x y z. [| x < y; y < z |] ==> x < z"
    and "less_eq_def": "!!x y. (x <= y) = (x = y | x < y)"
class well_founded = ord +
  assumes
    "less_induct1": "!!P a. (!!x. (!!y. y < x ==> P y) ==> P x) ==> P a"
instantiation
  prod :: (ord, ord) ord
  less_eq_prod == less_eq :: 'a * 'b => 'a * 'b => bool
  less_prod == less :: 'a * 'b => 'a * 'b => bool
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
instantiation
  prod :: (transitive, transitive) transitive
instantiation
  prod :: (well_founded, well_founded) well_founded
instantiation
  prod :: (well_founded_transitive, well_founded_transitive)
    well_founded_transitive
instantiation
  nat :: transitive
instantiation
  nat :: well_founded
instantiation
  nat :: well_founded_transitive
### theory "LatticeProperties.WellFoundedTransitive"
### 0.372s elapsed time, 1.475s cpu time, 0.094s GC time
Loading theory "LatticeProperties.Complete_Lattice_Prop" (required by "Draft.LinkMarkMoreTemplates" via "Draft.LinkMark" via "Draft.StackMark" via "Draft.SetMark" via "DataRefinementIBP.DataRefinement" via "DataRefinementIBP.Diagram" via "DataRefinementIBP.Hoare" via "DataRefinementIBP.Statements" via "DataRefinementIBP.Preliminaries")
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class complete_lattice = ccpo + conditionally_complete_lattice +
  bounded_lattice +
  assumes "Inf_lower": "!!x A. x : A ==> Inf A <= x"
    and "Inf_greatest": "!!A z. (!!x. x : A ==> z <= x) ==> z <= Inf A"
    and "Sup_upper": "!!x A. x : A ==> x <= Sup A"
    and "Sup_least": "!!A z. (!!x. x : A ==> x <= z) ==> Sup A <= z"
    and "Inf_empty": "Inf {} = top"
    and "Sup_empty": "Sup {} = bot"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
class complete_lattice = ccpo + conditionally_complete_lattice +
  bounded_lattice +
  assumes "Inf_lower": "!!x A. x : A ==> Inf A <= x"
    and "Inf_greatest": "!!A z. (!!x. x : A ==> z <= x) ==> z <= Inf A"
    and "Sup_upper": "!!x A. x : A ==> x <= Sup A"
    and "Sup_least": "!!A z. (!!x. x : A ==> x <= z) ==> Sup A <= z"
    and "Inf_empty": "Inf {} = top"
    and "Sup_empty": "Sup {} = bot"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### theory "LatticeProperties.Complete_Lattice_Prop"
### 0.303s elapsed time, 1.186s cpu time, 0.134s GC time
Loading theory "DataRefinementIBP.Preliminaries" (required by "Draft.LinkMarkMoreTemplates" via "Draft.LinkMark" via "Draft.StackMark" via "Draft.SetMark" via "DataRefinementIBP.DataRefinement" via "DataRefinementIBP.Diagram" via "DataRefinementIBP.Hoare" via "DataRefinementIBP.Statements")
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.029s elapsed time, 3.925s cpu time, 0.916s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "DataRefinementIBP.Preliminaries"
### 0.354s elapsed time, 1.222s cpu time, 0.633s GC time
Loading theory "DataRefinementIBP.Statements" (required by "Draft.LinkMarkMoreTemplates" via "Draft.LinkMark" via "Draft.StackMark" via "Draft.SetMark" via "DataRefinementIBP.DataRefinement" via "DataRefinementIBP.Diagram" via "DataRefinementIBP.Hoare")
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
"{: y, z \<leadsto> x, z' . P x y z z' :}"
  :: "('c * 'd) set => ('a * 'b) set"
Found termination order: "size <*mlex*> {}"
### theory "DataRefinementIBP.Statements"
### 0.072s elapsed time, 0.217s cpu time, 0.000s GC time
Loading theory "DataRefinementIBP.Hoare" (required by "Draft.LinkMarkMoreTemplates" via "Draft.LinkMark" via "Draft.StackMark" via "Draft.SetMark" via "DataRefinementIBP.DataRefinement" via "DataRefinementIBP.Diagram")
### theory "HOL-Library.Stream"
### 1.074s elapsed time, 3.983s cpu time, 0.861s GC time
Found termination order: "size <*mlex*> {}"
### theory "DataRefinementIBP.Hoare"
### 0.099s elapsed time, 0.219s cpu time, 0.000s GC time
Loading theory "DataRefinementIBP.Diagram" (required by "Draft.LinkMarkMoreTemplates" via "Draft.LinkMark" via "Draft.StackMark" via "Draft.SetMark" via "DataRefinementIBP.DataRefinement")
Found termination order: "size <*mlex*> {}"
locale DiagramTermination
  fixes pair :: "'a => 'b => 'c"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "DataRefinementIBP.Diagram"
### 0.186s elapsed time, 0.411s cpu time, 0.084s GC time
Loading theory "DataRefinementIBP.DataRefinement" (required by "Draft.LinkMarkMoreTemplates" via "Draft.LinkMark" via "Draft.StackMark" via "Draft.SetMark")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "DataRefinementIBP.DataRefinement"
### 0.142s elapsed time, 0.320s cpu time, 0.071s GC time
Loading theory "Draft.SetMark" (required by "Draft.LinkMarkMoreTemplates" via "Draft.LinkMark" via "Draft.StackMark")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.035s elapsed time, 6.465s cpu time, 1.168s GC time
Loading theory "Draft.Templates" (required by "Draft.LinkMarkMoreTemplates" via "Draft.ExtrEqs")
instantiation
  I :: well_founded_transitive
  less_eq_I == less_eq :: I => I => bool
  less_I == less :: I => I => bool
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.124s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.LinkMarkMoreTemplates")
### theory "Draft.SetMark"
### 0.597s elapsed time, 1.272s cpu time, 0.122s GC time
Loading theory "Draft.StackMark" (required by "Draft.LinkMarkMoreTemplates" via "Draft.LinkMark")
### theory "Draft.StackMark"
### 0.169s elapsed time, 0.337s cpu time, 0.000s GC time
Loading theory "Draft.LinkMark" (required by "Draft.LinkMarkMoreTemplates")
locale pointer
  fixes nil :: "'node"
    and root :: "'node"
    and none :: "'index"
    and link0 :: "'index => 'node => 'node"
    and label0 :: "'node => 'index"
  assumes "pointer nil"
locale pointer
  fixes nil :: "'node"
    and root :: "'node"
    and none :: "'index"
    and link0 :: "'index => 'node => 'node"
    and label0 :: "'node => 'index"
  assumes "pointer nil"
consts
  label_0 :: "('node => 'index) => 'node list => 'node => 'index"
consts
  link_0 ::
    "('index => 'node => 'node)
     => ('node => 'index)
        => 'node => 'node list => 'index => 'node => 'node"
consts
  stack ::
    "('index => 'node => 'node)
     => ('node => 'index) => 'node => 'node list => bool"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.543s elapsed time, 1.165s cpu time, 0.160s GC time
### theory "Draft.LinkMark"
### 0.326s elapsed time, 0.513s cpu time, 0.087s GC time
Loading theory "Draft.LinkMarkMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.LinkMarkMoreTemplates"
### 0.326s elapsed time, 0.484s cpu time, 0.050s GC time
val it = (): unit
