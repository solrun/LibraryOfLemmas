Loading theory "Draft.Graph" (required by "Draft.StackMarkMoreTemplates" via "Draft.StackMark" via "Draft.SetMark")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.StackMarkMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.StackMarkMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.StackMarkMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
locale node
  fixes nil :: "'node"
    and root :: "'node"
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
locale graph
  fixes nil :: "'node"
    and root :: "'node"
    and "next" :: "('node * 'node) set"
  assumes "graph nil next"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.Graph"
### 0.080s elapsed time, 0.347s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.StackMarkMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.150s elapsed time, 0.615s cpu time, 0.038s GC time
Loading theory "LatticeProperties.Conj_Disj" (required by "Draft.StackMarkMoreTemplates" via "Draft.StackMark" via "Draft.SetMark" via "DataRefinementIBP.DataRefinement" via "DataRefinementIBP.Diagram" via "DataRefinementIBP.Hoare" via "DataRefinementIBP.Statements" via "DataRefinementIBP.Preliminaries")
locale conjunctive
  fixes inf_b :: "'b => 'b => 'b"
    and inf_c :: "'c => 'c => 'c"
    and times_abc :: "'a => 'b => 'c"
### theory "HOL-Library.Set_Algebras"
### 0.209s elapsed time, 0.851s cpu time, 0.038s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.StackMarkMoreTemplates" via "Draft.ExtrEqs")
locale disjunctive
  fixes sup_b :: "'b => 'b => 'b"
    and sup_c :: "'c => 'c => 'c"
    and times_abc :: "'a => 'b => 'c"
locale Conjunctive
  fixes Inf_b :: "'b set => 'b"
    and Inf_c :: "'c set => 'c"
    and times_abc :: "'a => 'b => 'c"
Found termination order: "size_list size <*mlex*> {}"
locale Disjunctive
  fixes Sup_b :: "'b set => 'b"
    and Sup_c :: "'c set => 'c"
    and times_abc :: "'a => 'b => 'c"
### theory "LatticeProperties.Conj_Disj"
### 0.200s elapsed time, 0.789s cpu time, 0.096s GC time
Loading theory "LatticeProperties.WellFoundedTransitive" (required by "Draft.StackMarkMoreTemplates" via "Draft.StackMark" via "Draft.SetMark" via "DataRefinementIBP.DataRefinement" via "DataRefinementIBP.Diagram" via "DataRefinementIBP.Hoare" via "DataRefinementIBP.Statements" via "DataRefinementIBP.Preliminaries" via "LatticeProperties.Complete_Lattice_Prop")
### theory "HOL-Library.Nat_Bijection"
### 0.381s elapsed time, 1.528s cpu time, 0.134s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.StackMarkMoreTemplates" via "Draft.ExtrEqs")
class transitive = ord +
  assumes "order_trans1": "!!x y z. [| x < y; y < z |] ==> x < z"
    and "less_eq_def": "!!x y. (x <= y) = (x = y | x < y)"
class well_founded = ord +
  assumes
    "less_induct1": "!!P a. (!!x. (!!y. y < x ==> P y) ==> P x) ==> P a"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
instantiation
  prod :: (ord, ord) ord
  less_eq_prod == less_eq :: 'a * 'b => 'a * 'b => bool
  less_prod == less :: 'a * 'b => 'a * 'b => bool
instantiation
  prod :: (transitive, transitive) transitive
instantiation
  prod :: (well_founded, well_founded) well_founded
instantiation
  prod :: (well_founded_transitive, well_founded_transitive)
    well_founded_transitive
instantiation
  nat :: transitive
instantiation
  nat :: well_founded
instantiation
  nat :: well_founded_transitive
### theory "LatticeProperties.WellFoundedTransitive"
### 0.389s elapsed time, 1.533s cpu time, 0.161s GC time
Loading theory "LatticeProperties.Complete_Lattice_Prop" (required by "Draft.StackMarkMoreTemplates" via "Draft.StackMark" via "Draft.SetMark" via "DataRefinementIBP.DataRefinement" via "DataRefinementIBP.Diagram" via "DataRefinementIBP.Hoare" via "DataRefinementIBP.Statements" via "DataRefinementIBP.Preliminaries")
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class complete_lattice = ccpo + conditionally_complete_lattice +
  bounded_lattice +
  assumes "Inf_lower": "!!x A. x : A ==> Inf A <= x"
    and "Inf_greatest": "!!A z. (!!x. x : A ==> z <= x) ==> z <= Inf A"
    and "Sup_upper": "!!x A. x : A ==> x <= Sup A"
    and "Sup_least": "!!A z. (!!x. x : A ==> x <= z) ==> Sup A <= z"
    and "Inf_empty": "Inf {} = top"
    and "Sup_empty": "Sup {} = bot"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class complete_lattice = ccpo + conditionally_complete_lattice +
  bounded_lattice +
  assumes "Inf_lower": "!!x A. x : A ==> Inf A <= x"
    and "Inf_greatest": "!!A z. (!!x. x : A ==> z <= x) ==> z <= Inf A"
    and "Sup_upper": "!!x A. x : A ==> x <= Sup A"
    and "Sup_least": "!!A z. (!!x. x : A ==> x <= z) ==> Sup A <= z"
    and "Inf_empty": "Inf {} = top"
    and "Sup_empty": "Sup {} = bot"
### theory "LatticeProperties.Complete_Lattice_Prop"
### 0.257s elapsed time, 1.018s cpu time, 0.080s GC time
Loading theory "DataRefinementIBP.Preliminaries" (required by "Draft.StackMarkMoreTemplates" via "Draft.StackMark" via "Draft.SetMark" via "DataRefinementIBP.DataRefinement" via "DataRefinementIBP.Diagram" via "DataRefinementIBP.Hoare" via "DataRefinementIBP.Statements")
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.982s elapsed time, 3.712s cpu time, 0.834s GC time
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "DataRefinementIBP.Preliminaries"
### 0.340s elapsed time, 1.056s cpu time, 0.537s GC time
Loading theory "DataRefinementIBP.Statements" (required by "Draft.StackMarkMoreTemplates" via "Draft.StackMark" via "Draft.SetMark" via "DataRefinementIBP.DataRefinement" via "DataRefinementIBP.Diagram" via "DataRefinementIBP.Hoare")
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
"{: y, z \<leadsto> x, z' . P x y z z' :}"
  :: "('c * 'd) set => ('a * 'b) set"
### theory "DataRefinementIBP.Statements"
### 0.073s elapsed time, 0.222s cpu time, 0.000s GC time
Loading theory "DataRefinementIBP.Hoare" (required by "Draft.StackMarkMoreTemplates" via "Draft.StackMark" via "Draft.SetMark" via "DataRefinementIBP.DataRefinement" via "DataRefinementIBP.Diagram")
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.072s elapsed time, 3.845s cpu time, 0.778s GC time
### theory "DataRefinementIBP.Hoare"
### 0.102s elapsed time, 0.252s cpu time, 0.000s GC time
Loading theory "DataRefinementIBP.Diagram" (required by "Draft.StackMarkMoreTemplates" via "Draft.StackMark" via "Draft.SetMark" via "DataRefinementIBP.DataRefinement")
Found termination order: "size <*mlex*> {}"
locale DiagramTermination
  fixes pair :: "'a => 'b => 'c"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "DataRefinementIBP.Diagram"
### 0.177s elapsed time, 0.385s cpu time, 0.071s GC time
Loading theory "DataRefinementIBP.DataRefinement" (required by "Draft.StackMarkMoreTemplates" via "Draft.StackMark" via "Draft.SetMark")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "DataRefinementIBP.DataRefinement"
### 0.140s elapsed time, 0.309s cpu time, 0.061s GC time
Loading theory "Draft.SetMark" (required by "Draft.StackMarkMoreTemplates" via "Draft.StackMark")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.015s elapsed time, 6.402s cpu time, 1.094s GC time
Loading theory "Draft.Templates" (required by "Draft.StackMarkMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.121s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.StackMarkMoreTemplates")
instantiation
  I :: well_founded_transitive
  less_eq_I == less_eq :: I => I => bool
  less_I == less :: I => I => bool
### theory "Draft.SetMark"
### 0.598s elapsed time, 1.262s cpu time, 0.105s GC time
Loading theory "Draft.StackMark" (required by "Draft.StackMarkMoreTemplates")
### theory "Draft.StackMark"
### 0.167s elapsed time, 0.335s cpu time, 0.000s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.538s elapsed time, 1.079s cpu time, 0.122s GC time
Loading theory "Draft.StackMarkMoreTemplates"
val templateLemmas =
   [("StackMark.assert_comp_choice",
     "{. ?p .} o ?S \<sqinter> ?T =
      ({. ?p .} o ?S) \<sqinter> ({. ?p .} o ?T)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_var 0))))]:
   (string * thm * template) list
### theory "Draft.StackMarkMoreTemplates"
### 0.320s elapsed time, 0.432s cpu time, 0.000s GC time
val it = (): unit
