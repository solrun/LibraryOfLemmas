Loading theory "Draft.Graph" (required by "Draft.SetMarkMoreTemplates" via "Draft.SetMark")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SetMarkMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SetMarkMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SetMarkMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
locale node
  fixes nil :: "'node"
    and root :: "'node"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
locale graph
  fixes nil :: "'node"
    and root :: "'node"
    and "next" :: "('node * 'node) set"
  assumes "graph nil next"
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.Graph"
### 0.080s elapsed time, 0.358s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SetMarkMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.118s elapsed time, 0.498s cpu time, 0.038s GC time
Loading theory "LatticeProperties.Conj_Disj" (required by "Draft.SetMarkMoreTemplates" via "Draft.SetMark" via "DataRefinementIBP.DataRefinement" via "DataRefinementIBP.Diagram" via "DataRefinementIBP.Hoare" via "DataRefinementIBP.Statements" via "DataRefinementIBP.Preliminaries")
locale conjunctive
  fixes inf_b :: "'b => 'b => 'b"
    and inf_c :: "'c => 'c => 'c"
    and times_abc :: "'a => 'b => 'c"
locale disjunctive
  fixes sup_b :: "'b => 'b => 'b"
    and sup_c :: "'c => 'c => 'c"
    and times_abc :: "'a => 'b => 'c"
### theory "HOL-Library.Set_Algebras"
### 0.206s elapsed time, 0.836s cpu time, 0.038s GC time
locale Conjunctive
  fixes Inf_b :: "'b set => 'b"
    and Inf_c :: "'c set => 'c"
    and times_abc :: "'a => 'b => 'c"
Loading theory "HOL-Library.BigO" (required by "Draft.SetMarkMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
locale Disjunctive
  fixes Sup_b :: "'b set => 'b"
    and Sup_c :: "'c set => 'c"
    and times_abc :: "'a => 'b => 'c"
### theory "LatticeProperties.Conj_Disj"
### 0.197s elapsed time, 0.766s cpu time, 0.084s GC time
Loading theory "LatticeProperties.WellFoundedTransitive" (required by "Draft.SetMarkMoreTemplates" via "Draft.SetMark" via "DataRefinementIBP.DataRefinement" via "DataRefinementIBP.Diagram" via "DataRefinementIBP.Hoare" via "DataRefinementIBP.Statements" via "DataRefinementIBP.Preliminaries" via "LatticeProperties.Complete_Lattice_Prop")
### theory "HOL-Library.Nat_Bijection"
### 0.348s elapsed time, 1.393s cpu time, 0.121s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SetMarkMoreTemplates" via "Draft.ExtrEqs")
class transitive = ord +
  assumes "order_trans1": "!!x y z. [| x < y; y < z |] ==> x < z"
    and "less_eq_def": "!!x y. (x <= y) = (x = y | x < y)"
class well_founded = ord +
  assumes
    "less_induct1": "!!P a. (!!x. (!!y. y < x ==> P y) ==> P x) ==> P a"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
instantiation
  prod :: (ord, ord) ord
  less_eq_prod == less_eq :: 'a * 'b => 'a * 'b => bool
  less_prod == less :: 'a * 'b => 'a * 'b => bool
instantiation
  prod :: (transitive, transitive) transitive
instantiation
  prod :: (well_founded, well_founded) well_founded
instantiation
  prod :: (well_founded_transitive, well_founded_transitive)
    well_founded_transitive
instantiation
  nat :: transitive
instantiation
  nat :: well_founded
instantiation
  nat :: well_founded_transitive
### theory "LatticeProperties.WellFoundedTransitive"
### 0.372s elapsed time, 1.477s cpu time, 0.094s GC time
Loading theory "LatticeProperties.Complete_Lattice_Prop" (required by "Draft.SetMarkMoreTemplates" via "Draft.SetMark" via "DataRefinementIBP.DataRefinement" via "DataRefinementIBP.Diagram" via "DataRefinementIBP.Hoare" via "DataRefinementIBP.Statements" via "DataRefinementIBP.Preliminaries")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class complete_lattice = ccpo + conditionally_complete_lattice +
  bounded_lattice +
  assumes "Inf_lower": "!!x A. x : A ==> Inf A <= x"
    and "Inf_greatest": "!!A z. (!!x. x : A ==> z <= x) ==> z <= Inf A"
    and "Sup_upper": "!!x A. x : A ==> x <= Sup A"
    and "Sup_least": "!!A z. (!!x. x : A ==> x <= z) ==> Sup A <= z"
    and "Inf_empty": "Inf {} = top"
    and "Sup_empty": "Sup {} = bot"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class complete_lattice = ccpo + conditionally_complete_lattice +
  bounded_lattice +
  assumes "Inf_lower": "!!x A. x : A ==> Inf A <= x"
    and "Inf_greatest": "!!A z. (!!x. x : A ==> z <= x) ==> z <= Inf A"
    and "Sup_upper": "!!x A. x : A ==> x <= Sup A"
    and "Sup_least": "!!A z. (!!x. x : A ==> x <= z) ==> Sup A <= z"
    and "Inf_empty": "Inf {} = top"
    and "Sup_empty": "Sup {} = bot"
Found termination order: "size <*mlex*> {}"
### theory "LatticeProperties.Complete_Lattice_Prop"
### 0.288s elapsed time, 1.132s cpu time, 0.146s GC time
Loading theory "DataRefinementIBP.Preliminaries" (required by "Draft.SetMarkMoreTemplates" via "Draft.SetMark" via "DataRefinementIBP.DataRefinement" via "DataRefinementIBP.Diagram" via "DataRefinementIBP.Hoare" via "DataRefinementIBP.Statements")
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.017s elapsed time, 3.870s cpu time, 0.913s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "DataRefinementIBP.Preliminaries"
### 0.354s elapsed time, 1.168s cpu time, 0.637s GC time
Loading theory "DataRefinementIBP.Statements" (required by "Draft.SetMarkMoreTemplates" via "Draft.SetMark" via "DataRefinementIBP.DataRefinement" via "DataRefinementIBP.Diagram" via "DataRefinementIBP.Hoare")
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
"{: y, z \<leadsto> x, z' . P x y z z' :}"
  :: "('c * 'd) set => ('a * 'b) set"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "DataRefinementIBP.Statements"
### 0.077s elapsed time, 0.235s cpu time, 0.000s GC time
Loading theory "DataRefinementIBP.Hoare" (required by "Draft.SetMarkMoreTemplates" via "Draft.SetMark" via "DataRefinementIBP.DataRefinement" via "DataRefinementIBP.Diagram")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.079s elapsed time, 3.940s cpu time, 0.876s GC time
Found termination order: "size <*mlex*> {}"
### theory "DataRefinementIBP.Hoare"
### 0.098s elapsed time, 0.224s cpu time, 0.000s GC time
Loading theory "DataRefinementIBP.Diagram" (required by "Draft.SetMarkMoreTemplates" via "Draft.SetMark" via "DataRefinementIBP.DataRefinement")
Found termination order: "size <*mlex*> {}"
locale DiagramTermination
  fixes pair :: "'a => 'b => 'c"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "DataRefinementIBP.Diagram"
### 0.180s elapsed time, 0.400s cpu time, 0.085s GC time
Loading theory "DataRefinementIBP.DataRefinement" (required by "Draft.SetMarkMoreTemplates" via "Draft.SetMark")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "DataRefinementIBP.DataRefinement"
### 0.141s elapsed time, 0.319s cpu time, 0.072s GC time
Loading theory "Draft.SetMark" (required by "Draft.SetMarkMoreTemplates")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.046s elapsed time, 6.498s cpu time, 1.207s GC time
Loading theory "Draft.Templates" (required by "Draft.SetMarkMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.120s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SetMarkMoreTemplates")
instantiation
  I :: well_founded_transitive
  less_eq_I == less_eq :: I => I => bool
  less_I == less :: I => I => bool
### theory "Draft.SetMark"
### 0.594s elapsed time, 1.267s cpu time, 0.125s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.502s elapsed time, 0.792s cpu time, 0.073s GC time
Loading theory "Draft.SetMarkMoreTemplates"
val templateLemmas =
   [("SetMark.union_term_eq", "\<Union> (range (term_eq ?t)) = UNIV",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty), template_hole 1)),
       template_hole 0)),
    ("SetMark.union_term_w", "(UN w. {s. ?t s = w}) = UNIV",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, t_empty), template_hole 1)),
       template_hole 0)),
    ("SetMark.sup_union", "(\<Squnion>range ?A) ?i = (UN w. ?A w ?i)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 2)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_hole 2)))),
    ("SetMark.SUP_SUP_L",
     "\<Squnion>range (SUP_LE_P ?X) = \<Squnion>range ?X",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, t_empty), template_var 0)),
           template_hole 2)),
       template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("SetMark.union_less_term_eq",
     "\<Union> (term_eq ?t ` {v. v \<sqsubset> ?w}) = term_less ?t ?w",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, t_empty),
           template_app (template_hole 2, t_empty))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("SetMark.SUP_L_SUP_LE_P", "Sup_less (SUP_LE_P ?X) = SUP_L_P ?X",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("SetMark.SUP_L_P_upper",
     "(?i, ?v) \<sqsubset> ?u ==> ?P ?v ?i <= SUP_L_P ?P ?u ?i",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 2, template_var 3), template_var 2),
          template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_var 0, template_var 2), template_var 3),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, t_empty), template_var 0),
             template_var 1),
           template_var 3)))),
    ("SetMark.SUP_LE_P_upper",
     "(?i, ?v) <= ?u ==> ?P ?v ?i <= SUP_LE_P ?P ?u ?i",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 3), template_var 2),
          template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_var 0, template_var 2), template_var 3),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, t_empty), template_var 0),
             template_var 1),
           template_var 3)))),
    ("SetMark.hoare_dgr_correctness",
     "[| dmono ?D; Hoare_dgr ?P ?D ?Q |] ==> \<Turnstile> ?P{| pt ?D |}?Q",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, t_empty), template_var 1),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 2)),
             template_var 0)
           ))),
    ("SetMark.hoare_dgr_correctness1",
     "[| dmono ?D; Hoare_dgr1 ?P ?D ?Q |] ==> \<Turnstile> ?P{| pt ?D |}?Q",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, t_empty), template_var 1),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 2)),
             template_var 0)
           ))),
    ("SetMark.union_less_term_w",
     "(UN v:{v. v \<sqsubset> ?w}. {s. ?t s = v}) =
      {s. ?t s \<sqsubset> ?w}",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, t_empty),
           template_app (template_hole 1, t_empty))),
       template_app (template_hole 3, t_empty))),
    ("SetMark.forall_simp",
     "(ALL a b. ALL x:?A. a = ?t x --> ?h x | b ~= ?u x) =
      (ALL x:?A. ?h x)",
     template_equation
      (template_app (template_hole 7, t_empty),
       template_app
        (template_app (template_hole 5, template_var 3), t_empty))),
    ("SetMark.SUP_L_P_least",
     "(!!v. (?i, v) \<sqsubset> ?u ==> ?P v ?i <= ?Q) ==>
      SUP_L_P ?P ?u ?i <= ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, t_empty), template_var 1),
             template_var 2),
           template_var 3),
         template_var 0))),
    ("SetMark.SUP_LE_P_least",
     "(!!v. (?i, v) <= ?u ==> ?P v ?i <= ?Q) ==> SUP_LE_P ?P ?u ?i <= ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, t_empty), template_var 1),
             template_var 2),
           template_var 3),
         template_var 0))),
    ("SetMark.disjunctive_SUP_L_P",
     "Disjunctive_fun ?R ==>
      (?R .. SUP_L_P ?P (?i, ?u)) = SUP_L_P (%w. ?R .. ?P w) (?i, ?u)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 3))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 2, t_empty), template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_app (template_hole 0, t_empty), t_empty),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("SetMark.forall_simp2",
     "(ALL a b.
          ALL x:?A. ALL y. a = ?t x y --> ?h x y --> ?g x y | b ~= ?u x y) =
      (ALL x:?A. ALL y. ?h x y --> ?g x y)",
     template_equation
      (template_app (template_hole 8, t_empty),
       template_app
        (template_app (template_hole 6, template_var 4), t_empty))),
    ("SetMark.Diagram_DataRefinement1",
     "[| dmono ?D; Disjunctive_fun ?R; Hoare_dgr ?P ?D ?Q;
         DgrDataRefinement1 ?D ?R ?D' |]
      ==> Hoare_dgr (?R .. ?P) ?D'
           ((?R .. ?P) \<sqinter> - grd (step ?D'))",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 4)),
        template_predicate (template_app (template_hole 9, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, t_empty), template_var 2),
                template_var 4),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 5, t_empty),
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_var 2)),
               template_var 0),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_var 2)),
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)))))
           ))),
    ("SetMark.Diagram_DataRefinement2",
     "[| dmono ?D; Disjunctive_fun ?R; Hoare_dgr ?P ?D ?Q;
         DgrDataRefinement2 ?P ?D ?R ?D' |]
      ==> Hoare_dgr (?R .. ?P) ?D'
           ((?R .. ?P) \<sqinter> - grd (step ?D'))",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 4)),
        template_predicate (template_app (template_hole 9, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, t_empty), template_var 2),
                template_var 4),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 4),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 5, t_empty),
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_var 2)),
               template_var 0),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_var 2)),
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)))))
           ))),
    ("SetMark.hoare_diagram2",
     "[| dmono ?D;
         ALL u i j. \<Turnstile> ?X u i{| ?D (i, j) |}SUP_L_P ?X (i, u) j |]
      ==> \<Turnstile> \<Squnion>range
                                  ?X{| pt
  ?D |}(\<Squnion>range ?X \<sqinter> - grd (step ?D))",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 1)),
        template_predicate (template_app (template_hole 14, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_hole 5))),
               template_app (template_hole 4, template_var 1)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_hole 5))),
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1)))))
           ))),
    ("SetMark.trascl_less",
     "[| ?x ~= ?y; (?a, ?x) : ?R^* |]
      ==> (?a, ?x) : (Restr ?R (- {?y}))^* |
          (?y, ?x) : ?R O (Restr ?R (- {?y}))^*",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 1),
                  template_var 3)),
              template_app (template_hole 7, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, template_var 1),
                     template_var 3)),
                 template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_app (template_hole 2, template_var 2),
                             template_hole 1))),
                       t_empty))))),
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_var 2),
                   template_var 3)),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_app (template_hole 2, template_var 2),
                             template_hole 1))),
                       t_empty))))))
           ))),
    ("SetMark.hoare_diagram3",
     "[| dmono ?D;
         ALL u i j. \<Turnstile> ?X u i{| ?D (i, j) |}SUP_L_P ?X (i, u) j;
         ?P <= \<Squnion>range ?X;
         \<Squnion>range ?X \<sqinter> - grd (step ?D) <= ?Q |]
      ==> \<Turnstile> ?P{| pt ?D |}?Q",
     template_implication
      ([template_predicate
         (template_app (template_hole 16, template_var 3)),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, template_var 2),
              template_hole 6))),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_hole 6))),
            template_app
             (template_hole 4,
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 3)))),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 3)),
             template_var 0)
           ))),
    ("SetMark.dgr_data_refinement_1",
     "[| dmono ?D'; Disjunctive_fun ?R;
         ALL w i j. \<Turnstile> ?P w i{| ?D (i, j) |}SUP_L_P ?P (i, w) j;
         ALL w i j.
            DataRefinement ({. ?P w i .} o ?D (i, j)) (?R i) (?R j)
             (?D' (i, j)) |]
      ==> \<Turnstile> ?R ..
                       \<Squnion>range
                                  ?P{| pt
  ?D' |}((?R .. \<Squnion>range ?P) \<sqinter> - grd (step ?D'))",
     template_implication
      ([template_predicate
         (template_app (template_hole 20, template_var 3)),
        template_predicate
         (template_app (template_hole 19, template_var 2)),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 18, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_var 2),
                   template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 6, template_var 1),
                       template_hole 5)))),
               template_app (template_hole 4, template_var 3)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 8, template_var 2),
                   template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 6, template_var 1),
                       template_hole 5)))),
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 3)))))
           )))]:
   (string * thm * template) list
### theory "Draft.SetMarkMoreTemplates"
### 0.346s elapsed time, 0.529s cpu time, 0.070s GC time
val it = (): unit
