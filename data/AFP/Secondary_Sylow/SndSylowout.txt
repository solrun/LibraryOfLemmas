Loading theory "HOL-Library.Cancellation" (required by "Draft.SndSylowMoreTemplates" via "Draft.SndSylow" via "Draft.SubgroupConjugation" via "Draft.GroupAction" via "HOL-Algebra.Sylow" via "HOL-Algebra.Exponent" via "HOL-Computational_Algebra.Primes" via "HOL-Computational_Algebra.Euclidean_Algorithm" via "HOL-Computational_Algebra.Factorial_Ring" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SndSylowMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.FuncSet" (required by "Draft.SndSylowMoreTemplates" via "Draft.SndSylow" via "Draft.SubgroupConjugation" via "Draft.GroupAction" via "HOL-Algebra.Bij" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice" via "HOL-Algebra.Order" via "HOL-Algebra.Congruence")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SndSylowMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.140s elapsed time, 0.579s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SndSylowMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### theory "HOL-Library.Nat_Bijection"
### 0.381s elapsed time, 1.520s cpu time, 0.128s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SndSylowMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.242s elapsed time, 0.945s cpu time, 0.128s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SndSylowMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.FuncSet"
### 0.387s elapsed time, 1.531s cpu time, 0.128s GC time
Loading theory "HOL-Algebra.Congruence" (required by "Draft.SndSylowMoreTemplates" via "Draft.SndSylow" via "Draft.SubgroupConjugation" via "Draft.GroupAction" via "HOL-Algebra.Bij" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice" via "HOL-Algebra.Order")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.413s elapsed time, 1.642s cpu time, 0.128s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.SndSylowMoreTemplates" via "Draft.SndSylow" via "Draft.SubgroupConjugation" via "Draft.GroupAction" via "HOL-Algebra.Sylow" via "HOL-Algebra.Exponent" via "HOL-Computational_Algebra.Primes" via "HOL-Computational_Algebra.Euclidean_Algorithm" via "HOL-Computational_Algebra.Factorial_Ring")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
locale equivalence
  fixes S :: "('a, 'b) eq_object_scheme"  (structure)
  assumes "equivalence S"
consts
  snth :: "'a stream => nat => 'a"
locale partition
  fixes A :: "'a set"
    and B :: "'a set set"
  assumes "Congruence.partition A B"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Algebra.Congruence"
### 0.767s elapsed time, 2.903s cpu time, 0.643s GC time
Loading theory "HOL-Algebra.Order" (required by "Draft.SndSylowMoreTemplates" via "Draft.SndSylow" via "Draft.SubgroupConjugation" via "Draft.GroupAction" via "HOL-Algebra.Bij" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice")
consts
  flat :: "'a list stream => 'a stream"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.929s elapsed time, 3.531s cpu time, 0.711s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SndSylowMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
Found termination order: "size <*mlex*> {}"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
Found termination order: "size <*mlex*> {}"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "partial_order L"
consts
  mset :: "'a list => 'a multiset"
locale weak_partial_order_bottom
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_bottom L"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale weak_partial_order_top
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_top L"
locale weak_total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_total_order L"
locale total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "total_order L"
### theory "HOL-Algebra.Order"
### 0.860s elapsed time, 3.389s cpu time, 0.322s GC time
Loading theory "HOL-Algebra.Lattice" (required by "Draft.SndSylowMoreTemplates" via "Draft.SndSylow" via "Draft.SubgroupConjugation" via "Draft.GroupAction" via "HOL-Algebra.Bij" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Library.BigO"
### 1.089s elapsed time, 4.134s cpu time, 1.170s GC time
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
locale weak_upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_upper_semilattice L"
locale weak_lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lower_semilattice L"
Found termination order: "size <*mlex*> {}"
locale weak_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lattice L"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
### theory "HOL-Library.Tree"
### 2.312s elapsed time, 8.564s cpu time, 1.987s GC time
Loading theory "Draft.Templates" (required by "Draft.SndSylowMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.061s elapsed time, 0.181s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SndSylowMoreTemplates")
locale weak_bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_bounded_lattice L"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
locale upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "upper_semilattice L"
locale lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lower_semilattice L"
locale Lattice.lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lattice L"
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
### theory "HOL-Algebra.Lattice"
### 1.062s elapsed time, 3.397s cpu time, 1.086s GC time
Loading theory "HOL-Algebra.Complete_Lattice" (required by "Draft.SndSylowMoreTemplates" via "Draft.SndSylow" via "Draft.SubgroupConjugation" via "Draft.GroupAction" via "HOL-Algebra.Bij" via "HOL-Algebra.Group")
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.646s elapsed time, 1.968s cpu time, 0.207s GC time
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
### theory "HOL-Algebra.Complete_Lattice"
### 0.912s elapsed time, 2.599s cpu time, 1.225s GC time
Loading theory "HOL-Algebra.Group" (required by "Draft.SndSylowMoreTemplates" via "Draft.SndSylow" via "Draft.SubgroupConjugation" via "Draft.GroupAction" via "HOL-Algebra.Bij")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
locale Group.monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.monoid G"
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
locale Group.group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.group G"
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
overloading
  nat_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => nat => 'a
### theory "HOL-Library.Multiset"
### 4.059s elapsed time, 13.258s cpu time, 3.530s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.SndSylowMoreTemplates" via "Draft.SndSylow" via "Draft.SubgroupConjugation" via "Draft.GroupAction" via "HOL-Algebra.Sylow" via "HOL-Algebra.Exponent" via "HOL-Computational_Algebra.Primes" via "HOL-Computational_Algebra.Euclidean_Algorithm")
overloading
  int_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => int => 'a
locale submonoid
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "submonoid H G"
locale subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "subgroup H G"
locale group_hom
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and H :: "('c, 'd) monoid_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "group_hom G H h"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale comm_group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "comm_group G"
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
### theory "HOL-Algebra.Group"
### 1.337s elapsed time, 3.010s cpu time, 0.543s GC time
Loading theory "HOL-Algebra.Bij" (required by "Draft.SndSylowMoreTemplates" via "Draft.SndSylow" via "Draft.SubgroupConjugation" via "Draft.GroupAction")
Loading theory "HOL-Algebra.Coset" (required by "Draft.SndSylowMoreTemplates" via "Draft.SndSylow" via "Draft.SubgroupConjugation" via "Draft.GroupAction" via "HOL-Algebra.Sylow")
locale normal
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "normal H G"
### theory "HOL-Algebra.Bij"
### 0.091s elapsed time, 0.272s cpu time, 0.000s GC time
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
### Ambiguous input (line 611 of "~~/src/HOL/Algebra/Coset.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###       ("_position" H))
###     ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" x)
###           ("_applC" ("_position" carrier) ("_position" G)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" y)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>Set.member"
###             ("\<^const>Group.monoid.mult_indexed"
###               ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                 ("_position" x))
###               ("_index" ("_position" G)) ("_position" y))
###             ("_position" H)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###     ("\<^const>HOL.eq" ("_position" H)
###       ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" x)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" y)
###               ("_applC" ("_position" carrier) ("_position" G)))
###             ("\<^const>Set.member"
###               ("\<^const>Group.monoid.mult_indexed"
###                 ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                   ("_position" x))
###                 ("_index" ("_position" G)) ("_position" y))
###               ("_position" H))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
### theory "HOL-Algebra.Coset"
### 0.974s elapsed time, 2.167s cpu time, 0.287s GC time
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 4.758s elapsed time, 7.390s cpu time, 1.076s GC time
Loading theory "HOL-Computational_Algebra.Euclidean_Algorithm" (required by "Draft.SndSylowMoreTemplates" via "Draft.SndSylow" via "Draft.SubgroupConjugation" via "Draft.GroupAction" via "HOL-Algebra.Sylow" via "HOL-Algebra.Exponent" via "HOL-Computational_Algebra.Primes")
class euclidean_semiring_gcd = normalization_euclidean_semiring + Gcd +
  assumes "gcd_eucl": "normalization_euclidean_semiring_class.gcd = gcd"
    and "lcm_eucl": "normalization_euclidean_semiring_class.lcm = lcm"
  assumes "Gcd_eucl": "normalization_euclidean_semiring_class.Gcd = Gcd"
    and "Lcm_eucl": "normalization_euclidean_semiring_class.Lcm = Lcm"
### theory "HOL-Computational_Algebra.Euclidean_Algorithm"
### 6.024s elapsed time, 6.466s cpu time, 0.504s GC time
Loading theory "HOL-Computational_Algebra.Primes" (required by "Draft.SndSylowMoreTemplates" via "Draft.SndSylow" via "Draft.SubgroupConjugation" via "Draft.GroupAction" via "HOL-Algebra.Sylow" via "HOL-Algebra.Exponent")
### theory "HOL-Computational_Algebra.Primes"
### 0.173s elapsed time, 0.194s cpu time, 0.000s GC time
Loading theory "HOL-Algebra.Exponent" (required by "Draft.SndSylowMoreTemplates" via "Draft.SndSylow" via "Draft.SubgroupConjugation" via "Draft.GroupAction" via "HOL-Algebra.Sylow")
### theory "HOL-Algebra.Exponent"
### 0.077s elapsed time, 0.077s cpu time, 0.000s GC time
Loading theory "HOL-Algebra.Sylow" (required by "Draft.SndSylowMoreTemplates" via "Draft.SndSylow" via "Draft.SubgroupConjugation" via "Draft.GroupAction")
locale sylow
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and p :: "nat"
    and a :: "nat"
    and m :: "nat"
    and calM :: "'a set set"
    and RelM :: "('a set * 'a set) set"
  assumes "sylow G p a m"
  defines "calM == {s. s <= carrier G & card s = p ^ a}"
    and
    "RelM ==
     {(N1, N2). N1 : calM & N2 : calM & (EX g:carrier G. N1 = N2 #> g)}"
locale sylow_central
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and p :: "nat"
    and a :: "nat"
    and m :: "nat"
    and calM :: "'a set set"
    and RelM :: "('a set * 'a set) set"
    and H :: "'a set"
    and M1 :: "'a set"
    and M :: "'a set set"
  assumes "sylow_central G p a m M1 M"
  defines "calM == {s. s <= carrier G & card s = p ^ a}"
    and
    "RelM ==
     {(N1, N2). N1 : calM & N2 : calM & (EX g:carrier G. N1 = N2 #> g)}"
    and "H == {g: carrier G. M1 #> g = M1}"
locale sylow
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and p :: "nat"
    and a :: "nat"
    and m :: "nat"
    and calM :: "'a set set"
    and RelM :: "('a set * 'a set) set"
  assumes "sylow G p a m"
  defines "calM == {s. s <= carrier G & card s = p ^ a}"
    and
    "RelM ==
     {(N1, N2). N1 : calM & N2 : calM & (EX g:carrier G. N1 = N2 #> g)}"
locale sylow_central
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and p :: "nat"
    and a :: "nat"
    and m :: "nat"
    and calM :: "'a set set"
    and RelM :: "('a set * 'a set) set"
    and H :: "'a set"
    and M1 :: "'a set"
    and M :: "'a set set"
  assumes "sylow_central G p a m M1 M"
  defines "calM == {s. s <= carrier G & card s = p ^ a}"
    and
    "RelM ==
     {(N1, N2). N1 : calM & N2 : calM & (EX g:carrier G. N1 = N2 #> g)}"
    and "H == {g: carrier G. M1 #> g = M1}"
locale sylow_central
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and p :: "nat"
    and a :: "nat"
    and m :: "nat"
    and calM :: "'a set set"
    and RelM :: "('a set * 'a set) set"
    and H :: "'a set"
    and M1 :: "'a set"
    and M :: "'a set set"
  assumes "sylow_central G p a m M1 M"
  defines "calM == {s. s <= carrier G & card s = p ^ a}"
    and
    "RelM ==
     {(N1, N2). N1 : calM & N2 : calM & (EX g:carrier G. N1 = N2 #> g)}"
    and "H == {g: carrier G. M1 #> g = M1}"
locale sylow_central
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and p :: "nat"
    and a :: "nat"
    and m :: "nat"
    and calM :: "'a set set"
    and RelM :: "('a set * 'a set) set"
    and H :: "'a set"
    and M1 :: "'a set"
    and M :: "'a set set"
  assumes "sylow_central G p a m M1 M"
  defines "calM == {s. s <= carrier G & card s = p ^ a}"
    and
    "RelM ==
     {(N1, N2). N1 : calM & N2 : calM & (EX g:carrier G. N1 = N2 #> g)}"
    and "H == {g: carrier G. M1 #> g = M1}"
### theory "HOL-Algebra.Sylow"
### 0.416s elapsed time, 0.528s cpu time, 0.144s GC time
Loading theory "Draft.GroupAction" (required by "Draft.SndSylowMoreTemplates" via "Draft.SndSylow" via "Draft.SubgroupConjugation")
locale group_action
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and \<phi> :: "'a => 'c => 'c"
    and M :: "'c set"
  assumes "group_action G \<phi> M"
locale group_action
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and \<phi> :: "'a => 'c => 'c"
    and M :: "'c set"
  assumes "group_action G \<phi> M"
### theory "Draft.GroupAction"
### 0.316s elapsed time, 0.316s cpu time, 0.000s GC time
Loading theory "Draft.SubgroupConjugation" (required by "Draft.SndSylowMoreTemplates" via "Draft.SndSylow")
locale Group.group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.group G"
### Ambiguous input (line 41 of "$AFP/Secondary_Sylow/SubgroupConjugation.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Coset.l_coset_indexed" ("_position" g) ("_indexdefault")
###       ("_position" H))
###     ("_position" H)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Multiset.subset_mset" ("_position" g) ("_position" H))
###     ("_position" H)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 69 of "$AFP/Secondary_Sylow/SubgroupConjugation.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" card)
###       ("\<^const>Coset.l_coset_indexed" ("_position" g) ("_indexdefault")
###         ("_position" M)))
###     ("_applC" ("_position" card) ("_position" M))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" card)
###       ("\<^const>Multiset.subset_mset" ("_position" g) ("_position" M)))
###     ("_applC" ("_position" card) ("_position" M))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 106 of "$AFP/Secondary_Sylow/SubgroupConjugation.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" subgroup)
###     ("_cargs"
###       ("\<^const>Multiset.subset_mset" ("_position" g)
###         ("\<^const>Coset.r_coset_indexed" ("_position" H) ("_indexdefault")
###           ("\<^const>Group.m_inv_indexed" ("_indexdefault")
###             ("_position" g))))
###       ("_position" G))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" subgroup)
###     ("_cargs"
###       ("\<^const>Coset.l_coset_indexed" ("_position" g) ("_indexdefault")
###         ("\<^const>Coset.r_coset_indexed" ("_position" H) ("_indexdefault")
###           ("\<^const>Group.m_inv_indexed" ("_indexdefault")
###             ("_position" g))))
###       ("_position" G))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 156 of "$AFP/Secondary_Sylow/SubgroupConjugation.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" conjugation_action) ("_position" p))
###     ("_lam" ("_position" g) ("_applC" ("_position" carrier) ("_position" G))
###       ("_lam" ("_position" P)
###         ("_applC" ("_position" subgroups_of_size) ("_position" p))
###         ("\<^const>Coset.l_coset_indexed" ("_position" g) ("_indexdefault")
###           ("\<^const>Coset.r_coset_indexed" ("_position" P)
###             ("_indexdefault")
###             ("\<^const>Group.m_inv_indexed" ("_indexdefault")
###               ("_position" g))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" conjugation_action) ("_position" p))
###     ("_lam" ("_position" g) ("_applC" ("_position" carrier) ("_position" G))
###       ("_lam" ("_position" P)
###         ("_applC" ("_position" subgroups_of_size) ("_position" p))
###         ("\<^const>Multiset.subset_mset" ("_position" g)
###           ("\<^const>Coset.r_coset_indexed" ("_position" P)
###             ("_indexdefault")
###             ("\<^const>Group.m_inv_indexed" ("_indexdefault")
###               ("_position" g))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 237 of "$AFP/Secondary_Sylow/SubgroupConjugation.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Coset.l_coset_indexed" ("_position" g) ("_indexdefault")
###       ("\<^const>Coset.r_coset_indexed" ("_position" P) ("_indexdefault")
###         ("_position" h)))
###     ("\<^const>Coset.r_coset_indexed"
###       ("\<^const>Coset.l_coset_indexed" ("_position" g) ("_indexdefault")
###         ("_position" P))
###       ("_indexdefault") ("_position" h))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Multiset.subset_mset" ("_position" g)
###       ("\<^const>Coset.r_coset_indexed" ("_position" P) ("_indexdefault")
###         ("_position" h)))
###     ("\<^const>Coset.r_coset_indexed"
###       ("\<^const>Coset.l_coset_indexed" ("_position" g) ("_indexdefault")
###         ("_position" P))
###       ("_indexdefault") ("_position" h))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Coset.l_coset_indexed" ("_position" g) ("_indexdefault")
###       ("\<^const>Coset.r_coset_indexed" ("_position" P) ("_indexdefault")
###         ("_position" h)))
###     ("\<^const>Coset.r_coset_indexed"
###       ("\<^const>Multiset.subset_mset" ("_position" g) ("_position" P))
###       ("_indexdefault") ("_position" h))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Multiset.subset_mset" ("_position" g)
###       ("\<^const>Coset.r_coset_indexed" ("_position" P) ("_indexdefault")
###         ("_position" h)))
###     ("\<^const>Coset.r_coset_indexed"
###       ("\<^const>Multiset.subset_mset" ("_position" g) ("_position" P))
###       ("_indexdefault") ("_position" h))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 349 of "$AFP/Secondary_Sylow/SubgroupConjugation.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Multiset.subset_mset"
###       ("\<^const>Group.m_inv_indexed" ("_indexdefault") ("_position" g))
###       ("\<^const>Coset.r_coset_indexed" ("_position" Q) ("_indexdefault")
###         ("_position" g)))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Coset.l_coset_indexed"
###       ("\<^const>Group.m_inv_indexed" ("_indexdefault") ("_position" g))
###       ("_indexdefault")
###       ("\<^const>Coset.r_coset_indexed" ("_position" Q) ("_indexdefault")
###         ("_position" g)))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.SubgroupConjugation"
### 0.097s elapsed time, 0.097s cpu time, 0.000s GC time
Loading theory "Draft.SndSylow" (required by "Draft.SndSylowMoreTemplates")
locale Group.group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.group G"
locale snd_sylow
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and p :: "nat"
    and a :: "nat"
    and m :: "nat"
    and calM :: "'a set set"
    and RelM :: "('a set * 'a set) set"
  assumes "snd_sylow G p a m"
  defines "calM == {s. s <= carrier G & card s = p ^ a}"
    and
    "RelM ==
     {(N1, N2). N1 : calM & N2 : calM & (EX g:carrier G. N1 = N2 #> g)}"
locale snd_sylow
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and p :: "nat"
    and a :: "nat"
    and m :: "nat"
    and calM :: "'a set set"
    and RelM :: "('a set * 'a set) set"
  assumes "snd_sylow G p a m"
  defines "calM == {s. s <= carrier G & card s = p ^ a}"
    and
    "RelM ==
     {(N1, N2). N1 : calM & N2 : calM & (EX g:carrier G. N1 = N2 #> g)}"
### theory "Draft.SndSylow"
### 0.252s elapsed time, 0.358s cpu time, 0.142s GC time
Loading theory "Draft.SndSylowMoreTemplates"
val templateLemmas =
   [("SndSylow.singletonI",
     "[| !!x. x : ?A ==> x = ?y; ?y : ?A |] ==> ?A = {?y}",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0))))]:
   (string * thm * template) list
### theory "Draft.SndSylowMoreTemplates"
### 0.423s elapsed time, 0.584s cpu time, 0.000s GC time
val it = (): unit
