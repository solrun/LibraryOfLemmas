Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Lam_mlMoreTemplates" via "Draft.Lam_ml" via "HOL-Nominal.Nominal")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Lam_mlMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Lam_mlMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.LaTeXsugar" (required by "Draft.Lam_mlMoreTemplates" via "Draft.Lam_ml")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.LaTeXsugar"
### 0.077s elapsed time, 0.342s cpu time, 0.000s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.Lam_mlMoreTemplates" via "Draft.Lam_ml" via "HOL-Nominal.Nominal")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.131s elapsed time, 0.548s cpu time, 0.036s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Lam_mlMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
consts
  enumerate :: "'a set => nat => 'a"
### theory "HOL-Library.Nat_Bijection"
### 0.314s elapsed time, 1.270s cpu time, 0.104s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Lam_mlMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.199s elapsed time, 0.781s cpu time, 0.068s GC time
### theory "HOL-Library.Infinite_Set"
### 0.328s elapsed time, 1.324s cpu time, 0.104s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Lam_mlMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "HOL-Library.BigO" (required by "Draft.Lam_mlMoreTemplates" via "Draft.ExtrEqs")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.410s elapsed time, 1.611s cpu time, 0.188s GC time
Loading theory "HOL-Nominal.Nominal" (required by "Draft.Lam_mlMoreTemplates" via "Draft.Lam_ml")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### theory "HOL-Library.BigO"
### 0.947s elapsed time, 3.589s cpu time, 0.790s GC time
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.035s elapsed time, 3.898s cpu time, 0.874s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
overloading
  perm_fun \<equiv> perm :: ('x * 'x) list => ('a => 'b) => 'a => 'b
  perm_bool \<equiv> perm :: ('x * 'x) list => bool => bool
  perm_set \<equiv> perm :: ('x * 'x) list => 'a set => 'a set
  perm_unit \<equiv> perm :: ('x * 'x) list => unit => unit
  perm_prod \<equiv> perm :: ('x * 'x) list => 'a * 'b => 'a * 'b
  perm_list \<equiv> perm :: ('x * 'x) list => 'a list => 'a list
  perm_option \<equiv> perm :: ('x * 'x) list => 'a option => 'a option
  perm_char \<equiv> perm :: ('x * 'x) list => char => char
  perm_nat \<equiv> perm :: ('x * 'x) list => nat => nat
  perm_int \<equiv> perm :: ('x * 'x) list => int => int
  perm_noption \<equiv> perm :: ('x * 'x) list => 'a noption => 'a noption
  perm_nprod \<equiv> perm ::
    ('x * 'x) list => ('a, 'b) nprod => ('a, 'b) nprod
Found termination order: "size <*mlex*> {}"
consts
  perm_unit :: "('x * 'x) list => unit => unit"
consts
  perm_prod :: "('x * 'x) list => 'a * 'b => 'a * 'b"
consts
  perm_list :: "('x * 'x) list => 'a list => 'a list"
consts
  perm_option :: "('x * 'x) list => 'a option => 'a option"
consts
  perm_noption :: "('x * 'x) list => 'a noption => 'a noption"
consts
  perm_nprod :: "('x * 'x) list => ('a, 'b) nprod => ('a, 'b) nprod"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
val mksimps_pairs =
   [("Nominal.fresh",
     ["?a \<sharp> (?x, ?y) ==> ?a \<sharp> ?x",
      "?a \<sharp> (?x, ?y) ==> ?a \<sharp> ?y"]),
    ("Set.Ball", ["[| ALL x:?A. ?P x; ?x : ?A |] ==> ?P ?x"]),
    ("HOL.implies", ["[| ?P --> ?Q; ?P |] ==> ?Q"]),
    ("HOL.conj", ["?P & ?Q ==> ?P", "?P & ?Q ==> ?Q"]),
    ("HOL.All", ["ALL x. ?P x ==> ?P ?x"]), ("HOL.True", []),
    ("HOL.False", []),
    ("HOL.If",
     ["if ?P1 then ?Q1 else ?R1 ==> (?P1 --> ?Q1) & (~ ?P1 --> ?R1)"])]:
   (string * thm list) list
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.926s elapsed time, 5.759s cpu time, 1.114s GC time
Loading theory "Draft.Templates" (required by "Draft.Lam_mlMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.108s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Lam_mlMoreTemplates")
overloading
  fresh_star_set \<equiv> fresh_star :: 'b set => 'a => bool
overloading
  frsh_star_list \<equiv> fresh_star :: 'b list => 'a => bool
Proofs for inductive predicate(s) "ABS_setp"
  Proving monotonicity ...
### ML warning (line 73 of "~~/src/HOL/Nominal/nominal_thmdecls.ML"):
### Pattern is not exhaustive.
### ML warning (line 104 of "~~/src/HOL/Nominal/nominal_thmdecls.ML"):
### Value identifier (n) has not been referenced.
### ML warning (line 102 of "~~/src/HOL/Nominal/nominal_thmdecls.ML"):
### Value identifier (typrm) has not been referenced.
### ML warning (line 149 of "~~/src/HOL/Nominal/nominal_thmdecls.ML"):
### Value identifier (typrm) has not been referenced.
signature NOMINAL_THMDECLS =
  sig
    val eqvt_add: attribute
    val eqvt_del: attribute
    val eqvt_force_add: attribute
    val eqvt_force_del: attribute
    val get_eqvt_thms: Proof.context -> thm list
    val nominal_eqvt_debug: bool Config.T
    val setup: theory -> theory
  end
structure NominalThmDecls: NOMINAL_THMDECLS
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.788s elapsed time, 1.928s cpu time, 0.854s GC time
### ML warning (line 132 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (prems) has not been referenced.
### ML warning (line 171 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (swap_eqs) has not been referenced.
### ML warning (line 205 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (prm_eqs) has not been referenced.
### ML warning (line 241 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (perm_defs) has not been referenced.
### ML warning (line 263 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (T) has not been referenced.
### ML warning (line 322 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (T) has not been referenced.
### ML warning (line 369 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (T) has not been referenced.
### ML warning (line 368 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (fs_inst_thms) has not been referenced.
### ML warning (line 416 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (T) has not been referenced.
### ML warning (line 417 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (T') has not been referenced.
### ML warning (line 453 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (T) has not been referenced.
### ML warning (line 454 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (T') has not been referenced.
### ML warning (line 636 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (cp_bool_inst) has not been referenced.
### ML warning (line 751 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (supp_def) has not been referenced.
### ML warning (line 893 of "~~/src/HOL/Nominal/nominal_atoms.ML"):
### Value identifier (inst_pt_pt_at_cp) has not been referenced.
signature NOMINAL_ATOMS =
  sig
    val at_inst_of: theory -> string -> thm
    type atom_info
    val atoms_of: theory -> string list
    val cp_class_of: theory -> string -> string -> string
    val cp_inst_of: theory -> string -> string -> thm
    val create_nom_typedecls: string list -> theory -> theory
    val dj_thm_of: theory -> string -> string -> thm
    val fs_class_of: theory -> string -> string
    val get_atom_info: theory -> string -> atom_info option
    val get_atom_infos: theory -> atom_info Symtab.table
    val mk_permT: typ -> typ
    val pt_class_of: theory -> string -> string
    val pt_inst_of: theory -> string -> thm
    val the_atom_info: theory -> string -> atom_info
  end
structure NominalAtoms: NOMINAL_ATOMS
### ML warning (line 104 of "~~/src/HOL/Nominal/nominal_permeq.ML"):
### Value identifier (x) has not been referenced.
### ML warning (line 104 of "~~/src/HOL/Nominal/nominal_permeq.ML"):
### Value identifier (pi) has not been referenced.
### ML warning (line 120 of "~~/src/HOL/Nominal/nominal_permeq.ML"):
### Value identifier (ctxt) has not been referenced.
### ML warning (line 132 of "~~/src/HOL/Nominal/nominal_permeq.ML"):
### Value identifier (pi) has not been referenced.
### ML warning (line 291 of "~~/src/HOL/Nominal/nominal_permeq.ML"):
### Value identifier (i) has not been referenced.
### ML warning (line 290 of "~~/src/HOL/Nominal/nominal_permeq.ML"):
### Value identifier (i) has not been referenced.
### ML warning (line 289 of "~~/src/HOL/Nominal/nominal_permeq.ML"):
### Value identifier (i) has not been referenced.
### ML warning (line 312 of "~~/src/HOL/Nominal/nominal_permeq.ML"):
### Pattern is not exhaustive.
### ML warning (line 356 of "~~/src/HOL/Nominal/nominal_permeq.ML"):
### Pattern is not exhaustive.
### ML warning (line 376 of "~~/src/HOL/Nominal/nominal_permeq.ML"):
### Value identifier (eqvt_simp_tac) has not been referenced.
signature NOMINAL_PERMEQ =
  sig
    val finite_guess_meth: (Proof.context -> Proof.method) context_parser
    val finite_guess_meth_debug:
       (Proof.context -> Proof.method) context_parser
    val finite_guess_tac: Proof.context -> int -> tactic
    val fresh_guess_meth: (Proof.context -> Proof.method) context_parser
    val fresh_guess_meth_debug:
       (Proof.context -> Proof.method) context_parser
    val fresh_guess_tac: Proof.context -> int -> tactic
    val perm_extend_simp_meth:
       (Proof.context -> Proof.method) context_parser
    val perm_extend_simp_meth_debug:
       (Proof.context -> Proof.method) context_parser
    val perm_extend_simp_tac: Proof.context -> int -> tactic
    val perm_simp_meth: (Proof.context -> Proof.method) context_parser
    val perm_simp_meth_debug: (Proof.context -> Proof.method) context_parser
    val perm_simp_tac: Proof.context -> int -> tactic
    val perm_simproc_app: simproc
    val perm_simproc_fun: simproc
    val supports_meth: (Proof.context -> Proof.method) context_parser
    val supports_meth_debug: (Proof.context -> Proof.method) context_parser
    val supports_tac: Proof.context -> int -> tactic
  end
structure NominalPermeq: NOMINAL_PERMEQ
### ML warning (line 94 of "~~/src/HOL/Nominal/nominal_fresh_fun.ML"):
### Value identifier (u) has not been referenced.
### ML warning (line 90 of "~~/src/HOL/Nominal/nominal_fresh_fun.ML"):
### Value identifier (v) has not been referenced.
### ML warning (line 89 of "~~/src/HOL/Nominal/nominal_fresh_fun.ML"):
### Value identifier (v) has not been referenced.
### ML warning (line 88 of "~~/src/HOL/Nominal/nominal_fresh_fun.ML"):
### Value identifier (j) has not been referenced.
### ML warning (line 137 of "~~/src/HOL/Nominal/nominal_fresh_fun.ML"):
### Value identifier (x) has not been referenced.
### ML warning (line 139 of "~~/src/HOL/Nominal/nominal_fresh_fun.ML"):
### Value identifier (n) has not been referenced.
### ML warning (line 150 of "~~/src/HOL/Nominal/nominal_fresh_fun.ML"):
### Value identifier (i) has not been referenced.
val gen_res_inst_tac_term = fn:
   Proof.context ->
     ((typ * ctyp) list -> (term * cterm) list -> thm -> thm) ->
       (typ * typ) list ->
         (term * term) list -> bool -> thm -> int -> thm -> thm Seq.seq
val res_inst_tac_term = fn:
   Proof.context ->
     (typ * typ) list ->
       (term * term) list -> bool -> thm -> int -> thm -> thm Seq.seq
val res_inst_tac_term' = fn:
   Proof.context ->
     (term * term) list -> bool -> thm -> int -> thm -> thm Seq.seq
val cut_inst_tac_term' = fn:
   Proof.context -> (term * term) list -> thm -> int -> thm -> thm Seq.seq
val get_dyn_thm = fn: theory -> xstring -> string -> thm
val at_exists_fresh' =
   "[| at TYPE(?'x); finite (supp ?x) |] ==> EX c. c \<sharp> ?x": thm
val fresh_fun_app' =
   "[| pt TYPE(?'a) TYPE(?'x); at TYPE(?'x); finite (supp ?h);
       ?a \<sharp> ?h; ?a \<sharp> ?h ?a |]
    ==> fresh_fun ?h = ?h ?a":
   thm
val fresh_prod = "?a \<sharp> (?x, ?y) = (?a \<sharp> ?x & ?a \<sharp> ?y)":
   thm
val generate_fresh_tac = fn: Proof.context -> string -> tactic
val get_inner_fresh_fun = fn: term -> string option
val generate_fresh_fun_tac = fn: Proof.context -> tactic
val search_fun = fn: EqSubst.searchinfo -> term -> EqSubst.match Seq.seq
val search_fun_asm = fn:
   EqSubst.searchinfo -> int -> term -> EqSubst.match EqSubst.skipseq
val subst_inner_tac = fn: Proof.context -> thm -> int -> thm -> thm Seq.seq
val subst_inner_asm_tac_aux = fn:
   int -> Proof.context -> thm -> int -> tactic
val subst_inner_asm_tac = fn: Proof.context -> thm -> int -> tactic
val fresh_fun_tac = fn: Proof.context -> bool -> int -> tactic
### ML warning (line 62 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (put_nominal_datatypes) has not been referenced.
### ML warning (line 89 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Matches are not exhaustive.
### ML warning (line 93 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (t) has not been referenced.
### ML warning (line 101 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 102 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 183 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (constrs) has not been referenced.
### ML warning (line 183 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (tvs) has not been referenced.
### ML warning (line 185 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (cargs) has not been referenced.
### ML warning (line 189 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (rps) has not been referenced.
### ML warning (line 197 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (mx) has not been referenced.
### ML warning (line 199 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (mx) has not been referenced.
### ML warning (line 202 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (new_type_names') has not been referenced.
### ML warning (line 257 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (perm_simps) has not been referenced.
### ML warning (line 277 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 278 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 278 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (T1) has not been referenced.
### ML warning (line 316 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (at_pt_inst) has not been referenced.
### ML warning (line 441 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (perm_thmss) has not been referenced.
### ML warning (line 474 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (i) has not been referenced.
### ML warning (line 553 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (x) has not been referenced.
### ML warning (line 692 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (i) has not been referenced.
### ML warning (line 708 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (i) has not been referenced.
### ML warning (line 711 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 744 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (full_new_type_names) has not been referenced.
### ML warning (line 780 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 829 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 830 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 850 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (dist_rewrites) has not been referenced.
### ML warning (line 1137 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Matches are not exhaustive.
### ML warning (line 1156 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (xs) has not been referenced.
### ML warning (line 1162 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (xss) has not been referenced.
### ML warning (line 1213 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (induct) has not been referenced.
### ML warning (line 1216 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Matches are not exhaustive.
### ML warning (line 1228 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (induct') has not been referenced.
### ML warning (line 1245 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Matches are not exhaustive.
### ML warning (line 1247 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Matches are not exhaustive.
### ML warning (line 1269 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1280 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1312 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (prems2) has not been referenced.
### ML warning (line 1334 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1366 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (t) has not been referenced.
### ML warning (line 1400 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Matches are not exhaustive.
### ML warning (line 1439 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Matches are not exhaustive.
### ML warning (line 1465 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (p) has not been referenced.
### ML warning (line 1464 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (rs) has not been referenced.
### ML warning (line 1645 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1649 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1662 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Matches are not exhaustive.
### ML warning (line 1699 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (T) has not been referenced.
### ML warning (line 1717 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1773 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (asms) has not been referenced.
### ML warning (line 1775 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1777 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1778 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1780 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Value identifier (c) has not been referenced.
### ML warning (line 1786 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1874 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1875 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1881 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1909 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1926 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 1932 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Matches are not exhaustive.
### ML warning (line 1949 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Matches are not exhaustive.
### ML warning (line 1963 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Matches are not exhaustive.
### ML warning (line 1988 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Matches are not exhaustive.
### ML warning (line 2055 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Pattern is not exhaustive.
### ML warning (line 2057 of "~~/src/HOL/Nominal/nominal_datatype.ML"):
### Matches are not exhaustive.
signature NOMINAL_DATATYPE =
  sig
    type descr
    val fresh_const: typ -> typ -> term
    val fresh_star_const: typ -> typ -> term
    val get_nominal_datatype:
       theory -> string -> nominal_datatype_info option
    val get_nominal_datatypes: theory -> nominal_datatype_info Symtab.table
    val mk_not_sym: thm list -> thm list
    val mk_perm: typ list -> term -> term -> term
    val nominal_datatype:
       Old_Datatype_Aux.config -> Old_Datatype.spec list -> theory -> theory
    val nominal_datatype_cmd:
       Old_Datatype_Aux.config ->
         Old_Datatype.spec_cmd list -> theory -> theory
    type nominal_datatype_info
    val perm_of_pair: term * term -> term
    val perm_simproc: simproc
  end
structure NominalDatatype: NOMINAL_DATATYPE
### ML warning (line 144 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Matches are not exhaustive.
### ML warning (line 155 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Value identifier (rs) has not been referenced.
### ML warning (line 155 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Value identifier (ls) has not been referenced.
### ML warning (line 173 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Pattern is not exhaustive.
### ML warning (line 204 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Value identifier (tname) has not been referenced.
### ML warning (line 213 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Pattern is not exhaustive.
### ML warning (line 223 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Value identifier (dt_info) has not been referenced.
### ML warning (line 233 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Value identifier (eq) has not been referenced.
### ML warning (line 232 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Value identifier (eq) has not been referenced.
### ML warning (line 248 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Pattern is not exhaustive.
### ML warning (line 287 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Pattern is not exhaustive.
### ML warning (line 289 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Pattern is not exhaustive.
### ML warning (line 290 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Pattern is not exhaustive.
### ML warning (line 291 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Pattern is not exhaustive.
### ML warning (line 292 of "~~/src/HOL/Nominal/nominal_primrec.ML"):
### Pattern is not exhaustive.
signature NOMINAL_PRIMREC =
  sig
    val primrec:
       term list option ->
         term option ->
           (binding * typ option * mixfix) list ->
             (binding * typ option * mixfix) list ->
               Specification.multi_specs -> local_theory -> Proof.state
    val primrec_cmd:
       string list option ->
         string option ->
           (binding * string option * mixfix) list ->
             (binding * string option * mixfix) list ->
               Specification.multi_specs_cmd -> local_theory -> Proof.state
  end
structure NominalPrimrec: NOMINAL_PRIMREC
### ML warning (line 74 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Value identifier (i) has not been referenced.
### ML warning (line 74 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Value identifier (thy) has not been referenced.
### ML warning (line 63 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Value identifier (x) has not been referenced.
### ML warning (line 64 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Pattern is not exhaustive.
### ML warning (line 83 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Value identifier (T) has not been referenced.
### ML warning (line 83 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 82 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Matches are not exhaustive.
### ML warning (line 102 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Value identifier (names) has not been referenced.
### ML warning (line 94 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Value identifier (ps) has not been referenced.
### ML warning (line 107 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Pattern 3 is redundant.
### ML warning (line 121 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Value identifier (T') has not been referenced.
### ML warning (line 121 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Value identifier (s') has not been referenced.
### ML warning (line 207 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Pattern is not exhaustive.
### ML warning (line 213 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Matches are not exhaustive.
### ML warning (line 306 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Pattern is not exhaustive.
### ML warning (line 371 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Matches are not exhaustive.
### ML warning (line 420 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Value identifier (name) has not been referenced.
### ML warning (line 422 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Pattern is not exhaustive.
### ML warning (line 423 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Pattern is not exhaustive.
### ML warning (line 437 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Pattern is not exhaustive.
### ML warning (line 451 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Value identifier (prem) has not been referenced.
### ML warning (line 478 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Matches are not exhaustive.
### ML warning (line 574 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Pattern is not exhaustive.
### ML warning (line 623 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Pattern is not exhaustive.
### ML warning (line 635 of "~~/src/HOL/Nominal/nominal_inductive.ML"):
### Pattern is not exhaustive.
signature NOMINAL_INDUCTIVE =
  sig
    val prove_eqvt: string -> string list -> local_theory -> local_theory
    val prove_strong_ind:
       string -> (string * string list) list -> local_theory -> Proof.state
  end
structure NominalInductive: NOMINAL_INDUCTIVE
### ML warning (line 56 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (transp) has not been referenced.
### ML warning (line 79 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (i) has not been referenced.
### ML warning (line 79 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (thy) has not been referenced.
### ML warning (line 67 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (x) has not been referenced.
### ML warning (line 68 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Pattern is not exhaustive.
### ML warning (line 88 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (T) has not been referenced.
### ML warning (line 88 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 87 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Matches are not exhaustive.
### ML warning (line 107 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (names) has not been referenced.
### ML warning (line 99 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (ps) has not been referenced.
### ML warning (line 112 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Pattern 3 is redundant.
### ML warning (line 126 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (T') has not been referenced.
### ML warning (line 126 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (s') has not been referenced.
### ML warning (line 161 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (ind_params) has not been referenced.
### ML warning (line 163 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (elims) has not been referenced.
### ML warning (line 194 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Matches are not exhaustive.
### ML warning (line 233 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Pattern is not exhaustive.
### ML warning (line 239 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Matches are not exhaustive.
### ML warning (line 329 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Pattern is not exhaustive.
### ML warning (line 337 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Pattern is not exhaustive.
### ML warning (line 341 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Pattern is not exhaustive.
### ML warning (line 370 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (pi_sets) has not been referenced.
### ML warning (line 462 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (induct_cases') has not been referenced.
### ML warning (line 465 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Value identifier (thsss) has not been referenced.
### ML warning (line 479 of "~~/src/HOL/Nominal/nominal_inductive2.ML"):
### Pattern is not exhaustive.
signature NOMINAL_INDUCTIVE2 =
  sig
    val prove_strong_ind:
       string ->
         string option ->
           (string * string list) list -> local_theory -> Proof.state
  end
structure NominalInductive2: NOMINAL_INDUCTIVE2
### ML warning (line 17 of "~~/src/HOL/Nominal/nominal_induct.ML"):
### Value identifier (tupleT) has not been referenced.
### ML warning (line 48 of "~~/src/HOL/Nominal/nominal_induct.ML"):
### Pattern is not exhaustive.
structure NominalInduct:
  sig
    val nominal_induct_method:
       (Proof.context -> Proof.method) context_parser
    val nominal_induct_tac:
       bool ->
         (binding option * (term * bool)) option list list ->
           (string * typ) list ->
             (string * typ) list list ->
               thm list -> thm list -> int -> context_tactic
  end
### theory "HOL-Nominal.Nominal"
### 4.021s elapsed time, 8.625s cpu time, 2.059s GC time
Loading theory "Draft.Lam_ml" (required by "Draft.Lam_mlMoreTemplates")
### length descr: 3
### length new_type_names: 1
### perm_empty_thms
### perm_append_thms
### perm_eq_thms
### representing sets
### big_rep_name: trm_Rep_set
Proofs for inductive predicate(s) "trm_Rep_set"
### proving closure under permutation...
### defining type...
### prove that new types are in class pt_<name> ...
### prove that new types are in class cp_<name1>_<name2> ...
### proving finite support for the new datatype
### proving strong induction theorem ...
### defining recursion combinator ...
Proofs for inductive predicate(s) "trm_rec_set"
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### ~ False == True
### Ignoring duplicate rewrite rule:
### ?a1 \<sharp> ?b1 == ?a1 ~= ?b1
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### finite (supp ?x1) == True
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### ~ False == True
### Ignoring duplicate rewrite rule:
### ?a1 \<sharp> ?b1 == ?a1 ~= ?b1
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### finite (supp ?x1) == True
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### ~ False == True
### Ignoring duplicate rewrite rule:
### ?a1 \<sharp> ?b1 == ?a1 ~= ?b1
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### finite (supp ?x1) == True
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### ~ False == True
### Ignoring duplicate rewrite rule:
### ?a1 \<sharp> ?b1 == ?a1 ~= ?b1
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### finite (supp ?x1) == True
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### Ambiguous input (line 45 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal.abs_fun" ("_position" y) ("_position" t))
###     ("\<^const>Nominal.abs_fun" ("_position" x)
###       ("\<^const>Nominal.perm"
###         ("\<^const>Lam_ml.trm.Ret"
###           ("_tuple" ("_position" y) ("_tuple_arg" ("_position" x))))
###         ("_position" t)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Nominal.abs_fun" ("_position" y) ("_position" t))
###     ("\<^const>Nominal.abs_fun" ("_position" x)
###       ("\<^const>Nominal.perm"
###         ("_list" ("_tuple" ("_position" y) ("_tuple_arg" ("_position" x))))
###         ("_position" t)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### length descr: 1
### length new_type_names: 1
### perm_empty_thms
### perm_append_thms
### perm_eq_thms
### representing sets
### big_rep_name: ty_Rep_set
Proofs for inductive predicate(s) "ty_Rep_set"
### proving closure under permutation...
### defining type...
### prove that new types are in class pt_<name> ...
### prove that new types are in class cp_<name1>_<name2> ...
### proving finite support for the new datatype
### proving strong induction theorem ...
### defining recursion combinator ...
Proofs for inductive predicate(s) "ty_rec_set"
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
Proofs for inductive predicate(s) "valid"
  Proving monotonicity ...
### equivariance lemma of the relational form
pi_ \<bullet> valid x_ = valid (pi_ \<bullet> x_)
### equivariance lemma of the relational form
pi_ \<bullet> valid x_ = valid (pi_ \<bullet> x_)
### equivariance lemma of the relational form
pi_ \<bullet> valid x_ = valid (pi_ \<bullet> x_)
### equivariance lemma of the relational form
pi_ \<bullet> valid x_ = valid (pi_ \<bullet> x_)
### Ambiguous input (line 92 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>typing" ("_position" \<Gamma>) ("_position" s)
###         ("_position" \<sigma>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>typing" ("_position" \<Gamma>) ("_list" ("_position" s))
###       ("_applC" ("_position" T) ("_position" \<sigma>)))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>typing" ("_position" \<Gamma>) ("_position" s)
###         ("_position" \<sigma>))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>typing" ("_position" \<Gamma>)
###       ("\<^const>Lam_ml.trm.Ret" ("_position" s))
###       ("_applC" ("_position" T) ("_position" \<sigma>)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "typing"
  Proving monotonicity ...
### equivariance lemma of the relational form
pi_ \<bullet> (x1_ \<turnstile> x2_ : x3_) =
pi_ \<bullet> x1_ \<turnstile> pi_ \<bullet> x2_ : pi_ \<bullet> x3_
### equivariance lemma of the relational form
pi_ \<bullet> (x1_ \<turnstile> x2_ : x3_) =
pi_ \<bullet> x1_ \<turnstile> pi_ \<bullet> x2_ : pi_ \<bullet> x3_
### equivariance lemma of the relational form
pi_ \<bullet> (x1_ \<turnstile> x2_ : x3_) =
pi_ \<bullet> x1_ \<turnstile> pi_ \<bullet> x2_ : pi_ \<bullet> x3_
### equivariance lemma of the relational form
pi_ \<bullet> (x1_ \<turnstile> x2_ : x3_) =
pi_ \<bullet> x1_ \<turnstile> pi_ \<bullet> x2_ : pi_ \<bullet> x3_
Found termination order:
  "(%p. size_list (%p. size (fst p)) (fst p)) <*mlex*> {}"
### Ambiguous input (line 124 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>psubst" ("_position" \<theta>)
###       ("\<^const>Lam_ml.trm.Ret" ("_position" t)))
###     ("\<^const>Lam_ml.trm.Ret"
###       ("\<^fixed>psubst" ("_position" \<theta>) ("_position" t)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>psubst" ("_position" \<theta>) ("_list" ("_position" t)))
###     ("\<^const>Lam_ml.trm.Ret"
###       ("\<^fixed>psubst" ("_position" \<theta>) ("_position" t)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>psubst" ("_position" \<theta>)
###       ("\<^const>Lam_ml.trm.Ret" ("_position" t)))
###     ("_list" ("\<^fixed>psubst" ("_position" \<theta>) ("_position" t)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>psubst" ("_position" \<theta>) ("_list" ("_position" t)))
###     ("_list" ("\<^fixed>psubst" ("_position" \<theta>) ("_position" t)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 137 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>subst" ("_position" t) ("_position" x) ("_position" t'))
###   ("\<^const>Lam_ml.psubst"
###     ("_list" ("_tuple" ("_position" x) ("_tuple_arg" ("_position" t'))))
###     ("_position" t)))
### ("\<^const>Pure.eq"
###   ("\<^fixed>subst" ("_position" t) ("_position" x) ("_position" t'))
###   ("\<^const>Lam_ml.psubst"
###     ("\<^const>Lam_ml.trm.Ret"
###       ("_tuple" ("_position" x) ("_tuple_arg" ("_position" t'))))
###     ("_position" t)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 144 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Lam_ml.subst" ("_list" ("_position" s)) ("_position" y)
###       ("_position" v))
###     ("\<^const>Lam_ml.trm.Ret"
###       ("\<^const>Lam_ml.subst" ("_position" s) ("_position" y)
###         ("_position" v)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Lam_ml.subst" ("\<^const>Lam_ml.trm.Ret" ("_position" s))
###       ("_position" y) ("_position" v))
###     ("\<^const>Lam_ml.trm.Ret"
###       ("\<^const>Lam_ml.subst" ("_position" s) ("_position" y)
###         ("_position" v)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Lam_ml.subst" ("_list" ("_position" s)) ("_position" y)
###       ("_position" v))
###     ("_list"
###       ("\<^const>Lam_ml.subst" ("_position" s) ("_position" y)
###         ("_position" v)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Lam_ml.subst" ("\<^const>Lam_ml.trm.Ret" ("_position" s))
###       ("_position" y) ("_position" v))
###     ("_list"
###       ("\<^const>Lam_ml.subst" ("_position" s) ("_position" y)
###         ("_position" v)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 149 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Lam_ml.subst"
###       ("\<^const>Nominal.perm"
###         ("_list" ("_tuple" ("_position" y) ("_tuple_arg" ("_position" x))))
###         ("_position" t))
###       ("_position" y) ("_position" v))
###     ("\<^const>Lam_ml.subst" ("_position" t) ("_position" x)
###       ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Lam_ml.subst"
###       ("\<^const>Nominal.perm"
###         ("\<^const>Lam_ml.trm.Ret"
###           ("_tuple" ("_position" y) ("_tuple_arg" ("_position" x))))
###         ("_position" t))
###       ("_position" y) ("_position" v))
###     ("\<^const>Lam_ml.subst" ("_position" t) ("_position" x)
###       ("_position" v))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 256 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>std_reduction" ("_position" s) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>std_reduction" ("_list" ("_position" s))
###       ("_list" ("_position" s')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>std_reduction" ("_position" s) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>std_reduction" ("\<^const>Lam_ml.trm.Ret" ("_position" s))
###       ("_list" ("_position" s')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>std_reduction" ("_position" s) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>std_reduction" ("_list" ("_position" s))
###       ("\<^const>Lam_ml.trm.Ret" ("_position" s')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>std_reduction" ("_position" s) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>std_reduction" ("\<^const>Lam_ml.trm.Ret" ("_position" s))
###       ("\<^const>Lam_ml.trm.Ret" ("_position" s')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 252 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>std_reduction"
###     ("\<^const>Lam_ml.trm.To" ("_list" ("_position" s)) ("_position" x)
###       ("_position" t))
###     ("\<^const>Lam_ml.subst" ("_position" t) ("_position" x)
###       ("_position" s))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>std_reduction"
###     ("\<^const>Lam_ml.trm.To" ("\<^const>Lam_ml.trm.Ret" ("_position" s))
###       ("_position" x) ("_position" t))
###     ("\<^const>Lam_ml.subst" ("_position" t) ("_position" x)
###       ("_position" s))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 253 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal.fresh" ("_position" x) ("_position" s)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>std_reduction"
###       ("\<^const>Lam_ml.trm.To" ("_position" s) ("_position" x)
###         ("\<^const>Lam_ml.trm.Ret"
###           ("_applC" ("_position" Var) ("_position" x))))
###       ("_position" s))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal.fresh" ("_position" x) ("_position" s)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>std_reduction"
###       ("\<^const>Lam_ml.trm.To" ("_position" s) ("_position" x)
###         ("_list" ("_applC" ("_position" Var) ("_position" x))))
###       ("_position" s))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "std_reduction"
  Proving monotonicity ...
### Ambiguous input (line 274 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduction" ("_position" s) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduction" ("_list" ("_position" s))
###       ("_list" ("_position" s')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduction" ("_position" s) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduction" ("\<^const>Lam_ml.trm.Ret" ("_position" s))
###       ("_list" ("_position" s')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduction" ("_position" s) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduction" ("_list" ("_position" s))
###       ("\<^const>Lam_ml.trm.Ret" ("_position" s')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduction" ("_position" s) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduction" ("\<^const>Lam_ml.trm.Ret" ("_position" s))
###       ("\<^const>Lam_ml.trm.Ret" ("_position" s')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 270 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal.fresh" ("_position" x) ("_position" s)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduction"
###       ("\<^const>Lam_ml.trm.To" ("_list" ("_position" s)) ("_position" x)
###         ("_position" t))
###       ("\<^const>Lam_ml.subst" ("_position" t) ("_position" x)
###         ("_position" s)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal.fresh" ("_position" x) ("_position" s)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduction"
###       ("\<^const>Lam_ml.trm.To" ("\<^const>Lam_ml.trm.Ret" ("_position" s))
###         ("_position" x) ("_position" t))
###       ("\<^const>Lam_ml.subst" ("_position" t) ("_position" x)
###         ("_position" s)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 271 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal.fresh" ("_position" x) ("_position" s)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduction"
###       ("\<^const>Lam_ml.trm.To" ("_position" s) ("_position" x)
###         ("\<^const>Lam_ml.trm.Ret"
###           ("_applC" ("_position" Var) ("_position" x))))
###       ("_position" s))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Nominal.fresh" ("_position" x) ("_position" s)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>reduction"
###       ("\<^const>Lam_ml.trm.To" ("_position" s) ("_position" x)
###         ("_list" ("_applC" ("_position" Var) ("_position" x))))
###       ("_position" s))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "reduction"
  Proving monotonicity ...
### equivariance lemma of the relational form
pi_ \<bullet> x1_ \<mapsto> x2_ =
pi_ \<bullet> x1_ \<mapsto> pi_ \<bullet> x2_
### equivariance lemma of the relational form
pi_ \<bullet> x1_ \<mapsto> x2_ =
pi_ \<bullet> x1_ \<mapsto> pi_ \<bullet> x2_
### equivariance lemma of the relational form
pi_ \<bullet> x1_ \<mapsto> x2_ =
pi_ \<bullet> x1_ \<mapsto> pi_ \<bullet> x2_
### equivariance lemma of the relational form
pi_ \<bullet> x1_ \<mapsto> x2_ =
pi_ \<bullet> x1_ \<mapsto> pi_ \<bullet> x2_
### Ambiguous input (line 337 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Lam_ml.reduction"
###     ("\<^const>Lam_ml.trm.To" ("_list" ("_position" s)) ("_position" x)
###       ("_position" t))
###     ("\<^const>Lam_ml.subst" ("_position" t) ("_position" x)
###       ("_position" s))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Lam_ml.reduction"
###     ("\<^const>Lam_ml.trm.To" ("\<^const>Lam_ml.trm.Ret" ("_position" s))
###       ("_position" x) ("_position" t))
###     ("\<^const>Lam_ml.subst" ("_position" t) ("_position" x)
###       ("_position" s))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 350 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Lam_ml.reduction"
###     ("\<^const>Lam_ml.trm.To" ("_position" s) ("_position" x)
###       ("\<^const>Lam_ml.trm.Ret"
###         ("_applC" ("_position" Var) ("_position" x))))
###     ("_position" s)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Lam_ml.reduction"
###     ("\<^const>Lam_ml.trm.To" ("_position" s) ("_position" x)
###       ("_list" ("_applC" ("_position" Var) ("_position" x))))
###     ("_position" s)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "SN"
  Proving monotonicity ...
### length descr: 1
### length new_type_names: 1
### perm_empty_thms
### perm_append_thms
### perm_eq_thms
### representing sets
### big_rep_name: stack_Rep_set
Proofs for inductive predicate(s) "stack_Rep_set"
### proving closure under permutation...
### defining type...
### prove that new types are in class pt_<name> ...
### prove that new types are in class cp_<name1>_<name2> ...
### proving finite support for the new datatype
### proving strong induction theorem ...
### defining recursion combinator ...
Proofs for inductive predicate(s) "stack_rec_set"
### step 1: obtaining fresh names
### step 2: as, bs, cs # K as ts, K bs us
### step 3: pi1 o (K as ts) = pi2 o (K bs us)
### step 4: pi1 o ts = pi2 o us
### step 5: pi1^-1 o pi2 o us = ts
### step 6: (ts, pi1^-1 o pi2 o vs) in rec_set
### step 7: pi1 o rs = pi2 o vs , rs = pi1^-1 o pi2 o vs
### step 8: as # rs
### step 9: as # fK as ts rs , bs # fK bs us vs
### step 10: cs # fK as ts rs , cs # fK bs us vs
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### ~ False == True
### Ignoring duplicate rewrite rule:
### ?a1 \<sharp> ?b1 == ?a1 ~= ?b1
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### finite (supp ?x1) == True
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### ~ False == True
### Ignoring duplicate rewrite rule:
### ?a1 \<sharp> ?b1 == ?a1 ~= ?b1
### Ignoring duplicate rewrite rule:
### ?y & ?y == ?y
### Ignoring duplicate rewrite rule:
### finite (supp ?x1) == True
### step 11: pi1 o (fK as ts rs) = pi2 o (fK bs us vs)
### final result
### finished!
### Ambiguous input (line 588 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Lam_ml.dismantle"
###     ("\<^const>Lam_ml.dismantle" ("_position" s)
###       ("\<^const>Lam_ml.stack.St" ("_position" y) ("_position" n)
###         ("\<^const>HOL.eq" ("_position" L)
###           ("\<^const>Lam_ml.trm.To" ("_position" s) ("_position" y)
###             ("_position" n)))))
###     ("_position" L)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Lam_ml.dismantle" ("_position" s)
###     ("\<^const>Lam_ml.dismantle"
###       ("\<^const>Lam_ml.stack.St" ("_position" y) ("_position" n)
###         ("\<^const>HOL.eq" ("_position" L)
###           ("\<^const>Lam_ml.trm.To" ("_position" s) ("_position" y)
###             ("_position" n))))
###       ("_position" L))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Lam_ml.dismantle" ("_position" s)
###       ("\<^const>Lam_ml.stack.St" ("_position" y) ("_position" n)
###         ("_position" L)))
###     ("\<^const>Lam_ml.dismantle"
###       ("\<^const>Lam_ml.trm.To" ("_position" s) ("_position" y)
###         ("_position" n))
###       ("_position" L))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Lam_ml.dismantle" ("_position" s)
###     ("\<^const>Lam_ml.stack.St" ("_position" y) ("_position" n)
###       ("\<^const>HOL.eq" ("_position" L)
###         ("\<^const>Lam_ml.dismantle"
###           ("\<^const>Lam_ml.trm.To" ("_position" s) ("_position" y)
###             ("_position" n))
###           ("_position" L))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 608 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 6 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^const>Lam_ml.reduction" ("_position" k) ("_position" k'))
###   ("\<^fixed>stack_reduction"
###     ("\<^const>HOL.All_binder" ("_idtyp" ("_position" t) ("_type_name" trm))
###       ("\<^const>Lam_ml.dismantle" ("_position" t) ("_position" k)))
###     ("\<^const>Lam_ml.dismantle" ("_position" t) ("_position" k'))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>stack_reduction" ("_position" k) ("_position" k'))
###   ("\<^fixed>stack_reduction"
###     ("\<^const>HOL.All_binder" ("_idtyp" ("_position" t) ("_type_name" trm))
###       ("\<^const>Lam_ml.dismantle" ("_position" t) ("_position" k)))
###     ("\<^const>Lam_ml.dismantle" ("_position" t) ("_position" k'))))
### ("\<^const>Pure.eq"
###   ("\<^const>Lam_ml.reduction" ("_position" k) ("_position" k'))
###   ("\<^const>HOL.All_binder" ("_idtyp" ("_position" t) ("_type_name" trm))
###     ("\<^const>Lam_ml.reduction"
###       ("\<^const>Lam_ml.dismantle" ("_position" t) ("_position" k))
###       ("\<^const>Lam_ml.dismantle" ("_position" t) ("_position" k')))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>stack_reduction" ("_position" k) ("_position" k'))
###   ("\<^const>HOL.All_binder" ("_idtyp" ("_position" t) ("_type_name" trm))
###     ("\<^const>Lam_ml.reduction"
###       ("\<^const>Lam_ml.dismantle" ("_position" t) ("_position" k))
###       ("\<^const>Lam_ml.dismantle" ("_position" t) ("_position" k')))))
### ("\<^const>Pure.eq"
###   ("\<^const>Lam_ml.reduction" ("_position" k) ("_position" k'))
###   ("\<^const>HOL.All_binder" ("_idtyp" ("_position" t) ("_type_name" trm))
###     ("\<^fixed>stack_reduction"
###       ("\<^const>Lam_ml.dismantle" ("_position" t) ("_position" k))
###       ("\<^const>Lam_ml.dismantle" ("_position" t) ("_position" k')))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>stack_reduction" ("_position" k) ("_position" k'))
###   ("\<^const>HOL.All_binder" ("_idtyp" ("_position" t) ("_type_name" trm))
###     ("\<^fixed>stack_reduction"
###       ("\<^const>Lam_ml.dismantle" ("_position" t) ("_position" k))
###       ("\<^const>Lam_ml.dismantle" ("_position" t) ("_position" k')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 613 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Lam_ml.reduction" ("_position" k) ("_position" k')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Lam_ml.stack_reduction" ("_position" k) ("_position" k')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 625 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Lam_ml.reduction" ("_position" m) ("_position" m')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Lam_ml.stack_reduction" ("_position" m) ("_position" m')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 626 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Lam_ml.reduction"
###     ("\<^const>Lam_ml.dismantle" ("_position" m) ("_position" k))
###     ("\<^const>Lam_ml.dismantle" ("_position" m') ("_position" k))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Lam_ml.stack_reduction"
###     ("\<^const>Lam_ml.dismantle" ("_position" m) ("_position" k))
###     ("\<^const>Lam_ml.dismantle" ("_position" m') ("_position" k))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Lam_ml.dismantle" ("_position" m)
###     ("\<^const>Lam_ml.stack_reduction" ("_position" k)
###       ("\<^const>Lam_ml.dismantle" ("_position" m') ("_position" k)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Lam_ml.dismantle"
###     ("\<^const>Lam_ml.stack_reduction"
###       ("\<^const>Lam_ml.dismantle" ("_position" m) ("_position" k))
###       ("_position" m'))
###     ("_position" k)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Lam_ml.dismantle"
###     ("\<^const>Lam_ml.dismantle" ("_position" m)
###       ("\<^const>Lam_ml.stack_reduction" ("_position" k) ("_position" m')))
###     ("_position" k)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Lam_ml.dismantle" ("_position" m)
###     ("\<^const>Lam_ml.dismantle"
###       ("\<^const>Lam_ml.stack_reduction" ("_position" k) ("_position" m'))
###       ("_position" k))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 678 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" SRED) ("_position" \<tau>))
###     ("_Coll" ("_position" k)
###       ("_Ball" ("_position" t)
###         ("_applC" ("_position" RED) ("_position" \<tau>))
###         ("_applC" ("_position" SN)
###           ("\<^const>Lam_ml.dismantle" ("_list" ("_position" t))
###             ("_position" k)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" SRED) ("_position" \<tau>))
###     ("_Coll" ("_position" k)
###       ("_Ball" ("_position" t)
###         ("_applC" ("_position" RED) ("_position" \<tau>))
###         ("_applC" ("_position" SN)
###           ("\<^const>Lam_ml.dismantle"
###             ("\<^const>Lam_ml.trm.Ret" ("_position" t))
###             ("_position" k)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 721 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 5 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" CR2) ("_position" \<tau>))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" t) ("_position" t'))
###     ("\<^const>HOL.implies"
###       ("\<^const>Set.member" ("_position" t)
###         ("_applC" ("_position" RED)
###           ("\<^const>Lam_ml.stack_reduction"
###             ("\<^const>HOL.conj" ("_position" \<tau>) ("_position" t))
###             ("_position" t'))))
###       ("\<^const>Set.member" ("_position" t')
###         ("_applC" ("_position" RED) ("_position" \<tau>))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" CR2) ("_position" \<tau>))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" t) ("_position" t'))
###     ("\<^const>HOL.implies"
###       ("\<^const>Set.member" ("_position" t)
###         ("\<^const>Lam_ml.stack_reduction"
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" RED) ("_position" \<tau>))
###             ("_position" t))
###           ("_position" t')))
###       ("\<^const>Set.member" ("_position" t')
###         ("_applC" ("_position" RED) ("_position" \<tau>))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" CR2) ("_position" \<tau>))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" t) ("_position" t'))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" t)
###           ("_applC" ("_position" RED) ("_position" \<tau>)))
###         ("\<^const>Lam_ml.stack_reduction" ("_position" t)
###           ("_position" t')))
###       ("\<^const>Set.member" ("_position" t')
###         ("_applC" ("_position" RED) ("_position" \<tau>))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" CR2) ("_position" \<tau>))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" t) ("_position" t'))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" t)
###           ("_applC" ("_position" RED) ("_position" \<tau>)))
###         ("\<^const>Lam_ml.reduction" ("_position" t) ("_position" t')))
###       ("\<^const>Set.member" ("_position" t')
###         ("_applC" ("_position" RED) ("_position" \<tau>))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" CR2) ("_position" \<tau>))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" t) ("_position" t'))
###     ("\<^const>HOL.implies"
###       ("\<^const>Lam_ml.stack_reduction"
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" t)
###             ("_applC" ("_position" RED) ("_position" \<tau>)))
###           ("_position" t))
###         ("_position" t'))
###       ("\<^const>Set.member" ("_position" t')
###         ("_applC" ("_position" RED) ("_position" \<tau>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 725 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 9 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" CR3_RED)
###     ("_cargs" ("_position" t) ("_position" \<tau>)))
###   ("\<^const>HOL.All_binder" ("_position" t')
###     ("_applC"
###       ("\<^const>Lam_ml.stack_reduction" ("_position" t)
###         ("\<^const>HOL.implies" ("_position" t')
###           ("\<^const>Set.member" ("_position" t') ("_position" RED))))
###       ("_position" \<tau>))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" CR3_RED)
###     ("_cargs" ("_position" t) ("_position" \<tau>)))
###   ("_applC"
###     ("\<^const>Lam_ml.stack_reduction"
###       ("\<^const>HOL.All_binder" ("_position" t') ("_position" t))
###       ("\<^const>HOL.implies" ("_position" t')
###         ("\<^const>Set.member" ("_position" t') ("_position" RED))))
###     ("_position" \<tau>)))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" CR3_RED)
###     ("_cargs" ("_position" t) ("_position" \<tau>)))
###   ("\<^const>Set.member"
###     ("\<^const>Lam_ml.stack_reduction"
###       ("\<^const>HOL.All_binder" ("_position" t') ("_position" t))
###       ("\<^const>HOL.implies" ("_position" t') ("_position" t')))
###     ("_applC" ("_position" RED) ("_position" \<tau>))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" CR3_RED)
###     ("_cargs" ("_position" t) ("_position" \<tau>)))
###   ("\<^const>HOL.All_binder" ("_position" t')
###     ("\<^const>Set.member"
###       ("\<^const>Lam_ml.stack_reduction" ("_position" t)
###         ("\<^const>HOL.implies" ("_position" t') ("_position" t')))
###       ("_applC" ("_position" RED) ("_position" \<tau>)))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" CR3_RED)
###     ("_cargs" ("_position" t) ("_position" \<tau>)))
###   ("\<^const>HOL.implies"
###     ("\<^const>Lam_ml.stack_reduction"
###       ("\<^const>HOL.All_binder" ("_position" t') ("_position" t))
###       ("_position" t'))
###     ("\<^const>Set.member" ("_position" t')
###       ("_applC" ("_position" RED) ("_position" \<tau>)))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" CR3_RED)
###     ("_cargs" ("_position" t) ("_position" \<tau>)))
###   ("\<^const>Lam_ml.stack_reduction"
###     ("\<^const>HOL.All_binder" ("_position" t') ("_position" t))
###     ("\<^const>HOL.implies" ("_position" t')
###       ("\<^const>Set.member" ("_position" t')
###         ("_applC" ("_position" RED) ("_position" \<tau>))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" CR3_RED)
###     ("_cargs" ("_position" t) ("_position" \<tau>)))
###   ("\<^const>HOL.All_binder" ("_position" t')
###     ("\<^const>Lam_ml.stack_reduction" ("_position" t)
###       ("\<^const>HOL.implies" ("_position" t')
###         ("\<^const>Set.member" ("_position" t')
###           ("_applC" ("_position" RED) ("_position" \<tau>)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" CR3_RED)
###     ("_cargs" ("_position" t) ("_position" \<tau>)))
###   ("\<^const>HOL.All_binder" ("_position" t')
###     ("\<^const>HOL.implies"
###       ("\<^const>Lam_ml.reduction" ("_position" t) ("_position" t'))
###       ("\<^const>Set.member" ("_position" t')
###         ("_applC" ("_position" RED) ("_position" \<tau>))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" CR3_RED)
###     ("_cargs" ("_position" t) ("_position" \<tau>)))
###   ("\<^const>HOL.All_binder" ("_position" t')
###     ("\<^const>HOL.implies"
###       ("\<^const>Lam_ml.stack_reduction" ("_position" t) ("_position" t'))
###       ("\<^const>Set.member" ("_position" t')
###         ("_applC" ("_position" RED) ("_position" \<tau>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "FST"
  Proving monotonicity ...
### Ambiguous input (line 808 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>Pure.all_binder" ("_position" k')
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Lam_ml.stack_reduction" ("_position" k)
###           ("_position" k')))
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" SSN) ("_position" k')))))
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" SSN) ("_position" k))))
### ("\<^const>Pure.imp"
###   ("\<^const>Pure.all_binder" ("_position" k')
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Lam_ml.reduction" ("_position" k) ("_position" k')))
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" SSN) ("_position" k')))))
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" SSN) ("_position" k))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "SSN"
  Proving monotonicity ...
### Ambiguous input (line 819 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>SND_DIS"
###     ("\<^const>Lam_ml.dismantle" ("_position" t) ("_position" k))
###     ("_position" k)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Lam_ml.dismantle" ("_position" t)
###     ("\<^fixed>SND_DIS" ("_position" k) ("_position" k))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "SND_DIS"
  Proving monotonicity ...
### Ambiguous input (line 865 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Lam_ml.reduction"
###     ("\<^const>Lam_ml.dismantle" ("_position" t) ("_position" k))
###     ("_position" r)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Lam_ml.stack_reduction"
###     ("\<^const>Lam_ml.dismantle" ("_position" t) ("_position" k))
###     ("_position" r)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Lam_ml.dismantle" ("_position" t)
###     ("\<^const>Lam_ml.stack_reduction" ("_position" k) ("_position" r))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 866 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" t')
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Lam_ml.stack_reduction" ("_position" t)
###           ("_position" t')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" r)
###             ("\<^const>Lam_ml.dismantle" ("_position" t')
###               ("_position" k))))))
###     ("\<^const>HOL.Trueprop" ("_position" P))))
### ("\<^const>Pure.all_binder" ("_position" t')
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Lam_ml.reduction" ("_position" t) ("_position" t')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" r)
###             ("\<^const>Lam_ml.dismantle" ("_position" t')
###               ("_position" k))))))
###     ("\<^const>HOL.Trueprop" ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 867 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" k')
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Lam_ml.stack_reduction" ("_position" k)
###           ("_position" k')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" r)
###             ("\<^const>Lam_ml.dismantle" ("_position" t)
###               ("_position" k'))))))
###     ("\<^const>HOL.Trueprop" ("_position" P))))
### ("\<^const>Pure.all_binder" ("_position" k')
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Lam_ml.reduction" ("_position" k) ("_position" k')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" r)
###             ("\<^const>Lam_ml.dismantle" ("_position" t)
###               ("_position" k'))))))
###     ("\<^const>HOL.Trueprop" ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 868 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" s)
###     ("_idts" ("_position" y) ("_idts" ("_position" n) ("_position" l))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" t)
###           ("\<^const>Lam_ml.trm.Ret" ("_position" s))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" k)
###             ("\<^const>Lam_ml.stack.St" ("_position" y) ("_position" n)
###               ("_position" l))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" r)
###               ("\<^const>Lam_ml.dismantle"
###                 ("\<^const>Lam_ml.subst" ("_position" n) ("_position" y)
###                   ("_position" s))
###                 ("_position" l)))))))
###     ("\<^const>HOL.Trueprop" ("_position" P))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" s)
###     ("_idts" ("_position" y) ("_idts" ("_position" n) ("_position" l))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" t) ("_list" ("_position" s))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" k)
###             ("\<^const>Lam_ml.stack.St" ("_position" y) ("_position" n)
###               ("_position" l))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" r)
###               ("\<^const>Lam_ml.dismantle"
###                 ("\<^const>Lam_ml.subst" ("_position" n) ("_position" y)
###                   ("_position" s))
###                 ("_position" l)))))))
###     ("\<^const>HOL.Trueprop" ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 973 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Lam_ml.reduction"
###     ("\<^const>Lam_ml.dismantle" ("_position" t) ("_position" k))
###     ("_position" r)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Lam_ml.stack_reduction"
###     ("\<^const>Lam_ml.dismantle" ("_position" t) ("_position" k))
###     ("_position" r)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Lam_ml.dismantle" ("_position" t)
###     ("\<^const>Lam_ml.stack_reduction" ("_position" k) ("_position" r))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 975 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" t')
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Lam_ml.stack_reduction" ("_position" t)
###           ("_position" t')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" r)
###             ("\<^const>Lam_ml.dismantle" ("_position" t')
###               ("_position" k))))))
###     ("\<^const>HOL.Trueprop" ("_position" P))))
### ("\<^const>Pure.all_binder" ("_position" t')
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Lam_ml.reduction" ("_position" t) ("_position" t')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" r)
###             ("\<^const>Lam_ml.dismantle" ("_position" t')
###               ("_position" k))))))
###     ("\<^const>HOL.Trueprop" ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 976 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" k')
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Lam_ml.stack_reduction" ("_position" k)
###           ("_position" k')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" r)
###             ("\<^const>Lam_ml.dismantle" ("_position" t)
###               ("_position" k'))))))
###     ("\<^const>HOL.Trueprop" ("_position" P))))
### ("\<^const>Pure.all_binder" ("_position" k')
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Lam_ml.reduction" ("_position" k) ("_position" k')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" r)
###             ("\<^const>Lam_ml.dismantle" ("_position" t)
###               ("_position" k'))))))
###     ("\<^const>HOL.Trueprop" ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 983 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Lam_ml.stack_reduction" ("_list" ("_position" s))
###     ("_position" t)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Lam_ml.reduction" ("_list" ("_position" s)) ("_position" t)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Lam_ml.stack_reduction"
###     ("\<^const>Lam_ml.trm.Ret" ("_position" s)) ("_position" t)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Lam_ml.reduction" ("\<^const>Lam_ml.trm.Ret" ("_position" s))
###     ("_position" t)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 984 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 10 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Lam_ml.stack_reduction"
###     ("\<^const>HOL.Ex_binder" ("_position" s')
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" t) ("_list" ("_position" s')))
###         ("_position" s)))
###     ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" s')
###     ("\<^const>Lam_ml.stack_reduction"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" t) ("_list" ("_position" s')))
###         ("_position" s))
###       ("_position" s'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" s')
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" t) ("_list" ("_position" s')))
###       ("\<^const>Lam_ml.reduction" ("_position" s) ("_position" s')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" s')
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" t)
###         ("\<^const>Lam_ml.trm.Ret" ("_position" s')))
###       ("\<^const>Lam_ml.reduction" ("_position" s) ("_position" s')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" s')
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" t) ("_list" ("_position" s')))
###       ("\<^const>Lam_ml.stack_reduction" ("_position" s)
###         ("_position" s')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" s')
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" t)
###         ("\<^const>Lam_ml.trm.Ret" ("_position" s')))
###       ("\<^const>Lam_ml.stack_reduction" ("_position" s)
###         ("_position" s')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" s')
###     ("\<^const>HOL.eq" ("_position" t)
###       ("\<^const>Lam_ml.stack_reduction"
###         ("\<^const>HOL.conj" ("_list" ("_position" s')) ("_position" s))
###         ("_position" s')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" s')
###     ("\<^const>HOL.eq" ("_position" t)
###       ("\<^const>Lam_ml.stack_reduction"
###         ("\<^const>HOL.conj" ("\<^const>Lam_ml.trm.Ret" ("_position" s'))
###           ("_position" s))
###         ("_position" s')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Lam_ml.stack_reduction"
###     ("\<^const>HOL.Ex_binder" ("_position" s')
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" t)
###           ("\<^const>Lam_ml.trm.Ret" ("_position" s')))
###         ("_position" s)))
###     ("_position" s')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_position" s')
###     ("\<^const>Lam_ml.stack_reduction"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" t)
###           ("\<^const>Lam_ml.trm.Ret" ("_position" s')))
###         ("_position" s))
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 987 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" SN) ("_position" u)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" SN) ("_list" ("_position" u)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" SN) ("_position" u)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" SN)
###       ("\<^const>Lam_ml.trm.Ret" ("_position" u)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1127 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.all_binder" ("_idts" ("_position" x) ("_position" z))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" y)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Lam_ml.stack_reduction" ("_position" x)
###               ("_position" y)))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" SN) ("_position" y)))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" y)
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Lam_ml.stack_reduction" ("_position" x)
###                 ("_position" y)))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" y) ("_position" z))))))
###         ("_asms"
###           ("\<^const>Pure.all_binder" ("_position" u)
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Lam_ml.stack_reduction" ("_position" z)
###                   ("_position" u)))
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" SN) ("_position" u)))))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" u)
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Lam_ml.stack_reduction" ("_position" z)
###                     ("_position" u)))
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" P)
###                     ("_cargs" ("_position" x) ("_position" u))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" x) ("_position" z))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" x) ("_position" z))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" y)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Lam_ml.reduction" ("_position" x) ("_position" y)))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" SN) ("_position" y)))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" y)
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Lam_ml.stack_reduction" ("_position" x)
###                 ("_position" y)))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" y) ("_position" z))))))
###         ("_asms"
###           ("\<^const>Pure.all_binder" ("_position" u)
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Lam_ml.stack_reduction" ("_position" z)
###                   ("_position" u)))
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" SN) ("_position" u)))))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" u)
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Lam_ml.stack_reduction" ("_position" z)
###                     ("_position" u)))
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" P)
###                     ("_cargs" ("_position" x) ("_position" u))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" x) ("_position" z))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" x) ("_position" z))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" y)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Lam_ml.stack_reduction" ("_position" x)
###               ("_position" y)))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" SN) ("_position" y)))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" y)
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Lam_ml.reduction" ("_position" x) ("_position" y)))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" y) ("_position" z))))))
###         ("_asms"
###           ("\<^const>Pure.all_binder" ("_position" u)
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Lam_ml.stack_reduction" ("_position" z)
###                   ("_position" u)))
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" SN) ("_position" u)))))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" u)
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Lam_ml.stack_reduction" ("_position" z)
###                     ("_position" u)))
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" P)
###                     ("_cargs" ("_position" x) ("_position" u))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" x) ("_position" z))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" x) ("_position" z))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" y)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Lam_ml.reduction" ("_position" x) ("_position" y)))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" SN) ("_position" y)))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" y)
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Lam_ml.reduction" ("_position" x) ("_position" y)))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" y) ("_position" z))))))
###         ("_asms"
###           ("\<^const>Pure.all_binder" ("_position" u)
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Lam_ml.stack_reduction" ("_position" z)
###                   ("_position" u)))
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" SN) ("_position" u)))))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" u)
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Lam_ml.stack_reduction" ("_position" z)
###                     ("_position" u)))
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" P)
###                     ("_cargs" ("_position" x) ("_position" u))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" x) ("_position" z))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" x) ("_position" z))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" y)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Lam_ml.stack_reduction" ("_position" x)
###               ("_position" y)))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" SN) ("_position" y)))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" y)
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Lam_ml.stack_reduction" ("_position" x)
###                 ("_position" y)))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" y) ("_position" z))))))
###         ("_asms"
###           ("\<^const>Pure.all_binder" ("_position" u)
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Lam_ml.reduction" ("_position" z)
###                   ("_position" u)))
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" SN) ("_position" u)))))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" u)
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Lam_ml.stack_reduction" ("_position" z)
###                     ("_position" u)))
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" P)
###                     ("_cargs" ("_position" x) ("_position" u))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" x) ("_position" z))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" x) ("_position" z))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" y)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Lam_ml.reduction" ("_position" x) ("_position" y)))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" SN) ("_position" y)))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" y)
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Lam_ml.stack_reduction" ("_position" x)
###                 ("_position" y)))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" y) ("_position" z))))))
###         ("_asms"
###           ("\<^const>Pure.all_binder" ("_position" u)
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Lam_ml.reduction" ("_position" z)
###                   ("_position" u)))
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" SN) ("_position" u)))))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" u)
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Lam_ml.stack_reduction" ("_position" z)
###                     ("_position" u)))
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" P)
###                     ("_cargs" ("_position" x) ("_position" u))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" x) ("_position" z))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" x) ("_position" z))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" y)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Lam_ml.stack_reduction" ("_position" x)
###               ("_position" y)))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" SN) ("_position" y)))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" y)
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Lam_ml.reduction" ("_position" x) ("_position" y)))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" y) ("_position" z))))))
###         ("_asms"
###           ("\<^const>Pure.all_binder" ("_position" u)
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Lam_ml.reduction" ("_position" z)
###                   ("_position" u)))
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" SN) ("_position" u)))))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" u)
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Lam_ml.stack_reduction" ("_position" z)
###                     ("_position" u)))
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" P)
###                     ("_cargs" ("_position" x) ("_position" u))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" x) ("_position" z))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" x) ("_position" z))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" y)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Lam_ml.reduction" ("_position" x) ("_position" y)))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" SN) ("_position" y)))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" y)
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Lam_ml.reduction" ("_position" x) ("_position" y)))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" y) ("_position" z))))))
###         ("_asms"
###           ("\<^const>Pure.all_binder" ("_position" u)
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Lam_ml.reduction" ("_position" z)
###                   ("_position" u)))
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" SN) ("_position" u)))))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" u)
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Lam_ml.stack_reduction" ("_position" z)
###                     ("_position" u)))
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" P)
###                     ("_cargs" ("_position" x) ("_position" u))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" x) ("_position" z))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" x) ("_position" z))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" y)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Lam_ml.stack_reduction" ("_position" x)
###               ("_position" y)))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" SN) ("_position" y)))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" y)
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Lam_ml.stack_reduction" ("_position" x)
###                 ("_position" y)))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" y) ("_position" z))))))
###         ("_asms"
###           ("\<^const>Pure.all_binder" ("_position" u)
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Lam_ml.stack_reduction" ("_position" z)
###                   ("_position" u)))
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" SN) ("_position" u)))))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" u)
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Lam_ml.reduction" ("_position" z)
###                     ("_position" u)))
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" P)
###                     ("_cargs" ("_position" x) ("_position" u))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" x) ("_position" z))))))
### ("\<^const>Pure.all_binder" ("_idts" ("_position" x) ("_position" z))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" y)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Lam_ml.reduction" ("_position" x) ("_position" y)))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" SN) ("_position" y)))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" y)
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Lam_ml.stack_reduction" ("_position" x)
###                 ("_position" y)))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" y) ("_position" z))))))
###         ("_asms"
###           ("\<^const>Pure.all_binder" ("_position" u)
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Lam_ml.stack_reduction" ("_position" z)
###                   ("_position" u)))
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" SN) ("_position" u)))))
###           ("_asm"
###             ("\<^const>Pure.all_binder" ("_position" u)
###               ("\<^const>Pure.imp"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Lam_ml.reduction" ("_position" z)
###                     ("_position" u)))
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" P)
###                     ("_cargs" ("_position" x) ("_position" u))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" x) ("_position" z))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1156 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_idtyp" ("_position" x) ("_type_name" trm))
###     ("_idtyp" ("_position" z) ("_type_name" trm)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" y)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Lam_ml.stack_reduction" ("_position" x)
###               ("_position" y)))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs" ("_position" y) ("_position" z))))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" u)
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Lam_ml.stack_reduction" ("_position" z)
###                 ("_position" u)))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" x) ("_position" u))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" x) ("_position" z))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_idtyp" ("_position" x) ("_type_name" trm))
###     ("_idtyp" ("_position" z) ("_type_name" trm)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" y)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Lam_ml.reduction" ("_position" x) ("_position" y)))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs" ("_position" y) ("_position" z))))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" u)
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Lam_ml.stack_reduction" ("_position" z)
###                 ("_position" u)))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" x) ("_position" u))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" x) ("_position" z))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_idtyp" ("_position" x) ("_type_name" trm))
###     ("_idtyp" ("_position" z) ("_type_name" trm)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" y)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Lam_ml.stack_reduction" ("_position" x)
###               ("_position" y)))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs" ("_position" y) ("_position" z))))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" u)
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Lam_ml.reduction" ("_position" z) ("_position" u)))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" x) ("_position" u))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" x) ("_position" z))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_idtyp" ("_position" x) ("_type_name" trm))
###     ("_idtyp" ("_position" z) ("_type_name" trm)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" y)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Lam_ml.reduction" ("_position" x) ("_position" y)))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs" ("_position" y) ("_position" z))))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" u)
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Lam_ml.reduction" ("_position" z) ("_position" u)))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" x) ("_position" u))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" x) ("_position" z))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1163 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Lam_ml.reduction"
###     ("\<^const>Lam_ml.trm.Lam" ("_position" x) ("_position" t))
###     ("_position" r)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Lam_ml.stack_reduction"
###     ("\<^const>Lam_ml.trm.Lam" ("_position" x) ("_position" t))
###     ("_position" r)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Lam_ml.trm.Lam" ("_position" x)
###     ("\<^const>Lam_ml.stack_reduction" ("_position" t) ("_position" r))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1164 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>Lam_ml.stack_reduction"
###       ("\<^const>HOL.Ex_binder" ("_position" t')
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" r)
###             ("\<^const>Lam_ml.trm.Lam" ("_position" x) ("_position" t')))
###           ("_position" t)))
###       ("_position" t'))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" t)
###         ("_applC" ("_position" App)
###           ("_cargs" ("_position" r)
###             ("_applC" ("_position" Var) ("_position" x)))))
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" r)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>HOL.Ex_binder" ("_position" t')
###       ("\<^const>Lam_ml.stack_reduction"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" r)
###             ("\<^const>Lam_ml.trm.Lam" ("_position" x) ("_position" t')))
###           ("_position" t))
###         ("_position" t')))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" t)
###         ("_applC" ("_position" App)
###           ("_cargs" ("_position" r)
###             ("_applC" ("_position" Var) ("_position" x)))))
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" r)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>HOL.Ex_binder" ("_position" t')
###       ("\<^const>HOL.eq" ("_position" r)
###         ("\<^const>Lam_ml.trm.Lam" ("_position" x)
###           ("\<^const>Lam_ml.stack_reduction"
###             ("\<^const>HOL.conj" ("_position" t') ("_position" t))
###             ("_position" t')))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" t)
###         ("_applC" ("_position" App)
###           ("_cargs" ("_position" r)
###             ("_applC" ("_position" Var) ("_position" x)))))
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" r)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>HOL.Ex_binder" ("_position" t')
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" r)
###           ("\<^const>Lam_ml.trm.Lam" ("_position" x) ("_position" t')))
###         ("\<^const>Lam_ml.stack_reduction" ("_position" t)
###           ("_position" t'))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" t)
###         ("_applC" ("_position" App)
###           ("_cargs" ("_position" r)
###             ("_applC" ("_position" Var) ("_position" x)))))
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" r)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>HOL.Ex_binder" ("_position" t')
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" r)
###           ("\<^const>Lam_ml.trm.Lam" ("_position" x) ("_position" t')))
###         ("\<^const>Lam_ml.reduction" ("_position" t) ("_position" t'))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" t)
###         ("_applC" ("_position" App)
###           ("_cargs" ("_position" r)
###             ("_applC" ("_position" Var) ("_position" x)))))
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" r)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>HOL.Ex_binder" ("_position" t')
###       ("\<^const>HOL.eq" ("_position" r)
###         ("\<^const>Lam_ml.stack_reduction"
###           ("\<^const>HOL.conj"
###             ("\<^const>Lam_ml.trm.Lam" ("_position" x) ("_position" t'))
###             ("_position" t))
###           ("_position" t'))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" t)
###         ("_applC" ("_position" App)
###           ("_cargs" ("_position" r)
###             ("_applC" ("_position" Var) ("_position" x)))))
###       ("\<^const>Nominal.fresh" ("_position" x) ("_position" r)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1323 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_idtyp" ("_position" p) ("_type_name" trm))
###     ("_idts" ("_idtyp" ("_position" q) ("_type_name" trm))
###       ("_idtyp" ("_position" k) ("_type_name" stack))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" p')
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Lam_ml.stack_reduction" ("_position" p)
###               ("_position" p')))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs" ("_position" p')
###                 ("_cargs" ("_position" q) ("_position" k)))))))
###       ("_asms"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" q') ("_position" k))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Lam_ml.stack_reduction" ("_position" q)
###                 ("_position" q')))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" p)
###                   ("_cargs" ("_position" q') ("_position" k)))))))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" k')
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Orderings.ord_class.less"
###                   ("\<^const>Lam_ml.length" ("_position" k'))
###                   ("\<^const>Lam_ml.length" ("_position" k))))
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" P)
###                   ("_cargs" ("_position" p)
###                     ("_cargs" ("_position" q) ("_position" k'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" p)
###           ("_cargs" ("_position" q) ("_position" k)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_idtyp" ("_position" p) ("_type_name" trm))
###     ("_idts" ("_idtyp" ("_position" q) ("_type_name" trm))
###       ("_idtyp" ("_position" k) ("_type_name" stack))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" p')
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Lam_ml.reduction" ("_position" p) ("_position" p')))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs" ("_position" p')
###                 ("_cargs" ("_position" q) ("_position" k)))))))
###       ("_asms"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" q') ("_position" k))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Lam_ml.stack_reduction" ("_position" q)
###                 ("_position" q')))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" p)
###                   ("_cargs" ("_position" q') ("_position" k)))))))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" k')
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Orderings.ord_class.less"
###                   ("\<^const>Lam_ml.length" ("_position" k'))
###                   ("\<^const>Lam_ml.length" ("_position" k))))
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" P)
###                   ("_cargs" ("_position" p)
###                     ("_cargs" ("_position" q) ("_position" k'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" p)
###           ("_cargs" ("_position" q) ("_position" k)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_idtyp" ("_position" p) ("_type_name" trm))
###     ("_idts" ("_idtyp" ("_position" q) ("_type_name" trm))
###       ("_idtyp" ("_position" k) ("_type_name" stack))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" p')
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Lam_ml.stack_reduction" ("_position" p)
###               ("_position" p')))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs" ("_position" p')
###                 ("_cargs" ("_position" q) ("_position" k)))))))
###       ("_asms"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" q') ("_position" k))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Lam_ml.reduction" ("_position" q)
###                 ("_position" q')))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" p)
###                   ("_cargs" ("_position" q') ("_position" k)))))))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" k')
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Orderings.ord_class.less"
###                   ("\<^const>Lam_ml.length" ("_position" k'))
###                   ("\<^const>Lam_ml.length" ("_position" k))))
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" P)
###                   ("_cargs" ("_position" p)
###                     ("_cargs" ("_position" q) ("_position" k'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" p)
###           ("_cargs" ("_position" q) ("_position" k)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_idtyp" ("_position" p) ("_type_name" trm))
###     ("_idts" ("_idtyp" ("_position" q) ("_type_name" trm))
###       ("_idtyp" ("_position" k) ("_type_name" stack))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" p')
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Lam_ml.reduction" ("_position" p) ("_position" p')))
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs" ("_position" p')
###                 ("_cargs" ("_position" q) ("_position" k)))))))
###       ("_asms"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" q') ("_position" k))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Lam_ml.reduction" ("_position" q)
###                 ("_position" q')))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("_position" p)
###                   ("_cargs" ("_position" q') ("_position" k)))))))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" k')
###             ("\<^const>Pure.imp"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Orderings.ord_class.less"
###                   ("\<^const>Lam_ml.length" ("_position" k'))
###                   ("\<^const>Lam_ml.length" ("_position" k))))
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" P)
###                   ("_cargs" ("_position" p)
###                     ("_cargs" ("_position" q) ("_position" k'))))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" p)
###           ("_cargs" ("_position" q) ("_position" k)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1359 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 3 parse trees:
### ("\<^const>Lam_ml.reduction"
###   ("\<^const>Lam_ml.dismantle" ("_position" t) ("_position" k))
###   ("_position" r))
### ("\<^const>Lam_ml.stack_reduction"
###   ("\<^const>Lam_ml.dismantle" ("_position" t) ("_position" k))
###   ("_position" r))
### ("\<^const>Lam_ml.dismantle" ("_position" t)
###   ("\<^const>Lam_ml.stack_reduction" ("_position" k) ("_position" r)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1367 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Lam_ml.reduction"
###     ("\<^const>Lam_ml.dismantle" ("_position" t) ("_position" k))
###     ("_position" r)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Lam_ml.stack_reduction"
###     ("\<^const>Lam_ml.dismantle" ("_position" t) ("_position" k))
###     ("_position" r)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Lam_ml.dismantle" ("_position" t)
###     ("\<^const>Lam_ml.stack_reduction" ("_position" k) ("_position" r))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1369 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" t')
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Lam_ml.stack_reduction" ("_position" t)
###           ("_position" t')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" r)
###             ("\<^const>Lam_ml.dismantle" ("_position" t')
###               ("_position" k))))))
###     ("\<^const>HOL.Trueprop" ("_position" P))))
### ("\<^const>Pure.all_binder" ("_position" t')
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Lam_ml.reduction" ("_position" t) ("_position" t')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" r)
###             ("\<^const>Lam_ml.dismantle" ("_position" t')
###               ("_position" k))))))
###     ("\<^const>HOL.Trueprop" ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1370 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder" ("_position" k')
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Lam_ml.stack_reduction" ("_position" k)
###           ("_position" k')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" r)
###             ("\<^const>Lam_ml.dismantle" ("_position" t)
###               ("_position" k'))))))
###     ("\<^const>HOL.Trueprop" ("_position" P))))
### ("\<^const>Pure.all_binder" ("_position" k')
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Lam_ml.reduction" ("_position" k) ("_position" k')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" r)
###             ("\<^const>Lam_ml.dismantle" ("_position" t)
###               ("_position" k'))))))
###     ("\<^const>HOL.Trueprop" ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1371 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" s) ("_idts" ("_position" n) ("_position" l)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" t)
###           ("\<^const>Lam_ml.trm.Ret" ("_position" s))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" k)
###             ("\<^const>Lam_ml.stack.St" ("_position" y) ("_position" n)
###               ("_position" l))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" r)
###               ("\<^const>Lam_ml.dismantle"
###                 ("\<^const>Lam_ml.subst" ("_position" n) ("_position" y)
###                   ("_position" s))
###                 ("_position" l)))))))
###     ("\<^const>HOL.Trueprop" ("_position" P))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" s) ("_idts" ("_position" n) ("_position" l)))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" t) ("_list" ("_position" s))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" k)
###             ("\<^const>Lam_ml.stack.St" ("_position" y) ("_position" n)
###               ("_position" l))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" r)
###               ("\<^const>Lam_ml.dismantle"
###                 ("\<^const>Lam_ml.subst" ("_position" n) ("_position" y)
###                   ("_position" s))
###                 ("_position" l)))))))
###     ("\<^const>HOL.Trueprop" ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1478 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.reduction" ("_position" p) ("_position" p')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.redrtrans"
###       ("\<^const>Lam_ml.subst" ("_position" m) ("_position" x)
###         ("_position" p))
###       ("\<^const>Lam_ml.subst" ("_position" m) ("_position" x)
###         ("_position" p')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.stack_reduction" ("_position" p) ("_position" p')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.redrtrans"
###       ("\<^const>Lam_ml.subst" ("_position" m) ("_position" x)
###         ("_position" p))
###       ("\<^const>Lam_ml.subst" ("_position" m) ("_position" x)
###         ("_position" p')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1487 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 9 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.redrtrans" ("_position" s) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" App)
###       ("_cargs" ("_position" s)
###         ("_cargs"
###           ("\<^const>Lam_ml.redrtrans" ("_position" t) ("_position" App))
###           ("_cargs" ("_position" s') ("_position" t)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.redrtrans" ("_position" s) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" App)
###       ("_cargs"
###         ("\<^const>Lam_ml.redrtrans"
###           ("_applC" ("_position" s) ("_position" t)) ("_position" App))
###         ("_cargs" ("_position" s') ("_position" t))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.redrtrans" ("_position" s) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.redrtrans"
###       ("_applC" ("_position" App)
###         ("_cargs" ("_position" s) ("_position" t)))
###       ("_applC" ("_position" App)
###         ("_cargs" ("_position" s') ("_position" t))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.redrtrans" ("_position" s) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" App)
###       ("\<^const>Lam_ml.redrtrans"
###         ("_applC" ("_position" s) ("_position" t))
###         ("_applC" ("_position" App)
###           ("_cargs" ("_position" s') ("_position" t)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.redrtrans" ("_position" s) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" App)
###       ("_cargs" ("_position" s)
###         ("\<^const>Lam_ml.redrtrans" ("_position" t)
###           ("_applC" ("_position" App)
###             ("_cargs" ("_position" s') ("_position" t))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.redrtrans" ("_position" s) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>Lam_ml.redrtrans"
###         ("_applC" ("_position" App)
###           ("_cargs" ("_position" s) ("_position" t)))
###         ("_position" App))
###       ("_cargs" ("_position" s') ("_position" t)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.redrtrans" ("_position" s) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" App)
###       ("_cargs" ("_position" s)
###         ("_cargs"
###           ("\<^const>Lam_ml.redrtrans" ("_position" t)
###             ("_applC" ("_position" App) ("_position" s')))
###           ("_position" t))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.redrtrans" ("_position" s) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" App)
###       ("_cargs"
###         ("\<^const>Lam_ml.redrtrans"
###           ("_applC" ("_position" s) ("_position" t))
###           ("_applC" ("_position" App) ("_position" s')))
###         ("_position" t)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.redrtrans" ("_position" s) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>Lam_ml.redrtrans"
###         ("_applC" ("_position" App)
###           ("_cargs" ("_position" s) ("_position" t)))
###         ("_applC" ("_position" App) ("_position" s')))
###       ("_position" t))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1488 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 9 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.redrtrans" ("_position" t) ("_position" t')))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" App)
###       ("_cargs" ("_position" s)
###         ("_cargs"
###           ("\<^const>Lam_ml.redrtrans" ("_position" t) ("_position" App))
###           ("_cargs" ("_position" s) ("_position" t')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.redrtrans" ("_position" t) ("_position" t')))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" App)
###       ("_cargs"
###         ("\<^const>Lam_ml.redrtrans"
###           ("_applC" ("_position" s) ("_position" t)) ("_position" App))
###         ("_cargs" ("_position" s) ("_position" t'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.redrtrans" ("_position" t) ("_position" t')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.redrtrans"
###       ("_applC" ("_position" App)
###         ("_cargs" ("_position" s) ("_position" t)))
###       ("_applC" ("_position" App)
###         ("_cargs" ("_position" s) ("_position" t'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.redrtrans" ("_position" t) ("_position" t')))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" App)
###       ("\<^const>Lam_ml.redrtrans"
###         ("_applC" ("_position" s) ("_position" t))
###         ("_applC" ("_position" App)
###           ("_cargs" ("_position" s) ("_position" t')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.redrtrans" ("_position" t) ("_position" t')))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" App)
###       ("_cargs" ("_position" s)
###         ("\<^const>Lam_ml.redrtrans" ("_position" t)
###           ("_applC" ("_position" App)
###             ("_cargs" ("_position" s) ("_position" t'))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.redrtrans" ("_position" t) ("_position" t')))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>Lam_ml.redrtrans"
###         ("_applC" ("_position" App)
###           ("_cargs" ("_position" s) ("_position" t)))
###         ("_position" App))
###       ("_cargs" ("_position" s) ("_position" t')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.redrtrans" ("_position" t) ("_position" t')))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" App)
###       ("_cargs" ("_position" s)
###         ("_cargs"
###           ("\<^const>Lam_ml.redrtrans" ("_position" t)
###             ("_applC" ("_position" App) ("_position" s)))
###           ("_position" t'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.redrtrans" ("_position" t) ("_position" t')))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" App)
###       ("_cargs"
###         ("\<^const>Lam_ml.redrtrans"
###           ("_applC" ("_position" s) ("_position" t))
###           ("_applC" ("_position" App) ("_position" s)))
###         ("_position" t')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.redrtrans" ("_position" t) ("_position" t')))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>Lam_ml.redrtrans"
###         ("_applC" ("_position" App)
###           ("_cargs" ("_position" s) ("_position" t)))
###         ("_applC" ("_position" App) ("_position" s)))
###       ("_position" t'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1489 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.redrtrans" ("_position" t) ("_position" t')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.redrtrans"
###       ("\<^const>Lam_ml.trm.Lam" ("_position" x) ("_position" t))
###       ("\<^const>Lam_ml.trm.Lam" ("_position" x) ("_position" t')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.redrtrans" ("_position" t) ("_position" t')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.trm.Lam" ("_position" x)
###       ("\<^const>Lam_ml.redrtrans" ("_position" t)
###         ("\<^const>Lam_ml.trm.Lam" ("_position" x) ("_position" t'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1490 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.redrtrans" ("_position" s) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.trm.To"
###       ("\<^const>Lam_ml.redrtrans"
###         ("\<^const>Lam_ml.trm.To" ("_position" s) ("_position" x)
###           ("_position" t))
###         ("_position" s'))
###       ("_position" x) ("_position" t))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.redrtrans" ("_position" s) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.redrtrans"
###       ("\<^const>Lam_ml.trm.To" ("_position" s) ("_position" x)
###         ("_position" t))
###       ("\<^const>Lam_ml.trm.To" ("_position" s') ("_position" x)
###         ("_position" t)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.redrtrans" ("_position" s) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.trm.To" ("_position" s) ("_position" x)
###       ("\<^const>Lam_ml.redrtrans" ("_position" t)
###         ("\<^const>Lam_ml.trm.To" ("_position" s') ("_position" x)
###           ("_position" t))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.redrtrans" ("_position" s) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.trm.To" ("_position" s) ("_position" x)
###       ("\<^const>Lam_ml.trm.To"
###         ("\<^const>Lam_ml.redrtrans" ("_position" t) ("_position" s'))
###         ("_position" x) ("_position" t)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1491 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Lam_ml.redrtrans" ("_position" t) ("_position" t'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.trm.To"
###       ("\<^const>Lam_ml.redrtrans"
###         ("\<^const>Lam_ml.trm.To" ("_position" s) ("_position" x)
###           ("_position" t))
###         ("_position" s))
###       ("_position" x) ("_position" t'))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Lam_ml.redrtrans" ("_position" t) ("_position" t'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.redrtrans"
###       ("\<^const>Lam_ml.trm.To" ("_position" s) ("_position" x)
###         ("_position" t))
###       ("\<^const>Lam_ml.trm.To" ("_position" s) ("_position" x)
###         ("_position" t')))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Lam_ml.redrtrans" ("_position" t) ("_position" t'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.trm.To" ("_position" s) ("_position" x)
###       ("\<^const>Lam_ml.redrtrans" ("_position" t)
###         ("\<^const>Lam_ml.trm.To" ("_position" s) ("_position" x)
###           ("_position" t'))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Lam_ml.redrtrans" ("_position" t) ("_position" t'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.trm.To" ("_position" s) ("_position" x)
###       ("\<^const>Lam_ml.trm.To"
###         ("\<^const>Lam_ml.redrtrans" ("_position" t) ("_position" s))
###         ("_position" x) ("_position" t')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1492 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.redrtrans" ("_position" s) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.redrtrans" ("_list" ("_position" s))
###       ("\<^const>Lam_ml.trm.Ret" ("_position" s')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.redrtrans" ("_position" s) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.redrtrans" ("\<^const>Lam_ml.trm.Ret" ("_position" s))
###       ("\<^const>Lam_ml.trm.Ret" ("_position" s')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.redrtrans" ("_position" s) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.redrtrans" ("_list" ("_position" s))
###       ("_list" ("_position" s')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.redrtrans" ("_position" s) ("_position" s')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.redrtrans" ("\<^const>Lam_ml.trm.Ret" ("_position" s))
###       ("_list" ("_position" s')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1496 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.reduction" ("_position" p) ("_position" p')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.redrtrans"
###       ("\<^const>Lam_ml.subst" ("_position" m) ("_position" x)
###         ("_position" p))
###       ("\<^const>Lam_ml.subst" ("_position" m) ("_position" x)
###         ("_position" p')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.stack_reduction" ("_position" p) ("_position" p')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Lam_ml.redrtrans"
###       ("\<^const>Lam_ml.subst" ("_position" m) ("_position" x)
###         ("_position" p))
###       ("\<^const>Lam_ml.subst" ("_position" m) ("_position" x)
###         ("_position" p')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1527 of "$AFP/Lam-ml-Normalization/Lam_ml.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" SN)
###     ("\<^const>Lam_ml.dismantle"
###       ("\<^const>Lam_ml.trm.To" ("_list" ("_position" p)) ("_position" x)
###         ("_position" n))
###       ("_position" k))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" SN)
###     ("\<^const>Lam_ml.dismantle"
###       ("\<^const>Lam_ml.trm.To" ("\<^const>Lam_ml.trm.Ret" ("_position" p))
###         ("_position" x) ("_position" n))
###       ("_position" k))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size_list (%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Lam_ml"
### 3.381s elapsed time, 3.744s cpu time, 0.492s GC time
Loading theory "Draft.Lam_mlMoreTemplates"
val templateLemmas =
   [("Lam_ml.RED_props", "CR1 ?\<tau>",
     template_predicate (template_app (template_hole 0, template_var 0))),
    ("Lam_ml.RED_props", "CR2 ?\<tau>",
     template_predicate (template_app (template_hole 0, template_var 0))),
    ("Lam_ml.RED_props", "CR3 ?\<tau>",
     template_predicate (template_app (template_hole 0, template_var 0))),
    ("Lam_ml.fin_supp", "finite (supp ?x)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Lam_ml.normal_var", "NORMAL (Var ?x)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Lam_ml.fresh_ty", "?x \<sharp> ?\<tau>",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)
         )),
    ("Lam_ml.ex_fresh", "EX c. c \<sharp> ?x",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Lam_ml.calc_atm", "[] \<bullet> ?x = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Lam_ml.ty_perm_empty", "[] \<bullet> ?ty_Rep = ?ty_Rep",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Lam_ml.trm_perm_empty", "[] \<bullet> ?trm_Rep = ?trm_Rep",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Lam_ml.stack_perm_empty", "[] \<bullet> ?stack_Rep = ?stack_Rep",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Lam_ml.name_injection", "EX x. ?y = name x",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("Lam_ml.supp_atm", "supp ?x = {?x}",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Lam_ml.id_apply", "Lam_ml.id ?\<Gamma><?t> = ?t",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_var 0)),
    ("Lam_ml.CR3_implies_CR4", "CR3 ?\<tau> ==> CR4 ?\<tau>",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Lam_ml.normal_implies_sn", "NORMAL ?s ==> SN ?s",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Lam_ml.adequacy", "?s \<mapsto> ?t = ?s \<leadsto> ?t",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Lam_ml.id_maps", "Lam_ml.id ?\<Gamma> maps ?a to Var ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Lam_ml.trm_unfolded_perm_eq",
     "perm_trm_Rep_noption1 ?pi ?noption1.0 = ?pi \<bullet> ?noption1.0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Lam_ml.trm_unfolded_perm_eq",
     "perm_trm_Rep_noption2 ?pi ?noption2.0 = ?pi \<bullet> ?noption2.0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Lam_ml.SN_Ret", "SN ?u ==> SN [?u]",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Lam_ml.perm_pi_simp", "?pi \<bullet> rev ?pi \<bullet> ?x = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_var 0)),
    ("Lam_ml.perm_pi_simp", "rev ?pi \<bullet> ?pi \<bullet> ?x = ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_var 0)),
    ("Lam_ml.fresh_atm", "?a \<sharp> ?b = (?a ~= ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_negation
        (template_equation (template_var 1, template_var 0)))),
    ("Lam_ml.r9'", "?s to ?x in [Var ?x] \<mapsto> ?s",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)))),
           template_var 1)
         )),
    ("Lam_ml.SN_SSN", "SN (?t \<star> ?k) ==> SSN ?k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Lam_ml.SN_of_FST_of_App", "SN (App ?t ?s) ==> SN ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 1)))),
    ("Lam_ml.strong_normalization",
     "?\<Gamma> \<turnstile> ?t : ?\<tau> ==> SN ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Lam_ml.name_swap_bij", "[(?a, ?a)] \<bullet> ?x = ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 1)),
             template_hole 0)),
         template_var 0),
       template_var 0)),
    ("Lam_ml.supp_eqvt", "?pi \<bullet> supp ?x = supp (?pi \<bullet> ?x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Lam_ml.swap_simps", "[(?a, ?b)] \<bullet> ?a = ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0)),
         template_var 1),
       template_var 0)),
    ("Lam_ml.swap_simps", "[(?a, ?b)] \<bullet> ?b = ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0)),
         template_var 0),
       template_var 1)),
    ("Lam_ml.id_fresh",
     "?x \<sharp> ?\<Gamma> ==> ?x \<sharp> Lam_ml.id ?\<Gamma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Lam_ml.id_subs", "?t[?x::=Var ?x] = ?t",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app (template_hole 1, template_var 1))),
             template_hole 0)),
         template_var 0),
       template_var 0)),
    ("Lam_ml.exists_fresh'", "finite (supp ?x) ==> EX c. c \<sharp> ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Lam_ml.typing_implies_RED",
     "?\<Gamma> \<turnstile> ?t : ?\<tau> ==> ?t : RED ?\<tau>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Lam_ml.perm_app",
     "?pi \<bullet> ?f ?x = (?pi \<bullet> ?f) (?pi \<bullet> ?x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app (template_var 1, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Lam_ml.abs_supp", "supp ([?a].?x) = supp ?x - {?a}",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("Lam_ml.perm_bij", "(?pi \<bullet> ?x = ?pi \<bullet> ?y) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Lam_ml.fresh_bij",
     "?pi \<bullet> ?a \<sharp> ?pi \<bullet> ?x = ?a \<sharp> ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("Lam_ml.fresh_star_bij",
     "(?pi \<bullet> ?a) \<sharp>* (?pi \<bullet> ?x) = ?a \<sharp>* ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("Lam_ml.fresh_star_bij",
     "(?pi \<bullet> ?b) \<sharp>* (?pi \<bullet> ?x) = ?b \<sharp>* ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("Lam_ml.ty_perm_append",
     "(?pi1.0 @ ?pi2.0) \<bullet> ?ty_Rep =
      ?pi1.0 \<bullet> ?pi2.0 \<bullet> ?ty_Rep",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Lam_ml.trm_perm_append",
     "(?pi1.0 @ ?pi2.0) \<bullet> ?trm_Rep =
      ?pi1.0 \<bullet> ?pi2.0 \<bullet> ?trm_Rep",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Lam_ml.stack_perm_append",
     "(?pi1.0 @ ?pi2.0) \<bullet> ?stack_Rep =
      ?pi1.0 \<bullet> ?pi2.0 \<bullet> ?stack_Rep",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Lam_ml.lookup_fresh'",
     "?z \<sharp> ?\<theta> ==> ?\<theta> maps ?z to Var ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app (template_hole 0, template_var 1)))),
    ("Lam_ml.ssubst_forget", "?x \<sharp> ?k ==> ssubst ?x ?v ?k = ?k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0),
           template_var 1),
         template_var 1))),
    ("Lam_ml.SN_preserved", "[| SN ?t; ?t \<mapsto> ?t' |] ==> SN ?t'",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("Lam_ml.fresh_left",
     "?a \<sharp> ?pi \<bullet> ?x = rev ?pi \<bullet> ?a \<sharp> ?x",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 2)),
         template_var 0))),
    ("Lam_ml.fresh_right",
     "?pi \<bullet> ?a \<sharp> ?x = ?a \<sharp> rev ?pi \<bullet> ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0)))),
    ("Lam_ml.dismantle_red",
     "?m \<mapsto> ?m' ==> ?m \<star> ?k \<mapsto> ?m' \<star> ?k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Lam_ml.ty_perm_eq",
     " ?pi1.0 \<triangleq> ?pi2.0  ==>
      ?pi1.0 \<bullet> ?ty_Rep = ?pi2.0 \<bullet> ?ty_Rep",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Lam_ml.trm_perm_eq",
     " ?pi1.0 \<triangleq> ?pi2.0  ==>
      ?pi1.0 \<bullet> ?trm_Rep = ?pi2.0 \<bullet> ?trm_Rep",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Lam_ml.stack_perm_eq",
     " ?pi1.0 \<triangleq> ?pi2.0  ==>
      ?pi1.0 \<bullet> ?stack_Rep = ?pi2.0 \<bullet> ?stack_Rep",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Lam_ml.r11_trans",
     " ?s \<mapsto>\<^sup>* ?s'  ==>  [?s] \<mapsto>\<^sup>* [?s'] ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Lam_ml.sn_forget", "SN (?t[?x::=?v]) ==> SN ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app
                     (template_hole 2,
                      template_app
                       (template_app (template_hole 1, template_var 2),
                        template_var 1)),
                    template_hole 0)),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 4, template_var 0)))),
    ("Lam_ml.SN_trans",
     "[|  ?p \<mapsto>\<^sup>* ?p' ; SN ?p |] ==> SN ?p'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 0, template_var 1))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Lam_ml.perm_compose",
     "?pi2.0 \<bullet> ?pi1.0 \<bullet> ?x =
      (?pi2.0 \<bullet> ?pi1.0) \<bullet> ?pi2.0 \<bullet> ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Lam_ml.abs_perm",
     "?pi \<bullet> [?a].?x = [(?pi \<bullet> ?a)].(?pi \<bullet> ?x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Lam_ml.set_diff_eqvt",
     "?pi \<bullet> (?X - ?Y) = ?pi \<bullet> ?X - ?pi \<bullet> ?Y",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Lam_ml.abs_fresh", "?b \<sharp> [?a].?x = (?b = ?a | ?b \<sharp> ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Lam_ml.dismantle_fresh",
     "?x \<sharp> ?t \<star> ?k = (?x \<sharp> ?t & ?x \<sharp> ?k)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Lam_ml.eq_eqvt",
     "?pi \<bullet> (?x = ?y) = (?pi \<bullet> ?x = ?pi \<bullet> ?y)",
     template_bimplication
      (template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))
           ),
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Lam_ml.fresh_eqvt",
     "?pi \<bullet> ?a \<sharp> ?x =
      ?pi \<bullet> ?a \<sharp> ?pi \<bullet> ?x",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Lam_ml.fresh_star_eqvt",
     "?pi \<bullet> ?a \<sharp>* ?x =
      (?pi \<bullet> ?a) \<sharp>* (?pi \<bullet> ?x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Lam_ml.fresh_star_eqvt",
     "?pi \<bullet> ?b \<sharp>* ?x =
      (?pi \<bullet> ?b) \<sharp>* (?pi \<bullet> ?x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Lam_ml.subseteq_eqvt",
     "?pi \<bullet> (?X <= ?Y) = (?pi \<bullet> ?X <= ?pi \<bullet> ?Y)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Lam_ml.in_eqvt",
     "?pi \<bullet> (?x : ?X) = (?pi \<bullet> ?x : ?pi \<bullet> ?X)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Lam_ml.dismantle_eqvt",
     "?pi \<bullet> ?t \<star> ?K =
      (?pi \<bullet> ?t) \<star> (?pi \<bullet> ?K)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Lam_ml.lookup_eqvt",
     "?pi \<bullet> lookup ?\<theta> ?x =
      lookup (?pi \<bullet> ?\<theta>) (?pi \<bullet> ?x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Lam_ml.psubst_eqvt",
     "?pi \<bullet> ?\<theta><?t> =
      (?pi \<bullet> ?\<theta>)<(?pi \<bullet> ?t)>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Lam_ml.dismantle_simp",
     "?s \<star> [?y]?n\<ggreater>?L = (?s to ?y in ?n) \<star> ?L",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0))),
    ("Lam_ml.r3'", "App (\<Lambda> ?x . ?t) ?s \<mapsto> ?t[?x::=?s]",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 1)),
               template_var 0)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 0)),
                 template_hole 0)),
             template_var 1))
         )),
    ("Lam_ml.r8'", "[?s] to ?x in ?t \<mapsto> ?t[?x::=?s]",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 2)),
                 template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 2)),
                 template_hole 0)),
             template_var 0))
         )),
    ("Lam_ml.reduction_fresh",
     "[| ?t \<mapsto> ?t'; ?x \<sharp> ?t |] ==> ?x \<sharp> ?t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Lam_ml.stack_reduction_fresh",
     "[|  ?k \<mapsto> ?k' ; ?x \<sharp> ?k |] ==> ?x \<sharp> ?k'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Lam_ml.perm_compose'",
     "(?pi2.0 \<bullet> ?pi1.0) \<bullet> ?x =
      ?pi2.0 \<bullet> ?pi1.0 \<bullet> rev ?pi2.0 \<bullet> ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 2)),
             template_var 0))))),
    ("Lam_ml.all_eqvt",
     "?pi \<bullet> HOL.induct_forall ?P =
      HOL.induct_forall (%x. ?pi \<bullet> ?P (rev ?pi \<bullet> x))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("Lam_ml.r6'",
     "?s \<mapsto> ?s' ==> ?s to ?x in ?t \<mapsto> ?s' to ?x in ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Lam_ml.r7'",
     "?t \<mapsto> ?t' ==> ?s to ?x in ?t \<mapsto> ?s to ?x in ?t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("Lam_ml.fresh_context",
     "?x \<sharp> ?\<Gamma> ==>
      \<nexists>\<tau>. (?x, \<tau>) : set ?\<Gamma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_negation
        (template_predicate (template_app (template_hole 3, t_empty))))),
    ("Lam_ml.forget", "?x \<sharp> ?t ==> ?t[?x::=?v] = ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0)),
               template_hole 0)),
           template_var 1),
         template_var 1))),
    ("Lam_ml.fresh_fact'", "?x \<sharp> ?v ==> ?x \<sharp> ?t[?x::=?v]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 2),
                       template_var 1)),
                   template_hole 0)),
               template_var 0))
           ))),
    ("Lam_ml.r1_trans",
     " ?s \<mapsto>\<^sup>* ?s'  ==>
       App ?s ?t \<mapsto>\<^sup>* App ?s' ?t ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Lam_ml.r2_trans",
     " ?t \<mapsto>\<^sup>* ?t'  ==>
       App ?s ?t \<mapsto>\<^sup>* App ?s ?t' ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Lam_ml.r4_trans",
     " ?t \<mapsto>\<^sup>* ?t'  ==>
       \<Lambda> ?x . ?t \<mapsto>\<^sup>* \<Lambda> ?x . ?t' ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Lam_ml.perm_swap",
     "[(?a, ?b)] \<bullet> [(?a, ?b)] \<bullet> ?x = ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_hole 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1)),
               template_hole 0)),
           template_var 0)),
       template_var 0)),
    ("Lam_ml.perm_swap",
     "[(?a, ?b)] \<bullet> [(?b, ?a)] \<bullet> ?x = ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_hole 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 2)),
               template_hole 0)),
           template_var 0)),
       template_var 0)),
    ("Lam_ml.calc_atm",
     "((?a, ?b) # ?pi) \<bullet> ?x = swap (?a, ?b) (?pi \<bullet> ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("Lam_ml.ssubst_fresh",
     "?y \<sharp> (?x, ?v, ?k) ==> ?y \<sharp> ssubst ?x ?v ?k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Lam_ml.lookup_fresh",
     "[| ?z \<sharp> ?\<theta>; ?z \<sharp> ?x |]
      ==> ?z \<sharp> lookup ?\<theta> ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Lam_ml.fresh_perm_app",
     "[| ?a \<sharp> ?pi; ?a \<sharp> ?x |]
      ==> ?a \<sharp> ?pi \<bullet> ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Lam_ml.psubst_fresh_fact",
     "[| ?x \<sharp> ?t; ?x \<sharp> ?\<theta> |]
      ==> ?x \<sharp> ?\<theta><?t>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Lam_ml.all_eqvt",
     "?pi \<bullet> (ALL x. ?P x) =
      (ALL x. ?pi \<bullet> ?P (rev ?pi \<bullet> x))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, t_empty)),
       template_app (template_hole 2, t_empty))),
    ("Lam_ml.ex_eqvt",
     "?pi \<bullet> (EX x. ?P x) =
      (EX x. ?pi \<bullet> ?P (rev ?pi \<bullet> x))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, t_empty)),
       template_app (template_hole 2, t_empty))),
    ("Lam_ml.ex1_eqvt",
     "?pi \<bullet> (EX! x. ?P x) =
      (EX! x. ?pi \<bullet> ?P (rev ?pi \<bullet> x))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, t_empty)),
       template_app (template_hole 2, t_empty))),
    ("Lam_ml.subst", "Var ?x[?y::=?v] = (if ?x = ?y then ?v else Var ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 2),
                      template_var 1)),
                  template_hole 3)),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2)),
               template_var 1),
             template_app (template_hole 2, template_var 0))
           ))),
    ("Lam_ml.abs_supp",
     "finite (supp ?x) ==> supp ([?a].?x) = supp ?x - {?a}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 6, template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Lam_ml.red_Ret",
     "[?s] \<mapsto> ?t ==> EX s'. ?t = [s'] & ?s \<mapsto> s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Lam_ml.r6_trans",
     " ?s \<mapsto>\<^sup>* ?s'  ==>
       ?s to ?x in ?t \<mapsto>\<^sup>* ?s' to ?x in ?t ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Lam_ml.r7_trans",
     " ?t \<mapsto>\<^sup>* ?t'  ==>
       ?s to ?x in ?t \<mapsto>\<^sup>* ?s to ?x in ?t' ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("Lam_ml.exists_fresh",
     "[| finite (supp ?x); !!c. c \<sharp> ?x ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Lam_ml.subst", "[?s][?y::=?v] = [?s[?y::=?v]]",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)),
             template_hole 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1)),
               template_hole 1)),
           template_var 0)))),
    ("Lam_ml.calc_atm",
     "swap (?a, ?b) ?c =
      (if ?a = ?c then ?b else if ?b = ?c then ?a else ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 0)),
               template_var 1),
             template_app
              (template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0)),
                 template_var 2),
               template_var 0))
           ))),
    ("Lam_ml.abs_fresh",
     "finite (supp ?x) ==>
      ?b \<sharp> [?a].?x = (?b = ?a | ?b \<sharp> ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 2))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 4, template_var 1),
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_var 2))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2))
             )))),
    ("Lam_ml.alpha''",
     "?x \<sharp> ?t ==> [?y].?t = [?x].([(?y, ?x)] \<bullet> ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 2)),
                 template_hole 0)),
             template_var 1))))),
    ("Lam_ml.perm_fresh_fresh",
     "[| ?a \<sharp> ?x; ?b \<sharp> ?x |]
      ==> [(?a, ?b)] \<bullet> ?x = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0)),
               template_hole 0)),
           template_var 1),
         template_var 1))),
    ("Lam_ml.fresh_fact",
     "[| ?x \<sharp> ?v; ?x \<sharp> ?t |] ==> ?x \<sharp> ?t[?y::=?v]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 3),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_var 2)),
                   template_hole 0)),
               template_var 1))
           ))),
    ("Lam_ml.ty_exhaust",
     "?ty = TBase |
      (EX \<sigma> \<tau>. ?ty = \<sigma> \<rightarrow> \<tau>) |
      (EX \<sigma>. ?ty = T \<sigma>)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 3)),
           template_app
            (template_app
              (template_hole 5, template_app (template_hole 2, t_empty)),
             template_app (template_hole 2, t_empty)))
         )),
    ("Lam_ml.reduction_subst",
     "?t \<mapsto> ?t' ==> ?t[?x::=?v] \<mapsto> ?t'[?x::=?v]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_var 1),
                         template_var 0)),
                     template_hole 0)),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_var 0)),
                   template_hole 0)),
               template_var 2))
           ))),
    ("Lam_ml.red_subst",
     "?p \<mapsto> ?p' ==>  ?m[?x::=?p] \<mapsto>\<^sup>* ?m[?x::=?p'] ",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_hole 5),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_var 1),
                         template_var 3)),
                     template_hole 0)),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_var 2)),
                   template_hole 0)),
               template_var 0))
           ))),
    ("Lam_ml.swap_simps",
     "[| ?a ~= ?c; ?b ~= ?c |] ==> [(?a, ?b)] \<bullet> ?c = ?c",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1)),
        template_negation
         (template_equation (template_var 0, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0)),
               template_hole 0)),
           template_var 1),
         template_var 1))),
    ("Lam_ml.sn_forget'",
     "[| SN (?t[?x::=?p] \<star> ?k); ?x \<sharp> ?k |]
      ==> SN (?t \<star> ?k)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app
                       (template_app
                         (template_hole 3,
                          template_app
                           (template_app (template_hole 2, template_var 3),
                            template_var 2)),
                        template_hole 1)),
                    template_var 1)),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0))
           ))),
    ("Lam_ml.subst_dismantle",
     "(?t \<star> ?k)[?x::=?v] = ?t[?x::=?v] \<star> ssubst ?x ?v ?k",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2)),
             template_hole 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_var 2)),
                 template_hole 2)),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 0)))),
    ("Lam_ml.psubst_subst",
     "?x \<sharp> ?\<theta> ==>
      ?\<theta><?t>[?x::=?s] = ((?x, ?s) # ?\<theta>)<?t>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 1)),
               template_hole 0)),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 1)),
               template_var 2)),
           template_var 0)))),
    ("Lam_ml.the_eqvt",
     "EX! x. ?P x ==>
      ?pi \<bullet> (THE x. ?P x) =
      (THE x. ?pi \<bullet> ?P (rev ?pi \<bullet> x))",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app (template_hole 2, t_empty)),
         template_app (template_hole 2, t_empty)))),
    ("Lam_ml.id_closes", "Lam_ml.id ?\<Gamma> closes ?\<Gamma>",
     template_predicate (template_app (template_hole 12, t_empty))),
    ("Lam_ml.stack_exhaust",
     "?k = stack.Id |
      (EX y n l. y \<sharp> l & y \<sharp> ?c & ?k = [y]n\<ggreater>l)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_var 1),
               template_hole 7)),
           template_app (template_hole 6, t_empty))
         )),
    ("Lam_ml.abs_RED",
     "ALL s:RED ?\<tau>. ?t[?x::=s] : RED ?\<sigma> ==>
      \<Lambda> ?x . ?t : RED (?\<tau> \<rightarrow> ?\<sigma>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 3)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)))
           ))),
    ("Lam_ml.subst", "App ?s ?t[?y::=?v] = App (?s[?y::=?v]) (?t[?y::=?v])",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2)),
             template_hole 1)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 2)),
                 template_hole 1)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 2)),
               template_hole 1)),
           template_var 0)))),
    ("Lam_ml.r10'",
     "[| ?x \<sharp> ?y; ?x \<sharp> ?u |]
      ==> (?s to ?x in ?t) to ?y in ?u \<mapsto> ?s to ?x in ?t to ?y in ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 1),
                         template_var 4),
                       template_var 0)),
                   template_var 3),
                 template_var 2)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 4),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3),
                 template_var 2)))
           ))),
    ("Lam_ml.fresh_aux",
     "[| ?c ~= ?a; ?a \<sharp> ?x; ?c \<sharp> ?x |]
      ==> ?c \<sharp> [(?a, ?b)] \<bullet> ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 3),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 2),
                       template_var 0)),
                   template_hole 0)),
               template_var 1))
           ))),
    ("Lam_ml.subst_rename'",
     "?y \<sharp> ?t ==> ?t[?x::=?v] = ([(?y, ?x)] \<bullet> ?t)[?y::=?v]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 0)),
               template_hole 4)),
           template_var 2),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 3),
                   template_var 0)),
               template_hole 4)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 1)),
                 template_hole 0)),
             template_var 2))))),
    ("Lam_ml.subst_rename",
     "?y \<sharp> ?t ==> ([(?y, ?x)] \<bullet> ?t)[?y::=?v] = ?t[?x::=?v]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 3),
                   template_var 1)),
               template_hole 4)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 0)),
                 template_hole 0)),
             template_var 2)),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_var 1)),
               template_hole 4)),
           template_var 2)))),
    ("Lam_ml.subst",
     "?x \<sharp> (?y, ?v) ==>
      (\<Lambda> ?x . ?t)[?y::=?v] = \<Lambda> ?x . ?t[?y::=?v]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_var 1)),
               template_hole 1)),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 5, template_var 2),
                     template_var 1)),
                 template_hole 1)),
             template_var 0))))),
    ("Lam_ml.red_Lam",
     "\<Lambda> ?x . ?t \<mapsto> ?r ==>
      (EX t'. ?r = \<Lambda> ?x . t' & ?t \<mapsto> t') |
      ?t = App ?r (Var ?x) & ?x \<sharp> ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6, template_app (template_hole 5, t_empty)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_app (template_hole 1, template_var 2)))),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)))
           ))),
    ("Lam_ml.to_RED",
     "[| ?s : RED (T ?\<sigma>);
         ALL p:RED ?\<sigma>. ?t[?x::=p] : RED (T ?\<tau>) |]
      ==> ?s to ?x in ?t : RED (T ?\<tau>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 7, template_var 3)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 2),
                 template_var 1)),
             template_app
              (template_hole 7,
               template_app (template_hole 6, template_var 0)))
           ))),
    ("Lam_ml.alpha",
     "([?a].?x = [?b].?y) =
      (?a = ?b & ?x = ?y |
       ?a ~= ?b & ?x = [(?a, ?b)] \<bullet> ?y & ?a \<sharp> ?y)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 10, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 10, template_var 1),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 3),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 7, template_var 3),
                     template_var 1))),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 6, template_var 2),
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app
                            (template_hole 3,
                             template_app
                              (template_app
                                (template_hole 2, template_var 3),
                               template_var 1)),
                           template_hole 1)),
                       template_var 0))),
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0))))
           ))),
    ("Lam_ml.alpha'",
     "([?a].?x = [?b].?y) =
      (?a = ?b & ?x = ?y |
       ?a ~= ?b & [(?b, ?a)] \<bullet> ?x = ?y & ?b \<sharp> ?x)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 10, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 10, template_var 1),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 3),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 7, template_var 3),
                     template_var 1))),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_hole 4,
                           template_app
                            (template_app
                              (template_hole 3,
                               template_app
                                (template_app
                                  (template_hole 2, template_var 1),
                                 template_var 3)),
                             template_hole 1)),
                         template_var 2)),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2))))
           ))),
    ("Lam_ml.to_RED_aux",
     "[| SN ?p; ?x \<sharp> ?p; ?x \<sharp> ?k;
         SN (?n[?x::=?p] \<star> ?k) |]
      ==> SN (([?p] to ?x in ?n) \<star> ?k)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_app
                         (template_hole 4,
                          template_app
                           (template_app (template_hole 3, template_var 2),
                            template_var 3)),
                        template_hole 2)),
                    template_var 0)),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 1,
                       template_app (template_hole 0, template_var 3)),
                     template_var 2),
                   template_var 0)),
               template_var 1))
           ))),
    ("Lam_ml.sub_induction",
     "[| SN ?u; ?u : RED ?\<tau>; NEUT ?t; CR2 ?\<tau>; CR3 ?\<sigma>;
         CR3_RED ?t (?\<tau> \<rightarrow> ?\<sigma>) |]
      ==> App ?t ?u : RED ?\<sigma>",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app (template_hole 6, template_var 2))
            ),
        template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3)),
             template_app (template_hole 6, template_var 0))
           ))),
    ("Lam_ml.subst",
     "?x \<sharp> (?s, ?y, ?v) ==>
      (?s to ?x in ?t)[?y::=?v] = ?s[?y::=?v] to ?x in ?t[?y::=?v]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_app
               (template_app (template_hole 6, template_var 3),
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_var 1)),
               template_hole 1)),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 4),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 5, template_var 2),
                         template_var 1)),
                     template_hole 1)),
                 template_var 3)),
             template_var 4),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 5, template_var 2),
                     template_var 1)),
                 template_hole 1)),
             template_var 0))))),
    ("Lam_ml.fundamental_theorem",
     "[| ?\<Gamma> \<turnstile> ?t : ?\<tau>; ?\<theta> closes ?\<Gamma> |]
      ==> ?\<theta><?t> : RED ?\<tau>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app (template_hole 1, template_var 1))
           ))),
    ("Lam_ml.subst_lemma",
     "[| ?x ~= ?y; ?x \<sharp> ?u |]
      ==> ?s[?x::=?v][?y::=?u] = ?s[?y::=?u][?x::=?v[?y::=?u]]",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2)),
               template_hole 0)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 4),
                     template_var 1)),
                 template_hole 0)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_hole 2,
                           template_app
                            (template_app (template_hole 1, template_var 3),
                             template_var 2)),
                         template_hole 0)),
                     template_var 1))),
               template_hole 0)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 2)),
                 template_hole 0)),
             template_var 0))))),
    ("Lam_ml.double_SN",
     "[| SN ?a; SN ?b;
         !!x z.
            [| !!y. x \<mapsto> y ==> ?P y z;
               !!u. z \<mapsto> u ==> ?P x u |]
            ==> ?P x z |]
      ==> ?P ?a ?b",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 2), template_var 1)
           ))),
    ("Lam_ml.alpha_fresh",
     "[| ?c ~= ?a; ?c ~= ?b; ?c \<sharp> ?x; ?c \<sharp> ?y |]
      ==> ([?a].?x = [?b].?y) =
          ([(?a, ?c)] \<bullet> ?x = [(?b, ?c)] \<bullet> ?y)",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_var 3)),
        template_negation
         (template_equation (template_var 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_var 0)
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 5, template_var 3),
             template_var 1),
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 0)),
         template_equation
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 4)),
                 template_hole 0)),
             template_var 1),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 4)),
                 template_hole 0)),
             template_var 0))))),
    ("Lam_ml.dismantle_cases'",
     "[| ?t \<star> ?k \<mapsto> ?r; NEUT ?t;
         !!t'. [| ?t \<mapsto> t'; ?r = t' \<star> ?k |] ==> ?P;
         !!k'. [|  ?k \<mapsto> k' ; ?r = ?t \<star> k' |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, template_var 3)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Lam_ml.alpha_fresh'",
     "[| [?a].?x = [?b].?y; ?c ~= ?a; ?c ~= ?b; ?c \<sharp> ?x;
         ?c \<sharp> ?y |]
      ==> ?x = [(?a, ?c)] \<bullet> [(?b, ?c)] \<bullet> ?y",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 8, template_var 2),
            template_var 1)),
        template_negation
         (template_equation (template_var 0, template_var 4)),
        template_negation
         (template_equation (template_var 0, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_var 3,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 0)),
               template_hole 0)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 0)),
                 template_hole 0)),
             template_var 1))))),
    ("Lam_ml.double_SN_aux",
     "[| SN ?a; SN ?b;
         !!x z.
            [| !!y. x \<mapsto> y ==> SN y; !!y. x \<mapsto> y ==> ?P y z;
               !!u. z \<mapsto> u ==> SN u; !!u. z \<mapsto> u ==> ?P x u |]
            ==> ?P x z |]
      ==> ?P ?a ?b",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 2), template_var 1)
           ))),
    ("Lam_ml.triple_induct",
     "[| SN ?p; SN ?q;
         !!p q k.
            [| !!p'. p \<mapsto> p' ==> ?P p' q k;
               !!q' k. q \<mapsto> q' ==> ?P p q' k;
               !!k'. |k'| < |k| ==> ?P p q k' |]
            ==> ?P p q k |]
      ==> ?P ?p ?q ?k",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 1, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Lam_ml.dismantle_cases",
     "[| ?t \<star> ?k \<mapsto> ?r;
         !!t'. [| ?t \<mapsto> t'; ?r = t' \<star> ?k |] ==> ?P;
         !!k'. [|  ?k \<mapsto> k' ; ?r = ?t \<star> k' |] ==> ?P;
         !!s y n l.
            [| ?t = [s]; ?k = [y]n\<ggreater>l; ?r = n[y::=s] \<star> l |]
            ==> ?P;
         !!u x v y n l.
            [| x \<sharp> y; x \<sharp> n; ?t = u to x in v;
               ?k = [y]n\<ggreater>l;
               ?r = (u to x in v to y in n) \<star> l |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app (template_hole 15, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty))],
       template_predicate (template_var 0))),
    ("Lam_ml.dismantle_strong_cases",
     "[| ?t \<star> ?k \<mapsto> ?r; ?y \<sharp> (?t, ?k, ?r);
         ?x \<sharp> (?z, ?t, ?k, ?r); ?z \<sharp> (?t, ?k, ?r);
         !!t'. [| ?t \<mapsto> t'; ?r = t' \<star> ?k |] ==> ?P;
         !!k'. [|  ?k \<mapsto> k' ; ?r = ?t \<star> k' |] ==> ?P;
         !!s n l.
            [| ?t = [s]; ?k = [?y]n\<ggreater>l; ?r = n[?y::=s] \<star> l |]
            ==> ?P;
         !!u v n l.
            [| ?x \<sharp> (?z, n); ?t = u to ?x in v;
               ?k = [?z]n\<ggreater>l;
               ?r = (u to ?x in v to ?z in n) \<star> l |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 19,
                template_app
                 (template_app (template_hole 18, template_var 6),
                  template_var 5)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 3),
              template_app
               (template_app (template_hole 16, template_var 6),
                template_app
                 (template_app (template_hole 15, template_var 5),
                  template_var 4)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 2),
              template_app
               (template_app (template_hole 13, template_var 1),
                template_app
                 (template_app (template_hole 16, template_var 6),
                  template_app
                   (template_app (template_hole 15, template_var 5),
                    template_var 4))))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 1),
              template_app
               (template_app (template_hole 16, template_var 6),
                template_app
                 (template_app (template_hole 15, template_var 5),
                  template_var 4)))
            ),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Lam_mlMoreTemplates"
### 0.734s elapsed time, 1.707s cpu time, 1.088s GC time
val it = (): unit
