Loading theory "HOL-Library.FuncSet" (required by "Draft.Set_PartitionMoreTemplates" via "Draft.Set_Partition" via "HOL-Library.Disjoint_Sets")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Set_PartitionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Set_PartitionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Set_PartitionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.132s elapsed time, 0.543s cpu time, 0.039s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Set_PartitionMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.210s elapsed time, 0.855s cpu time, 0.039s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Set_PartitionMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.327s elapsed time, 1.304s cpu time, 0.119s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Set_PartitionMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.FuncSet"
### 0.404s elapsed time, 1.609s cpu time, 0.119s GC time
Loading theory "HOL-Library.Disjoint_Sets" (required by "Draft.Set_PartitionMoreTemplates" via "Draft.Set_Partition")
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
### theory "HOL-Library.Disjoint_Sets"
### 0.261s elapsed time, 1.021s cpu time, 0.143s GC time
Loading theory "Draft.Set_Partition" (required by "Draft.Set_PartitionMoreTemplates")
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Set_Partition"
### 0.157s elapsed time, 0.618s cpu time, 0.069s GC time
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.976s elapsed time, 3.529s cpu time, 0.884s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.033s elapsed time, 3.434s cpu time, 0.804s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.857s elapsed time, 4.933s cpu time, 0.991s GC time
Loading theory "Draft.Templates" (required by "Draft.Set_PartitionMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.050s elapsed time, 0.064s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Set_PartitionMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.485s elapsed time, 0.532s cpu time, 0.058s GC time
Loading theory "Draft.Set_PartitionMoreTemplates"
val templateLemmas =
   [("Set_Partition.comp_image", "(`) ?f o (`) ?g = (`) (?f o ?g)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Set_Partition.partition_on_split1",
     "partition_on ?A (?P Un ?Q) ==> partition_on (\<Union> ?P) ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 1)),
             template_var 1)
           ))),
    ("Set_Partition.partition_on_split2",
     "partition_on ?A (?P Un ?Q) ==> partition_on (\<Union> ?Q) ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)),
             template_var 0)
           ))),
    ("Set_Partition.partition_on_eq_implies_eq_carrier",
     "[| partition_on ?A ?Q; partition_on ?B ?Q |] ==> ?A = ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_equation (template_var 2, template_var 0))),
    ("Set_Partition.partition_on_le_set_elements",
     "[| finite ?A; partition_on ?A ?P |] ==> card ?P <= card ?A",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Set_Partition.partition_on_notemptyI",
     "[| partition_on ?A ?P; ?A ~= {} |] ==> ?P ~= {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("Set_Partition.partition_on_Diff",
     "[| partition_on ?A ?P; ?Q <= ?P |]
      ==> partition_on (?A - \<Union> ?Q) (?P - ?Q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Set_Partition.partition_on_map",
     "[| inj_on ?f ?A; partition_on ?A ?P |]
      ==> partition_on (?f ` ?A) ((`) ?f ` ?P)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 1, template_var 2)),
               template_var 0))
           ))),
    ("Set_Partition.partition_on_partition_on_unique",
     "[| partition_on ?A ?P; ?x : ?A |] ==> EX! X. ?x : X & X : ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 2)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Set_Partition.partition_subset_imp_notin",
     "[| partition_on ?A ?P; ?X : ?P; ?X' < ?X |] ==> ?X' ~: ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 2)
            ),
        template_inequation (less_than, template_var 0, template_var 1)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 2)
               )
           ))),
    ("Set_Partition.partition_on_in_the_unique_part",
     "[| partition_on ?A ?P; ?x : ?A |] ==> ?x : (THE X. ?x : X & X : ?P)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app (template_hole 2, t_empty))
           ))),
    ("Set_Partition.partition_on_the_part_mem",
     "[| partition_on ?A ?P; ?x : ?A |] ==> (THE X. ?x : X & X : ?P) : ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2, template_app (template_hole 1, t_empty)),
             template_var 1)
           ))),
    ("Set_Partition.set_of_partition_on_map",
     "inj_on ?f ?A ==>
      (`) ((`) ?f) ` {P. partition_on ?A P} =
      {P. partition_on (?f ` ?A) P}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 1))),
           template_app (template_hole 3, t_empty)),
         template_app (template_hole 1, t_empty)))),
    ("Set_Partition.partition_on_disjoint",
     "[| partition_on ?A ?P; partition_on ?B ?Q; ?A Int ?B = {} |]
      ==> ?P Int ?Q = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            ),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 1),
          template_hole 3)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_hole 0))),
    ("Set_Partition.partition_on_insert'",
     "[| partition_on (?A - ?X) ?P; ?X <= ?A; ?X ~= {} |]
      ==> partition_on ?A (insert ?X ?P)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_inequation (less_equals, template_var 1, template_var 2),
        template_negation
         (template_equation (template_var 1, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Set_Partition.partition_on_remove_singleton",
     "[| partition_on ?A ?P; ?X : ?P; ?A - ?X = ?A' |]
      ==> partition_on ?A' (?P - {?X})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 3), template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 0),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0)))
           ))),
    ("Set_Partition.partition_on_union",
     "[| ?A Int ?B = {}; partition_on ?A ?P; partition_on ?B ?Q |]
      ==> partition_on (?A Un ?B) (?P Un ?Q)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 2),
          template_hole 3),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Set_Partition.partition_on_no_partition_outside_carrier",
     "[| partition_on ?A ?P; ?x ~: ?A |]
      ==> {y. EX X:?P. ?x : X & y : X} = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 0),
                  template_var 2)
                )
            )],
       template_equation
        (template_app (template_hole 3, t_empty), template_hole 0))),
    ("Set_Partition.partition_on_insert_singleton",
     "[| partition_on ?A ?P; ?a ~: ?A; insert ?a ?A = ?A' |]
      ==> partition_on ?A' (insert {?a} ?P)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 3)
                )
            ),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 1), template_var 3),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 0),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 0)),
               template_var 2))
           ))),
    ("Set_Partition.partition_on_UN",
     "[| partition_on ?A ?B; !!b. b : ?B ==> partition_on b (?P b) |]
      ==> partition_on ?A (\<Union> (?P ` ?B))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, t_empty), template_var 1)))
           ))),
    ("Set_Partition.partition_on_the_part_eq",
     "[| partition_on ?A ?P; ?x : ?X; ?X : ?P |]
      ==> (THE X. ?x : X & X : ?P) = ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app (template_hole 1, t_empty), template_var 0))),
    ("Set_Partition.partition_on_intersect_on_elements",
     "[| partition_on (?A Un ?C) ?P; ALL X:?P. EX x. x : X Int ?C |]
      ==> partition_on ?C ((%X. X Int ?C) ` ?P)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 1),
             template_app
              (template_app (template_hole 0, t_empty), template_var 0))
           ))),
    ("Set_Partition.set_eqI'",
     "[| !!x. x : ?A ==> x : ?B; !!x. x : ?B ==> x : ?A |] ==> ?A = ?B",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Set_Partition.partition_on_insert",
     "[| partition_on ?A ?P; disjnt ?A ?X; ?X ~= {}; ?A Un ?X = ?A' |]
      ==> partition_on ?A' (insert ?X ?P)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 1, template_hole 2)),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 3), template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2))
           ))),
    ("Set_Partition.partition_onD4",
     "[| partition_on ?A ?P; ?p : ?P; ?q : ?P; ?x : ?p; ?x : ?q |]
      ==> ?p = ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_equation (template_var 2, template_var 1))),
    ("Set_Partition.partition_on_all_in_part_eq_part",
     "[| partition_on ?A ?P; ?X' : ?P |]
      ==> {x: ?A. (THE X. x : X & X : ?P) = ?X'} = ?X'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app (template_hole 3, t_empty), template_var 0))),
    ("Set_Partition.partition_on_part_characteristic",
     "[| partition_on ?A ?P; ?X : ?P; ?x : ?X |]
      ==> ?X = {y. EX X:?P. ?x : X & y : X}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_var 1, template_app (template_hole 2, t_empty)))),
    ("Set_Partition.partition_on_insert_elements",
     "[| ?A Int ?B = {}; partition_on ?B ?P;
         ?f : ?A \<rightarrow>\<^sub>E ?P |]
      ==> partition_on (?A Un ?B) ((%X. X Un {x: ?A. ?f x = X}) ` ?P)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 9, template_var 3), template_var 2),
          template_hole 8),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_app (template_hole 5, template_var 3), t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 3, t_empty), template_var 1))
           ))),
    ("Set_Partition.partition_onI",
     "[| !!p. p : ?P ==> p ~= {}; \<Union> ?P = ?A;
         !!p p'. [| p : ?P; p' : ?P; p ~= p' |] ==> p Int p' = {} |]
      ==> partition_on ?A ?P",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_equation
         (template_app (template_hole 2, template_var 1), template_var 0),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Set_Partition.partition_onE",
     "[| partition_on ?A ?P;
         [| !!p. p : ?P ==> p ~= {}; \<Union> ?P = ?A;
            !!p p'. [| p : ?P; p' : ?P; p ~= p' |] ==> p Int p' = {} |]
         ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate (template_app (template_hole 6, t_empty))],
          template_implication
           ([template_equation
              (template_app (template_hole 1, template_var 1),
               template_var 2)],
            template_implication
             ([template_predicate
                (template_app (template_hole 6, t_empty))],
              template_predicate (template_var 0))))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Set_PartitionMoreTemplates"
### 0.303s elapsed time, 0.379s cpu time, 0.000s GC time
val it = (): unit
