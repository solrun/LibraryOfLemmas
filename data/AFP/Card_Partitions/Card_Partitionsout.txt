Loading theory "HOL-Eisbach.Eisbach" (required by "Draft.Card_PartitionsMoreTemplates" via "Draft.Card_Partitions" via "Draft.Injectivity_Solver")
Loading theory "HOL-Combinatorics.Stirling" (required by "Draft.Card_PartitionsMoreTemplates" via "Draft.Card_Partitions")
Loading theory "HOL-Library.Adhoc_Overloading" (required by "Draft.Card_PartitionsMoreTemplates" via "Draft.Card_Partitions" via "Draft.Injectivity_Solver" via "HOL-Library.Monad_Syntax")
Loading theory "HOL-Library.FuncSet" (required by "Draft.Card_PartitionsMoreTemplates" via "Draft.Card_Partitions" via "Draft.Set_Partition" via "HOL-Library.Disjoint_Sets")
signature PARSE_TOOLS =
  sig
    val is_real_val: ('a, 'b) parse_val -> bool
    val name_term: (term, string) parse_val parser
    val parse_term_val: 'a parser -> (term, 'a) parse_val parser
    val parse_thm_val: 'a parser -> (thm, 'a) parse_val parser
    datatype ('a, 'b) parse_val
    = Parse_Val of 'b * ('a -> unit) | Real_Val of 'a
    val parse_val_cases:
       ('a -> 'b) -> ('b, 'a) parse_val -> 'b * ('b -> unit)
    val the_parse_fun: ('a, 'b) parse_val -> 'a -> unit
    val the_parse_val: ('a, 'b) parse_val -> 'b
    val the_real_val: ('a, 'b) parse_val -> 'a
  end
structure Parse_Tools: PARSE_TOOLS
signature ADHOC_OVERLOADING =
  sig
    val generic_add_overloaded: string -> Context.generic -> Context.generic
    val generic_add_variant:
       string -> term -> Context.generic -> Context.generic
    val generic_remove_overloaded:
       string -> Context.generic -> Context.generic
    val generic_remove_variant:
       string -> term -> Context.generic -> Context.generic
    val is_overloaded: Proof.context -> string -> bool
    val show_variants: bool Config.T
  end
structure Adhoc_Overloading: ADHOC_OVERLOADING
### theory "HOL-Library.Adhoc_Overloading"
### 0.097s elapsed time, 0.369s cpu time, 0.029s GC time
Loading theory "HOL-Library.Monad_Syntax" (required by "Draft.Card_PartitionsMoreTemplates" via "Draft.Card_Partitions" via "Draft.Injectivity_Solver")
signature METHOD_CLOSURE =
  sig
    val apply_method:
       Proof.context ->
         string ->
           term list ->
             thm list list ->
               (Proof.context -> Method.method) list ->
                 Proof.context -> thm list -> context_tactic
    val method:
       binding ->
         (binding * typ option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
    val method_cmd:
       binding ->
         (binding * string option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
  end
structure Method_Closure: METHOD_CLOSURE
Found termination order:
  "(%p. size (snd p)) <*mlex*> (%p. size (fst p)) <*mlex*> {}"
### theory "HOL-Library.Monad_Syntax"
### 0.037s elapsed time, 0.145s cpu time, 0.000s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Card_PartitionsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
structure Eisbach_Rule_Insts: sig end
### theory "HOL-Library.Function_Algebras"
### 0.101s elapsed time, 0.402s cpu time, 0.000s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Card_PartitionsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Found termination order:
  "(%p. size (snd p)) <*mlex*> (%p. size (fst p)) <*mlex*> {}"
consts
  stirling_row_aux :: "'a => 'a => 'a list => 'a list"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Combinatorics.Stirling"
### 0.341s elapsed time, 1.331s cpu time, 0.092s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Card_PartitionsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.FuncSet"
### 0.417s elapsed time, 1.626s cpu time, 0.155s GC time
Loading theory "HOL-Library.Disjoint_Sets" (required by "Draft.Card_PartitionsMoreTemplates" via "Draft.Card_Partitions" via "Draft.Set_Partition")
Found termination order: "size_list size <*mlex*> {}"
### ML warning (line 170 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 187 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 309 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
signature MATCH_METHOD =
  sig
    val focus_params: Proof.context -> term list
    val focus_schematics: Proof.context -> Envir.tenv
  end
structure Match_Method: MATCH_METHOD
val method_evaluate = fn: Method.text -> Proof.context -> thm list -> tactic
### theory "HOL-Eisbach.Eisbach"
### 0.556s elapsed time, 2.163s cpu time, 0.219s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Card_PartitionsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.314s elapsed time, 1.222s cpu time, 0.190s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Card_PartitionsMoreTemplates" via "Draft.ExtrEqs")
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
### theory "HOL-Library.Set_Algebras"
### 0.226s elapsed time, 0.891s cpu time, 0.126s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Card_PartitionsMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Disjoint_Sets"
### 0.265s elapsed time, 1.082s cpu time, 0.063s GC time
Loading theory "Draft.Injectivity_Solver" (required by "Draft.Card_PartitionsMoreTemplates" via "Draft.Card_Partitions")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### theory "Draft.Injectivity_Solver"
### 0.587s elapsed time, 2.149s cpu time, 0.606s GC time
Loading theory "Draft.Set_Partition" (required by "Draft.Card_PartitionsMoreTemplates" via "Draft.Card_Partitions")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Set_Partition"
### 0.164s elapsed time, 0.643s cpu time, 0.071s GC time
Loading theory "Draft.Card_Partitions" (required by "Draft.Card_PartitionsMoreTemplates")
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### theory "HOL-Library.BigO"
### 1.029s elapsed time, 3.908s cpu time, 0.794s GC time
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.086s elapsed time, 4.123s cpu time, 0.794s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Card_Partitions"
### 0.357s elapsed time, 1.102s cpu time, 0.207s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.906s elapsed time, 5.227s cpu time, 0.946s GC time
Loading theory "Draft.Templates" (required by "Draft.Card_PartitionsMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.062s elapsed time, 0.105s cpu time, 0.040s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Card_PartitionsMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.465s elapsed time, 0.470s cpu time, 0.000s GC time
Loading theory "Draft.Card_PartitionsMoreTemplates"
val templateLemmas =
   [("Card_Partitions.card_partition_on",
     "finite ?A ==>
      card {P. partition_on ?A P & card P = ?k} = Stirling (card ?A) ?k",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 1))],
       template_equation
        (template_app
          (template_hole 6, template_app (template_hole 5, t_empty)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Card_Partitions.card_partition_on_size1",
     "finite ?A ==>
      card {P. partition_on ?A P & (ALL X:P. card X = 1)} = 1",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_equation
        (template_app
          (template_hole 6, template_app (template_hole 5, t_empty)),
         template_hole 0))),
    ("Card_Partitions.card_partition_on_at_most_size",
     "finite ?A ==>
      card {P. partition_on ?A P & card P <= ?k} =
      sum (Stirling (card ?A)) {..?k}",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1))],
       template_equation
        (template_app
          (template_hole 9, template_app (template_hole 8, t_empty)),
         template_app
          (template_app (template_hole 3, t_empty),
           template_app (template_hole 0, template_var 0))))),
    ("Card_Partitions.partition_on_size1",
     "finite ?A ==>
      {P. partition_on ?A P & (ALL X:P. card X = 1)} = {(%a. {a}) ` ?A}",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 0))],
       template_equation
        (template_app (template_hole 11, t_empty),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, t_empty), template_var 0)),
           template_hole 0)))),
    ("Card_Partitions.card_partition_on_size1_eq_0",
     "[| finite ?A; ?k < card ?A |]
      ==> card
           {P. partition_on ?A P & card P <= ?k & (ALL X:P. card X = 1)} =
          0",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 10, template_var 1))],
       template_equation
        (template_app
          (template_hole 8, template_app (template_hole 7, t_empty)),
         template_hole 0))),
    ("Card_Partitions.card_partition_on_size1_eq_1",
     "[| finite ?A; card ?A <= ?k |]
      ==> card
           {P. partition_on ?A P & card P <= ?k & (ALL X:P. card X = 1)} =
          1",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 8, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_hole 6, template_app (template_hole 5, t_empty)),
         template_hole 0))),
    ("Card_Partitions.injectivity_subexpr2",
     "[| ?a ~: ?A; insert {?a} ?P = insert {?a} ?P';
         (partition_on ?A ?P & card ?P = ?k') &
         partition_on ?A ?P' & card ?P' = ?k' |]
      ==> ?P = ?P'",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 4),
                  template_var 3)
                )
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 4),
                template_hole 4)),
            template_var 2),
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 4),
                template_hole 4)),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 3),
                      template_var 2)),
                  template_app
                   (template_app
                     (template_hole 1,
                      template_app (template_hole 0, template_var 2)),
                    template_var 0))),
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 1)),
                template_app
                 (template_app
                   (template_hole 1,
                    template_app (template_hole 0, template_var 1)),
                  template_var 0)))
            )],
       template_equation (template_var 2, template_var 1))),
    ("Card_Partitions.injectivity_subexpr1",
     "[| ?a ~: ?A; ?X : ?P & ?X' : ?P';
         insert (insert ?a ?X) (?P - {?X}) =
         insert (insert ?a ?X') (?P' - {?X'});
         (partition_on ?A ?P & card ?P = Suc ?k') &
         partition_on ?A ?P' & card ?P' = Suc ?k' |]
      ==> ?X = ?X'",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 12, template_var 6),
                  template_var 5)
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 10, template_var 2),
                template_var 1))
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_var 6),
                template_var 4)),
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app (template_hole 8, template_var 4),
                template_hole 5))),
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_var 6),
                template_var 2)),
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 8, template_var 2),
                template_hole 5)))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app (template_hole 4, template_var 5),
                      template_var 3)),
                  template_app
                   (template_app
                     (template_hole 3,
                      template_app (template_hole 2, template_var 3)),
                    template_app (template_hole 1, template_var 0)))),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app (template_hole 4, template_var 5),
                    template_var 1)),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 1)),
                  template_app (template_hole 1, template_var 0))))
            )],
       template_equation (template_var 4, template_var 2))),
    ("Card_Partitions.injectivity_subexpr1",
     "[| ?a ~: ?A; ?X : ?P & ?X' : ?P';
         insert (insert ?a ?X) (?P - {?X}) =
         insert (insert ?a ?X') (?P' - {?X'});
         (partition_on ?A ?P & card ?P = Suc ?k') &
         partition_on ?A ?P' & card ?P' = Suc ?k' |]
      ==> ?P = ?P'",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 11, template_var 6),
                  template_var 5)
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 9, template_var 2),
                template_var 1))
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 6),
                template_var 4)),
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app (template_hole 7, template_var 4),
                template_hole 4))),
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 6),
                template_var 2)),
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 7, template_var 2),
                template_hole 4)))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 3, template_var 5),
                      template_var 3)),
                  template_app
                   (template_app
                     (template_hole 2,
                      template_app (template_hole 1, template_var 3)),
                    template_app (template_hole 0, template_var 0)))),
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 3, template_var 5),
                    template_var 1)),
                template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 1)),
                  template_app (template_hole 0, template_var 0))))
            )],
       template_equation (template_var 3, template_var 1))),
    ("Card_Partitions.set_partition_on_insert_with_fixed_card_eq",
     "[| finite ?A; ?a ~: ?A |]
      ==> {P. partition_on (insert ?a ?A) P & card P = Suc ?k} =
          ({P. partition_on ?A P & card P = Suc ?k} >>=
           (%P. P >>= (%p. {insert (insert ?a p) (P - {p})}))) Un
          ({P. partition_on ?A P & card P = ?k} >>= (%P. {insert {?a} P}))",
     template_implication
      ([template_predicate
         (template_app (template_hole 19, template_var 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 17, template_var 1),
                  template_var 2)
                )
            )],
       template_equation
        (template_app (template_hole 15, t_empty),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7, template_app (template_hole 15, t_empty)),
               t_empty)),
           template_app
            (template_app
              (template_hole 7, template_app (template_hole 15, t_empty)),
             t_empty)))))]:
   (string * thm * template) list
### theory "Draft.Card_PartitionsMoreTemplates"
### 0.336s elapsed time, 0.485s cpu time, 0.053s GC time
val it = (): unit
