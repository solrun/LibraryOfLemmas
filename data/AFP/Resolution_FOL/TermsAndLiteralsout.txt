Loading theory "HOL-Library.Function_Algebras" (required by "Draft.TermsAndLiteralsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.TermsAndLiteralsTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.TermsAndLiteralsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.TermsAndLiteralsTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.142s elapsed time, 0.565s cpu time, 0.054s GC time
Loading theory "Draft.TermsAndLiterals" (required by "Draft.TermsAndLiteralsTemplates")
### theory "HOL-Library.Set_Algebras"
### 0.248s elapsed time, 0.998s cpu time, 0.054s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.TermsAndLiteralsTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  left :: "'a tree => 'a tree"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.853s elapsed time, 3.363s cpu time, 0.383s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.964s elapsed time, 3.497s cpu time, 0.934s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Missing patterns in function definition:
### !!v. hterm_of_fterm (Var v) = undefined
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
instantiation
  hterm :: countable
### theory "Draft.TermsAndLiterals"
### 1.755s elapsed time, 5.399s cpu time, 1.102s GC time
### theory "HOL-Library.Tree"
### 1.978s elapsed time, 6.047s cpu time, 1.156s GC time
Loading theory "Draft.Templates" (required by "Draft.TermsAndLiteralsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.076s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.TermsAndLiteralsTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.472s elapsed time, 0.533s cpu time, 0.068s GC time
Loading theory "Draft.TermsAndLiteralsTemplates"
val templateLemmas =
   [("TermsAndLiterals.ground_fterm_of_hterm",
     "ground\<^sub>t (fterm_of_hterm ?t)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("TermsAndLiterals.undiag_diag_fatom",
     "nat_of_fatom (fatom_of_nat ?n) = ?n",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("TermsAndLiterals.nat_of_hatom_hatom_of_nat",
     "nat_of_hatom (hatom_of_nat ?n) = ?n",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("TermsAndLiterals.nat_of_string_string_of_nat",
     "nat_of_string (string_of_nat ?n) = ?n",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("TermsAndLiterals.string_of_nat_nat_of_string",
     "string_of_nat (nat_of_string ?n) = ?n",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("TermsAndLiterals.hterms_of_fterms_fterms_of_hterms",
     "hterms_of_fterms (fterms_of_hterms ?ts) = ?ts",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("TermsAndLiterals.hatom_of_fatom_fatom_of_hatom",
     "hatom_of_fatom (fatom_of_hatom ?l) = ?l",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("TermsAndLiterals.hatom_of_nat_nat_of_hatom",
     "hatom_of_nat (nat_of_hatom ?l) = ?l",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("TermsAndLiterals.hterm_of_fterm_fterm_of_hterm",
     "hterm_of_fterm (fterm_of_hterm ?t) = ?t",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("TermsAndLiterals.hlit_of_flit_flit_of_hlit",
     "hlit_of_flit (flit_of_hlit ?l) = ?l",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("TermsAndLiterals.sign_flit_of_hlit",
     "sign (flit_of_hlit ?l) = sign ?l",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("TermsAndLiterals.ground_fterms_of_hterms",
     "ground\<^sub>t\<^sub>s (fterms_of_hterms ?ts)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           t_empty)
         )),
    ("TermsAndLiterals.ground_fatom_of_hatom",
     "ground\<^sub>t\<^sub>s (snd (fatom_of_hatom ?a))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)))),
           t_empty)
         )),
    ("TermsAndLiterals.ground_fatom_of_nat",
     "ground\<^sub>t\<^sub>s (snd (fatom_of_nat ?x))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)))),
           t_empty)
         )),
    ("TermsAndLiterals.ground_flit_of_hlit",
     "ground\<^sub>l (flit_of_hlit ?l)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)))),
           t_empty)
         )),
    ("TermsAndLiterals.fterm_of_hterm_hterm_of_fterm",
     "ground\<^sub>t ?t ==> fterm_of_hterm (hterm_of_fterm ?t) = ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("TermsAndLiterals.fterms_of_hterms_hterms_of_fterms",
     "ground\<^sub>t\<^sub>s ?ts ==>
      fterms_of_hterms (hterms_of_fterms ?ts) = ?ts",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("TermsAndLiterals.ground\<^sub>l_ground_fatom",
     "ground\<^sub>l ?l ==> get_atom ?l : ground_fatoms",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 0))),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("TermsAndLiterals.fatom_of_hatom_hatom_of_fatom",
     "ground\<^sub>t\<^sub>s (snd ?l) ==>
      fatom_of_hatom (hatom_of_fatom ?l) = ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 0))),
              t_empty)
            )],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("TermsAndLiterals.flit_of_hlit_hlit_of_flit",
     "ground\<^sub>l ?l ==> flit_of_hlit (hlit_of_flit ?l) = ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 0))),
              t_empty)
            )],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("TermsAndLiterals.diag_undiag_fatom",
     "ground\<^sub>t\<^sub>s ?ts ==>
      fatom_of_nat (nat_of_fatom (?p, ?ts)) = (?p, ?ts)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("TermsAndLiterals.inv_into_f_f",
     "[| bij_betw ?f ?A ?B; ?a : ?A |] ==> inv_into ?A ?f (?f ?a) = ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 3),
           template_app (template_var 3, template_var 0)),
         template_var 0))),
    ("TermsAndLiterals.f_inv_into_f",
     "[| bij_betw ?f ?A ?B; ?b : ?B |] ==> ?f (inv_into ?A ?f ?b) = ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_var 3,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 3),
             template_var 0)),
         template_var 0))),
    ("TermsAndLiterals.infinity",
     "[| ALL n. ?undiago (?diago n) = n; ALL n. ?diago n : ?S |]
      ==> infinite ?S",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 0))
           )))]:
   (string * thm * template) list
### theory "Draft.TermsAndLiteralsTemplates"
### 0.317s elapsed time, 0.458s cpu time, 0.065s GC time
val it = (): unit
