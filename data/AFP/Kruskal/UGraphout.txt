Loading theory "HOL-Library.Function_Algebras" (required by "Draft.UGraphTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.UGraphTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.UGraphTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.UGraphTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.144s elapsed time, 0.584s cpu time, 0.066s GC time
Loading theory "Draft.UGraph" (required by "Draft.UGraphTemplates")
### theory "HOL-Library.Set_Algebras"
### 0.237s elapsed time, 0.957s cpu time, 0.066s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.UGraphTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "(%p. length (fst (snd (snd p)))) <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
locale uGraph
  fixes E :: "'a uprod set"
    and w :: "'a uprod => 'c"
  assumes "uGraph E"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "Draft.UGraph"
### 0.656s elapsed time, 2.551s cpu time, 0.280s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.955s elapsed time, 3.607s cpu time, 0.439s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.985s elapsed time, 3.419s cpu time, 0.976s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.060s elapsed time, 5.316s cpu time, 1.151s GC time
Loading theory "Draft.Templates" (required by "Draft.UGraphTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.074s elapsed time, 0.131s cpu time, 0.059s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.UGraphTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.472s elapsed time, 0.478s cpu time, 0.000s GC time
Loading theory "Draft.UGraphTemplates"
val templateLemmas =
   [("UGraph.uconnected_sym", "sym (uconnected ?E)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("UGraph.uconnected_trans", "trans (uconnected ?E)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("UGraph.uconnected_refl", "refl (uconnected ?E)",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("UGraph.uconnected_transcl", "(uconnected ?E)^* = uconnected ?E",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("UGraph.uconnected_refcl", "(uconnected ?E)^* = (uconnected ?E)^=",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 2, template_var 0)),
         template_hole 0))),
    ("UGraph.uconnected_mono",
     "?A <= ?A' ==> uconnected ?A <= uconnected ?A'",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("UGraph.epath_subset_E", "epath ?E ?u ?p ?v ==> set ?p <= ?E",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_var 3))),
    ("UGraph.forest_mono", "[| ?Y <= ?X; forest ?X |] ==> forest ?Y",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("UGraph.epath_rev", "epath ?E ?y (rev ?p) ?x = epath ?E ?x ?p ?y",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 0),
           template_var 1),
         template_var 2))),
    ("UGraph.epath_to_depath'",
     "epath ?E ?u ?p ?v ==> EX dp. depath ?E ?u dp ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("UGraph.uconnected_symI",
     "(?u, ?v) : uconnected ?E ==> (?v, ?u) : uconnected ?E",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_app (template_hole 0, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("UGraph.epath_singleton", "epath ?F ?a [?e] ?b ==> ?e = Upair ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2),
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_hole 2)),
              template_var 0)
            )],
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("UGraph.epath_mono",
     "[| ?E <= ?E'; epath ?E ?u ?p ?v |] ==> epath ?E' ?u ?p ?v",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 4),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("UGraph.epath_restrict",
     "[| set ?p <= ?I; epath ?E ?u ?p ?v |] ==> epath (?E Int ?I) ?u ?p ?v",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 2, template_var 4),
          template_var 3),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1),
                template_var 4),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 3)),
                 template_var 1),
               template_var 4),
             template_var 0)
           ))),
    ("UGraph.path_append_conv",
     "epath ?E ?u (?p @ ?q) ?v =
      (EX w. epath ?E ?u ?p w & epath ?E w ?q ?v)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 1, t_empty))),
    ("UGraph.epath_restrict'",
     "[| epath (insert ?e ?E) ?u ?p ?v; ?e ~: set ?p |]
      ==> epath ?E ?u ?p ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 4),
                      template_var 3)),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 4),
                  template_app (template_hole 0, template_var 1))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("UGraph.epath_to_depath",
     "[| set ?p <= ?I; epath ?E ?u ?p ?v |]
      ==> EX dp. depath ?E ?u dp ?v & set dp <= ?I",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 4),
          template_var 3),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 4),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("UGraph.epath_not_direct",
     "[| epath ?E ?u ?p ?v; ?u ~= ?v; Upair ?u ?v ~: ?E |]
      ==> 2 <= length ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 2, template_var 0)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 2),
                      template_var 0)),
                  template_var 3)
                )
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 1)),
         template_app (template_hole 0, template_var 1)))),
    ("UGraph.epath_diff_edge",
     "[| ?A <= ?A'; ~ epath ?A ?u ?p ?v; epath ?A' ?u ?p ?v |]
      ==> EX e. e : set ?p - ?A",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 4, template_var 4),
                      template_var 2),
                    template_var 1),
                  template_var 0)
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("UGraph.forrest2_E",
     "[| (?u, ?v) : uconnected ?E; Upair ?u ?v ~: ?E; ?u ~= ?v |]
      ==> ~ forest (insert (Upair ?u ?v) ?E)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 1)),
              template_app (template_hole 6, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 2),
                      template_var 1)),
                  template_var 0)
                )
            ),
        template_negation
         (template_equation (template_var 2, template_var 1))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_app (template_hole 3, template_var 2),
                       template_var 1)),
                   template_var 0))
               )
           ))),
    ("UGraph.insert_stays_forest_means_not_connected",
     "[| forest (insert (Upair ?u ?v) ?E); Upair ?u ?v ~: ?E; ?u ~= ?v |]
      ==> (?u, ?v) ~: uconnected ?E",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 2),
                    template_var 1)),
                template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 6, template_var 2),
                      template_var 1)),
                  template_var 0)
                )
            ),
        template_negation
         (template_equation (template_var 2, template_var 1))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 1)),
                 template_app (template_hole 0, template_var 0))
               )
           ))),
    ("UGraph.forest_alt1",
     "[| Upair ?a ?b : ?F; forest ?F; !!e. e : ?F ==> proper_uprod e |]
      ==> (?a, ?b) ~: uconnected (?F - {Upair ?a ?b})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 9, template_var 0)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 2),
                     template_var 1)),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_app
                      (template_app
                        (template_hole 1,
                         template_app
                          (template_app (template_hole 10, template_var 2),
                           template_var 1)),
                       template_hole 0))))
               )
           ))),
    ("UGraph.forest_alt",
     "(!!e. e : ?F ==> proper_uprod e) ==>
      forest ?F =
      (ALL a b.
          Upair a b : ?F --> (a, b) ~: uconnected (?F - {Upair a b}))",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty))],
       template_equation
        (template_app (template_hole 10, template_var 0),
         template_app (template_hole 9, t_empty)))),
    ("UGraph.augment_forest_overedges",
     "[| ?F <= ?E; forest ?F; Upair ?u ?v : ?E; (?u, ?v) ~: uconnected ?F;
         ?u ~= ?v |]
      ==> forest (insert (Upair ?u ?v) ?F)",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate (template_app (template_hole 8, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_var 0)),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 1),
                      template_var 0)),
                  template_app (template_hole 2, template_var 3))
                )
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_var 0)),
               template_var 3))
           ))),
    ("UGraph.forest_alt2",
     "[| !!e. e : ?F ==> proper_uprod e;
         !!a b.
            Upair a b : ?F ==> (a, b) ~: uconnected (?F - {Upair a b}) |]
      ==> forest ?F",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("UGraph.findaugmenting_edge",
     "[| epath ?E1.0 ?u ?p ?v; \<nexists>p. epath ?E2.0 ?u p ?v |]
      ==> EX a b.
             (a, b) ~: uconnected ?E2.0 &
             Upair a b ~: ?E2.0 & Upair a b : ?E1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_negation
         (template_predicate (template_app (template_hole 7, t_empty)))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("UGraph.epath_decompose'",
     "[| epath ?G ?v ?p ?v'; Upair ?a ?b : set ?p |]
      ==> EX u u' p' p''.
             Upair ?a ?b = Upair u u' &
             epath ?G ?v p' u &
             epath ?G u' p'' ?v' &
             length p' < length ?p & length p'' < length ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_var 0)),
              template_app (template_hole 6, template_var 3))
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("UGraph.epath_decompose",
     "[| epath ?G ?v ?p ?v'; Upair ?a ?b : set ?p |]
      ==> EX u u' p' p''.
             u : {?a, ?b} &
             u' : {?a, ?b} &
             epath ?G ?v p' u &
             epath ?G u' p'' ?v' &
             length p' < length ?p & length p'' < length ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 11, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 1),
                  template_var 0)),
              template_app (template_hole 8, template_var 3))
            )],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("UGraph.epath_split_distinct",
     "[| epath ?G ?v ?p ?v'; Upair ?a ?b : set ?p |]
      ==> EX p' p'' u u'.
             epath ?G ?v p' u &
             epath ?G u' p'' ?v' &
             length p' < length ?p &
             length p'' < length ?p &
             (u : {?a, ?b} & u' : {?a, ?b}) &
             Upair ?a ?b ~: set p' & Upair ?a ?b ~: set p''",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 12, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 1),
                  template_var 0)),
              template_app (template_hole 9, template_var 3))
            )],
       template_predicate (template_app (template_hole 8, t_empty))))]:
   (string * thm * template) list
### theory "Draft.UGraphTemplates"
### 0.413s elapsed time, 0.583s cpu time, 0.077s GC time
val it = (): unit
