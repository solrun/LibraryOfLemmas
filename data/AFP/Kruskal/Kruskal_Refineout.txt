Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Kruskal_RefineTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.Kruskal_RefineTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Kruskal_RefineTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Kruskal_RefineTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.145s elapsed time, 0.582s cpu time, 0.055s GC time
Loading theory "Draft.MinWeightBasis" (required by "Draft.Kruskal_RefineTemplates" via "Draft.Kruskal_Refine" via "Draft.Kruskal")
### theory "HOL-Library.Set_Algebras"
### 0.222s elapsed time, 0.892s cpu time, 0.055s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Kruskal_RefineTemplates" via "Draft.ExtrEqs")
locale weighted_matroid
  fixes carrier :: "'a set"
    and indep :: "'a set => bool"
    and weight :: "'a => 'b"
  assumes "weighted_matroid carrier indep"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
### theory "Draft.MinWeightBasis"
### 0.449s elapsed time, 1.744s cpu time, 0.156s GC time
Loading theory "Draft.Kruskal_Misc" (required by "Draft.Kruskal_RefineTemplates" via "Draft.Kruskal_Refine" via "Draft.Kruskal")
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.018s elapsed time, 3.968s cpu time, 0.405s GC time
Loading theory "Draft.SeprefUF" (required by "Draft.Kruskal_RefineTemplates" via "Draft.Kruskal_Refine")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.056s elapsed time, 3.989s cpu time, 0.952s GC time
"(`)"
  :: "('a => 'b) => 'a set => 'b set"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Kruskal_Misc"
### 0.814s elapsed time, 2.952s cpu time, 0.860s GC time
Loading theory "Draft.Kruskal" (required by "Draft.Kruskal_RefineTemplates" via "Draft.Kruskal_Refine")
Found termination order: "size <*mlex*> {}"
per_init ::\<^sub>i TYPE(?'a set => (?'a * ?'a) set)
per_init' ::\<^sub>i TYPE(nat => (nat * nat) set)
per_compare ::\<^sub>i TYPE((?'a * ?'b) set => ?'a => ?'b => bool)
per_union ::\<^sub>i TYPE((?'a * ?'a) set => ?'a => ?'a => (?'a * ?'a) set)
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Cannot skip proof of schematic goal statement
Found termination order: "size <*mlex*> {}"
abs_test_impl ==
uf_init 5 >>=
(%x'. uf_union x' 1 2 >>=
      (%x'b. uf_union x'b 2 3 >>= (%x'd. uf_cmp x'd 1 3)))
(uncurry0 abs_test_impl, uncurry0 abs_test)
: unit_assn\<^sup>k \<rightarrow>\<^sub>a bool_assn
### theory "Draft.SeprefUF"
### 0.691s elapsed time, 2.208s cpu time, 0.728s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale Kruskal_interface
  fixes E :: "'edge set"
    and V :: "'a set"
    and vertices :: "'edge => 'a set"
    and joins :: "'a => 'a => 'edge => bool"
    and forest :: "'edge set => bool"
    and connected :: "'edge set => ('a * 'a) set"
    and weight :: "'edge => 'b"
  assumes "Kruskal_interface E V vertices joins forest connected"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Kruskal"
### 0.409s elapsed time, 1.122s cpu time, 0.062s GC time
Loading theory "Draft.Kruskal_Refine" (required by "Draft.Kruskal_RefineTemplates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale Kruskal_interface
  fixes E :: "'edge set"
    and V :: "'a set"
    and vertices :: "'edge => 'a set"
    and joins :: "'a => 'a => 'edge => bool"
    and forest :: "'edge set => bool"
    and connected :: "'edge set => ('a * 'a) set"
    and weight :: "'edge => 'b"
  assumes "Kruskal_interface E V vertices joins forest connected"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Kruskal_Refine"
### 0.346s elapsed time, 0.705s cpu time, 0.044s GC time
### theory "HOL-Library.Tree"
### 2.270s elapsed time, 7.267s cpu time, 1.231s GC time
Loading theory "Draft.Templates" (required by "Draft.Kruskal_RefineTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.069s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Kruskal_RefineTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.497s elapsed time, 0.540s cpu time, 0.052s GC time
Loading theory "Draft.Kruskal_RefineTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Kruskal_RefineTemplates"
### 0.605s elapsed time, 0.812s cpu time, 0.135s GC time
val it = (): unit
