Loading theory "HOL-Library.Function_Algebras" (required by "Draft.KruskalTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.KruskalTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.KruskalTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.KruskalTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.175s elapsed time, 0.691s cpu time, 0.052s GC time
Loading theory "Draft.MinWeightBasis" (required by "Draft.KruskalTemplates" via "Draft.Kruskal")
### theory "HOL-Library.Set_Algebras"
### 0.231s elapsed time, 0.917s cpu time, 0.052s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.KruskalTemplates" via "Draft.ExtrEqs")
locale weighted_matroid
  fixes carrier :: "'a set"
    and indep :: "'a set => bool"
    and weight :: "'a => 'b"
  assumes "weighted_matroid carrier indep"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
### theory "Draft.MinWeightBasis"
### 0.407s elapsed time, 1.581s cpu time, 0.147s GC time
Loading theory "Draft.Kruskal_Misc" (required by "Draft.KruskalTemplates" via "Draft.Kruskal")
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.969s elapsed time, 3.759s cpu time, 0.358s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.045s elapsed time, 3.808s cpu time, 0.903s GC time
Found termination order: "size <*mlex*> {}"
"(`)"
  :: "('a => 'b) => 'a set => 'b set"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Kruskal_Misc"
### 0.799s elapsed time, 2.687s cpu time, 0.815s GC time
Loading theory "Draft.Kruskal" (required by "Draft.KruskalTemplates")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale Kruskal_interface
  fixes E :: "'edge set"
    and V :: "'a set"
    and vertices :: "'edge => 'a set"
    and joins :: "'a => 'a => 'edge => bool"
    and forest :: "'edge set => bool"
    and connected :: "'edge set => ('a * 'a) set"
    and weight :: "'edge => 'b"
  assumes "Kruskal_interface E V vertices joins forest connected"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Kruskal"
### 0.393s elapsed time, 0.815s cpu time, 0.072s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.090s elapsed time, 6.141s cpu time, 1.131s GC time
Loading theory "Draft.Templates" (required by "Draft.KruskalTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.048s elapsed time, 0.066s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.KruskalTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.457s elapsed time, 0.508s cpu time, 0.065s GC time
Loading theory "Draft.KruskalTemplates"
val templateLemmas =
   [("Kruskal_Misc.sort_edges_correct",
     "sorted_wrt edges_less_eq (quicksort_by_rel edges_less_eq [] ?l)",
     template_predicate
      (
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app
              (template_app (template_hole 1, template_hole 2),
               template_hole 0),
             template_var 0))
         )),
    ("Kruskal_Misc.list_assn_emp", "list_assn id_assn ?L ?L = emp",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1)),
           template_var 0),
         template_var 0),
       template_hole 0)),
    ("Kruskal_Misc.quicksort_by_rel_distinct",
     "distinct ?l ==> distinct (quicksort_by_rel edges_less_eq [] ?l)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_hole 1),
                 template_hole 0),
               template_var 0))
           ))),
    ("Kruskal_Misc.union_equiv",
     "equiv ?V ?R ==> equiv ?V (per_union ?R ?a ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Kruskal_Misc.distinct_mset_eq",
     "[| distinct ?a; mset ?a = mset ?b |] ==> distinct ?b",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_equation
         (template_app (template_hole 0, template_var 1),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (template_app (template_hole 2, template_var 0)))),
    ("Kruskal_Misc.list_relD",
     "(?x, ?y) : \<langle>br ?a ?I\<rangle>list_rel ==> ?y = map ?a ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)))
            )],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 3)))),
    ("Kruskal_Misc.max_node_impl",
     "max_node ?l = fold (%(u, uu_, w) x. max u (max w x)) ?l (0::?'a)",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 4, template_app (template_hole 3, t_empty)),
           template_var 0),
         template_hole 0))),
    ("Kruskal_Misc.equiv_sym",
     "[| equiv ?V ?R; (?x, ?y) : ?R |] ==> (?y, ?x) : ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_var 2)
           ))),
    ("Kruskal_Misc.equiv_mono",
     "[| ?E' <= ?E; equiv ?E ?R1.0 |] ==> equiv ?E' (Restr ?R1.0 ?E')",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_app (template_hole 0, template_var 2), t_empty)))
           ))),
    ("Kruskal_Misc.map_in_list_rel_conv",
     "((?l, ?l') : \<langle>br ?\<alpha> ?I\<rangle>list_rel) =
      ((ALL x:set ?l. ?I x) & ?l' = map ?\<alpha> ?l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 7, template_hole 6),
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 3)),
                 t_empty)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3)))
           ))),
    ("Kruskal_Misc.list_relD2",
     "(?x, ?y) : \<langle>br ?a ?I\<rangle>list_rel ==>
      ?y = map ?a ?x & (ALL x:set ?x. ?I x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 7, template_hole 6),
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 3))),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 3)),
               t_empty))
           ))),
    ("Kruskal_Misc.equiv_trans_sym",
     "[| equiv ?V ?R; (?a, ?b) : ?R; (?a, ?c) : ?R |] ==> (?b, ?c) : ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 0)),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 3)
           ))),
    ("Kruskal_Misc.equiv_trans_sym",
     "[| equiv ?V ?R; (?a, ?b) : ?R; (?c, ?b) : ?R |] ==> (?a, ?c) : ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 0),
                  template_var 1)),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 3)
           ))),
    ("Kruskal_Misc.equiv_trans",
     "[| equiv ?V ?R; (?x, ?y) : ?R; (?y, ?z) : ?R |] ==> (?x, ?z) : ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 3)
           ))),
    ("Kruskal_Misc.card2_get2",
     "[| card ?x = 2; !!a b. [| ?x = {a, b}; a ~= b |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app (template_hole 9, template_var 1),
          template_app
           (template_hole 8,
            template_app (template_hole 7, template_hole 6))),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Kruskal_Misc.coarser",
     "[| finite ?A;
         !!a b. [| a : ?A; b : ?A; ?f a = ?f b |] ==> ?g a = ?g b |]
      ==> card (?g ` ?A) <= card (?f ` ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2))))),
    ("Kruskal_Misc.list_set_rel_append",
     "[| (?x, ?s) : br ?a ?I;
         (?xs, ?S) : \<langle>br ?a ?I\<rangle>list_set_rel; ?s ~: ?S |]
      ==> (?xs @ [?x], insert ?s ?S)
          : \<langle>br ?a ?I\<rangle>list_set_rel",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 5),
                  template_var 4)),
              template_app
               (template_app (template_hole 10, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 1),
                  template_var 0)),
              template_app
               (template_app (template_hole 7, template_hole 6),
                template_app
                 (template_app (template_hole 10, template_var 3),
                  template_var 2)))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_app
                      (template_app (template_hole 2, template_var 5),
                       template_hole 1))),
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 0))),
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_app
                (template_app (template_hole 10, template_var 3),
                 template_var 2)))
           ))),
    ("Kruskal_Misc.unify2EquivClasses_alt",
     "[| ?R `` {?x} ~= ?R `` {?y}; ?y : ?V; ?x : ?V; ?R <= ?V \<times> ?V;
         equiv ?V ?R; finite ?V |]
      ==> Suc (card (?V // per_union ?R ?x ?y)) = card (?V // ?R)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 12, template_var 3),
                template_app
                 (template_app (template_hole 11, template_var 2),
                  template_hole 10)),
              template_app
               (template_app (template_hole 12, template_var 3),
                template_app
                 (template_app (template_hole 11, template_var 1),
                  template_hole 10)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_var 3,
          template_app
           (template_app (template_hole 7, template_var 0), t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_var 3)
            ),
        template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 3)))))]:
   (string * thm * template) list
### theory "Draft.KruskalTemplates"
### 0.553s elapsed time, 0.743s cpu time, 0.088s GC time
val it = (): unit
