   [("ProverLemmas.listFunTm_paramst", "set (listFunTm ?t) = paramst ?t",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("ProverLemmas.listFunTm_paramst",
     "set (listFunTms ?ts) = paramsts ?ts",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("ProverLemmas.paramst_liftt", "paramst (liftt ?t) = paramst ?t",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("ProverLemmas.paramst_liftt", "paramsts (liftts ?ts) = paramsts ?ts",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("ProverLemmas.nth_rule_index", "rulesList ! rule_index ?r = ?r",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("ProverLemmas.size_sub", "size (sub ?i ?t ?p) = size ?p",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("ProverLemmas.foldr_max",
     "foldr max ?xs 0 = (if ?xs = [] then 0 else Max (set ?xs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_hole 6),
                template_var 0),
              template_hole 5)
            )],
       template_dunno)),
    ("ProverLemmas.news_paramss", "news ?i ?z = (?i ~: paramss ?z)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty),
               template_app (template_hole 0, template_var 0))))))),
    ("ProverLemmas.branchDone_contradiction",
     "branchDone ?z = (EX p. p : set ?z & Neg p : set ?z)",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app (template_hole 4, t_empty))),
    ("ProverLemmas.subtermFm_preds",
     "(?t : set (subtermFm ?p)) =
      (EX pre:preds ?p. ?t : set (subtermFm pre))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("ProverLemmas.list_prod_is_cartesian",
     "set (list_prod ?hs ?ts) = {h @ t |h t. h : set ?hs & t : set ?ts}",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("ProverLemmas.set_subterms",
     "set (subterms ?z) =
      (if (UN p:set ?z. set (subtermFm p)) = {} then {Fun 0 []}
       else UN p:set ?z. set (subtermFm p))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 0))
            )],
       template_dunno)),
    ("ProverLemmas.set_children_Cons",
     "set (children ?A ?r (?p # ?z)) =
      {hs @ ts |hs ts.
       hs : set (parts ?A ?r ?p) &
       ts : set (children
                  (remdups (?A @ subtermFms (concat (parts ?A ?r ?p)))) ?r
                  ?z)}",
     template_equation
      (template_app
        (template_hole 15,
         template_app
          (template_app
            (template_app (template_hole 14, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 13, template_var 1),
             template_var 0))),
       template_app (template_hole 12, t_empty)))]
