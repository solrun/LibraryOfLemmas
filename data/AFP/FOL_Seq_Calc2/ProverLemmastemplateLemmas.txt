   [("ProverLemmas.rule_index_bnd", "rule_index ?r < length rulesList",
     template_inequation
      (less_than, template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("ProverLemmas.subtermTm_refl", "?t : set (subtermTm ?t)",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))
         )),
    ("ProverLemmas.listFunTm_paramst", "set (listFunTm ?t) = paramst ?t",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("ProverLemmas.listFunTm_paramst",
     "set (listFunTms ?ts) = paramsts ?ts",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("ProverLemmas.paramst_liftt", "paramst (liftt ?t) = paramst ?t",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("ProverLemmas.paramst_liftt", "paramsts (liftts ?ts) = paramsts ?ts",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("ProverLemmas.nth_rule_index", "rulesList ! rule_index ?r = ?r",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("ProverLemmas.size_sub", "size (sub ?i ?t ?p) = size ?p",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("ProverLemmas.subterm_Pre_refl",
     "set ?ts <= set (subtermFm (Pre ?n ?ts))",
     template_inequation
      (less_equals, template_app (template_hole 2, template_var 1),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("ProverLemmas.subterm_Fun_refl",
     "set ?ts <= set (subtermTm (Fun ?n ?ts))",
     template_inequation
      (less_equals, template_app (template_hole 2, template_var 1),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("ProverLemmas.rules_repeat_sdrop", "EX n. sdrop ?k rules !! n = ?r",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("ProverLemmas.Suc_max_new", "Suc (foldr max ?xs 0) ~: set ?xs",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_app (template_hole 3, template_hole 2),
                       template_var 0),
                     template_hole 1))),
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("ProverLemmas.rules_repeat", "EX n>?m. rules !! n = ?r",
     template_predicate (template_app (template_hole 5, t_empty))),
    ("ProverLemmas.params_sub",
     "params (sub ?m ?t ?p) <= paramst ?t Un params ?p",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("ProverLemmas.paramst_sub_term",
     "paramst (sub_term ?m ?s ?t) <= paramst ?s Un paramst ?t",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("ProverLemmas.paramst_sub_term",
     "paramsts (sub_list ?m ?s ?l) <= paramst ?s Un paramsts ?l",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("ProverLemmas.paramsts_subset",
     "set ?A <= set ?B ==> paramsts ?A <= paramsts ?B",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("ProverLemmas.foldr_max",
     "foldr max ?xs 0 = (if ?xs = [] then 0 else Max (set ?xs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_hole 6),
                template_var 0),
              template_hole 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_hole 2)),
               template_hole 5),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("ProverLemmas.params_subtermFm",
     "ALL i:params ?p. EX l. Fun i l : set (subtermFm ?p)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 0)),
           t_empty)
         )),
    ("ProverLemmas.paramst_subtermTm",
     "ALL i:paramst ?t. EX l. Fun i l : set (subtermTm ?t)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 0)),
           t_empty)
         )),
    ("ProverLemmas.subtermFm_subset_params",
     "set (subtermFm ?p) <= set ?A ==> params ?p <= paramsts ?A",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_var 1)),
          template_app (template_hole 4, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("ProverLemmas.news_paramss", "news ?i ?z = (?i ~: paramss ?z)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty),
               template_app (template_hole 0, template_var 0))))))),
    ("ProverLemmas.rule_index_mod",
     "rules !! ?n = ?r ==> ?n mod length rulesList = rule_index ?r",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_hole 5),
            template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_hole 1)),
         template_app (template_hole 0, template_var 0)))),
    ("ProverLemmas.subtermTm_le",
     "?t : set (subtermTm ?s) ==> set (subtermTm ?t) <= set (subtermTm ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))))),
    ("ProverLemmas.ne_effect_not_branchDone",
     "(?B, ?z') |\<in>| effect ?r (?A, ?z) ==> ~ branchDone ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)))
            )],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 0))
           ))),
    ("ProverLemmas.branchDone_contradiction",
     "branchDone ?z = (EX p. p : set ?z & Neg p : set ?z)",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app (template_hole 4, t_empty))),
    ("ProverLemmas.subtermFm_preds",
     "(?t : set (subtermFm ?p)) =
      (EX pre:preds ?p. ?t : set (subtermFm pre))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("ProverLemmas.preds_shape",
     "?pre : preds ?p ==> EX n ts. ?pre = Pre n ts",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("ProverLemmas.fun_arguments_subterm",
     "Fun ?n ?ts : set (subtermFm ?p) ==> set ?ts <= set (subtermFm ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)))
            )],
       template_inequation
        (less_equals, template_app (template_hole 2, template_var 1),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))))),
    ("ProverLemmas.cycle_nth",
     "?xs ~= [] ==> cycle ?xs !! ?n = ?xs ! (?n mod length ?xs)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 6))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1)))))),
    ("ProverLemmas.unique_rule_index",
     "[| ?n < length rulesList; rulesList ! ?n = ?r |]
      ==> ?n = rule_index ?r",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 5, template_hole 4)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_hole 4),
            template_var 1),
          template_var 0)],
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("ProverLemmas.paramst_subtermTm",
     "ALL i:paramsts ?ts.
         EX l. Fun i l : (UN t:set ?ts. set (subtermTm t))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 8,
             template_app (template_hole 7, template_var 0)),
           t_empty)
         )),
    ("ProverLemmas.parts_preserves_unaffected",
     "[| ~ affects ?r ?p; ?z' : set (parts ?A ?r ?p) |] ==> ?p : set ?z'",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 0),
                    template_var 3),
                  template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 1))
           ))),
    ("ProverLemmas.mod_hit", "0 < ?k ==> ALL i<?k. EX n>?m. n mod ?k = i",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 1)],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("ProverLemmas.mod_suff",
     "[| ALL n>?m. ?P (n mod ?k); 0 < ?k |] ==> ALL i<?k. ?P i",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_inequation (less_than, template_hole 0, template_var 0)],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("ProverLemmas.children_preserves_unaffected",
     "[| ?p : set ?z; ~ affects ?r ?p; ?z' : set (children ?A ?r ?z) |]
      ==> ?p : set ?z'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_app (template_hole 5, template_var 3))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 4)
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_hole 1,
                template_app
                 (template_app
                   (template_app (template_hole 0, template_var 0),
                    template_var 2),
                  template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 4),
             template_app (template_hole 5, template_var 1))
           ))),
    ("ProverLemmas.list_prod_is_cartesian",
     "set (list_prod ?hs ?ts) = {h @ t |h t. h : set ?hs & t : set ?ts}",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("ProverLemmas.sub_const_transfer",
     "sub ?m (Fun ?a []) ?p ~= sub ?m ?t ?p ==>
      Fun ?a [] : set (subtermFm (sub ?m (Fun ?a []) ?p))",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_hole 3)),
                template_var 1),
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 0),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_hole 3)),
             template_app
              (template_hole 1,
               template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_app (template_hole 5, template_var 3),
                     template_app
                      (template_app (template_hole 4, template_var 2),
                       template_hole 3)),
                   template_var 1))))
           ))),
    ("ProverLemmas.sub_term_const_transfer",
     "sub_term ?m (Fun ?a []) ?t ~= sub_term ?m ?s ?t ==>
      Fun ?a [] : set (subtermTm (sub_term ?m (Fun ?a []) ?t))",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_hole 3)),
                template_var 1),
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 0),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_hole 3)),
             template_app
              (template_hole 1,
               template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_app (template_hole 5, template_var 3),
                     template_app
                      (template_app (template_hole 4, template_var 2),
                       template_hole 3)),
                   template_var 1))))
           ))),
    ("ProverLemmas.effect_preserves_unaffected",
     "[| ?p : set ?z; ~ affects ?r ?p;
         (?B, ?z') |\<in>| effect ?r (?A, ?z) |]
      ==> ?p : set ?z'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 5),
              template_app (template_hole 5, template_var 4))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 5)
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_app
               (template_app (template_hole 0, template_var 3),
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_var 4)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 5),
             template_app (template_hole 5, template_var 1))
           ))),
    ("ProverLemmas.set_subterms",
     "set (subterms ?z) =
      (if (UN p:set ?z. set (subtermFm p)) = {} then {Fun 0 []}
       else UN p:set ?z. set (subtermFm p))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 12,
                     template_app
                      (template_hole 8,
                       template_app
                        (template_app (template_hole 7, t_empty),
                         template_app (template_hole 5, template_var 0)))),
                   template_hole 4)),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_hole 0)),
                 template_hole 4)),
             template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, t_empty),
                 template_app (template_hole 5, template_var 0))))
           ))),
    ("ProverLemmas.sub_term_const_transfer",
     "sub_list ?m (Fun ?a []) ?ts ~= sub_list ?m ?s ?ts ==>
      Fun ?a []
      : (UN t:set (sub_list ?m (Fun ?a []) ?ts). set (subtermTm t))",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 3),
                  template_app
                   (template_app (template_hole 6, template_var 2),
                    template_hole 5)),
                template_var 1),
              template_app
               (template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 0),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 6, template_var 2),
                 template_hole 5)),
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, t_empty),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_app (template_hole 7, template_var 3),
                       template_app
                        (template_app (template_hole 6, template_var 2),
                         template_hole 5)),
                     template_var 1)))))
           ))),
    ("ProverLemmas.eff_children",
     "[| ~ branchDone ?z; eff ?r (?A, ?z) ?ss |]
      ==> ALL z':set (children (remdups (?A @ subtermFms ?z)) ?r ?z).
             EX B. (B, z') |\<in>| ?ss",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 12, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 2),
                template_app
                 (template_app (template_hole 10, template_var 1),
                  template_var 3)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_hole 6,
                         template_app
                          (template_app (template_hole 5, template_var 1),
                           template_app
                            (template_hole 4,
                             template_app
                              (template_app
                                (template_hole 3, template_hole 2),
                               template_var 3))))),
                     template_var 2),
                   template_var 3))),
             t_empty)
           ))),
    ("ProverLemmas.parts_in_children",
     "[| ?p : set ?z; ?z' : set (children ?A ?r ?z) |]
      ==> EX B xs.
             set ?A <= set B &
             xs : set (parts B ?r ?p) & set xs <= set ?z'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 4),
              template_app (template_hole 10, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_app (template_hole 7, template_var 1),
                    template_var 0),
                  template_var 3)))
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("ProverLemmas.parts_in_effect",
     "[| ?p : set ?z; (?B, ?z') |\<in>| effect ?r (?A, ?z) |]
      ==> EX C xs.
             set ?A <= set C &
             xs : set (parts C ?r ?p) & set xs <= set ?z'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 5),
              template_app (template_hole 12, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 9, template_var 1),
                template_app
                 (template_app (template_hole 10, template_var 0),
                  template_var 4)))
            )],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("ProverLemmas.set_children_Cons",
     "set (children ?A ?r (?p # ?z)) =
      {hs @ ts |hs ts.
       hs : set (parts ?A ?r ?p) &
       ts : set (children
                  (remdups (?A @ subtermFms (concat (parts ?A ?r ?p)))) ?r
                  ?z)}",
     template_equation
      (template_app
        (template_hole 15,
         template_app
          (template_app
            (template_app (template_hole 14, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 13, template_var 1),
             template_var 0))),
       template_app (template_hole 12, t_empty))),
    ("ProverLemmas.Neg_exhaust",
     "[| !!i ts. ?x = Pre i ts ==> ?P; !!p q. ?x = Imp p q ==> ?P;
         !!p q. ?x = Dis p q ==> ?P; !!p q. ?x = Con p q ==> ?P;
         !!p. ?x = Exi p ==> ?P; !!p. ?x = Uni p ==> ?P;
         !!i ts. ?x = Neg (Pre i ts) ==> ?P;
         !!p q. ?x = Neg (Imp p q) ==> ?P; !!p q. ?x = Neg (Dis p q) ==> ?P;
         !!p q. ?x = Neg (Con p q) ==> ?P; !!p. ?x = Neg (Exi p) ==> ?P;
         !!p. ?x = Neg (Uni p) ==> ?P; !!p. ?x = Neg (Neg p) ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("ProverLemmas.parts_exhaust",
     "[| !!p q. [| ?r = AlphaDis; ?x = Dis p q |] ==> ?P;
         !!p q. [| ?r = AlphaImp; ?x = Imp p q |] ==> ?P;
         !!p q. [| ?r = AlphaCon; ?x = Neg (Con p q) |] ==> ?P;
         !!p q. [| ?r = BetaDis; ?x = Neg (Dis p q) |] ==> ?P;
         !!p q. [| ?r = BetaImp; ?x = Neg (Imp p q) |] ==> ?P;
         !!p q. [| ?r = BetaCon; ?x = Con p q |] ==> ?P;
         !!p. [| ?r = DeltaUni; ?x = Uni p |] ==> ?P;
         !!p. [| ?r = DeltaExi; ?x = Neg (Exi p) |] ==> ?P;
         !!p. [| ?r = NegNeg; ?x = Neg (Neg p) |] ==> ?P;
         !!p. [| ?r = GammaExi; ?x = Exi p |] ==> ?P;
         !!p. [| ?r = GammaUni; ?x = Neg (Uni p) |] ==> ?P;
         ALL A. parts A ?r ?x = [[?x]] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate (template_app (template_hole 27, t_empty)),
        template_predicate (template_app (template_hole 27, t_empty)),
        template_predicate (template_app (template_hole 27, t_empty)),
        template_predicate (template_app (template_hole 27, t_empty)),
        template_predicate (template_app (template_hole 27, t_empty)),
        template_predicate (template_app (template_hole 27, t_empty)),
        template_predicate (template_app (template_hole 27, t_empty)),
        template_predicate (template_app (template_hole 27, t_empty)),
        template_predicate (template_app (template_hole 27, t_empty)),
        template_predicate (template_app (template_hole 27, t_empty)),
        template_predicate (template_app (template_hole 27, t_empty)),
        template_implication
         ([template_predicate (template_app (template_hole 6, t_empty))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0)))]
