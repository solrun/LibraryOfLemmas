   [("Results.prover_SeCaV",
     "(tfinite (secavProver (?A, ?z)) & Prover.wf (secavProver (?A, ?z))) =
      (\<tturnstile> ?z)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0)))),
         template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_hole 1),
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0)))),
       template_app (template_hole 0, template_var 0))),
    ("Results.prover_soundness_semantics",
     "[| tfinite ?t; Prover.wf ?t |]
      ==> EX p:set (rootSequent ?t). semantics ?e ?f ?g p",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_hole 7),
                template_hole 6),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 3))))),
             t_empty)
           ))),
    ("Results.prover_semantics",
     "(tfinite (secavProver (?A, [?p])) &
       Prover.wf (secavProver (?A, [?p]))) =
      (\<then> ?p)",
     template_equation
      (template_app
        (template_app
          (template_hole 12,
           template_app
            (template_hole 11,
             template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 9, template_var 1),
                 template_app
                  (template_app (template_hole 8, template_var 0),
                   template_hole 7))))),
         template_app
          (template_app
            (template_app (template_hole 6, template_hole 5),
             template_hole 4),
           template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_var 1),
               template_app
                (template_app (template_hole 8, template_var 0),
                 template_hole 7))))),
       template_app (template_hole 3, t_empty))),
    ("Results.prover_soundness_usemantics",
     "[| tfinite ?t; Prover.wf ?t; is_env ?u ?e; is_fdenot ?u ?f |]
      ==> EX p:set (rootSequent ?t). usemantics ?u ?e ?f ?g p",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_hole 9),
                template_hole 8),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 4))))),
             t_empty)
           ))),
    ("Results.semantics_usemantics",
     "(\<then> ?p) =
      (ALL u e f g.
          is_env u e --> is_fdenot u f --> usemantics u e f g ?p)",
     template_equation
      (template_app (template_hole 11, t_empty),
       template_app (template_hole 7, t_empty))),
    ("Results.prover_usemantics",
     "(tfinite (secavProver (?A, ?z)) & Prover.wf (secavProver (?A, ?z))) =
      uvalid ?z",
     template_equation
      (template_app
        (template_app
          (template_hole 16,
           template_app
            (template_hole 15,
             template_app
              (template_hole 14,
               template_app
                (template_app (template_hole 13, template_var 1),
                 template_var 0)))),
         template_app
          (template_app
            (template_app (template_hole 12, template_hole 11),
             template_hole 10),
           template_app
            (template_hole 14,
             template_app
              (template_app (template_hole 13, template_var 1),
               template_var 0)))),
       template_app (template_hole 9, t_empty))),
    ("Results.prover_completeness_semantics",
     "\<then> ?p ==>
      fst (tree.root (secavProver (?A, [?p]))) = (?A, [?p]) &
      Prover.wf (secavProver (?A, [?p])) &
      tfinite (secavProver (?A, [?p]))",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_hole 9,
                     template_app
                      (template_hole 8,
                       template_app
                        (template_hole 7,
                         template_app
                          (template_app (template_hole 6, template_var 0),
                           template_app
                            (template_app (template_hole 5, template_var 1),
                             template_hole 4)))))),
                 template_app
                  (template_app (template_hole 6, template_var 0),
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_hole 4)))),
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_app (template_hole 3, template_hole 2),
                     template_hole 1),
                   template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 6, template_var 0),
                       template_app
                        (template_app (template_hole 5, template_var 1),
                         template_hole 4))))),
               template_app
                (template_hole 0,
                 template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_app
                      (template_app (template_hole 5, template_var 1),
                       template_hole 4))))))
           )))]
