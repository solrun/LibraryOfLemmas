Loading theory "Draft.SeCaV" (required by "Draft.CountermodelMoreTemplates" via "Draft.Countermodel" via "Draft.Hintikka" via "Draft.Prover")
Loading theory "Collections.ICF_Tools" (required by "Draft.CountermodelMoreTemplates" via "Draft.Countermodel" via "Draft.Hintikka" via "Draft.Prover" via "Abstract_Completeness.Abstract_Completeness" via "Collections.Locale_Code")
Loading theory "HOL-Library.Code_Abstract_Nat" (required by "Draft.CountermodelMoreTemplates" via "Draft.Countermodel" via "Draft.Hintikka" via "Draft.Prover" via "Abstract_Completeness.Abstract_Completeness" via "HOL-Library.Code_Target_Nat")
Loading theory "HOL-Library.Case_Converter" (required by "Draft.CountermodelMoreTemplates" via "Draft.Countermodel" via "Draft.Hintikka" via "Draft.Prover" via "HOL-Library.Code_Lazy")
infix 0 ##
signature ICF_TOOLS =
  sig
    val changed_conv: conv -> conv
    val chead_of: cterm -> cterm
    val chead_of_thm: thm -> cterm
    val define_simple:
       string -> term -> local_theory -> (term * thm) * local_theory
    val define_simple_global:
       string -> term -> theory -> (term * thm) * theory
    val define_simple_local:
       string -> term -> local_theory -> (term * thm) * local_theory
    val dest_def_eq: term -> term * term
    val dt_head: term -> term
    val dt_lhs: term -> term
    val dt_params: term -> term list
    val dt_rhs: term -> term
    val dthm_head: thm -> term
    val dthm_lhs: thm -> term
    val dthm_params: thm -> term list
    val dthm_rhs: thm -> term
    val gen_variant: (string -> bool) -> string -> string
    val import_cterm: cterm -> Proof.context -> cterm * Proof.context
    val inst_meta_cong: Proof.context -> cterm -> thm
    val map_option: ('a -> 'b) -> 'a option -> 'b option
    val norm_def_thm: thm -> thm
    val parse_cpat: cterm context_parser
    val rem_dup_prems: Proof.context -> thm -> thm
    val rename_cterm: cterm * cterm -> ctyp TVars.table * cterm Vars.table
    val renames_cterm: cterm * cterm -> bool
    val repeat_top_sweep_conv:
       (Proof.context -> conv) -> Proof.context -> conv
    val revert_abbrevs: string -> theory -> theory
    val sss_add: thm list -> Proof.context -> Proof.context
    val wrap_lthy_global: (local_theory -> local_theory) -> theory -> theory
    val wrap_lthy_local:
       (local_theory -> local_theory) -> local_theory -> local_theory
    val wrap_lthy_result_global:
       (local_theory -> 'a * local_theory) ->
         (morphism -> 'a -> 'b) -> theory -> 'b * theory
    val wrap_lthy_result_local:
       (local_theory -> 'a * local_theory) ->
         (morphism -> 'a -> 'b) -> local_theory -> 'b * local_theory
  end
val ## = fn: ('a -> 'b) * ('c -> 'd) -> 'a * 'c -> 'b * 'd
structure ICF_Tools: ICF_TOOLS
### theory "HOL-Library.Code_Abstract_Nat"
### 0.094s elapsed time, 0.395s cpu time, 0.036s GC time
Loading theory "HOL-Library.Code_Target_Nat" (required by "Draft.CountermodelMoreTemplates" via "Draft.Countermodel" via "Draft.Hintikka" via "Draft.Prover" via "Abstract_Completeness.Abstract_Completeness")
### theory "Collections.ICF_Tools"
### 0.096s elapsed time, 0.404s cpu time, 0.036s GC time
Loading theory "Collections.Ord_Code_Preproc" (required by "Draft.CountermodelMoreTemplates" via "Draft.Countermodel" via "Draft.Hintikka" via "Draft.Prover" via "Abstract_Completeness.Abstract_Completeness" via "Collections.Locale_Code")
### ML warning (line 26 of "$AFP/Collections/ICF/tools/Ord_Code_Preproc.thy"):
### (=) has infix status but was not preceded by op.
### ML warning (line 37 of "$AFP/Collections/ICF/tools/Ord_Code_Preproc.thy"):
### Value identifier (trace_ft) has not been referenced.
### ML warning (line 50 of "$AFP/Collections/ICF/tools/Ord_Code_Preproc.thy"):
### Value identifier (process) has not been referenced.
signature ORD_CODE_PREPROC =
  sig
    val add: int * string * (theory -> thm -> thm) -> theory -> theory
    val get: theory -> (int * string * (theory -> thm -> thm)) list
    val rem: string -> theory -> theory
    val setup: theory -> theory
    val trace_enabled: bool ref
  end
signature OC_SIMPSET =
  sig
    val get: theory -> simpset
    val map: (simpset -> simpset) -> theory -> theory
    val setup: theory -> theory
  end
structure Ord_Code_Preproc: ORD_CODE_PREPROC
functor Oc_Simpset (sig val name: string val prio: int end): OC_SIMPSET
### theory "Collections.Ord_Code_Preproc"
### 0.042s elapsed time, 0.174s cpu time, 0.000s GC time
Loading theory "Collections.Locale_Code" (required by "Draft.CountermodelMoreTemplates" via "Draft.Countermodel" via "Draft.Hintikka" via "Draft.Prover" via "Abstract_Completeness.Abstract_Completeness")
### Code generator: dropping subsumed code equation
### divmod_nat ?m ?n ==
### if ?n = 0 | ?m < ?n then (0, ?m)
### else let (q, y) = divmod_nat (?m - ?n) ?n in (Suc q, y)
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit1 ?n) ==
### if ?m < ?n then (0, numeral (num.Bit1 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit1 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit1 ?n) ==
### if ?m <= ?n then (0, numeral (num.Bit0 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit0 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r + 1)
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit1 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit0 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod ?m num.One == (numeral ?m, 0)
### Code generator: dropping subsumed code equation
### Suc ?m <= ?n == ?m < ?n
### Code generator: dropping subsumed code equation
### 0 <= ?n == True
### Code generator: dropping subsumed code equation
### ?m < Suc ?n == ?m <= ?n
### Code generator: dropping subsumed code equation
### ?n < 0 == False
signature CASE_CONVERTER =
  sig
    type elimination_strategy
    val keep_constructor_context: elimination_strategy
    val replace_by_type:
       (Proof.context -> string * string -> bool) -> elimination_strategy
    val to_case:
       Proof.context ->
         elimination_strategy ->
           (string * typ -> int) -> thm list -> thm list option
  end
structure Case_Converter: CASE_CONVERTER
### theory "HOL-Library.Case_Converter"
### 0.191s elapsed time, 0.781s cpu time, 0.036s GC time
Loading theory "HOL-Library.Code_Lazy" (required by "Draft.CountermodelMoreTemplates" via "Draft.Countermodel" via "Draft.Hintikka" via "Draft.Prover")
### Code generator: dropping subsumed code equation
### of_nat ?n == semiring_1_class.of_nat_aux (%i. i + (1::?'a)) ?n (0::?'a)
### theory "HOL-Library.Code_Target_Nat"
### 0.142s elapsed time, 0.571s cpu time, 0.000s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.CountermodelMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### ML warning (line 343 of "$AFP/Collections/ICF/tools/Locale_Code.thy"):
### Pattern is not exhaustive.
signature LOCALE_CODE =
  sig
    val add_pat_eq: cterm -> thm list -> theory -> theory
    val close_block: theory -> theory
    val del_pat: cterm -> theory -> theory
    val get_unf_ss: theory -> simpset
    val lc_decl_del: term -> local_theory -> local_theory
    val lc_decl_eq: thm list -> local_theory -> local_theory
    val open_block: theory -> theory
    type pat_eq = cterm * thm list
    val setup: theory -> theory
    val tracing_enabled: bool ref
  end
structure Locale_Code: LOCALE_CODE
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "Collections.Locale_Code"
### 0.142s elapsed time, 0.558s cpu time, 0.034s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.CountermodelMoreTemplates" via "Draft.Countermodel" via "Draft.Hintikka" via "Draft.Prover" via "Abstract_Completeness.Abstract_Completeness" via "HOL-Library.Countable_Set")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.106s elapsed time, 0.409s cpu time, 0.034s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.CountermodelMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  enumerate :: "'a set => nat => 'a"
### ML warning (line 262 of "~~/src/HOL/Library/code_lazy.ML"):
### Matches are not exhaustive.
### ML warning (line 283 of "~~/src/HOL/Library/code_lazy.ML"):
### Value identifier (ctxt) has not been referenced.
### ML warning (line 338 of "~~/src/HOL/Library/code_lazy.ML"):
### Matches are not exhaustive.
signature CODE_LAZY =
  sig
    val activate_lazy_type: string -> theory -> theory
    val activate_lazy_types: theory -> theory
    val code_lazy_type: string -> theory -> theory
    val deactivate_lazy_type: string -> theory -> theory
    val deactivate_lazy_types: theory -> theory
    val get_lazy_types: theory -> (string * lazy_info) list
    type lazy_info =
       {activate: theory -> theory,
        active: bool,
        case_lazy: term,
        ctr: term,
        deactivate: theory -> theory,
        destr: term, eagerT: typ, lazyT: typ, lazy_ctrs: term list}
    val print_lazy_types: theory -> unit
    val transform_code_eqs:
       Proof.context -> (thm * bool) list -> (thm * bool) list option
  end
structure Code_Lazy: CODE_LAZY
### theory "HOL-Library.Code_Lazy"
### 0.339s elapsed time, 1.327s cpu time, 0.126s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.CountermodelMoreTemplates" via "Draft.Countermodel" via "Draft.Hintikka" via "Draft.Prover" via "Abstract_Completeness.Abstract_Completeness" via "HOL-Library.Countable_Set" via "HOL-Library.Countable")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.305s elapsed time, 1.194s cpu time, 0.151s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.CountermodelMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Nat_Bijection"
### 0.338s elapsed time, 1.333s cpu time, 0.151s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.CountermodelMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.226s elapsed time, 0.887s cpu time, 0.084s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.CountermodelMoreTemplates" via "Draft.Countermodel" via "Draft.Hintikka" via "Draft.Prover" via "Abstract_Completeness.Abstract_Completeness" via "HOL-Library.Linear_Temporal_Logic_on_Streams")
consts
  semantics_term :: "(nat => 'a) => (nat => 'a list => 'a) => tm => 'a"
  semantics_list ::
    "(nat => 'a) => (nat => 'a list => 'a) => tm list => 'a list"
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.635s elapsed time, 2.325s cpu time, 0.720s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.CountermodelMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  semantics ::
    "(nat => 'a)
     => (nat => 'a list => 'a) => (nat => 'a list => bool) => fm => bool"
consts
  new_term :: "nat => tm => bool"
  new_list :: "nat => tm list => bool"
consts
  new :: "nat => fm => bool"
consts
  news :: "nat => fm list => bool"
consts
  inc_term :: "tm => tm"
  inc_list :: "tm list => tm list"
consts
  sub_term :: "nat => tm => tm => tm"
  sub_list :: "nat => tm => tm list => tm list"
consts
  sub :: "nat => tm => fm => fm"
consts
  member :: "'a => 'a list => bool"
consts
  ext :: "'a list => 'a list => bool"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for inductive predicate(s) "sequent_calculus"
consts
  prefixes :: "'a list => 'a list list"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
  Proving monotonicity ...
consts
  liftt :: "tm => tm"
  liftts :: "tm list => tm list"
consts
  paramst :: "tm => nat set"
  paramsts :: "tm list => nat set"
consts
  snth :: "'a stream => nat => 'a"
consts
  paramst' :: "tm => nat set"
consts
  params :: "fm => nat set"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  params' :: "fm => nat set"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  substt :: "tm => tm => nat => tm"
  substts :: "tm list => tm => nat => tm list"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  subst :: "fm => tm => nat => fm"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
consts
  left :: "'a tree => 'a tree"
### theory "Draft.SeCaV"
### 1.821s elapsed time, 7.025s cpu time, 1.164s GC time
Loading theory "Draft.Usemantics" (required by "Draft.CountermodelMoreTemplates" via "Draft.Countermodel")
consts
  right :: "'a tree => 'a tree"
### theory "HOL-Library.Stream"
### 1.171s elapsed time, 4.438s cpu time, 1.020s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.CountermodelMoreTemplates" via "Draft.Countermodel" via "Draft.Hintikka" via "Draft.Prover" via "Abstract_Completeness.Abstract_Completeness" via "HOL-Library.Countable_Set")
consts
  suffixes :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
consts
  usemantics ::
    "'a set
     => (nat => 'a)
        => (nat => 'a list => 'a) => (nat => 'a list => bool) => fm => bool"
Proofs for inductive predicate(s) "list_emb"
  Proving monotonicity ...
### theory "Draft.Usemantics"
### 0.129s elapsed time, 0.504s cpu time, 0.078s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.CountermodelMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Additional type variable(s) in locale specification "countable": 'a
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  sublists :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
### theory "HOL-Library.Sublist"
### 1.730s elapsed time, 6.654s cpu time, 1.185s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
### theory "HOL-Library.BigO"
### 0.872s elapsed time, 3.303s cpu time, 0.407s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.466s elapsed time, 5.015s cpu time, 1.340s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.CountermodelMoreTemplates" via "Draft.Countermodel" via "Draft.Hintikka" via "Draft.Prover" via "Abstract_Completeness.Abstract_Completeness")
Loading theory "HOL-Library.FSet" (required by "Draft.CountermodelMoreTemplates" via "Draft.Countermodel" via "Draft.Hintikka" via "Draft.Prover" via "Abstract_Completeness.Abstract_Completeness")
Found termination order: "size <*mlex*> {}"
instantiation
  fset :: (finite) finite
instantiation
  fset :: (type) {minus,bounded_lattice_bot,distrib_lattice}
  inf_fset == inf :: 'a fset => 'a fset => 'a fset
  bot_fset == bot :: 'a fset
  sup_fset == sup :: 'a fset => 'a fset => 'a fset
  less_eq_fset == less_eq :: 'a fset => 'a fset => bool
  less_fset == less :: 'a fset => 'a fset => bool
  minus_fset == minus :: 'a fset => 'a fset => 'a fset
instantiation
  fset :: (equal) equal
  equal_fset == equal_class.equal :: 'a fset => 'a fset => bool
instantiation
  fset :: (type) conditionally_complete_lattice
  Inf_fset == Inf :: 'a fset set => 'a fset
  Sup_fset == Sup :: 'a fset set => 'a fset
### theory "HOL-Library.Tree"
### 2.389s elapsed time, 8.450s cpu time, 1.746s GC time
Loading theory "Draft.Templates" (required by "Draft.CountermodelMoreTemplates" via "Draft.ExtrEqs")
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
instantiation
  fset :: (finite) complete_lattice
  top_fset == top :: 'a fset
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
instantiation
  fset :: (finite) complete_boolean_algebra
  uminus_fset == uminus :: 'a fset => 'a fset
### theory "Draft.Templates"
### 0.063s elapsed time, 0.207s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.CountermodelMoreTemplates")
### theory "HOL-Library.Countable_Set"
### 0.402s elapsed time, 1.247s cpu time, 0.104s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.CountermodelMoreTemplates" via "Draft.Countermodel" via "Draft.Hintikka" via "Draft.Prover" via "Abstract_Completeness.Abstract_Completeness" via "HOL-Library.Linear_Temporal_Logic_on_Streams" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.616s elapsed time, 1.875s cpu time, 0.169s GC time
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
locale comp_fun_idem
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_idem f"
locale comm_monoid_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_fset (\<^bold>*) \<^bold>1"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### Cannot skip proof of schematic goal statement
locale semilattice_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
  assumes "semilattice_fset (\<^bold>*)"
locale semilattice_order_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
  assumes "semilattice_order_fset (\<^bold>*) (\<^bold>\<le>) (\<^bold><)"
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  fset :: (type) size
  size_fset == size :: 'a fset => nat
instantiation
  fset :: (exhaustive) exhaustive
  exhaustive_fset == exhaustive_class.exhaustive ::
    ('a fset => (bool * term list) option)
    => natural => (bool * term list) option
Found termination order: "(%p. nat_of_natural (snd p)) <*mlex*> {}"
instantiation
  fset :: (full_exhaustive) full_exhaustive
  full_exhaustive_fset == full_exhaustive_class.full_exhaustive ::
    ('a fset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Found termination order: "(%p. nat_of_natural (snd p)) <*mlex*> {}"
### theory "HOL-Library.Countable_Complete_Lattices"
### 1.748s elapsed time, 4.093s cpu time, 0.321s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.CountermodelMoreTemplates" via "Draft.Countermodel" via "Draft.Hintikka" via "Draft.Prover" via "Abstract_Completeness.Abstract_Completeness" via "HOL-Library.Linear_Temporal_Logic_on_Streams" via "HOL-Library.Extended_Nat")
instantiation
  fset :: (random) random
  random_fset == random_class.random ::
    natural
    => natural * natural => ('a fset * (unit => term)) * natural * natural
### Additional type variable(s) in specification of "random_aux_fset_rel": 'a
### Additional type variable(s) in specification of "random_aux_fset_dom": 'a
Found termination order: "(%p. nat_of_natural (fst p)) <*mlex*> {}"
### theory "HOL-Library.FSet"
### 2.270s elapsed time, 5.609s cpu time, 0.464s GC time
### theory "HOL-Library.Order_Continuity"
### 0.425s elapsed time, 0.613s cpu time, 0.038s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.CountermodelMoreTemplates" via "Draft.Countermodel" via "Draft.Hintikka" via "Draft.Prover" via "Abstract_Completeness.Abstract_Completeness" via "HOL-Library.Linear_Temporal_Logic_on_Streams")
class infinity = type +
  fixes infinity :: "'a"
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### theory "HOL-Library.Extended_Nat"
### 0.476s elapsed time, 0.550s cpu time, 0.103s GC time
Loading theory "HOL-Library.Linear_Temporal_Logic_on_Streams" (required by "Draft.CountermodelMoreTemplates" via "Draft.Countermodel" via "Draft.Hintikka" via "Draft.Prover" via "Abstract_Completeness.Abstract_Completeness")
Found termination order: "{}"
Found termination order: "{}"
Proofs for inductive predicate(s) "ev"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "alw"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "UNTIL"
  Proving monotonicity ...
Proofs for inductive predicate(s) "ev_at"
  Proving monotonicity ...
Proofs for inductive predicate(s) "suntil"
  Proving monotonicity ...
### theory "HOL-Library.Linear_Temporal_Logic_on_Streams"
### 0.793s elapsed time, 0.878s cpu time, 0.118s GC time
Loading theory "Abstract_Completeness.Abstract_Completeness" (required by "Draft.CountermodelMoreTemplates" via "Draft.Countermodel" via "Draft.Hintikka" via "Draft.Prover")
Proofs for inductive predicate(s) "tfinite"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "ipath"
  Proving monotonicity ...
consts
  konig :: "'a tree => 'a stream"
locale RuleSystem_Defs
  fixes eff :: "'rule => 'state => 'state fset => bool"
    and rules :: "'rule stream"
Proofs for coinductive predicate(s) "wf"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "epath"
  Proving monotonicity ...
consts
  mkTree :: "'rule stream => 'state => ('state * 'rule) tree"
locale RuleSystem
  fixes eff :: "'rule => 'state => 'state fset => bool"
    and rules :: "'rule stream"
    and S :: "'state set"
  assumes "RuleSystem eff rules S"
locale PersistentRuleSystem
  fixes eff :: "'rule => 'state => 'state fset => bool"
    and rules :: "'rule stream"
    and S :: "'state set"
  assumes "PersistentRuleSystem eff rules S"
locale RuleSystem_Code
  fixes eff' :: "'rule => 'state => 'state fset option"
    and rules :: "'rule stream"
locale RuleSystem_Code
  fixes eff' :: "'rule => 'state => 'state fset option"
    and rules :: "'rule stream"
### Partially applied constant "Abstract_Completeness.effG" on left hand side of equation, in theorem:
### i.mkTree ?eff' ?rs ?s ==
### case i.trim ?eff' ?rs ?s of
### r ## s' => Node (?s, r) (i.mkTree ?eff' s' |`| i.pickEff ?eff' r ?s)
### Partially applied constant "Abstract_Completeness.effG" on left hand side of equation, in theorem:
### i.pickEff ?eff' ?r ?s == the (?eff' ?r ?s)
See theory exports
### theory "Abstract_Completeness.Abstract_Completeness"
### 1.225s elapsed time, 1.342s cpu time, 0.161s GC time
Loading theory "Abstract_Soundness.Finite_Proof_Soundness" (required by "Draft.CountermodelMoreTemplates" via "Draft.Countermodel" via "Draft.Hintikka" via "Draft.Prover")
locale Soundness
  fixes eff :: "'rule => 'sequent => 'sequent fset => bool"
    and rules :: "'rule stream"
    and "structure" :: "'structure set"
    and sat :: "'structure => 'sequent => bool"
  assumes "Soundness eff rules structure sat"
### theory "Abstract_Soundness.Finite_Proof_Soundness"
### 0.063s elapsed time, 0.088s cpu time, 0.028s GC time
Loading theory "Draft.Prover" (required by "Draft.CountermodelMoreTemplates" via "Draft.Countermodel" via "Draft.Hintikka")
consts
  listFunTm :: "tm => nat list"
  listFunTms :: "tm list => nat list"
consts
  subtermTm :: "tm => tm list"
consts
  subtermFm :: "fm => tm list"
Found termination order: "size_list size <*mlex*> {}"
consts
  list_prod :: "'a list list => 'a list list => 'a list list"
consts
  children :: "tm list => rule => fm list => fm list list"
consts
  effect :: "rule => tm list * fm list => (tm list * fm list) fset"
### Partially applied constant "Prover.eff" on left hand side of equation, in theorem:
### mkTree ?rs ?s ==
### case trim ?rs ?s of r ## s' => Node (?s, r) (mkTree s' |`| pickEff r ?s)
### theory "Draft.Prover"
### 1.284s elapsed time, 1.405s cpu time, 0.147s GC time
Loading theory "Draft.ProverLemmas" (required by "Draft.CountermodelMoreTemplates" via "Draft.Countermodel")
Loading theory "Draft.Hintikka" (required by "Draft.CountermodelMoreTemplates" via "Draft.Countermodel")
consts
  next_rule :: "rule => rule"
locale Hintikka
  fixes H :: "fm set"
  assumes "Hintikka H"
### theory "Draft.Hintikka"
### 0.087s elapsed time, 0.192s cpu time, 0.032s GC time
consts
  rule_index :: "rule => nat"
consts
  preds :: "fm => fm set"
### theory "Draft.ProverLemmas"
### 0.226s elapsed time, 0.352s cpu time, 0.069s GC time
Loading theory "Draft.Countermodel" (required by "Draft.CountermodelMoreTemplates")
### theory "Draft.Countermodel"
### 0.300s elapsed time, 0.300s cpu time, 0.000s GC time
Loading theory "Draft.CountermodelMoreTemplates"
val templateLemmas =
   [("Countermodel.terms_ne", "terms ?S ~= {}",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Countermodel.terms_downwards_closed",
     "?t : terms ?S ==> set (subtermTm ?t) <= terms ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Countermodel.is_env_E", "is_env (terms ?S) (E ?S)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0)),
           t_empty)
         )),
    ("Countermodel.terms_cases",
     "?t : terms ?S ==> ?t = Fun 0 [] | (EX p:?S. ?t : set (subtermFm p))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app (template_hole 8, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_hole 3))),
             template_app
              (template_app (template_hole 2, template_var 0), t_empty))
           ))),
    ("Countermodel.is_fdenot_F", "is_fdenot (terms ?S) (F ?S)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0)),
           t_empty)
         )),
    ("Countermodel.usemantics_E",
     "?t : terms ?S ==> semantics_term (E ?S) (F ?S) ?t = ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_app (template_hole 4, t_empty), t_empty),
           template_var 1),
         template_var 1))),
    ("Countermodel.usemantics_E",
     "list_all (%t. t : terms ?S) ?ts ==>
      semantics_list (E ?S) (F ?S) ?ts = ?ts",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, t_empty), template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_app (template_hole 4, t_empty), t_empty),
           template_var 0),
         template_var 0))),
    ("Countermodel.Hintikka_counter_model",
     "Hintikka ?S ==>
      (?p : ?S -->
       ~ usemantics (terms ?S) (E ?S) (F ?S) (%n ts. Neg (Pre n ts) : ?S)
          ?p) &
      (Neg ?p : ?S -->
       usemantics (terms ?S) (E ?S) (F ?S) (%n ts. Neg (Pre n ts) : ?S)
        ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app (template_hole 10, template_var 0),
                     template_var 1)),
                 template_app
                  (template_hole 9,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_hole 8,
                             template_app
                              (template_hole 7, template_var 1)),
                           t_empty),
                         t_empty),
                       t_empty),
                     template_var 0)))),
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app (template_hole 1, template_var 0)),
                   template_var 1)),
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_hole 8,
                         template_app (template_hole 7, template_var 1)),
                       t_empty),
                     t_empty),
                   t_empty),
                 template_var 0)))
           )))]:
   (string * thm * template) list
### theory "Draft.CountermodelMoreTemplates"
### 0.472s elapsed time, 0.696s cpu time, 0.097s GC time
val it = (): unit
