Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Latin_SquareMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Latin_SquareMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Latin_SquareMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Tree" (required by "Draft.Latin_SquareMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.147s elapsed time, 0.600s cpu time, 0.041s GC time
Loading theory "Marriage.Marriage" (required by "Draft.Latin_SquareMoreTemplates" via "Draft.Latin_Square")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.196s elapsed time, 0.800s cpu time, 0.041s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Latin_SquareMoreTemplates" via "Draft.ExtrEqs")
### theory "Marriage.Marriage"
### 0.091s elapsed time, 0.361s cpu time, 0.000s GC time
Loading theory "Draft.Latin_Square" (required by "Draft.Latin_SquareMoreTemplates")
### theory "HOL-Library.Nat_Bijection"
### 0.318s elapsed time, 1.277s cpu time, 0.135s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Latin_SquareMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
instantiation
  latin_type :: enum
  enum_latin_type == enum_class.enum :: latin_type list
  enum_all_latin_type == enum_class.enum_all :: (latin_type => bool) => bool
  enum_ex_latin_type == enum_class.enum_ex :: (latin_type => bool) => bool
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "Draft.Latin_Square"
### 0.496s elapsed time, 1.952s cpu time, 0.219s GC time
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
"(1, 2)"
  :: "nat * nat"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
"True"
  :: "bool"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.990s elapsed time, 3.777s cpu time, 0.884s GC time
"False"
  :: "bool"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.047s elapsed time, 4.015s cpu time, 0.821s GC time
"True"
  :: "bool"
"False"
  :: "bool"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
"True"
  :: "bool"
"False"
  :: "bool"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.068s elapsed time, 6.504s cpu time, 1.075s GC time
Loading theory "Draft.Templates" (required by "Draft.Latin_SquareMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.049s elapsed time, 0.063s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Latin_SquareMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.468s elapsed time, 0.514s cpu time, 0.056s GC time
Loading theory "Draft.Latin_SquareMoreTemplates"
val templateLemmas =
   [("Latin_Square.all_types_next_eqiv",
     "(ALL t. ?P (next t)) = (ALL t. ?P t)",
     template_equation
      (template_app (template_hole 1, t_empty),
       template_app (template_hole 1, t_empty))),
    ("Latin_Square.partial_latin_square_full",
     "(partial_latin_square ?s ?n & card ?s = ?n * ?n) =
      latin_square ?s ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Latin_Square.limited_family_union",
     "[| finite ?B; ALL P:?B. card P <= ?k |]
      ==> card (\<Union> ?B) <= card ?B * ?k",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1), t_empty)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Latin_Square.cartesian_product_margin1",
     "?a : ?A ==> {p: ?A \<times> ?B. fst p = ?a} = {?a} \<times> ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app (template_hole 7, t_empty),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0)),
           t_empty)))),
    ("Latin_Square.cartesian_product_margin2",
     "?b : ?B ==> {p: ?A \<times> ?B. snd p = ?b} = ?A \<times> {?b}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app (template_hole 7, t_empty),
         template_app
          (template_app (template_hole 4, template_var 0), t_empty)))),
    ("Latin_Square.latin_rect_iff",
     "(?m <= ?n &
       partial_latin_square ?s ?n &
       card ?s = ?n * ?m & (ALL e:?s. e Row < ?m)) =
      latin_rect ?s ?m ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 7, template_var 0),
               template_var 1)),
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 0)),
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_var 2))),
             template_app
              (template_app (template_hole 3, template_var 0), t_empty)))),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_var 1))),
    ("Latin_Square.limited_preimages",
     "[| ALL x:?f ` ?D. card (?f -` {x} Int ?D) <= ?k; finite ?D |]
      ==> card ?D <= card (?f ` ?D) * ?k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_var 1)),
              t_empty)
            ),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_inequation
        (less_equals, template_app (template_hole 7, template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 9, template_var 2),
                 template_var 1))),
           template_var 0)))),
    ("Latin_Square.latin_rect_card_col",
     "[| latin_rect ?s ?m ?n; ?x < ?n |]
      ==> card {e Col |e. e : ?s & e Num = ?x} = ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_than, template_var 0, template_var 1)],
       template_equation
        (template_app
          (template_hole 6, template_app (template_hole 5, t_empty)),
         template_var 2))),
    ("Latin_Square.latin_rect_card_num",
     "[| latin_rect ?s ?m ?n; ?x < ?n |]
      ==> card {e Num |e. e : ?s & e Col = ?x} = ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_than, template_var 0, template_var 1)],
       template_equation
        (template_app
          (template_hole 6, template_app (template_hole 5, t_empty)),
         template_var 2))),
    ("Latin_Square.bij_restrict",
     "[| bij_betw ?f ?A ?B; ALL a:?A. ?P a = ?Q (?f a) |]
      ==> bij_betw ?f {a: ?A. ?P a} {b: ?B. ?Q b}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, template_var 4),
               template_app (template_hole 4, t_empty)),
             template_app (template_hole 1, t_empty))
           ))),
    ("Latin_Square.union_limited_replicates",
     "[| finite ?I; ALL i:?I. finite (?A i); 0 < ?k;
         ALL i:?I. card (?A i) = ?k;
         ALL i:?I. ALL x:?A i. card {i: ?I. x : ?A i} <= ?k |]
      ==> card ?I <= card (\<Union> (?A ` ?I))",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 2), t_empty)
            ),
        template_inequation (less_than, template_hole 11, template_var 0),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 2), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 2), t_empty)
            )],
       template_inequation
        (less_equals, template_app (template_hole 6, template_var 2),
         template_app
          (template_hole 9,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, t_empty),
               template_var 2))))))]:
   (string * thm * template) list
### theory "Draft.Latin_SquareMoreTemplates"
### 0.275s elapsed time, 0.368s cpu time, 0.000s GC time
val it = (): unit
