Loading theory "HOL-Library.Adhoc_Overloading" (required by "Draft.Imperative_Insertion_SortMoreTemplates" via "Draft.Imperative_Insertion_Sort" via "Draft.Imperative_Loops" via "HOL-Imperative_HOL.Imperative_HOL" via "HOL-Imperative_HOL.Array" via "HOL-Imperative_HOL.Heap_Monad" via "HOL-Library.Monad_Syntax")
Loading theory "HOL-Library.Cancellation" (required by "Draft.Imperative_Insertion_SortMoreTemplates" via "Draft.Imperative_Insertion_Sort" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Imperative_Insertion_SortMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Imperative_Insertion_SortMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
signature ADHOC_OVERLOADING =
  sig
    val generic_add_overloaded: string -> Context.generic -> Context.generic
    val generic_add_variant:
       string -> term -> Context.generic -> Context.generic
    val generic_remove_overloaded:
       string -> Context.generic -> Context.generic
    val generic_remove_variant:
       string -> term -> Context.generic -> Context.generic
    val is_overloaded: Proof.context -> string -> bool
    val show_variants: bool Config.T
  end
structure Adhoc_Overloading: ADHOC_OVERLOADING
### theory "HOL-Library.Adhoc_Overloading"
### 0.125s elapsed time, 0.513s cpu time, 0.036s GC time
Loading theory "HOL-Library.Monad_Syntax" (required by "Draft.Imperative_Insertion_SortMoreTemplates" via "Draft.Imperative_Insertion_Sort" via "Draft.Imperative_Loops" via "HOL-Imperative_HOL.Imperative_HOL" via "HOL-Imperative_HOL.Array" via "HOL-Imperative_HOL.Heap_Monad")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.127s elapsed time, 0.528s cpu time, 0.036s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.Imperative_Insertion_SortMoreTemplates" via "Draft.Imperative_Insertion_Sort" via "Draft.Imperative_Loops" via "HOL-Imperative_HOL.Imperative_HOL" via "HOL-Imperative_HOL.Array" via "HOL-Imperative_HOL.Heap_Monad" via "HOL-Imperative_HOL.Heap" via "HOL-Library.Countable")
### theory "HOL-Library.Monad_Syntax"
### 0.042s elapsed time, 0.162s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Imperative_Insertion_SortMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### theory "HOL-Library.Nat_Bijection"
### 0.378s elapsed time, 1.514s cpu time, 0.103s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Imperative_Insertion_SortMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.230s elapsed time, 0.908s cpu time, 0.066s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Imperative_Insertion_SortMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.452s elapsed time, 1.804s cpu time, 0.103s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Imperative_Insertion_SortMoreTemplates" via "Draft.Imperative_Insertion_Sort")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.415s elapsed time, 1.627s cpu time, 0.159s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.Imperative_Insertion_SortMoreTemplates" via "Draft.Imperative_Insertion_Sort" via "Draft.Imperative_Loops" via "HOL-Imperative_HOL.Imperative_HOL" via "HOL-Imperative_HOL.Array" via "HOL-Imperative_HOL.Heap_Monad" via "HOL-Imperative_HOL.Heap")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### Additional type variable(s) in locale specification "countable": 'a
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "finite_item"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.119s elapsed time, 4.225s cpu time, 0.875s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Imperative_Insertion_SortMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.379s elapsed time, 5.265s cpu time, 0.893s GC time
Loading theory "HOL-Imperative_HOL.Heap" (required by "Draft.Imperative_Insertion_SortMoreTemplates" via "Draft.Imperative_Insertion_Sort" via "Draft.Imperative_Loops" via "HOL-Imperative_HOL.Imperative_HOL" via "HOL-Imperative_HOL.Array" via "HOL-Imperative_HOL.Heap_Monad")
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "size <*mlex*> {}"
consts
  mset :: "'a list => 'a multiset"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Library.BigO"
### 0.855s elapsed time, 3.352s cpu time, 0.316s GC time
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
Found termination order: "size <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### theory "HOL-Library.Tree"
### 2.219s elapsed time, 8.328s cpu time, 1.303s GC time
Loading theory "Draft.Templates" (required by "Draft.Imperative_Insertion_SortMoreTemplates" via "Draft.ExtrEqs")
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.062s elapsed time, 0.182s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Imperative_Insertion_SortMoreTemplates")
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
consts
  addr_of_array :: "'a array => nat"
consts
  addr_of_ref :: "'a ref => nat"
### theory "HOL-Imperative_HOL.Heap"
### 1.116s elapsed time, 3.776s cpu time, 0.415s GC time
Loading theory "HOL-Imperative_HOL.Heap_Monad" (required by "Draft.Imperative_Insertion_SortMoreTemplates" via "Draft.Imperative_Insertion_Sort" via "Draft.Imperative_Loops" via "HOL-Imperative_HOL.Imperative_HOL" via "HOL-Imperative_HOL.Array")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.621s elapsed time, 1.875s cpu time, 0.163s GC time
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
consts
  execute :: "'a Heap => heap => ('a * heap) option"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.823s elapsed time, 12.483s cpu time, 2.466s GC time
consts
  fold_map :: "('a => 'b Heap) => 'a list => 'b list Heap"
### Cannot skip proof of schematic goal statement
### theory "HOL-Imperative_HOL.Heap_Monad"
### 1.606s elapsed time, 3.739s cpu time, 1.197s GC time
Loading theory "HOL-Imperative_HOL.Array" (required by "Draft.Imperative_Insertion_SortMoreTemplates" via "Draft.Imperative_Insertion_Sort" via "Draft.Imperative_Loops" via "HOL-Imperative_HOL.Imperative_HOL")
### theory "HOL-Imperative_HOL.Array"
### 0.228s elapsed time, 0.228s cpu time, 0.000s GC time
Loading theory "HOL-Imperative_HOL.Ref" (required by "Draft.Imperative_Insertion_SortMoreTemplates" via "Draft.Imperative_Insertion_Sort" via "Draft.Imperative_Loops" via "HOL-Imperative_HOL.Imperative_HOL")
### Ambiguous input (line 211 of "~~/src/HOL/Imperative_HOL/Ref.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Ref.lookup" ("_thenM" ("_position" r) ("_position" f)))
###     ("_position" f)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_thenM" ("\<^const>Ref.lookup" ("_position" r)) ("_position" f))
###     ("_position" f)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 215 of "~~/src/HOL/Imperative_HOL/Ref.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Ref.update" ("_position" r)
###     ("\<^const>HOL.eq" ("_position" e)
###       ("_thenM"
###         ("_applC" ("_position" change)
###           ("_cargs" ("_lambda" ("_idtdummy") ("_position" e))
###             ("_position" r)))
###         ("_applC" ("_position" return) ("\<^const>Product_Type.Unity"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^const>Ref.update" ("_position" r) ("_position" e))
###     ("_thenM"
###       ("_applC" ("_position" change)
###         ("_cargs" ("_lambda" ("_idtdummy") ("_position" e))
###           ("_position" r)))
###       ("_applC" ("_position" return) ("\<^const>Product_Type.Unity")))))
### ("\<^const>HOL.Trueprop"
###   ("_thenM"
###     ("\<^const>Ref.update" ("_position" r)
###       ("\<^const>HOL.eq" ("_position" e)
###         ("_applC" ("_position" change)
###           ("_cargs" ("_lambda" ("_idtdummy") ("_position" e))
###             ("_position" r)))))
###     ("_applC" ("_position" return) ("\<^const>Product_Type.Unity"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOL-Imperative_HOL.Ref"
### 0.146s elapsed time, 0.174s cpu time, 0.040s GC time
Loading theory "HOL-Imperative_HOL.Imperative_HOL" (required by "Draft.Imperative_Insertion_SortMoreTemplates" via "Draft.Imperative_Insertion_Sort" via "Draft.Imperative_Loops")
### theory "HOL-Imperative_HOL.Imperative_HOL"
### 0.021s elapsed time, 0.021s cpu time, 0.000s GC time
Loading theory "Draft.Imperative_Loops" (required by "Draft.Imperative_Insertion_SortMoreTemplates" via "Draft.Imperative_Insertion_Sort")
locale ro_cond
  fixes p :: "bool Heap"
  assumes "ro_cond p"
locale ro_cond
  fixes p :: "bool Heap"
  assumes "ro_cond p"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
### theory "Draft.Imperative_Loops"
### 0.124s elapsed time, 0.125s cpu time, 0.000s GC time
Loading theory "Draft.Imperative_Insertion_Sort" (required by "Draft.Imperative_Insertion_SortMoreTemplates")
See theory exports
### theory "Draft.Imperative_Insertion_Sort"
### 0.527s elapsed time, 0.592s cpu time, 0.090s GC time
Loading theory "Draft.Imperative_Insertion_SortMoreTemplates"
val templateLemmas =
   [("Imperative_Insertion_Sort.success_insert_elt",
     "?k < Array.length ?h ?a ==> success (insert_elt ?a ?k) ?h",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_var 1)
           ))),
    ("Imperative_Insertion_Sort.success_shiftr_f",
     "Ref.get ?h ?i < Array.length ?h ?a ==> success (shiftr_f ?a ?i) ?h",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_var 2)
           ))),
    ("Imperative_Insertion_Sort.success_shiftr_p",
     "Ref.get ?h ?i < Array.length ?h ?a ==>
      success (shiftr_p ?a ?key ?i) ?h",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 3, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 2, template_var 3),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 2)),
             template_var 3)
           ))),
    ("Imperative_Insertion_Sort.effect_shiftr_length",
     "effect (shiftr ?a ?key ?i) ?h ?h' ?u ==>
      Array.length ?h' ?a = Array.length ?h ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app
                       (template_app (template_hole 2, template_var 5),
                        template_var 4),
                      template_var 3)),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 5),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 5)))),
    ("Imperative_Insertion_Sort.effect_shiftr_index",
     "effect (shiftr ?a ?key ?i) ?h ?h' ?u ==>
      Ref.get ?h' ?i <= Ref.get ?h ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app
                       (template_app (template_hole 2, template_var 5),
                        template_var 4),
                      template_var 3)),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 3),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 3)))),
    ("Imperative_Insertion_Sort.success_shiftr",
     "Ref.get ?h ?i < Array.length ?h ?a ==>
      success (while (shiftr_p ?a ?key ?i) (shiftr_f ?a ?i)) ?h",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 5, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 4, template_var 3),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 1),
                       template_var 0),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2))),
             template_var 3)
           ))),
    ("Imperative_Insertion_Sort.effect_insertion_sort",
     "effect (insertion_sort ?a) ?h ?h' ?u ==>
      mset (Array.get ?h ?a) = mset (Array.get ?h' ?a) &
      sorted (Array.get ?h' ?a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 7,
                    template_app (template_hole 6, template_var 3)),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 2),
                       template_var 3))),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 3)))),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 3)))
           ))),
    ("Imperative_Insertion_Sort.insertion_sort_correct",
     "EX h'.
         effect (insertion_sort ?a) ?h h' ?u &
         mset (Array.get ?h ?a) = mset (Array.get h' ?a) &
         sorted (Array.get h' ?a)",
     template_predicate (template_app (template_hole 8, t_empty))),
    ("Imperative_Insertion_Sort.sorted_take_nth",
     "[| 0 < ?i; ?i < length ?xs; ?xs ! (?i - 1) <= ?y;
         sorted (take ?i ?xs) |]
      ==> ALL x:set (take ?i ?xs). x <= ?y",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 2),
        template_inequation
         (less_than, template_var 2,
          template_app (template_hole 8, template_var 1)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 6, template_var 1),
            template_app
             (template_app (template_hole 5, template_var 2),
              template_hole 4)),
          template_var 0),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 7),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1))),
             t_empty)
           ))),
    ("Imperative_Insertion_Sort.effect_shiftr_f",
     "effect (shiftr_f ?a ?i) ?h ?h' ?u ==>
      Ref.get ?h' ?i = Ref.get ?h ?i - 1 &
      Array.get ?h' ?a = (Array.get ?h ?a)
      [Ref.get ?h ?i := Array.get ?h ?a ! (Ref.get ?h ?i - 1)]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 4),
                      template_var 3)),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 1),
                     template_var 3)),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 6, template_var 2),
                       template_var 3)),
                   template_hole 4))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 4)),
               template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 2, template_var 2),
                       template_var 4)),
                   template_app
                    (template_app (template_hole 6, template_var 2),
                     template_var 3)),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_app (template_hole 2, template_var 2),
                       template_var 4)),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 6, template_var 2),
                         template_var 3)),
                     template_hole 4)))))
           ))),
    ("Imperative_Insertion_Sort.effect_for_insert_elt",
     "[| ?l <= Array.length ?h ?a; 1 <= ?l;
         effect (for [1..<?l] (insert_elt ?a)) ?h ?h' ?u |]
      ==> Array.length ?h ?a = Array.length ?h' ?a &
          sorted (take ?l (Array.get ?h' ?a)) &
          mset (Array.get ?h ?a) = mset (Array.get ?h' ?a)",
     template_implication
      ([template_inequation
         (less_equals, template_var 4,
          template_app
           (template_app (template_hole 13, template_var 3),
            template_var 2)),
        template_inequation (less_equals, template_hole 12, template_var 4),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_app (template_hole 9, template_hole 12),
                          template_var 4)),
                      template_app (template_hole 8, template_var 2))),
                  template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 13, template_var 3),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 13, template_var 1),
                   template_var 2))),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_app
                    (template_app (template_hole 3, template_var 4),
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_var 2)))),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_hole 0,
                     template_app
                      (template_app (template_hole 2, template_var 3),
                       template_var 2))),
                 template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 2)))))
           ))),
    ("Imperative_Insertion_Sort.for_insert_elt_correct",
     "[| ?l <= Array.length ?h ?a; 1 <= ?l |]
      ==> EX h'.
             effect (for [1..<?l] (insert_elt ?a)) ?h h' () &
             Array.length ?h ?a = Array.length h' ?a &
             sorted (take ?l (Array.get h' ?a)) &
             mset (Array.get ?h ?a) = mset (Array.get h' ?a)",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 15, template_var 1),
            template_var 0)),
        template_inequation
         (less_equals, template_hole 14, template_var 2)],
       template_predicate (template_app (template_hole 13, t_empty)))),
    ("Imperative_Insertion_Sort.effect_shiftr",
     "[| Ref.get ?h ?i = ?j; ?j < Array.length ?h ?a;
         sorted (take ?j (Array.get ?h ?a));
         effect (while (shiftr_p ?a ?key ?i) (shiftr_f ?a ?i)) ?h ?h' ?u |]
      ==> Array.length ?h ?a = Array.length ?h' ?a &
          Ref.get ?h' ?i <= ?j &
          mset ((Array.get ?h ?a)[?j := ?key]) =
          mset ((Array.get ?h' ?a)[Ref.get ?h' ?i := ?key]) &
          ini ?h ?a ?j = both ?h' ?a ?j ?i &
          sorted (both ?h' ?a ?j ?i) &
          (ALL x:set (Imperative_Insertion_Sort.right ?h' ?a ?j ?i).
              ?key < x)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 22, template_var 6),
            template_var 5),
          template_var 4),
        template_inequation
         (less_than, template_var 4,
          template_app
           (template_app (template_hole 20, template_var 6),
            template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 19, template_hole 18),
              template_app
               (template_app (template_hole 17, template_var 4),
                template_app
                 (template_app (template_hole 16, template_var 6),
                  template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 15,
                    template_app
                     (template_app
                       (template_hole 14,
                        template_app
                         (template_app
                           (template_app (template_hole 13, template_var 3),
                            template_var 2),
                          template_var 5)),
                      template_app
                       (template_app (template_hole 12, template_var 3),
                        template_var 5))),
                  template_var 6),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 23,
                   template_app
                    (template_app (template_hole 20, template_var 6),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 20, template_var 1),
                   template_var 3))),
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app (template_hole 22, template_var 1),
                       template_var 5)),
                   template_var 4)),
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app
                        (template_hole 8,
                         template_app
                          (template_app
                            (template_app
                              (template_hole 7,
                               template_app
                                (template_app
                                  (template_hole 16, template_var 6),
                                 template_var 3)),
                             template_var 4),
                           template_var 2))),
                     template_app
                      (template_hole 8,
                       template_app
                        (template_app
                          (template_app
                            (template_hole 7,
                             template_app
                              (template_app
                                (template_hole 16, template_var 1),
                               template_var 3)),
                           template_app
                            (template_app
                              (template_hole 22, template_var 1),
                             template_var 5)),
                         template_var 2)))),
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app
                          (template_app
                            (template_app (template_hole 5, template_var 6),
                             template_var 3),
                           template_var 4)),
                       template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 4, template_var 1),
                             template_var 3),
                           template_var 4),
                         template_var 5))),
                   template_app
                    (template_app
                      (template_hole 11,
                       template_app
                        (template_app (template_hole 19, template_hole 18),
                         template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 4, template_var 1),
                               template_var 3),
                             template_var 4),
                           template_var 5))),
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 1, template_var 1),
                                 template_var 3),
                               template_var 4),
                             template_var 5))),
                       t_empty))))))
           )))]:
   (string * thm * template) list
### theory "Draft.Imperative_Insertion_SortMoreTemplates"
### 0.384s elapsed time, 0.506s cpu time, 0.000s GC time
val it = (): unit
