Loading theory "Draft.Arithmetical_Hints" (required by "Draft.Periodicity_LemmaTemplates" via "Draft.Periodicity_Lemma" via "Draft.CoWBasic")
Loading theory "Draft.Reverse_Symmetry" (required by "Draft.Periodicity_LemmaTemplates" via "Draft.Periodicity_Lemma" via "Draft.CoWBasic")
Loading theory "Draft.Templates" (required by "Draft.Periodicity_LemmaTemplates" via "Draft.ExtrEqs")
### theory "Draft.Arithmetical_Hints"
### 0.045s elapsed time, 0.168s cpu time, 0.000s GC time
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.068s elapsed time, 0.215s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Periodicity_LemmaTemplates")
structure Reversal_Rules: NAMED_THMS
val eq_refl = "?x = ?y ==> ?x == ?y": thm
val pure_eq_of = fn: thm -> thm option
val init_rev_wrap =
   ["[] == rev_Nil_wrap", "(!!y. PROP ?P y) == all_rev_wrap ?P",
    "ALL y. ?P y == All_rev_wrap ?P", "EX y. ?P y == Ex_rev_wrap ?P",
    "EX! y. ?P y == Ex1_rev_wrap ?P",
    "ALL x:?A. ?P x == Ball_rev_wrap ?A ?P",
    "EX x:?A. ?P x == Bex_rev_wrap ?A ?P"]:
   thm list
val init_unwrap =
   ["rev_Nil_wrap == rev []",
    "all_rev_wrap (%x. PROP ?P x) == (!!x. PROP ?P (rev x))",
    "All_rev_wrap ?P == ALL x. ?P (rev x)",
    "Ex_rev_wrap ?P == EX x. ?P (rev x)",
    "Ex1_rev_wrap ?P == EX! x. ?P (rev x)",
    "Ball_rev_wrap ?A ?P == ALL x:rev ` ?A. ?P (rev x)",
    "Bex_rev_wrap ?A ?P == EX x:rev ` ?A. ?P (rev x)"]:
   thm list
val final_correct1 = ["snocs [] ?y == ?y"]: thm list
val final_correct2 = ["snocs ?xs1 ?ys1 == ?xs1 @ ?ys1"]: thm list
val reverse = fn: thm list -> Context.generic -> thm -> thm
val reversed = fn:
   Context.generic * Token.T list ->
     attribute * (Context.generic * Token.T list)
?xs ~= ?x # ?xs
?xs ~= ?xs @ [?x]
(?xs ~= []) = (EX y ys. ?xs = y # ys)
(?xs ~= []) = (EX y ys. ?xs = ys @ [y])
[| ?xs = [?a, ?b]; ?ys = [?b, ?a, ?b] |]
==> ?xs @ ?xs @ ?xs = ?a # ?b # ?a # ?ys
[| ?xs = [?b, ?a]; ?ys = [?b, ?a, ?b] |]
==> (?xs @ ?xs) @ ?xs = ?ys @ [?a, ?b, ?a]
[| ?xs = [?a, ?b]; ?ys = [?b, ?a, ?b] |]
==> ?xs @ ?xs @ ?xs = [?a, ?b, ?a] @ ?ys
### theory "Draft.Reverse_Symmetry"
### 0.177s elapsed time, 0.441s cpu time, 0.031s GC time
Loading theory "Draft.CoWBasic" (required by "Draft.Periodicity_LemmaTemplates" via "Draft.Periodicity_Lemma")
[| ?xs ~= []; !!x. ?P [x]; !!x xs. [| xs ~= []; ?P xs |] ==> ?P (x # xs) |]
==> ?P ?xs
[| ?xs ~= []; !!x. ?P (rev [x]);
   !!x xs. [| xs ~= []; ?P (rev xs) |] ==> ?P (rev (xs @ [x])) |]
==> ?P (rev ?xs)
[| ?xs ~= []; !!x. ?P2 [x];
   !!x xs. [| xs ~= []; ?P2 xs |] ==> ?P2 (xs @ [x]) |]
==> ?P2 ?xs
hd (?xs @ ?ys) = (if ?xs = [] then hd ?ys else hd ?xs)
last (?ys @ ?xs) = (if ?xs = [] then last ?ys else last ?xs)
last (?xs @ ?ys) = (if ?ys = [] then last ?xs else last ?ys)
[| length ?xs = length ?ys; ?P [] [];
   !!x xs y ys.
      [| length xs = length ys; ?P xs ys |] ==> ?P (x # xs) (y # ys) |]
==> ?P ?xs ?ys
[| length ?xs = length ?ys; ?P (rev []) (rev []);
   !!x xs y ys.
      [| length xs = length ys; ?P (rev xs) (rev ys) |]
      ==> ?P (rev (xs @ [x])) (rev (ys @ [y])) |]
==> ?P (rev ?xs) (rev ?ys)
[| length ?xs = length ?ys; ?P2 [] [];
   !!x xs y ys.
      [| length xs = length ys; ?P2 xs ys |]
      ==> ?P2 (xs @ [x]) (ys @ [y]) |]
==> ?P2 ?xs ?ys
length (tl ?xs) = length ?xs - 1
length (butlast ?xs) = length ?xs - 1
length (butlast ?xs) = length ?xs - 1
?xs ~= [] ==> hd ?xs # tl ?xs = ?xs
?xs ~= [] ==> butlast ?xs @ [last ?xs] = ?xs
?xs ~= [] ==> butlast ?xs @ [last ?xs] = ?xs
?xs ~= [] ==> [hd ?xs] @ tl ?xs = ?xs
?xs ~= [] ==> hd ?xs : set ?xs
?xs ~= [] ==> last ?xs : set ?xs
?as ~= [] ==> last ?as : set ?as
?y : set (?x # ?xs) ==> ?y = ?x | ?y : set ?xs
?y : set (?xs @ [?x]) ==> ?y = ?x | ?y : set ?xs
?x : set ?xs ==> EX ys zs. ?xs = ys @ ?x # zs & ?x ~: set ys
?x : set ?xs ==> EX ys zs. ?xs = (zs @ [?x]) @ ys & ?x ~: set ys
EX x:set ?xs. ?P x ==>
EX ys x zs. ?xs = ys @ x # zs & ?P x & (ALL y:set ys. ~ ?P y)
EX x:set ?xs. ?P x ==>
EX ys x zs. ?xs = (zs @ [x]) @ ys & ?P x & (ALL y:set ys. ~ ?P y)
EX x:set ?xs. ?P x ==>
EX ys x zs. ?xs = zs @ x # ys & ?P x & (ALL y:set ys. ~ ?P y)
EX x:set ?xs. ?P x ==>
EX ys x zs. ?xs = ys @ x # zs & ?P x & (ALL z:set zs. ~ ?P z)
?xs ~= [] ==> rotate 1 ?xs = tl ?xs @ [hd ?xs]
?xs ~= [] ==>
rotate (length ?xs - 1 mod length ?xs) ?xs = [last ?xs] @ butlast ?xs
[| EX x:set ?xs. ?P x;
   !!ys x zs.
      [| ?xs = ys @ x # zs; ?P x; ALL y:set ys. ~ ?P y |] ==> ?thesis |]
==> ?thesis
[| EX x:set ?xs. ?P x;
   !!ys x zs.
      [| ?xs = (zs @ [x]) @ ys; ?P x; ALL y:set ys. ~ ?P y |] ==> ?thesis |]
==> ?thesis
[| EX x:set ?xs. ?P x;
   !!ys x zs.
      [| ?xs = zs @ x # ys; ?P x; ALL y:set ys. ~ ?P y |] ==> ?thesis |]
==> ?thesis
[| EX x:set ?xs. ?P x;
   !!ys x zs.
      [| ?xs = ys @ x # zs; ?P x; ALL z:set zs. ~ ?P z |] ==> ?thesis |]
==> ?thesis
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.555s elapsed time, 1.185s cpu time, 0.122s GC time
Found termination order: "(%p. \<^bold>|snd p\<^bold>|) <*mlex*> {}"
### Partially applied constant "List.append" on left hand side of equation, in theorem:
### monoid_mult.prod_list \<epsilon> (\<cdot>) ?xs ==
### foldr (\<cdot>) ?xs \<epsilon>
locale morphism
  fixes f :: "'a list => 'b list"
  assumes "morphism f"
locale two_morphisms
  fixes g :: "'a list => 'b list"
    and h :: "'a list => 'b list"
  assumes "two_morphisms g h"
locale morphism
  fixes f :: "'a list => 'b list"
  assumes "morphism f"
[| \<^bold>|?w\<^bold>| < \<^bold>|?x\<^bold>| + \<^bold>|?x\<^bold>|;
   ?x \<le>b ?w |]
==> ?x\<^sup><\<inverse>(?x\<inverse>\<^sup>>?w)  \<le>b ?x
Found termination order: "{}"
### theory "Draft.CoWBasic"
### 1.464s elapsed time, 2.093s cpu time, 0.346s GC time
Loading theory "Draft.Periodicity_Lemma" (required by "Draft.Periodicity_LemmaTemplates")
### theory "Draft.Periodicity_Lemma"
### 0.022s elapsed time, 0.024s cpu time, 0.000s GC time
*** Failed to load theory "Draft.Periodicity_LemmaTemplates" (unresolved "Draft.Periodicity_Lemma")
*** Unknown ancestor theory "Combinatorics_Words.CoWBasic" (line 18 of "$AFP/Combinatorics_Words/Periodicity_Lemma.thy")
*** At command "text" (line 17 of "$AFP/Combinatorics_Words/Periodicity_Lemma.thy")
Exception- TOPLEVEL_ERROR raised
