Loading theory "Draft.Arithmetical_Hints" (required by "Draft.Arithmetical_HintsTemplates")
Loading theory "Draft.Templates" (required by "Draft.Arithmetical_HintsTemplates" via "Draft.ExtrEqs")
### theory "Draft.Arithmetical_Hints"
### 0.043s elapsed time, 0.113s cpu time, 0.000s GC time
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.066s elapsed time, 0.138s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Arithmetical_HintsTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.469s elapsed time, 0.495s cpu time, 0.031s GC time
Loading theory "Draft.Arithmetical_HintsTemplates"
val templateLemmas =
   [("Arithmetical_Hints.add_lessD2", "?k + ?m < ?n ==> ?m < ?n",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 0, template_var 2), template_var 1),
          template_var 0)],
       template_inequation (less_than, template_var 1, template_var 0))),
    ("Arithmetical_Hints.plus_one_between", "?a < ?b ==> ~ ?b < ?a + 1",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_negation
        (
           template_inequation
            (less_than, template_var 0,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))
           ))),
    ("Arithmetical_Hints.zero_less_diff'", "?i < ?j ==> ?j - ?i ~= 0",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1),
             template_hole 0)
           ))),
    ("Arithmetical_Hints.get_div", "?p < ?a ==> ?m = (?m * ?a + ?p) div ?a",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_equation
        (template_var 0,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1)),
               template_var 2)),
           template_var 1)))),
    ("Arithmetical_Hints.get_mod", "?p < ?a ==> ?p = (?m * ?a + ?p) mod ?a",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_equation
        (template_var 2,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1)),
               template_var 2)),
           template_var 1)))),
    ("Arithmetical_Hints.zero_diff_eq",
     "[| ?i <= ?j; 0 = ?j - ?i |] ==> ?j = ?i",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_equation
         (template_hole 1,
          template_app
           (template_app (template_hole 0, template_var 0),
            template_var 1))],
       template_equation (template_var 0, template_var 1))),
    ("Arithmetical_Hints.quotient_smaller",
     "[| ?a ~= 0; ?a = ?k * ?b |] ==> ?b <= ?a",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 2)),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0))],
       template_inequation (less_equals, template_var 0, template_var 2))),
    ("Arithmetical_Hints.nat_prod_le",
     "[| ?m ~= 0; ?m * ?n <= ?k |] ==> ?n <= ?k",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 2)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 0, template_var 2), template_var 1),
          template_var 0)],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("Arithmetical_Hints.mult_cancel_le",
     "[| ?b ~= 0; ?a * ?b <= ?c * ?b |] ==> ?a <= ?c",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 2)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 0, template_var 1), template_var 2),
          template_app
           (template_app (template_hole 0, template_var 0),
            template_var 2))],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("Arithmetical_Hints.mod_offset",
     "[| ?M ~= 0; !!k. ?n mod ?M = (?l + k) mod ?M ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 3)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Arithmetical_Hints.less_mult_one",
     "[| (?m - 1) * ?k < ?k; ?m = 0 ==> ?thesis; ?m = 1 ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 2),
                template_hole 2)),
            template_var 1),
          template_var 1),
        template_implication
         ([template_equation (template_var 2, template_hole 0)],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation (template_var 2, template_hole 2)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Arithmetical_HintsTemplates"
### 0.270s elapsed time, 0.363s cpu time, 0.000s GC time
val it = (): unit
