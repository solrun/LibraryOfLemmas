Loading theory "HOL-Library.Function_Algebras" (required by "Draft.LiftingIntraMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.LiftingIntraMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.LiftingIntraMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.LiftingIntraMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.123s elapsed time, 0.505s cpu time, 0.042s GC time
Loading theory "Slicing.AuxLemmas" (required by "Draft.LiftingIntraMoreTemplates" via "Draft.LiftingIntra" via "Draft.NonInterferenceIntra" via "Slicing.Slice" via "Slicing.Observable" via "Slicing.CFG" via "Slicing.BasicDefs")
### theory "Slicing.AuxLemmas"
### 0.037s elapsed time, 0.145s cpu time, 0.000s GC time
Loading theory "Slicing.BasicDefs" (required by "Draft.LiftingIntraMoreTemplates" via "Draft.LiftingIntra" via "Draft.NonInterferenceIntra" via "Slicing.Slice" via "Slicing.Observable" via "Slicing.CFG")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.224s elapsed time, 0.910s cpu time, 0.042s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.LiftingIntraMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.325s elapsed time, 1.297s cpu time, 0.145s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.LiftingIntraMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "{}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### theory "Slicing.BasicDefs"
### 0.756s elapsed time, 2.978s cpu time, 0.337s GC time
Loading theory "Slicing.CFG" (required by "Draft.LiftingIntraMoreTemplates" via "Draft.LiftingIntra" via "Draft.NonInterferenceIntra" via "Slicing.Slice" via "Slicing.Observable")
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
locale CFG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
  assumes "CFG sourcenode targetnode valid_edge (_Entry_)"
consts
  cycle :: "'a list => 'a stream"
Proofs for inductive predicate(s) "path"
  Proving monotonicity ...
### Ambiguous input (line 48 of "$AFP/Slicing/Basic/CFG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.path" ("_position" n) ("\<^const>List.list.Nil")
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.path" ("_position" n) ("\<^const>List.list.Nil")
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.path" ("_position" n) ("\<^const>List.list.Nil")
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop" ("_position" n))))
###     ("_position" n')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 51 of "$AFP/Slicing/Basic/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.path" ("_position" n) ("_position" as)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" valid_edge) ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.path" ("_position" n) ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("_Ball" ("_position" a) ("_applC" ("_position" set) ("_position" as))
###       ("_applC" ("_position" valid_edge) ("_position" a)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 1.020s elapsed time, 3.854s cpu time, 0.948s GC time
consts
  flat :: "'a list stream => 'a stream"
### theory "Slicing.CFG"
### 0.361s elapsed time, 1.251s cpu time, 0.610s GC time
Loading theory "Slicing.CFGExit" (required by "Draft.LiftingIntraMoreTemplates" via "Draft.LiftingIntra" via "Draft.NonInterferenceIntra" via "Slicing.CFGExit_wf")
Loading theory "Slicing.CFG_wf" (required by "Draft.LiftingIntraMoreTemplates" via "Draft.LiftingIntra" via "Draft.NonInterferenceIntra" via "Slicing.Slice" via "Slicing.DataDependence" via "Slicing.DynDataDependence")
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
locale CFGExit
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes "CFGExit sourcenode targetnode kind valid_edge (_Entry_) (_Exit_)"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
locale CFG_wf
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
  assumes
    "CFG_wf sourcenode targetnode kind valid_edge (_Entry_) Def Use
      state_val"
### theory "Slicing.CFGExit"
### 0.100s elapsed time, 0.400s cpu time, 0.000s GC time
Loading theory "Slicing.Postdomination" (required by "Draft.LiftingIntraMoreTemplates" via "Draft.LiftingIntra" via "Slicing.CDepInstantiations" via "Slicing.PDG" via "Slicing.StandardControlDependence")
### theory "Slicing.CFG_wf"
### 0.101s elapsed time, 0.404s cpu time, 0.000s GC time
Loading theory "Slicing.CFGExit_wf" (required by "Draft.LiftingIntraMoreTemplates" via "Draft.LiftingIntra" via "Draft.NonInterferenceIntra")
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.118s elapsed time, 4.234s cpu time, 0.932s GC time
Loading theory "Slicing.DynDataDependence" (required by "Draft.LiftingIntraMoreTemplates" via "Draft.LiftingIntra" via "Draft.NonInterferenceIntra" via "Slicing.Slice" via "Slicing.DataDependence")
locale Postdomination
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes
    "Postdomination sourcenode targetnode kind valid_edge (_Entry_)
      (_Exit_)"
locale CFG_wf
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
  assumes
    "CFG_wf sourcenode targetnode kind valid_edge (_Entry_) Def Use
      state_val"
### Ambiguous input (line 17 of "$AFP/Slicing/Basic/Postdomination.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>postdominate" ("_position" n')
###     ("\<^const>Pure.eq" ("_position" n)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_node) ("_position" n))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_node) ("_position" n'))
###           ("\<^const>HOL.All_binder" ("_position" as)
###             ("\<^const>HOL.implies"
###               ("\<^const>local.path" ("_position" n) ("_position" as)
###                 ("\<^fixed>Exit"))
###               ("\<^const>Set.member" ("_position" n')
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" sourcenodes)
###                     ("_position" as)))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>postdominate" ("_position" n') ("_position" n))
###   ("\<^const>HOL.conj" ("_applC" ("_position" valid_node) ("_position" n))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" valid_node) ("_position" n'))
###       ("\<^const>HOL.All_binder" ("_position" as)
###         ("\<^const>HOL.implies"
###           ("\<^const>local.path" ("_position" n) ("_position" as)
###             ("\<^fixed>Exit"))
###           ("\<^const>Set.member" ("_position" n')
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" sourcenodes) ("_position" as)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>postdominate" ("_position" n')
###     ("\<^const>Pure.eq" ("_position" n)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_node) ("_position" n))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_node) ("_position" n'))
###           ("\<^const>HOL.All_binder" ("_position" as)
###             ("\<^const>local.path" ("_position" n) ("_position" as)
###               ("\<^const>HOL.implies" ("\<^fixed>Exit")
###                 ("\<^const>Set.member" ("_position" n')
###                   ("_applC" ("_position" set)
###                     ("_applC" ("_position" sourcenodes)
###                       ("_position" as))))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>postdominate" ("_position" n') ("_position" n))
###   ("\<^const>HOL.conj" ("_applC" ("_position" valid_node) ("_position" n))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" valid_node) ("_position" n'))
###       ("\<^const>HOL.All_binder" ("_position" as)
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("\<^const>HOL.implies" ("\<^fixed>Exit")
###             ("\<^const>Set.member" ("_position" n')
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" sourcenodes)
###                   ("_position" as))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>postdominate" ("_position" n')
###     ("\<^const>Pure.eq" ("_position" n)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_node) ("_position" n))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_node) ("_position" n'))
###           ("\<^const>HOL.All_binder" ("_position" as)
###             ("\<^const>Set.member"
###               ("\<^const>local.path" ("_position" n) ("_position" as)
###                 ("\<^const>HOL.implies" ("\<^fixed>Exit") ("_position" n')))
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" sourcenodes)
###                   ("_position" as))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>postdominate" ("_position" n') ("_position" n))
###   ("\<^const>HOL.conj" ("_applC" ("_position" valid_node) ("_position" n))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" valid_node) ("_position" n'))
###       ("\<^const>HOL.All_binder" ("_position" as)
###         ("\<^const>Set.member"
###           ("\<^const>local.path" ("_position" n) ("_position" as)
###             ("\<^const>HOL.implies" ("\<^fixed>Exit") ("_position" n')))
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" sourcenodes) ("_position" as))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 15 of "$AFP/Slicing/Basic/DynDataDependence.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>List.list.Cons"
###       ("\<^const>local.dyn_data_dependence" ("_position" n) ("_position" V)
###         ("_position" n') ("_position" a))
###       ("_position" as)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" sourcenode) ("_position" a))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.dyn_data_dependence" ("_position" n) ("_position" V)
###       ("_position" n')
###       ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" sourcenode) ("_position" a))
###       ("_position" n))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 20 of "$AFP/Slicing/Basic/DynDataDependence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>List.list.Cons"
###     ("\<^const>local.dyn_data_dependence" ("_position" n) ("_position" V)
###       ("_position" n') ("_position" a))
###     ("_position" as)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.dyn_data_dependence" ("_position" n) ("_position" V)
###     ("_position" n')
###     ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 34 of "$AFP/Slicing/Basic/DynDataDependence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>List.list.Cons"
###     ("\<^const>local.dyn_data_dependence" ("_position" n) ("_position" V)
###       ("_position" n') ("_position" a))
###     ("_position" as)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.dyn_data_dependence" ("_position" n) ("_position" V)
###     ("_position" n')
###     ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Slicing.DynDataDependence"
### 0.066s elapsed time, 0.270s cpu time, 0.000s GC time
Loading theory "Slicing.DataDependence" (required by "Draft.LiftingIntraMoreTemplates" via "Draft.LiftingIntra" via "Draft.NonInterferenceIntra" via "Slicing.Slice")
### Ambiguous input (line 182 of "$AFP/Slicing/Basic/Postdomination.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.postdominate" ("\<^fixed>Exit")
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n))
###       ("\<^const>HOL.Trueprop" ("_position" False)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.postdominate" ("\<^fixed>Exit") ("_position" n)))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 214 of "$AFP/Slicing/Basic/Postdomination.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Not"
###     ("_applC"
###       ("\<^const>local.postdominate" ("_position" n)
###         ("_position" targetnode))
###       ("_position" ax))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Not"
###     ("\<^const>local.postdominate" ("_position" n)
###       ("_applC" ("_position" targetnode) ("_position" ax)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale CFG_wf
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
  assumes
    "CFG_wf sourcenode targetnode kind valid_edge (_Entry_) Def Use
      state_val"
### Ambiguous input (line 9 of "$AFP/Slicing/StaticIntra/DataDependence.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.dyn_data_dependence"
###     ("\<^fixed>data_dependence" ("_position" n) ("_position" V)
###       ("\<^const>Pure.eq" ("_position" n')
###         ("\<^const>HOL.Ex_binder" ("_position" as) ("_position" n))))
###     ("_position" V) ("_position" n') ("_position" as)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.dyn_data_dependence" ("_position" n) ("_position" V)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("\<^const>HOL.Ex_binder" ("_position" as)
###         ("\<^fixed>data_dependence" ("_position" n) ("_position" V)
###           ("_position" n'))))
###     ("_position" as)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>data_dependence" ("_position" n) ("_position" V)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("\<^const>HOL.Ex_binder" ("_position" as)
###         ("\<^const>local.dyn_data_dependence" ("_position" n)
###           ("_position" V) ("_position" n') ("_position" as))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>data_dependence" ("_position" n) ("_position" V)
###     ("_position" n'))
###   ("\<^const>HOL.Ex_binder" ("_position" as)
###     ("\<^const>local.dyn_data_dependence" ("_position" n) ("_position" V)
###       ("_position" n') ("_position" as))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 11 of "$AFP/Slicing/StaticIntra/DataDependence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.data_dependence" ("_position" n) ("_position" V)
###     ("\<^const>HOL.eq" ("_position" n')
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a') ("_position" as'))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" V)
###             ("_applC" ("_position" Def) ("_position" n)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" V)
###               ("_applC" ("_position" Use) ("_position" n')))
###             ("\<^const>HOL.conj"
###               ("\<^const>local.path" ("_position" n)
###                 ("\<^const>List.list.Cons" ("_position" a')
###                   ("_position" as'))
###                 ("_position" n'))
###               ("_Ball" ("_position" n'')
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" sourcenodes) ("_position" as')))
###                 ("\<^const>Set.not_member" ("_position" V)
###                   ("_applC" ("_position" Def) ("_position" n'')))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.data_dependence" ("_position" n) ("_position" V)
###       ("_position" n'))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a') ("_position" as'))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" V)
###           ("_applC" ("_position" Def) ("_position" n)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" V)
###             ("_applC" ("_position" Use) ("_position" n')))
###           ("\<^const>HOL.conj"
###             ("\<^const>local.path" ("_position" n)
###               ("\<^const>List.list.Cons" ("_position" a') ("_position" as'))
###               ("_position" n'))
###             ("_Ball" ("_position" n'')
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" sourcenodes) ("_position" as')))
###               ("\<^const>Set.not_member" ("_position" V)
###                 ("_applC" ("_position" Def) ("_position" n''))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Slicing.DataDependence"
### 0.059s elapsed time, 0.227s cpu time, 0.000s GC time
Loading theory "Slicing.Distance" (required by "Draft.LiftingIntraMoreTemplates" via "Draft.LiftingIntra" via "Draft.NonInterferenceIntra" via "Slicing.Slice")
locale CFGExit_wf
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes
    "CFGExit_wf sourcenode targetnode kind valid_edge (_Entry_) Def Use
      state_val (_Exit_)"
locale StrongPostdomination
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes
    "StrongPostdomination sourcenode targetnode kind valid_edge (_Entry_)
      (_Exit_)"
### theory "Slicing.CFGExit_wf"
### 0.203s elapsed time, 0.800s cpu time, 0.088s GC time
Loading theory "Slicing.Observable" (required by "Draft.LiftingIntraMoreTemplates" via "Draft.LiftingIntra" via "Draft.NonInterferenceIntra" via "Slicing.Slice")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Ambiguous input (line 334 of "$AFP/Slicing/Basic/Postdomination.thy") produces 20 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>strong_postdominate" ("_position" n')
###     ("\<^const>Pure.eq" ("_position" n)
###       ("\<^const>HOL.conj"
###         ("\<^const>local.postdominate" ("_position" n') ("_position" n))
###         ("_Ex_greater_eq" ("_position" k) ("\<^const>Groups.one_class.one")
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" as) ("_position" nx))
###             ("\<^const>Set.member"
###               ("\<^const>local.path" ("_position" n) ("_position" as)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.conj" ("_position" nx)
###                     ("\<^const>Orderings.ord_class.greater_eq"
###                       ("_applC" ("_position" length) ("_position" as))
###                       ("_position" k)))
###                   ("_position" n')))
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" sourcenodes)
###                   ("_position" as))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>strong_postdominate" ("_position" n') ("_position" n))
###   ("\<^const>HOL.conj"
###     ("\<^const>local.postdominate" ("_position" n') ("_position" n))
###     ("_Ex_greater_eq" ("_position" k) ("\<^const>Groups.one_class.one")
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" as) ("_position" nx))
###         ("\<^const>Set.member"
###           ("\<^const>local.path" ("_position" n) ("_position" as)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj" ("_position" nx)
###                 ("\<^const>Orderings.ord_class.greater_eq"
###                   ("_applC" ("_position" length) ("_position" as))
###                   ("_position" k)))
###               ("_position" n')))
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" sourcenodes) ("_position" as))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>strong_postdominate" ("_position" n')
###     ("\<^const>Pure.eq" ("_position" n)
###       ("\<^const>local.postdominate" ("_position" n')
###         ("\<^const>HOL.conj" ("_position" n)
###           ("_Ex_greater_eq" ("_position" k)
###             ("\<^const>Groups.one_class.one")
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" as) ("_position" nx))
###               ("\<^const>Set.member"
###                 ("\<^const>local.path" ("_position" n) ("_position" as)
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.conj" ("_position" nx)
###                       ("\<^const>Orderings.ord_class.greater_eq"
###                         ("_applC" ("_position" length) ("_position" as))
###                         ("_position" k)))
###                     ("_position" n')))
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" sourcenodes)
###                     ("_position" as)))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>strong_postdominate" ("_position" n') ("_position" n))
###   ("\<^const>local.postdominate" ("_position" n')
###     ("\<^const>HOL.conj" ("_position" n)
###       ("_Ex_greater_eq" ("_position" k) ("\<^const>Groups.one_class.one")
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" as) ("_position" nx))
###           ("\<^const>Set.member"
###             ("\<^const>local.path" ("_position" n) ("_position" as)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj" ("_position" nx)
###                   ("\<^const>Orderings.ord_class.greater_eq"
###                     ("_applC" ("_position" length) ("_position" as))
###                     ("_position" k)))
###                 ("_position" n')))
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" sourcenodes) ("_position" as)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>strong_postdominate" ("_position" n')
###     ("\<^const>Pure.eq" ("_position" n)
###       ("\<^const>HOL.conj"
###         ("\<^const>local.postdominate" ("_position" n') ("_position" n))
###         ("_Ex_greater_eq" ("_position" k) ("\<^const>Groups.one_class.one")
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" as) ("_position" nx))
###             ("\<^const>local.path" ("_position" n) ("_position" as)
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj" ("_position" nx)
###                   ("\<^const>Orderings.ord_class.greater_eq"
###                     ("_applC" ("_position" length) ("_position" as))
###                     ("_position" k)))
###                 ("\<^const>Set.member" ("_position" n')
###                   ("_applC" ("_position" set)
###                     ("_applC" ("_position" sourcenodes)
###                       ("_position" as))))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>strong_postdominate" ("_position" n') ("_position" n))
###   ("\<^const>HOL.conj"
###     ("\<^const>local.postdominate" ("_position" n') ("_position" n))
###     ("_Ex_greater_eq" ("_position" k) ("\<^const>Groups.one_class.one")
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" as) ("_position" nx))
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.conj" ("_position" nx)
###               ("\<^const>Orderings.ord_class.greater_eq"
###                 ("_applC" ("_position" length) ("_position" as))
###                 ("_position" k)))
###             ("\<^const>Set.member" ("_position" n')
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" sourcenodes)
###                   ("_position" as))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>strong_postdominate" ("_position" n')
###     ("\<^const>Pure.eq" ("_position" n)
###       ("\<^const>local.postdominate" ("_position" n')
###         ("\<^const>HOL.conj" ("_position" n)
###           ("_Ex_greater_eq" ("_position" k)
###             ("\<^const>Groups.one_class.one")
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" as) ("_position" nx))
###               ("\<^const>local.path" ("_position" n) ("_position" as)
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.conj" ("_position" nx)
###                     ("\<^const>Orderings.ord_class.greater_eq"
###                       ("_applC" ("_position" length) ("_position" as))
###                       ("_position" k)))
###                   ("\<^const>Set.member" ("_position" n')
###                     ("_applC" ("_position" set)
###                       ("_applC" ("_position" sourcenodes)
###                         ("_position" as)))))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>strong_postdominate" ("_position" n') ("_position" n))
###   ("\<^const>local.postdominate" ("_position" n')
###     ("\<^const>HOL.conj" ("_position" n)
###       ("_Ex_greater_eq" ("_position" k) ("\<^const>Groups.one_class.one")
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" as) ("_position" nx))
###           ("\<^const>local.path" ("_position" n) ("_position" as)
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj" ("_position" nx)
###                 ("\<^const>Orderings.ord_class.greater_eq"
###                   ("_applC" ("_position" length) ("_position" as))
###                   ("_position" k)))
###               ("\<^const>Set.member" ("_position" n')
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" sourcenodes)
###                     ("_position" as)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>strong_postdominate" ("_position" n')
###     ("\<^const>Pure.eq" ("_position" n)
###       ("\<^const>HOL.conj"
###         ("\<^const>local.postdominate" ("_position" n') ("_position" n))
###         ("_Ex_greater_eq" ("_position" k) ("\<^const>Groups.one_class.one")
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" as) ("_position" nx))
###             ("\<^const>HOL.implies"
###               ("\<^const>local.path" ("_position" n) ("_position" as)
###                 ("\<^const>HOL.conj" ("_position" nx)
###                   ("\<^const>Orderings.ord_class.greater_eq"
###                     ("_applC" ("_position" length) ("_position" as))
###                     ("_position" k))))
###               ("\<^const>Set.member" ("_position" n')
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" sourcenodes)
###                     ("_position" as)))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>strong_postdominate" ("_position" n') ("_position" n))
###   ("\<^const>HOL.conj"
###     ("\<^const>local.postdominate" ("_position" n') ("_position" n))
###     ("_Ex_greater_eq" ("_position" k) ("\<^const>Groups.one_class.one")
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" as) ("_position" nx))
###         ("\<^const>HOL.implies"
###           ("\<^const>local.path" ("_position" n) ("_position" as)
###             ("\<^const>HOL.conj" ("_position" nx)
###               ("\<^const>Orderings.ord_class.greater_eq"
###                 ("_applC" ("_position" length) ("_position" as))
###                 ("_position" k))))
###           ("\<^const>Set.member" ("_position" n')
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" sourcenodes) ("_position" as)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale CFG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
  assumes "CFG sourcenode targetnode valid_edge (_Entry_)"
### Ambiguous input (line 37 of "$AFP/Slicing/StaticIntra/Distance.thy") produces 3 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" as))
###           ("_position" x)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" as')
###             ("\<^const>HOL.implies"
###               ("\<^const>local.path" ("_position" n) ("_position" as')
###                 ("_position" n'))
###               ("\<^const>Orderings.ord_class.less_eq" ("_position" x)
###                 ("_applC" ("_position" length) ("_position" as')))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distance)
###       ("_cargs" ("_position" n)
###         ("_cargs" ("_position" n') ("_position" x))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" as))
###           ("_position" x)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" as')
###             ("\<^const>local.path" ("_position" n) ("_position" as')
###               ("\<^const>HOL.implies" ("_position" n')
###                 ("\<^const>Orderings.ord_class.less_eq" ("_position" x)
###                   ("_applC" ("_position" length) ("_position" as'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distance)
###       ("_cargs" ("_position" n)
###         ("_cargs" ("_position" n') ("_position" x))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" as))
###           ("_position" x)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" as')
###             ("\<^const>Orderings.ord_class.less_eq"
###               ("\<^const>local.path" ("_position" n) ("_position" as')
###                 ("\<^const>HOL.implies" ("_position" n') ("_position" x)))
###               ("_applC" ("_position" length) ("_position" as'))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distance)
###       ("_cargs" ("_position" n)
###         ("_cargs" ("_position" n') ("_position" x))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 341 of "$AFP/Slicing/Basic/Postdomination.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" as) ("_position" nx))
###     ("\<^const>Set.member"
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj" ("_position" nx)
###             ("\<^const>Orderings.ord_class.greater_eq"
###               ("_applC" ("_position" length) ("_position" as))
###               ("_position" k)))
###           ("_position" n')))
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" sourcenodes) ("_position" as))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" as) ("_position" nx))
###     ("\<^const>local.path" ("_position" n) ("_position" as)
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj" ("_position" nx)
###           ("\<^const>Orderings.ord_class.greater_eq"
###             ("_applC" ("_position" length) ("_position" as))
###             ("_position" k)))
###         ("\<^const>Set.member" ("_position" n')
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" sourcenodes) ("_position" as))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" as) ("_position" nx))
###     ("\<^const>HOL.implies"
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("\<^const>HOL.conj" ("_position" nx)
###           ("\<^const>Orderings.ord_class.greater_eq"
###             ("_applC" ("_position" length) ("_position" as))
###             ("_position" k))))
###       ("\<^const>Set.member" ("_position" n')
###         ("_applC" ("_position" set)
###           ("_applC" ("_position" sourcenodes) ("_position" as)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" as) ("_position" nx))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" nx))
###         ("\<^const>Orderings.ord_class.greater_eq"
###           ("_applC" ("_position" length) ("_position" as)) ("_position" k)))
###       ("\<^const>Set.member" ("_position" n')
###         ("_applC" ("_position" set)
###           ("_applC" ("_position" sourcenodes) ("_position" as)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" as) ("_position" nx))
###     ("\<^const>HOL.implies"
###       ("\<^const>Orderings.ord_class.greater_eq"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("\<^const>HOL.conj" ("_position" nx)
###             ("_applC" ("_position" length) ("_position" as))))
###         ("_position" k))
###       ("\<^const>Set.member" ("_position" n')
###         ("_applC" ("_position" set)
###           ("_applC" ("_position" sourcenodes) ("_position" as)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "distance"
locale CFG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
  assumes "CFG sourcenode targetnode valid_edge (_Entry_)"
  Proving monotonicity ...
Proofs for inductive predicate(s) "obsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "Slicing.Distance"
### 0.107s elapsed time, 0.422s cpu time, 0.061s GC time
Loading theory "Slicing.SemanticsCFG" (required by "Draft.LiftingIntraMoreTemplates" via "Draft.LiftingIntra" via "Draft.NonInterferenceIntra" via "Slicing.Slice")
### theory "Slicing.Postdomination"
### 0.295s elapsed time, 1.167s cpu time, 0.148s GC time
Loading theory "Slicing.DynStandardControlDependence" (required by "Draft.LiftingIntraMoreTemplates" via "Draft.LiftingIntra" via "Slicing.CDepInstantiations" via "Slicing.PDG" via "Slicing.StandardControlDependence")
### theory "Slicing.Observable"
### 0.137s elapsed time, 0.547s cpu time, 0.061s GC time
Loading theory "Slicing.DynWeakControlDependence" (required by "Draft.LiftingIntraMoreTemplates" via "Draft.LiftingIntra" via "Slicing.CDepInstantiations" via "Slicing.PDG" via "Slicing.WeakControlDependence")
### Ambiguous input (line 13 of "$AFP/Slicing/Basic/SemanticsCFG.thy") produces 6 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_position" s) ("_position" c')
###           ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^fixed>identifies"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("\<^const>HOL.conj" ("_position" n')
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" transfers)
###                   ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                     ("_position" s)))
###                 ("_position" s'))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" preds)
###                   ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                     ("_position" s)))
###                 ("_position" n')))))
###         ("_position" c')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_position" s) ("_position" c')
###           ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("\<^const>HOL.conj" ("_position" n')
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" transfers)
###                   ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                     ("_position" s)))
###                 ("_position" s'))
###               ("_applC" ("_position" preds)
###                 ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                   ("_position" s))))))
###         ("\<^fixed>identifies" ("_position" n') ("_position" c'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_position" s) ("_position" c')
###           ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("\<^const>HOL.conj" ("_position" n')
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" transfers)
###                 ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                   ("_position" s)))
###               ("_position" s'))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" preds)
###                 ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                   ("_position" s)))
###               ("\<^fixed>identifies" ("_position" n')
###                 ("_position" c')))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_position" s) ("_position" c')
###           ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" transfers)
###               ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                 ("_position" s)))
###             ("_position" s'))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" preds)
###               ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                 ("_position" s)))
###             ("\<^fixed>identifies" ("_position" n') ("_position" c'))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_position" s) ("_position" c')
###           ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("\<^const>HOL.conj" ("_position" n')
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" transfers)
###                 ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                   ("_position" s)))
###               ("_position" s'))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" preds)
###             ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###               ("_position" s)))
###           ("\<^fixed>identifies" ("_position" n') ("_position" c')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_position" s) ("_position" c')
###           ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("\<^const>local.path" ("_position" n) ("_position" as)
###             ("\<^const>HOL.conj" ("_position" n')
###               ("_applC" ("_position" transfers)
###                 ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                   ("_position" s)))))
###           ("_position" s'))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" preds)
###             ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###               ("_position" s)))
###           ("\<^fixed>identifies" ("_position" n') ("_position" c')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale Postdomination
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes
    "Postdomination sourcenode targetnode kind valid_edge (_Entry_)
      (_Exit_)"
locale CFG_semantics_wf
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and
    sem :: "'com => 'state => 'com => 'state => bool"
      (\<open>((1\<langle>_,/_\<rangle>) \<Rightarrow>/ (1\<langle>_,/_\<rangle>))\<close>
        [0, 0, 0, 0] 81)
    and
    identifies :: "'node => 'com => bool"
      (\<open>_ \<triangleq> _\<close> [51, 0] 80)
  assumes
    "CFG_semantics_wf sourcenode targetnode kind valid_edge (_Entry_) sem
      identifies"
### theory "Slicing.SemanticsCFG"
### 0.071s elapsed time, 0.287s cpu time, 0.000s GC time
Loading theory "Slicing.Slice" (required by "Draft.LiftingIntraMoreTemplates" via "Draft.LiftingIntra" via "Draft.NonInterferenceIntra")
### Ambiguous input (line 30 of "$AFP/Slicing/Basic/DynStandardControlDependence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.dyn_standard_control_dependence" ("_position" n)
###       ("_position" n') ("_position" as))
###     ("\<^const>HOL.conj"
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("_position" n'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" n'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Not"
###             ("\<^const>local.postdominate" ("_position" n')
###               ("_position" n)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.not_member" ("_position" n')
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" sourcenodes) ("_position" as))))
###             ("_Ball" ("_position" n'')
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" targetnodes) ("_position" as)))
###               ("\<^const>local.postdominate" ("_position" n')
###                 ("_position" n'')))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.dyn_standard_control_dependence" ("_position" n)
###     ("_position" n')
###     ("\<^const>HOL.eq" ("_position" as)
###       ("\<^const>HOL.conj"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.not_equal" ("_position" n) ("_position" n'))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.Not"
###               ("\<^const>local.postdominate" ("_position" n')
###                 ("_position" n)))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.not_member" ("_position" n')
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" sourcenodes) ("_position" as))))
###               ("_Ball" ("_position" n'')
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" targetnodes) ("_position" as)))
###                 ("\<^const>local.postdominate" ("_position" n')
###                   ("_position" n''))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale StrongPostdomination
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes
    "StrongPostdomination sourcenode targetnode kind valid_edge (_Entry_)
      (_Exit_)"
### Ambiguous input (line 217 of "$AFP/Slicing/Basic/DynStandardControlDependence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" ax) ("_position" ax'))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" ax)
###           ("_applC" ("_position" set) ("_position" as')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" ax))
###             ("_applC" ("_position" sourcenode) ("_position" ax')))
###           ("_applC" ("_position" valid_edge) ("_position" ax'))))
###       ("_applC"
###         ("\<^const>local.postdominate" ("_position" n)
###           ("_position" targetnode))
###         ("_position" ax')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" ax) ("_position" ax'))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" ax)
###           ("_applC" ("_position" set) ("_position" as')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" ax))
###             ("_applC" ("_position" sourcenode) ("_position" ax')))
###           ("_applC" ("_position" valid_edge) ("_position" ax'))))
###       ("\<^const>local.postdominate" ("_position" n)
###         ("_applC" ("_position" targetnode) ("_position" ax'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 219 of "$AFP/Slicing/Basic/DynStandardControlDependence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>List.list.Cons"
###     ("\<^const>local.dyn_standard_control_dependence" ("_position" n')
###       ("_position" n) ("_position" a))
###     ("_position" as')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.dyn_standard_control_dependence" ("_position" n')
###     ("_position" n)
###     ("\<^const>List.list.Cons" ("_position" a) ("_position" as'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Slicing.DynWeakControlDependence"
### 0.071s elapsed time, 0.276s cpu time, 0.000s GC time
Loading theory "Slicing.WeakControlDependence" (required by "Draft.LiftingIntraMoreTemplates" via "Draft.LiftingIntra" via "Slicing.CDepInstantiations" via "Slicing.PDG")
### theory "Slicing.DynStandardControlDependence"
### 0.131s elapsed time, 0.514s cpu time, 0.070s GC time
Loading theory "Slicing.StandardControlDependence" (required by "Draft.LiftingIntraMoreTemplates" via "Draft.LiftingIntra" via "Slicing.CDepInstantiations" via "Slicing.PDG")
locale StrongPostdomination
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes
    "StrongPostdomination sourcenode targetnode kind valid_edge (_Entry_)
      (_Exit_)"
locale Postdomination
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes
    "Postdomination sourcenode targetnode kind valid_edge (_Entry_)
      (_Exit_)"
### Ambiguous input (line 14 of "$AFP/Slicing/StaticIntra/WeakControlDependence.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>weak_control_dependence" ("_position" n)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("\<^const>HOL.Ex_binder" ("_position" as)
###         ("\<^const>local.dyn_weak_control_dependence" ("_position" n)
###           ("_position" n') ("_position" as))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>weak_control_dependence" ("_position" n) ("_position" n'))
###   ("\<^const>HOL.Ex_binder" ("_position" as)
###     ("\<^const>local.dyn_weak_control_dependence" ("_position" n)
###       ("_position" n') ("_position" as))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.dyn_weak_control_dependence" ("_position" n)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("\<^const>HOL.Ex_binder" ("_position" as)
###         ("\<^fixed>weak_control_dependence" ("_position" n)
###           ("_position" n'))))
###     ("_position" as)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.dyn_weak_control_dependence"
###     ("\<^fixed>weak_control_dependence" ("_position" n)
###       ("\<^const>Pure.eq" ("_position" n')
###         ("\<^const>HOL.Ex_binder" ("_position" as) ("_position" n))))
###     ("_position" n') ("_position" as)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 14 of "$AFP/Slicing/StaticIntra/StandardControlDependence.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.dyn_standard_control_dependence"
###     ("\<^fixed>standard_control_dependence" ("_position" n)
###       ("\<^const>Pure.eq" ("_position" n')
###         ("\<^const>HOL.Ex_binder" ("_position" as) ("_position" n))))
###     ("_position" n') ("_position" as)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.dyn_standard_control_dependence" ("_position" n)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("\<^const>HOL.Ex_binder" ("_position" as)
###         ("\<^fixed>standard_control_dependence" ("_position" n)
###           ("_position" n'))))
###     ("_position" as)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>standard_control_dependence" ("_position" n)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("\<^const>HOL.Ex_binder" ("_position" as)
###         ("\<^const>local.dyn_standard_control_dependence" ("_position" n)
###           ("_position" n') ("_position" as))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>standard_control_dependence" ("_position" n) ("_position" n'))
###   ("\<^const>HOL.Ex_binder" ("_position" as)
###     ("\<^const>local.dyn_standard_control_dependence" ("_position" n)
###       ("_position" n') ("_position" as))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 16 of "$AFP/Slicing/StaticIntra/StandardControlDependence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.standard_control_dependence" ("_position" n)
###     ("\<^const>HOL.eq" ("_position" n')
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" a') ("_position" as)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" n')
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" sourcenodes)
###                 ("\<^const>List.list.Cons" ("_position" a)
###                   ("_position" as)))))
###           ("\<^const>HOL.conj"
###             ("\<^const>local.path" ("_position" n)
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" as))
###               ("_position" n'))
###             ("\<^const>HOL.conj"
###               ("\<^const>local.postdominate" ("_position" n')
###                 ("_applC" ("_position" targetnode) ("_position" a)))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" valid_edge) ("_position" a'))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" sourcenode) ("_position" a'))
###                     ("_position" n))
###                   ("\<^const>HOL.Not"
###                     ("\<^const>local.postdominate" ("_position" n')
###                       ("_applC" ("_position" targetnode)
###                         ("_position" a')))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.standard_control_dependence" ("_position" n)
###       ("_position" n'))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a) ("_idts" ("_position" a') ("_position" as)))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" n')
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" sourcenodes)
###               ("\<^const>List.list.Cons" ("_position" a)
###                 ("_position" as)))))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.path" ("_position" n)
###             ("\<^const>List.list.Cons" ("_position" a) ("_position" as))
###             ("_position" n'))
###           ("\<^const>HOL.conj"
###             ("\<^const>local.postdominate" ("_position" n')
###               ("_applC" ("_position" targetnode) ("_position" a)))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" valid_edge) ("_position" a'))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" sourcenode) ("_position" a'))
###                   ("_position" n))
###                 ("\<^const>HOL.Not"
###                   ("\<^const>local.postdominate" ("_position" n')
###                     ("_applC" ("_position" targetnode)
###                       ("_position" a'))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 17 of "$AFP/Slicing/StaticIntra/WeakControlDependence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.weak_control_dependence" ("_position" n)
###     ("\<^const>HOL.eq" ("_position" n')
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" a') ("_position" as)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" n')
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" sourcenodes)
###                 ("\<^const>List.list.Cons" ("_position" a)
###                   ("_position" as)))))
###           ("\<^const>HOL.conj"
###             ("\<^const>local.path" ("_position" n)
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" as))
###               ("_position" n'))
###             ("\<^const>HOL.conj"
###               ("\<^const>local.strong_postdominate" ("_position" n')
###                 ("_applC" ("_position" targetnode) ("_position" a)))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" valid_edge) ("_position" a'))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" sourcenode) ("_position" a'))
###                     ("_position" n))
###                   ("\<^const>HOL.Not"
###                     ("\<^const>local.strong_postdominate" ("_position" n')
###                       ("_applC" ("_position" targetnode)
###                         ("_position" a')))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.weak_control_dependence" ("_position" n)
###       ("_position" n'))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a) ("_idts" ("_position" a') ("_position" as)))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.not_member" ("_position" n')
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" sourcenodes)
###               ("\<^const>List.list.Cons" ("_position" a)
###                 ("_position" as)))))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.path" ("_position" n)
###             ("\<^const>List.list.Cons" ("_position" a) ("_position" as))
###             ("_position" n'))
###           ("\<^const>HOL.conj"
###             ("\<^const>local.strong_postdominate" ("_position" n')
###               ("_applC" ("_position" targetnode) ("_position" a)))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" valid_edge) ("_position" a'))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" sourcenode) ("_position" a'))
###                   ("_position" n))
###                 ("\<^const>HOL.Not"
###                   ("\<^const>local.strong_postdominate" ("_position" n')
###                     ("_applC" ("_position" targetnode)
###                       ("_position" a'))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 25 of "$AFP/Slicing/StaticIntra/StandardControlDependence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.standard_control_dependence" ("_position" n)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("\<^fixed>Exit"))
###       ("\<^const>HOL.Trueprop" ("_position" False)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.standard_control_dependence" ("_position" n)
###       ("\<^fixed>Exit")))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 26 of "$AFP/Slicing/StaticIntra/WeakControlDependence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.weak_control_dependence" ("_position" n)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("\<^fixed>Exit"))
###       ("\<^const>HOL.Trueprop" ("_position" False)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.weak_control_dependence" ("_position" n)
###       ("\<^fixed>Exit")))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Slicing.WeakControlDependence"
### 0.098s elapsed time, 0.385s cpu time, 0.070s GC time
Loading theory "Slicing.WeakOrderDependence" (required by "Draft.LiftingIntraMoreTemplates" via "Draft.LiftingIntra" via "Slicing.CDepInstantiations")
### Ambiguous input (line 31 of "$AFP/Slicing/StaticIntra/StandardControlDependence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.standard_control_dependence" ("_position" n)
###     ("\<^const>HOL.eq" ("_position" n')
###       ("\<^const>HOL.Ex_binder" ("_position" as)
###         ("\<^const>HOL.conj"
###           ("\<^const>local.path" ("_position" n) ("_position" as)
###             ("_position" n'))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" n) ("_position" n'))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.Not"
###                 ("\<^const>local.postdominate" ("_position" n')
###                   ("_position" n)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.not_member" ("_position" n')
###                   ("_applC" ("_position" set)
###                     ("_applC" ("_position" sourcenodes) ("_position" as))))
###                 ("_Ball" ("_position" n'')
###                   ("_applC" ("_position" set)
###                     ("_applC" ("_position" targetnodes) ("_position" as)))
###                   ("\<^const>local.postdominate" ("_position" n')
###                     ("_position" n'')))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.standard_control_dependence" ("_position" n)
###       ("_position" n'))
###     ("\<^const>HOL.Ex_binder" ("_position" as)
###       ("\<^const>HOL.conj"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.not_equal" ("_position" n) ("_position" n'))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.Not"
###               ("\<^const>local.postdominate" ("_position" n')
###                 ("_position" n)))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.not_member" ("_position" n')
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" sourcenodes) ("_position" as))))
###               ("_Ball" ("_position" n'')
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" targetnodes) ("_position" as)))
###                 ("\<^const>local.postdominate" ("_position" n')
###                   ("_position" n''))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Slicing.StandardControlDependence"
### 0.083s elapsed time, 0.323s cpu time, 0.000s GC time
Loading theory "Slicing.PDG" (required by "Draft.LiftingIntraMoreTemplates" via "Draft.LiftingIntra" via "Slicing.CDepInstantiations")
### Ambiguous input (line 11 of "$AFP/Slicing/StaticIntra/WeakOrderDependence.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>weak_order_dependence" ("_position" n) ("_position" n\<^sub>1)
###     ("\<^const>Pure.eq" ("_position" n\<^sub>2)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.not_equal" ("_position" n\<^sub>1)
###           ("_position" n\<^sub>2))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Ex_binder" ("_position" as)
###             ("\<^const>HOL.conj"
###               ("\<^const>local.path" ("_position" n) ("_position" as)
###                 ("_position" n\<^sub>1))
###               ("\<^const>Set.not_member" ("_position" n\<^sub>2)
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" sourcenodes) ("_position" as))))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.Ex_binder" ("_position" as)
###               ("\<^const>HOL.conj"
###                 ("\<^const>local.path" ("_position" n) ("_position" as)
###                   ("_position" n\<^sub>2))
###                 ("\<^const>Set.not_member" ("_position" n\<^sub>1)
###                   ("_applC" ("_position" set)
###                     ("_applC" ("_position" sourcenodes)
###                       ("_position" as))))))
###             ("\<^const>HOL.Ex_binder" ("_position" a)
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" valid_edge) ("_position" a))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq" ("_position" n)
###                     ("_applC" ("_position" sourcenode) ("_position" a)))
###                   ("\<^const>HOL.disj"
###                     ("\<^const>HOL.Ex_binder" ("_position" as)
###                       ("\<^const>HOL.conj"
###                         ("\<^const>local.path"
###                           ("_applC" ("_position" targetnode)
###                             ("_position" a))
###                           ("_position" as) ("_position" n\<^sub>1))
###                         ("\<^const>HOL.All_binder" ("_position" as')
###                           ("\<^const>HOL.implies"
###                             ("\<^const>local.path"
###                               ("_applC" ("_position" targetnode)
###                                 ("_position" a))
###                               ("_position" as') ("_position" n\<^sub>2))
###                             ("\<^const>Set.member" ("_position" n\<^sub>1)
###                               ("_applC" ("_position" set)
###                                 ("_applC" ("_position" sourcenodes)
###                                   ("_position" as'))))))))
###                     ("\<^const>HOL.Ex_binder" ("_position" as)
###                       ("\<^const>HOL.conj"
###                         ("\<^const>local.path"
###                           ("_applC" ("_position" targetnode)
###                             ("_position" a))
###                           ("_position" as) ("_position" n\<^sub>2))
###                         ("\<^const>HOL.All_binder" ("_position" as')
###                           ("\<^const>HOL.implies"
###                             ("\<^const>local.path"
###                               ("_applC" ("_position" targetnode)
###                                 ("_position" a))
###                               ("_position" as') ("_position" n\<^sub>1))
###                             ("\<^const>Set.member" ("_position" n\<^sub>2)
###                               ("_applC" ("_position" set)
###                                 ("_applC" ("_position" sourcenodes)
###                                   ("_position" as'))))))))))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>weak_order_dependence" ("_position" n) ("_position" n\<^sub>1)
###     ("_position" n\<^sub>2))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.not_equal" ("_position" n\<^sub>1)
###       ("_position" n\<^sub>2))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.Ex_binder" ("_position" as)
###         ("\<^const>HOL.conj"
###           ("\<^const>local.path" ("_position" n) ("_position" as)
###             ("_position" n\<^sub>1))
###           ("\<^const>Set.not_member" ("_position" n\<^sub>2)
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" sourcenodes) ("_position" as))))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.Ex_binder" ("_position" as)
###           ("\<^const>HOL.conj"
###             ("\<^const>local.path" ("_position" n) ("_position" as)
###               ("_position" n\<^sub>2))
###             ("\<^const>Set.not_member" ("_position" n\<^sub>1)
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" sourcenodes) ("_position" as))))))
###         ("\<^const>HOL.Ex_binder" ("_position" a)
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" valid_edge) ("_position" a))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("_applC" ("_position" sourcenode) ("_position" a)))
###               ("\<^const>HOL.disj"
###                 ("\<^const>HOL.Ex_binder" ("_position" as)
###                   ("\<^const>HOL.conj"
###                     ("\<^const>local.path"
###                       ("_applC" ("_position" targetnode) ("_position" a))
###                       ("_position" as) ("_position" n\<^sub>1))
###                     ("\<^const>HOL.All_binder" ("_position" as')
###                       ("\<^const>HOL.implies"
###                         ("\<^const>local.path"
###                           ("_applC" ("_position" targetnode)
###                             ("_position" a))
###                           ("_position" as') ("_position" n\<^sub>2))
###                         ("\<^const>Set.member" ("_position" n\<^sub>1)
###                           ("_applC" ("_position" set)
###                             ("_applC" ("_position" sourcenodes)
###                               ("_position" as'))))))))
###                 ("\<^const>HOL.Ex_binder" ("_position" as)
###                   ("\<^const>HOL.conj"
###                     ("\<^const>local.path"
###                       ("_applC" ("_position" targetnode) ("_position" a))
###                       ("_position" as) ("_position" n\<^sub>2))
###                     ("\<^const>HOL.All_binder" ("_position" as')
###                       ("\<^const>HOL.implies"
###                         ("\<^const>local.path"
###                           ("_applC" ("_position" targetnode)
###                             ("_position" a))
###                           ("_position" as') ("_position" n\<^sub>1))
###                         ("\<^const>Set.member" ("_position" n\<^sub>2)
###                           ("_applC" ("_position" set)
###                             ("_applC" ("_position" sourcenodes)
###                               ("_position" as'))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "wod_backward_slicep"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "Slicing.WeakOrderDependence"
### 0.187s elapsed time, 0.742s cpu time, 0.046s GC time
locale BackwardSlice
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
    and backward_slice :: "'node set => 'node set"
  assumes
    "BackwardSlice sourcenode targetnode kind valid_edge (_Entry_) Def Use
      state_val backward_slice"
### theory "HOL-Library.Tree"
### 2.222s elapsed time, 8.476s cpu time, 1.253s GC time
Loading theory "Draft.Templates" (required by "Draft.LiftingIntraMoreTemplates" via "Draft.ExtrEqs")
### Ambiguous input (line 19 of "$AFP/Slicing/StaticIntra/PDG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>control_dependence" ("_position" n)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n') ("\<^fixed>Exit"))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>control_dependence" ("_position" n) ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" n') ("\<^fixed>Exit"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.not_equal"
###     ("\<^fixed>control_dependence" ("_position" n)
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop" ("_position" n'))))
###     ("\<^fixed>Exit")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 21 of "$AFP/Slicing/StaticIntra/PDG.thy") produces 10 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.not_equal"
###     ("\<^fixed>control_dependence" ("_position" n)
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Ex_binder" ("_position" as)
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" CFG.path)
###                 ("_cargs" ("_position" sourcenode)
###                   ("_cargs" ("_position" targetnode)
###                     ("_cargs" ("_position" valid_edge)
###                       ("_cargs" ("_position" n)
###                         ("_cargs" ("_position" as) ("_position" n')))))))
###               ("_position" as))))))
###     ("\<^const>List.list.Nil")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^fixed>control_dependence" ("_position" n)
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Ex_binder" ("_position" as)
###             ("_applC" ("_position" CFG.path)
###               ("_cargs" ("_position" sourcenode)
###                 ("_cargs" ("_position" targetnode)
###                   ("_cargs" ("_position" valid_edge)
###                     ("_cargs" ("_position" n)
###                       ("_cargs" ("_position" as) ("_position" n')))))))))))
###     ("\<^const>HOL.not_equal" ("_position" as) ("\<^const>List.list.Nil"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>control_dependence" ("_position" n)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Ex_binder" ("_position" as)
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" CFG.path)
###               ("_cargs" ("_position" sourcenode)
###                 ("_cargs" ("_position" targetnode)
###                   ("_cargs" ("_position" valid_edge)
###                     ("_cargs" ("_position" n)
###                       ("_cargs" ("_position" as) ("_position" n')))))))
###             ("\<^const>HOL.not_equal" ("_position" as)
###               ("\<^const>List.list.Nil"))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>control_dependence" ("_position" n) ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" as)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" CFG.path)
###           ("_cargs" ("_position" sourcenode)
###             ("_cargs" ("_position" targetnode)
###               ("_cargs" ("_position" valid_edge)
###                 ("_cargs" ("_position" n)
###                   ("_cargs" ("_position" as) ("_position" n')))))))
###         ("\<^const>HOL.not_equal" ("_position" as)
###           ("\<^const>List.list.Nil"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("_applC"
###       ("\<^fixed>control_dependence" ("_position" n)
###         ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Ex_binder" ("_position" as)
###               ("_position" CFG.path)))))
###       ("_cargs" ("_position" sourcenode)
###         ("_cargs" ("_position" targetnode)
###           ("_cargs" ("_position" valid_edge)
###             ("_cargs" ("_position" n)
###               ("_cargs" ("_position" as) ("_position" n')))))))
###     ("\<^const>HOL.not_equal" ("_position" as) ("\<^const>List.list.Nil"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("_applC"
###       ("\<^fixed>control_dependence" ("_position" n)
###         ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Ex_binder" ("_position" as)
###               ("_applC" ("_position" CFG.path) ("_position" sourcenode))))))
###       ("_cargs" ("_position" targetnode)
###         ("_cargs" ("_position" valid_edge)
###           ("_cargs" ("_position" n)
###             ("_cargs" ("_position" as) ("_position" n'))))))
###     ("\<^const>HOL.not_equal" ("_position" as) ("\<^const>List.list.Nil"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("_applC"
###       ("\<^fixed>control_dependence" ("_position" n)
###         ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Ex_binder" ("_position" as)
###               ("_applC" ("_position" CFG.path)
###                 ("_cargs" ("_position" sourcenode)
###                   ("_position" targetnode)))))))
###       ("_cargs" ("_position" valid_edge)
###         ("_cargs" ("_position" n)
###           ("_cargs" ("_position" as) ("_position" n')))))
###     ("\<^const>HOL.not_equal" ("_position" as) ("\<^const>List.list.Nil"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("_applC"
###       ("\<^fixed>control_dependence" ("_position" n)
###         ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Ex_binder" ("_position" as)
###               ("_applC" ("_position" CFG.path)
###                 ("_cargs" ("_position" sourcenode)
###                   ("_cargs" ("_position" targetnode)
###                     ("_position" valid_edge))))))))
###       ("_cargs" ("_position" n)
###         ("_cargs" ("_position" as) ("_position" n'))))
###     ("\<^const>HOL.not_equal" ("_position" as) ("\<^const>List.list.Nil"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("_applC"
###       ("\<^fixed>control_dependence" ("_position" n)
###         ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Ex_binder" ("_position" as)
###               ("_applC" ("_position" CFG.path)
###                 ("_cargs" ("_position" sourcenode)
###                   ("_cargs" ("_position" targetnode)
###                     ("_cargs" ("_position" valid_edge)
###                       ("_position" n)))))))))
###       ("_cargs" ("_position" as) ("_position" n')))
###     ("\<^const>HOL.not_equal" ("_position" as) ("\<^const>List.list.Nil"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("_applC"
###       ("\<^fixed>control_dependence" ("_position" n)
###         ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Ex_binder" ("_position" as)
###               ("_applC" ("_position" CFG.path)
###                 ("_cargs" ("_position" sourcenode)
###                   ("_cargs" ("_position" targetnode)
###                     ("_cargs" ("_position" valid_edge)
###                       ("_cargs" ("_position" n) ("_position" as))))))))))
###       ("_position" n'))
###     ("\<^const>HOL.not_equal" ("_position" as) ("\<^const>List.list.Nil"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale PDG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
    and
    control_dependence :: "'node => 'node => bool"
      (\<open>_ controls _ \<close> [51, 0])
  assumes
    "PDG sourcenode targetnode kind valid_edge (_Entry_) Def Use state_val
      (_Exit_) control_dependence"
### Ambiguous input (line 35 of "$AFP/Slicing/StaticIntra/PDG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>cdep_edge" ("_position" n)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("_applC" ("_position" PDG_edge)
###         ("_cargs" ("_position" n)
###           ("_cargs" ("_position" None) ("_position" n')))))))
### ("\<^const>Pure.eq" ("\<^fixed>cdep_edge" ("_position" n) ("_position" n'))
###   ("_applC" ("_position" PDG_edge)
###     ("_cargs" ("_position" n)
###       ("_cargs" ("_position" None) ("_position" n')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.080s elapsed time, 0.262s cpu time, 0.053s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.LiftingIntraMoreTemplates")
### Ambiguous input (line 36 of "$AFP/Slicing/StaticIntra/PDG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>ddep_edge" ("_position" n) ("_position" V)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("_applC" ("_position" PDG_edge)
###         ("_cargs" ("_position" n)
###           ("_cargs" ("_applC" ("_position" Some) ("_position" V))
###             ("_position" n')))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>ddep_edge" ("_position" n) ("_position" V) ("_position" n'))
###   ("_applC" ("_position" PDG_edge)
###     ("_cargs" ("_position" n)
###       ("_cargs" ("_applC" ("_position" Some) ("_position" V))
###         ("_position" n')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 40 of "$AFP/Slicing/StaticIntra/PDG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>control_dependence" ("_position" n)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>cdep_edge" ("_position" n) ("_position" n'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>control_dependence" ("_position" n) ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>cdep_edge" ("_position" n) ("_position" n'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>cdep_edge"
###     ("\<^fixed>control_dependence" ("_position" n)
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop" ("_position" n))))
###     ("_position" n')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 43 of "$AFP/Slicing/StaticIntra/PDG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.data_dependence" ("_position" n) ("_position" V)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>ddep_edge" ("_position" n) ("_position" V)
###           ("_position" n'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.data_dependence" ("_position" n) ("_position" V)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>ddep_edge" ("_position" n) ("_position" V)
###       ("_position" n'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>ddep_edge"
###     ("\<^const>local.data_dependence" ("_position" n) ("_position" V)
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop" ("_position" n))))
###     ("_position" V) ("_position" n')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "PDG_edge"
  Proving monotonicity ...
Proofs for inductive predicate(s) "silent_move"
  Proving monotonicity ...
Proofs for inductive predicate(s) "PDG_path"
  Proving monotonicity ...
Proofs for inductive predicate(s) "silent_moves"
### Ambiguous input (line 59 of "$AFP/Slicing/StaticIntra/PDG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.cdep_edge" ("_position" n)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.PDG_path" ("_position" n) ("_position" n'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.cdep_edge" ("_position" n) ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.PDG_path" ("_position" n) ("_position" n'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.PDG_path"
###     ("\<^const>local.cdep_edge" ("_position" n)
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop" ("_position" n))))
###     ("_position" n')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
  Proving monotonicity ...
### Ambiguous input (line 64 of "$AFP/Slicing/StaticIntra/PDG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.ddep_edge" ("_position" n) ("_position" V)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.PDG_path" ("_position" n) ("_position" n'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.ddep_edge" ("_position" n) ("_position" V)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.PDG_path" ("_position" n) ("_position" n'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.PDG_path"
###     ("\<^const>local.ddep_edge" ("_position" n) ("_position" V)
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop" ("_position" n))))
###     ("_position" n')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 146 of "$AFP/Slicing/StaticIntra/PDG.thy") produces 4 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" PDG_BS) ("_position" S))
###   ("_Coll" ("_position" n')
###     ("\<^const>HOL.Ex_binder" ("_position" n)
###       ("\<^const>HOL.conj"
###         ("\<^const>local.PDG_path" ("_position" n')
###           ("\<^const>HOL.conj" ("_position" n)
###             ("\<^const>Set.member" ("_position" n) ("_position" S))))
###         ("_applC" ("_position" valid_node) ("_position" n))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" PDG_BS) ("_position" S))
###   ("_Coll" ("_position" n')
###     ("\<^const>HOL.Ex_binder" ("_position" n)
###       ("\<^const>HOL.conj"
###         ("\<^const>local.PDG_path" ("_position" n') ("_position" n))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" n) ("_position" S))
###           ("_applC" ("_position" valid_node) ("_position" n)))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" PDG_BS) ("_position" S))
###   ("_Coll" ("_position" n')
###     ("\<^const>HOL.Ex_binder" ("_position" n)
###       ("\<^const>local.PDG_path" ("_position" n')
###         ("\<^const>HOL.conj" ("_position" n)
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" n) ("_position" S))
###             ("_applC" ("_position" valid_node) ("_position" n))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" PDG_BS) ("_position" S))
###   ("_Coll" ("_position" n')
###     ("\<^const>HOL.Ex_binder" ("_position" n)
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member"
###           ("\<^const>local.PDG_path" ("_position" n')
###             ("\<^const>HOL.conj" ("_position" n) ("_position" n)))
###           ("_position" S))
###         ("_applC" ("_position" valid_node) ("_position" n))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "observable_move"
  Proving monotonicity ...
Proofs for inductive predicate(s) "observable_moves"
locale StandardControlDependencePDG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes
    "StandardControlDependencePDG sourcenode targetnode kind valid_edge
      (_Entry_) Def Use state_val (_Exit_)"
  Proving monotonicity ...
### Ambiguous input (line 659 of "$AFP/Slicing/StaticIntra/Slice.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" n')
###           ("_applC" ("_position" backward_slice) ("_position" S))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" V)
###             ("_applC" ("_position" Use) ("_position" n'))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" nx)
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" sourcenodes) ("_position" as)))
###               ("\<^const>Set.not_member" ("_position" V)
###                 ("_applC" ("_position" Def) ("_position" nx)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" V)
###       ("_applC" ("\<^fixed>relevant_vars" ("_position" S))
###         ("_position" n)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" n')
###           ("_applC" ("_position" backward_slice) ("_position" S))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" V)
###             ("_applC" ("_position" Use) ("_position" n'))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" nx)
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" sourcenodes) ("_position" as)))
###               ("\<^const>Set.not_member" ("_position" V)
###                 ("_applC" ("_position" Def) ("_position" nx)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" V)
###       ("\<^fixed>relevant_vars"
###         ("_applC" ("_position" S) ("_position" n))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "relevant_varsp"
  Proving monotonicity ...
locale WeakControlDependencePDG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes
    "WeakControlDependencePDG sourcenode targetnode kind valid_edge
      (_Entry_) Def Use state_val (_Exit_)"
### Ambiguous input (line 665 of "$AFP/Slicing/StaticIntra/Slice.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_position" V)
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_position" V)
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S) ("_position" n)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 675 of "$AFP/Slicing/StaticIntra/Slice.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_position" x)
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_position" x)
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S) ("_position" n)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 675 of "$AFP/Slicing/StaticIntra/Slice.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_position" x)
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_position" n'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_position" x)
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S) ("_position" n')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Slicing.PDG"
### 0.690s elapsed time, 2.279s cpu time, 0.144s GC time
### Ambiguous input (line 775 of "$AFP/Slicing/StaticIntra/Slice.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>local.relevant_vars"
###       ("\<^const>HOL.eq" ("_applC" ("_position" S) ("_position" n))
###         ("\<^const>local.relevant_vars" ("_position" S))))
###     ("_position" n')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.relevant_vars"
###     ("\<^const>HOL.eq" ("_applC" ("_position" S) ("_position" n))
###       ("\<^const>local.relevant_vars"
###         ("_applC" ("_position" S) ("_position" n'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S) ("_position" n)))
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S) ("_position" n')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_position" n))
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S) ("_position" n')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.relevant_vars"
###     ("\<^const>HOL.eq" ("_applC" ("_position" S) ("_position" n))
###       ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###         ("_position" n')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S) ("_position" n)))
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_position" n'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_position" n))
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_position" n'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 793 of "$AFP/Slicing/StaticIntra/Slice.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" V)
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_position" n))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" state_val)
###         ("_cargs" ("_position" s) ("_position" V)))
###       ("_applC" ("_position" state_val)
###         ("_cargs" ("_position" s') ("_position" V))))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" V)
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S) ("_position" n)))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" state_val)
###         ("_cargs" ("_position" s) ("_position" V)))
###       ("_applC" ("_position" state_val)
###         ("_cargs" ("_position" s') ("_position" V))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 795 of "$AFP/Slicing/StaticIntra/Slice.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" V)
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_position" n''))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" state_val)
###         ("_cargs"
###           ("_applC" ("_position" transfer)
###             ("_cargs"
###               ("_applC" ("_position" slice_kind)
###                 ("_cargs" ("_position" S) ("_position" a)))
###               ("_position" s)))
###           ("_position" V)))
###       ("_applC" ("_position" state_val)
###         ("_cargs"
###           ("_applC" ("_position" transfer)
###             ("_cargs"
###               ("_applC" ("_position" slice_kind)
###                 ("_cargs" ("_position" S) ("_position" a)))
###               ("_position" s')))
###           ("_position" V))))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" V)
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S) ("_position" n'')))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" state_val)
###         ("_cargs"
###           ("_applC" ("_position" transfer)
###             ("_cargs"
###               ("_applC" ("_position" slice_kind)
###                 ("_cargs" ("_position" S) ("_position" a)))
###               ("_position" s)))
###           ("_position" V)))
###       ("_applC" ("_position" state_val)
###         ("_cargs"
###           ("_applC" ("_position" transfer)
###             ("_cargs"
###               ("_applC" ("_position" slice_kind)
###                 ("_cargs" ("_position" S) ("_position" a)))
###               ("_position" s')))
###           ("_position" V))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 903 of "$AFP/Slicing/StaticIntra/Slice.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" V)
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_position" n))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" state_val)
###         ("_cargs" ("_position" s) ("_position" V)))
###       ("_applC" ("_position" state_val)
###         ("_cargs" ("_position" s') ("_position" V))))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" V)
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S) ("_position" n)))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" state_val)
###         ("_cargs" ("_position" s) ("_position" V)))
###       ("_applC" ("_position" state_val)
###         ("_cargs" ("_position" s') ("_position" V))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 966 of "$AFP/Slicing/StaticIntra/Slice.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" obs)
###           ("_cargs" ("_position" n)
###             ("_applC" ("_position" backward_slice) ("_position" S))))
###         ("_applC" ("_position" obs)
###           ("_cargs" ("_position" n')
###             ("_applC" ("_position" backward_slice) ("_position" S))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" V)
###           ("\<^const>local.relevant_vars"
###             ("_applC" ("_position" S) ("_position" n)))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" state_val)
###               ("_cargs" ("_position" s) ("_position" V)))
###             ("_applC" ("_position" state_val)
###               ("_cargs" ("_position" s') ("_position" V))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_node) ("_position" n)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" valid_node) ("_position" n')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_tuple" ("_position" n) ("_tuple_arg" ("_position" s)))
###         ("_tuple_arg"
###           ("_tuple" ("_position" n') ("_tuple_arg" ("_position" s')))))
###       ("_applC" ("_position" WS) ("_position" S)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" obs)
###           ("_cargs" ("_position" n)
###             ("_applC" ("_position" backward_slice) ("_position" S))))
###         ("_applC" ("_position" obs)
###           ("_cargs" ("_position" n')
###             ("_applC" ("_position" backward_slice) ("_position" S))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" V)
###           ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###             ("_position" n))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" state_val)
###               ("_cargs" ("_position" s) ("_position" V)))
###             ("_applC" ("_position" state_val)
###               ("_cargs" ("_position" s') ("_position" V))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_node) ("_position" n)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" valid_node) ("_position" n')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_tuple" ("_position" n) ("_tuple_arg" ("_position" s)))
###         ("_tuple_arg"
###           ("_tuple" ("_position" n') ("_tuple_arg" ("_position" s')))))
###       ("_applC" ("_position" WS) ("_position" S)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "WSp"
  Proving monotonicity ...
### Ambiguous input (line 973 of "$AFP/Slicing/StaticIntra/Slice.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_tuple" ("_position" n) ("_tuple_arg" ("_position" s)))
###         ("_tuple_arg"
###           ("_tuple" ("_position" n') ("_tuple_arg" ("_position" s')))))
###       ("_applC" ("_position" WS) ("_position" S))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" obs)
###           ("_cargs" ("_position" n)
###             ("_applC" ("_position" backward_slice) ("_position" S))))
###         ("_applC" ("_position" obs)
###           ("_cargs" ("_position" n')
###             ("_applC" ("_position" backward_slice) ("_position" S)))))
###       ("\<^const>HOL.conj"
###         ("_Ball" ("_position" V)
###           ("\<^const>local.relevant_vars"
###             ("_applC" ("_position" S) ("_position" n)))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" state_val)
###               ("_cargs" ("_position" s) ("_position" V)))
###             ("_applC" ("_position" state_val)
###               ("_cargs" ("_position" s') ("_position" V)))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_node) ("_position" n))
###           ("_applC" ("_position" valid_node) ("_position" n')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_tuple" ("_position" n) ("_tuple_arg" ("_position" s)))
###         ("_tuple_arg"
###           ("_tuple" ("_position" n') ("_tuple_arg" ("_position" s')))))
###       ("_applC" ("_position" WS) ("_position" S))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" obs)
###           ("_cargs" ("_position" n)
###             ("_applC" ("_position" backward_slice) ("_position" S))))
###         ("_applC" ("_position" obs)
###           ("_cargs" ("_position" n')
###             ("_applC" ("_position" backward_slice) ("_position" S)))))
###       ("\<^const>HOL.conj"
###         ("_Ball" ("_position" V)
###           ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###             ("_position" n))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" state_val)
###               ("_cargs" ("_position" s) ("_position" V)))
###             ("_applC" ("_position" state_val)
###               ("_cargs" ("_position" s') ("_position" V)))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_node) ("_position" n))
###           ("_applC" ("_position" valid_node) ("_position" n')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "trans_observable_moves"
  Proving monotonicity ...
### Ambiguous input (line 1271 of "$AFP/Slicing/StaticIntra/Slice.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as')
###           ("_position" n')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" slice_edges)
###               ("_cargs" ("_position" S) ("_position" as)))
###             ("_applC" ("_position" slice_edges)
###               ("_cargs" ("_position" S) ("_position" as')))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" preds)
###               ("_cargs"
###                 ("_applC" ("_position" slice_kinds)
###                   ("_cargs" ("_position" S) ("_position" as)))
###                 ("_position" s))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" preds)
###                 ("_cargs"
###                   ("_applC" ("_position" slice_kinds)
###                     ("_cargs" ("_position" S) ("_position" as')))
###                   ("_position" s'))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.member" ("_position" n') ("_position" S)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("_Ball" ("_position" V)
###                     ("\<^const>local.relevant_vars"
###                       ("_applC" ("_position" S) ("_position" n)))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" state_val)
###                         ("_cargs" ("_position" s) ("_position" V)))
###                       ("_applC" ("_position" state_val)
###                         ("_cargs" ("_position" s')
###                           ("_position" V)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" as) ("_position" as'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as')
###           ("_position" n')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" slice_edges)
###               ("_cargs" ("_position" S) ("_position" as)))
###             ("_applC" ("_position" slice_edges)
###               ("_cargs" ("_position" S) ("_position" as')))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" preds)
###               ("_cargs"
###                 ("_applC" ("_position" slice_kinds)
###                   ("_cargs" ("_position" S) ("_position" as)))
###                 ("_position" s))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" preds)
###                 ("_cargs"
###                   ("_applC" ("_position" slice_kinds)
###                     ("_cargs" ("_position" S) ("_position" as')))
###                   ("_position" s'))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.member" ("_position" n') ("_position" S)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("_Ball" ("_position" V)
###                     ("_applC"
###                       ("\<^const>local.relevant_vars" ("_position" S))
###                       ("_position" n))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" state_val)
###                         ("_cargs" ("_position" s) ("_position" V)))
###                       ("_applC" ("_position" state_val)
###                         ("_cargs" ("_position" s')
###                           ("_position" V)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" as) ("_position" as'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.625s elapsed time, 1.609s cpu time, 0.161s GC time
locale BackwardSlice_wf
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
    and backward_slice :: "'node set => 'node set"
    and
    sem :: "'com => 'state => 'com => 'state => bool"
      (\<open>((1\<langle>_,/_\<rangle>) \<Rightarrow>/ (1\<langle>_,/_\<rangle>))\<close>
        [0, 0, 0, 0] 81)
    and
    identifies :: "'node => 'com => bool"
      (\<open>_ \<triangleq> _\<close> [51, 0] 80)
  assumes
    "BackwardSlice_wf sourcenode targetnode kind valid_edge (_Entry_) Def
      Use state_val backward_slice sem identifies"
### theory "Slicing.Slice"
### 1.272s elapsed time, 3.622s cpu time, 0.329s GC time
Loading theory "Draft.NonInterferenceIntra" (required by "Draft.LiftingIntraMoreTemplates" via "Draft.LiftingIntra")
Loading theory "Slicing.CDepInstantiations" (required by "Draft.LiftingIntraMoreTemplates" via "Draft.LiftingIntra")
locale StandardControlDependencePDG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes
    "StandardControlDependencePDG sourcenode targetnode kind valid_edge
      (_Entry_) Def Use state_val (_Exit_)"
### Ambiguous input (line 18 of "$AFP/Slicing/StaticIntra/CDepInstantiations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>PDG_path'" ("_position" n)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("_applC" ("_position" PDG.PDG_path)
###         ("_cargs" ("_position" sourcenode)
###           ("_cargs" ("_position" targetnode)
###             ("_cargs" ("_position" valid_edge)
###               ("_cargs" ("_position" Def)
###                 ("_cargs" ("_position" Use)
###                   ("_cargs" ("_position" standard_control_dependence)
###                     ("_cargs" ("_position" n) ("_position" n'))))))))))))
### ("\<^const>Pure.eq" ("\<^fixed>PDG_path'" ("_position" n) ("_position" n'))
###   ("_applC" ("_position" PDG.PDG_path)
###     ("_cargs" ("_position" sourcenode)
###       ("_cargs" ("_position" targetnode)
###         ("_cargs" ("_position" valid_edge)
###           ("_cargs" ("_position" Def)
###             ("_cargs" ("_position" Use)
###               ("_cargs" ("_position" standard_control_dependence)
###                 ("_cargs" ("_position" n) ("_position" n'))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale NonInterferenceIntraGraph
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
    and backward_slice :: "'node set => 'node set"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
    and H :: "'var set"
    and L :: "'var set"
    and High :: "'node"  (\<open>'('_High'_')\<close>)
    and Low :: "'node"  (\<open>'('_Low'_')\<close>)
  assumes
    "NonInterferenceIntraGraph sourcenode targetnode kind valid_edge
      (_Entry_) Def Use state_val backward_slice (_Exit_) H L (_High_)
      (_Low_)"
### Ambiguous input (line 163 of "$AFP/InformationFlowSlicing/NonInterferenceIntra.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_position" V)
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("\<^fixed>Entry"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_position" V)
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S) ("\<^fixed>Entry")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 212 of "$AFP/InformationFlowSlicing/NonInterferenceIntra.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" V)
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("\<^fixed>Entry"))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" state_val)
###         ("_cargs" ("_position" s) ("_position" V)))
###       ("_applC" ("_position" state_val)
###         ("_cargs" ("_position" s') ("_position" V))))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" V)
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S) ("\<^fixed>Entry")))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" state_val)
###         ("_cargs" ("_position" s) ("_position" V)))
###       ("_applC" ("_position" state_val)
###         ("_cargs" ("_position" s') ("_position" V))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 223 of "$AFP/InformationFlowSlicing/NonInterferenceIntra.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("\<^fixed>Low")))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as')
###           ("\<^fixed>Low")))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Ball" ("_position" V)
###             ("\<^const>local.relevant_vars"
###               ("_applC" ("_position" S) ("_position" n)))
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" state_val)
###                 ("_cargs" ("_position" s) ("_position" V)))
###               ("_applC" ("_position" state_val)
###                 ("_cargs" ("_position" s') ("_position" V))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" preds)
###               ("_cargs"
###                 ("_applC" ("_position" slice_kinds)
###                   ("_cargs" ("_position" S) ("_position" as)))
###                 ("_position" s))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" preds)
###                 ("_cargs"
###                   ("_applC" ("_position" slice_kinds)
###                     ("_cargs" ("_position" S) ("_position" as')))
###                   ("_position" s')))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ball" ("_position" V) ("_applC" ("_position" Use) ("\<^fixed>Low"))
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" state_val)
###           ("_cargs"
###             ("_applC" ("_position" transfers)
###               ("_cargs"
###                 ("_applC" ("_position" slice_kinds)
###                   ("_cargs" ("_position" S) ("_position" as)))
###                 ("_position" s)))
###             ("_position" V)))
###         ("_applC" ("_position" state_val)
###           ("_cargs"
###             ("_applC" ("_position" transfers)
###               ("_cargs"
###                 ("_applC" ("_position" slice_kinds)
###                   ("_cargs" ("_position" S) ("_position" as')))
###                 ("_position" s')))
###             ("_position" V)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("\<^fixed>Low")))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as')
###           ("\<^fixed>Low")))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Ball" ("_position" V)
###             ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###               ("_position" n))
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" state_val)
###                 ("_cargs" ("_position" s) ("_position" V)))
###               ("_applC" ("_position" state_val)
###                 ("_cargs" ("_position" s') ("_position" V))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" preds)
###               ("_cargs"
###                 ("_applC" ("_position" slice_kinds)
###                   ("_cargs" ("_position" S) ("_position" as)))
###                 ("_position" s))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" preds)
###                 ("_cargs"
###                   ("_applC" ("_position" slice_kinds)
###                     ("_cargs" ("_position" S) ("_position" as')))
###                   ("_position" s')))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ball" ("_position" V) ("_applC" ("_position" Use) ("\<^fixed>Low"))
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" state_val)
###           ("_cargs"
###             ("_applC" ("_position" transfers)
###               ("_cargs"
###                 ("_applC" ("_position" slice_kinds)
###                   ("_cargs" ("_position" S) ("_position" as)))
###                 ("_position" s)))
###             ("_position" V)))
###         ("_applC" ("_position" state_val)
###           ("_cargs"
###             ("_applC" ("_position" transfers)
###               ("_cargs"
###                 ("_applC" ("_position" slice_kinds)
###                   ("_cargs" ("_position" S) ("_position" as')))
###                 ("_position" s')))
###             ("_position" V)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale WeakControlDependencePDG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes
    "WeakControlDependencePDG sourcenode targetnode kind valid_edge
      (_Entry_) Def Use state_val (_Exit_)"
locale CFG_wf
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
  assumes
    "CFG_wf sourcenode targetnode kind valid_edge (_Entry_) Def Use
      state_val"
### theory "Slicing.CDepInstantiations"
### 0.343s elapsed time, 0.706s cpu time, 0.046s GC time
locale NonInterferenceIntra
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => 'state edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and state_val :: "'state => 'var => 'val"
    and backward_slice :: "'node set => 'node set"
    and
    sem :: "'com => 'state => 'com => 'state => bool"
      (\<open>((1\<langle>_,/_\<rangle>) \<Rightarrow>/ (1\<langle>_,/_\<rangle>))\<close>
        [0, 0, 0, 0] 81)
    and
    identifies :: "'node => 'com => bool"
      (\<open>_ \<triangleq> _\<close> [51, 0] 80)
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
    and H :: "'var set"
    and L :: "'var set"
    and High :: "'node"  (\<open>'('_High'_')\<close>)
    and Low :: "'node"  (\<open>'('_Low'_')\<close>)
    and final :: "'com => bool"
  assumes
    "NonInterferenceIntra sourcenode targetnode kind valid_edge (_Entry_)
      Def Use state_val backward_slice sem identifies (_Exit_) H L (_High_)
      (_Low_) final"
### theory "Draft.NonInterferenceIntra"
### 0.441s elapsed time, 0.832s cpu time, 0.076s GC time
Loading theory "Draft.LiftingIntra" (required by "Draft.LiftingIntraMoreTemplates")
Proofs for inductive predicate(s) "lift_valid_edge"
  Proving monotonicity ...
Proofs for inductive predicate(s) "lift_Def_setp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "lift_Use_setp"
  Proving monotonicity ...
### theory "Draft.LiftingIntra"
### 0.715s elapsed time, 0.802s cpu time, 0.120s GC time
Loading theory "Draft.LiftingIntraMoreTemplates"
val templateLemmas =
   [("LiftingIntra.lift_Def_setp_lift_Def_set_eq",
     "lift_Def_setp ?Def ?E ?X (%x. x : ?H) ?L =
      (%x xa. (x, xa) : lift_Def_set ?Def ?E ?X ?H ?L)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_var 4),
               template_var 3),
             template_var 2),
           t_empty),
         template_var 0),
       t_empty)),
    ("LiftingIntra.lift_Use_setp_lift_Use_set_eq",
     "lift_Use_setp ?Use ?E ?X (%x. x : ?H) (%x. x : ?L) =
      (%x xa. (x, xa) : lift_Use_set ?Use ?E ?X ?H ?L)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_var 4),
               template_var 3),
             template_var 2),
           t_empty),
         t_empty),
       t_empty)),
    ("LiftingIntra.lift_CFG",
     "CFGExit_wf ?sourcenode ?targetnode ?kind ?valid_edge ?Entry ?Def ?Use
       ?state_val ?Exit ==>
      CFG src trg
       (lift_valid_edge ?valid_edge ?sourcenode ?targetnode ?kind ?Entry
         ?Exit)
       NewEntry",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app (template_hole 6, template_var 8),
                            template_var 7),
                          template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 5, t_empty), t_empty),
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 1, template_var 5),
                         template_var 8),
                       template_var 7),
                     template_var 6),
                   template_var 4),
                 template_var 0)),
             template_hole 0)
           ))),
    ("LiftingIntra.lift_CFGExit",
     "CFGExit_wf ?sourcenode ?targetnode ?kind ?valid_edge ?Entry ?Def ?Use
       ?state_val ?Exit ==>
      CFGExit src trg knd
       (lift_valid_edge ?valid_edge ?sourcenode ?targetnode ?kind ?Entry
         ?Exit)
       NewEntry NewExit",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app (template_hole 8, template_var 8),
                            template_var 7),
                          template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 7, t_empty), t_empty),
                   template_hole 3),
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 2, template_var 5),
                           template_var 8),
                         template_var 7),
                       template_var 6),
                     template_var 4),
                   template_var 0)),
               template_hole 1),
             template_hole 0)
           ))),
    ("LiftingIntra.lift_Postdomination",
     "[| CFGExit_wf ?sourcenode ?targetnode ?kind ?valid_edge ?Entry ?Def
          ?Use ?state_val ?Exit;
         Postdomination ?sourcenode ?targetnode ?kind ?valid_edge ?Entry
          ?Exit;
         CFGExit.inner_node ?sourcenode ?targetnode ?valid_edge ?Entry ?Exit
          ?nx |]
      ==> Postdomination src trg knd
           (lift_valid_edge ?valid_edge ?sourcenode ?targetnode ?kind ?Entry
             ?Exit)
           NewEntry NewExit",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app (template_hole 10, template_var 9),
                            template_var 8),
                          template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 9, template_var 9),
                      template_var 8),
                    template_var 7),
                  template_var 6),
                template_var 5),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 8, template_var 9),
                      template_var 8),
                    template_var 6),
                  template_var 5),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 7, t_empty), t_empty),
                   template_hole 3),
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 2, template_var 6),
                           template_var 9),
                         template_var 8),
                       template_var 7),
                     template_var 5),
                   template_var 1)),
               template_hole 1),
             template_hole 0)
           ))),
    ("LiftingIntra.lift_StrongPostdomination",
     "[| CFGExit_wf ?sourcenode ?targetnode ?kind ?valid_edge ?Entry ?Def
          ?Use ?state_val ?Exit;
         StrongPostdomination ?sourcenode ?targetnode ?kind ?valid_edge
          ?Entry ?Exit;
         CFGExit.inner_node ?sourcenode ?targetnode ?valid_edge ?Entry ?Exit
          ?nx |]
      ==> StrongPostdomination src trg knd
           (lift_valid_edge ?valid_edge ?sourcenode ?targetnode ?kind ?Entry
             ?Exit)
           NewEntry NewExit",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app (template_hole 10, template_var 9),
                            template_var 8),
                          template_var 7),
                        template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 9, template_var 9),
                      template_var 8),
                    template_var 7),
                  template_var 6),
                template_var 5),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 8, template_var 9),
                      template_var 8),
                    template_var 6),
                  template_var 5),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 7, t_empty), t_empty),
                   template_hole 3),
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 2, template_var 6),
                           template_var 9),
                         template_var 8),
                       template_var 7),
                     template_var 5),
                   template_var 1)),
               template_hole 1),
             template_hole 0)
           ))),
    ("LiftingIntra.lift_CFG_wf",
     "CFGExit_wf ?sourcenode ?targetnode ?kind ?valid_edge ?Entry ?Def ?Use
       ?state_val ?Exit ==>
      CFG_wf src trg knd
       (lift_valid_edge ?valid_edge ?sourcenode ?targetnode ?kind ?Entry
         ?Exit)
       NewEntry (lift_Def ?Def ?Entry ?Exit ?H ?L)
       (lift_Use ?Use ?Entry ?Exit ?H ?L) ?state_val",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_hole 12, template_var 10),
                            template_var 9),
                          template_var 8),
                        template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 11, t_empty), t_empty),
                       template_hole 7),
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 6, template_var 7),
                               template_var 10),
                             template_var 9),
                           template_var 8),
                         template_var 6),
                       template_var 2)),
                   template_hole 5),
                 t_empty),
               t_empty),
             template_var 3)
           ))),
    ("LiftingIntra.lift_CFGExit_wf",
     "CFGExit_wf ?sourcenode ?targetnode ?kind ?valid_edge ?Entry ?Def ?Use
       ?state_val ?Exit ==>
      CFGExit_wf src trg knd
       (lift_valid_edge ?valid_edge ?sourcenode ?targetnode ?kind ?Entry
         ?Exit)
       NewEntry (lift_Def ?Def ?Entry ?Exit ?H ?L)
       (lift_Use ?Use ?Entry ?Exit ?H ?L) ?state_val NewExit",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_hole 13, template_var 10),
                            template_var 9),
                          template_var 8),
                        template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 12, t_empty),
                           t_empty),
                         template_hole 8),
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 7, template_var 7),
                                 template_var 10),
                               template_var 9),
                             template_var 8),
                           template_var 6),
                         template_var 2)),
                     template_hole 6),
                   t_empty),
                 t_empty),
               template_var 3),
             template_hole 0)
           ))),
    ("LiftingIntra.lift_PDG_scd",
     "[| PDG ?sourcenode ?targetnode ?kind ?valid_edge ?Entry ?Def ?Use
          ?state_val ?Exit
          (Postdomination.standard_control_dependence ?sourcenode
            ?targetnode ?valid_edge ?Exit);
         Postdomination ?sourcenode ?targetnode ?kind ?valid_edge ?Entry
          ?Exit;
         CFGExit.inner_node ?sourcenode ?targetnode ?valid_edge ?Entry ?Exit
          ?nx |]
      ==> PDG src trg knd
           (lift_valid_edge ?valid_edge ?sourcenode ?targetnode ?kind ?Entry
             ?Exit)
           NewEntry (lift_Def ?Def ?Entry ?Exit ?H ?L)
           (lift_Use ?Use ?Entry ?Exit ?H ?L) ?state_val NewExit
           (Postdomination.standard_control_dependence src trg
             (lift_valid_edge ?valid_edge ?sourcenode ?targetnode ?kind
               ?Entry ?Exit)
             NewExit)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 17, template_var 11),
                              template_var 10),
                            template_var 9),
                          template_var 8),
                        template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 16, template_var 11),
                    template_var 10),
                  template_var 8),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 15, template_var 11),
                      template_var 10),
                    template_var 9),
                  template_var 8),
                template_var 7),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 14, template_var 11),
                      template_var 10),
                    template_var 8),
                  template_var 7),
                template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 13, t_empty),
                             t_empty),
                           template_hole 9),
                         template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_hole 8, template_var 8),
                                   template_var 11),
                                 template_var 10),
                               template_var 9),
                             template_var 7),
                           template_var 3)),
                       template_hole 7),
                     t_empty),
                   t_empty),
                 template_var 4),
               template_hole 1),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, t_empty), t_empty),
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 8, template_var 8),
                           template_var 11),
                         template_var 10),
                       template_var 9),
                     template_var 7),
                   template_var 3)),
               template_hole 1))
           ))),
    ("LiftingIntra.lift_PDG_wcd",
     "[| PDG ?sourcenode ?targetnode ?kind ?valid_edge ?Entry ?Def ?Use
          ?state_val ?Exit
          (StrongPostdomination.weak_control_dependence ?sourcenode
            ?targetnode ?valid_edge ?Exit);
         StrongPostdomination ?sourcenode ?targetnode ?kind ?valid_edge
          ?Entry ?Exit;
         CFGExit.inner_node ?sourcenode ?targetnode ?valid_edge ?Entry ?Exit
          ?nx |]
      ==> PDG src trg knd
           (lift_valid_edge ?valid_edge ?sourcenode ?targetnode ?kind ?Entry
             ?Exit)
           NewEntry (lift_Def ?Def ?Entry ?Exit ?H ?L)
           (lift_Use ?Use ?Entry ?Exit ?H ?L) ?state_val NewExit
           (StrongPostdomination.weak_control_dependence src trg
             (lift_valid_edge ?valid_edge ?sourcenode ?targetnode ?kind
               ?Entry ?Exit)
             NewExit)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 17, template_var 11),
                              template_var 10),
                            template_var 9),
                          template_var 8),
                        template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 16, template_var 11),
                    template_var 10),
                  template_var 8),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 15, template_var 11),
                      template_var 10),
                    template_var 9),
                  template_var 8),
                template_var 7),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 14, template_var 11),
                      template_var 10),
                    template_var 8),
                  template_var 7),
                template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 13, t_empty),
                             t_empty),
                           template_hole 9),
                         template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_hole 8, template_var 8),
                                   template_var 11),
                                 template_var 10),
                               template_var 9),
                             template_var 7),
                           template_var 3)),
                       template_hole 7),
                     t_empty),
                   t_empty),
                 template_var 4),
               template_hole 1),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, t_empty), t_empty),
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 8, template_var 8),
                           template_var 11),
                         template_var 10),
                       template_var 9),
                     template_var 7),
                   template_var 3)),
               template_hole 1))
           ))),
    ("LiftingIntra.lift_wod_backward_slice",
     "[| CFGExit_wf ?sourcenode ?targetnode ?kind ?valid_edge ?Entry ?Def
          ?Use ?state_val ?Exit;
         ?H Int ?L = {}; ?H Un ?L = UNIV |]
      ==> NonInterferenceIntraGraph src trg knd
           (lift_valid_edge ?valid_edge ?sourcenode ?targetnode ?kind ?Entry
             ?Exit)
           NewEntry (lift_Def ?Def ?Entry ?Exit ?H ?L)
           (lift_Use ?Use ?Entry ?Exit ?H ?L) ?state_val
           (CFG_wf.wod_backward_slice src trg
             (lift_valid_edge ?valid_edge ?sourcenode ?targetnode ?kind
               ?Entry ?Exit)
             (lift_Def ?Def ?Entry ?Exit ?H ?L)
             (lift_Use ?Use ?Entry ?Exit ?H ?L))
           NewExit ?H ?L (LDCFG_node.Node ?Entry) (LDCFG_node.Node ?Exit)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_hole 20, template_var 10),
                            template_var 9),
                          template_var 8),
                        template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 18, template_var 1),
            template_var 0),
          template_hole 17),
        template_equation
         (template_app
           (template_app (template_hole 16, template_var 1),
            template_var 0),
          template_hole 15)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_hole 14, t_empty),
                                     t_empty),
                                   template_hole 10),
                                 template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app (template_hole 9, template_var 7), template_var 10),
   template_var 9),
 template_var 8),
                                     template_var 6),
                                   template_var 2)),
                               template_hole 8),
                             t_empty),
                           t_empty),
                         template_var 3),
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app (template_hole 2, t_empty),
                               t_empty),
                             template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app (template_hole 9, template_var 7), template_var 10),
                                     template_var 9),
                                   template_var 8),
                                 template_var 6),
                               template_var 2)),
                           t_empty),
                         t_empty)),
                     template_hole 1),
                   template_var 1),
                 template_var 0),
               template_app (template_hole 0, template_var 6)),
             template_app (template_hole 0, template_var 2))
           ))),
    ("LiftingIntra.lift_PDG_standard_backward_slice",
     "[| PDG ?sourcenode ?targetnode ?kind ?valid_edge ?Entry ?Def ?Use
          ?state_val ?Exit
          (Postdomination.standard_control_dependence ?sourcenode
            ?targetnode ?valid_edge ?Exit);
         Postdomination ?sourcenode ?targetnode ?kind ?valid_edge ?Entry
          ?Exit;
         CFGExit.inner_node ?sourcenode ?targetnode ?valid_edge ?Entry ?Exit
          ?nx;
         ?H Int ?L = {}; ?H Un ?L = UNIV |]
      ==> NonInterferenceIntraGraph src trg knd
           (lift_valid_edge ?valid_edge ?sourcenode ?targetnode ?kind ?Entry
             ?Exit)
           NewEntry (lift_Def ?Def ?Entry ?Exit ?H ?L)
           (lift_Use ?Use ?Entry ?Exit ?H ?L) ?state_val
           (PDG.PDG_BS src trg
             (lift_valid_edge ?valid_edge ?sourcenode ?targetnode ?kind
               ?Entry ?Exit)
             (lift_Def ?Def ?Entry ?Exit ?H ?L)
             (lift_Use ?Use ?Entry ?Exit ?H ?L)
             (Postdomination.standard_control_dependence src trg
               (lift_valid_edge ?valid_edge ?sourcenode ?targetnode ?kind
                 ?Entry ?Exit)
               NewExit))
           NewExit ?H ?L (LDCFG_node.Node ?Entry) (LDCFG_node.Node ?Exit)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 24, template_var 11),
                              template_var 10),
                            template_var 9),
                          template_var 8),
                        template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 23, template_var 11),
                    template_var 10),
                  template_var 8),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 22, template_var 11),
                      template_var 10),
                    template_var 9),
                  template_var 8),
                template_var 7),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 21, template_var 11),
                      template_var 10),
                    template_var 8),
                  template_var 7),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 19, template_var 1),
            template_var 0),
          template_hole 18),
        template_equation
         (template_app
           (template_app (template_hole 17, template_var 1),
            template_var 0),
          template_hole 16)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_hole 15, t_empty),
                                     t_empty),
                                   template_hole 11),
                                 template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app (template_hole 10, template_var 8), template_var 11),
   template_var 10),
 template_var 9),
                                     template_var 7),
                                   template_var 3)),
                               template_hole 9),
                             t_empty),
                           t_empty),
                         template_var 4),
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app (template_hole 3, t_empty),
                                 t_empty),
                               template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app (template_hole 10, template_var 8), template_var 11),
 template_var 10),
                                     template_var 9),
                                   template_var 7),
                                 template_var 3)),
                             t_empty),
                           t_empty),
                         template_app
                          (template_app
                            (template_app
                              (template_app (template_hole 2, t_empty),
                               t_empty),
                             template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app (template_hole 10, template_var 8), template_var 11),
                                     template_var 10),
                                   template_var 9),
                                 template_var 7),
                               template_var 3)),
                           template_hole 1))),
                     template_hole 1),
                   template_var 1),
                 template_var 0),
               template_app (template_hole 0, template_var 7)),
             template_app (template_hole 0, template_var 3))
           ))),
    ("LiftingIntra.lift_PDG_weak_backward_slice",
     "[| PDG ?sourcenode ?targetnode ?kind ?valid_edge ?Entry ?Def ?Use
          ?state_val ?Exit
          (StrongPostdomination.weak_control_dependence ?sourcenode
            ?targetnode ?valid_edge ?Exit);
         StrongPostdomination ?sourcenode ?targetnode ?kind ?valid_edge
          ?Entry ?Exit;
         CFGExit.inner_node ?sourcenode ?targetnode ?valid_edge ?Entry ?Exit
          ?nx;
         ?H Int ?L = {}; ?H Un ?L = UNIV |]
      ==> NonInterferenceIntraGraph src trg knd
           (lift_valid_edge ?valid_edge ?sourcenode ?targetnode ?kind ?Entry
             ?Exit)
           NewEntry (lift_Def ?Def ?Entry ?Exit ?H ?L)
           (lift_Use ?Use ?Entry ?Exit ?H ?L) ?state_val
           (PDG.PDG_BS src trg
             (lift_valid_edge ?valid_edge ?sourcenode ?targetnode ?kind
               ?Entry ?Exit)
             (lift_Def ?Def ?Entry ?Exit ?H ?L)
             (lift_Use ?Use ?Entry ?Exit ?H ?L)
             (StrongPostdomination.weak_control_dependence src trg
               (lift_valid_edge ?valid_edge ?sourcenode ?targetnode ?kind
                 ?Entry ?Exit)
               NewExit))
           NewExit ?H ?L (LDCFG_node.Node ?Entry) (LDCFG_node.Node ?Exit)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 24, template_var 11),
                              template_var 10),
                            template_var 9),
                          template_var 8),
                        template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 23, template_var 11),
                    template_var 10),
                  template_var 8),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 22, template_var 11),
                      template_var 10),
                    template_var 9),
                  template_var 8),
                template_var 7),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 21, template_var 11),
                      template_var 10),
                    template_var 8),
                  template_var 7),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 19, template_var 1),
            template_var 0),
          template_hole 18),
        template_equation
         (template_app
           (template_app (template_hole 17, template_var 1),
            template_var 0),
          template_hole 16)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_hole 15, t_empty),
                                     t_empty),
                                   template_hole 11),
                                 template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app (template_hole 10, template_var 8), template_var 11),
   template_var 10),
 template_var 9),
                                     template_var 7),
                                   template_var 3)),
                               template_hole 9),
                             t_empty),
                           t_empty),
                         template_var 4),
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app (template_hole 3, t_empty),
                                 t_empty),
                               template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app (template_hole 10, template_var 8), template_var 11),
 template_var 10),
                                     template_var 9),
                                   template_var 7),
                                 template_var 3)),
                             t_empty),
                           t_empty),
                         template_app
                          (template_app
                            (template_app
                              (template_app (template_hole 2, t_empty),
                               t_empty),
                             template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app (template_hole 10, template_var 8), template_var 11),
                                     template_var 10),
                                   template_var 9),
                                 template_var 7),
                               template_var 3)),
                           template_hole 1))),
                     template_hole 1),
                   template_var 1),
                 template_var 0),
               template_app (template_hole 0, template_var 7)),
             template_app (template_hole 0, template_var 3))
           )))]:
   (string * thm * template) list
### theory "Draft.LiftingIntraMoreTemplates"
### 0.579s elapsed time, 1.207s cpu time, 0.768s GC time
val it = (): unit
