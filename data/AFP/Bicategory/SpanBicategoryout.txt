Loading theory "HOL-Cardinals.Fun_More" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory" via "Draft.Bicategory" via "Draft.Prebicategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda" via "Category3.SetCat" via "Category3.SetCategory" via "HOL-Cardinals.Cardinals" via "HOL-Cardinals.Ordinal_Arithmetic" via "HOL-Cardinals.Wellorder_Constructions" via "HOL-Cardinals.Wellorder_Embedding")
Loading theory "HOL-Cardinals.Order_Union" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory" via "Draft.Bicategory" via "Draft.Prebicategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda" via "Category3.SetCat" via "Category3.SetCategory" via "HOL-Cardinals.Cardinals" via "HOL-Cardinals.Ordinal_Arithmetic" via "HOL-Cardinals.Wellorder_Constructions")
Loading theory "HOL-Library.FuncSet" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory" via "Draft.Bicategory" via "Draft.Prebicategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda" via "Category3.DualCategory" via "Category3.Category")
Loading theory "HOL-Cardinals.Order_Relation_More" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory" via "Draft.Bicategory" via "Draft.Prebicategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda" via "Category3.SetCat" via "Category3.SetCategory" via "HOL-Cardinals.Cardinals" via "HOL-Cardinals.Ordinal_Arithmetic" via "HOL-Cardinals.Wellorder_Constructions" via "HOL-Cardinals.Wellorder_Embedding" via "HOL-Cardinals.Wellorder_Relation" via "HOL-Cardinals.Wellfounded_More")
### theory "HOL-Cardinals.Fun_More"
### 0.065s elapsed time, 0.286s cpu time, 0.000s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "HOL-Cardinals.Order_Union"
### 0.118s elapsed time, 0.488s cpu time, 0.056s GC time
Loading theory "HOL-Cardinals.Wellorder_Extension" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory" via "Draft.Bicategory" via "Draft.Prebicategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda" via "Category3.SetCat" via "Category3.SetCategory" via "HOL-Cardinals.Cardinals")
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.103s elapsed time, 0.401s cpu time, 0.056s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Cardinals.Wellorder_Extension"
### 0.057s elapsed time, 0.231s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
### theory "HOL-Cardinals.Order_Relation_More"
### 0.214s elapsed time, 0.864s cpu time, 0.056s GC time
Loading theory "HOL-Cardinals.Wellfounded_More" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory" via "Draft.Bicategory" via "Draft.Prebicategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda" via "Category3.SetCat" via "Category3.SetCategory" via "HOL-Cardinals.Cardinals" via "HOL-Cardinals.Ordinal_Arithmetic" via "HOL-Cardinals.Wellorder_Constructions" via "HOL-Cardinals.Wellorder_Embedding" via "HOL-Cardinals.Wellorder_Relation")
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Cardinals.Wellfounded_More"
### 0.061s elapsed time, 0.230s cpu time, 0.118s GC time
Loading theory "HOL-Cardinals.Wellorder_Relation" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory" via "Draft.Bicategory" via "Draft.Prebicategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda" via "Category3.SetCat" via "Category3.SetCategory" via "HOL-Cardinals.Cardinals" via "HOL-Cardinals.Ordinal_Arithmetic" via "HOL-Cardinals.Wellorder_Constructions" via "HOL-Cardinals.Wellorder_Embedding")
locale wo_rel
  fixes r :: "('a * 'a) set"
  assumes "wo_rel r"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.189s elapsed time, 0.740s cpu time, 0.118s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Cardinals.Wellorder_Relation"
### 0.136s elapsed time, 0.532s cpu time, 0.069s GC time
Loading theory "HOL-Cardinals.Wellorder_Embedding" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory" via "Draft.Bicategory" via "Draft.Prebicategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda" via "Category3.SetCat" via "Category3.SetCategory" via "HOL-Cardinals.Cardinals" via "HOL-Cardinals.Ordinal_Arithmetic" via "HOL-Cardinals.Wellorder_Constructions")
### theory "HOL-Library.FuncSet"
### 0.417s elapsed time, 1.653s cpu time, 0.244s GC time
Loading theory "Category3.Category" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory" via "Draft.Bicategory" via "Draft.Prebicategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda" via "Category3.DualCategory")
locale partial_magma
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "partial_magma (\<cdot>)"
### theory "HOL-Library.Nat_Bijection"
### 0.298s elapsed time, 1.163s cpu time, 0.187s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.ExtrEqs")
locale category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "category (\<cdot>)"
### theory "HOL-Cardinals.Wellorder_Embedding"
### 0.293s elapsed time, 1.018s cpu time, 0.471s GC time
Loading theory "HOL-Cardinals.Wellorder_Constructions" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory" via "Draft.Bicategory" via "Draft.Prebicategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda" via "Category3.SetCat" via "Category3.SetCategory" via "HOL-Cardinals.Cardinals" via "HOL-Cardinals.Ordinal_Arithmetic")
### theory "Category3.Category"
### 0.406s elapsed time, 1.450s cpu time, 0.535s GC time
Loading theory "Category3.ConcreteCategory" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory" via "Draft.Bicategory" via "Draft.Prebicategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda" via "Category3.SetCat" via "Category3.SetCategory" via "Category3.Functor")
locale concrete_category
  fixes Obj :: "'o set"
    and Hom :: "'o => 'o => 'a set"
    and Id :: "'o => 'a"
    and Comp :: "'o => 'o => 'o => 'a => 'a => 'a"
  assumes "concrete_category Obj Hom Id Comp"
consts
  shift :: "'a list => 'a stream => 'a stream"
locale wo_rel
  fixes r :: "('a * 'a) set"
  assumes "wo_rel r"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Cardinals.Wellorder_Constructions"
### 0.524s elapsed time, 2.070s cpu time, 0.226s GC time
Loading theory "HOL-Cardinals.Cardinal_Order_Relation" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory" via "Draft.Bicategory" via "Draft.Prebicategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda" via "Category3.SetCat" via "Category3.SetCategory" via "HOL-Cardinals.Cardinals" via "HOL-Cardinals.Cardinal_Arithmetic")
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.993s elapsed time, 3.774s cpu time, 0.901s GC time
Loading theory "HOL-Cardinals.Ordinal_Arithmetic" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory" via "Draft.Bicategory" via "Draft.Prebicategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda" via "Category3.SetCat" via "Category3.SetCategory" via "HOL-Cardinals.Cardinals")
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
locale wo_rel
  fixes r :: "('a * 'a) set"
  assumes "wo_rel r"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale wo_rel2
  fixes r :: "('a * 'a) set"
    and s :: "('b * 'b) set"
  assumes "wo_rel2 r s"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Cardinals.Cardinal_Order_Relation"
### 0.893s elapsed time, 3.361s cpu time, 1.102s GC time
Loading theory "HOL-Cardinals.Cardinal_Arithmetic" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory" via "Draft.Bicategory" via "Draft.Prebicategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda" via "Category3.SetCat" via "Category3.SetCategory" via "HOL-Cardinals.Cardinals")
### theory "Category3.ConcreteCategory"
### 1.400s elapsed time, 5.369s cpu time, 1.364s GC time
Loading theory "Category3.DiscreteCategory" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory" via "Draft.Bicategory")
locale discrete_category
  fixes Obj :: "'a set"
    and Null :: "'a"
  assumes "discrete_category Obj Null"
locale discrete_category
  fixes Obj :: "'a set"
    and Null :: "'a"
  assumes "discrete_category Obj Null"
### theory "Category3.DiscreteCategory"
### 0.112s elapsed time, 0.439s cpu time, 0.087s GC time
Loading theory "Category3.DualCategory" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory" via "Draft.Bicategory" via "Draft.Prebicategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda")
### theory "HOL-Cardinals.Cardinal_Arithmetic"
### 0.169s elapsed time, 0.665s cpu time, 0.087s GC time
Loading theory "Category3.EpiMonoIso" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory" via "Draft.Bicategory" via "Draft.Prebicategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda" via "Category3.SetCat" via "Category3.SetCategory" via "Category3.Functor" via "Category3.InitialTerminal")
locale dual_category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "dual_category (\<cdot>)"
locale category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "category (\<cdot>)"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Cardinals.Ordinal_Arithmetic"
### 0.982s elapsed time, 3.710s cpu time, 1.153s GC time
Loading theory "HOL-Cardinals.Cardinals" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory" via "Draft.Bicategory" via "Draft.Prebicategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda" via "Category3.SetCat" via "Category3.SetCategory")
locale dual_category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "dual_category (\<cdot>)"
### theory "Category3.DualCategory"
### 0.150s elapsed time, 0.591s cpu time, 0.068s GC time
Loading theory "Category3.FreeCategory" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory")
locale graph
  fixes Obj :: "'obj set"
    and Arr :: "'arr set"
    and Dom :: "'arr => 'obj"
    and Cod :: "'arr => 'obj"
  assumes "graph Obj Arr Dom Cod"
locale free_category
  fixes Obj :: "'obj set"
    and Arr :: "'arr set"
    and D :: "'arr => 'obj"
    and C :: "'arr => 'obj"
  assumes "free_category Obj Arr D C"
### theory "HOL-Library.Tree"
### 2.192s elapsed time, 8.348s cpu time, 2.123s GC time
Loading theory "Draft.Templates" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.ExtrEqs")
### theory "Category3.EpiMonoIso"
### 0.218s elapsed time, 0.859s cpu time, 0.068s GC time
Loading theory "Category3.InitialTerminal" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory" via "Draft.Bicategory" via "Draft.Prebicategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda" via "Category3.SetCat" via "Category3.SetCategory" via "Category3.Functor")
locale category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "category (\<cdot>)"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.079s elapsed time, 0.300s cpu time, 0.078s GC time
Loading theory "Category3.ProductCategory" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory" via "Draft.Bicategory" via "Draft.Prebicategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda" via "Category3.FunctorCategory" via "Category3.BinaryFunctor")
### theory "Category3.InitialTerminal"
### 0.097s elapsed time, 0.376s cpu time, 0.078s GC time
Loading theory "Category3.Functor" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory" via "Draft.Bicategory" via "Draft.Prebicategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda" via "Category3.SetCat" via "Category3.SetCategory")
### theory "HOL-Cardinals.Cardinals"
### 0.215s elapsed time, 0.850s cpu time, 0.078s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.ExtrEqs")
locale product_category
  fixes
    C1 :: "'a1 => 'a1 => 'a1"  (infixr \<open>\<cdot>\<^sub>1\<close> 55)
    and
    C2 :: "'a2 => 'a2 => 'a2"  (infixr \<open>\<cdot>\<^sub>2\<close> 55)
  assumes "product_category (\<cdot>\<^sub>1) (\<cdot>\<^sub>2)"
locale discrete_category
  fixes Obj :: "'obj set"
### theory "Category3.ProductCategory"
### 0.256s elapsed time, 1.020s cpu time, 0.063s GC time
locale functor
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a => 'b"
  assumes "functor (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) F"
locale endofunctor
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and F :: "'a => 'a"
  assumes "endofunctor (\<cdot>) F"
locale faithful_functor
  fixes A :: "'a => 'a => 'a"
    and B :: "'b => 'b => 'b"
    and F :: "'a => 'b"
  assumes "faithful_functor A B F"
locale full_functor
  fixes A :: "'a => 'a => 'a"
    and B :: "'b => 'b => 'b"
    and F :: "'a => 'b"
  assumes "full_functor A B F"
locale empty_category
locale quiver
  fixes Arr :: "'arr set"
locale fully_faithful_functor
  fixes A :: "'a => 'a => 'a"
    and B :: "'b => 'b => 'b"
    and F :: "'a => 'b"
  assumes "fully_faithful_functor A B F"
### theory "HOL-Library.BigO"
### 0.629s elapsed time, 2.114s cpu time, 0.196s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SpanBicategoryMoreTemplates")
locale embedding_functor
  fixes A :: "'a => 'a => 'a"
    and B :: "'b => 'b => 'b"
    and F :: "'a => 'b"
  assumes "embedding_functor A B F"
locale embedding_functor
  fixes A :: "'a => 'a => 'a"
    and B :: "'b => 'b => 'b"
    and F :: "'a => 'b"
  assumes "embedding_functor A B F"
locale full_embedding_functor
  fixes A :: "'a => 'a => 'a"
    and B :: "'b => 'b => 'b"
    and F :: "'a => 'b"
  assumes "full_embedding_functor A B F"
locale essentially_surjective_functor
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a => 'b"
  assumes
    "essentially_surjective_functor (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) F"
locale constant_functor
  fixes A :: "'a => 'a => 'a"
    and B :: "'b => 'b => 'b"
    and b :: "'b"
  assumes "constant_functor A B b"
locale identity_functor
  fixes C :: "'a => 'a => 'a"
  assumes "identity_functor C"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.539s elapsed time, 1.651s cpu time, 0.213s GC time
locale composite_functor
  fixes A :: "'a => 'a => 'a"
    and B :: "'b => 'b => 'b"
    and C :: "'c => 'c => 'c"
    and F :: "'a => 'b"
    and G :: "'b => 'c"
  assumes "composite_functor A B C F G"
locale parallel_pair
### theory "Category3.FreeCategory"
### 1.526s elapsed time, 4.876s cpu time, 0.487s GC time
locale inverse_functors
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'b => 'a"
    and G :: "'a => 'b"
  assumes "inverse_functors (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) F G"
locale isomorphic_categories
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
  assumes "isomorphic_categories (\<cdot>\<^sub>A) (\<cdot>\<^sub>B)"
locale invertible_functor
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and G :: "'a => 'b"
  assumes "invertible_functor (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) G"
locale dual_functor
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a => 'b"
  assumes "dual_functor (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) F"
locale category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "category (\<cdot>)"
locale category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "category (\<cdot>)"
### theory "Category3.Functor"
### 2.354s elapsed time, 5.267s cpu time, 0.550s GC time
Loading theory "Category3.NaturalTransformation" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory" via "Draft.Bicategory" via "Draft.Prebicategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda" via "Category3.FunctorCategory" via "Category3.BinaryFunctor")
Loading theory "Category3.Subcategory" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory" via "Draft.Bicategory" via "Draft.Prebicategory")
Loading theory "Category3.SetCategory" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory" via "Draft.Bicategory" via "Draft.Prebicategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda" via "Category3.SetCat")
locale subcategory
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and Arr :: "'a => bool"
  assumes "subcategory (\<cdot>\<^sub>C) Arr"
locale natural_transformation
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a => 'b"
    and G :: "'a => 'b"
    and \<tau> :: "'a => 'b"
  assumes
    "natural_transformation (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) F G \<tau>"
locale set_category_data
  fixes S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<close> 55)
    and img :: "'s => 's"
  assumes "set_category_data (\<cdot>)"
locale set_category_given_img
  fixes S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<close> 55)
    and img :: "'s => 's"
    and \<AA> :: "('t * 't) set"
  assumes "set_category_given_img (\<cdot>) img \<AA>"
locale transformation_by_components
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a => 'b"
    and G :: "'a => 'b"
    and t :: "'a => 'b"
  assumes
    "transformation_by_components (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) F G t"
locale set_category
  fixes S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<close> 55)
    and \<AA> :: "('t * 't) set"
  assumes "set_category (\<cdot>) \<AA>"
locale constant_transformation
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and g :: "'b"
  assumes "constant_transformation (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) g"
locale replete_set_category
  fixes S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<close> 55)
  assumes "replete_set_category (\<cdot>)"
locale set_category
  fixes S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<close> 55)
    and \<AA> :: "('t * 't) set"
  assumes "set_category (\<cdot>) \<AA>"
locale constant_transformation
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and g :: "'b"
  assumes "constant_transformation (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) g"
locale full_subcategory
  fixes C :: "'a => 'a => 'a"
    and Ide :: "'a => bool"
  assumes "full_subcategory C Ide"
locale two_set_categories_bij_betw_Univ
  fixes S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<close> 55)
    and S' :: "'t => 't => 't"  (infixr \<open>\<cdot>\<acute>\<close> 55)
    and \<AA> :: "('u * 'u) set"
    and \<phi> :: "'s => 't"
  assumes
    "two_set_categories_bij_betw_Univ (\<cdot>) (\<cdot>\<acute>) \<AA>
      \<phi>"
locale vertical_composite
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a => 'b"
    and G :: "'a => 'b"
    and H :: "'a => 'b"
    and \<sigma> :: "'a => 'b"
    and \<tau> :: "'a => 'b"
  assumes
    "vertical_composite (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) F G H \<sigma>
      \<tau>"
locale set_category
  fixes S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<close> 55)
    and \<AA> :: "('t * 't) set"
  assumes "set_category (\<cdot>) \<AA>"
locale natural_isomorphism
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a => 'b"
    and G :: "'a => 'b"
    and \<tau> :: "'a => 'b"
  assumes
    "natural_isomorphism (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) F G \<tau>"
locale inverse_transformation
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a => 'b"
    and G :: "'a => 'b"
    and \<tau> :: "'a => 'b"
  assumes
    "inverse_transformation (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) F G \<tau>"
locale concrete_set_category
  fixes S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<AA> :: "('t * 't) set"
    and U :: "'a set"
    and \<iota> :: "'a => 's"
  assumes "concrete_set_category (\<cdot>\<^sub>S) \<AA> U \<iota>"
locale full_subcategory
  fixes C :: "'a => 'a => 'a"
    and Ide :: "'a => bool"
  assumes "full_subcategory C Ide"
locale replete_concrete_set_category
  fixes S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and U :: "'a set"
    and \<iota> :: "'a => 's"
  assumes "replete_concrete_set_category (\<cdot>\<^sub>S) U \<iota>"
### theory "Category3.SetCategory"
### 1.576s elapsed time, 4.822s cpu time, 0.541s GC time
Loading theory "Category3.SetCat" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory" via "Draft.Bicategory" via "Draft.Prebicategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda")
locale setcat
  fixes dummy :: "'e"
    and \<AA> :: "('a * 'a) set"
  assumes "setcat \<AA>"
locale inverse_transformations
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a => 'b"
    and G :: "'a => 'b"
    and \<tau> :: "'a => 'b"
    and \<tau>' :: "'a => 'b"
  assumes
    "inverse_transformations (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) F G \<tau>
      \<tau>'"
### theory "Category3.NaturalTransformation"
### 1.856s elapsed time, 5.677s cpu time, 0.627s GC time
Loading theory "Draft.IsomorphismClass" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory" via "Draft.Bicategory" via "Draft.Prebicategory")
Loading theory "Category3.BinaryFunctor" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory" via "Draft.Bicategory" via "Draft.Prebicategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda" via "Category3.FunctorCategory")
locale category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "category (\<cdot>)"
### theory "Draft.IsomorphismClass"
### 0.110s elapsed time, 0.427s cpu time, 0.091s GC time
locale inclusion_functor
  fixes C :: "'a => 'a => 'a"
    and Arr :: "'a => bool"
  assumes "inclusion_functor C Arr"
locale binary_functor
  fixes
    A1 :: "'a1 => 'a1 => 'a1"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>1\<close> 55)
    and
    A2 :: "'a2 => 'a2 => 'a2"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>2\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a1 * 'a2 => 'b"
  assumes
    "binary_functor (\<cdot>\<^sub>A\<^sub>1) (\<cdot>\<^sub>A\<^sub>2)
      (\<cdot>\<^sub>B) F"
locale replete_setcat
  fixes dummy :: "'e"
locale product_functor
  fixes
    A1 :: "'a1 => 'a1 => 'a1"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>1\<close> 55)
    and
    A2 :: "'a2 => 'a2 => 'a2"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>2\<close> 55)
    and
    B1 :: "'b1 => 'b1 => 'b1"
      (infixr \<open>\<cdot>\<^sub>B\<^sub>1\<close> 55)
    and
    B2 :: "'b2 => 'b2 => 'b2"
      (infixr \<open>\<cdot>\<^sub>B\<^sub>2\<close> 55)
    and F1 :: "'a1 => 'b1"
    and F2 :: "'a2 => 'b2"
  assumes
    "product_functor (\<cdot>\<^sub>A\<^sub>1) (\<cdot>\<^sub>A\<^sub>2)
      (\<cdot>\<^sub>B\<^sub>1) (\<cdot>\<^sub>B\<^sub>2) F1 F2"
locale full_inclusion_functor
  fixes C :: "'a => 'a => 'a"
    and Ide :: "'a => bool"
  assumes "full_inclusion_functor C Ide"
locale full_inclusion_functor
  fixes C :: "'a => 'a => 'a"
    and Ide :: "'a => bool"
  assumes "full_inclusion_functor C Ide"
### theory "Category3.Subcategory"
### 3.495s elapsed time, 10.760s cpu time, 1.127s GC time
locale symmetry_functor
  fixes
    A1 :: "'a1 => 'a1 => 'a1"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>1\<close> 55)
    and
    A2 :: "'a2 => 'a2 => 'a2"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>2\<close> 55)
  assumes
    "symmetry_functor (\<cdot>\<^sub>A\<^sub>1) (\<cdot>\<^sub>A\<^sub>2)"
### theory "Category3.SetCat"
### 2.219s elapsed time, 6.559s cpu time, 0.676s GC time
locale binary_functor
  fixes
    A1 :: "'a1 => 'a1 => 'a1"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>1\<close> 55)
    and
    A2 :: "'a2 => 'a2 => 'a2"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>2\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a1 * 'a2 => 'b"
  assumes
    "binary_functor (\<cdot>\<^sub>A\<^sub>1) (\<cdot>\<^sub>A\<^sub>2)
      (\<cdot>\<^sub>B) F"
locale binary_functor_transformation
  fixes
    A1 :: "'a1 => 'a1 => 'a1"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>1\<close> 55)
    and
    A2 :: "'a2 => 'a2 => 'a2"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>2\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a1 * 'a2 => 'b"
    and G :: "'a1 * 'a2 => 'b"
    and \<tau> :: "'a1 * 'a2 => 'b"
  assumes
    "binary_functor_transformation (\<cdot>\<^sub>A\<^sub>1)
      (\<cdot>\<^sub>A\<^sub>2) (\<cdot>\<^sub>B) F G \<tau>"
### theory "Category3.BinaryFunctor"
### 2.511s elapsed time, 6.385s cpu time, 0.692s GC time
Loading theory "Category3.FunctorCategory" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory" via "Draft.Bicategory" via "Draft.Prebicategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda")
locale functor_category
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
  assumes "functor_category (\<cdot>\<^sub>A) (\<cdot>\<^sub>B)"
locale functor_category
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
  assumes "functor_category (\<cdot>\<^sub>A) (\<cdot>\<^sub>B)"
locale evaluation_functor
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
  assumes "evaluation_functor (\<cdot>\<^sub>A) (\<cdot>\<^sub>B)"
locale currying
  fixes
    A1 :: "'a1 => 'a1 => 'a1"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>1\<close> 55)
    and
    A2 :: "'a2 => 'a2 => 'a2"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>2\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
  assumes
    "currying (\<cdot>\<^sub>A\<^sub>1) (\<cdot>\<^sub>A\<^sub>2)
      (\<cdot>\<^sub>B)"
locale curried_functor
  fixes
    A1 :: "'a1 => 'a1 => 'a1"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>1\<close> 55)
    and
    A2 :: "'a2 => 'a2 => 'a2"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>2\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a1 * 'a2 => 'b"
  assumes
    "curried_functor (\<cdot>\<^sub>A\<^sub>1) (\<cdot>\<^sub>A\<^sub>2)
      (\<cdot>\<^sub>B) F"
locale curried_functor'
  fixes
    A1 :: "'a1 => 'a1 => 'a1"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>1\<close> 55)
    and
    A2 :: "'a2 => 'a2 => 'a2"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>2\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a1 * 'a2 => 'b"
  assumes
    "curried_functor' (\<cdot>\<^sub>A\<^sub>1) (\<cdot>\<^sub>A\<^sub>2)
      (\<cdot>\<^sub>B) F"
### theory "Category3.FunctorCategory"
### 5.455s elapsed time, 5.852s cpu time, 0.543s GC time
Loading theory "Category3.Yoneda" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory" via "Draft.Bicategory" via "Draft.Prebicategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction")
locale hom_functor
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi> :: "'c * 'c => 'c => 's"
  assumes "hom_functor (\<cdot>) (\<cdot>\<^sub>S) \<phi>"
locale hom_functor
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi> :: "'c * 'c => 'c => 's"
  assumes "hom_functor (\<cdot>) (\<cdot>\<^sub>S) \<phi>"
locale category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "category (\<cdot>)"
locale set_valued_functor
  fixes C :: "'c => 'c => 'c"
    and S :: "'s => 's => 's"
    and F :: "'c => 's"
  assumes "set_valued_functor C S F"
locale set_valued_transformation
  fixes C :: "'c => 'c => 'c"
    and S :: "'s => 's => 's"
    and F :: "'c => 's"
    and G :: "'c => 's"
    and \<tau> :: "'c => 's"
  assumes "set_valued_transformation C S F G \<tau>"
locale yoneda_functor
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi> :: "'c * 'c => 'c => 's"
  assumes "yoneda_functor (\<cdot>) (\<cdot>\<^sub>S) \<phi>"
locale yoneda_functor_fixed_object
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi> :: "'c * 'c => 'c => 's"
    and a :: "'c"
  assumes "yoneda_functor_fixed_object (\<cdot>) (\<cdot>\<^sub>S) \<phi> a"
locale yoneda_lemma
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi> :: "'c * 'c => 'c => 's"
    and F :: "'c => 's"
    and a :: "'c"
  assumes "yoneda_lemma (\<cdot>) (\<cdot>\<^sub>S) \<phi> F a"
locale yoneda_lemma_fixed_e
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi> :: "'c * 'c => 'c => 's"
    and F :: "'c => 's"
    and a :: "'c"
    and e :: "'s"
  assumes "yoneda_lemma_fixed_e (\<cdot>) (\<cdot>\<^sub>S) \<phi> F a e"
locale yoneda_lemma_fixed_\<tau>
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi> :: "'c * 'c => 'c => 's"
    and F :: "'c => 's"
    and a :: "'c"
    and \<tau> :: "'c => 's"
  assumes
    "yoneda_lemma_fixed_\<tau> (\<cdot>) (\<cdot>\<^sub>S) \<phi> F a
      \<tau>"
locale yoneda_lemma
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi> :: "'c * 'c => 'c => 's"
    and F :: "'c => 's"
    and a :: "'c"
  assumes "yoneda_lemma (\<cdot>) (\<cdot>\<^sub>S) \<phi> F a"
locale yoneda_lemma_for_hom
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi> :: "'c * 'c => 'c => 's"
    and F :: "'c => 's"
    and a :: "'c"
    and a' :: "'c"
  assumes "yoneda_lemma_for_hom (\<cdot>) (\<cdot>\<^sub>S) \<phi> a a'"
locale yoneda_functor
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi> :: "'c * 'c => 'c => 's"
  assumes "yoneda_functor (\<cdot>) (\<cdot>\<^sub>S) \<phi>"
### theory "Category3.Yoneda"
### 12.021s elapsed time, 16.300s cpu time, 5.943s GC time
Loading theory "Category3.Adjunction" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory" via "Draft.Bicategory" via "Draft.Prebicategory" via "Category3.EquivalenceOfCategories")
locale arrow_from_functor
  fixes D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and F :: "'d => 'c"
    and x :: "'d"
    and y :: "'c"
    and e :: "'c"
  assumes "arrow_from_functor (\<cdot>\<^sub>D) (\<cdot>\<^sub>C) F x y e"
locale terminal_arrow_from_functor
  fixes D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and F :: "'d => 'c"
    and x :: "'d"
    and y :: "'c"
    and e :: "'c"
  assumes
    "terminal_arrow_from_functor (\<cdot>\<^sub>D) (\<cdot>\<^sub>C) F x y
      e"
locale left_adjoint_functor
  fixes D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and F :: "'d => 'c"
  assumes "left_adjoint_functor (\<cdot>\<^sub>D) (\<cdot>\<^sub>C) F"
locale arrow_to_functor
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and G :: "'c => 'd"
    and x :: "'d"
    and y :: "'c"
    and e :: "'d"
  assumes "arrow_to_functor (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) G x y e"
locale initial_arrow_to_functor
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and G :: "'c => 'd"
    and x :: "'d"
    and y :: "'c"
    and e :: "'d"
  assumes
    "initial_arrow_to_functor (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) G x y e"
locale right_adjoint_functor
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and G :: "'c => 'd"
  assumes "right_adjoint_functor (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) G"
locale meta_adjunction
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<phi> :: "'d => 'c => 'd"
    and \<psi> :: "'c => 'd => 'c"
  assumes
    "meta_adjunction (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) F G \<phi> \<psi>"
locale hom_adjunction
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi>C :: "'c * 'c => 'c => 's"
    and \<phi>D :: "'d * 'd => 'd => 's"
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<Phi> :: "'d * 'c => 's"
    and \<Psi> :: "'d * 'c => 's"
  assumes
    "hom_adjunction (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) (\<cdot>\<^sub>S)
      \<phi>C \<phi>D F G \<Phi> \<Psi>"
locale unit_counit_adjunction
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<eta> :: "'d => 'd"
    and \<epsilon> :: "'c => 'c"
  assumes
    "unit_counit_adjunction (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) F G \<eta>
      \<epsilon>"
locale adjunction
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi>C :: "'c * 'c => 'c => 's"
    and \<phi>D :: "'d * 'd => 'd => 's"
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<phi> :: "'d => 'c => 'd"
    and \<psi> :: "'c => 'd => 'c"
    and \<eta> :: "'d => 'd"
    and \<epsilon> :: "'c => 'c"
    and \<Phi> :: "'d * 'c => 's"
    and \<Psi> :: "'d * 'c => 's"
  assumes
    "adjunction (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) (\<cdot>\<^sub>S)
      \<phi>C \<phi>D F G \<phi> \<psi> \<eta> \<epsilon> \<Phi> \<Psi>"
locale meta_adjunction
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<phi> :: "'d => 'c => 'd"
    and \<psi> :: "'c => 'd => 'c"
  assumes
    "meta_adjunction (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) F G \<phi> \<psi>"
locale meta_adjunction
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<phi> :: "'d => 'c => 'd"
    and \<psi> :: "'c => 'd => 'c"
  assumes
    "meta_adjunction (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) F G \<phi> \<psi>"
locale unit_counit_adjunction
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<eta> :: "'d => 'd"
    and \<epsilon> :: "'c => 'c"
  assumes
    "unit_counit_adjunction (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) F G \<eta>
      \<epsilon>"
locale left_adjoint_functor
  fixes D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and F :: "'d => 'c"
  assumes "left_adjoint_functor (\<cdot>\<^sub>D) (\<cdot>\<^sub>C) F"
locale right_adjoint_functor
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and G :: "'c => 'd"
  assumes "right_adjoint_functor (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) G"
locale meta_adjunction
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<phi> :: "'d => 'c => 'd"
    and \<psi> :: "'c => 'd => 'c"
  assumes
    "meta_adjunction (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) F G \<phi> \<psi>"
locale hom_adjunction
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi>C :: "'c * 'c => 'c => 's"
    and \<phi>D :: "'d * 'd => 'd => 's"
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<Phi> :: "'d * 'c => 's"
    and \<Psi> :: "'d * 'c => 's"
  assumes
    "hom_adjunction (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) (\<cdot>\<^sub>S)
      \<phi>C \<phi>D F G \<Phi> \<Psi>"
locale meta_adjunction
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<phi> :: "'d => 'c => 'd"
    and \<psi> :: "'c => 'd => 'c"
  assumes
    "meta_adjunction (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) F G \<phi> \<psi>"
locale unit_counit_adjunction
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<eta> :: "'d => 'd"
    and \<epsilon> :: "'c => 'c"
  assumes
    "unit_counit_adjunction (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) F G \<eta>
      \<epsilon>"
locale hom_adjunction
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi>C :: "'c * 'c => 'c => 's"
    and \<phi>D :: "'d * 'd => 'd => 's"
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<Phi> :: "'d * 'c => 's"
    and \<Psi> :: "'d * 'c => 's"
  assumes
    "hom_adjunction (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) (\<cdot>\<^sub>S)
      \<phi>C \<phi>D F G \<Phi> \<Psi>"
locale left_adjoint_functor
  fixes D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and F :: "'d => 'c"
  assumes "left_adjoint_functor (\<cdot>\<^sub>D) (\<cdot>\<^sub>C) F"
locale right_adjoint_functor
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and G :: "'c => 'd"
  assumes "right_adjoint_functor (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) G"
locale inverse_functors
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'b => 'a"
    and G :: "'a => 'b"
  assumes "inverse_functors (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) F G"
locale composite_adjunction
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and F :: "'b => 'a"
    and G :: "'a => 'b"
    and F' :: "'c => 'b"
    and G' :: "'b => 'c"
    and \<phi> :: "'b => 'a => 'b"
    and \<psi> :: "'a => 'b => 'a"
    and \<phi>' :: "'c => 'b => 'c"
    and \<psi>' :: "'b => 'c => 'b"
  assumes
    "composite_adjunction (\<cdot>\<^sub>A) (\<cdot>\<^sub>B)
      (\<cdot>\<^sub>C) F G F' G' \<phi> \<psi> \<phi>' \<psi>'"
### theory "Category3.Adjunction"
### 20.230s elapsed time, 21.239s cpu time, 1.361s GC time
Loading theory "Category3.EquivalenceOfCategories" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory" via "Draft.Bicategory" via "Draft.Prebicategory")
Loading theory "Category3.Limit" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory" via "Category3.CategoryWithPullbacks")
locale equivalence_of_categories
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<eta> :: "'d => 'd"
    and \<epsilon> :: "'c => 'c"
  assumes
    "equivalence_of_categories (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) F G
      \<eta> \<epsilon>"
locale equivalence_of_categories
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<eta> :: "'d => 'd"
    and \<epsilon> :: "'c => 'c"
  assumes
    "equivalence_of_categories (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) F G
      \<eta> \<epsilon>"
locale equivalence_functor
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and G :: "'c => 'd"
  assumes "equivalence_functor (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) G"
locale endofunctor
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and F :: "'a => 'a"
  assumes "endofunctor (\<cdot>) F"
locale adjoint_equivalence
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<eta> :: "'d => 'd"
    and \<epsilon> :: "'c => 'c"
  assumes
    "adjoint_equivalence (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) F G \<eta>
      \<epsilon>"
locale adjoint_equivalence
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<eta> :: "'d => 'd"
    and \<epsilon> :: "'c => 'c"
  assumes
    "adjoint_equivalence (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) F G \<eta>
      \<epsilon>"
locale representation_of_functor
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi> :: "'c * 'c => 'c => 's"
    and F :: "'c => 's"
    and a :: "'c"
    and \<Phi> :: "'c => 's"
  assumes
    "representation_of_functor (\<cdot>) (\<cdot>\<^sub>S) \<phi> F a
      \<Phi>"
locale fully_faithful_and_essentially_surjective_functor
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and F :: "'c => 'd"
  assumes
    "fully_faithful_and_essentially_surjective_functor (\<cdot>\<^sub>C)
      (\<cdot>\<^sub>D) F"
locale equivalence_of_categories
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<eta> :: "'d => 'd"
    and \<epsilon> :: "'c => 'c"
  assumes
    "equivalence_of_categories (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) F G
      \<eta> \<epsilon>"
### theory "Category3.EquivalenceOfCategories"
### 1.662s elapsed time, 3.498s cpu time, 0.359s GC time
Loading theory "Draft.Prebicategory" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory" via "Draft.Bicategory")
Loading theory "MonoidalCategory.MonoidalCategory" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory" via "Draft.Bicategory")
locale binary_endofunctor
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and T :: "'a * 'a => 'a"
  assumes "binary_endofunctor (\<cdot>) T"
locale weak_composition
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
  assumes "weak_composition (\<cdot>) (\<star>)"
locale two_representations_one_functor
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and F :: "'c => 's"
    and \<phi> :: "'c * 'c => 'c => 's"
    and a :: "'c"
    and \<Phi> :: "'c => 's"
    and a' :: "'c"
    and \<Phi>' :: "'c => 's"
  assumes
    "two_representations_one_functor (\<cdot>) (\<cdot>\<^sub>S) F \<phi> a
      \<Phi> a' \<Phi>'"
locale monoidal_category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and T :: "'a * 'a => 'a"
    and \<alpha> :: "'a * 'a * 'a => 'a"
    and \<iota> :: "'a"
  assumes "monoidal_category (\<cdot>) T \<alpha> \<iota>"
locale diagram
  fixes J :: "'j => 'j => 'j"  (infixr \<open>\<cdot>\<^sub>J\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and D :: "'j => 'c"
  assumes "diagram (\<cdot>\<^sub>J) (\<cdot>) D"
locale cone
  fixes J :: "'j => 'j => 'j"  (infixr \<open>\<cdot>\<^sub>J\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and D :: "'j => 'c"
    and a :: "'c"
    and \<chi> :: "'j => 'c"
  assumes "Limit.cone (\<cdot>\<^sub>J) (\<cdot>) D a \<chi>"
locale functor
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a => 'b"
  assumes "functor (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) F"
locale diagram
  fixes J :: "'j => 'j => 'j"  (infixr \<open>\<cdot>\<^sub>J\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and D :: "'j => 'c"
  assumes "diagram (\<cdot>\<^sub>J) (\<cdot>) D"
locale extended_monoidal_category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and T :: "'a * 'a => 'a"
    and \<alpha> :: "'a * 'a * 'a => 'a"
    and \<iota> :: "'a"
  assumes "extended_monoidal_category (\<cdot>) T \<alpha> \<iota>"
locale cones_functor
  fixes J :: "'j => 'j => 'j"  (infixr \<open>\<cdot>\<^sub>J\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and D :: "'j => 'c"
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<iota> :: "('j => 'c) => 's"
  assumes
    "cones_functor (\<cdot>\<^sub>J) (\<cdot>) D (\<cdot>\<^sub>S) \<iota>"
locale monoidal_category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and T :: "'a * 'a => 'a"
    and \<alpha> :: "'a * 'a * 'a => 'a"
    and \<iota> :: "'a"
  assumes "monoidal_category (\<cdot>) T \<alpha> \<iota>"
locale limit_cone
  fixes J :: "'j => 'j => 'j"  (infixr \<open>\<cdot>\<^sub>J\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and D :: "'j => 'c"
    and a :: "'c"
    and \<chi> :: "'j => 'c"
  assumes "limit_cone (\<cdot>\<^sub>J) (\<cdot>) D a \<chi>"
locale diagram
  fixes J :: "'j => 'j => 'j"  (infixr \<open>\<cdot>\<^sub>J\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and D :: "'j => 'c"
  assumes "diagram (\<cdot>\<^sub>J) (\<cdot>) D"
locale left_hom
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<omega> :: "'a"
  assumes "left_hom (\<cdot>) (\<star>) \<omega>"
locale monoidal_category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and T :: "'a * 'a => 'a"
    and \<alpha> :: "'a * 'a * 'a => 'a"
    and \<iota> :: "'a"
  assumes "monoidal_category (\<cdot>) T \<alpha> \<iota>"
locale monoidal_category_with_alternate_unit
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and T :: "'a * 'a => 'a"
    and \<alpha> :: "'a * 'a * 'a => 'a"
    and \<iota> :: "'a"
    and \<iota>\<^sub>1 :: "'a"
  assumes
    "monoidal_category_with_alternate_unit (\<cdot>) T \<alpha> \<iota>
      \<iota>\<^sub>1"
locale representation_of_cones_functor
  fixes J :: "'j => 'j => 'j"  (infixr \<open>\<cdot>\<^sub>J\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and D :: "'j => 'c"
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi> :: "'c * 'c => 'c => 's"
    and \<iota> :: "('j => 'c) => 's"
    and a :: "'c"
    and \<Phi> :: "'c => 's"
  assumes
    "representation_of_cones_functor (\<cdot>\<^sub>J) (\<cdot>) D
      (\<cdot>\<^sub>S) \<phi> \<iota> a \<Phi>"
locale right_hom
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<omega> :: "'a"
  assumes "right_hom (\<cdot>) (\<star>) \<omega>"
locale elementary_monoidal_category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and tensor :: "'a => 'a => 'a"  (infixr \<open>\<otimes>\<close> 53)
    and unity :: "'a"  (\<open>\<I>\<close>)
    and lunit :: "'a => 'a"  (\<open>\<l>[_]\<close>)
    and runit :: "'a => 'a"  (\<open>\<r>[_]\<close>)
    and assoc :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
  assumes
    "elementary_monoidal_category (\<cdot>) (\<otimes>) \<I> lunit runit
      assoc"
locale limit_situation
  fixes J :: "'j => 'j => 'j"  (infixr \<open>\<cdot>\<^sub>J\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and D :: "'j => 'c"
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi> :: "'c * 'c => 'c => 's"
    and \<iota> :: "('j => 'c) => 's"
    and a :: "'c"
    and \<Phi> :: "'c => 's"
    and \<chi> :: "'j => 'c"
  assumes
    "limit_situation (\<cdot>\<^sub>J) (\<cdot>) D (\<cdot>\<^sub>S) \<phi>
      \<iota> a \<Phi> \<chi>"
locale monoidal_category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and T :: "'a * 'a => 'a"
    and \<alpha> :: "'a * 'a * 'a => 'a"
    and \<iota> :: "'a"
  assumes "monoidal_category (\<cdot>) T \<alpha> \<iota>"
locale elementary_monoidal_category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and tensor :: "'a => 'a => 'a"  (infixr \<open>\<otimes>\<close> 53)
    and unity :: "'a"  (\<open>\<I>\<close>)
    and lunit :: "'a => 'a"  (\<open>\<l>[_]\<close>)
    and runit :: "'a => 'a"  (\<open>\<r>[_]\<close>)
    and assoc :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
  assumes
    "elementary_monoidal_category (\<cdot>) (\<otimes>) \<I> lunit runit
      assoc"
locale weak_composition
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
  assumes "weak_composition (\<cdot>) (\<star>)"
locale limit_cone
  fixes J :: "'j => 'j => 'j"  (infixr \<open>\<cdot>\<^sub>J\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and D :: "'j => 'c"
    and a :: "'c"
    and \<chi> :: "'j => 'c"
  assumes "D.limit_cone a \<chi>"
locale strict_monoidal_category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and T :: "'a * 'a => 'a"
    and \<alpha> :: "'a * 'a * 'a => 'a"
    and \<iota> :: "'a"
  assumes "strict_monoidal_category (\<cdot>) T \<alpha> \<iota>"
locale regular_weak_composition
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
  assumes "regular_weak_composition (\<cdot>) (\<star>)"
locale opposite_monoidal_category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and T\<^sub>C :: "'a * 'a => 'a"
    and \<alpha>\<^sub>C :: "'a * 'a * 'a => 'a"
    and \<iota> :: "'a"
  assumes
    "opposite_monoidal_category (\<cdot>) T\<^sub>C \<alpha>\<^sub>C
      \<iota>"
locale associative_weak_composition
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
  assumes "associative_weak_composition (\<cdot>) (\<star>) \<a>"
locale opposite_monoidal_category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and T\<^sub>C :: "'a * 'a => 'a"
    and \<alpha>\<^sub>C :: "'a * 'a * 'a => 'a"
    and \<iota> :: "'a"
  assumes
    "opposite_monoidal_category (\<cdot>) T\<^sub>C \<alpha>\<^sub>C
      \<iota>"
locale monoidal_language
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "monoidal_language (\<cdot>)"
consts
  Dom :: "'a local.term => 'a local.term"
consts
  Cod :: "'a local.term => 'a local.term"
consts
  Arr :: "'a local.term => bool"
locale right_hom_with_unit
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<iota> :: "'a"
    and a :: "'a"
  assumes "right_hom_with_unit (\<cdot>) (\<star>) \<a> \<iota> a"
consts
  Ide :: "'a local.term => bool"
consts
  Can :: "'a local.term => bool"
consts
  Inv :: "'a local.term => 'a local.term"
Found termination order: "size <*mlex*> {}"
consts
  dim :: "'a local.term => nat"
locale representation_of_cones_functor
  fixes J :: "'j => 'j => 'j"  (infixr \<open>\<cdot>\<^sub>J\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and D :: "'j => 'c"
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi> :: "'c * 'c => 'c => 's"
    and \<iota> :: "('j => 'c) => 's"
    and a :: "'c"
    and \<Phi> :: "'c => 's"
  assumes
    "representation_of_cones_functor (\<cdot>\<^sub>J) (\<cdot>) D
      (\<cdot>\<^sub>S) \<phi> \<iota> a \<Phi>"
locale left_hom_with_unit
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<iota> :: "'a"
    and b :: "'a"
  assumes "left_hom_with_unit (\<cdot>) (\<star>) \<a> \<iota> b"
locale prebicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
  assumes "prebicategory (\<cdot>) (\<star>) \<a>"
locale prebicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
  assumes "prebicategory (\<cdot>) (\<star>) \<a>"
locale horizontal_homs
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "horizontal_homs (\<cdot>) src trg"
locale weak_composition_with_homs
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "weak_composition_with_homs (\<cdot>) (\<star>) src trg"
locale category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "category (\<cdot>)"
locale diagonal_functor
  fixes J :: "'j => 'j => 'j"  (infixr \<open>\<cdot>\<^sub>J\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
  assumes "diagonal_functor (\<cdot>\<^sub>J) (\<cdot>)"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale right_adjoint_to_diagonal_functor
  fixes J :: "'j => 'j => 'j"  (infixr \<open>\<cdot>\<^sub>J\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and G :: "('j => 'c, 'j => 'c) concrete_category.arr => 'c"
    and \<phi> :: "'c => ('j => 'c, 'j => 'c) concrete_category.arr => 'c"
    and
    \<psi> ::
      "('j => 'c, 'j => 'c) concrete_category.arr
       => 'c => ('j => 'c, 'j => 'c) concrete_category.arr"
  assumes
    "right_adjoint_to_diagonal_functor (\<cdot>\<^sub>J) (\<cdot>) G \<phi>
      \<psi>"
locale prebicategory_with_homs
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "prebicategory_with_homs (\<cdot>) (\<star>) \<a> src trg"
locale prebicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
  assumes "prebicategory (\<cdot>) (\<star>) \<a>"
locale prebicategory_with_units
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
  assumes "prebicategory_with_units (\<cdot>) (\<star>) \<a> \<i>"
locale right_adjoint_functor
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and G :: "'c => 'd"
  assumes "right_adjoint_functor (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) G"
locale empty_diagram
  fixes J :: "'j => 'j => 'j"  (infixr \<open>\<cdot>\<^sub>J\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and D :: "'j => 'c"
  assumes "empty_diagram (\<cdot>\<^sub>J) (\<cdot>) D"
locale discrete_diagram
  fixes J :: "'j => 'j => 'j"  (infixr \<open>\<cdot>\<^sub>J\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and D :: "'j => 'c"
  assumes "discrete_diagram (\<cdot>\<^sub>J) (\<cdot>) D"
locale prebicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
  assumes "prebicategory (\<cdot>) (\<star>) \<a>"
locale discrete_diagram_from_map
  fixes I :: "'i set"
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and D :: "'i => 'c"
    and null :: "'i"
  assumes "discrete_diagram_from_map I (\<cdot>) D null"
locale horizontal_composition
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "horizontal_composition (\<cdot>) (\<star>) src trg"
locale product_cone
  fixes J :: "'j => 'j => 'j"  (infixr \<open>\<cdot>\<^sub>J\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and D :: "'j => 'c"
    and a :: "'c"
    and \<pi> :: "'j => 'c"
  assumes "product_cone (\<cdot>\<^sub>J) (\<cdot>) D a \<pi>"
locale discrete_diagram
  fixes J :: "'j => 'j => 'j"  (infixr \<open>\<cdot>\<^sub>J\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and D :: "'j => 'c"
  assumes "discrete_diagram (\<cdot>\<^sub>J) (\<cdot>) D"
locale category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "category (\<cdot>)"
### theory "Draft.Prebicategory"
### 38.686s elapsed time, 120.634s cpu time, 11.819s GC time
locale parallel_pair_diagram
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and f0 :: "'c"
    and f1 :: "'c"
  assumes "parallel_pair_diagram (\<cdot>) f0 f1"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale parallel_pair_diagram
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and f0 :: "'c"
    and f1 :: "'c"
  assumes "parallel_pair_diagram (\<cdot>) f0 f1"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale evaluation_map
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<close> 55)
    and T :: "'d * 'd => 'd"
    and \<alpha> :: "'d * 'd * 'd => 'd"
    and \<iota> :: "'d"
    and V :: "'c => 'd"
  assumes "evaluation_map (\<cdot>\<^sub>C) (\<cdot>) T \<alpha> \<iota> V"
consts
  eval :: "'c local.term => 'd"
### theory "MonoidalCategory.MonoidalCategory"
### 48.572s elapsed time, 147.648s cpu time, 26.685s GC time
Loading theory "Draft.Bicategory" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory")
Loading theory "MonoidalCategory.MonoidalFunctor" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory" via "Draft.InternalAdjunction" via "Draft.Strictness" via "Draft.Pseudofunctor")
locale equalizer_cone
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and f0 :: "'c"
    and f1 :: "'c"
    and e :: "'c"
  assumes "equalizer_cone (\<cdot>) f0 f1 e"
locale category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "category (\<cdot>)"
locale category_with_equalizers
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
  assumes "category_with_equalizers (\<cdot>)"
locale diagram_in_set_category
  fixes J :: "'j => 'j => 'j"  (infixr \<open>\<cdot>\<^sub>J\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<close> 55)
    and \<AA> :: "('a * 'a) set"
    and D :: "'j => 's"
  assumes "diagram_in_set_category (\<cdot>\<^sub>J) (\<cdot>) \<AA> D"
locale diagram_in_replete_set_category
  fixes J :: "'j => 'j => 'j"  (infixr \<open>\<cdot>\<^sub>J\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<close> 55)
    and D :: "'j => 's"
  assumes "diagram_in_replete_set_category (\<cdot>\<^sub>J) (\<cdot>) D"
locale set_category
  fixes S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<close> 55)
    and \<AA> :: "('t * 't) set"
  assumes "set_category (\<cdot>) \<AA>"
locale set_category
  fixes S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<close> 55)
    and \<AA> :: "('t * 't) set"
  assumes "set_category (\<cdot>) \<AA>"
locale discrete_diagram_in_replete_set_category
  fixes J :: "'j => 'j => 'j"  (infixr \<open>\<cdot>\<^sub>J\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<close> 55)
    and D :: "'j => 's"
  assumes
    "discrete_diagram_in_replete_set_category (\<cdot>\<^sub>J) (\<cdot>) D"
locale replete_set_category
  fixes S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<close> 55)
  assumes "replete_set_category (\<cdot>)"
locale monoidal_functor
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and T\<^sub>C :: "'c * 'c => 'c"
    and \<alpha>\<^sub>C :: "'c * 'c * 'c => 'c"
    and \<iota>\<^sub>C :: "'c"
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and T\<^sub>D :: "'d * 'd => 'd"
    and \<alpha>\<^sub>D :: "'d * 'd * 'd => 'd"
    and \<iota>\<^sub>D :: "'d"
    and F :: "'c => 'd"
    and \<phi> :: "'c * 'c => 'd"
  assumes
    "monoidal_functor (\<cdot>\<^sub>C) T\<^sub>C \<alpha>\<^sub>C
      \<iota>\<^sub>C (\<cdot>\<^sub>D) T\<^sub>D \<alpha>\<^sub>D
      \<iota>\<^sub>D F \<phi>"
locale parametrized_diagram
  fixes J :: "'j => 'j => 'j"  (infixr \<open>\<cdot>\<^sub>J\<close> 55)
    and A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and D :: "'j * 'a => 'b"
  assumes
    "parametrized_diagram (\<cdot>\<^sub>J) (\<cdot>\<^sub>A)
      (\<cdot>\<^sub>B) D"
locale bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "bicategory (\<cdot>) (\<star>) \<a> \<i> src trg"
locale category_as_bicategory
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "category_as_bicategory (\<cdot>)"
locale diagram_in_functor_category
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and J :: "'j => 'j => 'j"  (infixr \<open>\<cdot>\<^sub>J\<close> 55)
    and D :: "'j => ('a => 'b, 'a => 'b) concrete_category.arr"
  assumes
    "diagram_in_functor_category (\<cdot>\<^sub>A) (\<cdot>\<^sub>B)
      (\<cdot>\<^sub>J) D"
locale functor_category
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
  assumes "functor_category (\<cdot>\<^sub>A) (\<cdot>\<^sub>B)"
locale yoneda_functor
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi> :: "'c * 'c => 'c => 's"
  assumes "yoneda_functor (\<cdot>) (\<cdot>\<^sub>S) \<phi>"
### theory "Category3.Limit"
### 55.197s elapsed time, 166.344s cpu time, 28.275s GC time
Loading theory "Category3.CategoryWithPullbacks" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory")
locale category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "category (\<cdot>)"
locale cospan_shape
locale monoidal_category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and T :: "'a * 'a => 'a"
    and \<alpha> :: "'a * 'a * 'a => 'a"
    and \<iota> :: "'a"
  assumes "monoidal_category (\<cdot>) T \<alpha> \<iota>"
Found termination order: "{}"
### Ignoring duplicate rewrite rule:
### comp TT BB == Null
### Ignoring duplicate rewrite rule:
### comp AT BB == Null
### Ignoring duplicate rewrite rule:
### comp BB TT == Null
### Ignoring duplicate rewrite rule:
### comp AT TT == Null
### Ignoring duplicate rewrite rule:
### comp BT TT == Null
### Ignoring duplicate rewrite rule:
### comp BB AT == Null
### Ignoring duplicate rewrite rule:
### comp AT AT == Null
### Ignoring duplicate rewrite rule:
### comp BT AT == Null
### Ignoring duplicate rewrite rule:
### comp BB BT == Null
### Ignoring duplicate rewrite rule:
### comp AT BT == Null
### Ignoring duplicate rewrite rule:
### comp BT BT == Null
Found termination order: "{}"
Found termination order: "{}"
locale cospan_diagram
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and f0 :: "'c"
    and f1 :: "'c"
  assumes "cospan_diagram (\<cdot>) f0 f1"
Found termination order: "{}"
locale cospan_diagram
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and f0 :: "'c"
    and f1 :: "'c"
  assumes "cospan_diagram (\<cdot>) f0 f1"
locale prebicategory_with_homs
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "prebicategory_with_homs (\<cdot>) (\<star>) \<a> src trg"
locale pullback_cone
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and f0 :: "'c"
    and f1 :: "'c"
    and p0 :: "'c"
    and p1 :: "'c"
  assumes "pullback_cone (\<cdot>) f0 f1 p0 p1"
locale category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "category (\<cdot>)"
locale category_with_pullbacks
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "category_with_pullbacks (\<cdot>)"
locale elementary_category_with_pullbacks
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and prj0 :: "'a => 'a => 'a"  (\<open>\<p>\<^sub>0[_, _]\<close>)
    and prj1 :: "'a => 'a => 'a"  (\<open>\<p>\<^sub>1[_, _]\<close>)
  assumes "elementary_category_with_pullbacks (\<cdot>) prj0 prj1"
locale category_with_pullbacks
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "category_with_pullbacks (\<cdot>)"
locale elementary_category_with_pullbacks
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and prj0 :: "'a => 'a => 'a"  (\<open>\<p>\<^sub>0[_, _]\<close>)
    and prj1 :: "'a => 'a => 'a"  (\<open>\<p>\<^sub>1[_, _]\<close>)
  assumes "elementary_category_with_pullbacks (\<cdot>) prj0 prj1"
### theory "Category3.CategoryWithPullbacks"
### 7.619s elapsed time, 23.353s cpu time, 2.170s GC time
locale strict_monoidal_functor
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and T\<^sub>C :: "'c * 'c => 'c"
    and \<alpha>\<^sub>C :: "'c * 'c * 'c => 'c"
    and \<iota>\<^sub>C :: "'c"
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and T\<^sub>D :: "'d * 'd => 'd"
    and \<alpha>\<^sub>D :: "'d * 'd * 'd => 'd"
    and \<iota>\<^sub>D :: "'d"
    and F :: "'c => 'd"
  assumes
    "strict_monoidal_functor (\<cdot>\<^sub>C) T\<^sub>C \<alpha>\<^sub>C
      \<iota>\<^sub>C (\<cdot>\<^sub>D) T\<^sub>D \<alpha>\<^sub>D
      \<iota>\<^sub>D F"
locale prebicategory_with_homs_and_units
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes
    "prebicategory_with_homs_and_units (\<cdot>) (\<star>) \<a> \<i> src
      trg"
locale prebicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
  assumes "prebicategory (\<cdot>) (\<star>) \<a>"
locale equivalence_of_monoidal_categories
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and T\<^sub>C :: "'c * 'c => 'c"
    and \<alpha>\<^sub>C :: "'c * 'c * 'c => 'c"
    and \<iota>\<^sub>C :: "'c"
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and T\<^sub>D :: "'d * 'd => 'd"
    and \<alpha>\<^sub>D :: "'d * 'd * 'd => 'd"
    and \<iota>\<^sub>D :: "'d"
    and F :: "'d => 'c"
    and \<phi> :: "'d * 'd => 'c"
    and \<iota> :: "'c"
    and G :: "'c => 'd"
    and \<eta> :: "'d => 'd"
    and \<epsilon> :: "'c => 'c"
  assumes
    "equivalence_of_monoidal_categories (\<cdot>\<^sub>C) T\<^sub>C
      \<alpha>\<^sub>C \<iota>\<^sub>C (\<cdot>\<^sub>D) T\<^sub>D
      \<alpha>\<^sub>D \<iota>\<^sub>D F \<phi> G \<eta> \<epsilon>"
### theory "MonoidalCategory.MonoidalFunctor"
### 19.159s elapsed time, 52.309s cpu time, 4.879s GC time
locale bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "bicategory (\<cdot>) (\<star>) \<a> \<i> src trg"
locale vertically_discrete_bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes
    "vertically_discrete_bicategory (\<cdot>) (\<star>) \<a> \<i> src trg"
locale bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "bicategory (\<cdot>) (\<star>) \<a> \<i> src trg"
locale bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "bicategory (\<cdot>) (\<star>) \<a> \<i> src trg"
locale extended_bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "extended_bicategory (\<cdot>) (\<star>) \<a> \<i> src trg"
### theory "Draft.Bicategory"
### 37.725s elapsed time, 72.247s cpu time, 6.832s GC time
Loading theory "Draft.Coherence" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory" via "Draft.InternalAdjunction" via "Draft.CanonicalIsos")
Loading theory "Draft.InternalEquivalence" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory" via "Draft.InternalAdjunction" via "Draft.Strictness" via "Draft.Pseudofunctor")
Loading theory "Draft.Subbicategory" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory" via "Draft.InternalAdjunction" via "Draft.Strictness" via "Draft.Pseudofunctor")
locale subbicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<^sub>B\<close> 55)
    and
    \<a>\<^sub>B :: "'a => 'a => 'a => 'a"
      (\<open>\<a>\<^sub>B[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src\<^sub>B :: "'a => 'a"
    and trg\<^sub>B :: "'a => 'a"
    and Arr :: "'a => bool"
  assumes
    "subbicategory (\<cdot>\<^sub>B) (\<star>\<^sub>B) \<a>\<^sub>B \<i>
      src\<^sub>B trg\<^sub>B Arr"
locale bicategorical_language
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "bicategorical_language (\<cdot>) src trg"
locale adjunction_data_in_bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
    and f :: "'a"
    and g :: "'a"
    and \<eta> :: "'a"
    and \<epsilon> :: "'a"
  assumes
    "adjunction_data_in_bicategory (\<cdot>) (\<star>) \<a> \<i> src trg f g
      \<eta> \<epsilon>"
locale equivalence_in_bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
    and f :: "'a"
    and g :: "'a"
    and \<eta> :: "'a"
    and \<epsilon> :: "'a"
  assumes
    "equivalence_in_bicategory (\<cdot>) (\<star>) \<a> \<i> src trg f g
      \<eta> \<epsilon>"
locale bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "bicategory (\<cdot>) (\<star>) \<a> \<i> src trg"
locale composite_equivalence_in_bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
    and f :: "'a"
    and g :: "'a"
    and \<zeta> :: "'a"
    and \<xi> :: "'a"
    and h :: "'a"
    and k :: "'a"
    and \<sigma> :: "'a"
    and \<tau> :: "'a"
  assumes
    "composite_equivalence_in_bicategory (\<cdot>) (\<star>) \<a> \<i> src
      trg f g \<zeta> \<xi> h k \<sigma> \<tau>"
consts
  Src :: "'a local.term => 'a local.term"
consts
  Trg :: "'a local.term => 'a local.term"
consts
  Dom :: "'a local.term => 'a local.term"
consts
  Cod :: "'a local.term => 'a local.term"
consts
  Arr :: "'a local.term => bool"
consts
  Ide :: "'a local.term => bool"
consts
  Obj :: "'a local.term => bool"
consts
  Can :: "'a local.term => bool"
locale bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "bicategory (\<cdot>) (\<star>) \<a> \<i> src trg"
consts
  Inv :: "'a local.term => 'a local.term"
Found termination order: "size <*mlex*> {}"
locale bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "bicategory (\<cdot>) (\<star>) \<a> \<i> src trg"
locale subbicategory_at_object
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<^sub>B\<close> 55)
    and
    \<a>\<^sub>B :: "'a => 'a => 'a => 'a"
      (\<open>\<a>\<^sub>B[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src\<^sub>B :: "'a => 'a"
    and trg\<^sub>B :: "'a => 'a"
    and a :: "'a"
    and w :: "'a"
    and \<omega> :: "'a"
  assumes
    "subbicategory_at_object (\<cdot>\<^sub>B) (\<star>\<^sub>B)
      \<a>\<^sub>B \<i> src\<^sub>B trg\<^sub>B a w \<omega>"
locale two_equivalences_in_bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
    and e\<^sub>0 :: "'a"
    and d\<^sub>0 :: "'a"
    and \<eta>\<^sub>0 :: "'a"
    and \<epsilon>\<^sub>0 :: "'a"
    and e\<^sub>1 :: "'a"
    and d\<^sub>1 :: "'a"
    and \<eta>\<^sub>1 :: "'a"
    and \<epsilon>\<^sub>1 :: "'a"
  assumes
    "two_equivalences_in_bicategory (\<cdot>) (\<star>) \<a> \<i> src trg
      e\<^sub>0 d\<^sub>0 \<eta>\<^sub>0 \<epsilon>\<^sub>0 e\<^sub>1
      d\<^sub>1 \<eta>\<^sub>1 \<epsilon>\<^sub>1"
### theory "Draft.Subbicategory"
### 29.175s elapsed time, 91.305s cpu time, 23.146s GC time
locale bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "bicategory (\<cdot>) (\<star>) \<a> \<i> src trg"
### theory "Draft.InternalEquivalence"
### 32.591s elapsed time, 100.597s cpu time, 24.169s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  dim :: "'a local.term => nat"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale Coherence.evaluation_map
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and src\<^sub>C :: "'c => 'c"
    and trg\<^sub>C :: "'c => 'c"
    and V :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'b => 'b => 'b"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'b => 'b => 'b => 'b"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'b => 'b"  (\<open>\<i>[_]\<close>)
    and src :: "'b => 'b"
    and trg :: "'b => 'b"
    and E :: "'c => 'b"
  assumes
    "Coherence.evaluation_map (\<cdot>\<^sub>C) src\<^sub>C trg\<^sub>C
      (\<cdot>) (\<star>) \<a> \<i> src trg E"
consts
  eval :: "'c local.term => 'b"
locale self_evaluation_map
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "self_evaluation_map (\<cdot>) (\<star>) \<a> \<i> src trg"
locale Coherence.evaluation_map
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and src\<^sub>C :: "'c => 'c"
    and trg\<^sub>C :: "'c => 'c"
    and V :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'b => 'b => 'b"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'b => 'b => 'b => 'b"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'b => 'b"  (\<open>\<i>[_]\<close>)
    and src :: "'b => 'b"
    and trg :: "'b => 'b"
    and E :: "'c => 'b"
  assumes
    "Coherence.evaluation_map (\<cdot>\<^sub>C) src\<^sub>C trg\<^sub>C
      (\<cdot>) (\<star>) \<a> \<i> src trg E"
### theory "Draft.Coherence"
### 132.127s elapsed time, 336.857s cpu time, 211.996s GC time
Loading theory "Draft.CanonicalIsos" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory" via "Draft.InternalAdjunction")
Loading theory "Draft.Pseudofunctor" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory" via "Draft.InternalAdjunction" via "Draft.Strictness")
locale bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "bicategory (\<cdot>) (\<star>) \<a> \<i> src trg"
locale weak_arrow_of_homs
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and src\<^sub>C :: "'c => 'c"
    and trg\<^sub>C :: "'c => 'c"
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and src\<^sub>D :: "'d => 'd"
    and trg\<^sub>D :: "'d => 'd"
    and F :: "'c => 'd"
  assumes
    "weak_arrow_of_homs (\<cdot>\<^sub>C) src\<^sub>C trg\<^sub>C
      (\<cdot>\<^sub>D) src\<^sub>D trg\<^sub>D F"
### theory "Draft.CanonicalIsos"
### 5.793s elapsed time, 12.475s cpu time, 1.930s GC time
locale pseudofunctor
  fixes
    V\<^sub>C :: "'c => 'c => 'c"
      (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and
    H\<^sub>C :: "'c => 'c => 'c"
      (infixr \<open>\<star>\<^sub>C\<close> 53)
    and
    \<a>\<^sub>C :: "'c => 'c => 'c => 'c"
      (\<open>\<a>\<^sub>C[_, _, _]\<close>)
    and \<i>\<^sub>C :: "'c => 'c"  (\<open>\<i>\<^sub>C[_]\<close>)
    and src\<^sub>C :: "'c => 'c"
    and trg\<^sub>C :: "'c => 'c"
    and
    V\<^sub>D :: "'d => 'd => 'd"
      (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and
    H\<^sub>D :: "'d => 'd => 'd"
      (infixr \<open>\<star>\<^sub>D\<close> 53)
    and
    \<a>\<^sub>D :: "'d => 'd => 'd => 'd"
      (\<open>\<a>\<^sub>D[_, _, _]\<close>)
    and \<i>\<^sub>D :: "'d => 'd"  (\<open>\<i>\<^sub>D[_]\<close>)
    and src\<^sub>D :: "'d => 'd"
    and trg\<^sub>D :: "'d => 'd"
    and F :: "'c => 'd"
    and \<Phi> :: "'c * 'c => 'd"
  assumes
    "pseudofunctor (\<cdot>\<^sub>C) (\<star>\<^sub>C) \<a>\<^sub>C
      \<i>\<^sub>C src\<^sub>C trg\<^sub>C (\<cdot>\<^sub>D)
      (\<star>\<^sub>D) \<a>\<^sub>D \<i>\<^sub>D src\<^sub>D trg\<^sub>D F
      \<Phi>"
locale pseudofunctor
  fixes
    V\<^sub>C :: "'c => 'c => 'c"
      (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and
    H\<^sub>C :: "'c => 'c => 'c"
      (infixr \<open>\<star>\<^sub>C\<close> 53)
    and
    \<a>\<^sub>C :: "'c => 'c => 'c => 'c"
      (\<open>\<a>\<^sub>C[_, _, _]\<close>)
    and \<i>\<^sub>C :: "'c => 'c"  (\<open>\<i>\<^sub>C[_]\<close>)
    and src\<^sub>C :: "'c => 'c"
    and trg\<^sub>C :: "'c => 'c"
    and
    V\<^sub>D :: "'d => 'd => 'd"
      (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and
    H\<^sub>D :: "'d => 'd => 'd"
      (infixr \<open>\<star>\<^sub>D\<close> 53)
    and
    \<a>\<^sub>D :: "'d => 'd => 'd => 'd"
      (\<open>\<a>\<^sub>D[_, _, _]\<close>)
    and \<i>\<^sub>D :: "'d => 'd"  (\<open>\<i>\<^sub>D[_]\<close>)
    and src\<^sub>D :: "'d => 'd"
    and trg\<^sub>D :: "'d => 'd"
    and F :: "'c => 'd"
    and \<Phi> :: "'c * 'c => 'd"
  assumes
    "pseudofunctor (\<cdot>\<^sub>C) (\<star>\<^sub>C) \<a>\<^sub>C
      \<i>\<^sub>C src\<^sub>C trg\<^sub>C (\<cdot>\<^sub>D)
      (\<star>\<^sub>D) \<a>\<^sub>D \<i>\<^sub>D src\<^sub>D trg\<^sub>D F
      \<Phi>"
locale op_bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and
    H\<^sub>B :: "'a => 'a => 'a"
      (infixr \<open>\<star>\<^sub>B\<close> 53)
    and
    \<a>\<^sub>B :: "'a => 'a => 'a => 'a"
      (\<open>\<a>\<^sub>B[_, _, _]\<close>)
    and \<i>\<^sub>B :: "'a => 'a"  (\<open>\<i>\<^sub>B[_]\<close>)
    and src\<^sub>B :: "'a => 'a"
    and trg\<^sub>B :: "'a => 'a"
  assumes
    "op_bicategory (\<cdot>) (\<star>\<^sub>B) \<a>\<^sub>B \<i>\<^sub>B
      src\<^sub>B trg\<^sub>B"
locale pseudofunctor
  fixes
    V\<^sub>C :: "'c => 'c => 'c"
      (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and
    H\<^sub>C :: "'c => 'c => 'c"
      (infixr \<open>\<star>\<^sub>C\<close> 53)
    and
    \<a>\<^sub>C :: "'c => 'c => 'c => 'c"
      (\<open>\<a>\<^sub>C[_, _, _]\<close>)
    and \<i>\<^sub>C :: "'c => 'c"  (\<open>\<i>\<^sub>C[_]\<close>)
    and src\<^sub>C :: "'c => 'c"
    and trg\<^sub>C :: "'c => 'c"
    and
    V\<^sub>D :: "'d => 'd => 'd"
      (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and
    H\<^sub>D :: "'d => 'd => 'd"
      (infixr \<open>\<star>\<^sub>D\<close> 53)
    and
    \<a>\<^sub>D :: "'d => 'd => 'd => 'd"
      (\<open>\<a>\<^sub>D[_, _, _]\<close>)
    and \<i>\<^sub>D :: "'d => 'd"  (\<open>\<i>\<^sub>D[_]\<close>)
    and src\<^sub>D :: "'d => 'd"
    and trg\<^sub>D :: "'d => 'd"
    and F :: "'c => 'd"
    and \<Phi> :: "'c * 'c => 'd"
  assumes
    "pseudofunctor (\<cdot>\<^sub>C) (\<star>\<^sub>C) \<a>\<^sub>C
      \<i>\<^sub>C src\<^sub>C trg\<^sub>C (\<cdot>\<^sub>D)
      (\<star>\<^sub>D) \<a>\<^sub>D \<i>\<^sub>D src\<^sub>D trg\<^sub>D F
      \<Phi>"
locale pseudofunctor
  fixes
    V\<^sub>C :: "'c => 'c => 'c"
      (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and
    H\<^sub>C :: "'c => 'c => 'c"
      (infixr \<open>\<star>\<^sub>C\<close> 53)
    and
    \<a>\<^sub>C :: "'c => 'c => 'c => 'c"
      (\<open>\<a>\<^sub>C[_, _, _]\<close>)
    and \<i>\<^sub>C :: "'c => 'c"  (\<open>\<i>\<^sub>C[_]\<close>)
    and src\<^sub>C :: "'c => 'c"
    and trg\<^sub>C :: "'c => 'c"
    and
    V\<^sub>D :: "'d => 'd => 'd"
      (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and
    H\<^sub>D :: "'d => 'd => 'd"
      (infixr \<open>\<star>\<^sub>D\<close> 53)
    and
    \<a>\<^sub>D :: "'d => 'd => 'd => 'd"
      (\<open>\<a>\<^sub>D[_, _, _]\<close>)
    and \<i>\<^sub>D :: "'d => 'd"  (\<open>\<i>\<^sub>D[_]\<close>)
    and src\<^sub>D :: "'d => 'd"
    and trg\<^sub>D :: "'d => 'd"
    and F :: "'c => 'd"
    and \<Phi> :: "'c * 'c => 'd"
  assumes
    "pseudofunctor (\<cdot>\<^sub>C) (\<star>\<^sub>C) \<a>\<^sub>C
      \<i>\<^sub>C src\<^sub>C trg\<^sub>C (\<cdot>\<^sub>D)
      (\<star>\<^sub>D) \<a>\<^sub>D \<i>\<^sub>D src\<^sub>D trg\<^sub>D F
      \<Phi>"
locale identity_pseudofunctor
  fixes
    V\<^sub>B :: "'b => 'b => 'b"
      (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and
    H\<^sub>B :: "'b => 'b => 'b"
      (infixr \<open>\<star>\<^sub>B\<close> 53)
    and
    \<a>\<^sub>B :: "'b => 'b => 'b => 'b"
      (\<open>\<a>\<^sub>B[_, _, _]\<close>)
    and \<i>\<^sub>B :: "'b => 'b"  (\<open>\<i>\<^sub>B[_]\<close>)
    and src\<^sub>B :: "'b => 'b"
    and trg\<^sub>B :: "'b => 'b"
  assumes
    "identity_pseudofunctor (\<cdot>\<^sub>B) (\<star>\<^sub>B) \<a>\<^sub>B
      \<i>\<^sub>B src\<^sub>B trg\<^sub>B"
locale embedding_pseudofunctor
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<^sub>B\<close> 55)
    and
    \<a>\<^sub>B :: "'a => 'a => 'a => 'a"
      (\<open>\<a>\<^sub>B[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src\<^sub>B :: "'a => 'a"
    and trg\<^sub>B :: "'a => 'a"
    and Arr :: "'a => bool"
  assumes
    "embedding_pseudofunctor (\<cdot>\<^sub>B) (\<star>\<^sub>B)
      \<a>\<^sub>B \<i> src\<^sub>B trg\<^sub>B Arr"
locale composite_pseudofunctor
  fixes
    V\<^sub>B :: "'b => 'b => 'b"
      (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and
    H\<^sub>B :: "'b => 'b => 'b"
      (infixr \<open>\<star>\<^sub>B\<close> 53)
    and
    \<a>\<^sub>B :: "'b => 'b => 'b => 'b"
      (\<open>\<a>\<^sub>B[_, _, _]\<close>)
    and \<i>\<^sub>B :: "'b => 'b"  (\<open>\<i>\<^sub>B[_]\<close>)
    and src\<^sub>B :: "'b => 'b"
    and trg\<^sub>B :: "'b => 'b"
    and
    V\<^sub>C :: "'c => 'c => 'c"
      (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and
    H\<^sub>C :: "'c => 'c => 'c"
      (infixr \<open>\<star>\<^sub>C\<close> 53)
    and
    \<a>\<^sub>C :: "'c => 'c => 'c => 'c"
      (\<open>\<a>\<^sub>C[_, _, _]\<close>)
    and \<i>\<^sub>C :: "'c => 'c"  (\<open>\<i>\<^sub>C[_]\<close>)
    and src\<^sub>C :: "'c => 'c"
    and trg\<^sub>C :: "'c => 'c"
    and
    V\<^sub>D :: "'d => 'd => 'd"
      (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and
    H\<^sub>D :: "'d => 'd => 'd"
      (infixr \<open>\<star>\<^sub>D\<close> 53)
    and
    \<a>\<^sub>D :: "'d => 'd => 'd => 'd"
      (\<open>\<a>\<^sub>D[_, _, _]\<close>)
    and \<i>\<^sub>D :: "'d => 'd"  (\<open>\<i>\<^sub>D[_]\<close>)
    and src\<^sub>D :: "'d => 'd"
    and trg\<^sub>D :: "'d => 'd"
    and F :: "'b => 'c"
    and \<Phi>\<^sub>F :: "'b * 'b => 'c"
    and G :: "'c => 'd"
    and \<Phi>\<^sub>G :: "'c * 'c => 'd"
  assumes
    "composite_pseudofunctor (\<cdot>\<^sub>B) (\<star>\<^sub>B)
      \<a>\<^sub>B \<i>\<^sub>B src\<^sub>B trg\<^sub>B (\<cdot>\<^sub>C)
      (\<star>\<^sub>C) \<a>\<^sub>C \<i>\<^sub>C src\<^sub>C trg\<^sub>C
      (\<cdot>\<^sub>D) (\<star>\<^sub>D) \<a>\<^sub>D \<i>\<^sub>D
      src\<^sub>D trg\<^sub>D F \<Phi>\<^sub>F G \<Phi>\<^sub>G"
locale restricted_pseudofunctor
  fixes
    V\<^sub>C :: "'c => 'c => 'c"
      (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and
    H\<^sub>C :: "'c => 'c => 'c"
      (infixr \<open>\<star>\<^sub>C\<close> 53)
    and
    \<a>\<^sub>C :: "'c => 'c => 'c => 'c"
      (\<open>\<a>\<^sub>C[_, _, _]\<close>)
    and \<i>\<^sub>C :: "'c => 'c"  (\<open>\<i>\<^sub>C[_]\<close>)
    and src\<^sub>C :: "'c => 'c"
    and trg\<^sub>C :: "'c => 'c"
    and
    V\<^sub>D :: "'d => 'd => 'd"
      (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and
    H\<^sub>D :: "'d => 'd => 'd"
      (infixr \<open>\<star>\<^sub>D\<close> 53)
    and
    \<a>\<^sub>D :: "'d => 'd => 'd => 'd"
      (\<open>\<a>\<^sub>D[_, _, _]\<close>)
    and \<i>\<^sub>D :: "'d => 'd"  (\<open>\<i>\<^sub>D[_]\<close>)
    and src\<^sub>D :: "'d => 'd"
    and trg\<^sub>D :: "'d => 'd"
    and F :: "'c => 'd"
    and \<Phi> :: "'c * 'c => 'd"
    and Arr :: "'c => bool"
  assumes
    "restricted_pseudofunctor (\<cdot>\<^sub>C) (\<star>\<^sub>C)
      \<a>\<^sub>C \<i>\<^sub>C src\<^sub>C trg\<^sub>C (\<cdot>\<^sub>D)
      (\<star>\<^sub>D) \<a>\<^sub>D \<i>\<^sub>D src\<^sub>D trg\<^sub>D F
      \<Phi> Arr"
locale corestricted_pseudofunctor
  fixes
    V\<^sub>C :: "'c => 'c => 'c"
      (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and
    H\<^sub>C :: "'c => 'c => 'c"
      (infixr \<open>\<star>\<^sub>C\<close> 53)
    and
    \<a>\<^sub>C :: "'c => 'c => 'c => 'c"
      (\<open>\<a>\<^sub>C[_, _, _]\<close>)
    and \<i>\<^sub>C :: "'c => 'c"  (\<open>\<i>\<^sub>C[_]\<close>)
    and src\<^sub>C :: "'c => 'c"
    and trg\<^sub>C :: "'c => 'c"
    and
    V\<^sub>D :: "'d => 'd => 'd"
      (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and
    H\<^sub>D :: "'d => 'd => 'd"
      (infixr \<open>\<star>\<^sub>D\<close> 53)
    and
    \<a>\<^sub>D :: "'d => 'd => 'd => 'd"
      (\<open>\<a>\<^sub>D[_, _, _]\<close>)
    and \<i>\<^sub>D :: "'d => 'd"  (\<open>\<i>\<^sub>D[_]\<close>)
    and src\<^sub>D :: "'d => 'd"
    and trg\<^sub>D :: "'d => 'd"
    and F :: "'c => 'd"
    and \<Phi> :: "'c * 'c => 'd"
    and Obj :: "'d => bool"
  assumes
    "corestricted_pseudofunctor (\<cdot>\<^sub>C) (\<star>\<^sub>C)
      \<a>\<^sub>C \<i>\<^sub>C src\<^sub>C trg\<^sub>C (\<cdot>\<^sub>D)
      (\<star>\<^sub>D) \<a>\<^sub>D \<i>\<^sub>D src\<^sub>D trg\<^sub>D F
      \<Phi> Obj"
locale pseudofunctor
  fixes
    V\<^sub>C :: "'c => 'c => 'c"
      (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and
    H\<^sub>C :: "'c => 'c => 'c"
      (infixr \<open>\<star>\<^sub>C\<close> 53)
    and
    \<a>\<^sub>C :: "'c => 'c => 'c => 'c"
      (\<open>\<a>\<^sub>C[_, _, _]\<close>)
    and \<i>\<^sub>C :: "'c => 'c"  (\<open>\<i>\<^sub>C[_]\<close>)
    and src\<^sub>C :: "'c => 'c"
    and trg\<^sub>C :: "'c => 'c"
    and
    V\<^sub>D :: "'d => 'd => 'd"
      (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and
    H\<^sub>D :: "'d => 'd => 'd"
      (infixr \<open>\<star>\<^sub>D\<close> 53)
    and
    \<a>\<^sub>D :: "'d => 'd => 'd => 'd"
      (\<open>\<a>\<^sub>D[_, _, _]\<close>)
    and \<i>\<^sub>D :: "'d => 'd"  (\<open>\<i>\<^sub>D[_]\<close>)
    and src\<^sub>D :: "'d => 'd"
    and trg\<^sub>D :: "'d => 'd"
    and F :: "'c => 'd"
    and \<Phi> :: "'c * 'c => 'd"
  assumes
    "pseudofunctor (\<cdot>\<^sub>C) (\<star>\<^sub>C) \<a>\<^sub>C
      \<i>\<^sub>C src\<^sub>C trg\<^sub>C (\<cdot>\<^sub>D)
      (\<star>\<^sub>D) \<a>\<^sub>D \<i>\<^sub>D src\<^sub>D trg\<^sub>D F
      \<Phi>"
locale equivalence_pseudofunctor
  fixes
    V\<^sub>C :: "'a => 'a => 'a"
      (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and
    H\<^sub>C :: "'a => 'a => 'a"
      (infixr \<open>\<star>\<^sub>C\<close> 53)
    and
    \<a>\<^sub>C :: "'a => 'a => 'a => 'a"
      (\<open>\<a>\<^sub>C[_, _, _]\<close>)
    and \<i>\<^sub>C :: "'a => 'a"  (\<open>\<i>\<^sub>C[_]\<close>)
    and src\<^sub>C :: "'a => 'a"
    and trg\<^sub>C :: "'a => 'a"
    and
    V\<^sub>D :: "'b => 'b => 'b"
      (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and
    H\<^sub>D :: "'b => 'b => 'b"
      (infixr \<open>\<star>\<^sub>D\<close> 53)
    and
    \<a>\<^sub>D :: "'b => 'b => 'b => 'b"
      (\<open>\<a>\<^sub>D[_, _, _]\<close>)
    and \<i>\<^sub>D :: "'b => 'b"  (\<open>\<i>\<^sub>D[_]\<close>)
    and src\<^sub>D :: "'b => 'b"
    and trg\<^sub>D :: "'b => 'b"
    and F :: "'a => 'b"
    and \<Phi> :: "'a * 'a => 'b"
  assumes
    "equivalence_pseudofunctor (\<cdot>\<^sub>C) (\<star>\<^sub>C)
      \<a>\<^sub>C \<i>\<^sub>C src\<^sub>C trg\<^sub>C (\<cdot>\<^sub>D)
      (\<star>\<^sub>D) \<a>\<^sub>D \<i>\<^sub>D src\<^sub>D trg\<^sub>D F
      \<Phi>"
locale equivalence_pseudofunctor_at_hom
  fixes
    V\<^sub>C :: "'a => 'a => 'a"
      (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and
    H\<^sub>C :: "'a => 'a => 'a"
      (infixr \<open>\<star>\<^sub>C\<close> 53)
    and
    \<a>\<^sub>C :: "'a => 'a => 'a => 'a"
      (\<open>\<a>\<^sub>C[_, _, _]\<close>)
    and \<i>\<^sub>C :: "'a => 'a"  (\<open>\<i>\<^sub>C[_]\<close>)
    and src\<^sub>C :: "'a => 'a"
    and trg\<^sub>C :: "'a => 'a"
    and
    V\<^sub>D :: "'b => 'b => 'b"
      (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and
    H\<^sub>D :: "'b => 'b => 'b"
      (infixr \<open>\<star>\<^sub>D\<close> 53)
    and
    \<a>\<^sub>D :: "'b => 'b => 'b => 'b"
      (\<open>\<a>\<^sub>D[_, _, _]\<close>)
    and \<i>\<^sub>D :: "'b => 'b"  (\<open>\<i>\<^sub>D[_]\<close>)
    and src\<^sub>D :: "'b => 'b"
    and trg\<^sub>D :: "'b => 'b"
    and F :: "'a => 'b"
    and \<Phi> :: "'a * 'a => 'b"
    and a :: "'a"
    and a' :: "'a"
  assumes
    "equivalence_pseudofunctor_at_hom (\<cdot>\<^sub>C) (\<star>\<^sub>C)
      \<a>\<^sub>C \<i>\<^sub>C src\<^sub>C trg\<^sub>C (\<cdot>\<^sub>D)
      (\<star>\<^sub>D) \<a>\<^sub>D \<i>\<^sub>D src\<^sub>D trg\<^sub>D F
      \<Phi> a a'"
locale identity_pseudofunctor
  fixes
    V\<^sub>B :: "'b => 'b => 'b"
      (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and
    H\<^sub>B :: "'b => 'b => 'b"
      (infixr \<open>\<star>\<^sub>B\<close> 53)
    and
    \<a>\<^sub>B :: "'b => 'b => 'b => 'b"
      (\<open>\<a>\<^sub>B[_, _, _]\<close>)
    and \<i>\<^sub>B :: "'b => 'b"  (\<open>\<i>\<^sub>B[_]\<close>)
    and src\<^sub>B :: "'b => 'b"
    and trg\<^sub>B :: "'b => 'b"
  assumes
    "identity_pseudofunctor (\<cdot>\<^sub>B) (\<star>\<^sub>B) \<a>\<^sub>B
      \<i>\<^sub>B src\<^sub>B trg\<^sub>B"
locale composite_equivalence_pseudofunctor
  fixes
    V\<^sub>B :: "'a => 'a => 'a"
      (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and
    H\<^sub>B :: "'a => 'a => 'a"
      (infixr \<open>\<star>\<^sub>B\<close> 53)
    and
    \<a>\<^sub>B :: "'a => 'a => 'a => 'a"
      (\<open>\<a>\<^sub>B[_, _, _]\<close>)
    and \<i>\<^sub>B :: "'a => 'a"  (\<open>\<i>\<^sub>B[_]\<close>)
    and src\<^sub>B :: "'a => 'a"
    and trg\<^sub>B :: "'a => 'a"
    and
    V\<^sub>C :: "'b => 'b => 'b"
      (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and
    H\<^sub>C :: "'b => 'b => 'b"
      (infixr \<open>\<star>\<^sub>C\<close> 53)
    and
    \<a>\<^sub>C :: "'b => 'b => 'b => 'b"
      (\<open>\<a>\<^sub>C[_, _, _]\<close>)
    and \<i>\<^sub>C :: "'b => 'b"  (\<open>\<i>\<^sub>C[_]\<close>)
    and src\<^sub>C :: "'b => 'b"
    and trg\<^sub>C :: "'b => 'b"
    and
    V\<^sub>D :: "'c => 'c => 'c"
      (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and
    H\<^sub>D :: "'c => 'c => 'c"
      (infixr \<open>\<star>\<^sub>D\<close> 53)
    and
    \<a>\<^sub>D :: "'c => 'c => 'c => 'c"
      (\<open>\<a>\<^sub>D[_, _, _]\<close>)
    and \<i>\<^sub>D :: "'c => 'c"  (\<open>\<i>\<^sub>D[_]\<close>)
    and src\<^sub>D :: "'c => 'c"
    and trg\<^sub>D :: "'c => 'c"
    and F :: "'a => 'b"
    and \<Phi>\<^sub>F :: "'a * 'a => 'b"
    and G :: "'b => 'c"
    and \<Phi>\<^sub>G :: "'b * 'b => 'c"
  assumes
    "composite_equivalence_pseudofunctor (\<cdot>\<^sub>B) (\<star>\<^sub>B)
      \<a>\<^sub>B \<i>\<^sub>B src\<^sub>B trg\<^sub>B (\<cdot>\<^sub>C)
      (\<star>\<^sub>C) \<a>\<^sub>C \<i>\<^sub>C src\<^sub>C trg\<^sub>C
      (\<cdot>\<^sub>D) (\<star>\<^sub>D) \<a>\<^sub>D \<i>\<^sub>D
      src\<^sub>D trg\<^sub>D F \<Phi>\<^sub>F G \<Phi>\<^sub>G"
### theory "Draft.Pseudofunctor"
### 125.714s elapsed time, 165.297s cpu time, 47.087s GC time
Loading theory "Draft.Strictness" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory" via "Draft.InternalAdjunction")
locale normal_bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "normal_bicategory (\<cdot>) (\<star>) \<a> \<i> src trg"
locale strict_bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "strict_bicategory (\<cdot>) (\<star>) \<a> \<i> src trg"
locale bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "bicategory (\<cdot>) (\<star>) \<a> \<i> src trg"
locale strictified_bicategory
  fixes
    V\<^sub>B :: "'a => 'a => 'a"
      (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and
    H\<^sub>B :: "'a => 'a => 'a"
      (infixr \<open>\<star>\<^sub>B\<close> 53)
    and
    \<a>\<^sub>B :: "'a => 'a => 'a => 'a"
      (\<open>\<a>\<^sub>B[_, _, _]\<close>)
    and \<i>\<^sub>B :: "'a => 'a"  (\<open>\<i>\<^sub>B[_]\<close>)
    and src\<^sub>B :: "'a => 'a"
    and trg\<^sub>B :: "'a => 'a"
  assumes
    "strictified_bicategory (\<cdot>\<^sub>B) (\<star>\<^sub>B) \<a>\<^sub>B
      \<i>\<^sub>B src\<^sub>B trg\<^sub>B"
locale pseudofunctor_into_strict_bicategory
  fixes
    V\<^sub>C :: "'a => 'a => 'a"
      (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and
    H\<^sub>C :: "'a => 'a => 'a"
      (infixr \<open>\<star>\<^sub>C\<close> 53)
    and
    \<a>\<^sub>C :: "'a => 'a => 'a => 'a"
      (\<open>\<a>\<^sub>C[_, _, _]\<close>)
    and \<i>\<^sub>C :: "'a => 'a"  (\<open>\<i>\<^sub>C[_]\<close>)
    and src\<^sub>C :: "'a => 'a"
    and trg\<^sub>C :: "'a => 'a"
    and
    V\<^sub>D :: "'b => 'b => 'b"
      (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and
    H\<^sub>D :: "'b => 'b => 'b"
      (infixr \<open>\<star>\<^sub>D\<close> 53)
    and
    \<a>\<^sub>D :: "'b => 'b => 'b => 'b"
      (\<open>\<a>\<^sub>D[_, _, _]\<close>)
    and \<i>\<^sub>D :: "'b => 'b"  (\<open>\<i>\<^sub>D[_]\<close>)
    and src\<^sub>D :: "'b => 'b"
    and trg\<^sub>D :: "'b => 'b"
    and F :: "'a => 'b"
    and \<Phi> :: "'a * 'a => 'b"
  assumes
    "pseudofunctor_into_strict_bicategory (\<cdot>\<^sub>C)
      (\<star>\<^sub>C) \<a>\<^sub>C \<i>\<^sub>C src\<^sub>C trg\<^sub>C
      (\<cdot>\<^sub>D) (\<star>\<^sub>D) \<a>\<^sub>D \<i>\<^sub>D
      src\<^sub>D trg\<^sub>D F \<Phi>"
locale equivalence_in_strict_bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
    and f :: "'a"
    and g :: "'a"
    and \<eta> :: "'a"
    and \<epsilon> :: "'a"
  assumes
    "equivalence_in_strict_bicategory (\<cdot>) (\<star>) \<a> \<i> src trg
      f g \<eta> \<epsilon>"
locale equivalence_in_bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
    and f :: "'a"
    and g :: "'a"
    and \<eta> :: "'a"
    and \<epsilon> :: "'a"
  assumes "internal_equivalence f g \<eta> \<epsilon>"
locale equivalence_in_strict_bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
    and f :: "'a"
    and g :: "'a"
    and \<eta> :: "'a"
    and \<epsilon> :: "'a"
  assumes
    "equivalence_in_strict_bicategory (\<cdot>) (\<star>) \<a> \<i> src trg
      f g \<eta> \<epsilon>"
### theory "Draft.Strictness"
### 88.847s elapsed time, 103.485s cpu time, 20.108s GC time
Loading theory "Draft.InternalAdjunction" (required by "Draft.SpanBicategoryMoreTemplates" via "Draft.SpanBicategory")
locale adjunction_in_bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
    and f :: "'a"
    and g :: "'a"
    and \<eta> :: "'a"
    and \<epsilon> :: "'a"
  assumes
    "adjunction_in_bicategory (\<cdot>) (\<star>) \<a> \<i> src trg f g
      \<eta> \<epsilon>"
locale bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "bicategory (\<cdot>) (\<star>) \<a> \<i> src trg"
locale adjunction_in_bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
    and f :: "'a"
    and g :: "'a"
    and \<eta> :: "'a"
    and \<epsilon> :: "'a"
  assumes
    "adjunction_in_bicategory (\<cdot>) (\<star>) \<a> \<i> src trg f g
      \<eta> \<epsilon>"
locale adjunction_in_normal_bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
    and f :: "'a"
    and g :: "'a"
    and \<eta> :: "'a"
    and \<epsilon> :: "'a"
  assumes
    "adjunction_in_normal_bicategory (\<cdot>) (\<star>) \<a> \<i> src trg f
      g \<eta> \<epsilon>"
locale adjunction_in_strict_bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
    and f :: "'a"
    and g :: "'a"
    and \<eta> :: "'a"
    and \<epsilon> :: "'a"
  assumes
    "adjunction_in_strict_bicategory (\<cdot>) (\<star>) \<a> \<i> src trg f
      g \<eta> \<epsilon>"
locale bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "bicategory (\<cdot>) (\<star>) \<a> \<i> src trg"
locale pseudofunctor
  fixes
    V\<^sub>C :: "'c => 'c => 'c"
      (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and
    H\<^sub>C :: "'c => 'c => 'c"
      (infixr \<open>\<star>\<^sub>C\<close> 53)
    and
    \<a>\<^sub>C :: "'c => 'c => 'c => 'c"
      (\<open>\<a>\<^sub>C[_, _, _]\<close>)
    and \<i>\<^sub>C :: "'c => 'c"  (\<open>\<i>\<^sub>C[_]\<close>)
    and src\<^sub>C :: "'c => 'c"
    and trg\<^sub>C :: "'c => 'c"
    and
    V\<^sub>D :: "'d => 'd => 'd"
      (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and
    H\<^sub>D :: "'d => 'd => 'd"
      (infixr \<open>\<star>\<^sub>D\<close> 53)
    and
    \<a>\<^sub>D :: "'d => 'd => 'd => 'd"
      (\<open>\<a>\<^sub>D[_, _, _]\<close>)
    and \<i>\<^sub>D :: "'d => 'd"  (\<open>\<i>\<^sub>D[_]\<close>)
    and src\<^sub>D :: "'d => 'd"
    and trg\<^sub>D :: "'d => 'd"
    and F :: "'c => 'd"
    and \<Phi> :: "'c * 'c => 'd"
  assumes
    "pseudofunctor (\<cdot>\<^sub>C) (\<star>\<^sub>C) \<a>\<^sub>C
      \<i>\<^sub>C src\<^sub>C trg\<^sub>C (\<cdot>\<^sub>D)
      (\<star>\<^sub>D) \<a>\<^sub>D \<i>\<^sub>D src\<^sub>D trg\<^sub>D F
      \<Phi>"
locale equivalence_pseudofunctor
  fixes
    V\<^sub>C :: "'a => 'a => 'a"
      (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and
    H\<^sub>C :: "'a => 'a => 'a"
      (infixr \<open>\<star>\<^sub>C\<close> 53)
    and
    \<a>\<^sub>C :: "'a => 'a => 'a => 'a"
      (\<open>\<a>\<^sub>C[_, _, _]\<close>)
    and \<i>\<^sub>C :: "'a => 'a"  (\<open>\<i>\<^sub>C[_]\<close>)
    and src\<^sub>C :: "'a => 'a"
    and trg\<^sub>C :: "'a => 'a"
    and
    V\<^sub>D :: "'b => 'b => 'b"
      (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and
    H\<^sub>D :: "'b => 'b => 'b"
      (infixr \<open>\<star>\<^sub>D\<close> 53)
    and
    \<a>\<^sub>D :: "'b => 'b => 'b => 'b"
      (\<open>\<a>\<^sub>D[_, _, _]\<close>)
    and \<i>\<^sub>D :: "'b => 'b"  (\<open>\<i>\<^sub>D[_]\<close>)
    and src\<^sub>D :: "'b => 'b"
    and trg\<^sub>D :: "'b => 'b"
    and F :: "'a => 'b"
    and \<Phi> :: "'a * 'a => 'b"
  assumes
    "equivalence_pseudofunctor (\<cdot>\<^sub>C) (\<star>\<^sub>C)
      \<a>\<^sub>C \<i>\<^sub>C src\<^sub>C trg\<^sub>C (\<cdot>\<^sub>D)
      (\<star>\<^sub>D) \<a>\<^sub>D \<i>\<^sub>D src\<^sub>D trg\<^sub>D F
      \<Phi>"
locale composite_adjunction_in_strict_bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
    and f :: "'a"
    and g :: "'a"
    and \<zeta> :: "'a"
    and \<xi> :: "'a"
    and h :: "'a"
    and k :: "'a"
    and \<sigma> :: "'a"
    and \<tau> :: "'a"
  assumes
    "composite_adjunction_in_strict_bicategory (\<cdot>) (\<star>) \<a> \<i>
      src trg f g \<zeta> \<xi> h k \<sigma> \<tau>"
locale strict_bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "strict_bicategory (\<cdot>) (\<star>) \<a> \<i> src trg"
locale bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "bicategory (\<cdot>) (\<star>) \<a> \<i> src trg"
locale chosen_right_adjoints
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "chosen_right_adjoints (\<cdot>) (\<star>) \<a> \<i> src trg"
locale map_in_bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
    and f :: "'a"
  assumes "map_in_bicategory (\<cdot>) (\<star>) \<a> \<i> src trg f"
locale adjoint_equivalence_in_bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
    and f :: "'a"
    and g :: "'a"
    and \<eta> :: "'a"
    and \<epsilon> :: "'a"
  assumes
    "adjoint_equivalence_in_bicategory (\<cdot>) (\<star>) \<a> \<i> src trg
      f g \<eta> \<epsilon>"
locale bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "bicategory (\<cdot>) (\<star>) \<a> \<i> src trg"
locale strict_bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "strict_bicategory (\<cdot>) (\<star>) \<a> \<i> src trg"
locale bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "bicategory (\<cdot>) (\<star>) \<a> \<i> src trg"
locale strict_bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "strict_bicategory (\<cdot>) (\<star>) \<a> \<i> src trg"
locale bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "bicategory (\<cdot>) (\<star>) \<a> \<i> src trg"
locale chosen_right_adjoints
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "chosen_right_adjoints (\<cdot>) (\<star>) \<a> \<i> src trg"
locale bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "bicategory (\<cdot>) (\<star>) \<a> \<i> src trg"
### theory "Draft.InternalAdjunction"
### 144.916s elapsed time, 177.524s cpu time, 44.773s GC time
Loading theory "Draft.SpanBicategory" (required by "Draft.SpanBicategoryMoreTemplates")
locale span_in_category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and S :: "'a span_data"  (structure)
  assumes "span_in_category (\<cdot>) S"
locale arrow_of_spans
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and \<mu> :: "'a arrow_of_spans_data"  (structure)
  assumes "arrow_of_spans (\<cdot>) \<mu>"
locale identity_arrow_of_spans
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and \<mu> :: "'a arrow_of_spans_data"  (structure)
  assumes "identity_arrow_of_spans (\<cdot>) \<mu>"
locale span_vertical_category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "span_vertical_category (\<cdot>)"
locale span_vertical_category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "span_vertical_category (\<cdot>)"
locale composite_span
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and prj0 :: "'a => 'a => 'a"  (\<open>\<p>\<^sub>0[_, _]\<close>)
    and prj1 :: "'a => 'a => 'a"  (\<open>\<p>\<^sub>1[_, _]\<close>)
    and S :: "'a span_data"  (structure)
    and T :: "'a span_data"  (structure)
  assumes "composite_span (\<cdot>) prj0 prj1 S T"
locale span_bicategory
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and prj0 :: "'a => 'a => 'a"  (\<open>\<p>\<^sub>0[_, _]\<close>)
    and prj1 :: "'a => 'a => 'a"  (\<open>\<p>\<^sub>1[_, _]\<close>)
  assumes "span_bicategory (\<cdot>) prj0 prj1"
locale span_bicategory
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and prj0 :: "'a => 'a => 'a"  (\<open>\<p>\<^sub>0[_, _]\<close>)
    and prj1 :: "'a => 'a => 'a"  (\<open>\<p>\<^sub>1[_, _]\<close>)
  assumes "span_bicategory (\<cdot>) prj0 prj1"
locale two_composable_arrows_of_spans
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and prj0 :: "'a => 'a => 'a"  (\<open>\<p>\<^sub>0[_, _]\<close>)
    and prj1 :: "'a => 'a => 'a"  (\<open>\<p>\<^sub>1[_, _]\<close>)
    and \<mu> :: "'a arrow_of_spans_data"  (structure)
    and \<nu> :: "'a arrow_of_spans_data"  (structure)
  assumes "two_composable_arrows_of_spans (\<cdot>) prj0 prj1 \<mu> \<nu>"
locale two_composable_identity_arrows_of_spans
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and prj0 :: "'a => 'a => 'a"  (\<open>\<p>\<^sub>0[_, _]\<close>)
    and prj1 :: "'a => 'a => 'a"  (\<open>\<p>\<^sub>1[_, _]\<close>)
    and \<mu> :: "'a arrow_of_spans_data"  (structure)
    and \<nu> :: "'a arrow_of_spans_data"  (structure)
  assumes
    "two_composable_identity_arrows_of_spans (\<cdot>) prj0 prj1 \<mu>
      \<nu>"
locale three_composable_arrows_of_spans
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and prj0 :: "'a => 'a => 'a"  (\<open>\<p>\<^sub>0[_, _]\<close>)
    and prj1 :: "'a => 'a => 'a"  (\<open>\<p>\<^sub>1[_, _]\<close>)
    and \<mu> :: "'a arrow_of_spans_data"  (structure)
    and \<nu> :: "'a arrow_of_spans_data"  (structure)
    and \<pi> :: "'a arrow_of_spans_data"  (structure)
  assumes
    "three_composable_arrows_of_spans (\<cdot>) prj0 prj1 \<mu> \<nu> \<pi>"
locale three_composable_identity_arrows_of_spans
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and prj0 :: "'a => 'a => 'a"  (\<open>\<p>\<^sub>0[_, _]\<close>)
    and prj1 :: "'a => 'a => 'a"  (\<open>\<p>\<^sub>1[_, _]\<close>)
    and \<mu> :: "'a arrow_of_spans_data"  (structure)
    and \<nu> :: "'a arrow_of_spans_data"  (structure)
    and \<pi> :: "'a arrow_of_spans_data"  (structure)
  assumes
    "three_composable_identity_arrows_of_spans (\<cdot>) prj0 prj1 \<mu>
      \<nu> \<pi>"
locale three_composable_arrows_of_spans
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and prj0 :: "'a => 'a => 'a"  (\<open>\<p>\<^sub>0[_, _]\<close>)
    and prj1 :: "'a => 'a => 'a"  (\<open>\<p>\<^sub>1[_, _]\<close>)
    and \<mu> :: "'a arrow_of_spans_data"  (structure)
    and \<nu> :: "'a arrow_of_spans_data"  (structure)
    and \<pi> :: "'a arrow_of_spans_data"  (structure)
  assumes
    "three_composable_arrows_of_spans (\<cdot>) prj0 prj1 \<mu> \<nu> \<pi>"
locale span_bicategory
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and prj0 :: "'a => 'a => 'a"  (\<open>\<p>\<^sub>0[_, _]\<close>)
    and prj1 :: "'a => 'a => 'a"  (\<open>\<p>\<^sub>1[_, _]\<close>)
  assumes "span_bicategory (\<cdot>) prj0 prj1"
locale four_composable_arrows_of_spans
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and prj0 :: "'a => 'a => 'a"  (\<open>\<p>\<^sub>0[_, _]\<close>)
    and prj1 :: "'a => 'a => 'a"  (\<open>\<p>\<^sub>1[_, _]\<close>)
    and \<mu> :: "'a arrow_of_spans_data"  (structure)
    and \<nu> :: "'a arrow_of_spans_data"  (structure)
    and \<pi> :: "'a arrow_of_spans_data"  (structure)
    and \<rho> :: "'a arrow_of_spans_data"  (structure)
  assumes
    "four_composable_arrows_of_spans (\<cdot>) prj0 prj1 \<mu> \<nu> \<pi>
      \<rho>"
locale four_composable_identity_arrows_of_spans
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and prj0 :: "'a => 'a => 'a"  (\<open>\<p>\<^sub>0[_, _]\<close>)
    and prj1 :: "'a => 'a => 'a"  (\<open>\<p>\<^sub>1[_, _]\<close>)
    and \<mu> :: "'a arrow_of_spans_data"  (structure)
    and \<nu> :: "'a arrow_of_spans_data"  (structure)
    and \<pi> :: "'a arrow_of_spans_data"  (structure)
    and \<rho> :: "'a arrow_of_spans_data"  (structure)
  assumes
    "four_composable_identity_arrows_of_spans (\<cdot>) prj0 prj1 \<mu>
      \<nu> \<pi> \<rho>"
locale span_bicategory
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and prj0 :: "'a => 'a => 'a"  (\<open>\<p>\<^sub>0[_, _]\<close>)
    and prj1 :: "'a => 'a => 'a"  (\<open>\<p>\<^sub>1[_, _]\<close>)
  assumes "span_bicategory (\<cdot>) prj0 prj1"
locale span_bicategory
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and prj0 :: "'a => 'a => 'a"  (\<open>\<p>\<^sub>0[_, _]\<close>)
    and prj1 :: "'a => 'a => 'a"  (\<open>\<p>\<^sub>1[_, _]\<close>)
  assumes "span_bicategory (\<cdot>) prj0 prj1"
locale adjunction_data_in_span_bicategory
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and prj0 :: "'a => 'a => 'a"  (\<open>\<p>\<^sub>0[_, _]\<close>)
    and prj1 :: "'a => 'a => 'a"  (\<open>\<p>\<^sub>1[_, _]\<close>)
    and f :: "'a arrow_of_spans_data"
    and g :: "'a arrow_of_spans_data"
    and \<eta> :: "'a arrow_of_spans_data"
    and \<epsilon> :: "'a arrow_of_spans_data"
  assumes
    "adjunction_data_in_span_bicategory (\<cdot>) prj0 prj1 f g \<eta>
      \<epsilon>"
locale span_bicategory
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and prj0 :: "'a => 'a => 'a"  (\<open>\<p>\<^sub>0[_, _]\<close>)
    and prj1 :: "'a => 'a => 'a"  (\<open>\<p>\<^sub>1[_, _]\<close>)
  assumes "span_bicategory (\<cdot>) prj0 prj1"
### theory "Draft.SpanBicategory"
### 95.838s elapsed time, 127.715s cpu time, 43.657s GC time
Loading theory "Draft.SpanBicategoryMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.SpanBicategoryMoreTemplates"
### 0.454s elapsed time, 0.716s cpu time, 0.110s GC time
val it = (): unit
