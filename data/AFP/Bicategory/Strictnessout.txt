Loading theory "HOL-Cardinals.Fun_More" (required by "Draft.StrictnessMoreTemplates" via "Draft.Strictness" via "Draft.Pseudofunctor" via "MonoidalCategory.MonoidalFunctor" via "MonoidalCategory.MonoidalCategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda" via "Category3.SetCat" via "Category3.SetCategory" via "HOL-Cardinals.Cardinals" via "HOL-Cardinals.Ordinal_Arithmetic" via "HOL-Cardinals.Wellorder_Constructions" via "HOL-Cardinals.Wellorder_Embedding")
Loading theory "HOL-Cardinals.Order_Relation_More" (required by "Draft.StrictnessMoreTemplates" via "Draft.Strictness" via "Draft.Pseudofunctor" via "MonoidalCategory.MonoidalFunctor" via "MonoidalCategory.MonoidalCategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda" via "Category3.SetCat" via "Category3.SetCategory" via "HOL-Cardinals.Cardinals" via "HOL-Cardinals.Ordinal_Arithmetic" via "HOL-Cardinals.Wellorder_Constructions" via "HOL-Cardinals.Wellorder_Embedding" via "HOL-Cardinals.Wellorder_Relation" via "HOL-Cardinals.Wellfounded_More")
Loading theory "HOL-Library.FuncSet" (required by "Draft.StrictnessMoreTemplates" via "Draft.Strictness" via "Category3.ConcreteCategory" via "Category3.Category")
Loading theory "HOL-Cardinals.Order_Union" (required by "Draft.StrictnessMoreTemplates" via "Draft.Strictness" via "Draft.Pseudofunctor" via "MonoidalCategory.MonoidalFunctor" via "MonoidalCategory.MonoidalCategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda" via "Category3.SetCat" via "Category3.SetCategory" via "HOL-Cardinals.Cardinals" via "HOL-Cardinals.Ordinal_Arithmetic" via "HOL-Cardinals.Wellorder_Constructions")
### theory "HOL-Cardinals.Fun_More"
### 0.059s elapsed time, 0.262s cpu time, 0.000s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.StrictnessMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "HOL-Cardinals.Order_Union"
### 0.080s elapsed time, 0.354s cpu time, 0.000s GC time
Loading theory "HOL-Cardinals.Wellorder_Extension" (required by "Draft.StrictnessMoreTemplates" via "Draft.Strictness" via "Draft.Pseudofunctor" via "MonoidalCategory.MonoidalFunctor" via "MonoidalCategory.MonoidalCategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda" via "Category3.SetCat" via "Category3.SetCategory" via "HOL-Cardinals.Cardinals")
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Cardinals.Wellorder_Extension"
### 0.088s elapsed time, 0.335s cpu time, 0.083s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.StrictnessMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Library.Function_Algebras"
### 0.120s elapsed time, 0.460s cpu time, 0.083s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.StrictnessMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Cardinals.Order_Relation_More"
### 0.246s elapsed time, 0.990s cpu time, 0.083s GC time
Loading theory "HOL-Cardinals.Wellfounded_More" (required by "Draft.StrictnessMoreTemplates" via "Draft.Strictness" via "Draft.Pseudofunctor" via "MonoidalCategory.MonoidalFunctor" via "MonoidalCategory.MonoidalCategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda" via "Category3.SetCat" via "Category3.SetCategory" via "HOL-Cardinals.Cardinals" via "HOL-Cardinals.Ordinal_Arithmetic" via "HOL-Cardinals.Wellorder_Constructions" via "HOL-Cardinals.Wellorder_Embedding" via "HOL-Cardinals.Wellorder_Relation")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Cardinals.Wellfounded_More"
### 0.168s elapsed time, 0.533s cpu time, 0.354s GC time
Loading theory "HOL-Cardinals.Wellorder_Relation" (required by "Draft.StrictnessMoreTemplates" via "Draft.Strictness" via "Draft.Pseudofunctor" via "MonoidalCategory.MonoidalFunctor" via "MonoidalCategory.MonoidalCategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda" via "Category3.SetCat" via "Category3.SetCategory" via "HOL-Cardinals.Cardinals" via "HOL-Cardinals.Ordinal_Arithmetic" via "HOL-Cardinals.Wellorder_Constructions" via "HOL-Cardinals.Wellorder_Embedding")
locale wo_rel
  fixes r :: "('a * 'a) set"
  assumes "wo_rel r"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.321s elapsed time, 1.127s cpu time, 0.400s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.StrictnessMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.419s elapsed time, 1.523s cpu time, 0.400s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.StrictnessMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Cardinals.Wellorder_Relation"
### 0.191s elapsed time, 0.753s cpu time, 0.046s GC time
Loading theory "HOL-Cardinals.Wellorder_Embedding" (required by "Draft.StrictnessMoreTemplates" via "Draft.Strictness" via "Draft.Pseudofunctor" via "MonoidalCategory.MonoidalFunctor" via "MonoidalCategory.MonoidalCategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda" via "Category3.SetCat" via "Category3.SetCategory" via "HOL-Cardinals.Cardinals" via "HOL-Cardinals.Ordinal_Arithmetic" via "HOL-Cardinals.Wellorder_Constructions")
### theory "HOL-Library.FuncSet"
### 0.635s elapsed time, 2.386s cpu time, 0.483s GC time
Loading theory "Category3.Category" (required by "Draft.StrictnessMoreTemplates" via "Draft.Strictness" via "Category3.ConcreteCategory")
locale partial_magma
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "partial_magma (\<cdot>)"
### theory "HOL-Cardinals.Wellorder_Embedding"
### 0.163s elapsed time, 0.633s cpu time, 0.096s GC time
Loading theory "HOL-Cardinals.Wellorder_Constructions" (required by "Draft.StrictnessMoreTemplates" via "Draft.Strictness" via "Draft.Pseudofunctor" via "MonoidalCategory.MonoidalFunctor" via "MonoidalCategory.MonoidalCategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda" via "Category3.SetCat" via "Category3.SetCategory" via "HOL-Cardinals.Cardinals" via "HOL-Cardinals.Ordinal_Arithmetic")
locale category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "category (\<cdot>)"
### theory "Category3.Category"
### 0.262s elapsed time, 1.032s cpu time, 0.171s GC time
Loading theory "Category3.ConcreteCategory" (required by "Draft.StrictnessMoreTemplates" via "Draft.Strictness")
locale concrete_category
  fixes Obj :: "'o set"
    and Hom :: "'o => 'o => 'a set"
    and Id :: "'o => 'a"
    and Comp :: "'o => 'o => 'o => 'a => 'a => 'a"
  assumes "concrete_category Obj Hom Id Comp"
consts
  shift :: "'a list => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
Proofs for coinductive predicate(s) "streamsp"
consts
  right :: "'a tree => 'a tree"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
locale wo_rel
  fixes r :: "('a * 'a) set"
  assumes "wo_rel r"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Cardinals.Wellorder_Constructions"
### 0.732s elapsed time, 2.740s cpu time, 0.857s GC time
Loading theory "HOL-Cardinals.Cardinal_Order_Relation" (required by "Draft.StrictnessMoreTemplates" via "Draft.Strictness" via "Draft.Pseudofunctor" via "MonoidalCategory.MonoidalFunctor" via "MonoidalCategory.MonoidalCategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda" via "Category3.SetCat" via "Category3.SetCategory" via "HOL-Cardinals.Cardinals" via "HOL-Cardinals.Cardinal_Arithmetic")
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.003s elapsed time, 3.819s cpu time, 0.954s GC time
Loading theory "HOL-Cardinals.Ordinal_Arithmetic" (required by "Draft.StrictnessMoreTemplates" via "Draft.Strictness" via "Draft.Pseudofunctor" via "MonoidalCategory.MonoidalFunctor" via "MonoidalCategory.MonoidalCategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda" via "Category3.SetCat" via "Category3.SetCategory" via "HOL-Cardinals.Cardinals")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
locale wo_rel
  fixes r :: "('a * 'a) set"
  assumes "wo_rel r"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale wo_rel2
  fixes r :: "('a * 'a) set"
    and s :: "('b * 'b) set"
  assumes "wo_rel2 r s"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Cardinals.Cardinal_Order_Relation"
### 0.966s elapsed time, 3.650s cpu time, 1.271s GC time
Loading theory "HOL-Cardinals.Cardinal_Arithmetic" (required by "Draft.StrictnessMoreTemplates" via "Draft.Strictness" via "Draft.Pseudofunctor" via "MonoidalCategory.MonoidalFunctor" via "MonoidalCategory.MonoidalCategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda" via "Category3.SetCat" via "Category3.SetCategory" via "HOL-Cardinals.Cardinals")
### theory "Category3.ConcreteCategory"
### 1.649s elapsed time, 6.200s cpu time, 2.110s GC time
Loading theory "Category3.DiscreteCategory" (required by "Draft.StrictnessMoreTemplates" via "Draft.Strictness" via "Draft.Pseudofunctor" via "Draft.Bicategory")
locale discrete_category
  fixes Obj :: "'a set"
    and Null :: "'a"
  assumes "discrete_category Obj Null"
Found termination order: "size <*mlex*> {}"
locale discrete_category
  fixes Obj :: "'a set"
    and Null :: "'a"
  assumes "discrete_category Obj Null"
### theory "Category3.DiscreteCategory"
### 0.124s elapsed time, 0.485s cpu time, 0.075s GC time
Loading theory "Category3.DualCategory" (required by "Draft.StrictnessMoreTemplates" via "Draft.Strictness" via "Draft.Pseudofunctor" via "MonoidalCategory.MonoidalFunctor" via "MonoidalCategory.MonoidalCategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda")
### theory "HOL-Cardinals.Ordinal_Arithmetic"
### 1.064s elapsed time, 4.025s cpu time, 1.402s GC time
Loading theory "Category3.EpiMonoIso" (required by "Draft.StrictnessMoreTemplates" via "Draft.Strictness" via "Draft.Pseudofunctor" via "MonoidalCategory.MonoidalFunctor" via "MonoidalCategory.MonoidalCategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda" via "Category3.SetCat" via "Category3.SetCategory" via "Category3.Functor" via "Category3.InitialTerminal")
### theory "HOL-Cardinals.Cardinal_Arithmetic"
### 0.207s elapsed time, 0.804s cpu time, 0.131s GC time
Loading theory "HOL-Cardinals.Cardinals" (required by "Draft.StrictnessMoreTemplates" via "Draft.Strictness" via "Draft.Pseudofunctor" via "MonoidalCategory.MonoidalFunctor" via "MonoidalCategory.MonoidalCategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda" via "Category3.SetCat" via "Category3.SetCategory")
locale dual_category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "dual_category (\<cdot>)"
locale category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "category (\<cdot>)"
### theory "HOL-Library.Tree"
### 2.317s elapsed time, 8.832s cpu time, 2.444s GC time
Loading theory "Draft.Templates" (required by "Draft.StrictnessMoreTemplates" via "Draft.ExtrEqs")
locale dual_category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "dual_category (\<cdot>)"
### theory "Category3.DualCategory"
### 0.162s elapsed time, 0.645s cpu time, 0.088s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.StrictnessMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.058s elapsed time, 0.228s cpu time, 0.000s GC time
### theory "Category3.EpiMonoIso"
### 0.222s elapsed time, 0.842s cpu time, 0.088s GC time
Loading theory "Category3.InitialTerminal" (required by "Draft.StrictnessMoreTemplates" via "Draft.Strictness" via "Draft.Pseudofunctor" via "MonoidalCategory.MonoidalFunctor" via "MonoidalCategory.MonoidalCategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda" via "Category3.SetCat" via "Category3.SetCategory" via "Category3.Functor")
Loading theory "Category3.ProductCategory" (required by "Draft.StrictnessMoreTemplates" via "Draft.Strictness" via "Draft.Pseudofunctor" via "MonoidalCategory.MonoidalFunctor" via "MonoidalCategory.MonoidalCategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda" via "Category3.FunctorCategory" via "Category3.BinaryFunctor")
### theory "HOL-Cardinals.Cardinals"
### 0.218s elapsed time, 0.827s cpu time, 0.088s GC time
locale category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "category (\<cdot>)"
### theory "Category3.InitialTerminal"
### 0.082s elapsed time, 0.263s cpu time, 0.000s GC time
Loading theory "Category3.Functor" (required by "Draft.StrictnessMoreTemplates" via "Draft.Strictness" via "Draft.Pseudofunctor" via "MonoidalCategory.MonoidalFunctor" via "MonoidalCategory.MonoidalCategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda" via "Category3.SetCat" via "Category3.SetCategory")
locale product_category
  fixes
    C1 :: "'a1 => 'a1 => 'a1"  (infixr \<open>\<cdot>\<^sub>1\<close> 55)
    and
    C2 :: "'a2 => 'a2 => 'a2"  (infixr \<open>\<cdot>\<^sub>2\<close> 55)
  assumes "product_category (\<cdot>\<^sub>1) (\<cdot>\<^sub>2)"
### theory "Category3.ProductCategory"
### 0.265s elapsed time, 0.833s cpu time, 0.078s GC time
locale functor
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a => 'b"
  assumes "functor (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) F"
locale endofunctor
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and F :: "'a => 'a"
  assumes "endofunctor (\<cdot>) F"
locale faithful_functor
  fixes A :: "'a => 'a => 'a"
    and B :: "'b => 'b => 'b"
    and F :: "'a => 'b"
  assumes "faithful_functor A B F"
### theory "HOL-Library.BigO"
### 0.640s elapsed time, 1.717s cpu time, 0.150s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.StrictnessMoreTemplates")
locale full_functor
  fixes A :: "'a => 'a => 'a"
    and B :: "'b => 'b => 'b"
    and F :: "'a => 'b"
  assumes "full_functor A B F"
locale fully_faithful_functor
  fixes A :: "'a => 'a => 'a"
    and B :: "'b => 'b => 'b"
    and F :: "'a => 'b"
  assumes "fully_faithful_functor A B F"
locale embedding_functor
  fixes A :: "'a => 'a => 'a"
    and B :: "'b => 'b => 'b"
    and F :: "'a => 'b"
  assumes "embedding_functor A B F"
locale embedding_functor
  fixes A :: "'a => 'a => 'a"
    and B :: "'b => 'b => 'b"
    and F :: "'a => 'b"
  assumes "embedding_functor A B F"
locale full_embedding_functor
  fixes A :: "'a => 'a => 'a"
    and B :: "'b => 'b => 'b"
    and F :: "'a => 'b"
  assumes "full_embedding_functor A B F"
locale essentially_surjective_functor
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a => 'b"
  assumes
    "essentially_surjective_functor (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) F"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.559s elapsed time, 1.199s cpu time, 0.183s GC time
locale constant_functor
  fixes A :: "'a => 'a => 'a"
    and B :: "'b => 'b => 'b"
    and b :: "'b"
  assumes "constant_functor A B b"
locale identity_functor
  fixes C :: "'a => 'a => 'a"
  assumes "identity_functor C"
locale composite_functor
  fixes A :: "'a => 'a => 'a"
    and B :: "'b => 'b => 'b"
    and C :: "'c => 'c => 'c"
    and F :: "'a => 'b"
    and G :: "'b => 'c"
  assumes "composite_functor A B C F G"
locale inverse_functors
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'b => 'a"
    and G :: "'a => 'b"
  assumes "inverse_functors (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) F G"
locale isomorphic_categories
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
  assumes "isomorphic_categories (\<cdot>\<^sub>A) (\<cdot>\<^sub>B)"
locale invertible_functor
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and G :: "'a => 'b"
  assumes "invertible_functor (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) G"
locale dual_functor
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a => 'b"
  assumes "dual_functor (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) F"
locale category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "category (\<cdot>)"
locale category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "category (\<cdot>)"
### theory "Category3.Functor"
### 2.426s elapsed time, 3.903s cpu time, 0.497s GC time
Loading theory "Category3.NaturalTransformation" (required by "Draft.StrictnessMoreTemplates" via "Draft.Strictness" via "Draft.Pseudofunctor" via "MonoidalCategory.MonoidalFunctor" via "MonoidalCategory.MonoidalCategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda" via "Category3.FunctorCategory" via "Category3.BinaryFunctor")
Loading theory "Category3.Subcategory" (required by "Draft.StrictnessMoreTemplates" via "Draft.Strictness" via "Draft.Pseudofunctor" via "Draft.Bicategory" via "Draft.Prebicategory")
Loading theory "Category3.SetCategory" (required by "Draft.StrictnessMoreTemplates" via "Draft.Strictness" via "Draft.Pseudofunctor" via "MonoidalCategory.MonoidalFunctor" via "MonoidalCategory.MonoidalCategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda" via "Category3.SetCat")
locale subcategory
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and Arr :: "'a => bool"
  assumes "subcategory (\<cdot>\<^sub>C) Arr"
locale natural_transformation
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a => 'b"
    and G :: "'a => 'b"
    and \<tau> :: "'a => 'b"
  assumes
    "natural_transformation (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) F G \<tau>"
locale set_category_data
  fixes S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<close> 55)
    and img :: "'s => 's"
  assumes "set_category_data (\<cdot>)"
locale transformation_by_components
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a => 'b"
    and G :: "'a => 'b"
    and t :: "'a => 'b"
  assumes
    "transformation_by_components (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) F G t"
locale set_category_given_img
  fixes S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<close> 55)
    and img :: "'s => 's"
    and \<AA> :: "('t * 't) set"
  assumes "set_category_given_img (\<cdot>) img \<AA>"
locale set_category
  fixes S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<close> 55)
    and \<AA> :: "('t * 't) set"
  assumes "set_category (\<cdot>) \<AA>"
locale constant_transformation
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and g :: "'b"
  assumes "constant_transformation (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) g"
locale replete_set_category
  fixes S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<close> 55)
  assumes "replete_set_category (\<cdot>)"
locale constant_transformation
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and g :: "'b"
  assumes "constant_transformation (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) g"
locale set_category
  fixes S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<close> 55)
    and \<AA> :: "('t * 't) set"
  assumes "set_category (\<cdot>) \<AA>"
locale full_subcategory
  fixes C :: "'a => 'a => 'a"
    and Ide :: "'a => bool"
  assumes "full_subcategory C Ide"
locale vertical_composite
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a => 'b"
    and G :: "'a => 'b"
    and H :: "'a => 'b"
    and \<sigma> :: "'a => 'b"
    and \<tau> :: "'a => 'b"
  assumes
    "vertical_composite (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) F G H \<sigma>
      \<tau>"
locale two_set_categories_bij_betw_Univ
  fixes S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<close> 55)
    and S' :: "'t => 't => 't"  (infixr \<open>\<cdot>\<acute>\<close> 55)
    and \<AA> :: "('u * 'u) set"
    and \<phi> :: "'s => 't"
  assumes
    "two_set_categories_bij_betw_Univ (\<cdot>) (\<cdot>\<acute>) \<AA>
      \<phi>"
locale natural_isomorphism
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a => 'b"
    and G :: "'a => 'b"
    and \<tau> :: "'a => 'b"
  assumes
    "natural_isomorphism (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) F G \<tau>"
locale set_category
  fixes S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<close> 55)
    and \<AA> :: "('t * 't) set"
  assumes "set_category (\<cdot>) \<AA>"
locale inverse_transformation
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a => 'b"
    and G :: "'a => 'b"
    and \<tau> :: "'a => 'b"
  assumes
    "inverse_transformation (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) F G \<tau>"
locale concrete_set_category
  fixes S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<AA> :: "('t * 't) set"
    and U :: "'a set"
    and \<iota> :: "'a => 's"
  assumes "concrete_set_category (\<cdot>\<^sub>S) \<AA> U \<iota>"
locale full_subcategory
  fixes C :: "'a => 'a => 'a"
    and Ide :: "'a => bool"
  assumes "full_subcategory C Ide"
locale replete_concrete_set_category
  fixes S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and U :: "'a set"
    and \<iota> :: "'a => 's"
  assumes "replete_concrete_set_category (\<cdot>\<^sub>S) U \<iota>"
### theory "Category3.SetCategory"
### 1.553s elapsed time, 4.787s cpu time, 0.687s GC time
Loading theory "Category3.SetCat" (required by "Draft.StrictnessMoreTemplates" via "Draft.Strictness" via "Draft.Pseudofunctor" via "MonoidalCategory.MonoidalFunctor" via "MonoidalCategory.MonoidalCategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda")
locale setcat
  fixes dummy :: "'e"
    and \<AA> :: "('a * 'a) set"
  assumes "setcat \<AA>"
locale inverse_transformations
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a => 'b"
    and G :: "'a => 'b"
    and \<tau> :: "'a => 'b"
    and \<tau>' :: "'a => 'b"
  assumes
    "inverse_transformations (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) F G \<tau>
      \<tau>'"
### theory "Category3.NaturalTransformation"
### 1.790s elapsed time, 5.511s cpu time, 0.767s GC time
Loading theory "Draft.IsomorphismClass" (required by "Draft.StrictnessMoreTemplates" via "Draft.Strictness" via "Draft.Pseudofunctor" via "Draft.Bicategory" via "Draft.Prebicategory")
Loading theory "Category3.BinaryFunctor" (required by "Draft.StrictnessMoreTemplates" via "Draft.Strictness" via "Draft.Pseudofunctor" via "MonoidalCategory.MonoidalFunctor" via "MonoidalCategory.MonoidalCategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda" via "Category3.FunctorCategory")
locale category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "category (\<cdot>)"
### theory "Draft.IsomorphismClass"
### 0.103s elapsed time, 0.408s cpu time, 0.086s GC time
locale inclusion_functor
  fixes C :: "'a => 'a => 'a"
    and Arr :: "'a => bool"
  assumes "inclusion_functor C Arr"
locale binary_functor
  fixes
    A1 :: "'a1 => 'a1 => 'a1"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>1\<close> 55)
    and
    A2 :: "'a2 => 'a2 => 'a2"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>2\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a1 * 'a2 => 'b"
  assumes
    "binary_functor (\<cdot>\<^sub>A\<^sub>1) (\<cdot>\<^sub>A\<^sub>2)
      (\<cdot>\<^sub>B) F"
locale replete_setcat
  fixes dummy :: "'e"
locale product_functor
  fixes
    A1 :: "'a1 => 'a1 => 'a1"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>1\<close> 55)
    and
    A2 :: "'a2 => 'a2 => 'a2"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>2\<close> 55)
    and
    B1 :: "'b1 => 'b1 => 'b1"
      (infixr \<open>\<cdot>\<^sub>B\<^sub>1\<close> 55)
    and
    B2 :: "'b2 => 'b2 => 'b2"
      (infixr \<open>\<cdot>\<^sub>B\<^sub>2\<close> 55)
    and F1 :: "'a1 => 'b1"
    and F2 :: "'a2 => 'b2"
  assumes
    "product_functor (\<cdot>\<^sub>A\<^sub>1) (\<cdot>\<^sub>A\<^sub>2)
      (\<cdot>\<^sub>B\<^sub>1) (\<cdot>\<^sub>B\<^sub>2) F1 F2"
locale full_inclusion_functor
  fixes C :: "'a => 'a => 'a"
    and Ide :: "'a => bool"
  assumes "full_inclusion_functor C Ide"
locale full_inclusion_functor
  fixes C :: "'a => 'a => 'a"
    and Ide :: "'a => bool"
  assumes "full_inclusion_functor C Ide"
### theory "Category3.Subcategory"
### 3.509s elapsed time, 10.899s cpu time, 1.534s GC time
locale symmetry_functor
  fixes
    A1 :: "'a1 => 'a1 => 'a1"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>1\<close> 55)
    and
    A2 :: "'a2 => 'a2 => 'a2"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>2\<close> 55)
  assumes
    "symmetry_functor (\<cdot>\<^sub>A\<^sub>1) (\<cdot>\<^sub>A\<^sub>2)"
### theory "Category3.SetCat"
### 2.275s elapsed time, 6.733s cpu time, 0.858s GC time
locale binary_functor
  fixes
    A1 :: "'a1 => 'a1 => 'a1"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>1\<close> 55)
    and
    A2 :: "'a2 => 'a2 => 'a2"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>2\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a1 * 'a2 => 'b"
  assumes
    "binary_functor (\<cdot>\<^sub>A\<^sub>1) (\<cdot>\<^sub>A\<^sub>2)
      (\<cdot>\<^sub>B) F"
locale binary_functor_transformation
  fixes
    A1 :: "'a1 => 'a1 => 'a1"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>1\<close> 55)
    and
    A2 :: "'a2 => 'a2 => 'a2"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>2\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a1 * 'a2 => 'b"
    and G :: "'a1 * 'a2 => 'b"
    and \<tau> :: "'a1 * 'a2 => 'b"
  assumes
    "binary_functor_transformation (\<cdot>\<^sub>A\<^sub>1)
      (\<cdot>\<^sub>A\<^sub>2) (\<cdot>\<^sub>B) F G \<tau>"
### theory "Category3.BinaryFunctor"
### 2.597s elapsed time, 6.669s cpu time, 0.889s GC time
Loading theory "Category3.FunctorCategory" (required by "Draft.StrictnessMoreTemplates" via "Draft.Strictness" via "Draft.Pseudofunctor" via "MonoidalCategory.MonoidalFunctor" via "MonoidalCategory.MonoidalCategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction" via "Category3.Yoneda")
locale functor_category
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
  assumes "functor_category (\<cdot>\<^sub>A) (\<cdot>\<^sub>B)"
locale functor_category
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
  assumes "functor_category (\<cdot>\<^sub>A) (\<cdot>\<^sub>B)"
locale evaluation_functor
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
  assumes "evaluation_functor (\<cdot>\<^sub>A) (\<cdot>\<^sub>B)"
locale currying
  fixes
    A1 :: "'a1 => 'a1 => 'a1"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>1\<close> 55)
    and
    A2 :: "'a2 => 'a2 => 'a2"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>2\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
  assumes
    "currying (\<cdot>\<^sub>A\<^sub>1) (\<cdot>\<^sub>A\<^sub>2)
      (\<cdot>\<^sub>B)"
locale curried_functor
  fixes
    A1 :: "'a1 => 'a1 => 'a1"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>1\<close> 55)
    and
    A2 :: "'a2 => 'a2 => 'a2"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>2\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a1 * 'a2 => 'b"
  assumes
    "curried_functor (\<cdot>\<^sub>A\<^sub>1) (\<cdot>\<^sub>A\<^sub>2)
      (\<cdot>\<^sub>B) F"
locale curried_functor'
  fixes
    A1 :: "'a1 => 'a1 => 'a1"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>1\<close> 55)
    and
    A2 :: "'a2 => 'a2 => 'a2"
      (infixr \<open>\<cdot>\<^sub>A\<^sub>2\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'a1 * 'a2 => 'b"
  assumes
    "curried_functor' (\<cdot>\<^sub>A\<^sub>1) (\<cdot>\<^sub>A\<^sub>2)
      (\<cdot>\<^sub>B) F"
### theory "Category3.FunctorCategory"
### 5.535s elapsed time, 5.955s cpu time, 0.576s GC time
Loading theory "Category3.Yoneda" (required by "Draft.StrictnessMoreTemplates" via "Draft.Strictness" via "Draft.Pseudofunctor" via "MonoidalCategory.MonoidalFunctor" via "MonoidalCategory.MonoidalCategory" via "Category3.EquivalenceOfCategories" via "Category3.Adjunction")
locale hom_functor
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi> :: "'c * 'c => 'c => 's"
  assumes "hom_functor (\<cdot>) (\<cdot>\<^sub>S) \<phi>"
locale hom_functor
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi> :: "'c * 'c => 'c => 's"
  assumes "hom_functor (\<cdot>) (\<cdot>\<^sub>S) \<phi>"
locale category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "category (\<cdot>)"
locale set_valued_functor
  fixes C :: "'c => 'c => 'c"
    and S :: "'s => 's => 's"
    and F :: "'c => 's"
  assumes "set_valued_functor C S F"
locale set_valued_transformation
  fixes C :: "'c => 'c => 'c"
    and S :: "'s => 's => 's"
    and F :: "'c => 's"
    and G :: "'c => 's"
    and \<tau> :: "'c => 's"
  assumes "set_valued_transformation C S F G \<tau>"
locale yoneda_functor
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi> :: "'c * 'c => 'c => 's"
  assumes "yoneda_functor (\<cdot>) (\<cdot>\<^sub>S) \<phi>"
locale yoneda_functor_fixed_object
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi> :: "'c * 'c => 'c => 's"
    and a :: "'c"
  assumes "yoneda_functor_fixed_object (\<cdot>) (\<cdot>\<^sub>S) \<phi> a"
locale yoneda_lemma
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi> :: "'c * 'c => 'c => 's"
    and F :: "'c => 's"
    and a :: "'c"
  assumes "yoneda_lemma (\<cdot>) (\<cdot>\<^sub>S) \<phi> F a"
locale yoneda_lemma_fixed_e
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi> :: "'c * 'c => 'c => 's"
    and F :: "'c => 's"
    and a :: "'c"
    and e :: "'s"
  assumes "yoneda_lemma_fixed_e (\<cdot>) (\<cdot>\<^sub>S) \<phi> F a e"
locale yoneda_lemma_fixed_\<tau>
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi> :: "'c * 'c => 'c => 's"
    and F :: "'c => 's"
    and a :: "'c"
    and \<tau> :: "'c => 's"
  assumes
    "yoneda_lemma_fixed_\<tau> (\<cdot>) (\<cdot>\<^sub>S) \<phi> F a
      \<tau>"
locale yoneda_lemma
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi> :: "'c * 'c => 'c => 's"
    and F :: "'c => 's"
    and a :: "'c"
  assumes "yoneda_lemma (\<cdot>) (\<cdot>\<^sub>S) \<phi> F a"
locale yoneda_lemma_for_hom
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi> :: "'c * 'c => 'c => 's"
    and F :: "'c => 's"
    and a :: "'c"
    and a' :: "'c"
  assumes "yoneda_lemma_for_hom (\<cdot>) (\<cdot>\<^sub>S) \<phi> a a'"
locale yoneda_functor
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi> :: "'c * 'c => 'c => 's"
  assumes "yoneda_functor (\<cdot>) (\<cdot>\<^sub>S) \<phi>"
### theory "Category3.Yoneda"
### 10.391s elapsed time, 11.697s cpu time, 1.779s GC time
Loading theory "Category3.Adjunction" (required by "Draft.StrictnessMoreTemplates" via "Draft.Strictness" via "Draft.Pseudofunctor" via "MonoidalCategory.MonoidalFunctor" via "MonoidalCategory.MonoidalCategory" via "Category3.EquivalenceOfCategories")
locale arrow_from_functor
  fixes D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and F :: "'d => 'c"
    and x :: "'d"
    and y :: "'c"
    and e :: "'c"
  assumes "arrow_from_functor (\<cdot>\<^sub>D) (\<cdot>\<^sub>C) F x y e"
locale terminal_arrow_from_functor
  fixes D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and F :: "'d => 'c"
    and x :: "'d"
    and y :: "'c"
    and e :: "'c"
  assumes
    "terminal_arrow_from_functor (\<cdot>\<^sub>D) (\<cdot>\<^sub>C) F x y
      e"
locale left_adjoint_functor
  fixes D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and F :: "'d => 'c"
  assumes "left_adjoint_functor (\<cdot>\<^sub>D) (\<cdot>\<^sub>C) F"
locale arrow_to_functor
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and G :: "'c => 'd"
    and x :: "'d"
    and y :: "'c"
    and e :: "'d"
  assumes "arrow_to_functor (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) G x y e"
locale initial_arrow_to_functor
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and G :: "'c => 'd"
    and x :: "'d"
    and y :: "'c"
    and e :: "'d"
  assumes
    "initial_arrow_to_functor (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) G x y e"
locale right_adjoint_functor
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and G :: "'c => 'd"
  assumes "right_adjoint_functor (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) G"
locale meta_adjunction
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<phi> :: "'d => 'c => 'd"
    and \<psi> :: "'c => 'd => 'c"
  assumes
    "meta_adjunction (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) F G \<phi> \<psi>"
locale hom_adjunction
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi>C :: "'c * 'c => 'c => 's"
    and \<phi>D :: "'d * 'd => 'd => 's"
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<Phi> :: "'d * 'c => 's"
    and \<Psi> :: "'d * 'c => 's"
  assumes
    "hom_adjunction (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) (\<cdot>\<^sub>S)
      \<phi>C \<phi>D F G \<Phi> \<Psi>"
locale unit_counit_adjunction
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<eta> :: "'d => 'd"
    and \<epsilon> :: "'c => 'c"
  assumes
    "unit_counit_adjunction (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) F G \<eta>
      \<epsilon>"
locale adjunction
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi>C :: "'c * 'c => 'c => 's"
    and \<phi>D :: "'d * 'd => 'd => 's"
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<phi> :: "'d => 'c => 'd"
    and \<psi> :: "'c => 'd => 'c"
    and \<eta> :: "'d => 'd"
    and \<epsilon> :: "'c => 'c"
    and \<Phi> :: "'d * 'c => 's"
    and \<Psi> :: "'d * 'c => 's"
  assumes
    "adjunction (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) (\<cdot>\<^sub>S)
      \<phi>C \<phi>D F G \<phi> \<psi> \<eta> \<epsilon> \<Phi> \<Psi>"
locale meta_adjunction
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<phi> :: "'d => 'c => 'd"
    and \<psi> :: "'c => 'd => 'c"
  assumes
    "meta_adjunction (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) F G \<phi> \<psi>"
locale meta_adjunction
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<phi> :: "'d => 'c => 'd"
    and \<psi> :: "'c => 'd => 'c"
  assumes
    "meta_adjunction (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) F G \<phi> \<psi>"
locale unit_counit_adjunction
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<eta> :: "'d => 'd"
    and \<epsilon> :: "'c => 'c"
  assumes
    "unit_counit_adjunction (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) F G \<eta>
      \<epsilon>"
locale left_adjoint_functor
  fixes D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and F :: "'d => 'c"
  assumes "left_adjoint_functor (\<cdot>\<^sub>D) (\<cdot>\<^sub>C) F"
locale right_adjoint_functor
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and G :: "'c => 'd"
  assumes "right_adjoint_functor (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) G"
locale meta_adjunction
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<phi> :: "'d => 'c => 'd"
    and \<psi> :: "'c => 'd => 'c"
  assumes
    "meta_adjunction (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) F G \<phi> \<psi>"
locale hom_adjunction
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi>C :: "'c * 'c => 'c => 's"
    and \<phi>D :: "'d * 'd => 'd => 's"
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<Phi> :: "'d * 'c => 's"
    and \<Psi> :: "'d * 'c => 's"
  assumes
    "hom_adjunction (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) (\<cdot>\<^sub>S)
      \<phi>C \<phi>D F G \<Phi> \<Psi>"
locale meta_adjunction
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<phi> :: "'d => 'c => 'd"
    and \<psi> :: "'c => 'd => 'c"
  assumes
    "meta_adjunction (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) F G \<phi> \<psi>"
locale unit_counit_adjunction
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<eta> :: "'d => 'd"
    and \<epsilon> :: "'c => 'c"
  assumes
    "unit_counit_adjunction (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) F G \<eta>
      \<epsilon>"
locale hom_adjunction
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and S :: "'s => 's => 's"  (infixr \<open>\<cdot>\<^sub>S\<close> 55)
    and \<phi>C :: "'c * 'c => 'c => 's"
    and \<phi>D :: "'d * 'd => 'd => 's"
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<Phi> :: "'d * 'c => 's"
    and \<Psi> :: "'d * 'c => 's"
  assumes
    "hom_adjunction (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) (\<cdot>\<^sub>S)
      \<phi>C \<phi>D F G \<Phi> \<Psi>"
locale left_adjoint_functor
  fixes D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and F :: "'d => 'c"
  assumes "left_adjoint_functor (\<cdot>\<^sub>D) (\<cdot>\<^sub>C) F"
locale right_adjoint_functor
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and G :: "'c => 'd"
  assumes "right_adjoint_functor (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) G"
locale inverse_functors
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and F :: "'b => 'a"
    and G :: "'a => 'b"
  assumes "inverse_functors (\<cdot>\<^sub>A) (\<cdot>\<^sub>B) F G"
locale composite_adjunction
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>A\<close> 55)
    and B :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and F :: "'b => 'a"
    and G :: "'a => 'b"
    and F' :: "'c => 'b"
    and G' :: "'b => 'c"
    and \<phi> :: "'b => 'a => 'b"
    and \<psi> :: "'a => 'b => 'a"
    and \<phi>' :: "'c => 'b => 'c"
    and \<psi>' :: "'b => 'c => 'b"
  assumes
    "composite_adjunction (\<cdot>\<^sub>A) (\<cdot>\<^sub>B)
      (\<cdot>\<^sub>C) F G F' G' \<phi> \<psi> \<phi>' \<psi>'"
### theory "Category3.Adjunction"
### 22.138s elapsed time, 25.886s cpu time, 5.175s GC time
Loading theory "Category3.EquivalenceOfCategories" (required by "Draft.StrictnessMoreTemplates" via "Draft.Strictness" via "Draft.Pseudofunctor" via "MonoidalCategory.MonoidalFunctor" via "MonoidalCategory.MonoidalCategory")
locale equivalence_of_categories
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<eta> :: "'d => 'd"
    and \<epsilon> :: "'c => 'c"
  assumes
    "equivalence_of_categories (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) F G
      \<eta> \<epsilon>"
locale equivalence_of_categories
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<eta> :: "'d => 'd"
    and \<epsilon> :: "'c => 'c"
  assumes
    "equivalence_of_categories (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) F G
      \<eta> \<epsilon>"
locale equivalence_functor
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and G :: "'c => 'd"
  assumes "equivalence_functor (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) G"
locale endofunctor
  fixes A :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and F :: "'a => 'a"
  assumes "endofunctor (\<cdot>) F"
locale adjoint_equivalence
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<eta> :: "'d => 'd"
    and \<epsilon> :: "'c => 'c"
  assumes
    "adjoint_equivalence (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) F G \<eta>
      \<epsilon>"
locale adjoint_equivalence
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<eta> :: "'d => 'd"
    and \<epsilon> :: "'c => 'c"
  assumes
    "adjoint_equivalence (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) F G \<eta>
      \<epsilon>"
locale fully_faithful_and_essentially_surjective_functor
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and F :: "'c => 'd"
  assumes
    "fully_faithful_and_essentially_surjective_functor (\<cdot>\<^sub>C)
      (\<cdot>\<^sub>D) F"
locale equivalence_of_categories
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and F :: "'d => 'c"
    and G :: "'c => 'd"
    and \<eta> :: "'d => 'd"
    and \<epsilon> :: "'c => 'c"
  assumes
    "equivalence_of_categories (\<cdot>\<^sub>C) (\<cdot>\<^sub>D) F G
      \<eta> \<epsilon>"
### theory "Category3.EquivalenceOfCategories"
### 1.572s elapsed time, 1.747s cpu time, 0.243s GC time
Loading theory "Draft.Prebicategory" (required by "Draft.StrictnessMoreTemplates" via "Draft.Strictness" via "Draft.Pseudofunctor" via "Draft.Bicategory")
Loading theory "MonoidalCategory.MonoidalCategory" (required by "Draft.StrictnessMoreTemplates" via "Draft.Strictness" via "Draft.Pseudofunctor" via "MonoidalCategory.MonoidalFunctor")
locale binary_endofunctor
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and T :: "'a * 'a => 'a"
  assumes "binary_endofunctor (\<cdot>) T"
locale weak_composition
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
  assumes "weak_composition (\<cdot>) (\<star>)"
locale monoidal_category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and T :: "'a * 'a => 'a"
    and \<alpha> :: "'a * 'a * 'a => 'a"
    and \<iota> :: "'a"
  assumes "monoidal_category (\<cdot>) T \<alpha> \<iota>"
locale extended_monoidal_category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and T :: "'a * 'a => 'a"
    and \<alpha> :: "'a * 'a * 'a => 'a"
    and \<iota> :: "'a"
  assumes "extended_monoidal_category (\<cdot>) T \<alpha> \<iota>"
locale monoidal_category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and T :: "'a * 'a => 'a"
    and \<alpha> :: "'a * 'a * 'a => 'a"
    and \<iota> :: "'a"
  assumes "monoidal_category (\<cdot>) T \<alpha> \<iota>"
locale left_hom
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<omega> :: "'a"
  assumes "left_hom (\<cdot>) (\<star>) \<omega>"
locale monoidal_category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and T :: "'a * 'a => 'a"
    and \<alpha> :: "'a * 'a * 'a => 'a"
    and \<iota> :: "'a"
  assumes "monoidal_category (\<cdot>) T \<alpha> \<iota>"
locale monoidal_category_with_alternate_unit
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and T :: "'a * 'a => 'a"
    and \<alpha> :: "'a * 'a * 'a => 'a"
    and \<iota> :: "'a"
    and \<iota>\<^sub>1 :: "'a"
  assumes
    "monoidal_category_with_alternate_unit (\<cdot>) T \<alpha> \<iota>
      \<iota>\<^sub>1"
locale right_hom
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<omega> :: "'a"
  assumes "right_hom (\<cdot>) (\<star>) \<omega>"
locale elementary_monoidal_category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and tensor :: "'a => 'a => 'a"  (infixr \<open>\<otimes>\<close> 53)
    and unity :: "'a"  (\<open>\<I>\<close>)
    and lunit :: "'a => 'a"  (\<open>\<l>[_]\<close>)
    and runit :: "'a => 'a"  (\<open>\<r>[_]\<close>)
    and assoc :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
  assumes
    "elementary_monoidal_category (\<cdot>) (\<otimes>) \<I> lunit runit
      assoc"
locale monoidal_category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and T :: "'a * 'a => 'a"
    and \<alpha> :: "'a * 'a * 'a => 'a"
    and \<iota> :: "'a"
  assumes "monoidal_category (\<cdot>) T \<alpha> \<iota>"
locale elementary_monoidal_category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and tensor :: "'a => 'a => 'a"  (infixr \<open>\<otimes>\<close> 53)
    and unity :: "'a"  (\<open>\<I>\<close>)
    and lunit :: "'a => 'a"  (\<open>\<l>[_]\<close>)
    and runit :: "'a => 'a"  (\<open>\<r>[_]\<close>)
    and assoc :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
  assumes
    "elementary_monoidal_category (\<cdot>) (\<otimes>) \<I> lunit runit
      assoc"
locale weak_composition
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
  assumes "weak_composition (\<cdot>) (\<star>)"
locale strict_monoidal_category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and T :: "'a * 'a => 'a"
    and \<alpha> :: "'a * 'a * 'a => 'a"
    and \<iota> :: "'a"
  assumes "strict_monoidal_category (\<cdot>) T \<alpha> \<iota>"
locale regular_weak_composition
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
  assumes "regular_weak_composition (\<cdot>) (\<star>)"
locale opposite_monoidal_category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and T\<^sub>C :: "'a * 'a => 'a"
    and \<alpha>\<^sub>C :: "'a * 'a * 'a => 'a"
    and \<iota> :: "'a"
  assumes
    "opposite_monoidal_category (\<cdot>) T\<^sub>C \<alpha>\<^sub>C
      \<iota>"
locale associative_weak_composition
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
  assumes "associative_weak_composition (\<cdot>) (\<star>) \<a>"
locale opposite_monoidal_category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and T\<^sub>C :: "'a * 'a => 'a"
    and \<alpha>\<^sub>C :: "'a * 'a * 'a => 'a"
    and \<iota> :: "'a"
  assumes
    "opposite_monoidal_category (\<cdot>) T\<^sub>C \<alpha>\<^sub>C
      \<iota>"
locale monoidal_language
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "monoidal_language (\<cdot>)"
consts
  Dom :: "'a local.term => 'a local.term"
consts
  Cod :: "'a local.term => 'a local.term"
consts
  Arr :: "'a local.term => bool"
consts
  Ide :: "'a local.term => bool"
consts
  Can :: "'a local.term => bool"
consts
  Inv :: "'a local.term => 'a local.term"
locale right_hom_with_unit
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<iota> :: "'a"
    and a :: "'a"
  assumes "right_hom_with_unit (\<cdot>) (\<star>) \<a> \<iota> a"
Found termination order: "size <*mlex*> {}"
consts
  dim :: "'a local.term => nat"
locale left_hom_with_unit
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<iota> :: "'a"
    and b :: "'a"
  assumes "left_hom_with_unit (\<cdot>) (\<star>) \<a> \<iota> b"
locale prebicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
  assumes "prebicategory (\<cdot>) (\<star>) \<a>"
locale prebicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
  assumes "prebicategory (\<cdot>) (\<star>) \<a>"
locale horizontal_homs
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "horizontal_homs (\<cdot>) src trg"
locale weak_composition_with_homs
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "weak_composition_with_homs (\<cdot>) (\<star>) src trg"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale prebicategory_with_homs
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "prebicategory_with_homs (\<cdot>) (\<star>) \<a> src trg"
locale prebicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
  assumes "prebicategory (\<cdot>) (\<star>) \<a>"
locale prebicategory_with_units
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
  assumes "prebicategory_with_units (\<cdot>) (\<star>) \<a> \<i>"
locale prebicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
  assumes "prebicategory (\<cdot>) (\<star>) \<a>"
locale horizontal_composition
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "horizontal_composition (\<cdot>) (\<star>) src trg"
### theory "Draft.Prebicategory"
### 62.286s elapsed time, 170.891s cpu time, 105.253s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale evaluation_map
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<close> 55)
    and T :: "'d * 'd => 'd"
    and \<alpha> :: "'d * 'd * 'd => 'd"
    and \<iota> :: "'d"
    and V :: "'c => 'd"
  assumes "evaluation_map (\<cdot>\<^sub>C) (\<cdot>) T \<alpha> \<iota> V"
consts
  eval :: "'c local.term => 'd"
### theory "MonoidalCategory.MonoidalCategory"
### 66.776s elapsed time, 176.569s cpu time, 106.341s GC time
Loading theory "Draft.Bicategory" (required by "Draft.StrictnessMoreTemplates" via "Draft.Strictness" via "Draft.Pseudofunctor")
Loading theory "MonoidalCategory.MonoidalFunctor" (required by "Draft.StrictnessMoreTemplates" via "Draft.Strictness" via "Draft.Pseudofunctor")
locale monoidal_functor
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and T\<^sub>C :: "'c * 'c => 'c"
    and \<alpha>\<^sub>C :: "'c * 'c * 'c => 'c"
    and \<iota>\<^sub>C :: "'c"
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and T\<^sub>D :: "'d * 'd => 'd"
    and \<alpha>\<^sub>D :: "'d * 'd * 'd => 'd"
    and \<iota>\<^sub>D :: "'d"
    and F :: "'c => 'd"
    and \<phi> :: "'c * 'c => 'd"
  assumes
    "monoidal_functor (\<cdot>\<^sub>C) T\<^sub>C \<alpha>\<^sub>C
      \<iota>\<^sub>C (\<cdot>\<^sub>D) T\<^sub>D \<alpha>\<^sub>D
      \<iota>\<^sub>D F \<phi>"
locale bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "bicategory (\<cdot>) (\<star>) \<a> \<i> src trg"
locale category_as_bicategory
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
  assumes "category_as_bicategory (\<cdot>)"
locale monoidal_category
  fixes C :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and T :: "'a * 'a => 'a"
    and \<alpha> :: "'a * 'a * 'a => 'a"
    and \<iota> :: "'a"
  assumes "monoidal_category (\<cdot>) T \<alpha> \<iota>"
locale prebicategory_with_homs
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "prebicategory_with_homs (\<cdot>) (\<star>) \<a> src trg"
locale strict_monoidal_functor
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and T\<^sub>C :: "'c * 'c => 'c"
    and \<alpha>\<^sub>C :: "'c * 'c * 'c => 'c"
    and \<iota>\<^sub>C :: "'c"
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and T\<^sub>D :: "'d * 'd => 'd"
    and \<alpha>\<^sub>D :: "'d * 'd * 'd => 'd"
    and \<iota>\<^sub>D :: "'d"
    and F :: "'c => 'd"
  assumes
    "strict_monoidal_functor (\<cdot>\<^sub>C) T\<^sub>C \<alpha>\<^sub>C
      \<iota>\<^sub>C (\<cdot>\<^sub>D) T\<^sub>D \<alpha>\<^sub>D
      \<iota>\<^sub>D F"
locale prebicategory_with_homs_and_units
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes
    "prebicategory_with_homs_and_units (\<cdot>) (\<star>) \<a> \<i> src
      trg"
locale prebicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
  assumes "prebicategory (\<cdot>) (\<star>) \<a>"
locale equivalence_of_monoidal_categories
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and T\<^sub>C :: "'c * 'c => 'c"
    and \<alpha>\<^sub>C :: "'c * 'c * 'c => 'c"
    and \<iota>\<^sub>C :: "'c"
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and T\<^sub>D :: "'d * 'd => 'd"
    and \<alpha>\<^sub>D :: "'d * 'd * 'd => 'd"
    and \<iota>\<^sub>D :: "'d"
    and F :: "'d => 'c"
    and \<phi> :: "'d * 'd => 'c"
    and \<iota> :: "'c"
    and G :: "'c => 'd"
    and \<eta> :: "'d => 'd"
    and \<epsilon> :: "'c => 'c"
  assumes
    "equivalence_of_monoidal_categories (\<cdot>\<^sub>C) T\<^sub>C
      \<alpha>\<^sub>C \<iota>\<^sub>C (\<cdot>\<^sub>D) T\<^sub>D
      \<alpha>\<^sub>D \<iota>\<^sub>D F \<phi> G \<eta> \<epsilon>"
### theory "MonoidalCategory.MonoidalFunctor"
### 19.439s elapsed time, 43.776s cpu time, 11.224s GC time
locale bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "bicategory (\<cdot>) (\<star>) \<a> \<i> src trg"
locale vertically_discrete_bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes
    "vertically_discrete_bicategory (\<cdot>) (\<star>) \<a> \<i> src trg"
locale bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "bicategory (\<cdot>) (\<star>) \<a> \<i> src trg"
locale bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "bicategory (\<cdot>) (\<star>) \<a> \<i> src trg"
locale extended_bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "extended_bicategory (\<cdot>) (\<star>) \<a> \<i> src trg"
### theory "Draft.Bicategory"
### 38.695s elapsed time, 68.720s cpu time, 19.157s GC time
Loading theory "Draft.Coherence" (required by "Draft.StrictnessMoreTemplates" via "Draft.Strictness" via "Draft.Pseudofunctor")
Loading theory "Draft.InternalEquivalence" (required by "Draft.StrictnessMoreTemplates" via "Draft.Strictness" via "Draft.Pseudofunctor")
Loading theory "Draft.Subbicategory" (required by "Draft.StrictnessMoreTemplates" via "Draft.Strictness" via "Draft.Pseudofunctor")
locale subbicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<^sub>B\<close> 55)
    and
    \<a>\<^sub>B :: "'a => 'a => 'a => 'a"
      (\<open>\<a>\<^sub>B[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src\<^sub>B :: "'a => 'a"
    and trg\<^sub>B :: "'a => 'a"
    and Arr :: "'a => bool"
  assumes
    "subbicategory (\<cdot>\<^sub>B) (\<star>\<^sub>B) \<a>\<^sub>B \<i>
      src\<^sub>B trg\<^sub>B Arr"
locale bicategorical_language
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "bicategorical_language (\<cdot>) src trg"
locale adjunction_data_in_bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
    and f :: "'a"
    and g :: "'a"
    and \<eta> :: "'a"
    and \<epsilon> :: "'a"
  assumes
    "adjunction_data_in_bicategory (\<cdot>) (\<star>) \<a> \<i> src trg f g
      \<eta> \<epsilon>"
locale equivalence_in_bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
    and f :: "'a"
    and g :: "'a"
    and \<eta> :: "'a"
    and \<epsilon> :: "'a"
  assumes
    "equivalence_in_bicategory (\<cdot>) (\<star>) \<a> \<i> src trg f g
      \<eta> \<epsilon>"
locale bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "bicategory (\<cdot>) (\<star>) \<a> \<i> src trg"
locale composite_equivalence_in_bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
    and f :: "'a"
    and g :: "'a"
    and \<zeta> :: "'a"
    and \<xi> :: "'a"
    and h :: "'a"
    and k :: "'a"
    and \<sigma> :: "'a"
    and \<tau> :: "'a"
  assumes
    "composite_equivalence_in_bicategory (\<cdot>) (\<star>) \<a> \<i> src
      trg f g \<zeta> \<xi> h k \<sigma> \<tau>"
consts
  Src :: "'a local.term => 'a local.term"
consts
  Trg :: "'a local.term => 'a local.term"
consts
  Dom :: "'a local.term => 'a local.term"
consts
  Cod :: "'a local.term => 'a local.term"
consts
  Arr :: "'a local.term => bool"
consts
  Ide :: "'a local.term => bool"
consts
  Obj :: "'a local.term => bool"
locale bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "bicategory (\<cdot>) (\<star>) \<a> \<i> src trg"
consts
  Can :: "'a local.term => bool"
consts
  Inv :: "'a local.term => 'a local.term"
Found termination order: "size <*mlex*> {}"
locale bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "bicategory (\<cdot>) (\<star>) \<a> \<i> src trg"
locale subbicategory_at_object
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<^sub>B\<close> 55)
    and
    \<a>\<^sub>B :: "'a => 'a => 'a => 'a"
      (\<open>\<a>\<^sub>B[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src\<^sub>B :: "'a => 'a"
    and trg\<^sub>B :: "'a => 'a"
    and a :: "'a"
    and w :: "'a"
    and \<omega> :: "'a"
  assumes
    "subbicategory_at_object (\<cdot>\<^sub>B) (\<star>\<^sub>B)
      \<a>\<^sub>B \<i> src\<^sub>B trg\<^sub>B a w \<omega>"
locale two_equivalences_in_bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
    and e\<^sub>0 :: "'a"
    and d\<^sub>0 :: "'a"
    and \<eta>\<^sub>0 :: "'a"
    and \<epsilon>\<^sub>0 :: "'a"
    and e\<^sub>1 :: "'a"
    and d\<^sub>1 :: "'a"
    and \<eta>\<^sub>1 :: "'a"
    and \<epsilon>\<^sub>1 :: "'a"
  assumes
    "two_equivalences_in_bicategory (\<cdot>) (\<star>) \<a> \<i> src trg
      e\<^sub>0 d\<^sub>0 \<eta>\<^sub>0 \<epsilon>\<^sub>0 e\<^sub>1
      d\<^sub>1 \<eta>\<^sub>1 \<epsilon>\<^sub>1"
### theory "Draft.Subbicategory"
### 30.106s elapsed time, 94.823s cpu time, 27.310s GC time
locale bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "bicategory (\<cdot>) (\<star>) \<a> \<i> src trg"
### theory "Draft.InternalEquivalence"
### 33.679s elapsed time, 104.734s cpu time, 29.040s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  dim :: "'a local.term => nat"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale Coherence.evaluation_map
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and src\<^sub>C :: "'c => 'c"
    and trg\<^sub>C :: "'c => 'c"
    and V :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'b => 'b => 'b"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'b => 'b => 'b => 'b"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'b => 'b"  (\<open>\<i>[_]\<close>)
    and src :: "'b => 'b"
    and trg :: "'b => 'b"
    and E :: "'c => 'b"
  assumes
    "Coherence.evaluation_map (\<cdot>\<^sub>C) src\<^sub>C trg\<^sub>C
      (\<cdot>) (\<star>) \<a> \<i> src trg E"
consts
  eval :: "'c local.term => 'b"
locale self_evaluation_map
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "self_evaluation_map (\<cdot>) (\<star>) \<a> \<i> src trg"
locale Coherence.evaluation_map
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and src\<^sub>C :: "'c => 'c"
    and trg\<^sub>C :: "'c => 'c"
    and V :: "'b => 'b => 'b"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'b => 'b => 'b"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'b => 'b => 'b => 'b"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'b => 'b"  (\<open>\<i>[_]\<close>)
    and src :: "'b => 'b"
    and trg :: "'b => 'b"
    and E :: "'c => 'b"
  assumes
    "Coherence.evaluation_map (\<cdot>\<^sub>C) src\<^sub>C trg\<^sub>C
      (\<cdot>) (\<star>) \<a> \<i> src trg E"
### theory "Draft.Coherence"
### 90.671s elapsed time, 187.777s cpu time, 62.144s GC time
Loading theory "Draft.CanonicalIsos" (required by "Draft.StrictnessMoreTemplates" via "Draft.Strictness")
Loading theory "Draft.Pseudofunctor" (required by "Draft.StrictnessMoreTemplates" via "Draft.Strictness")
locale bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "bicategory (\<cdot>) (\<star>) \<a> \<i> src trg"
locale weak_arrow_of_homs
  fixes C :: "'c => 'c => 'c"  (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and src\<^sub>C :: "'c => 'c"
    and trg\<^sub>C :: "'c => 'c"
    and D :: "'d => 'd => 'd"  (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and src\<^sub>D :: "'d => 'd"
    and trg\<^sub>D :: "'d => 'd"
    and F :: "'c => 'd"
  assumes
    "weak_arrow_of_homs (\<cdot>\<^sub>C) src\<^sub>C trg\<^sub>C
      (\<cdot>\<^sub>D) src\<^sub>D trg\<^sub>D F"
### theory "Draft.CanonicalIsos"
### 5.791s elapsed time, 12.298s cpu time, 1.565s GC time
locale pseudofunctor
  fixes
    V\<^sub>C :: "'c => 'c => 'c"
      (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and
    H\<^sub>C :: "'c => 'c => 'c"
      (infixr \<open>\<star>\<^sub>C\<close> 53)
    and
    \<a>\<^sub>C :: "'c => 'c => 'c => 'c"
      (\<open>\<a>\<^sub>C[_, _, _]\<close>)
    and \<i>\<^sub>C :: "'c => 'c"  (\<open>\<i>\<^sub>C[_]\<close>)
    and src\<^sub>C :: "'c => 'c"
    and trg\<^sub>C :: "'c => 'c"
    and
    V\<^sub>D :: "'d => 'd => 'd"
      (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and
    H\<^sub>D :: "'d => 'd => 'd"
      (infixr \<open>\<star>\<^sub>D\<close> 53)
    and
    \<a>\<^sub>D :: "'d => 'd => 'd => 'd"
      (\<open>\<a>\<^sub>D[_, _, _]\<close>)
    and \<i>\<^sub>D :: "'d => 'd"  (\<open>\<i>\<^sub>D[_]\<close>)
    and src\<^sub>D :: "'d => 'd"
    and trg\<^sub>D :: "'d => 'd"
    and F :: "'c => 'd"
    and \<Phi> :: "'c * 'c => 'd"
  assumes
    "pseudofunctor (\<cdot>\<^sub>C) (\<star>\<^sub>C) \<a>\<^sub>C
      \<i>\<^sub>C src\<^sub>C trg\<^sub>C (\<cdot>\<^sub>D)
      (\<star>\<^sub>D) \<a>\<^sub>D \<i>\<^sub>D src\<^sub>D trg\<^sub>D F
      \<Phi>"
locale pseudofunctor
  fixes
    V\<^sub>C :: "'c => 'c => 'c"
      (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and
    H\<^sub>C :: "'c => 'c => 'c"
      (infixr \<open>\<star>\<^sub>C\<close> 53)
    and
    \<a>\<^sub>C :: "'c => 'c => 'c => 'c"
      (\<open>\<a>\<^sub>C[_, _, _]\<close>)
    and \<i>\<^sub>C :: "'c => 'c"  (\<open>\<i>\<^sub>C[_]\<close>)
    and src\<^sub>C :: "'c => 'c"
    and trg\<^sub>C :: "'c => 'c"
    and
    V\<^sub>D :: "'d => 'd => 'd"
      (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and
    H\<^sub>D :: "'d => 'd => 'd"
      (infixr \<open>\<star>\<^sub>D\<close> 53)
    and
    \<a>\<^sub>D :: "'d => 'd => 'd => 'd"
      (\<open>\<a>\<^sub>D[_, _, _]\<close>)
    and \<i>\<^sub>D :: "'d => 'd"  (\<open>\<i>\<^sub>D[_]\<close>)
    and src\<^sub>D :: "'d => 'd"
    and trg\<^sub>D :: "'d => 'd"
    and F :: "'c => 'd"
    and \<Phi> :: "'c * 'c => 'd"
  assumes
    "pseudofunctor (\<cdot>\<^sub>C) (\<star>\<^sub>C) \<a>\<^sub>C
      \<i>\<^sub>C src\<^sub>C trg\<^sub>C (\<cdot>\<^sub>D)
      (\<star>\<^sub>D) \<a>\<^sub>D \<i>\<^sub>D src\<^sub>D trg\<^sub>D F
      \<Phi>"
locale op_bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and
    H\<^sub>B :: "'a => 'a => 'a"
      (infixr \<open>\<star>\<^sub>B\<close> 53)
    and
    \<a>\<^sub>B :: "'a => 'a => 'a => 'a"
      (\<open>\<a>\<^sub>B[_, _, _]\<close>)
    and \<i>\<^sub>B :: "'a => 'a"  (\<open>\<i>\<^sub>B[_]\<close>)
    and src\<^sub>B :: "'a => 'a"
    and trg\<^sub>B :: "'a => 'a"
  assumes
    "op_bicategory (\<cdot>) (\<star>\<^sub>B) \<a>\<^sub>B \<i>\<^sub>B
      src\<^sub>B trg\<^sub>B"
locale pseudofunctor
  fixes
    V\<^sub>C :: "'c => 'c => 'c"
      (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and
    H\<^sub>C :: "'c => 'c => 'c"
      (infixr \<open>\<star>\<^sub>C\<close> 53)
    and
    \<a>\<^sub>C :: "'c => 'c => 'c => 'c"
      (\<open>\<a>\<^sub>C[_, _, _]\<close>)
    and \<i>\<^sub>C :: "'c => 'c"  (\<open>\<i>\<^sub>C[_]\<close>)
    and src\<^sub>C :: "'c => 'c"
    and trg\<^sub>C :: "'c => 'c"
    and
    V\<^sub>D :: "'d => 'd => 'd"
      (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and
    H\<^sub>D :: "'d => 'd => 'd"
      (infixr \<open>\<star>\<^sub>D\<close> 53)
    and
    \<a>\<^sub>D :: "'d => 'd => 'd => 'd"
      (\<open>\<a>\<^sub>D[_, _, _]\<close>)
    and \<i>\<^sub>D :: "'d => 'd"  (\<open>\<i>\<^sub>D[_]\<close>)
    and src\<^sub>D :: "'d => 'd"
    and trg\<^sub>D :: "'d => 'd"
    and F :: "'c => 'd"
    and \<Phi> :: "'c * 'c => 'd"
  assumes
    "pseudofunctor (\<cdot>\<^sub>C) (\<star>\<^sub>C) \<a>\<^sub>C
      \<i>\<^sub>C src\<^sub>C trg\<^sub>C (\<cdot>\<^sub>D)
      (\<star>\<^sub>D) \<a>\<^sub>D \<i>\<^sub>D src\<^sub>D trg\<^sub>D F
      \<Phi>"
locale pseudofunctor
  fixes
    V\<^sub>C :: "'c => 'c => 'c"
      (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and
    H\<^sub>C :: "'c => 'c => 'c"
      (infixr \<open>\<star>\<^sub>C\<close> 53)
    and
    \<a>\<^sub>C :: "'c => 'c => 'c => 'c"
      (\<open>\<a>\<^sub>C[_, _, _]\<close>)
    and \<i>\<^sub>C :: "'c => 'c"  (\<open>\<i>\<^sub>C[_]\<close>)
    and src\<^sub>C :: "'c => 'c"
    and trg\<^sub>C :: "'c => 'c"
    and
    V\<^sub>D :: "'d => 'd => 'd"
      (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and
    H\<^sub>D :: "'d => 'd => 'd"
      (infixr \<open>\<star>\<^sub>D\<close> 53)
    and
    \<a>\<^sub>D :: "'d => 'd => 'd => 'd"
      (\<open>\<a>\<^sub>D[_, _, _]\<close>)
    and \<i>\<^sub>D :: "'d => 'd"  (\<open>\<i>\<^sub>D[_]\<close>)
    and src\<^sub>D :: "'d => 'd"
    and trg\<^sub>D :: "'d => 'd"
    and F :: "'c => 'd"
    and \<Phi> :: "'c * 'c => 'd"
  assumes
    "pseudofunctor (\<cdot>\<^sub>C) (\<star>\<^sub>C) \<a>\<^sub>C
      \<i>\<^sub>C src\<^sub>C trg\<^sub>C (\<cdot>\<^sub>D)
      (\<star>\<^sub>D) \<a>\<^sub>D \<i>\<^sub>D src\<^sub>D trg\<^sub>D F
      \<Phi>"
locale identity_pseudofunctor
  fixes
    V\<^sub>B :: "'b => 'b => 'b"
      (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and
    H\<^sub>B :: "'b => 'b => 'b"
      (infixr \<open>\<star>\<^sub>B\<close> 53)
    and
    \<a>\<^sub>B :: "'b => 'b => 'b => 'b"
      (\<open>\<a>\<^sub>B[_, _, _]\<close>)
    and \<i>\<^sub>B :: "'b => 'b"  (\<open>\<i>\<^sub>B[_]\<close>)
    and src\<^sub>B :: "'b => 'b"
    and trg\<^sub>B :: "'b => 'b"
  assumes
    "identity_pseudofunctor (\<cdot>\<^sub>B) (\<star>\<^sub>B) \<a>\<^sub>B
      \<i>\<^sub>B src\<^sub>B trg\<^sub>B"
locale embedding_pseudofunctor
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<^sub>B\<close> 55)
    and
    \<a>\<^sub>B :: "'a => 'a => 'a => 'a"
      (\<open>\<a>\<^sub>B[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src\<^sub>B :: "'a => 'a"
    and trg\<^sub>B :: "'a => 'a"
    and Arr :: "'a => bool"
  assumes
    "embedding_pseudofunctor (\<cdot>\<^sub>B) (\<star>\<^sub>B)
      \<a>\<^sub>B \<i> src\<^sub>B trg\<^sub>B Arr"
locale composite_pseudofunctor
  fixes
    V\<^sub>B :: "'b => 'b => 'b"
      (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and
    H\<^sub>B :: "'b => 'b => 'b"
      (infixr \<open>\<star>\<^sub>B\<close> 53)
    and
    \<a>\<^sub>B :: "'b => 'b => 'b => 'b"
      (\<open>\<a>\<^sub>B[_, _, _]\<close>)
    and \<i>\<^sub>B :: "'b => 'b"  (\<open>\<i>\<^sub>B[_]\<close>)
    and src\<^sub>B :: "'b => 'b"
    and trg\<^sub>B :: "'b => 'b"
    and
    V\<^sub>C :: "'c => 'c => 'c"
      (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and
    H\<^sub>C :: "'c => 'c => 'c"
      (infixr \<open>\<star>\<^sub>C\<close> 53)
    and
    \<a>\<^sub>C :: "'c => 'c => 'c => 'c"
      (\<open>\<a>\<^sub>C[_, _, _]\<close>)
    and \<i>\<^sub>C :: "'c => 'c"  (\<open>\<i>\<^sub>C[_]\<close>)
    and src\<^sub>C :: "'c => 'c"
    and trg\<^sub>C :: "'c => 'c"
    and
    V\<^sub>D :: "'d => 'd => 'd"
      (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and
    H\<^sub>D :: "'d => 'd => 'd"
      (infixr \<open>\<star>\<^sub>D\<close> 53)
    and
    \<a>\<^sub>D :: "'d => 'd => 'd => 'd"
      (\<open>\<a>\<^sub>D[_, _, _]\<close>)
    and \<i>\<^sub>D :: "'d => 'd"  (\<open>\<i>\<^sub>D[_]\<close>)
    and src\<^sub>D :: "'d => 'd"
    and trg\<^sub>D :: "'d => 'd"
    and F :: "'b => 'c"
    and \<Phi>\<^sub>F :: "'b * 'b => 'c"
    and G :: "'c => 'd"
    and \<Phi>\<^sub>G :: "'c * 'c => 'd"
  assumes
    "composite_pseudofunctor (\<cdot>\<^sub>B) (\<star>\<^sub>B)
      \<a>\<^sub>B \<i>\<^sub>B src\<^sub>B trg\<^sub>B (\<cdot>\<^sub>C)
      (\<star>\<^sub>C) \<a>\<^sub>C \<i>\<^sub>C src\<^sub>C trg\<^sub>C
      (\<cdot>\<^sub>D) (\<star>\<^sub>D) \<a>\<^sub>D \<i>\<^sub>D
      src\<^sub>D trg\<^sub>D F \<Phi>\<^sub>F G \<Phi>\<^sub>G"
locale restricted_pseudofunctor
  fixes
    V\<^sub>C :: "'c => 'c => 'c"
      (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and
    H\<^sub>C :: "'c => 'c => 'c"
      (infixr \<open>\<star>\<^sub>C\<close> 53)
    and
    \<a>\<^sub>C :: "'c => 'c => 'c => 'c"
      (\<open>\<a>\<^sub>C[_, _, _]\<close>)
    and \<i>\<^sub>C :: "'c => 'c"  (\<open>\<i>\<^sub>C[_]\<close>)
    and src\<^sub>C :: "'c => 'c"
    and trg\<^sub>C :: "'c => 'c"
    and
    V\<^sub>D :: "'d => 'd => 'd"
      (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and
    H\<^sub>D :: "'d => 'd => 'd"
      (infixr \<open>\<star>\<^sub>D\<close> 53)
    and
    \<a>\<^sub>D :: "'d => 'd => 'd => 'd"
      (\<open>\<a>\<^sub>D[_, _, _]\<close>)
    and \<i>\<^sub>D :: "'d => 'd"  (\<open>\<i>\<^sub>D[_]\<close>)
    and src\<^sub>D :: "'d => 'd"
    and trg\<^sub>D :: "'d => 'd"
    and F :: "'c => 'd"
    and \<Phi> :: "'c * 'c => 'd"
    and Arr :: "'c => bool"
  assumes
    "restricted_pseudofunctor (\<cdot>\<^sub>C) (\<star>\<^sub>C)
      \<a>\<^sub>C \<i>\<^sub>C src\<^sub>C trg\<^sub>C (\<cdot>\<^sub>D)
      (\<star>\<^sub>D) \<a>\<^sub>D \<i>\<^sub>D src\<^sub>D trg\<^sub>D F
      \<Phi> Arr"
locale corestricted_pseudofunctor
  fixes
    V\<^sub>C :: "'c => 'c => 'c"
      (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and
    H\<^sub>C :: "'c => 'c => 'c"
      (infixr \<open>\<star>\<^sub>C\<close> 53)
    and
    \<a>\<^sub>C :: "'c => 'c => 'c => 'c"
      (\<open>\<a>\<^sub>C[_, _, _]\<close>)
    and \<i>\<^sub>C :: "'c => 'c"  (\<open>\<i>\<^sub>C[_]\<close>)
    and src\<^sub>C :: "'c => 'c"
    and trg\<^sub>C :: "'c => 'c"
    and
    V\<^sub>D :: "'d => 'd => 'd"
      (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and
    H\<^sub>D :: "'d => 'd => 'd"
      (infixr \<open>\<star>\<^sub>D\<close> 53)
    and
    \<a>\<^sub>D :: "'d => 'd => 'd => 'd"
      (\<open>\<a>\<^sub>D[_, _, _]\<close>)
    and \<i>\<^sub>D :: "'d => 'd"  (\<open>\<i>\<^sub>D[_]\<close>)
    and src\<^sub>D :: "'d => 'd"
    and trg\<^sub>D :: "'d => 'd"
    and F :: "'c => 'd"
    and \<Phi> :: "'c * 'c => 'd"
    and Obj :: "'d => bool"
  assumes
    "corestricted_pseudofunctor (\<cdot>\<^sub>C) (\<star>\<^sub>C)
      \<a>\<^sub>C \<i>\<^sub>C src\<^sub>C trg\<^sub>C (\<cdot>\<^sub>D)
      (\<star>\<^sub>D) \<a>\<^sub>D \<i>\<^sub>D src\<^sub>D trg\<^sub>D F
      \<Phi> Obj"
locale pseudofunctor
  fixes
    V\<^sub>C :: "'c => 'c => 'c"
      (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and
    H\<^sub>C :: "'c => 'c => 'c"
      (infixr \<open>\<star>\<^sub>C\<close> 53)
    and
    \<a>\<^sub>C :: "'c => 'c => 'c => 'c"
      (\<open>\<a>\<^sub>C[_, _, _]\<close>)
    and \<i>\<^sub>C :: "'c => 'c"  (\<open>\<i>\<^sub>C[_]\<close>)
    and src\<^sub>C :: "'c => 'c"
    and trg\<^sub>C :: "'c => 'c"
    and
    V\<^sub>D :: "'d => 'd => 'd"
      (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and
    H\<^sub>D :: "'d => 'd => 'd"
      (infixr \<open>\<star>\<^sub>D\<close> 53)
    and
    \<a>\<^sub>D :: "'d => 'd => 'd => 'd"
      (\<open>\<a>\<^sub>D[_, _, _]\<close>)
    and \<i>\<^sub>D :: "'d => 'd"  (\<open>\<i>\<^sub>D[_]\<close>)
    and src\<^sub>D :: "'d => 'd"
    and trg\<^sub>D :: "'d => 'd"
    and F :: "'c => 'd"
    and \<Phi> :: "'c * 'c => 'd"
  assumes
    "pseudofunctor (\<cdot>\<^sub>C) (\<star>\<^sub>C) \<a>\<^sub>C
      \<i>\<^sub>C src\<^sub>C trg\<^sub>C (\<cdot>\<^sub>D)
      (\<star>\<^sub>D) \<a>\<^sub>D \<i>\<^sub>D src\<^sub>D trg\<^sub>D F
      \<Phi>"
locale equivalence_pseudofunctor
  fixes
    V\<^sub>C :: "'a => 'a => 'a"
      (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and
    H\<^sub>C :: "'a => 'a => 'a"
      (infixr \<open>\<star>\<^sub>C\<close> 53)
    and
    \<a>\<^sub>C :: "'a => 'a => 'a => 'a"
      (\<open>\<a>\<^sub>C[_, _, _]\<close>)
    and \<i>\<^sub>C :: "'a => 'a"  (\<open>\<i>\<^sub>C[_]\<close>)
    and src\<^sub>C :: "'a => 'a"
    and trg\<^sub>C :: "'a => 'a"
    and
    V\<^sub>D :: "'b => 'b => 'b"
      (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and
    H\<^sub>D :: "'b => 'b => 'b"
      (infixr \<open>\<star>\<^sub>D\<close> 53)
    and
    \<a>\<^sub>D :: "'b => 'b => 'b => 'b"
      (\<open>\<a>\<^sub>D[_, _, _]\<close>)
    and \<i>\<^sub>D :: "'b => 'b"  (\<open>\<i>\<^sub>D[_]\<close>)
    and src\<^sub>D :: "'b => 'b"
    and trg\<^sub>D :: "'b => 'b"
    and F :: "'a => 'b"
    and \<Phi> :: "'a * 'a => 'b"
  assumes
    "equivalence_pseudofunctor (\<cdot>\<^sub>C) (\<star>\<^sub>C)
      \<a>\<^sub>C \<i>\<^sub>C src\<^sub>C trg\<^sub>C (\<cdot>\<^sub>D)
      (\<star>\<^sub>D) \<a>\<^sub>D \<i>\<^sub>D src\<^sub>D trg\<^sub>D F
      \<Phi>"
locale equivalence_pseudofunctor_at_hom
  fixes
    V\<^sub>C :: "'a => 'a => 'a"
      (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and
    H\<^sub>C :: "'a => 'a => 'a"
      (infixr \<open>\<star>\<^sub>C\<close> 53)
    and
    \<a>\<^sub>C :: "'a => 'a => 'a => 'a"
      (\<open>\<a>\<^sub>C[_, _, _]\<close>)
    and \<i>\<^sub>C :: "'a => 'a"  (\<open>\<i>\<^sub>C[_]\<close>)
    and src\<^sub>C :: "'a => 'a"
    and trg\<^sub>C :: "'a => 'a"
    and
    V\<^sub>D :: "'b => 'b => 'b"
      (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and
    H\<^sub>D :: "'b => 'b => 'b"
      (infixr \<open>\<star>\<^sub>D\<close> 53)
    and
    \<a>\<^sub>D :: "'b => 'b => 'b => 'b"
      (\<open>\<a>\<^sub>D[_, _, _]\<close>)
    and \<i>\<^sub>D :: "'b => 'b"  (\<open>\<i>\<^sub>D[_]\<close>)
    and src\<^sub>D :: "'b => 'b"
    and trg\<^sub>D :: "'b => 'b"
    and F :: "'a => 'b"
    and \<Phi> :: "'a * 'a => 'b"
    and a :: "'a"
    and a' :: "'a"
  assumes
    "equivalence_pseudofunctor_at_hom (\<cdot>\<^sub>C) (\<star>\<^sub>C)
      \<a>\<^sub>C \<i>\<^sub>C src\<^sub>C trg\<^sub>C (\<cdot>\<^sub>D)
      (\<star>\<^sub>D) \<a>\<^sub>D \<i>\<^sub>D src\<^sub>D trg\<^sub>D F
      \<Phi> a a'"
locale identity_pseudofunctor
  fixes
    V\<^sub>B :: "'b => 'b => 'b"
      (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and
    H\<^sub>B :: "'b => 'b => 'b"
      (infixr \<open>\<star>\<^sub>B\<close> 53)
    and
    \<a>\<^sub>B :: "'b => 'b => 'b => 'b"
      (\<open>\<a>\<^sub>B[_, _, _]\<close>)
    and \<i>\<^sub>B :: "'b => 'b"  (\<open>\<i>\<^sub>B[_]\<close>)
    and src\<^sub>B :: "'b => 'b"
    and trg\<^sub>B :: "'b => 'b"
  assumes
    "identity_pseudofunctor (\<cdot>\<^sub>B) (\<star>\<^sub>B) \<a>\<^sub>B
      \<i>\<^sub>B src\<^sub>B trg\<^sub>B"
locale composite_equivalence_pseudofunctor
  fixes
    V\<^sub>B :: "'a => 'a => 'a"
      (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and
    H\<^sub>B :: "'a => 'a => 'a"
      (infixr \<open>\<star>\<^sub>B\<close> 53)
    and
    \<a>\<^sub>B :: "'a => 'a => 'a => 'a"
      (\<open>\<a>\<^sub>B[_, _, _]\<close>)
    and \<i>\<^sub>B :: "'a => 'a"  (\<open>\<i>\<^sub>B[_]\<close>)
    and src\<^sub>B :: "'a => 'a"
    and trg\<^sub>B :: "'a => 'a"
    and
    V\<^sub>C :: "'b => 'b => 'b"
      (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and
    H\<^sub>C :: "'b => 'b => 'b"
      (infixr \<open>\<star>\<^sub>C\<close> 53)
    and
    \<a>\<^sub>C :: "'b => 'b => 'b => 'b"
      (\<open>\<a>\<^sub>C[_, _, _]\<close>)
    and \<i>\<^sub>C :: "'b => 'b"  (\<open>\<i>\<^sub>C[_]\<close>)
    and src\<^sub>C :: "'b => 'b"
    and trg\<^sub>C :: "'b => 'b"
    and
    V\<^sub>D :: "'c => 'c => 'c"
      (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and
    H\<^sub>D :: "'c => 'c => 'c"
      (infixr \<open>\<star>\<^sub>D\<close> 53)
    and
    \<a>\<^sub>D :: "'c => 'c => 'c => 'c"
      (\<open>\<a>\<^sub>D[_, _, _]\<close>)
    and \<i>\<^sub>D :: "'c => 'c"  (\<open>\<i>\<^sub>D[_]\<close>)
    and src\<^sub>D :: "'c => 'c"
    and trg\<^sub>D :: "'c => 'c"
    and F :: "'a => 'b"
    and \<Phi>\<^sub>F :: "'a * 'a => 'b"
    and G :: "'b => 'c"
    and \<Phi>\<^sub>G :: "'b * 'b => 'c"
  assumes
    "composite_equivalence_pseudofunctor (\<cdot>\<^sub>B) (\<star>\<^sub>B)
      \<a>\<^sub>B \<i>\<^sub>B src\<^sub>B trg\<^sub>B (\<cdot>\<^sub>C)
      (\<star>\<^sub>C) \<a>\<^sub>C \<i>\<^sub>C src\<^sub>C trg\<^sub>C
      (\<cdot>\<^sub>D) (\<star>\<^sub>D) \<a>\<^sub>D \<i>\<^sub>D
      src\<^sub>D trg\<^sub>D F \<Phi>\<^sub>F G \<Phi>\<^sub>G"
### theory "Draft.Pseudofunctor"
### 123.516s elapsed time, 164.017s cpu time, 48.396s GC time
Loading theory "Draft.Strictness" (required by "Draft.StrictnessMoreTemplates")
locale normal_bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "normal_bicategory (\<cdot>) (\<star>) \<a> \<i> src trg"
locale strict_bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "strict_bicategory (\<cdot>) (\<star>) \<a> \<i> src trg"
locale bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
  assumes "bicategory (\<cdot>) (\<star>) \<a> \<i> src trg"
locale strictified_bicategory
  fixes
    V\<^sub>B :: "'a => 'a => 'a"
      (infixr \<open>\<cdot>\<^sub>B\<close> 55)
    and
    H\<^sub>B :: "'a => 'a => 'a"
      (infixr \<open>\<star>\<^sub>B\<close> 53)
    and
    \<a>\<^sub>B :: "'a => 'a => 'a => 'a"
      (\<open>\<a>\<^sub>B[_, _, _]\<close>)
    and \<i>\<^sub>B :: "'a => 'a"  (\<open>\<i>\<^sub>B[_]\<close>)
    and src\<^sub>B :: "'a => 'a"
    and trg\<^sub>B :: "'a => 'a"
  assumes
    "strictified_bicategory (\<cdot>\<^sub>B) (\<star>\<^sub>B) \<a>\<^sub>B
      \<i>\<^sub>B src\<^sub>B trg\<^sub>B"
locale pseudofunctor_into_strict_bicategory
  fixes
    V\<^sub>C :: "'a => 'a => 'a"
      (infixr \<open>\<cdot>\<^sub>C\<close> 55)
    and
    H\<^sub>C :: "'a => 'a => 'a"
      (infixr \<open>\<star>\<^sub>C\<close> 53)
    and
    \<a>\<^sub>C :: "'a => 'a => 'a => 'a"
      (\<open>\<a>\<^sub>C[_, _, _]\<close>)
    and \<i>\<^sub>C :: "'a => 'a"  (\<open>\<i>\<^sub>C[_]\<close>)
    and src\<^sub>C :: "'a => 'a"
    and trg\<^sub>C :: "'a => 'a"
    and
    V\<^sub>D :: "'b => 'b => 'b"
      (infixr \<open>\<cdot>\<^sub>D\<close> 55)
    and
    H\<^sub>D :: "'b => 'b => 'b"
      (infixr \<open>\<star>\<^sub>D\<close> 53)
    and
    \<a>\<^sub>D :: "'b => 'b => 'b => 'b"
      (\<open>\<a>\<^sub>D[_, _, _]\<close>)
    and \<i>\<^sub>D :: "'b => 'b"  (\<open>\<i>\<^sub>D[_]\<close>)
    and src\<^sub>D :: "'b => 'b"
    and trg\<^sub>D :: "'b => 'b"
    and F :: "'a => 'b"
    and \<Phi> :: "'a * 'a => 'b"
  assumes
    "pseudofunctor_into_strict_bicategory (\<cdot>\<^sub>C)
      (\<star>\<^sub>C) \<a>\<^sub>C \<i>\<^sub>C src\<^sub>C trg\<^sub>C
      (\<cdot>\<^sub>D) (\<star>\<^sub>D) \<a>\<^sub>D \<i>\<^sub>D
      src\<^sub>D trg\<^sub>D F \<Phi>"
locale equivalence_in_strict_bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
    and f :: "'a"
    and g :: "'a"
    and \<eta> :: "'a"
    and \<epsilon> :: "'a"
  assumes
    "equivalence_in_strict_bicategory (\<cdot>) (\<star>) \<a> \<i> src trg
      f g \<eta> \<epsilon>"
locale equivalence_in_bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
    and f :: "'a"
    and g :: "'a"
    and \<eta> :: "'a"
    and \<epsilon> :: "'a"
  assumes "internal_equivalence f g \<eta> \<epsilon>"
locale equivalence_in_strict_bicategory
  fixes V :: "'a => 'a => 'a"  (infixr \<open>\<cdot>\<close> 55)
    and H :: "'a => 'a => 'a"  (infixr \<open>\<star>\<close> 53)
    and \<a> :: "'a => 'a => 'a => 'a"  (\<open>\<a>[_, _, _]\<close>)
    and \<i> :: "'a => 'a"  (\<open>\<i>[_]\<close>)
    and src :: "'a => 'a"
    and trg :: "'a => 'a"
    and f :: "'a"
    and g :: "'a"
    and \<eta> :: "'a"
    and \<epsilon> :: "'a"
  assumes
    "equivalence_in_strict_bicategory (\<cdot>) (\<star>) \<a> \<i> src trg
      f g \<eta> \<epsilon>"
### theory "Draft.Strictness"
### 90.587s elapsed time, 106.997s cpu time, 22.724s GC time
Loading theory "Draft.StrictnessMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.StrictnessMoreTemplates"
### 0.416s elapsed time, 0.676s cpu time, 0.099s GC time
val it = (): unit
