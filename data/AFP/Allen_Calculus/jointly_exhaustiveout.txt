Loading theory "Draft.xor_cal" (required by "Draft.jointly_exhaustiveMoreTemplates" via "Draft.jointly_exhaustive" via "Draft.allen" via "Draft.axioms")
Loading theory "HOL-Eisbach.Eisbach" (required by "Draft.jointly_exhaustiveMoreTemplates" via "Draft.jointly_exhaustive" via "Draft.allen" via "HOL-Eisbach.Eisbach_Tools")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.jointly_exhaustiveMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.jointly_exhaustiveMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
signature PARSE_TOOLS =
  sig
    val is_real_val: ('a, 'b) parse_val -> bool
    val name_term: (term, string) parse_val parser
    val parse_term_val: 'a parser -> (term, 'a) parse_val parser
    val parse_thm_val: 'a parser -> (thm, 'a) parse_val parser
    datatype ('a, 'b) parse_val
    = Parse_Val of 'b * ('a -> unit) | Real_Val of 'a
    val parse_val_cases:
       ('a -> 'b) -> ('b, 'a) parse_val -> 'b * ('b -> unit)
    val the_parse_fun: ('a, 'b) parse_val -> 'a -> unit
    val the_parse_val: ('a, 'b) parse_val -> 'b
    val the_real_val: ('a, 'b) parse_val -> 'a
  end
structure Parse_Tools: PARSE_TOOLS
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "Draft.xor_cal"
### 0.049s elapsed time, 0.192s cpu time, 0.000s GC time
Loading theory "Draft.axioms" (required by "Draft.jointly_exhaustiveMoreTemplates" via "Draft.jointly_exhaustive" via "Draft.allen")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
signature METHOD_CLOSURE =
  sig
    val apply_method:
       Proof.context ->
         string ->
           term list ->
             thm list list ->
               (Proof.context -> Method.method) list ->
                 Proof.context -> thm list -> context_tactic
    val method:
       binding ->
         (binding * typ option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
    val method_cmd:
       binding ->
         (binding * string option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
  end
structure Method_Closure: METHOD_CLOSURE
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.147s elapsed time, 0.570s cpu time, 0.033s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.jointly_exhaustiveMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
structure Eisbach_Rule_Insts: sig end
class interval = type +
  fixes meets :: "'a => 'a => bool"
    and \<I> :: "'a => bool"
  assumes
    "meets_atrans":
      "!!p q r.
          [| p \<parallel> q; q \<parallel> r |] ==> ~ p \<parallel> r"
    and "meets_irrefl": "!!p. \<I> p ==> ~ p \<parallel> p"
    and "meets_asym": "!!p q. p \<parallel> q ==> ~ q \<parallel> p"
    and "meets_wd": "!!p q. p \<parallel> q ==> \<I> p & \<I> q"
    and
    "M1":
      "!!p q s r.
          [| p \<parallel> q; p \<parallel> s; r \<parallel> q |]
          ==> r \<parallel> s"
    and
    "M2":
      "!!p q r s.
          [| p \<parallel> q; r \<parallel> s |]
          ==> p \<parallel> s \<oplus>
              ((EX t. p \<parallel> t & t \<parallel> s) \<oplus>
               (EX t. r \<parallel> t & t \<parallel> q))"
    and "M3": "!!p. \<I> p ==> EX q r. q \<parallel> p & p \<parallel> r"
    and
    "M4":
      "!!p q s r.
          [| p \<parallel> q; q \<parallel> s; p \<parallel> r;
             r \<parallel> s |]
          ==> q = r"
    and
    "M5exist":
      "!!p q.
          p \<parallel> q ==>
          EX r s t.
             r \<parallel> p &
             p \<parallel> q &
             q \<parallel> s & r \<parallel> t & t \<parallel> s"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "Draft.axioms"
### 0.155s elapsed time, 0.606s cpu time, 0.033s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.jointly_exhaustiveMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.328s elapsed time, 1.280s cpu time, 0.114s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.jointly_exhaustiveMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.213s elapsed time, 0.838s cpu time, 0.081s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.jointly_exhaustiveMoreTemplates" via "Draft.ExtrEqs")
### ML warning (line 170 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 187 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 309 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
signature MATCH_METHOD =
  sig
    val focus_params: Proof.context -> term list
    val focus_schematics: Proof.context -> Envir.tenv
  end
structure Match_Method: MATCH_METHOD
val method_evaluate = fn: Method.text -> Proof.context -> thm list -> tactic
### theory "HOL-Eisbach.Eisbach"
### 0.454s elapsed time, 1.771s cpu time, 0.180s GC time
Loading theory "HOL-Eisbach.Eisbach_Tools" (required by "Draft.jointly_exhaustiveMoreTemplates" via "Draft.jointly_exhaustive" via "Draft.allen")
val try_map = fn: 'a Seq.seq -> 'a Seq.seq -> 'a Seq.seq
val uncurry_rule = fn: thm -> thm
val curry_rule = fn: thm -> thm
### theory "HOL-Eisbach.Eisbach_Tools"
### 0.031s elapsed time, 0.127s cpu time, 0.000s GC time
Loading theory "Draft.allen" (required by "Draft.jointly_exhaustiveMoreTemplates" via "Draft.jointly_exhaustive")
consts
  shift :: "'a list => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
Proofs for coinductive predicate(s) "streamsp"
class arelations = interval +
  fixes e :: "('a * 'a) set"
    and m :: "('a * 'a) set"
    and b :: "('a * 'a) set"
    and ov :: "('a * 'a) set"
    and d :: "('a * 'a) set"
    and s :: "('a * 'a) set"
    and f :: "('a * 'a) set"
  assumes "e": "!!p q. ((p, q) : e) = (p = q)"
    and "m": "!!p q. ((p, q) : m) = p \<parallel> q"
    and
    "b": "!!p q. ((p, q) : b) = (EX t. p \<parallel> t & t \<parallel> q)"
    and
    "ov":
      "!!p q.
          ((p, q) : ov) =
          (EX k l u v t.
              (k \<parallel> p & p \<parallel> u & u \<parallel> v) &
              (k \<parallel> l & l \<parallel> q & q \<parallel> v) &
              l \<parallel> t & t \<parallel> u)"
    and
    "s": "!!p q.
             ((p, q) : s) =
             (EX k u v.
                 k \<parallel> p &
                 p \<parallel> u &
                 u \<parallel> v & k \<parallel> q & q \<parallel> v)"
    and
    "f": "!!p q.
             ((p, q) : f) =
             (EX k l u.
                 k \<parallel> l &
                 l \<parallel> p &
                 p \<parallel> u & k \<parallel> q & q \<parallel> u)"
    and
    "d": "!!p q.
             ((p, q) : d) =
             (EX k l u v.
                 k \<parallel> l &
                 l \<parallel> p &
                 p \<parallel> u &
                 u \<parallel> v & k \<parallel> q & q \<parallel> v)"
consts
  right :: "'a tree => 'a tree"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.034s elapsed time, 3.972s cpu time, 0.806s GC time
### theory "HOL-Library.Stream"
### 1.074s elapsed time, 4.126s cpu time, 0.806s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.112s elapsed time, 6.666s cpu time, 1.351s GC time
Loading theory "Draft.Templates" (required by "Draft.jointly_exhaustiveMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.050s elapsed time, 0.102s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.jointly_exhaustiveMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.504s elapsed time, 1.029s cpu time, 0.052s GC time
### theory "Draft.allen"
### 3.233s elapsed time, 7.432s cpu time, 1.293s GC time
Loading theory "Draft.jointly_exhaustive" (required by "Draft.jointly_exhaustiveMoreTemplates")
### theory "Draft.jointly_exhaustive"
### 0.038s elapsed time, 0.040s cpu time, 0.000s GC time
Loading theory "Draft.jointly_exhaustiveMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.jointly_exhaustiveMoreTemplates"
### 0.297s elapsed time, 0.439s cpu time, 0.039s GC time
val it = (): unit
