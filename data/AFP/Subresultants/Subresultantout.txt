Loading theory "Draft.Binary_Exponentiation" (required by "Draft.SubresultantMoreTemplates" via "Draft.Subresultant")
Loading theory "HOL-Combinatorics.Transposition" (required by "Draft.SubresultantMoreTemplates" via "Draft.Subresultant" via "Draft.Resultant_Prelim" via "Jordan_Normal_Form.Determinant" via "Jordan_Normal_Form.Missing_Misc" via "HOL-Combinatorics.Permutations")
Loading theory "HOL-Computational_Algebra.Fraction_Field" (required by "Draft.SubresultantMoreTemplates" via "Draft.Subresultant" via "Draft.Resultant_Prelim" via "Jordan_Normal_Form.Determinant" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Normalized_Fraction")
Loading theory "HOL-Library.Cancellation" (required by "Draft.SubresultantMoreTemplates" via "Draft.Subresultant" via "Draft.Resultant_Prelim" via "Jordan_Normal_Form.Determinant" via "Jordan_Normal_Form.Missing_Misc" via "HOL-Combinatorics.Permutations" via "HOL-Library.Multiset")
class monoid_mult = semigroup_mult + power +
  assumes "mult_1_left": "!!a. (1::'a) * a = a"
    and "mult_1_right": "!!a. a * (1::'a) = a"
### theory "HOL-Combinatorics.Transposition"
### 0.134s elapsed time, 0.551s cpu time, 0.026s GC time
Loading theory "HOL-Library.FuncSet" (required by "Draft.SubresultantMoreTemplates" via "Draft.Subresultant" via "Draft.Resultant_Prelim" via "Jordan_Normal_Form.Determinant" via "Jordan_Normal_Form.Missing_Misc")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Binary_Exponentiation"
### 0.168s elapsed time, 0.700s cpu time, 0.026s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SubresultantMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.122s elapsed time, 0.474s cpu time, 0.056s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.SubresultantMoreTemplates" via "Draft.Subresultant" via "Draft.Resultant_Prelim" via "Jordan_Normal_Form.Determinant" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial")
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
instantiation
  fract :: (idom) comm_ring_1
  uminus_fract == uminus :: 'a fract => 'a fract
  one_fract == one_class.one :: 'a fract
  times_fract == times :: 'a fract => 'a fract => 'a fract
  zero_fract == zero_class.zero :: 'a fract
  minus_fract == minus :: 'a fract => 'a fract => 'a fract
  plus_fract == plus :: 'a fract => 'a fract => 'a fract
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.442s elapsed time, 1.772s cpu time, 0.179s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.SubresultantMoreTemplates" via "Draft.Subresultant" via "Draft.Resultant_Prelim" via "Jordan_Normal_Form.Determinant" via "Jordan_Normal_Form.Missing_Misc" via "HOL-Combinatorics.Permutations")
consts
  enumerate :: "'a set => nat => 'a"
### theory "HOL-Library.FuncSet"
### 0.441s elapsed time, 1.731s cpu time, 0.278s GC time
Loading theory "HOL-Algebra.Congruence" (required by "Draft.SubresultantMoreTemplates" via "Draft.Subresultant" via "Draft.Resultant_Prelim" via "Jordan_Normal_Form.Determinant" via "Jordan_Normal_Form.Column_Operations" via "Jordan_Normal_Form.Gauss_Jordan_Elimination" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice" via "HOL-Algebra.Order")
### theory "HOL-Library.Infinite_Set"
### 0.309s elapsed time, 1.207s cpu time, 0.222s GC time
Loading theory "HOL-Library.Disjoint_Sets" (required by "Draft.SubresultantMoreTemplates" via "Draft.Subresultant" via "Draft.Resultant_Prelim" via "Jordan_Normal_Form.Determinant" via "Jordan_Normal_Form.Missing_Misc" via "HOL-Combinatorics.Permutations")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
instantiation
  fract :: (idom) field
  inverse_fract == inverse :: 'a fract => 'a fract
  divide_fract == divide :: 'a fract => 'a fract => 'a fract
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
instantiation
  fract :: (linordered_idom) linorder
  less_eq_fract == less_eq :: 'a fract => 'a fract => bool
  less_fract == less :: 'a fract => 'a fract => bool
instantiation
  fract :: (linordered_idom) linordered_field
  sgn_fract == sgn :: 'a fract => 'a fract
  abs_fract == abs :: 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) distrib_lattice
  inf_fract == inf :: 'a fract => 'a fract => 'a fract
  sup_fract == sup :: 'a fract => 'a fract => 'a fract
### theory "HOL-Library.Disjoint_Sets"
### 0.442s elapsed time, 1.616s cpu time, 0.612s GC time
Loading theory "HOL-Library.More_List" (required by "Draft.SubresultantMoreTemplates" via "Draft.Subresultant" via "Draft.Resultant_Prelim" via "Jordan_Normal_Form.Determinant" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial")
### theory "HOL-Computational_Algebra.Fraction_Field"
### 1.051s elapsed time, 4.041s cpu time, 0.916s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SubresultantMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.More_List"
### 0.194s elapsed time, 0.765s cpu time, 0.051s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SubresultantMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
locale equivalence
  fixes S :: "('a, 'b) eq_object_scheme"  (structure)
  assumes "equivalence S"
locale partition
  fixes A :: "'a set"
    and B :: "'a set set"
  assumes "Congruence.partition A B"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
Found termination order: "size_list size <*mlex*> {}"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
### theory "HOL-Library.Nat_Bijection"
### 0.387s elapsed time, 1.516s cpu time, 0.233s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SubresultantMoreTemplates" via "Draft.ExtrEqs")
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
### theory "HOL-Algebra.Congruence"
### 0.916s elapsed time, 3.474s cpu time, 0.845s GC time
Loading theory "HOL-Algebra.Order" (required by "Draft.SubresultantMoreTemplates" via "Draft.Subresultant" via "Draft.Resultant_Prelim" via "Jordan_Normal_Form.Determinant" via "Jordan_Normal_Form.Column_Operations" via "Jordan_Normal_Form.Gauss_Jordan_Elimination" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice")
### theory "HOL-Library.Set_Algebras"
### 0.223s elapsed time, 0.881s cpu time, 0.097s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SubresultantMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
consts
  left :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  right :: "'a tree => 'a tree"
consts
  cycle :: "'a list => 'a stream"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
consts
  mset :: "'a list => 'a multiset"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
locale partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "partial_order L"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
locale weak_partial_order_bottom
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_bottom L"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
locale weak_partial_order_top
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_top L"
### theory "HOL-Library.Stream"
### 1.210s elapsed time, 4.595s cpu time, 1.268s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SubresultantMoreTemplates" via "Draft.ExtrEqs")
locale weak_total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_total_order L"
Found termination order: "size <*mlex*> {}"
locale total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "total_order L"
### theory "HOL-Algebra.Order"
### 1.214s elapsed time, 4.613s cpu time, 1.268s GC time
Loading theory "HOL-Algebra.Lattice" (required by "Draft.SubresultantMoreTemplates" via "Draft.Subresultant" via "Draft.Resultant_Prelim" via "Jordan_Normal_Form.Determinant" via "Jordan_Normal_Form.Column_Operations" via "Jordan_Normal_Form.Gauss_Jordan_Elimination" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice")
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
Found termination order: "size <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "size <*mlex*> {}"
locale weak_upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_upper_semilattice L"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
locale weak_lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lower_semilattice L"
locale weak_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lattice L"
Found termination order: "size <*mlex*> {}"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
Found termination order: "size <*mlex*> {}"
locale weak_bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_bounded_lattice L"
locale upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "upper_semilattice L"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lower_semilattice L"
locale Lattice.lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lattice L"
### theory "HOL-Library.BigO"
### 1.228s elapsed time, 4.614s cpu time, 1.600s GC time
Loading theory "HOL-Library.Complex_Order" (required by "Draft.SubresultantMoreTemplates" via "Draft.Subresultant" via "Draft.Resultant_Prelim" via "Jordan_Normal_Form.Determinant" via "Jordan_Normal_Form.Column_Operations" via "Jordan_Normal_Form.Gauss_Jordan_Elimination" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Conjugate")
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
### theory "HOL-Algebra.Lattice"
### 1.209s elapsed time, 4.538s cpu time, 1.600s GC time
instantiation
  complex :: order
  less_eq_complex == less_eq :: complex => complex => bool
  less_complex == less :: complex => complex => bool
Loading theory "HOL-Algebra.Complete_Lattice" (required by "Draft.SubresultantMoreTemplates" via "Draft.Subresultant" via "Draft.Resultant_Prelim" via "Jordan_Normal_Form.Determinant" via "Jordan_Normal_Form.Column_Operations" via "Jordan_Normal_Form.Gauss_Jordan_Elimination" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group")
### theory "HOL-Library.Complex_Order"
### 0.066s elapsed time, 0.264s cpu time, 0.000s GC time
Loading theory "Jordan_Normal_Form.Conjugate" (required by "Draft.SubresultantMoreTemplates" via "Draft.Subresultant" via "Draft.Resultant_Prelim" via "Jordan_Normal_Form.Determinant" via "Jordan_Normal_Form.Column_Operations" via "Jordan_Normal_Form.Gauss_Jordan_Elimination" via "Jordan_Normal_Form.Matrix")
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
Found termination order: "size <*mlex*> {}"
class conjugate = type +
  fixes conjugate :: "'a => 'a"
  assumes "conjugate_id": "!!a. conjugate (conjugate a) = a"
    and
    "conjugate_cancel_iff": "!!a b. (conjugate a = conjugate b) = (a = b)"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
### theory "HOL-Library.Tree"
### 2.762s elapsed time, 10.484s cpu time, 3.043s GC time
Loading theory "Draft.Templates" (required by "Draft.SubresultantMoreTemplates" via "Draft.ExtrEqs")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.067s elapsed time, 0.262s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SubresultantMoreTemplates")
class conjugatable_ring = conjugate + ring +
  assumes
    "conjugate_dist_mul":
      "!!a b. conjugate (a * b) = conjugate a * conjugate b"
    and
    "conjugate_dist_add":
      "!!a b. conjugate (a + b) = conjugate a + conjugate b"
    and "conjugate_neg": "!!a. conjugate (- a) = - conjugate a"
    and "conjugate_zero": "conjugate (0::'a) = (0::'a)"
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
### theory "HOL-Algebra.Complete_Lattice"
### 0.743s elapsed time, 2.939s cpu time, 0.390s GC time
Loading theory "HOL-Algebra.Group" (required by "Draft.SubresultantMoreTemplates" via "Draft.Subresultant" via "Draft.Resultant_Prelim" via "Jordan_Normal_Form.Determinant" via "Jordan_Normal_Form.Column_Operations" via "Jordan_Normal_Form.Gauss_Jordan_Elimination" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
locale Group.monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.monoid G"
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.755s elapsed time, 2.983s cpu time, 0.416s GC time
locale Group.group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.group G"
### theory "HOL-Library.Multiset"
### 4.704s elapsed time, 17.964s cpu time, 4.531s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.SubresultantMoreTemplates" via "Draft.Subresultant" via "Draft.Resultant_Prelim" via "Jordan_Normal_Form.Determinant" via "Jordan_Normal_Form.Column_Operations" via "Jordan_Normal_Form.Gauss_Jordan_Elimination" via "Jordan_Normal_Form.Matrix" via "Polynomial_Interpolation.Ring_Hom")
Loading theory "HOL-Combinatorics.Permutations" (required by "Draft.SubresultantMoreTemplates" via "Draft.Subresultant" via "Draft.Resultant_Prelim" via "Jordan_Normal_Form.Determinant" via "Jordan_Normal_Form.Missing_Misc")
overloading
  nat_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => nat => 'a
overloading
  int_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => int => 'a
locale submonoid
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "submonoid H G"
locale subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "subgroup H G"
Proofs for inductive predicate(s) "swapidseq"
  Proving monotonicity ...
class conjugatable_ordered_ring = conjugatable_ring +
  ordered_comm_monoid_add +
  assumes "conjugate_square_positive": "!!a. (0::'a) <= a * conjugate a"
locale group_hom
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and H :: "('c, 'd) monoid_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "group_hom G H h"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale comm_group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "comm_group G"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### theory "HOL-Combinatorics.Permutations"
### 1.074s elapsed time, 4.321s cpu time, 0.605s GC time
Loading theory "Jordan_Normal_Form.Missing_Misc" (required by "Draft.SubresultantMoreTemplates" via "Draft.Subresultant" via "Draft.Resultant_Prelim" via "Jordan_Normal_Form.Determinant")
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
### theory "HOL-Algebra.Group"
### 1.658s elapsed time, 6.608s cpu time, 0.881s GC time
Loading theory "HOL-Algebra.FiniteProduct" (required by "Draft.SubresultantMoreTemplates" via "Draft.Subresultant" via "Draft.Resultant_Prelim" via "Jordan_Normal_Form.Determinant" via "Jordan_Normal_Form.Column_Operations" via "Jordan_Normal_Form.Gauss_Jordan_Elimination" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring")
### theory "Jordan_Normal_Form.Missing_Misc"
### 0.125s elapsed time, 0.492s cpu time, 0.097s GC time
"(bij, bij_betw, permutation)"
  :: "(('a => 'b) => bool) *
      (('c => 'd) => 'c set => 'd set => bool) * (('e => 'e) => bool)"
Proofs for inductive predicate(s) "foldSetDp"
  Proving monotonicity ...
locale LCD
  fixes B :: "'b set"
    and D :: "'a set"
    and f :: "'b => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
  assumes "LCD B D (\<cdot>)"
locale ACeD
  fixes D :: "'a set"
    and f :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and e :: "'a"
  assumes "ACeD D (\<cdot>) e"
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
### theory "HOL-Algebra.FiniteProduct"
### 0.465s elapsed time, 1.437s cpu time, 0.149s GC time
Loading theory "HOL-Algebra.Ring" (required by "Draft.SubresultantMoreTemplates" via "Draft.Subresultant" via "Draft.Resultant_Prelim" via "Jordan_Normal_Form.Determinant" via "Jordan_Normal_Form.Column_Operations" via "Jordan_Normal_Form.Gauss_Jordan_Elimination" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring")
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
instantiation
  complex :: conjugatable_ordered_field
  conjugate_complex == conjugate :: complex => complex
instantiation
  real :: conjugatable_ordered_field
  conjugate_real == conjugate :: real => real
instantiation
  rat :: conjugatable_ordered_field
  conjugate_rat == conjugate :: rat => rat
instantiation
  int :: conjugatable_ordered_ring
  conjugate_int == conjugate :: int => int
### theory "Jordan_Normal_Form.Conjugate"
### 3.209s elapsed time, 12.068s cpu time, 1.612s GC time
### Cannot skip proof of schematic goal statement
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
### Cannot skip proof of schematic goal statement
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### Cannot skip proof of schematic goal statement
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### Cannot skip proof of schematic goal statement
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
carrier (| carrier = ?carrier, ... = ?more |) = ?carrier
partial_object.more (| carrier = ?carrier, ... = ?more |) = ?more
carrier_update ?carrier' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier' ?carrier, ... = ?more |)
partial_object.more_update ?more' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier, ... = ?more' ?more |)
(\<otimes>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub>) =
?mult
\<one>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub> =
?one
monoid.more
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
?more
mult_update ?mult'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult' ?mult, one = ?one, ... = ?more |)
one_update ?one'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one' ?one, ... = ?more |)
monoid.more_update ?more'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more' ?more |)
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
### ML warning (line 44 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 47 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Matches are not exhaustive.
signature RINGSIMP =
  sig
    val add_struct: string * term list -> attribute
    val algebra_tac: Proof.context -> int -> tactic
    val del_struct: string * term list -> attribute
    val print_structures: Proof.context -> unit
  end
structure Ringsimp: RINGSIMP
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
locale ring_hom_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "ring_hom_cring R S h"
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
### theory "HOL-Algebra.Ring"
### 2.190s elapsed time, 4.837s cpu time, 0.391s GC time
Loading theory "HOL-Algebra.Module" (required by "Draft.SubresultantMoreTemplates" via "Draft.Subresultant" via "Draft.Resultant_Prelim" via "Jordan_Normal_Form.Determinant" via "Jordan_Normal_Form.Column_Operations" via "Jordan_Normal_Form.Gauss_Jordan_Elimination" via "Jordan_Normal_Form.Matrix")
Loading theory "Jordan_Normal_Form.Missing_Ring" (required by "Draft.SubresultantMoreTemplates" via "Draft.Subresultant" via "Draft.Resultant_Prelim" via "Jordan_Normal_Form.Determinant" via "Jordan_Normal_Form.Column_Operations" via "Jordan_Normal_Form.Gauss_Jordan_Elimination" via "Jordan_Normal_Form.Matrix")
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
locale algebra
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "algebra R M"
class ordered_semiring_strict = comm_monoid_add +
  ordered_cancel_ab_semigroup_add + semiring +
  assumes
    "mult_strict_left_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> c * a < c * b"
  assumes
    "mult_strict_right_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> a * c < b * c"
locale submodule
  fixes H :: "'c set"
    and R :: "('a, 'b) ring_scheme"
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "submodule H R M"
### theory "HOL-Algebra.Module"
### 1.262s elapsed time, 3.848s cpu time, 0.304s GC time
class ordered_idom = ordered_semiring_strict + idom +
  assumes "zero_less_one": "(0::'a) < (1::'a)"
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 5.797s elapsed time, 16.340s cpu time, 1.645s GC time
Loading theory "Polynomial_Interpolation.Missing_Unsorted" (required by "Draft.SubresultantMoreTemplates" via "Draft.Subresultant" via "Draft.Resultant_Prelim" via "Jordan_Normal_Form.Determinant")
Loading theory "HOL-Computational_Algebra.Euclidean_Algorithm" (required by "Draft.SubresultantMoreTemplates" via "Draft.Subresultant" via "Draft.Resultant_Prelim" via "Jordan_Normal_Form.Determinant" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Normalized_Fraction")
Loading theory "HOL-Computational_Algebra.Polynomial" (required by "Draft.SubresultantMoreTemplates" via "Draft.Subresultant" via "Draft.Resultant_Prelim" via "Jordan_Normal_Form.Determinant" via "HOL-Computational_Algebra.Polynomial_Factorial")
### Missing patterns in function definition:
### max_list_non_empty [] = undefined
Found termination order: "length <*mlex*> {}"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
instantiation
  poly :: (zero) zero
  zero_poly == zero_class.zero :: 'a poly
locale csemiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "csemiring R"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
consts
  Poly :: "'a list => 'a poly"
instantiation
  poly :: ({zero,equal}) equal
  equal_poly == equal_class.equal :: 'a poly => 'a poly => bool
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
### theory "Polynomial_Interpolation.Missing_Unsorted"
### 1.227s elapsed time, 4.948s cpu time, 0.463s GC time
Loading theory "Polynomial_Interpolation.Ring_Hom" (required by "Draft.SubresultantMoreTemplates" via "Draft.Subresultant" via "Draft.Resultant_Prelim" via "Jordan_Normal_Form.Determinant" via "Jordan_Normal_Form.Column_Operations" via "Jordan_Normal_Form.Gauss_Jordan_Elimination" via "Jordan_Normal_Form.Matrix")
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
instantiation
  poly :: (comm_monoid_add) comm_monoid_add
  plus_poly == plus :: 'a poly => 'a poly => 'a poly
### theory "Jordan_Normal_Form.Missing_Ring"
### 3.250s elapsed time, 10.533s cpu time, 0.866s GC time
instantiation
  poly :: (cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_poly == minus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (ab_group_add) ab_group_add
  uminus_poly == uminus :: 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
instantiation
  poly :: (comm_semiring_0) comm_semiring_0
  times_poly == times :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (comm_semiring_1) comm_semiring_1
  one_poly == one_class.one :: 'a poly
locale zero_hom
  fixes hom :: "'a => 'b"
  assumes "zero_hom hom"
locale one_hom
  fixes hom :: "'a => 'b"
  assumes "one_hom hom"
locale times_hom
  fixes hom :: "'a => 'b"
  assumes "times_hom hom"
locale plus_hom
  fixes hom :: "'a => 'b"
  assumes "plus_hom hom"
locale semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "semigroup_mult_hom hom"
locale semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "semigroup_add_hom hom"
locale monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_hom hom"
locale monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "monoid_add_hom hom"
locale group_add_hom
  fixes hom :: "'a => 'b"
  assumes "group_add_hom hom"
locale ab_semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "ab_semigroup_mult_hom hom"
locale ab_semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "ab_semigroup_add_hom hom"
locale comm_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_hom hom"
locale comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom hom"
locale ab_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "ab_group_add_hom hom"
locale semiring_hom
  fixes hom :: "'a => 'b"
  assumes "semiring_hom hom"
locale ring_hom
  fixes hom :: "'a => 'b"
  assumes "ring_hom hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_hom hom"
instantiation
  poly :: (linordered_idom) linordered_idom
  sgn_poly == sgn :: 'a poly => 'a poly
  abs_poly == abs :: 'a poly => 'a poly
  less_eq_poly == less_eq :: 'a poly => 'a poly => bool
  less_poly == less :: 'a poly => 'a poly => bool
locale idom_hom
  fixes hom :: "'a => 'b"
  assumes "idom_hom hom"
locale idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "idom_divide_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
locale field_char_0_hom
  fixes hom :: "'a => 'b"
  assumes "field_char_0_hom hom"
locale zero_hom_0
  fixes hom :: "'a => 'b"
  assumes "zero_hom_0 hom"
locale one_hom_1
  fixes hom :: "'a => 'b"
  assumes "one_hom_1 hom"
locale monoid_mult_hom_1
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_hom_1 hom"
locale monoid_add_hom_0
  fixes hom :: "'a => 'b"
  assumes "monoid_add_hom_0 hom"
locale comm_monoid_mult_hom_1
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_hom_1 hom"
locale comm_monoid_add_hom_0
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom_0 hom"
locale injective
  fixes f :: "'a => 'b"
  assumes "injective f"
locale inj_zero_hom
  fixes hom :: "'a => 'b"
  assumes "inj_zero_hom hom"
locale inj_one_hom
  fixes hom :: "'a => 'b"
  assumes "inj_one_hom hom"
locale inj_semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semigroup_mult_hom hom"
locale inj_semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semigroup_add_hom hom"
locale inj_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_monoid_mult_hom hom"
locale inj_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_monoid_add_hom hom"
locale inj_comm_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_monoid_mult_hom hom"
locale inj_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_monoid_add_hom hom"
locale inj_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semiring_hom hom"
locale inj_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_semiring_hom hom"
locale inj_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_group_add_hom hom"
locale inj_ab_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_ab_group_add_hom hom"
locale inj_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_ring_hom hom"
class euclidean_semiring_gcd = normalization_euclidean_semiring + Gcd +
  assumes "gcd_eucl": "normalization_euclidean_semiring_class.gcd = gcd"
    and "lcm_eucl": "normalization_euclidean_semiring_class.lcm = lcm"
  assumes "Gcd_eucl": "normalization_euclidean_semiring_class.Gcd = Gcd"
    and "Lcm_eucl": "normalization_euclidean_semiring_class.Lcm = Lcm"
locale inj_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_ring_hom hom"
locale inj_idom_hom
  fixes hom :: "'a => 'b"
  assumes "inj_idom_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
locale surjective
  fixes f :: "'a => 'b"
  assumes "surjective f"
locale bijective
  fixes f :: "'a => 'b"
  assumes "bijective f"
locale bijective
  fixes f :: "'a => 'b"
  assumes "bijective f"
locale monoid_mult_isom
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_isom hom"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale monoid_add_isom
  fixes hom :: "'a => 'b"
  assumes "monoid_add_isom hom"
locale comm_monoid_mult_isom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_isom hom"
locale comm_monoid_add_isom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_isom hom"
locale semiring_isom
  fixes hom :: "'a => 'b"
  assumes "semiring_isom hom"
Proofs for inductive predicate(s) "algebraic_int"
  Proving monotonicity ...
instantiation
  poly :: (idom_divide) idom_divide
  divide_poly == divide :: 'a poly => 'a poly => 'a poly
locale comm_semiring_isom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_isom hom"
locale ring_isom
  fixes hom :: "'a => 'b"
  assumes "ring_isom hom"
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
locale comm_ring_isom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_isom hom"
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
instantiation
  poly :: ({idom_divide,semidom_divide_unit_factor}) normalization_semidom
  normalize_poly == normalize :: 'a poly => 'a poly
  unit_factor_poly == unit_factor :: 'a poly => 'a poly
locale idom_isom
  fixes hom :: "'a => 'b"
  assumes "idom_isom hom"
locale field_isom
  fixes hom :: "'a => 'b"
  assumes "field_isom hom"
locale inj_idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "inj_idom_divide_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
class field_unit_factor = field + unit_factor +
  assumes "unit_factor_field": "unit_factor = id"
### theory "Polynomial_Interpolation.Ring_Hom"
### 2.887s elapsed time, 8.959s cpu time, 1.029s GC time
Loading theory "Jordan_Normal_Form.Matrix" (required by "Draft.SubresultantMoreTemplates" via "Draft.Subresultant" via "Draft.Resultant_Prelim" via "Jordan_Normal_Form.Determinant" via "Jordan_Normal_Form.Column_Operations" via "Jordan_Normal_Form.Gauss_Jordan_Elimination")
Proofs for inductive predicate(s) "eucl_rel_poly"
  Proving monotonicity ...
instantiation
  poly :: (field) semidom_modulo
  modulo_poly == modulo :: 'a poly => 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
instantiation
  vec :: (plus) plus
  plus_vec == plus :: 'a vec => 'a vec => 'a vec
instantiation
  vec :: (minus) minus
  minus_vec == minus :: 'a vec => 'a vec => 'a vec
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  vec :: (uminus) uminus
  uminus_vec == uminus :: 'a vec => 'a vec
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
instantiation
  vec :: (ord) ord
  less_eq_vec == less_eq :: 'a vec => 'a vec => bool
  less_vec == less :: 'a vec => 'a vec => bool
instantiation
  vec :: (preorder) preorder
instantiation
  vec :: (order) order
### theory "HOL-Computational_Algebra.Polynomial"
### 5.628s elapsed time, 18.485s cpu time, 1.930s GC time
Found termination order: "{}"
instantiation
  mat :: (ord) ord
  less_eq_mat == less_eq :: 'a mat => 'a mat => bool
  less_mat == less :: 'a mat => 'a mat => bool
instantiation
  mat :: (preorder) preorder
instantiation
  mat :: (order) order
instantiation
  mat :: (plus) plus
  plus_mat == plus :: 'a mat => 'a mat => 'a mat
instantiation
  mat :: (uminus) uminus
  uminus_mat == uminus :: 'a mat => 'a mat
instantiation
  mat :: (minus) minus
  minus_mat == minus :: 'a mat => 'a mat => 'a mat
instantiation
  mat :: (semiring_0) times
  times_mat == times :: 'a mat => 'a mat => 'a mat
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
locale semiring_hom
  fixes hom :: "'a => 'b"
  assumes "semiring_hom hom"
instantiation
  vec :: (conjugate) conjugate
  conjugate_vec == conjugate :: 'a vec => 'a vec
### theory "Jordan_Normal_Form.Matrix"
### 3.137s elapsed time, 8.114s cpu time, 0.863s GC time
Loading theory "Jordan_Normal_Form.Gauss_Jordan_Elimination" (required by "Draft.SubresultantMoreTemplates" via "Draft.Subresultant" via "Draft.Resultant_Prelim" via "Jordan_Normal_Form.Determinant" via "Jordan_Normal_Form.Column_Operations")
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd (snd p))) <*mlex*> {}"
### theory "Jordan_Normal_Form.Gauss_Jordan_Elimination"
### 0.909s elapsed time, 1.931s cpu time, 0.231s GC time
Loading theory "Jordan_Normal_Form.Column_Operations" (required by "Draft.SubresultantMoreTemplates" via "Draft.Subresultant" via "Draft.Resultant_Prelim" via "Jordan_Normal_Form.Determinant")
### theory "HOL-Computational_Algebra.Euclidean_Algorithm"
### 8.274s elapsed time, 24.209s cpu time, 2.586s GC time
Loading theory "HOL-Computational_Algebra.Normalized_Fraction" (required by "Draft.SubresultantMoreTemplates" via "Draft.Subresultant" via "Draft.Resultant_Prelim" via "Jordan_Normal_Form.Determinant" via "HOL-Computational_Algebra.Polynomial_Factorial")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Jordan_Normal_Form.Column_Operations"
### 0.334s elapsed time, 0.731s cpu time, 0.073s GC time
locale fract_as_normalized_quot
### theory "HOL-Computational_Algebra.Normalized_Fraction"
### 0.376s elapsed time, 0.709s cpu time, 0.073s GC time
Loading theory "HOL-Computational_Algebra.Polynomial_Factorial" (required by "Draft.SubresultantMoreTemplates" via "Draft.Subresultant" via "Draft.Resultant_Prelim" via "Jordan_Normal_Form.Determinant")
### Cannot skip proof of schematic goal statement
instantiation
  poly :: ({factorial_ring_gcd,semiring_gcd_mult_normalize})
    factorial_ring_gcd
  Gcd_poly == Gcd :: 'a poly set => 'a poly
  Lcm_poly == Lcm :: 'a poly set => 'a poly
  gcd_poly == gcd :: 'a poly => 'a poly => 'a poly
  lcm_poly == lcm :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: ({factorial_ring_gcd,field,semiring_gcd_mult_normalize})
    {normalization_euclidean_semiring,unique_euclidean_ring}
  division_segment_poly == division_segment :: 'a poly => 'a poly
  euclidean_size_poly == euclidean_size :: 'a poly => nat
### theory "HOL-Computational_Algebra.Polynomial_Factorial"
### 0.763s elapsed time, 0.953s cpu time, 0.173s GC time
Loading theory "Draft.Dichotomous_Lazard" (required by "Draft.SubresultantMoreTemplates" via "Draft.Subresultant")
Loading theory "Polynomial_Interpolation.Missing_Polynomial" (required by "Draft.SubresultantMoreTemplates" via "Draft.Subresultant" via "Draft.Resultant_Prelim" via "Polynomial_Interpolation.Ring_Hom_Poly")
Loading theory "Jordan_Normal_Form.Determinant" (required by "Draft.SubresultantMoreTemplates" via "Draft.Subresultant" via "Draft.Resultant_Prelim")
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
### theory "Draft.Dichotomous_Lazard"
### 0.158s elapsed time, 0.470s cpu time, 0.000s GC time
class mult_zero = times + zero +
  assumes "mult_zero_left": "!!a. (0::'a) * a = (0::'a)"
  assumes "mult_zero_right": "!!a. a * (0::'a) = (0::'a)"
Found termination order: "size_list (%p. size (fst p)) <*mlex*> {}"
### theory "Polynomial_Interpolation.Missing_Polynomial"
### 0.730s elapsed time, 1.734s cpu time, 0.249s GC time
Loading theory "Draft.Coeff_Int" (required by "Draft.SubresultantMoreTemplates" via "Draft.Subresultant")
Loading theory "Polynomial_Interpolation.Ring_Hom_Poly" (required by "Draft.SubresultantMoreTemplates" via "Draft.Subresultant" via "Draft.Resultant_Prelim")
locale zero_hom
  fixes hom :: "'a => 'b"
  assumes "zero_hom hom"
locale map_poly_zero_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_zero_hom hom"
locale comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom hom"
locale map_poly_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_comm_monoid_add_hom hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale map_poly_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_comm_semiring_hom hom"
locale map_poly_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_comm_ring_hom hom"
### theory "Jordan_Normal_Form.Determinant"
### 2.307s elapsed time, 7.105s cpu time, 3.939s GC time
### theory "Draft.Coeff_Int"
### 1.590s elapsed time, 5.417s cpu time, 3.690s GC time
locale map_poly_idom_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_idom_hom hom"
locale map_poly_inj_zero_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_zero_hom hom"
locale map_poly_inj_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_comm_monoid_add_hom hom"
locale map_poly_inj_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_comm_semiring_hom hom"
locale map_poly_inj_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_comm_ring_hom hom"
locale map_poly_inj_idom_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_idom_hom hom"
locale zero_hom_0
  fixes hom :: "'a => 'b"
  assumes "zero_hom_0 hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
locale field_hom'
  fixes hom :: "'a => 'b"
  assumes "field_hom' hom"
locale map_poly_inj_idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_idom_divide_hom hom"
### theory "Polynomial_Interpolation.Ring_Hom_Poly"
### 2.387s elapsed time, 6.360s cpu time, 3.848s GC time
Loading theory "Draft.More_Homomorphisms" (required by "Draft.SubresultantMoreTemplates" via "Draft.Subresultant")
Loading theory "Draft.Resultant_Prelim" (required by "Draft.SubresultantMoreTemplates" via "Draft.Subresultant")
### theory "Draft.Resultant_Prelim"
### 0.356s elapsed time, 0.757s cpu time, 0.063s GC time
### Rewrite rule not in simpset:
### [:?x1 * ?y1:] == [:?x1:] * [:?y1:]
### Rewrite rule not in simpset:
### [:?x1 + ?y1:] == [:?x1:] + [:?y1:]
### Rewrite rule not in simpset:
### [:- ?x1:] == - [:?x1:]
### theory "Draft.More_Homomorphisms"
### 0.494s elapsed time, 0.898s cpu time, 0.063s GC time
Loading theory "Draft.Subresultant" (required by "Draft.SubresultantMoreTemplates")
locale div_exp_param
  fixes div_exp :: "'a => 'a => nat => 'a"
locale div_exp_sound
  fixes div_exp :: "'a => 'a => nat => 'a"
  assumes "div_exp_sound div_exp"
locale primitive_remainder_sequence
  fixes F :: "nat => 'a poly"
    and n :: "nat => nat"
    and \<delta> :: "nat => nat"
    and f :: "nat => 'a"
    and k :: "nat"
    and \<beta> :: "nat => 'a"
  assumes "primitive_remainder_sequence F n \<delta> f k \<beta>"
locale subresultant_prs_locale
  fixes F :: "nat => 'a fract poly"
    and n :: "nat => nat"
    and \<delta> :: "nat => nat"
    and f :: "nat => 'a fract"
    and k :: "nat"
    and \<beta> :: "nat => 'a fract"
    and G1 :: "'a poly"
    and G2 :: "'a poly"
  assumes "subresultant_prs_locale F n \<delta> f k \<beta> G1 G2"
Found termination order: "size <*mlex*> {}"
locale subresultant_prs_locale2
  fixes F :: "nat => 'a fract poly"
    and n :: "nat => nat"
    and \<delta> :: "nat => nat"
    and f :: "nat => 'a fract"
    and k :: "nat"
    and \<beta> :: "nat => 'a fract"
    and G1 :: "'a poly"
    and G2 :: "'a poly"
  assumes "subresultant_prs_locale2 F n \<delta> f k \<beta> G1 G2"
locale div_exp_sound
  fixes div_exp :: "'a => 'a => nat => 'a"
  assumes "div_exp_sound div_exp"
locale div_exp_param
  fixes div_exp :: "'a => 'a => nat => 'a"
locale div_exp_sound
  fixes div_exp :: "'a => 'a => nat => 'a"
  assumes "div_exp_sound div_exp"
resultant = resultant_impl_basic
### theory "Draft.Subresultant"
### 2.396s elapsed time, 2.568s cpu time, 0.236s GC time
Loading theory "Draft.SubresultantMoreTemplates"
val templateLemmas =
   [("Subresultant.pow_int_base_1", "pow_int (1::?'a) ?a = (1::?'a)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Subresultant.pow_int_1", "pow_int ?x 1 = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Subresultant.pow_int_0", "pow_int ?x 0 = (1::?'a)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Subresultant.pseudo_mod_zero", "pseudo_mod 0 ?f = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Subresultant.pseudo_mod_zero", "pseudo_mod ?f 0 = ?f",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Subresultant.pseudo_mod_left_0", "pseudo_mod 0 ?x = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Subresultant.pseudo_mod_right_0", "pseudo_mod ?x 0 = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Subresultant.inverse_prod_list",
     "inverse (prod_list ?xs) = prod_list (map inverse ?xs)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_hole 2),
           template_var 0)))),
    ("Subresultant.exp_pow_int", "?x ^ ?n = pow_int ?x (int ?n)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Subresultant.k_exists",
     "EX i. ??.Subresultant.F ?G1.0 ?G2.0 (Suc i) = 0",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("Subresultant.k",
     "??.Subresultant.F ?G1.0 ?G2.0 (Suc (??.Subresultant.k ?G1.0 ?G2.0)) =
      0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_hole 0)),
    ("Subresultant.coeff_subresultant_0_0_resultant",
     "coeff (subresultant 0 ?f ?g) 0 = resultant ?f ?g",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1),
             template_var 0)),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Subresultant.subresultant'_mat_sylvester_mat",
     "(subresultant'_mat 0 0 ?f ?g)\<^sup>T = sylvester_mat ?f ?g",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 1),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Subresultant.subresultant_resultant",
     "subresultant 0 ?f ?g = [:resultant ?f ?g:]",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_hole 3), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Subresultant.divide_prod_assoc", "?x / (?y * ?z) = ?x / ?y / ?z",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Subresultant.pow_int_divide",
     "?a / pow_int ?x ?b = ?a * pow_int ?x (- ?b)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Subresultant.pow_int_mult",
     "pow_int (?x * ?y) ?a = pow_int ?x ?a * pow_int ?y ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Subresultant.minus_1_inverse_pow",
     "?x / (- (1::?'a)) ^ ?n = ?x * (- (1::?'a)) ^ ?n",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1)),
           template_var 0)))),
    ("Subresultant.snd_pseudo_mod_smult_left",
     "snd (pseudo_divmod (Polynomial.smult ?x ?p) ?q) =
      Polynomial.smult ?x (snd (pseudo_divmod ?p ?q))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("Subresultant.minus_1_power_even",
     "(- (1::?'b)) ^ ?k = (if even ?k then 1::?'b else - (1::?'b))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app (template_hole 6, template_hole 5)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_hole 0))),
               template_var 0)),
           template_hole 5),
         template_app (template_hole 6, template_hole 5)))),
    ("Subresultant.subresultant_mat_dim",
     "dim_col (subresultant_mat ?j ?p ?q) =
      degree ?p - ?j + (degree ?q - ?j)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 2)))),
    ("Subresultant.subresultant_mat_dim",
     "dim_row (subresultant_mat ?j ?p ?q) =
      degree ?p - ?j + (degree ?q - ?j)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 2)))),
    ("Subresultant.k",
     "?i < ??.Subresultant.k ?G1.0 ?G2.0 ==>
      ??.Subresultant.F ?G1.0 ?G2.0 (Suc ?i) ~= 0",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app (template_hole 5, template_var 1),
            template_var 0))],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0),
               template_app (template_hole 1, template_var 2)),
             template_hole 0)
           ))),
    ("Subresultant.resultant_swap",
     "resultant ?f ?g =
      (- (1::?'a)) ^ (degree ?f * degree ?g) * resultant ?g ?f",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2)),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)),
               template_app (template_hole 0, template_var 0)))),
         template_app
          (template_app (template_hole 6, template_var 0),
           template_var 1)))),
    ("Subresultant.prod_list_minus_1_exp",
     "(PROD i<-?xs. (- (1::?'a)) ^ ?f i) =
      (- (1::?'a)) ^ sum_list (map ?f ?xs)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, t_empty), template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app (template_hole 3, template_hole 2)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Subresultant.pow_int_add",
     "?x ~= (0::?'a) ==>
      pow_int ?x (?a + ?b) = pow_int ?x ?a * pow_int ?x ?b",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 3))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0))))),
    ("Subresultant.resultant_smult_right",
     "?c ~= (0::?'a) ==>
      resultant ?f (Polynomial.smult ?c ?g) =
      ?c ^ degree ?f * resultant ?f ?g",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 5))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, template_var 1))),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0))))),
    ("Subresultant.resultant_smult_left",
     "?c ~= (0::?'a) ==>
      resultant (Polynomial.smult ?c ?f) ?g =
      ?c ^ degree ?g * resultant ?f ?g",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, template_var 0))),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0))))),
    ("Subresultant.snd_pseudo_mod_smult_invar_left",
     "snd (pseudo_divmod_main ?lc ?q (Polynomial.smult ?x ?r) ?d ?dr ?n) =
      Polynomial.smult ?x (snd (pseudo_divmod_main ?lc ?q' ?r ?d ?dr ?n))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 7),
                   template_var 6),
                 template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 4)),
               template_var 3),
             template_var 2),
           template_var 1)),
       template_app
        (template_app (template_hole 0, template_var 5),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 7),
                     template_var 0),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1))))),
    ("Subresultant.subresultant_swap",
     "subresultant ?J ?f ?g =
      Polynomial.smult
       ((- (1::?'a)) ^ ((degree ?f - ?J) * (degree ?g - ?J)))
       (subresultant ?J ?g ?f)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 7, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 1)),
                   template_var 2)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)),
                 template_var 2)))),
         template_app
          (template_app
            (template_app (template_hole 7, template_var 2),
             template_var 0),
           template_var 1)))),
    ("Subresultant.for_all_Suc",
     "?P ?i ==> (ALL j>=Suc ?i. ?P j) = (ALL j>=?i. ?P j)",
     template_implication
      ([template_predicate (template_app (template_var 1, template_var 0))],
       template_equation
        (template_app (template_hole 3, t_empty),
         template_app (template_hole 3, t_empty)))),
    ("Subresultant.minus_1_even_eqI",
     "even ?k = even ?l ==> (- (1::?'b)) ^ ?k = (- (1::?'b)) ^ ?l",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_var 1),
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 0)))),
    ("Subresultant.prod_combine",
     "?j <= ?i ==>
      ?f ?i * prod_list (map ?f [?j..<?i]) =
      prod_list (map ?f [?j..<Suc ?i])",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_var 0, template_var 1)),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)))),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, template_var 1))))))),
    ("Subresultant.subresultant_smult_right",
     "?c ~= (0::?'a) ==>
      subresultant ?J ?f (Polynomial.smult ?c ?g) =
      Polynomial.smult (?c ^ (degree ?f - ?J)) (subresultant ?J ?f ?g)",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 6))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1)),
                 template_var 2))),
           template_app
            (template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1),
             template_var 0))))),
    ("Subresultant.subresultant_smult_left",
     "?c ~= (0::?'a) ==>
      subresultant ?J (Polynomial.smult ?c ?f) ?g =
      Polynomial.smult (?c ^ (degree ?g - ?J)) (subresultant ?J ?f ?g)",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 6))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)),
                 template_var 2))),
           template_app
            (template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1),
             template_var 0))))),
    ("Subresultant.snd_pseudo_mod_smult_invar_right",
     "snd (pseudo_divmod_main (?x * ?lc) ?q ?r (Polynomial.smult ?x ?d) ?dr
            ?n) =
      snd (pseudo_divmod_main ?lc ?q' (Polynomial.smult (?x ^ ?n) ?r) ?d ?dr
            ?n)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 7),
                       template_var 6)),
                   template_var 5),
                 template_var 4),
               template_app
                (template_app (template_hole 1, template_var 7),
                 template_var 3)),
             template_var 2),
           template_var 1)),
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 6),
                   template_var 0),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 7),
                       template_var 1)),
                   template_var 4)),
               template_var 3),
             template_var 2),
           template_var 1)))),
    ("Subresultant.coeff_subresultant",
     "coeff (subresultant ?J ?F ?G) ?l =
      (if degree ?F - ?J + (degree ?G - ?J) = 0 & ?l ~= 0 then 0::?'a
       else det (subresultant'_mat ?J ?l ?F ?G))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_app (template_hole 11, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app
                          (template_app
                            (template_hole 7,
                             template_app
                              (template_app
                                (template_hole 6,
                                 template_app
                                  (template_hole 5, template_var 2)),
                               template_var 3)),
                           template_app
                            (template_app
                              (template_hole 6,
                               template_app
                                (template_hole 5, template_var 1)),
                             template_var 3))),
                       template_hole 4)),
                   template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 8, template_var 0),
                       template_hole 4)))),
               template_hole 2),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 0),
                   template_var 2),
                 template_var 1)))
           ))),
    ("Subresultant.pseudo_mod_smult_right",
     "[| ?x ~= (0::?'a); ?q ~= 0 |]
      ==> pseudo_mod ?p (Polynomial.smult ?x ?q) =
          Polynomial.smult
           (?x ^ (Suc (length (coeffs ?p)) - length (coeffs ?q)))
           (pseudo_mod ?p ?q)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 9)),
        template_negation
         (template_equation (template_var 1, template_hole 7))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 0),
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 1,
                       template_app (template_hole 0, template_var 0)))),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1))))),
           template_app
            (template_app (template_hole 6, template_var 0),
             template_var 1))))),
    ("Subresultant.subresultant_zero_ge",
     "[| degree ?f + (degree ?g - ?J) <= ?k;
         degree ?f - ?J + (degree ?g - ?J) ~= 0 |]
      ==> coeff (subresultant ?J ?f ?g) ?k = (0::?'a)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 3)),
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 8, template_var 2)),
              template_var 1)),
          template_var 0),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app (template_hole 8, template_var 3)),
                    template_var 1)),
                template_app
                 (template_app
                   (template_hole 7,
                    template_app (template_hole 8, template_var 2)),
                  template_var 1)),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 3),
               template_var 2)),
           template_var 0),
         template_hole 0))),
    ("Subresultant.subresultant'_zero_ge",
     "[| degree ?f - ?J + (degree ?g - ?J) ~= 0;
         degree ?f + (degree ?g - ?J) <= ?k |]
      ==> det (subresultant'_mat ?J ?k ?f ?g) = (0::?'a)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app (template_hole 6, template_var 3)),
                    template_var 2)),
                template_app
                 (template_app
                   (template_hole 7,
                    template_app (template_hole 6, template_var 1)),
                  template_var 2)),
              template_hole 5)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 8,
              template_app (template_hole 6, template_var 3)),
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              template_var 2)),
          template_var 0)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0),
               template_var 3),
             template_var 1)),
         template_hole 0))),
    ("Subresultant.enter_subresultant_prs",
     "[| length (coeffs ?G2.0) <= length (coeffs ?G1.0); ?G2.0 ~= 0 |]
      ==> EX F n d f k b. subresultant_prs_locale2 F n d f k b ?G1.0 ?G2.0",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 9,
            template_app (template_hole 8, template_var 1)),
          template_app
           (template_hole 9,
            template_app (template_hole 8, template_var 0))),
        template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Subresultant.subresultant'_zero_lt",
     "[| ?J <= degree ?f; ?J <= degree ?g; ?J < ?k;
         ?k < degree ?f + (degree ?g - ?J) |]
      ==> det (subresultant'_mat ?J ?k ?f ?g) = (0::?'a)",
     template_implication
      ([template_inequation
         (less_equals, template_var 3,
          template_app (template_hole 7, template_var 2)),
        template_inequation
         (less_equals, template_var 3,
          template_app (template_hole 7, template_var 1)),
        template_inequation (less_than, template_var 3, template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 7, template_var 2)),
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 7, template_var 1)),
              template_var 3)))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0),
               template_var 2),
             template_var 1)),
         template_hole 0))),
    ("Subresultant.subresultant_zero_lt",
     "[| ?k < degree ?f + (degree ?g - ?J); ?J <= degree ?f;
         ?J <= degree ?g; ?J < ?k |]
      ==> coeff (subresultant ?J ?f ?g) ?k = (0::?'a)",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 2)),
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 6, template_var 1)),
              template_var 0))),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 6, template_var 2)),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 6, template_var 1)),
        template_inequation (less_than, template_var 0, template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2),
               template_var 1)),
           template_var 3),
         template_hole 0))),
    ("Subresultant.even_sum_list",
     "(!!x. x : set ?xs ==> even (?f x) = even (?g x)) ==>
      even (sum_list (map ?f ?xs)) = even (sum_list (map ?g ?xs))",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_hole 8,
               template_app (template_hole 7, template_hole 6))),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 2))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 7, template_hole 6))),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)))))),
    ("Subresultant.Fb0",
     "[| ?G1.0 ~= 0; ?G2.0 ~= 0 |]
      ==> (??.Subresultant.F ?G1.0 ?G2.0 ?i = 0 -->
           ??.Subresultant.F ?G1.0 ?G2.0 (Suc ?i) = 0) &
          ??.Subresultant.b ?G1.0 ?G2.0 ?i ~= 0 &
          ??.Subresultant.h ?G1.0 ?G2.0 ?i ~= 0",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 10)),
        template_negation
         (template_equation (template_var 1, template_hole 10))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app
                          (template_app (template_hole 6, template_var 2),
                           template_var 1),
                         template_var 0)),
                     template_hole 5)),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app
                        (template_app (template_hole 6, template_var 2),
                         template_var 1),
                       template_app (template_hole 4, template_var 0))),
                   template_hole 5))),
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_hole 12,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_app (template_hole 2, template_var 2),
                           template_var 1),
                         template_var 0)),
                     template_hole 1))),
               template_app
                (template_hole 12,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 2),
                         template_var 1),
                       template_var 0)),
                   template_hole 1))))
           ))),
    ("Subresultant.snd_pseudo_divmod_main_cong",
     "[| ?a1.0 = ?b1.0; ?a3.0 = ?b3.0; ?a4.0 = ?b4.0; ?a5.0 = ?b5.0;
         ?a6.0 = ?b6.0 |]
      ==> snd (pseudo_divmod_main ?a1.0 ?a2.0 ?a3.0 ?a4.0 ?a5.0 ?a6.0) =
          snd (pseudo_divmod_main ?b1.0 ?b2.0 ?b3.0 ?b4.0 ?b5.0 ?b6.0)",
     template_implication
      ([template_equation (template_var 11, template_var 10),
        template_equation (template_var 9, template_var 8),
        template_equation (template_var 7, template_var 6),
        template_equation (template_var 5, template_var 4),
        template_equation (template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 11),
                     template_var 1),
                   template_var 9),
                 template_var 7),
               template_var 5),
             template_var 3)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 10),
                     template_var 0),
                   template_var 8),
                 template_var 6),
               template_var 4),
             template_var 2))))),
    ("Subresultant.resultant_pseudo_mod_0",
     "[| pseudo_mod ?f ?g = 0; degree ?g <= degree ?f; ?f ~= 0; ?g ~= 0 |]
      ==> resultant ?f ?g =
          (if degree ?g = 0 then lead_coeff ?g ^ degree ?f else (0::?'a))",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 12, template_var 1),
            template_var 0),
          template_hole 11),
        template_inequation
         (less_equals, template_app (template_hole 9, template_var 0),
          template_app (template_hole 9, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 11)),
        template_negation
         (template_equation (template_var 0, template_hole 11))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app (template_hole 9, template_var 0)),
                     template_hole 3)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_app (template_hole 9, template_var 0))),
                   template_app (template_hole 9, template_var 1))),
               template_hole 0)
             )))),
    ("Subresultant.subresultant_product",
     "[| ?F = ?B * ?G; degree ?G <= degree ?F |]
      ==> subresultant ?J ?F ?G =
          (if ?J < degree ?G then 0
           else if ?J < degree ?F
                then Polynomial.smult (lead_coeff ?G ^ (degree ?F - ?J - 1))
                      ?G
                else 1)",
     template_implication
      ([template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 12, template_var 2),
            template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 10, template_var 1),
          template_app (template_hole 10, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 9, template_var 0),
             template_var 3),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 0),
                 template_app (template_hole 10, template_var 1))),
             template_hole 6),
           template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 0),
                   template_app (template_hole 10, template_var 3))),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 1),
                         template_app (template_hole 10, template_var 1))),
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_app
                            (template_hole 2,
                             template_app
                              (template_hole 10, template_var 3)),
                           template_var 0)),
                       template_hole 1))),
                 template_var 1)),
             template_hole 0))))),
    ("Subresultant.BT_lemma_1_14",
     "[| ?F + ?B * ?G = ?H; degree ?G <= degree ?F;
         degree ?H < degree ?G | ?H = 0 & ?F ~= 0 & ?G ~= 0; degree ?H < ?J;
         ?J < degree ?G - 1 |]
      ==> subresultant ?J ?F ?G = 0",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 11, template_var 4),
            template_app
             (template_app (template_hole 10, template_var 3),
              template_var 2)),
          template_var 1),
        template_inequation
         (less_equals, template_app (template_hole 8, template_var 2),
          template_app (template_hole 8, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app (template_hole 8, template_var 1)),
                  template_app (template_hole 8, template_var 2))),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 12, template_var 1),
                    template_hole 4)),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_hole 3,
                      template_app
                       (template_app (template_hole 12, template_var 4),
                        template_hole 4))),
                  template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 12, template_var 2),
                      template_hole 4)))))
            ),
        template_inequation
         (less_than, template_app (template_hole 8, template_var 1),
          template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 8, template_var 2)),
            template_hole 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 4),
           template_var 2),
         template_hole 4))),
    ("Subresultant.BT_lemma_1_12",
     "[| ?F + ?B * ?G = ?H; degree ?G <= degree ?F;
         degree ?H < degree ?G | ?H = 0 & ?F ~= 0 & ?G ~= 0;
         ?J < degree ?H |]
      ==> subresultant ?J ?F ?G =
          Polynomial.smult
           ((- (1::?'a)) ^ ((degree ?F - ?J) * (degree ?G - ?J)) *
            lead_coeff ?G ^ (degree ?F - degree ?H))
           (subresultant ?J ?G ?H)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 17, template_var 4),
            template_app
             (template_app (template_hole 16, template_var 3),
              template_var 2)),
          template_var 1),
        template_inequation
         (less_equals, template_app (template_hole 14, template_var 2),
          template_app (template_hole 14, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app
                   (template_hole 12,
                    template_app (template_hole 14, template_var 1)),
                  template_app (template_hole 14, template_var 2))),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app (template_hole 18, template_var 1),
                    template_hole 10)),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_hole 9,
                      template_app
                       (template_app (template_hole 18, template_var 4),
                        template_hole 10))),
                  template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 18, template_var 2),
                      template_hole 10)))))
            ),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 14, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 8, template_var 0),
             template_var 4),
           template_var 2),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3)),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app
                          (template_hole 1,
                           template_app (template_hole 14, template_var 4)),
                         template_var 0)),
                     template_app
                      (template_app
                        (template_hole 1,
                         template_app (template_hole 14, template_var 2)),
                       template_var 0)))),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_app (template_hole 14, template_var 2))),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 14, template_var 4)),
                   template_app (template_hole 14, template_var 1))))),
           template_app
            (template_app
              (template_app (template_hole 8, template_var 0),
               template_var 2),
             template_var 1))))),
    ("Subresultant.BT_lemma_1_15",
     "[| ?F + ?B * ?G = ?H; degree ?G <= degree ?F;
         degree ?H < degree ?G | ?H = 0 & ?F ~= 0 & ?G ~= 0;
         degree ?H < degree ?G | ?H ~= 0 |]
      ==> subresultant (degree ?G - 1) ?F ?G =
          Polynomial.smult
           ((- (1::?'a)) ^ (degree ?F - degree ?G + 1) *
            lead_coeff ?G ^ (degree ?F - degree ?G + 1))
           ?H",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 18, template_var 3),
            template_app
             (template_app (template_hole 17, template_var 2),
              template_var 1)),
          template_var 0),
        template_inequation
         (less_equals, template_app (template_hole 15, template_var 1),
          template_app (template_hole 15, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app (template_hole 15, template_var 0)),
                  template_app (template_hole 15, template_var 1))),
              template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_app (template_hole 19, template_var 0),
                    template_hole 11)),
                template_app
                 (template_app
                   (template_hole 12,
                    template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 19, template_var 3),
                        template_hole 11))),
                  template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 19, template_var 1),
                      template_hole 11)))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app (template_hole 15, template_var 0)),
                  template_app (template_hole 15, template_var 1))),
              template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 19, template_var 0),
                  template_hole 11)))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app (template_hole 15, template_var 1)),
                 template_hole 7)),
             template_var 3),
           template_var 1),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2)),
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app
                          (template_hole 8,
                           template_app (template_hole 15, template_var 3)),
                         template_app (template_hole 15, template_var 1))),
                     template_hole 7))),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_app (template_hole 15, template_var 1))),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app (template_hole 15, template_var 3)),
                       template_app (template_hole 15, template_var 1))),
                   template_hole 7)))),
           template_var 0)))),
    ("Subresultant.BT_eq_19",
     "[| ?F + ?B * ?G = ?H; degree ?G <= degree ?F;
         degree ?H < degree ?G | ?H = 0 & ?F ~= 0 & ?G ~= 0;
         degree ?H <= ?J; ?J < degree ?G |]
      ==> subresultant ?J ?F ?G =
          Polynomial.smult
           ((- (1::?'a)) ^ ((degree ?F - ?J) * (degree ?G - ?J)) *
            lead_coeff ?G ^ (degree ?F - ?J) *
            coeff ?H ?J ^ (degree ?G - ?J - 1))
           ?H",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 18, template_var 4),
            template_app
             (template_app (template_hole 17, template_var 3),
              template_var 2)),
          template_var 1),
        template_inequation
         (less_equals, template_app (template_hole 15, template_var 2),
          template_app (template_hole 15, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app (template_hole 15, template_var 1)),
                  template_app (template_hole 15, template_var 2))),
              template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_app (template_hole 19, template_var 1),
                    template_hole 11)),
                template_app
                 (template_app
                   (template_hole 12,
                    template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 19, template_var 4),
                        template_hole 11))),
                  template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 19, template_var 2),
                      template_hole 11)))))
            ),
        template_inequation
         (less_equals, template_app (template_hole 15, template_var 1),
          template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 15, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 9, template_var 0),
             template_var 4),
           template_var 2),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app (template_hole 5, template_hole 4)),
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app
                            (template_app
                              (template_hole 2,
                               template_app
                                (template_hole 15, template_var 4)),
                             template_var 0)),
                         template_app
                          (template_app
                            (template_hole 2,
                             template_app
                              (template_hole 15, template_var 2)),
                           template_var 0)))),
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 1, template_var 2),
                         template_app (template_hole 15, template_var 2))),
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app (template_hole 15, template_var 4)),
                       template_var 0)))),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app (template_hole 15, template_var 2)),
                       template_var 0)),
                   template_hole 0)))),
           template_var 1)))),
    ("Subresultant.BT_lemma_1_15'",
     "[| ?F + ?B * ?G = ?H; degree ?G <= degree ?F;
         degree ?H < degree ?G | ?H = 0 & ?F ~= 0 & ?G ~= 0;
         ?J = degree ?G - 1; degree ?H < degree ?G | ?H ~= 0 |]
      ==> subresultant (degree ?G - 1) ?F ?G =
          Polynomial.smult
           ((- (1::?'a)) ^ (degree ?F - degree ?G + 1) *
            lead_coeff ?G ^ (degree ?F - degree ?G + 1))
           ?H",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 19, template_var 4),
            template_app
             (template_app (template_hole 18, template_var 3),
              template_var 2)),
          template_var 1),
        template_inequation
         (less_equals, template_app (template_hole 16, template_var 2),
          template_app (template_hole 16, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app (template_hole 16, template_var 1)),
                  template_app (template_hole 16, template_var 2))),
              template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_app (template_hole 20, template_var 1),
                    template_hole 12)),
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_hole 11,
                      template_app
                       (template_app (template_hole 20, template_var 4),
                        template_hole 12))),
                  template_app
                   (template_hole 11,
                    template_app
                     (template_app (template_hole 20, template_var 2),
                      template_hole 12)))))
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_hole 9,
              template_app (template_hole 16, template_var 2)),
            template_hole 8)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app (template_hole 16, template_var 1)),
                  template_app (template_hole 16, template_var 2))),
              template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 20, template_var 1),
                  template_hole 12)))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 9,
                   template_app (template_hole 16, template_var 2)),
                 template_hole 8)),
             template_var 4),
           template_var 2),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2)),
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app
                          (template_hole 9,
                           template_app (template_hole 16, template_var 4)),
                         template_app (template_hole 16, template_var 2))),
                     template_hole 8))),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_app (template_hole 16, template_var 2))),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_hole 9,
                         template_app (template_hole 16, template_var 4)),
                       template_app (template_hole 16, template_var 2))),
                   template_hole 8)))),
           template_var 1)))),
    ("Subresultant.BT_lemma_1_13",
     "[| ?F + ?B * ?G = ?H; degree ?G <= degree ?F;
         degree ?H < degree ?G | ?H = 0 & ?F ~= 0 & ?G ~= 0;
         degree ?H < degree ?G | ?H ~= 0 |]
      ==> subresultant (degree ?H) ?F ?G =
          Polynomial.smult
           ((- (1::?'a)) ^
            ((degree ?F - degree ?H) * (degree ?G - degree ?H)) *
            lead_coeff ?G ^ (degree ?F - degree ?H) *
            lead_coeff ?H ^ (degree ?G - degree ?H - 1))
           ?H",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 18, template_var 3),
            template_app
             (template_app (template_hole 17, template_var 2),
              template_var 1)),
          template_var 0),
        template_inequation
         (less_equals, template_app (template_hole 15, template_var 1),
          template_app (template_hole 15, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app (template_hole 15, template_var 0)),
                  template_app (template_hole 15, template_var 1))),
              template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_app (template_hole 19, template_var 0),
                    template_hole 11)),
                template_app
                 (template_app
                   (template_hole 12,
                    template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 19, template_var 3),
                        template_hole 11))),
                  template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 19, template_var 1),
                      template_hole 11)))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app (template_hole 15, template_var 0)),
                  template_app (template_hole 15, template_var 1))),
              template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 19, template_var 0),
                  template_hole 11)))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app (template_hole 15, template_var 0)),
             template_var 3),
           template_var 1),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app (template_hole 5, template_hole 4)),
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app
                            (template_app
                              (template_hole 2,
                               template_app
                                (template_hole 15, template_var 3)),
                             template_app
                              (template_hole 15, template_var 0))),
                         template_app
                          (template_app
                            (template_hole 2,
                             template_app
                              (template_hole 15, template_var 1)),
                           template_app
                            (template_hole 15, template_var 0))))),
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 1, template_var 1),
                         template_app (template_hole 15, template_var 1))),
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app (template_hole 15, template_var 3)),
                       template_app (template_hole 15, template_var 0))))),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_app (template_hole 15, template_var 0))),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app (template_hole 15, template_var 1)),
                       template_app (template_hole 15, template_var 0))),
                   template_hole 0)))),
           template_var 0)))),
    ("Subresultant.BT_lemma_1_13'",
     "[| ?F + ?B * ?G = ?H; degree ?G <= degree ?F;
         degree ?H < degree ?G | ?H = 0 & ?F ~= 0 & ?G ~= 0; ?J = degree ?H;
         degree ?H < degree ?G | ?H ~= 0 |]
      ==> subresultant (degree ?H) ?F ?G =
          Polynomial.smult
           ((- (1::?'a)) ^
            ((degree ?F - degree ?H) * (degree ?G - degree ?H)) *
            lead_coeff ?G ^ (degree ?F - degree ?H) *
            lead_coeff ?H ^ (degree ?G - degree ?H - 1))
           ?H",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 19, template_var 4),
            template_app
             (template_app (template_hole 18, template_var 3),
              template_var 2)),
          template_var 1),
        template_inequation
         (less_equals, template_app (template_hole 16, template_var 2),
          template_app (template_hole 16, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app (template_hole 16, template_var 1)),
                  template_app (template_hole 16, template_var 2))),
              template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_app (template_hole 20, template_var 1),
                    template_hole 12)),
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_hole 11,
                      template_app
                       (template_app (template_hole 20, template_var 4),
                        template_hole 12))),
                  template_app
                   (template_hole 11,
                    template_app
                     (template_app (template_hole 20, template_var 2),
                      template_hole 12)))))
            ),
        template_equation
         (template_var 0, template_app (template_hole 16, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app (template_hole 16, template_var 1)),
                  template_app (template_hole 16, template_var 2))),
              template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 20, template_var 1),
                  template_hole 12)))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app (template_hole 16, template_var 1)),
             template_var 4),
           template_var 2),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app (template_hole 5, template_hole 4)),
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app
                            (template_app
                              (template_hole 2,
                               template_app
                                (template_hole 16, template_var 4)),
                             template_app
                              (template_hole 16, template_var 1))),
                         template_app
                          (template_app
                            (template_hole 2,
                             template_app
                              (template_hole 16, template_var 2)),
                           template_app
                            (template_hole 16, template_var 1))))),
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 1, template_var 2),
                         template_app (template_hole 16, template_var 2))),
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app (template_hole 16, template_var 4)),
                       template_app (template_hole 16, template_var 1))))),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_app (template_hole 16, template_var 1))),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app (template_hole 16, template_var 2)),
                       template_app (template_hole 16, template_var 1))),
                   template_hole 0)))),
           template_var 1)))),
    ("Subresultant.subresultant_index_mat",
     "[| ?i < degree ?F - ?J + (degree ?G - ?J);
         ?j < degree ?F - ?J + (degree ?G - ?J) |]
      ==> subresultant_mat ?J ?F ?G $$ (?i, ?j) =
          (if ?j < degree ?G - ?J
           then if ?i = degree ?F - ?J + (degree ?G - ?J) - 1
                then monom (1::?'a) (degree ?G - ?J - 1 - ?j) * ?F
                else [:coeff_int ?F (int (degree ?F) - int ?i + int ?j):]
           else let jj = ?j - (degree ?G - ?J)
                in if ?i = degree ?F - ?J + (degree ?G - ?J) - 1
                   then monom (1::?'a) (degree ?F - ?J - 1 - jj) * ?G
                   else [:coeff_int ?G
                           (int (degree ?G) - int ?i + int jj):])",
     template_implication
      ([template_inequation
         (less_than, template_var 4,
          template_app
           (template_app
             (template_hole 19,
              template_app
               (template_app
                 (template_hole 18,
                  template_app (template_hole 17, template_var 3)),
                template_var 2)),
            template_app
             (template_app
               (template_hole 18,
                template_app (template_hole 17, template_var 1)),
              template_var 2))),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 19,
              template_app
               (template_app
                 (template_hole 18,
                  template_app (template_hole 17, template_var 3)),
                template_var 2)),
            template_app
             (template_app
               (template_hole 18,
                template_app (template_hole 17, template_var 1)),
              template_var 2)))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 15,
                  template_app
                   (template_app
                     (template_app (template_hole 14, template_var 2),
                      template_var 3),
                    template_var 1)),
                template_app
                 (template_app (template_hole 13, template_var 4),
                  template_var 0))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app (template_hole 20, template_var 0),
                     template_app
                      (template_app
                        (template_hole 18,
                         template_app (template_hole 17, template_var 1)),
                       template_var 2))),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 12,
                       template_app
                        (template_app (template_hole 11, template_var 4),
                         template_app
                          (template_app
                            (template_hole 18,
                             template_app
                              (template_app
                                (template_hole 19,
                                 template_app
                                  (template_app
                                    (template_hole 18,
                                     template_app
(template_hole 17, template_var 3)),
                                   template_var 2)),
                               template_app
                                (template_app
                                  (template_hole 18,
                                   template_app
                                    (template_hole 17, template_var 1)),
                                 template_var 2))),
                           template_hole 10))),
                     template_app
                      (template_app
                        (template_hole 9,
                         template_app
                          (template_app (template_hole 8, template_hole 7),
                           template_app
                            (template_app
                              (template_hole 18,
                               template_app
                                (template_app
                                  (template_hole 18,
                                   template_app
                                    (template_app
(template_hole 18, template_app (template_hole 17, template_var 1)),
                                     template_var 2)),
                                 template_hole 10)),
                             template_var 0))),
                       template_var 3)),
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 5, template_var 3),
                         template_app
                          (template_app
                            (template_hole 4,
                             template_app
                              (template_app
                                (template_hole 3,
                                 template_app
                                  (template_hole 2,
                                   template_app
                                    (template_hole 17, template_var 3))),
                               template_app
                                (template_hole 2, template_var 4))),
                           template_app
                            (template_hole 2, template_var 0)))),
                     template_hole 1))),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 18, template_var 0),
                     template_app
                      (template_app
                        (template_hole 18,
                         template_app (template_hole 17, template_var 1)),
                       template_var 2))),
                 t_empty))
             )))),
    ("Subresultant.BT_eq_18",
     "[| ?F + ?B * ?G = ?H; degree ?G <= degree ?F;
         degree ?H < degree ?G | ?H = 0 & ?F ~= 0 & ?G ~= 0 |]
      ==> subresultant ?J ?F ?G =
          Polynomial.smult
           ((- (1::?'a)) ^ ((degree ?F - ?J) * (degree ?G - ?J)))
           (det (mat (degree ?F - ?J + (degree ?G - ?J))
                  (degree ?F - ?J + (degree ?G - ?J))
                  (%(i, j).
                      if j < degree ?F - ?J
                      then if i = degree ?F - ?J + (degree ?G - ?J) - 1
                           then monom (1::?'a) (degree ?F - ?J - 1 - j) * ?G
                           else [:coeff_int ?G
                                   (int (degree ?G) - int i + int j):]
                      else if i = degree ?F - ?J + (degree ?G - ?J) - 1
                           then monom (1::?'a)
                                 (degree ?G - ?J - 1 -
                                  (j - (degree ?F - ?J))) *
                                ?H
                           else [:coeff_int ?H
                                   (int (degree ?F) - int i +
                                    int (j - (degree ?F - ?J))):])))",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 28, template_var 4),
            template_app
             (template_app (template_hole 27, template_var 3),
              template_var 2)),
          template_var 1),
        template_inequation
         (less_equals, template_app (template_hole 25, template_var 2),
          template_app (template_hole 25, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 24,
                template_app
                 (template_app
                   (template_hole 23,
                    template_app (template_hole 25, template_var 1)),
                  template_app (template_hole 25, template_var 2))),
              template_app
               (template_app
                 (template_hole 22,
                  template_app
                   (template_app (template_hole 29, template_var 1),
                    template_hole 21)),
                template_app
                 (template_app
                   (template_hole 22,
                    template_app
                     (template_hole 20,
                      template_app
                       (template_app (template_hole 29, template_var 4),
                        template_hole 21))),
                  template_app
                   (template_hole 20,
                    template_app
                     (template_app (template_hole 29, template_var 2),
                      template_hole 21)))))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 19, template_var 0),
             template_var 4),
           template_var 2),
         template_app
          (template_app
            (template_hole 18,
             template_app
              (template_app
                (template_hole 17,
                 template_app (template_hole 16, template_hole 15)),
               template_app
                (template_app
                  (template_hole 14,
                   template_app
                    (template_app
                      (template_hole 13,
                       template_app (template_hole 25, template_var 4)),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 13,
                     template_app (template_hole 25, template_var 2)),
                   template_var 0)))),
           template_app
            (template_hole 12,
             template_app
              (template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app
                        (template_app
                          (template_hole 13,
                           template_app (template_hole 25, template_var 4)),
                         template_var 0)),
                     template_app
                      (template_app
                        (template_hole 13,
                         template_app (template_hole 25, template_var 2)),
                       template_var 0))),
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app
                        (template_hole 13,
                         template_app (template_hole 25, template_var 4)),
                       template_var 0)),
                   template_app
                    (template_app
                      (template_hole 13,
                       template_app (template_hole 25, template_var 2)),
                     template_var 0))),
               template_app (template_hole 9, t_empty)))))))]:
   (string * thm * template) list
### theory "Draft.SubresultantMoreTemplates"
### 0.718s elapsed time, 1.020s cpu time, 0.128s GC time
val it = (): unit
