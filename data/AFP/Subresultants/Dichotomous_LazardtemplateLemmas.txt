   [("Dichotomous_Lazard.power_fract",
     "Fraction_Field.Fract ?a ?b ^ ?n =
      Fraction_Field.Fract (?a ^ ?n) (?b ^ ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Dichotomous_Lazard.range_to_fract_dvd_iff",
     "?b ~= (0::?'a) ==>
      (Fraction_Field.Fract ?a ?b : range to_fract) = (?b dvd ?a)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 7))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_hole 1)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Dichotomous_Lazard.Fract_cases_coprime",
     "(!!a b.
          [| ?q = Fraction_Field.Fract a b; b ~= (0::?'a); coprime a b |]
          ==> ?thesis) ==>
      ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("Dichotomous_Lazard.to_fract_power_le",
     "[| ?a * ?b ^ ?e : range to_fract; ?a : range to_fract; ?f <= ?e |]
      ==> ?a * ?b ^ ?f : range to_fract",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 1))),
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_hole 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_hole 1))
            ),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 0))),
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_hole 1))
           ))),
    ("Dichotomous_Lazard.dichotomous_Lazard",
     "to_fract ?x ^ ?n / to_fract ?y ^ (?n - 1) : range to_fract ==>
      to_fract (dichotomous_Lazard ?x ?y ?n) =
      to_fract ?x ^ ?n / to_fract ?y ^ (?n - 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app
                       (template_hole 7,
                        template_app (template_hole 6, template_var 2)),
                      template_var 1)),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app (template_hole 6, template_var 0)),
                    template_app
                     (template_app (template_hole 5, template_var 1),
                      template_hole 4)))),
              template_app
               (template_app (template_hole 3, template_hole 6),
                template_hole 2))
            )],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app (template_hole 6, template_var 2)),
               template_var 1)),
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 6, template_var 0)),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_hole 4)))))),
    ("Dichotomous_Lazard.div_divide_to_fract",
     "[| ?x : range to_fract; ?x = ?y / ?z; ?x' = ?y' div ?z';
         ?y = to_fract ?y'; ?z = to_fract ?z' |]
      ==> ?x = to_fract ?x'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 5),
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_hole 4))
            ),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 2, template_var 4),
            template_var 3)),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 0, template_var 1),
            template_var 0)),
        template_equation
         (template_var 4, template_app (template_hole 5, template_var 1)),
        template_equation
         (template_var 3, template_app (template_hole 5, template_var 0))],
       template_equation
        (template_var 5, template_app (template_hole 5, template_var 2)))),
    ("Dichotomous_Lazard.dichotomous_Lazard_main",
     "(!!i. i <= ?n ==>
            to_fract ?x ^ i / to_fract ?y ^ (i - 1) : range to_fract) ==>
      to_fract (dichotomous_Lazard ?x ?y ?n) =
      to_fract ?x ^ ?n / to_fract ?y ^ (?n - 1)",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty))],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app (template_hole 6, template_var 1)),
               template_var 2)),
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 6, template_var 0)),
             template_app
              (template_app (template_hole 5, template_var 2),
               template_hole 4))))))]
