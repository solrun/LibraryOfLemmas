Loading theory "Draft.Step_configuration" (required by "Draft.StepMoreTemplates" via "Draft.Step" via "Draft.Step_policies")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.StepMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.StepMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.StepMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.151s elapsed time, 0.615s cpu time, 0.042s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.StepMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.215s elapsed time, 0.874s cpu time, 0.042s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.StepMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.381s elapsed time, 1.513s cpu time, 0.121s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.StepMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Step_configuration"
### 0.658s elapsed time, 2.603s cpu time, 0.203s GC time
Loading theory "Draft.Step_policies" (required by "Draft.StepMoreTemplates" via "Draft.Step")
locale policy_axioms
  fixes sp_spec_subj_obj :: "'a => obj_id_t => mode_t => bool"
    and sp_spec_subj_subj :: "'a => 'a => bool"
    and ifp :: "'a => 'a => bool"
  assumes "policy_axioms sp_spec_subj_obj sp_spec_subj_subj ifp"
locale abstract_policy_derivation
  fixes configuration_subj_obj :: "'a => obj_id_t => mode_t => bool"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
### theory "Draft.Step_policies"
### 0.088s elapsed time, 0.343s cpu time, 0.054s GC time
Loading theory "Draft.Step" (required by "Draft.StepMoreTemplates")
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.BigO"
### 0.972s elapsed time, 3.657s cpu time, 0.816s GC time
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.046s elapsed time, 3.746s cpu time, 0.771s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.003s elapsed time, 6.184s cpu time, 1.013s GC time
Loading theory "Draft.Templates" (required by "Draft.StepMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.104s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.StepMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.531s elapsed time, 1.105s cpu time, 0.108s GC time
### Ambiguous input (line 187 of "$AFP/CISC-Kernel/step/Step.thy") produces 5 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" atomic_step)
###     ("_cargs" ("_position" s) ("_position" ipt)))
###   ("_case_syntax" ("_position" ipt)
###     ("_case2"
###       ("_case1"
###         ("_applC" ("_position" SK_IPC)
###           ("_cargs" ("_position" dir)
###             ("_cargs" ("_position" stage)
###               ("_cargs" ("_position" partner) ("_position" page)))))
###         ("_applC" ("_position" atomic_step_ipc)
###           ("_cargs" ("_applC" ("_position" current) ("_position" s))
###             ("_cargs" ("_position" dir)
###               ("_cargs" ("_position" stage)
###                 ("_cargs" ("_position" partner)
###                   ("_cargs" ("_position" page) ("_position" s))))))))
###       ("_case2"
###         ("_case1"
###           ("_applC" ("_position" SK_EV_WAIT)
###             ("_cargs" ("_position" EV_PREP) ("_position" consume)))
###           ("_position" s))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" SK_EV_WAIT)
###               ("_cargs" ("_position" EV_WAIT) ("_position" consume)))
###             ("_position" s))
###           ("_case2"
###             ("_case1"
###               ("_applC" ("_position" SK_EV_WAIT)
###                 ("_cargs" ("_position" EV_FINISH) ("_position" consume)))
###               ("_case_syntax" ("_position" consume)
###                 ("_case2"
###                   ("_case1" ("_position" EV_CONSUME_ONE)
###                     ("_applC" ("_position" atomic_step_ev_wait_one)
###                       ("_cargs"
###                         ("_applC" ("_position" current) ("_position" s))
###                         ("_position" s))))
###                   ("_case2"
###                     ("_case1" ("_position" EV_CONSUME_ALL)
###                       ("_applC" ("_position" atomic_step_ev_wait_all)
###                         ("_cargs"
###                           ("_applC" ("_position" current) ("_position" s))
###                           ("_position" s))))
###                     ("_case2"
###                       ("_case1"
###                         ("_applC" ("_position" SK_EV_SIGNAL)
###                           ("_cargs" ("_position" EV_SIGNAL_PREP)
###                             ("_position" partner)))
###                         ("_position" s))
###                       ("_case1"
###                         ("_applC" ("_position" SK_EV_SIGNAL)
###                           ("_cargs" ("_position" EV_SIGNAL_FINISH)
###                             ("_position" partner)))
###                         ("_applC" ("_position" atomic_step_ev_signal)
###                           ("_cargs"
###                             ("_applC" ("_position" current) ("_position" s))
###                             ("_cargs" ("_position" partner)
###                               ("_position" s))))))))))
###             ("_case1" ("_position" NONE) ("_position" s))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" atomic_step)
###     ("_cargs" ("_position" s) ("_position" ipt)))
###   ("_case_syntax" ("_position" ipt)
###     ("_case2"
###       ("_case1"
###         ("_applC" ("_position" SK_IPC)
###           ("_cargs" ("_position" dir)
###             ("_cargs" ("_position" stage)
###               ("_cargs" ("_position" partner) ("_position" page)))))
###         ("_applC" ("_position" atomic_step_ipc)
###           ("_cargs" ("_applC" ("_position" current) ("_position" s))
###             ("_cargs" ("_position" dir)
###               ("_cargs" ("_position" stage)
###                 ("_cargs" ("_position" partner)
###                   ("_cargs" ("_position" page) ("_position" s))))))))
###       ("_case2"
###         ("_case1"
###           ("_applC" ("_position" SK_EV_WAIT)
###             ("_cargs" ("_position" EV_PREP) ("_position" consume)))
###           ("_position" s))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" SK_EV_WAIT)
###               ("_cargs" ("_position" EV_WAIT) ("_position" consume)))
###             ("_position" s))
###           ("_case2"
###             ("_case1"
###               ("_applC" ("_position" SK_EV_WAIT)
###                 ("_cargs" ("_position" EV_FINISH) ("_position" consume)))
###               ("_case_syntax" ("_position" consume)
###                 ("_case2"
###                   ("_case1" ("_position" EV_CONSUME_ONE)
###                     ("_applC" ("_position" atomic_step_ev_wait_one)
###                       ("_cargs"
###                         ("_applC" ("_position" current) ("_position" s))
###                         ("_position" s))))
###                   ("_case2"
###                     ("_case1" ("_position" EV_CONSUME_ALL)
###                       ("_applC" ("_position" atomic_step_ev_wait_all)
###                         ("_cargs"
###                           ("_applC" ("_position" current) ("_position" s))
###                           ("_position" s))))
###                     ("_case1"
###                       ("_applC" ("_position" SK_EV_SIGNAL)
###                         ("_cargs" ("_position" EV_SIGNAL_PREP)
###                           ("_position" partner)))
###                       ("_position" s))))))
###             ("_case2"
###               ("_case1"
###                 ("_applC" ("_position" SK_EV_SIGNAL)
###                   ("_cargs" ("_position" EV_SIGNAL_FINISH)
###                     ("_position" partner)))
###                 ("_applC" ("_position" atomic_step_ev_signal)
###                   ("_cargs" ("_applC" ("_position" current) ("_position" s))
###                     ("_cargs" ("_position" partner) ("_position" s)))))
###               ("_case1" ("_position" NONE) ("_position" s)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" atomic_step)
###     ("_cargs" ("_position" s) ("_position" ipt)))
###   ("_case_syntax" ("_position" ipt)
###     ("_case2"
###       ("_case1"
###         ("_applC" ("_position" SK_IPC)
###           ("_cargs" ("_position" dir)
###             ("_cargs" ("_position" stage)
###               ("_cargs" ("_position" partner) ("_position" page)))))
###         ("_applC" ("_position" atomic_step_ipc)
###           ("_cargs" ("_applC" ("_position" current) ("_position" s))
###             ("_cargs" ("_position" dir)
###               ("_cargs" ("_position" stage)
###                 ("_cargs" ("_position" partner)
###                   ("_cargs" ("_position" page) ("_position" s))))))))
###       ("_case2"
###         ("_case1"
###           ("_applC" ("_position" SK_EV_WAIT)
###             ("_cargs" ("_position" EV_PREP) ("_position" consume)))
###           ("_position" s))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" SK_EV_WAIT)
###               ("_cargs" ("_position" EV_WAIT) ("_position" consume)))
###             ("_position" s))
###           ("_case2"
###             ("_case1"
###               ("_applC" ("_position" SK_EV_WAIT)
###                 ("_cargs" ("_position" EV_FINISH) ("_position" consume)))
###               ("_case_syntax" ("_position" consume)
###                 ("_case2"
###                   ("_case1" ("_position" EV_CONSUME_ONE)
###                     ("_applC" ("_position" atomic_step_ev_wait_one)
###                       ("_cargs"
###                         ("_applC" ("_position" current) ("_position" s))
###                         ("_position" s))))
###                   ("_case1" ("_position" EV_CONSUME_ALL)
###                     ("_applC" ("_position" atomic_step_ev_wait_all)
###                       ("_cargs"
###                         ("_applC" ("_position" current) ("_position" s))
###                         ("_position" s)))))))
###             ("_case2"
###               ("_case1"
###                 ("_applC" ("_position" SK_EV_SIGNAL)
###                   ("_cargs" ("_position" EV_SIGNAL_PREP)
###                     ("_position" partner)))
###                 ("_position" s))
###               ("_case2"
###                 ("_case1"
###                   ("_applC" ("_position" SK_EV_SIGNAL)
###                     ("_cargs" ("_position" EV_SIGNAL_FINISH)
###                       ("_position" partner)))
###                   ("_applC" ("_position" atomic_step_ev_signal)
###                     ("_cargs"
###                       ("_applC" ("_position" current) ("_position" s))
###                       ("_cargs" ("_position" partner) ("_position" s)))))
###                 ("_case1" ("_position" NONE) ("_position" s))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" atomic_step)
###     ("_cargs" ("_position" s) ("_position" ipt)))
###   ("_case_syntax" ("_position" ipt)
###     ("_case2"
###       ("_case1"
###         ("_applC" ("_position" SK_IPC)
###           ("_cargs" ("_position" dir)
###             ("_cargs" ("_position" stage)
###               ("_cargs" ("_position" partner) ("_position" page)))))
###         ("_applC" ("_position" atomic_step_ipc)
###           ("_cargs" ("_applC" ("_position" current) ("_position" s))
###             ("_cargs" ("_position" dir)
###               ("_cargs" ("_position" stage)
###                 ("_cargs" ("_position" partner)
###                   ("_cargs" ("_position" page) ("_position" s))))))))
###       ("_case2"
###         ("_case1"
###           ("_applC" ("_position" SK_EV_WAIT)
###             ("_cargs" ("_position" EV_PREP) ("_position" consume)))
###           ("_position" s))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" SK_EV_WAIT)
###               ("_cargs" ("_position" EV_WAIT) ("_position" consume)))
###             ("_position" s))
###           ("_case2"
###             ("_case1"
###               ("_applC" ("_position" SK_EV_WAIT)
###                 ("_cargs" ("_position" EV_FINISH) ("_position" consume)))
###               ("_case_syntax" ("_position" consume)
###                 ("_case1" ("_position" EV_CONSUME_ONE)
###                   ("_applC" ("_position" atomic_step_ev_wait_one)
###                     ("_cargs"
###                       ("_applC" ("_position" current) ("_position" s))
###                       ("_position" s))))))
###             ("_case2"
###               ("_case1" ("_position" EV_CONSUME_ALL)
###                 ("_applC" ("_position" atomic_step_ev_wait_all)
###                   ("_cargs" ("_applC" ("_position" current) ("_position" s))
###                     ("_position" s))))
###               ("_case2"
###                 ("_case1"
###                   ("_applC" ("_position" SK_EV_SIGNAL)
###                     ("_cargs" ("_position" EV_SIGNAL_PREP)
###                       ("_position" partner)))
###                   ("_position" s))
###                 ("_case2"
###                   ("_case1"
###                     ("_applC" ("_position" SK_EV_SIGNAL)
###                       ("_cargs" ("_position" EV_SIGNAL_FINISH)
###                         ("_position" partner)))
###                     ("_applC" ("_position" atomic_step_ev_signal)
###                       ("_cargs"
###                         ("_applC" ("_position" current) ("_position" s))
###                         ("_cargs" ("_position" partner) ("_position" s)))))
###                   ("_case1" ("_position" NONE) ("_position" s)))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" atomic_step)
###     ("_cargs" ("_position" s) ("_position" ipt)))
###   ("_case_syntax" ("_position" ipt)
###     ("_case2"
###       ("_case1"
###         ("_applC" ("_position" SK_IPC)
###           ("_cargs" ("_position" dir)
###             ("_cargs" ("_position" stage)
###               ("_cargs" ("_position" partner) ("_position" page)))))
###         ("_applC" ("_position" atomic_step_ipc)
###           ("_cargs" ("_applC" ("_position" current) ("_position" s))
###             ("_cargs" ("_position" dir)
###               ("_cargs" ("_position" stage)
###                 ("_cargs" ("_position" partner)
###                   ("_cargs" ("_position" page) ("_position" s))))))))
###       ("_case2"
###         ("_case1"
###           ("_applC" ("_position" SK_EV_WAIT)
###             ("_cargs" ("_position" EV_PREP) ("_position" consume)))
###           ("_position" s))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" SK_EV_WAIT)
###               ("_cargs" ("_position" EV_WAIT) ("_position" consume)))
###             ("_position" s))
###           ("_case1"
###             ("_applC" ("_position" SK_EV_WAIT)
###               ("_cargs" ("_position" EV_FINISH) ("_position" consume)))
###             ("_case_syntax" ("_position" consume)
###               ("_case2"
###                 ("_case1" ("_position" EV_CONSUME_ONE)
###                   ("_applC" ("_position" atomic_step_ev_wait_one)
###                     ("_cargs"
###                       ("_applC" ("_position" current) ("_position" s))
###                       ("_position" s))))
###                 ("_case2"
###                   ("_case1" ("_position" EV_CONSUME_ALL)
###                     ("_applC" ("_position" atomic_step_ev_wait_all)
###                       ("_cargs"
###                         ("_applC" ("_position" current) ("_position" s))
###                         ("_position" s))))
###                   ("_case2"
###                     ("_case1"
###                       ("_applC" ("_position" SK_EV_SIGNAL)
###                         ("_cargs" ("_position" EV_SIGNAL_PREP)
###                           ("_position" partner)))
###                       ("_position" s))
###                     ("_case2"
###                       ("_case1"
###                         ("_applC" ("_position" SK_EV_SIGNAL)
###                           ("_cargs" ("_position" EV_SIGNAL_FINISH)
###                             ("_position" partner)))
###                         ("_applC" ("_position" atomic_step_ev_signal)
###                           ("_cargs"
###                             ("_applC" ("_position" current) ("_position" s))
###                             ("_cargs" ("_position" partner)
###                               ("_position" s)))))
###                       ("_case1" ("_position" NONE)
###                         ("_position" s)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Step"
### 2.079s elapsed time, 5.170s cpu time, 0.906s GC time
Loading theory "Draft.StepMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.StepMoreTemplates"
### 0.362s elapsed time, 0.540s cpu time, 0.042s GC time
val it = (): unit
