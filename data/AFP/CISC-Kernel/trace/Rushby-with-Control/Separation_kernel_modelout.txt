Loading theory "Draft.List_Theorems" (required by "Draft.Separation_kernel_modelMoreTemplates" via "Draft.Separation_kernel_model" via "Draft.CISK" via "Draft.ISK" via "Draft.SK" via "Draft.K")
Loading theory "Draft.Option_Binders" (required by "Draft.Separation_kernel_modelMoreTemplates" via "Draft.Separation_kernel_model" via "Draft.CISK" via "Draft.ISK" via "Draft.SK" via "Draft.K")
Loading theory "Draft.Step_configuration" (required by "Draft.Separation_kernel_modelMoreTemplates" via "Draft.Separation_kernel_model" via "Draft.Step" via "Draft.Step_policies")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Separation_kernel_modelMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Draft.Option_Binders"
### 0.057s elapsed time, 0.258s cpu time, 0.000s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Separation_kernel_modelMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.List_Theorems"
### 0.112s elapsed time, 0.463s cpu time, 0.038s GC time
Loading theory "Draft.K" (required by "Draft.Separation_kernel_modelMoreTemplates" via "Draft.Separation_kernel_model" via "Draft.CISK" via "Draft.ISK" via "Draft.SK")
### theory "HOL-Library.Function_Algebras"
### 0.129s elapsed time, 0.525s cpu time, 0.038s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Separation_kernel_modelMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
locale Kernel
  fixes kstep :: "'state_t => 'action_t => 'state_t"
    and output_f :: "'state_t => 'action_t => 'output_t"
    and s0 :: "'state_t"
    and current :: "'state_t => 'dom_t"
    and cswitch :: "nat => 'state_t => 'state_t"
    and interrupt :: "nat => bool"
    and kprecondition :: "'state_t => 'action_t => bool"
    and realistic_execution :: "'action_t list list => bool"
    and
    control ::
      "'state_t
       => 'dom_t
          => 'action_t list list
             => 'action_t option * 'action_t list list * 'state_t"
    and kinvolved :: "'action_t => 'dom_t set"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.219s elapsed time, 0.866s cpu time, 0.080s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Separation_kernel_modelMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.317s elapsed time, 1.235s cpu time, 0.119s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Separation_kernel_modelMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.K"
### 0.491s elapsed time, 1.938s cpu time, 0.168s GC time
Loading theory "Draft.SK" (required by "Draft.Separation_kernel_modelMoreTemplates" via "Draft.Separation_kernel_model" via "Draft.CISK" via "Draft.ISK")
### theory "Draft.Step_configuration"
### 0.670s elapsed time, 2.660s cpu time, 0.292s GC time
Loading theory "Draft.Step_policies" (required by "Draft.Separation_kernel_modelMoreTemplates" via "Draft.Separation_kernel_model" via "Draft.Step")
locale policy_axioms
  fixes sp_spec_subj_obj :: "'a => obj_id_t => mode_t => bool"
    and sp_spec_subj_subj :: "'a => 'a => bool"
    and ifp :: "'a => 'a => bool"
  assumes "policy_axioms sp_spec_subj_obj sp_spec_subj_subj ifp"
locale abstract_policy_derivation
  fixes configuration_subj_obj :: "'a => obj_id_t => mode_t => bool"
### theory "Draft.Step_policies"
### 0.105s elapsed time, 0.424s cpu time, 0.000s GC time
Loading theory "Draft.Step" (required by "Draft.Separation_kernel_modelMoreTemplates" via "Draft.Separation_kernel_model")
locale Separation_Kernel
  fixes kstep :: "'state_t => 'action_t => 'state_t"
    and output_f :: "'state_t => 'action_t => 'output_t"
    and s0 :: "'state_t"
    and current :: "'state_t => 'dom_t"
    and cswitch :: "nat => 'state_t => 'state_t"
    and interrupt :: "nat => bool"
    and kprecondition :: "'state_t => 'action_t => bool"
    and realistic_execution :: "'action_t list list => bool"
    and
    control ::
      "'state_t
       => 'dom_t
          => 'action_t list list
             => 'action_t option * 'action_t list list * 'state_t"
    and kinvolved :: "'action_t => 'dom_t set"
    and ifp :: "'dom_t => 'dom_t => bool"
    and vpeq :: "'dom_t => 'state_t => 'state_t => bool"
  assumes
    "Separation_Kernel kstep output_f current cswitch kprecondition control
      kinvolved ifp vpeq"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  remove_gateway_communications ::
    "'dom_t => 'action_t list list => 'action_t list list"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### theory "Draft.SK"
### 0.474s elapsed time, 1.861s cpu time, 0.198s GC time
Loading theory "Draft.ISK" (required by "Draft.Separation_kernel_modelMoreTemplates" via "Draft.Separation_kernel_model" via "Draft.CISK")
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
locale Interruptible_Separation_Kernel
  fixes kstep :: "'state_t => 'action_t => 'state_t"
    and output_f :: "'state_t => 'action_t => 'output_t"
    and s0 :: "'state_t"
    and current :: "'state_t => 'dom_t"
    and cswitch :: "nat => 'state_t => 'state_t"
    and interrupt :: "nat => bool"
    and kprecondition :: "'state_t => 'action_t => bool"
    and realistic_execution :: "'action_t list list => bool"
    and
    control ::
      "'state_t
       => 'dom_t
          => 'action_t list list
             => 'action_t option * 'action_t list list * 'state_t"
    and kinvolved :: "'action_t => 'dom_t set"
    and ifp :: "'dom_t => 'dom_t => bool"
    and vpeq :: "'dom_t => 'state_t => 'state_t => bool"
    and AS_set :: "'action_t list set"
    and invariant :: "'state_t => bool"
    and AS_precondition :: "'state_t => 'dom_t => 'action_t => bool"
    and aborting :: "'state_t => 'dom_t => 'action_t => bool"
    and waiting :: "'state_t => 'dom_t => 'action_t => bool"
  assumes
    "Interruptible_Separation_Kernel kstep output_f s0 current cswitch
      kprecondition realistic_execution control kinvolved ifp vpeq AS_set
      invariant AS_precondition aborting waiting"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.241s elapsed time, 4.723s cpu time, 0.913s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Separation_kernel_modelMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.ISK"
### 0.796s elapsed time, 2.981s cpu time, 0.693s GC time
Loading theory "Draft.CISK" (required by "Draft.Separation_kernel_modelMoreTemplates" via "Draft.Separation_kernel_model")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale Controllable_Interruptible_Separation_Kernel
  fixes kstep :: "'state_t => 'action_t => 'state_t"
    and output_f :: "'state_t => 'action_t => 'output_t"
    and s0 :: "'state_t"
    and current :: "'state_t => 'dom_t"
    and cswitch :: "nat => 'state_t => 'state_t"
    and interrupt :: "nat => bool"
    and kinvolved :: "'action_t => 'dom_t set"
    and ifp :: "'dom_t => 'dom_t => bool"
    and vpeq :: "'dom_t => 'state_t => 'state_t => bool"
    and AS_set :: "'action_t list set"
    and invariant :: "'state_t => bool"
    and AS_precondition :: "'state_t => 'dom_t => 'action_t => bool"
    and aborting :: "'state_t => 'dom_t => 'action_t => bool"
    and waiting :: "'state_t => 'dom_t => 'action_t => bool"
    and set_error_code :: "'state_t => 'action_t => 'state_t"
  assumes
    "Controllable_Interruptible_Separation_Kernel kstep output_f s0 current
      cswitch kinvolved ifp vpeq AS_set invariant AS_precondition aborting
      waiting set_error_code"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.845s elapsed time, 3.325s cpu time, 0.316s GC time
### theory "HOL-Library.Tree"
### 2.257s elapsed time, 8.615s cpu time, 1.291s GC time
Loading theory "Draft.Templates" (required by "Draft.Separation_kernel_modelMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.065s elapsed time, 0.201s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Separation_kernel_modelMoreTemplates")
### theory "Draft.CISK"
### 0.797s elapsed time, 2.921s cpu time, 0.313s GC time
### Ambiguous input (line 187 of "$AFP/CISC-Kernel/step/Step.thy") produces 5 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" atomic_step)
###     ("_cargs" ("_position" s) ("_position" ipt)))
###   ("_case_syntax" ("_position" ipt)
###     ("_case2"
###       ("_case1"
###         ("_applC" ("_position" SK_IPC)
###           ("_cargs" ("_position" dir)
###             ("_cargs" ("_position" stage)
###               ("_cargs" ("_position" partner) ("_position" page)))))
###         ("_applC" ("_position" atomic_step_ipc)
###           ("_cargs" ("_applC" ("_position" current) ("_position" s))
###             ("_cargs" ("_position" dir)
###               ("_cargs" ("_position" stage)
###                 ("_cargs" ("_position" partner)
###                   ("_cargs" ("_position" page) ("_position" s))))))))
###       ("_case2"
###         ("_case1"
###           ("_applC" ("_position" SK_EV_WAIT)
###             ("_cargs" ("_position" EV_PREP) ("_position" consume)))
###           ("_position" s))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" SK_EV_WAIT)
###               ("_cargs" ("_position" EV_WAIT) ("_position" consume)))
###             ("_position" s))
###           ("_case2"
###             ("_case1"
###               ("_applC" ("_position" SK_EV_WAIT)
###                 ("_cargs" ("_position" EV_FINISH) ("_position" consume)))
###               ("_case_syntax" ("_position" consume)
###                 ("_case2"
###                   ("_case1" ("_position" EV_CONSUME_ONE)
###                     ("_applC" ("_position" atomic_step_ev_wait_one)
###                       ("_cargs"
###                         ("_applC" ("_position" current) ("_position" s))
###                         ("_position" s))))
###                   ("_case2"
###                     ("_case1" ("_position" EV_CONSUME_ALL)
###                       ("_applC" ("_position" atomic_step_ev_wait_all)
###                         ("_cargs"
###                           ("_applC" ("_position" current) ("_position" s))
###                           ("_position" s))))
###                     ("_case2"
###                       ("_case1"
###                         ("_applC" ("_position" SK_EV_SIGNAL)
###                           ("_cargs" ("_position" EV_SIGNAL_PREP)
###                             ("_position" partner)))
###                         ("_position" s))
###                       ("_case1"
###                         ("_applC" ("_position" SK_EV_SIGNAL)
###                           ("_cargs" ("_position" EV_SIGNAL_FINISH)
###                             ("_position" partner)))
###                         ("_applC" ("_position" atomic_step_ev_signal)
###                           ("_cargs"
###                             ("_applC" ("_position" current) ("_position" s))
###                             ("_cargs" ("_position" partner)
###                               ("_position" s))))))))))
###             ("_case1" ("_position" NONE) ("_position" s))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" atomic_step)
###     ("_cargs" ("_position" s) ("_position" ipt)))
###   ("_case_syntax" ("_position" ipt)
###     ("_case2"
###       ("_case1"
###         ("_applC" ("_position" SK_IPC)
###           ("_cargs" ("_position" dir)
###             ("_cargs" ("_position" stage)
###               ("_cargs" ("_position" partner) ("_position" page)))))
###         ("_applC" ("_position" atomic_step_ipc)
###           ("_cargs" ("_applC" ("_position" current) ("_position" s))
###             ("_cargs" ("_position" dir)
###               ("_cargs" ("_position" stage)
###                 ("_cargs" ("_position" partner)
###                   ("_cargs" ("_position" page) ("_position" s))))))))
###       ("_case2"
###         ("_case1"
###           ("_applC" ("_position" SK_EV_WAIT)
###             ("_cargs" ("_position" EV_PREP) ("_position" consume)))
###           ("_position" s))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" SK_EV_WAIT)
###               ("_cargs" ("_position" EV_WAIT) ("_position" consume)))
###             ("_position" s))
###           ("_case2"
###             ("_case1"
###               ("_applC" ("_position" SK_EV_WAIT)
###                 ("_cargs" ("_position" EV_FINISH) ("_position" consume)))
###               ("_case_syntax" ("_position" consume)
###                 ("_case2"
###                   ("_case1" ("_position" EV_CONSUME_ONE)
###                     ("_applC" ("_position" atomic_step_ev_wait_one)
###                       ("_cargs"
###                         ("_applC" ("_position" current) ("_position" s))
###                         ("_position" s))))
###                   ("_case2"
###                     ("_case1" ("_position" EV_CONSUME_ALL)
###                       ("_applC" ("_position" atomic_step_ev_wait_all)
###                         ("_cargs"
###                           ("_applC" ("_position" current) ("_position" s))
###                           ("_position" s))))
###                     ("_case1"
###                       ("_applC" ("_position" SK_EV_SIGNAL)
###                         ("_cargs" ("_position" EV_SIGNAL_PREP)
###                           ("_position" partner)))
###                       ("_position" s))))))
###             ("_case2"
###               ("_case1"
###                 ("_applC" ("_position" SK_EV_SIGNAL)
###                   ("_cargs" ("_position" EV_SIGNAL_FINISH)
###                     ("_position" partner)))
###                 ("_applC" ("_position" atomic_step_ev_signal)
###                   ("_cargs" ("_applC" ("_position" current) ("_position" s))
###                     ("_cargs" ("_position" partner) ("_position" s)))))
###               ("_case1" ("_position" NONE) ("_position" s)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" atomic_step)
###     ("_cargs" ("_position" s) ("_position" ipt)))
###   ("_case_syntax" ("_position" ipt)
###     ("_case2"
###       ("_case1"
###         ("_applC" ("_position" SK_IPC)
###           ("_cargs" ("_position" dir)
###             ("_cargs" ("_position" stage)
###               ("_cargs" ("_position" partner) ("_position" page)))))
###         ("_applC" ("_position" atomic_step_ipc)
###           ("_cargs" ("_applC" ("_position" current) ("_position" s))
###             ("_cargs" ("_position" dir)
###               ("_cargs" ("_position" stage)
###                 ("_cargs" ("_position" partner)
###                   ("_cargs" ("_position" page) ("_position" s))))))))
###       ("_case2"
###         ("_case1"
###           ("_applC" ("_position" SK_EV_WAIT)
###             ("_cargs" ("_position" EV_PREP) ("_position" consume)))
###           ("_position" s))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" SK_EV_WAIT)
###               ("_cargs" ("_position" EV_WAIT) ("_position" consume)))
###             ("_position" s))
###           ("_case2"
###             ("_case1"
###               ("_applC" ("_position" SK_EV_WAIT)
###                 ("_cargs" ("_position" EV_FINISH) ("_position" consume)))
###               ("_case_syntax" ("_position" consume)
###                 ("_case2"
###                   ("_case1" ("_position" EV_CONSUME_ONE)
###                     ("_applC" ("_position" atomic_step_ev_wait_one)
###                       ("_cargs"
###                         ("_applC" ("_position" current) ("_position" s))
###                         ("_position" s))))
###                   ("_case1" ("_position" EV_CONSUME_ALL)
###                     ("_applC" ("_position" atomic_step_ev_wait_all)
###                       ("_cargs"
###                         ("_applC" ("_position" current) ("_position" s))
###                         ("_position" s)))))))
###             ("_case2"
###               ("_case1"
###                 ("_applC" ("_position" SK_EV_SIGNAL)
###                   ("_cargs" ("_position" EV_SIGNAL_PREP)
###                     ("_position" partner)))
###                 ("_position" s))
###               ("_case2"
###                 ("_case1"
###                   ("_applC" ("_position" SK_EV_SIGNAL)
###                     ("_cargs" ("_position" EV_SIGNAL_FINISH)
###                       ("_position" partner)))
###                   ("_applC" ("_position" atomic_step_ev_signal)
###                     ("_cargs"
###                       ("_applC" ("_position" current) ("_position" s))
###                       ("_cargs" ("_position" partner) ("_position" s)))))
###                 ("_case1" ("_position" NONE) ("_position" s))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" atomic_step)
###     ("_cargs" ("_position" s) ("_position" ipt)))
###   ("_case_syntax" ("_position" ipt)
###     ("_case2"
###       ("_case1"
###         ("_applC" ("_position" SK_IPC)
###           ("_cargs" ("_position" dir)
###             ("_cargs" ("_position" stage)
###               ("_cargs" ("_position" partner) ("_position" page)))))
###         ("_applC" ("_position" atomic_step_ipc)
###           ("_cargs" ("_applC" ("_position" current) ("_position" s))
###             ("_cargs" ("_position" dir)
###               ("_cargs" ("_position" stage)
###                 ("_cargs" ("_position" partner)
###                   ("_cargs" ("_position" page) ("_position" s))))))))
###       ("_case2"
###         ("_case1"
###           ("_applC" ("_position" SK_EV_WAIT)
###             ("_cargs" ("_position" EV_PREP) ("_position" consume)))
###           ("_position" s))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" SK_EV_WAIT)
###               ("_cargs" ("_position" EV_WAIT) ("_position" consume)))
###             ("_position" s))
###           ("_case2"
###             ("_case1"
###               ("_applC" ("_position" SK_EV_WAIT)
###                 ("_cargs" ("_position" EV_FINISH) ("_position" consume)))
###               ("_case_syntax" ("_position" consume)
###                 ("_case1" ("_position" EV_CONSUME_ONE)
###                   ("_applC" ("_position" atomic_step_ev_wait_one)
###                     ("_cargs"
###                       ("_applC" ("_position" current) ("_position" s))
###                       ("_position" s))))))
###             ("_case2"
###               ("_case1" ("_position" EV_CONSUME_ALL)
###                 ("_applC" ("_position" atomic_step_ev_wait_all)
###                   ("_cargs" ("_applC" ("_position" current) ("_position" s))
###                     ("_position" s))))
###               ("_case2"
###                 ("_case1"
###                   ("_applC" ("_position" SK_EV_SIGNAL)
###                     ("_cargs" ("_position" EV_SIGNAL_PREP)
###                       ("_position" partner)))
###                   ("_position" s))
###                 ("_case2"
###                   ("_case1"
###                     ("_applC" ("_position" SK_EV_SIGNAL)
###                       ("_cargs" ("_position" EV_SIGNAL_FINISH)
###                         ("_position" partner)))
###                     ("_applC" ("_position" atomic_step_ev_signal)
###                       ("_cargs"
###                         ("_applC" ("_position" current) ("_position" s))
###                         ("_cargs" ("_position" partner) ("_position" s)))))
###                   ("_case1" ("_position" NONE) ("_position" s)))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" atomic_step)
###     ("_cargs" ("_position" s) ("_position" ipt)))
###   ("_case_syntax" ("_position" ipt)
###     ("_case2"
###       ("_case1"
###         ("_applC" ("_position" SK_IPC)
###           ("_cargs" ("_position" dir)
###             ("_cargs" ("_position" stage)
###               ("_cargs" ("_position" partner) ("_position" page)))))
###         ("_applC" ("_position" atomic_step_ipc)
###           ("_cargs" ("_applC" ("_position" current) ("_position" s))
###             ("_cargs" ("_position" dir)
###               ("_cargs" ("_position" stage)
###                 ("_cargs" ("_position" partner)
###                   ("_cargs" ("_position" page) ("_position" s))))))))
###       ("_case2"
###         ("_case1"
###           ("_applC" ("_position" SK_EV_WAIT)
###             ("_cargs" ("_position" EV_PREP) ("_position" consume)))
###           ("_position" s))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" SK_EV_WAIT)
###               ("_cargs" ("_position" EV_WAIT) ("_position" consume)))
###             ("_position" s))
###           ("_case1"
###             ("_applC" ("_position" SK_EV_WAIT)
###               ("_cargs" ("_position" EV_FINISH) ("_position" consume)))
###             ("_case_syntax" ("_position" consume)
###               ("_case2"
###                 ("_case1" ("_position" EV_CONSUME_ONE)
###                   ("_applC" ("_position" atomic_step_ev_wait_one)
###                     ("_cargs"
###                       ("_applC" ("_position" current) ("_position" s))
###                       ("_position" s))))
###                 ("_case2"
###                   ("_case1" ("_position" EV_CONSUME_ALL)
###                     ("_applC" ("_position" atomic_step_ev_wait_all)
###                       ("_cargs"
###                         ("_applC" ("_position" current) ("_position" s))
###                         ("_position" s))))
###                   ("_case2"
###                     ("_case1"
###                       ("_applC" ("_position" SK_EV_SIGNAL)
###                         ("_cargs" ("_position" EV_SIGNAL_PREP)
###                           ("_position" partner)))
###                       ("_position" s))
###                     ("_case2"
###                       ("_case1"
###                         ("_applC" ("_position" SK_EV_SIGNAL)
###                           ("_cargs" ("_position" EV_SIGNAL_FINISH)
###                             ("_position" partner)))
###                         ("_applC" ("_position" atomic_step_ev_signal)
###                           ("_cargs"
###                             ("_applC" ("_position" current) ("_position" s))
###                             ("_cargs" ("_position" partner)
###                               ("_position" s)))))
###                       ("_case1" ("_position" NONE)
###                         ("_position" s)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.557s elapsed time, 1.198s cpu time, 0.099s GC time
### theory "Draft.Step"
### 2.461s elapsed time, 8.359s cpu time, 1.217s GC time
Loading theory "Draft.Step_invariants" (required by "Draft.Separation_kernel_modelMoreTemplates" via "Draft.Separation_kernel_model")
### theory "Draft.Step_invariants"
### 0.064s elapsed time, 0.099s cpu time, 0.044s GC time
Loading theory "Draft.Step_vpeq" (required by "Draft.Separation_kernel_modelMoreTemplates" via "Draft.Separation_kernel_model")
### theory "Draft.Step_vpeq"
### 0.052s elapsed time, 0.052s cpu time, 0.000s GC time
Loading theory "Draft.Step_vpeq_locally_respects" (required by "Draft.Separation_kernel_modelMoreTemplates" via "Draft.Separation_kernel_model")
Loading theory "Draft.Step_vpeq_weakly_step_consistent" (required by "Draft.Separation_kernel_modelMoreTemplates" via "Draft.Separation_kernel_model")
### theory "Draft.Step_vpeq_locally_respects"
### 0.050s elapsed time, 0.099s cpu time, 0.000s GC time
### theory "Draft.Step_vpeq_weakly_step_consistent"
### 0.072s elapsed time, 0.123s cpu time, 0.000s GC time
Loading theory "Draft.Separation_kernel_model" (required by "Draft.Separation_kernel_modelMoreTemplates")
### theory "Draft.Separation_kernel_model"
### 0.479s elapsed time, 0.516s cpu time, 0.050s GC time
Loading theory "Draft.Separation_kernel_modelMoreTemplates"
val templateLemmas =
   [("Separation_kernel_model.rstate_invariant",
     "atomic_step_invariant \<down> ?s",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Separation_kernel_model.rvpeq_refl", "rvpeq ?u ?s ?s",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 0)
         )),
    ("Separation_kernel_model.rstate_down_up", "\<up> \<down> ?s = ?s",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Separation_kernel_model.on_set_object_value",
     "sp_impl_subj_obj (set_object_value ?ob ?val ?s) =
      sp_impl_subj_obj ?s",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Separation_kernel_model.on_set_object_value",
     "sp_impl_subj_subj (set_object_value ?ob ?val ?s) =
      sp_impl_subj_subj ?s",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Separation_kernel_model.prec_first_EV_SIGNAL_action",
     "is_SK_EV_SIGNAL ?aseq ==> rprecondition ?s ?d (hd ?aseq)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Separation_kernel_model.prec_first_EV_WAIT_action",
     "is_SK_EV_WAIT ?aseq ==> rprecondition ?s ?d (hd ?aseq)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Separation_kernel_model.prec_first_IPC_action",
     "is_SK_IPC ?aseq ==> rprecondition ?s ?d (hd ?aseq)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Separation_kernel_model.rstate_up_down",
     "atomic_step_invariant ?s ==> \<down> \<up> ?s = ?s",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Separation_kernel_model.rvpeq_sym",
     "rvpeq ?u ?s1.0 ?s2.0 ==> rvpeq ?u ?s2.0 ?s1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("Separation_kernel_model.inst_cswitch_consistency",
     "rvpeq ?u ?s ?t ==> rvpeq ?u (rcswitch ?n ?s) (rcswitch ?n ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Separation_kernel_model.ev_signal_precondition_ensures_ifp",
     "[| ev_signal_precondition (current ?s) ?partner ?s;
         atomic_step_invariant ?s |]
      ==> rifp ?partner (current ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 1)),
                template_var 0),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0),
             template_app (template_hole 2, template_var 1))
           ))),
    ("Separation_kernel_model.inst_cswitch_independent_of_state",
     "rcurrent ?s = rcurrent ?t ==>
      rcurrent (rcswitch ?n ?s) = rcurrent (rcswitch ?n ?t)",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 2),
          template_app (template_hole 1, template_var 1))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Separation_kernel_model.rvpeq_trans",
     "[| rvpeq ?u ?s1.0 ?s2.0; rvpeq ?u ?s2.0 ?s3.0 |]
      ==> rvpeq ?u ?s1.0 ?s3.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Separation_kernel_model.ipc_precondition_ensures_ifp",
     "[| ipc_precondition (current ?s) ?dir ?partner ?page ?s;
         atomic_step_invariant ?s |]
      ==> rifp ?partner (current ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 3,
                      template_app (template_hole 2, template_var 3)),
                    template_var 2),
                  template_var 1),
                template_var 0),
              template_var 3)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 3))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app (template_hole 2, template_var 3))
           ))),
    ("Separation_kernel_model.ipc_precondition_after_cswitch",
     "ipc_precondition ?d ?dir ?partner ?page
       (\<down> ?s(| current := ?new_current |)) =
      ipc_precondition ?d ?dir ?partner ?page \<down> ?s",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 5),
               template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 5),
               template_var 4),
             template_var 3),
           template_var 2),
         template_app (template_hole 0, template_var 0)))),
    ("Separation_kernel_model.aborting_dom_independent",
     "rcurrent ?s ~= ?d ==>
      raborting (rstep ?s ?a) ?d ?a' = raborting ?s ?d ?a'",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1))),
             template_var 2),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)),
             template_var 2),
           template_var 0)))),
    ("Separation_kernel_model.inst_local_respect",
     "[| ~ rifp (rcurrent ?s) ?u; rprecondition ?s (rcurrent ?s) ?a |]
      ==> rvpeq ?u ?s (rstep ?s ?a)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 2)),
                  template_var 1)
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_app (template_hole 3, template_var 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Separation_kernel_model.aborting_after_IPC_step",
     "?d1.0 ~= ?d2.0 ==>
      aborting (atomic_step_ipc ?d1.0 ?dir ?stage ?partner ?page ?s) ?d2.0
       ?a =
      aborting ?s ?d2.0 ?a",
     template_implication
      ([template_negation
         (template_equation (template_var 7, template_var 6))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 7),
                         template_var 5),
                       template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1)),
             template_var 6),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 6),
           template_var 0)))),
    ("Separation_kernel_model.waiting_after_IPC_step",
     "?d1.0 ~= ?d2.0 ==>
      waiting (atomic_step_ipc ?d1.0 ?dir ?stage ?partner ?page ?s) ?d2.0
       ?a =
      waiting ?s ?d2.0 ?a",
     template_implication
      ([template_negation
         (template_equation (template_var 7, template_var 6))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 7),
                         template_var 5),
                       template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1)),
             template_var 6),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 6),
           template_var 0)))),
    ("Separation_kernel_model.inst_output_consistency",
     "[| rvpeq (rcurrent ?s) ?s ?t; rcurrent ?s = rcurrent ?t |]
      ==> routput_f ?s ?a = routput_f ?t ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 2)),
                template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 3, template_var 2),
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Separation_kernel_model.ev_signal_precondition_of_partner_consistent",
     "ALL d:rkinvolved (SK_EV_SIGNAL EV_SIGNAL_FINISH ?partner).
         rvpeq d ?s ?t ==>
      ev_signal_precondition ?partner ?u \<down> ?s =
      ev_signal_precondition ?partner ?u \<down> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_hole 4),
                    template_var 3))),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 0),
           template_app (template_hole 0, template_var 2)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 0),
           template_app (template_hole 0, template_var 1))))),
    ("Separation_kernel_model.prec_ev_wait_all_dom_independent",
     "[| current ?s ~= ?d; atomic_step_invariant ?s;
         atomic_step_precondition ?s ?d ?a |]
      ==> atomic_step_precondition (atomic_step_ev_wait_all (current ?s) ?s)
           ?d ?a",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 3, template_var 2)),
                   template_var 2)),
               template_var 1),
             template_var 0)
           ))),
    ("Separation_kernel_model.prec_ev_wait_one_dom_independent",
     "[| current ?s ~= ?d; atomic_step_invariant ?s;
         atomic_step_precondition ?s ?d ?a |]
      ==> atomic_step_precondition (atomic_step_ev_wait_one (current ?s) ?s)
           ?d ?a",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 3, template_var 2)),
                   template_var 2)),
               template_var 1),
             template_var 0)
           ))),
    ("Separation_kernel_model.prec_ev_signal_dom_independent",
     "[| current ?s ~= ?d; atomic_step_invariant ?s;
         atomic_step_precondition ?s ?d ?a |]
      ==> atomic_step_precondition
           (atomic_step_ev_signal (current ?s) ?partner ?s) ?d ?a",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 2, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 0,
                       template_app (template_hole 3, template_var 3)),
                     template_var 0),
                   template_var 3)),
               template_var 2),
             template_var 1)
           ))),
    ("Separation_kernel_model.prec_IPC_dom_independent",
     "[| current ?s ~= ?d; atomic_step_invariant ?s;
         atomic_step_precondition ?s ?d ?a |]
      ==> atomic_step_precondition
           (atomic_step_ipc (current ?s) ?dir ?stage ?partner ?page ?s) ?d
           ?a",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 3, template_var 6),
              template_var 5)
            ),
        template_predicate (template_app (template_hole 2, template_var 6)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 6),
                template_var 5),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_hole 0,
                             template_app
                              (template_hole 3, template_var 6)),
                           template_var 3),
                         template_var 2),
                       template_var 1),
                     template_var 0),
                   template_var 6)),
               template_var 5),
             template_var 4)
           ))),
    ("Separation_kernel_model.ipc_precondition_of_partner_consistent",
     "ALL d:rkinvolved (SK_IPC ?dir WAIT ?partner ?page). rvpeq d ?s ?t ==>
      ipc_precondition ?partner ?dir' ?u ?page' \<down> ?s =
      ipc_precondition ?partner ?dir' ?u ?page' \<down> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_hole 6,
                  template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 5, template_var 7),
                        template_hole 4),
                      template_var 6),
                    template_var 5))),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 6),
                 template_var 2),
               template_var 1),
             template_var 0),
           template_app (template_hole 0, template_var 4)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 6),
                 template_var 2),
               template_var 1),
             template_var 0),
           template_app (template_hole 0, template_var 3))))),
    ("Separation_kernel_model.inst_weakly_step_consistent",
     "[| rvpeq ?u ?s ?t; rvpeq (rcurrent ?s) ?s ?t;
         rcurrent ?s = rcurrent ?t; rprecondition ?s (rcurrent ?s) ?a;
         rprecondition ?t (rcurrent ?t) ?a |]
      ==> rvpeq ?u (rstep ?s ?a) (rstep ?t ?a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 2)),
                template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 3, template_var 2),
          template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_app (template_hole 3, template_var 2)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_app (template_hole 3, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 3),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Separation_kernel_model.prec_after_EV_SIGNAL_step",
     "[| rprecondition ?s (rcurrent ?s) (?aseq ! ?n); Suc ?n < length ?aseq;
         is_SK_EV_SIGNAL ?aseq; ~ raborting ?s (rcurrent ?s) (?aseq ! ?n);
         ~ rwaiting ?s (rcurrent ?s) (?aseq ! ?n) |]
      ==> rprecondition (rstep ?s (?aseq ! ?n)) (rcurrent ?s)
           (?aseq ! Suc ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 2),
                template_app (template_hole 10, template_var 2)),
              template_app
               (template_app (template_hole 9, template_var 1),
                template_var 0))
            ),
        template_inequation
         (less_than, template_app (template_hole 7, template_var 0),
          template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 5, template_var 1)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_hole 3,
                      template_app (template_hole 2, template_var 2)),
                    template_app (template_hole 10, template_var 2)),
                  template_app
                   (template_app (template_hole 9, template_var 1),
                    template_var 0))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_hole 1,
                      template_app (template_hole 2, template_var 2)),
                    template_app (template_hole 10, template_var 2)),
                  template_app
                   (template_app (template_hole 9, template_var 1),
                    template_var 0))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_app
                    (template_app (template_hole 9, template_var 1),
                     template_var 0))),
               template_app (template_hole 10, template_var 2)),
             template_app
              (template_app (template_hole 9, template_var 1),
               template_app (template_hole 7, template_var 0)))
           ))),
    ("Separation_kernel_model.prec_after_EV_WAIT_step",
     "[| rprecondition ?s (rcurrent ?s) (?aseq ! ?n); Suc ?n < length ?aseq;
         is_SK_EV_WAIT ?aseq; ~ raborting ?s (rcurrent ?s) (?aseq ! ?n);
         ~ rwaiting ?s (rcurrent ?s) (?aseq ! ?n) |]
      ==> rprecondition (rstep ?s (?aseq ! ?n)) (rcurrent ?s)
           (?aseq ! Suc ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 2),
                template_app (template_hole 10, template_var 2)),
              template_app
               (template_app (template_hole 9, template_var 1),
                template_var 0))
            ),
        template_inequation
         (less_than, template_app (template_hole 7, template_var 0),
          template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 5, template_var 1)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_hole 3,
                      template_app (template_hole 2, template_var 2)),
                    template_app (template_hole 10, template_var 2)),
                  template_app
                   (template_app (template_hole 9, template_var 1),
                    template_var 0))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_hole 1,
                      template_app (template_hole 2, template_var 2)),
                    template_app (template_hole 10, template_var 2)),
                  template_app
                   (template_app (template_hole 9, template_var 1),
                    template_var 0))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_app
                    (template_app (template_hole 9, template_var 1),
                     template_var 0))),
               template_app (template_hole 10, template_var 2)),
             template_app
              (template_app (template_hole 9, template_var 1),
               template_app (template_hole 7, template_var 0)))
           ))),
    ("Separation_kernel_model.prec_after_IPC_step",
     "[| rprecondition ?s (rcurrent ?s) (?aseq ! ?n); Suc ?n < length ?aseq;
         is_SK_IPC ?aseq; ~ raborting ?s (rcurrent ?s) (?aseq ! ?n);
         ~ rwaiting ?s (rcurrent ?s) (?aseq ! ?n) |]
      ==> rprecondition (rstep ?s (?aseq ! ?n)) (rcurrent ?s)
           (?aseq ! Suc ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 2),
                template_app (template_hole 10, template_var 2)),
              template_app
               (template_app (template_hole 9, template_var 1),
                template_var 0))
            ),
        template_inequation
         (less_than, template_app (template_hole 7, template_var 0),
          template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 5, template_var 1)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_hole 3,
                      template_app (template_hole 2, template_var 2)),
                    template_app (template_hole 10, template_var 2)),
                  template_app
                   (template_app (template_hole 9, template_var 1),
                    template_var 0))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_hole 1,
                      template_app (template_hole 2, template_var 2)),
                    template_app (template_hole 10, template_var 2)),
                  template_app
                   (template_app (template_hole 9, template_var 1),
                    template_var 0))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_app
                    (template_app (template_hole 9, template_var 1),
                     template_var 0))),
               template_app (template_hole 10, template_var 2)),
             template_app
              (template_app (template_hole 9, template_var 1),
               template_app (template_hole 7, template_var 0)))
           )))]:
   (string * thm * template) list
### theory "Draft.Separation_kernel_modelMoreTemplates"
### 0.386s elapsed time, 0.528s cpu time, 0.049s GC time
val it = (): unit
