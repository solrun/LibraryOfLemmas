Loading theory "Draft.Lambda_Free_Util" (required by "Draft.Infinite_ChainTemplates" via "Draft.Infinite_Chain")
Loading theory "Draft.Templates" (required by "Draft.Infinite_ChainTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.066s elapsed time, 0.160s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Infinite_ChainTemplates")
### theory "Draft.Lambda_Free_Util"
### 0.478s elapsed time, 0.992s cpu time, 0.035s GC time
Loading theory "Draft.Infinite_Chain" (required by "Draft.Infinite_ChainTemplates")
consts
  worst_chain :: "nat => 'a"
### theory "Draft.Infinite_Chain"
### 0.099s elapsed time, 0.218s cpu time, 0.063s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.544s elapsed time, 1.102s cpu time, 0.098s GC time
Loading theory "Draft.Infinite_ChainTemplates"
val templateLemmas =
   [("Infinite_Chain.inf_chain_bad", "inf_chain ?p ?f ==> bad ?p (?f ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app (template_var 1, template_var 0))
           ))),
    ("Infinite_Chain.inf_chain_offset",
     "inf_chain ?p ?f ==> inf_chain ?p (%j. ?f (j + ?i))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("Infinite_Chain.wfP_iff_no_inf_chain",
     "wfP (%x y. ?p y x) = (\<nexists>f. inf_chain ?p f)",
     template_equation
      (template_app (template_hole 3, t_empty),
       template_app
        (template_hole 2, template_app (template_hole 1, t_empty)))),
    ("Infinite_Chain.inf_chain_subset",
     "[| inf_chain ?p ?f; ?p <= ?q |] ==> inf_chain ?q ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0), template_var 1)
           ))),
    ("Infinite_Chain.worst_chain_bad",
     "[| wf {(x, y). ?gt y x}; bad ?p ?x |]
      ==> inf_chain ?p (worst_chain ?p ?gt)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_hole 4, template_app (template_hole 3, t_empty)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2))
           ))),
    ("Infinite_Chain.bad_worst_chain_0",
     "[| wf {(x, y). ?gt y x}; bad ?p ?x |]
      ==> bad ?p (worst_chain ?p ?gt 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_hole 4, template_app (template_hole 3, t_empty)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2),
               template_hole 0))
           ))),
    ("Infinite_Chain.bad_worst_chain",
     "[| wf {(x, y). ?gt y x}; bad ?p ?x |]
      ==> bad ?p (worst_chain ?p ?gt ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_hole 3, template_app (template_hole 2, t_empty)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 3),
               template_var 0))
           ))),
    ("Infinite_Chain.min_worst_chain_0",
     "[| wf {(x, y). ?gt y x}; bad ?p ?x |]
      ==> ~ ?gt (worst_chain ?p ?gt 0) ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_hole 5, template_app (template_hole 4, t_empty)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_var 2,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 1),
                       template_var 2),
                     template_hole 0)),
                 template_var 0)
               )
           ))),
    ("Infinite_Chain.bad_worst_chain_Suc",
     "[| wf {(x, y). ?gt y x}; bad ?p ?x |]
      ==> bad ?p (worst_chain ?p ?gt (Suc ?i))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_hole 4, template_app (template_hole 3, t_empty)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 3),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Infinite_Chain.worst_chain_pred",
     "[| wf {(x, y). ?gt y x}; bad ?p ?x |]
      ==> ?p (worst_chain ?p ?gt ?i) (worst_chain ?p ?gt (Suc ?i))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_hole 4, template_app (template_hole 3, t_empty)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_var 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 3),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 3),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Infinite_Chain.min_worst_chain_Suc",
     "[| wf {(x, y). ?gt y x}; bad ?p ?x; ?p (worst_chain ?p ?gt ?i) ?x |]
      ==> ~ ?gt (worst_chain ?p ?gt (Suc ?i)) ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_hole 5, template_app (template_hole 4, t_empty)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_var 2,
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 2),
                    template_var 3),
                  template_var 0)),
              template_var 1)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_var 3,
                   template_app
                    (template_app
                      (template_app (template_hole 2, template_var 2),
                       template_var 3),
                     template_app (template_hole 0, template_var 0))),
                 template_var 1)
               )
           ))),
    ("Infinite_Chain.worst_chain_not_gt",
     "[| wf {(x, y). ?gt y x}; bad ?p ?x;
         !!z y x. [| ?p z y; ?p y x |] ==> ?p z x |]
      ==> ~ ?gt (worst_chain ?p ?gt ?i) (worst_chain ?p ?gt (Suc ?i))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_hole 6, template_app (template_hole 5, t_empty)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_var 3,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 2),
                       template_var 3),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 3),
                   template_app (template_hole 0, template_var 0)))
               )
           )))]:
   (string * thm * template) list
### theory "Draft.Infinite_ChainTemplates"
### 0.393s elapsed time, 0.514s cpu time, 0.052s GC time
val it = (): unit
