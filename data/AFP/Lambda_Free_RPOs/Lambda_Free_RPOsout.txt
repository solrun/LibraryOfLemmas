Loading theory "Draft.Lambda_Free_Util" (required by "Draft.Lambda_Free_RPOsTemplates" via "Draft.Lambda_Free_RPOs" via "Draft.Lambda_Free_RPO_App" via "Draft.Lambda_Free_Term")
Loading theory "Draft.Templates" (required by "Draft.Lambda_Free_RPOsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.065s elapsed time, 0.160s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Lambda_Free_RPOsTemplates")
### theory "Draft.Lambda_Free_Util"
### 0.467s elapsed time, 0.974s cpu time, 0.031s GC time
Loading theory "Draft.Infinite_Chain" (required by "Draft.Lambda_Free_RPOsTemplates" via "Draft.Lambda_Free_RPOs" via "Draft.Lambda_Free_RPO_App" via "Draft.Extension_Orders")
Loading theory "Draft.Lambda_Free_Term" (required by "Draft.Lambda_Free_RPOsTemplates" via "Draft.Lambda_Free_RPOs" via "Draft.Lambda_Free_RPO_App")
consts
  worst_chain :: "nat => 'a"
locale gt_sym
  fixes gt_sym :: "'s => 's => bool"  (infix \<open>>\<^sub>s\<close> 50)
  assumes "gt_sym (>\<^sub>s)"
### theory "Draft.Infinite_Chain"
### 0.103s elapsed time, 0.318s cpu time, 0.088s GC time
Loading theory "Draft.Extension_Orders" (required by "Draft.Lambda_Free_RPOsTemplates" via "Draft.Lambda_Free_RPOs" via "Draft.Lambda_Free_RPO_App")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.569s elapsed time, 1.317s cpu time, 0.119s GC time
locale ext
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext ext"
locale ext_irrefl
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_irrefl ext"
locale ext_trans
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_trans ext"
locale ext_irrefl_before_trans
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_irrefl_before_trans ext"
locale ext_trans_before_irrefl
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_trans_before_irrefl ext"
locale ext_irrefl_trans_strong
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_irrefl_trans_strong ext"
locale ext_snoc
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_snoc ext"
locale ext_compat_cons
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_compat_cons ext"
locale ext_compat_snoc
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_compat_snoc ext"
locale ext_compat_list
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_compat_list ext"
locale ext_singleton
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_singleton ext"
locale ext_compat_list_strong
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_compat_list_strong ext"
locale ext_total
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_total ext"
locale ext_wf
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_wf ext"
locale ext_hd_or_tl
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_hd_or_tl ext"
locale ext_wf_bounded
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_wf_bounded ext"
Proofs for inductive predicate(s) "lexext"
  Proving monotonicity ...
overloading
  head0 \<equiv> head0 :: ('s, 'v) tm => ('s, 'v) hd
consts
  head0 :: "('s, 'v) tm => ('s, 'v) hd"
locale ext_cwiseext
  fixes ext :: "('a => 'a => bool) => 'a list => 'a list => bool"
  assumes "ext_cwiseext ext"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Extension_Orders"
### 1.323s elapsed time, 2.925s cpu time, 0.687s GC time
consts
  apps :: "('s, 'v) tm => ('s, 'v) tm list => ('s, 'v) tm"
consts
  vars_mset :: "('s, 'v) tm => 'v multiset"
consts
  hsize :: "('s, 'v) tm => nat"
consts
  subst :: "('v => ('s, 'v) tm) => ('s, 'v) tm => ('s, 'v) tm"
Proofs for inductive predicate(s) "sub"
  Proving monotonicity ...
locale arity
  fixes arity_sym :: "'s => enat"
    and arity_var :: "'v => enat"
consts
  arity_hd :: "('s, 'v) hd => enat"
Proofs for inductive predicate(s) "wary"
  Proving monotonicity ...
Proofs for inductive predicate(s) "wary_fo"
  Proving monotonicity ...
locale ground_heads
  fixes gt_sym :: "'s => 's => bool"  (infix \<open>>\<^sub>s\<close> 50)
    and arity_sym :: "'s => enat"
    and arity_var :: "'v => enat"
    and ground_heads_var :: "'v => 's set"
  assumes "ground_heads (>\<^sub>s) arity_sym arity_var ground_heads_var"
consts
  ground_heads :: "('s, 'v) hd => 's set"
### theory "Draft.Lambda_Free_Term"
### 1.867s elapsed time, 3.792s cpu time, 0.868s GC time
Loading theory "Draft.Lambda_Encoding" (required by "Draft.Lambda_Free_RPOsTemplates" via "Draft.Lambda_Free_RPOs")
Loading theory "Draft.Lambda_Free_RPO_App" (required by "Draft.Lambda_Free_RPOsTemplates" via "Draft.Lambda_Free_RPOs")
Loading theory "Draft.Lambda_Free_RPO_Std" (required by "Draft.Lambda_Free_RPOsTemplates" via "Draft.Lambda_Free_RPOs" via "Draft.Lambda_Free_RPO_Optim")
locale lambda_encoding
  fixes lam :: "'s"
    and db :: "nat => 's"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
### theory "Draft.Lambda_Encoding"
### 0.179s elapsed time, 0.556s cpu time, 0.071s GC time
locale rpo_app
  fixes gt_sym :: "'s => 's => bool"  (infix \<open>>\<^sub>s\<close> 50)
    and
    ext ::
      "(('s, 'v) tm => ('s, 'v) tm => bool)
       => ('s, 'v) tm list => ('s, 'v) tm list => bool"
  assumes "rpo_app (>\<^sub>s) ext"
Proofs for inductive predicate(s) "gt"
  Proving monotonicity ...
### theory "Draft.Lambda_Free_RPO_App"
### 0.242s elapsed time, 0.680s cpu time, 0.071s GC time
locale rpo_basis
  fixes ground_heads_var :: "'v => 's set"
    and gt_sym :: "'s => 's => bool"  (infix \<open>>\<^sub>s\<close> 50)
    and arity_sym :: "'s => enat"
    and arity_var :: "'v => enat"
    and
    extf ::
      "'s => (('s, 'v) tm => ('s, 'v) tm => bool)
             => ('s, 'v) tm list => ('s, 'v) tm list => bool"
  assumes "rpo_basis ground_heads_var (>\<^sub>s) arity_sym arity_var extf"
locale rpo
  fixes ground_heads_var :: "'v => 's set"
    and gt_sym :: "'s => 's => bool"  (infix \<open>>\<^sub>s\<close> 50)
    and
    extf ::
      "'s => (('s, 'v) tm => ('s, 'v) tm => bool)
             => ('s, 'v) tm list => ('s, 'v) tm list => bool"
    and arity_sym :: "'s => enat"
    and arity_var :: "'v => enat"
  assumes "rpo ground_heads_var (>\<^sub>s) extf arity_sym arity_var"
Proofs for inductive predicate(s) "gt"
  Proving monotonicity ...
Proofs for inductive predicate(s) "gt_sub"
  Proving monotonicity ...
Proofs for inductive predicate(s) "gt_diff"
  Proving monotonicity ...
Proofs for inductive predicate(s) "gt_same"
  Proving monotonicity ...
### theory "Draft.Lambda_Free_RPO_Std"
### 0.684s elapsed time, 1.155s cpu time, 0.133s GC time
Loading theory "Draft.Lambda_Free_RPO_Optim" (required by "Draft.Lambda_Free_RPOsTemplates" via "Draft.Lambda_Free_RPOs")
locale rpo_optim
  fixes ground_heads_var :: "'v => 's set"
    and gt_sym :: "'s => 's => bool"  (infix \<open>>\<^sub>s\<close> 50)
    and
    extf ::
      "'s => (('s, 'v) tm => ('s, 'v) tm => bool)
             => ('s, 'v) tm list => ('s, 'v) tm list => bool"
    and arity_sym :: "'s => enat"
    and arity_var :: "'v => enat"
  assumes "rpo_optim ground_heads_var (>\<^sub>s) extf arity_sym arity_var"
Proofs for inductive predicate(s) "gt"
  Proving monotonicity ...
locale rpo
  fixes ground_heads_var :: "'v => 's set"
    and gt_sym :: "'s => 's => bool"  (infix \<open>>\<^sub>s\<close> 50)
    and
    extf ::
      "'s => (('s, 'v) tm => ('s, 'v) tm => bool)
             => ('s, 'v) tm list => ('s, 'v) tm list => bool"
    and arity_sym :: "'s => enat"
    and arity_var :: "'v => enat"
  assumes "rpo ground_heads_var (>\<^sub>s) extf arity_sym arity_var"
### theory "Draft.Lambda_Free_RPO_Optim"
### 0.180s elapsed time, 0.180s cpu time, 0.000s GC time
Loading theory "Draft.Lambda_Free_RPOs" (required by "Draft.Lambda_Free_RPOsTemplates")
locale simple_rpo_instances
### theory "Draft.Lambda_Free_RPOs"
### 0.364s elapsed time, 0.401s cpu time, 0.054s GC time
Loading theory "Draft.Lambda_Free_RPOsTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Lambda_Free_RPOsTemplates"
### 0.429s elapsed time, 0.595s cpu time, 0.074s GC time
val it = (): unit
