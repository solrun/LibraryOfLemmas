Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Median_Of_Medians_SelectionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Cancellation" (required by "Draft.Median_Of_Medians_SelectionMoreTemplates" via "Draft.Median_Of_Medians_Selection" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Median_Of_Medians_SelectionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Median_Of_Medians_SelectionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.149s elapsed time, 0.614s cpu time, 0.058s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Median_Of_Medians_SelectionMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.201s elapsed time, 0.808s cpu time, 0.058s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Median_Of_Medians_SelectionMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.354s elapsed time, 1.412s cpu time, 0.168s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Median_Of_Medians_SelectionMoreTemplates" via "Draft.ExtrEqs")
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.450s elapsed time, 1.794s cpu time, 0.168s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Median_Of_Medians_SelectionMoreTemplates" via "Draft.Median_Of_Medians_Selection")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.BigO"
### 0.886s elapsed time, 3.377s cpu time, 0.913s GC time
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.950s elapsed time, 3.441s cpu time, 0.848s GC time
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
consts
  mset :: "'a list => 'a multiset"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Library.Tree"
### 1.924s elapsed time, 5.935s cpu time, 1.258s GC time
Loading theory "Draft.Templates" (required by "Draft.Median_Of_Medians_SelectionMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.107s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Median_Of_Medians_SelectionMoreTemplates")
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.796s elapsed time, 1.894s cpu time, 0.785s GC time
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.258s elapsed time, 7.519s cpu time, 2.025s GC time
Loading theory "Draft.Median_Of_Medians_Selection" (required by "Draft.Median_Of_Medians_SelectionMoreTemplates")
instantiation
  dual_ord :: (ord) ord
  less_eq_dual_ord == less_eq :: 'a dual_ord => 'a dual_ord => bool
  less_dual_ord == less :: 'a dual_ord => 'a dual_ord => bool
Found termination order: "{}"
### theory "Draft.Median_Of_Medians_Selection"
### 1.109s elapsed time, 1.867s cpu time, 0.944s GC time
Loading theory "Draft.Median_Of_Medians_SelectionMoreTemplates"
val templateLemmas =
   [("Median_Of_Medians_Selection.is_median_median",
     "is_median (median ?xs) ?xs",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 0)
         )),
    ("Median_Of_Medians_Selection.size_mset_sum_mset_distrib",
     "size (\<Sum>\<^sub># ?A) = \<Sum>\<^sub># (image_mset size ?A)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_hole 3),
           template_var 0)))),
    ("Median_Of_Medians_Selection.mset_concat",
     "mset (concat ?xss) = sum_list (map mset ?xss)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_hole 3),
           template_var 0)))),
    ("Median_Of_Medians_Selection.threeway_partition_code",
     "threeway_partition ?x [] = ([], [], [])",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_app
        (template_app (template_hole 1, template_hole 2),
         template_app
          (template_app (template_hole 0, template_hole 2),
           template_hole 2)))),
    ("Median_Of_Medians_Selection.chop_transfer",
     "rel_fun (=) (rel_fun (list_all2 ?R) (list_all2 (list_all2 ?R))) chop
       chop",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app (template_hole 6, template_hole 5),
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)),
                 template_app
                  (template_hole 2,
                   template_app (template_hole 3, template_var 0)))),
             template_hole 1),
           template_hole 0)
         )),
    ("Median_Of_Medians_Selection.is_median_to_dual_ord_iff",
     "is_median (to_dual_ord ?x) (map to_dual_ord ?xs) = is_median ?x ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app
          (template_app (template_hole 1, template_hole 2),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Median_Of_Medians_Selection.filter_mset_sum_list",
     "filter_mset ?P (sum_list ?xs) = sum_list (map (filter_mset ?P) ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_var 0)))),
    ("Median_Of_Medians_Selection.set_mset_sum_list",
     "set_mset (sum_list ?xs) = \<Union> (set_mset ` set ?xs)",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 0, template_var 0))))),
    ("Median_Of_Medians_Selection.concat_chop",
     "0 < ?n ==> concat (chop ?n ?xs) = ?xs",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1)],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0))),
    ("Median_Of_Medians_Selection.median_in_set",
     "?xs ~= [] ==> median ?xs : set ?xs",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Median_Of_Medians_Selection.select_in_set",
     "?k < length ?xs ==> select ?k ?xs : set ?xs",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Median_Of_Medians_Selection.median_cong",
     "mset ?xs = mset ?xs' ==> median ?xs = median ?xs'",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Median_Of_Medians_Selection.chop_elem_not_Nil",
     "?ys : set (chop ?n ?xs) ==> ?ys ~= []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)))
            )],
       template_negation
        (template_equation (template_var 2, template_hole 0)))),
    ("Median_Of_Medians_Selection.length_chop_part_le",
     "?ys : set (chop ?n ?xs) ==> length ?ys <= ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)))
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 2),
         template_var 1))),
    ("Median_Of_Medians_Selection.median_3",
     "median_3 ?a ?b ?c = median [?a, ?b, ?c]",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)))))),
    ("Median_Of_Medians_Selection.chop_eq_Nil_iff",
     "(chop ?n ?xs = []) = (?n = 0 | ?xs = [])",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 6, template_var 1), template_var 0),
         template_hole 5),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Median_Of_Medians_Selection.fast_select_correct",
     "?k < length ?xs ==> fast_select ?k ?xs = select ?k ?xs",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Median_Of_Medians_Selection.filter_mset_image_mset",
     "filter_mset ?P (image_mset ?f ?A) =
      image_mset ?f {#x :# ?A. ?P (?f x)#}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Median_Of_Medians_Selection.list_all2_eq_fun_conv_map",
     "list_all2 (%x y. x = ?f y) ?xs ?ys = (?xs = map ?f ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, t_empty), template_var 1),
              template_var 0)
            )],
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Median_Of_Medians_Selection.filter_mset_is_empty_iff",
     "(filter_mset ?P ?A = {#}) = (ALL x. x :# ?A --> ~ ?P x)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 1),
             template_var 0)),
         template_hole 5),
       template_app (template_hole 4, t_empty))),
    ("Median_Of_Medians_Selection.size_greater_than_median",
     "size (filter_mset ((<) (median ?xs)) (mset ?xs)) <= length ?xs div 2",
     template_inequation
      (less_equals,
       template_app
        (template_hole 9,
         template_app
          (template_app (template_hole 8, t_empty),
           template_app (template_hole 5, template_var 0))),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Median_Of_Medians_Selection.sum_msets_chop",
     "0 < ?n ==> sum_list (map mset (chop ?n ?xs)) = mset ?xs",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 1)],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app (template_hole 1, template_var 0)))),
    ("Median_Of_Medians_Selection.sort_cong",
     "mset ?xs = mset ?ys ==> sort ?xs = sort ?ys",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, t_empty), template_var 1),
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Median_Of_Medians_Selection.UN_sets_chop",
     "0 < ?n ==> \<Union> (set ` set (chop ?n ?xs)) = set ?xs",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 1)],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, t_empty),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))),
         template_app (template_hole 2, template_var 0)))),
    ("Median_Of_Medians_Selection.transfer_is_median",
     "rel_fun ?r (rel_fun ?r (=)) (<) (<) ==>
      rel_fun ?r (rel_fun (list_all2 ?r) (=)) is_median is_median",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 0),
                  template_app
                   (template_app (template_hole 8, template_var 0),
                    template_hole 7)),
                template_hole 6),
              template_hole 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_hole 7)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Median_Of_Medians_Selection.size_less_than_median",
     "size {#y :# mset ?xs. y < median ?xs#} <= (length ?xs - 1) div 2",
     template_inequation
      (less_equals,
       template_app
        (template_hole 11,
         template_app
          (template_app (template_hole 10, t_empty),
           template_app (template_hole 7, template_var 0))),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)),
             template_hole 3)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Median_Of_Medians_Selection.median_5_in_set",
     "median_5 ?a ?b ?c ?d ?e : {?a, ?b, ?c, ?d, ?e}",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 4),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_hole 0))))))
         )),
    ("Median_Of_Medians_Selection.length_chop",
     "0 < ?n ==>
      length (chop ?n ?xs) =
      nat \<lceil>real (length ?xs) / real ?n\<rceil>",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 1)],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0))),
               template_app (template_hole 1, template_var 1))))))),
    ("Median_Of_Medians_Selection.in_set_chopD",
     "[| ?x : set ?ys; ?ys : set (chop ?d ?xs) |] ==> ?x : set ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app (template_hole 3, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 3),
             template_app (template_hole 3, template_var 0))
           ))),
    ("Median_Of_Medians_Selection.median_5",
     "median_5 ?a ?b ?c ?d ?e = median [?a, ?b, ?c, ?d, ?e]",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 4),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0)))))))),
    ("Median_Of_Medians_Selection.is_median_cong",
     "[| ?x = ?y; mset ?xs = mset ?ys |]
      ==> is_median ?x ?xs = is_median ?y ?ys",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_equation
         (template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Median_Of_Medians_Selection.select_cong",
     "[| ?k = ?k'; mset ?xs = mset ?xs' |]
      ==> select ?k ?xs = select ?k' ?xs'",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_equation
         (template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Median_Of_Medians_Selection.is_median_Cons_odd",
     "[| is_median ?x ?xs; odd (length ?xs) |] ==> is_median ?x (?y # ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_hole 2))),
                  template_app (template_hole 1, template_var 1))
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Median_Of_Medians_Selection.median_le_5",
     "[| ?xs ~= []; length ?xs <= 5 |] ==> is_median (median_le_5 ?xs) ?xs",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 8)),
        template_inequation
         (less_equals, template_app (template_hole 6, template_var 0),
          template_app
           (template_hole 5,
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_hole 2))))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 0)
           ))),
    ("Median_Of_Medians_Selection.median_le_5_in_set",
     "[| ?xs ~= []; length ?xs <= 5 |] ==> median_le_5 ?xs : set ?xs",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 9)),
        template_inequation
         (less_equals, template_app (template_hole 7, template_var 0),
          template_app
           (template_hole 6,
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_hole 3))))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Median_Of_Medians_Selection.fast_select_correct_aux",
     "[| fast_select_dom (?k, ?xs); ?k < length ?xs |]
      ==> fast_select ?k ?xs = select ?k ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            ),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Median_Of_Medians_Selection.chop_reduce",
     "chop ?n ?xs =
      (if ?n = 0 | ?xs = [] then []
       else take ?n ?xs # chop ?n (drop ?n ?xs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 7, template_var 1),
                       template_hole 6)),
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_hole 4))),
               template_hole 3),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0)),
               template_app
                (template_app (template_hole 10, template_var 1),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))))
           ))),
    ("Median_Of_Medians_Selection.chop_ge_length_eq",
     "[| 0 < ?n; ?xs ~= []; length ?xs <= ?n |] ==> chop ?n ?xs = [?xs]",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 1),
        template_negation
         (template_equation (template_var 0, template_hole 6)),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 0),
          template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Median_Of_Medians_Selection.sorted_filter_less_subset_take",
     "[| sorted ?xs; ?i < length ?xs |]
      ==> {#x :# mset ?xs. x < ?xs ! ?i#} <=# mset (take ?i ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_hole 8),
              template_var 1)
            ),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 6, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, t_empty),
                 template_app (template_hole 1, template_var 1))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Median_Of_Medians_Selection.sorted_filter_greater_subset_drop",
     "[| sorted ?xs; ?i < length ?xs |]
      ==> filter_mset ((<) (?xs ! ?i)) (mset ?xs) <=#
          mset (drop (Suc ?i) ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_hole 9),
              template_var 1)
            ),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 7, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, t_empty),
                 template_app (template_hole 2, template_var 1))),
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)),
                 template_var 1)))
           ))),
    ("Median_Of_Medians_Selection.sum_mset_mset_mono",
     "(!!x. x :# ?A ==> ?f x <=# ?g x) ==>
      \<Sum>\<^sub># (image_mset ?f ?A) <=#
      \<Sum>\<^sub># (image_mset ?g ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, t_empty),
                   template_var 2))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, t_empty), template_var 2)))
           ))),
    ("Median_Of_Medians_Selection.sum_mset_mono",
     "(!!x. x :# ?A ==> ?f x <= ?g x) ==>
      \<Sum>\<^sub># (image_mset ?f ?A)
      <= \<Sum>\<^sub># (image_mset ?g ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 2)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 2))))),
    ("Median_Of_Medians_Selection.mset_filter_mono",
     "[| ?A <=# ?B; !!x. [| x :# ?A; ?P x |] ==> ?Q x |]
      ==> filter_mset ?P ?A <=# filter_mset ?Q ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Median_Of_Medians_Selection.median_5_aux",
     "[| ?x1.0 <= ?x2.0; ?x4.0 <= ?x5.0; ?x1.0 <= ?x4.0 |]
      ==> median_5_aux ?x1.0 ?x2.0 ?x3.0 ?x4.0 ?x5.0 =
          median [?x1.0, ?x2.0, ?x3.0, ?x4.0, ?x5.0]",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3),
        template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 4, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 4),
                 template_var 3),
               template_var 0),
             template_var 2),
           template_var 1),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 4),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_hole 0))))))))),
    ("Median_Of_Medians_Selection.is_median_altdef",
     "is_median ?x ?xs =
      (size {#y :# mset ?xs. y < ?x#} <= length ?xs div 2 &
       size (filter_mset ((<) ?x) (mset ?xs)) <= length ?xs div 2)",
     template_equation
      (template_app
        (template_app (template_hole 11, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, t_empty),
                   template_app (template_hole 5, template_var 0)))),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 0)),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))))),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, t_empty),
                 template_app (template_hole 5, template_var 0)))),
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))))))),
    ("Median_Of_Medians_Selection.length_nth_chop",
     "?i < length (chop ?n ?xs) ==>
      length (chop ?n ?xs ! ?i) =
      (if ?i = length (chop ?n ?xs) - 1 & ~ ?n dvd length ?xs
       then length ?xs mod ?n else ?n)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_hole 11,
            template_app
             (template_app (template_hole 10, template_var 1),
              template_var 0)))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 10, template_var 1),
                      template_var 0)),
                  template_var 2))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 9, template_var 2),
                         template_app
                          (template_app
                            (template_hole 4,
                             template_app
                              (template_hole 11,
                               template_app
                                (template_app
                                  (template_hole 10, template_var 1),
                                 template_var 0))),
                           template_hole 3))),
                     template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_var 1),
                         template_app (template_hole 8, template_var 0))))),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 8, template_var 0)),
                   template_var 1)),
               template_var 1)
             )))),
    ("Median_Of_Medians_Selection.select_append",
     "[| !!y z. [| y : set ?ys; z : set ?zs |] ==> y <= z;
         ?k < length ?ys |]
      ==> select ?k (?ys @ ?zs) = select ?k ?ys",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 2)))),
    ("Median_Of_Medians_Selection.sort_append",
     "(!!x y. [| x : set ?xs; y : set ?ys |] ==> x <= y) ==>
      sort (?xs @ ?ys) = sort ?xs @ sort ?ys",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 1, t_empty),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, t_empty), template_var 1)),
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))))),
    ("Median_Of_Medians_Selection.select_rec_partition",
     "[| (0::?'a) < ?d; ?k < length ?xs |]
      ==> select ?k ?xs =
          (let (ys, zs) = partition (%y. y <= ?x) ?xs
           in if ?k < length ys then select ?k ys
              else select (?k - length ys) zs)",
     template_implication
      ([template_inequation (less_than, template_hole 10, template_var 3),
        template_inequation
         (less_than, template_var 2,
          template_app (template_hole 8, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 2), template_var 1),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, t_empty), template_var 1)),
           template_app (template_hole 2, t_empty))))),
    ("Median_Of_Medians_Selection.threeway_partition_code",
     "threeway_partition ?x (?y # ?ys) =
      (case threeway_partition ?x ?ys of
       (ls, es, gs) =>
         if ?y < ?x then (?y # ls, es, gs)
         else if ?x = ?y then (ls, ?y # es, gs) else (ls, es, ?y # gs))",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 2),
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 6, t_empty),
         template_app
          (template_app (template_hole 8, template_var 2),
           template_var 0)))),
    ("Median_Of_Medians_Selection.select_append",
     "[| !!y z. [| y : set ?ys; z : set ?zs |] ==> y <= z;
         ?k : {length ?ys..<length ?ys + length ?zs} |]
      ==> select ?k (?ys @ ?zs) = select (?k - length ?ys) ?zs",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_var 2)),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_hole 5, template_var 2)),
                  template_app (template_hole 5, template_var 1))))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app (template_hole 5, template_var 2))),
           template_var 1)))),
    ("Median_Of_Medians_Selection.select_append'",
     "[| !!y z. [| y : set ?ys; z : set ?zs |] ==> y <= z;
         ?k < length ?ys + length ?zs |]
      ==> select ?k (?ys @ ?zs) =
          (if ?k < length ?ys then select ?k ?ys
           else select (?k - length ?ys) ?zs)",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 2)),
            template_app (template_hole 5, template_var 1)))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 7, template_var 0),
                 template_app (template_hole 5, template_var 2))),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 2)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_app (template_hole 5, template_var 2))),
             template_var 1))))),
    ("Median_Of_Medians_Selection.select_rec_threeway_partition",
     "[| (0::?'a) < ?d; ?k < length ?xs |]
      ==> select ?k ?xs =
          (let (ls, es, gs) = threeway_partition ?x ?xs; nl = length ls;
               ne = length es
           in if ?k < nl then select ?k ls
              else if ?k < nl + ne then ?x else select (?k - nl - ne) gs)",
     template_implication
      ([template_inequation (less_than, template_hole 12, template_var 3),
        template_inequation
         (less_than, template_var 2,
          template_app (template_hole 10, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 8, template_var 2), template_var 1),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 0),
               template_var 1)),
           template_app (template_hole 5, t_empty))))),
    ("Median_Of_Medians_Selection.size_less_greater_median_of_medians_5",
     "[| !!xs. [| xs ~= []; length xs <= 5 |] ==> is_median (?med xs) xs;
         is_median ?x (map ?med (chop 5 ?xs)) |]
      ==> length (filter (%y. y < ?x) ?xs)
          <= nat \<lceil>7 / 10 * real (length ?xs)\<rceil> + 6",
     template_implication
      ([template_predicate (template_app (template_hole 22, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_app
               (template_app (template_hole 10, template_var 2),
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_hole 15,
                      template_app
                       (template_hole 14,
                        template_app
                         (template_hole 13, template_hole 12)))),
                  template_var 0)))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 16,
           template_app
            (template_app (template_hole 8, t_empty), template_var 0)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_hole 1,
                           template_app
                            (template_hole 14,
                             template_app
                              (template_hole 14, template_hole 12)))),
                       template_app
                        (template_hole 1,
                         template_app
                          (template_hole 13,
                           template_app
                            (template_hole 14,
                             template_app
                              (template_hole 13, template_hole 12)))))),
                   template_app
                    (template_hole 0,
                     template_app (template_hole 16, template_var 0)))))),
           template_app
            (template_hole 15,
             template_app
              (template_hole 13,
               template_app (template_hole 14, template_hole 12))))))),
    ("Median_Of_Medians_Selection.size_less_greater_median_of_medians_5",
     "[| !!xs. [| xs ~= []; length xs <= 5 |] ==> is_median (?med xs) xs;
         is_median ?x (map ?med (chop 5 ?xs)) |]
      ==> length (filter ((<) ?x) ?xs)
          <= nat \<lceil>7 / 10 * real (length ?xs)\<rceil> + 6",
     template_implication
      ([template_predicate (template_app (template_hole 22, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_app
               (template_app (template_hole 10, template_var 2),
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_hole 15,
                      template_app
                       (template_hole 14,
                        template_app
                         (template_hole 13, template_hole 12)))),
                  template_var 0)))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 16,
           template_app
            (template_app (template_hole 8, t_empty), template_var 0)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_hole 1,
                           template_app
                            (template_hole 14,
                             template_app
                              (template_hole 14, template_hole 12)))),
                       template_app
                        (template_hole 1,
                         template_app
                          (template_hole 13,
                           template_app
                            (template_hole 14,
                             template_app
                              (template_hole 13, template_hole 12)))))),
                   template_app
                    (template_hole 0,
                     template_app (template_hole 16, template_var 0)))))),
           template_app
            (template_hole 15,
             template_app
              (template_hole 13,
               template_app (template_hole 14, template_hole 12))))))),
    ("Median_Of_Medians_Selection.size_less_than_median_of_medians_strong",
     "[| 0 < ?d;
         !!xs. [| xs ~= []; length xs <= ?d |] ==> is_median (?med xs) xs;
         is_median ?x (map ?med (chop ?d ?xs)) |]
      ==> size {#y :# mset ?xs. y < ?x#}
          <= length (chop ?d ?xs) * (?d div 2) +
             length (chop ?d ?xs) div 2 * ((?d + 1) div 2)",
     template_implication
      ([template_inequation (less_than, template_hole 21, template_var 3),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 1),
              template_app
               (template_app (template_hole 13, template_var 2),
                template_app
                 (template_app (template_hole 12, template_var 3),
                  template_var 0)))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, t_empty),
             template_app (template_hole 8, template_var 0))),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 12, template_var 3),
                     template_var 0))),
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))))),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 12, template_var 3),
                       template_var 0))),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1)))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 7, template_var 3),
                   template_hole 0)),
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1)))))))),
    ("Median_Of_Medians_Selection.fast_select_code",
     "fast_select ?k ?xs =
      (if length ?xs <= 20 then fold insort ?xs [] ! ?k
       else let x = fast_select (((length ?xs + 4) div 5 - 1) div 2)
                     (map median_le_5 (chop 5 ?xs));
                (ls, es, gs) = threeway_partition x ?xs; nl = length ls;
                ne = nl + length es
            in if ?k < nl then fast_select ?k ls
               else if ?k < ne then x else fast_select (?k - ne) gs)",
     template_equation
      (template_app
        (template_app (template_hole 25, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 24,
             template_app
              (template_app
                (template_hole 23,
                 template_app (template_hole 22, template_var 0)),
               template_app
                (template_hole 21,
                 template_app
                  (template_hole 20,
                   template_app
                    (template_hole 20,
                     template_app
                      (template_hole 19,
                       template_app
                        (template_hole 20, template_hole 18))))))),
           template_app
            (template_app
              (template_hole 17,
               template_app
                (template_app
                  (template_app
                    (template_hole 16,
                     template_app (template_hole 15, t_empty)),
                   template_var 0),
                 template_hole 14)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app
                (template_hole 25,
                 template_app
                  (template_app
                    (template_hole 12,
                     template_app
                      (template_app
                        (template_hole 11,
                         template_app
                          (template_app
                            (template_hole 12,
                             template_app
                              (template_app
                                (template_hole 10,
                                 template_app
                                  (template_hole 22, template_var 0)),
                               template_app
                                (template_hole 21,
                                 template_app
                                  (template_hole 20,
                                   template_app
                                    (template_hole 20,
                                     template_hole 18))))),
                           template_app
                            (template_hole 21,
                             template_app
                              (template_hole 19,
                               template_app
                                (template_hole 20, template_hole 18))))),
                       template_hole 9)),
                   template_app
                    (template_hole 21,
                     template_app (template_hole 20, template_hole 18)))),
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_hole 21,
                       template_app
                        (template_hole 19,
                         template_app
                          (template_hole 20, template_hole 18)))),
                   template_var 0)))),
           t_empty)))),
    ("Median_Of_Medians_Selection.size_less_than_median_of_medians",
     "[| !!xs. [| xs ~= []; length xs <= Suc (2 * ?d) |]
               ==> is_median (?med xs) xs;
         is_median ?x (map ?med (chop (Suc (2 * ?d)) ?xs)) |]
      ==> size {#y :# mset ?xs. y < ?x#}
          <= nat \<lceil>(3 * real ?d + 1) / real (2 * (2 * ?d + 1)) *
                         real (length ?xs)\<rceil> +
             5 * ?d div 2 +
             1",
     template_implication
      ([template_predicate (template_app (template_hole 30, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 1),
              template_app
               (template_app (template_hole 17, template_var 2),
                template_app
                 (template_app
                   (template_hole 16,
                    template_app
                     (template_hole 23,
                      template_app
                       (template_app
                         (template_hole 22,
                          template_app
                           (template_hole 21,
                            template_app
                             (template_hole 20, template_hole 19))),
                        template_var 3))),
                  template_var 0)))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 15,
           template_app
            (template_app (template_hole 14, t_empty),
             template_app (template_hole 12, template_var 0))),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_hole 10,
                   template_app
                    (template_hole 9,
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app
                          (template_app
                            (template_hole 7,
                             template_app
                              (template_app
                                (template_hole 6,
                                 template_app
                                  (template_app
                                    (template_hole 8,
                                     template_app
(template_hole 5, template_app (template_hole 4, template_hole 19))),
                                   template_app
                                    (template_hole 3, template_var 3))),
                               template_hole 2)),
                           template_app
                            (template_hole 3,
                             template_app
                              (template_app
                                (template_hole 22,
                                 template_app
                                  (template_hole 21,
                                   template_app
                                    (template_hole 20, template_hole 19))),
                               template_app
                                (template_app
                                  (template_hole 11,
                                   template_app
                                    (template_app
(template_hole 22,
 template_app
  (template_hole 21, template_app (template_hole 20, template_hole 19))),
                                     template_var 3)),
                                 template_hole 1))))),
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 24, template_var 0)))))),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app
                      (template_hole 22,
                       template_app
                        (template_hole 21,
                         template_app
                          (template_hole 4,
                           template_app
                            (template_hole 20, template_hole 19)))),
                     template_var 3)),
                 template_app
                  (template_hole 21,
                   template_app (template_hole 20, template_hole 19))))),
           template_hole 1)))),
    ("Median_Of_Medians_Selection.size_greater_than_median_of_medians",
     "[| !!xs. [| xs ~= []; length xs <= Suc (2 * ?d) |]
               ==> is_median (?med xs) xs;
         is_median ?x (map ?med (chop (Suc (2 * ?d)) ?xs)) |]
      ==> size (filter_mset ((<) ?x) (mset ?xs))
          <= nat \<lceil>(3 * real ?d + 1) / real (2 * (2 * ?d + 1)) *
                         real (length ?xs)\<rceil> +
             5 * ?d div 2 +
             1",
     template_implication
      ([template_predicate (template_app (template_hole 30, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 1),
              template_app
               (template_app (template_hole 17, template_var 2),
                template_app
                 (template_app
                   (template_hole 16,
                    template_app
                     (template_hole 23,
                      template_app
                       (template_app
                         (template_hole 22,
                          template_app
                           (template_hole 21,
                            template_app
                             (template_hole 20, template_hole 19))),
                        template_var 3))),
                  template_var 0)))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 15,
           template_app
            (template_app (template_hole 14, t_empty),
             template_app (template_hole 12, template_var 0))),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_hole 10,
                   template_app
                    (template_hole 9,
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app
                          (template_app
                            (template_hole 7,
                             template_app
                              (template_app
                                (template_hole 6,
                                 template_app
                                  (template_app
                                    (template_hole 8,
                                     template_app
(template_hole 5, template_app (template_hole 4, template_hole 19))),
                                   template_app
                                    (template_hole 3, template_var 3))),
                               template_hole 2)),
                           template_app
                            (template_hole 3,
                             template_app
                              (template_app
                                (template_hole 22,
                                 template_app
                                  (template_hole 21,
                                   template_app
                                    (template_hole 20, template_hole 19))),
                               template_app
                                (template_app
                                  (template_hole 11,
                                   template_app
                                    (template_app
(template_hole 22,
 template_app
  (template_hole 21, template_app (template_hole 20, template_hole 19))),
                                     template_var 3)),
                                 template_hole 1))))),
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 24, template_var 0)))))),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app
                      (template_hole 22,
                       template_app
                        (template_hole 21,
                         template_app
                          (template_hole 4,
                           template_app
                            (template_hole 20, template_hole 19)))),
                     template_var 3)),
                 template_app
                  (template_hole 21,
                   template_app (template_hole 20, template_hole 19))))),
           template_hole 1)))),
    ("Median_Of_Medians_Selection.select_code",
     "select ?k ?xs =
      (if ?k < length ?xs then fast_select ?k ?xs
       else Code.abort STR ''Selection index out of bounds.''
             (%_. select ?k ?xs))",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_var 1),
               template_app (template_hole 6, template_var 0))),
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 3, template_hole 2),
                           template_hole 2),
                         template_hole 1),
                       template_hole 1),
                     template_hole 2),
                   template_hole 1),
                 template_hole 2),
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_hole 3, template_hole 2),
                             template_hole 1),
                           template_hole 2),
                         template_hole 1),
                       template_hole 1),
                     template_hole 2),
                   template_hole 2),
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 3, template_hole 1),
                               template_hole 1),
                             template_hole 2),
                           template_hole 2),
                         template_hole 1),
                       template_hole 2),
                     template_hole 2),
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 3, template_hole 2),
                                 template_hole 1),
                               template_hole 2),
                             template_hole 1),
                           template_hole 1),
                         template_hole 2),
                       template_hole 2),
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_hole 3, template_hole 2),
                                   template_hole 2),
                                 template_hole 1),
                               template_hole 1),
                             template_hole 1),
                           template_hole 2),
                         template_hole 2),
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_hole 3, template_hole 1),
                                     template_hole 1),
                                   template_hole 2),
                                 template_hole 1),
                               template_hole 2),
                             template_hole 2),
                           template_hole 2),
                         template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app (template_hole 3, template_hole 2), template_hole 1),
                                     template_hole 1),
                                   template_hole 2),
                                 template_hole 1),
                               template_hole 2),
                             template_hole 2),
                           template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app (template_hole 3, template_hole 2), template_hole 2),
 template_hole 2),
                                     template_hole 2),
                                   template_hole 1),
                                 template_hole 2),
                               template_hole 2),
                             template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app (template_hole 3, template_hole 1), template_hole 2),
   template_hole 2),
 template_hole 2),
                                     template_hole 1),
                                   template_hole 2),
                                 template_hole 2),
                               template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app (template_hole 3, template_hole 1), template_hole 1),
     template_hole 1),
   template_hole 1),
 template_hole 1),
                                     template_hole 2),
                                   template_hole 1),
                                 template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app (template_hole 3, template_hole 2), template_hole 1),
       template_hole 1),
     template_hole 2),
   template_hole 1),
 template_hole 2),
                                     template_hole 2),
                                   template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app (template_hole 3, template_hole 1),
           template_hole 2),
         template_hole 2),
       template_hole 2),
     template_hole 1),
   template_hole 2),
 template_hole 2),
                                     template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_hole 1),
             template_hole 1),
           template_hole 2),
         template_hole 1),
       template_hole 1),
     template_hole 2),
   template_hole 2),
 template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_hole 1),
             template_hole 2),
           template_hole 1),
         template_hole 1),
       template_hole 2),
     template_hole 2),
   template_app
    (template_app
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_hole 1),
                 template_hole 1),
               template_hole 1),
             template_hole 2),
           template_hole 2),
         template_hole 2),
       template_hole 2),
     template_app
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_hole 1),
                   template_hole 1),
                 template_hole 1),
               template_hole 1),
             template_hole 1),
           template_hole 2),
         template_hole 1),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 3, template_hole 2),
                     template_hole 2),
                   template_hole 2),
                 template_hole 2),
               template_hole 1),
             template_hole 2),
           template_hole 2),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 3, template_hole 2),
                       template_hole 1),
                     template_hole 2),
                   template_hole 1),
                 template_hole 2),
               template_hole 2),
             template_hole 2),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 3, template_hole 1),
                         template_hole 1),
                       template_hole 2),
                     template_hole 1),
                   template_hole 2),
                 template_hole 2),
               template_hole 2),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 3, template_hole 1),
                           template_hole 1),
                         template_hole 1),
                       template_hole 1),
                     template_hole 1),
                   template_hole 2),
                 template_hole 1),
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_hole 3, template_hole 2),
                             template_hole 2),
                           template_hole 2),
                         template_hole 2),
                       template_hole 1),
                     template_hole 2),
                   template_hole 2),
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 3, template_hole 1),
                               template_hole 2),
                             template_hole 2),
                           template_hole 1),
                         template_hole 1),
                       template_hole 2),
                     template_hole 2),
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 3, template_hole 1),
                                 template_hole 1),
                               template_hole 1),
                             template_hole 1),
                           template_hole 1),
                         template_hole 2),
                       template_hole 1),
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_hole 3, template_hole 1),
                                   template_hole 2),
                                 template_hole 1),
                               template_hole 1),
                             template_hole 1),
                           template_hole 2),
                         template_hole 2),
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_hole 3, template_hole 2),
                                     template_hole 2),
                                   template_hole 2),
                                 template_hole 2),
                               template_hole 1),
                             template_hole 2),
                           template_hole 2),
                         template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app (template_hole 3, template_hole 2), template_hole 1),
                                     template_hole 2),
                                   template_hole 1),
                                 template_hole 2),
                               template_hole 2),
                             template_hole 2),
                           template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app (template_hole 3, template_hole 1), template_hole 2),
 template_hole 2),
                                     template_hole 2),
                                   template_hole 1),
                                 template_hole 2),
                               template_hole 2),
                             template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app (template_hole 3, template_hole 1), template_hole 1),
   template_hole 2),
 template_hole 1),
                                     template_hole 1),
                                   template_hole 2),
                                 template_hole 2),
                               template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app (template_hole 3, template_hole 2), template_hole 2),
     template_hole 1),
   template_hole 1),
 template_hole 2),
                                     template_hole 2),
                                   template_hole 2),
                                 template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app (template_hole 3, template_hole 1), template_hole 2),
       template_hole 2),
     template_hole 2),
   template_hole 1),
 template_hole 2),
                                     template_hole 1),
                                   template_hole
                                    0))))))))))))))))))))))))))))))),
           t_empty))))]:
   (string * thm * template) list
### theory "Draft.Median_Of_Medians_SelectionMoreTemplates"
### 0.410s elapsed time, 0.543s cpu time, 0.000s GC time
val it = (): unit
