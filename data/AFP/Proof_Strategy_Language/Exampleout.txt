Loading theory "Draft.Try_Hard" (required by "Draft.ExampleMoreTemplates" via "Draft.Example" via "Draft.PSL")
Loading theory "HOL-Eisbach.Eisbach" (required by "Draft.ExampleMoreTemplates" via "Draft.Example")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ExampleMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ExampleMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
signature PARSE_TOOLS =
  sig
    val is_real_val: ('a, 'b) parse_val -> bool
    val name_term: (term, string) parse_val parser
    val parse_term_val: 'a parser -> (term, 'a) parse_val parser
    val parse_thm_val: 'a parser -> (thm, 'a) parse_val parser
    datatype ('a, 'b) parse_val
    = Parse_Val of 'b * ('a -> unit) | Real_Val of 'a
    val parse_val_cases:
       ('a -> 'b) -> ('b, 'a) parse_val -> 'b * ('b -> unit)
    val the_parse_fun: ('a, 'b) parse_val -> 'a -> unit
    val the_parse_val: ('a, 'b) parse_val -> 'b
    val the_real_val: ('a, 'b) parse_val -> 'a
  end
structure Parse_Tools: PARSE_TOOLS
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
signature METHOD_CLOSURE =
  sig
    val apply_method:
       Proof.context ->
         string ->
           term list ->
             thm list list ->
               (Proof.context -> Method.method) list ->
                 Proof.context -> thm list -> context_tactic
    val method:
       binding ->
         (binding * typ option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
    val method_cmd:
       binding ->
         (binding * string option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
  end
structure Method_Closure: METHOD_CLOSURE
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.115s elapsed time, 0.441s cpu time, 0.037s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ExampleMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
signature UTILS =
  sig
    val ?? : ('a -> bool) * ('a -> 'a) -> 'a -> 'a
    val are_same: string * string -> bool
    val debug: bool
    val delay: ('a -> 'b) * 'a -> 'b
    val flip: ('a -> 'b -> 'c) -> 'b -> 'a -> 'c
    val init: 'a list -> 'a list
    val intersperse: 'a -> 'a list -> 'a list
    val is_in_paren: string -> bool
    val list_to_pair: 'a list -> 'a * 'a
    val map_arg: 'a -> ('a -> 'b) list -> 'b list
    val map_pair: ('a -> 'b) -> 'a * 'a -> 'b * 'b
    val pair_to_list: 'a * 'a -> 'a list
    val prefix_if_nonempty: string -> string list -> string list
    val push_to_front: string -> string list -> string list
    val remove__s: string -> string
    val rm_parentheses: string -> string
    val rm_parentheses_with_contents_in_the_end: string -> string
    val the': string -> 'a option -> 'a
    val try_with: 'a -> ('b -> 'a) -> 'b -> 'a
  end
structure Utils: UTILS
signature SEQ2 =
  sig
    val foldr: ('a * 'b -> 'b) -> 'b -> 'a Seq.seq -> 'b
    val foldr1: ('a * 'a -> 'a) -> 'a Seq.seq -> 'a
    val map_arg: 'a -> ('a -> 'b) Seq.seq -> 'b Seq.seq
    val mk_pairs:
       ('a -> 'b Seq.seq) * 'c -> 'a -> 'd -> ('c * ('b * 'd)) Seq.seq
    val pairs: 'a Seq.seq -> 'b Seq.seq -> ('a * 'b) Seq.seq
    val powerset: 'a Seq.seq -> 'a Seq.seq Seq.seq
    val same_seq: ('a * 'a -> bool) -> 'a Seq.seq * 'a Seq.seq -> bool
    val seq_number: 'a Seq.seq -> (int * 'a) Seq.seq
    val seq_to_option: 'a Seq.seq -> 'a option
    val try_seq: ('a -> 'b Seq.seq) -> 'a -> 'b Seq.seq
  end
structure Seq2: SEQ2
signature ISABELLE_UTILS =
  sig
    val TIMEOUT: ('a -> 'b Seq.seq) -> 'a -> 'b Seq.seq
    val TIMEOUT_in: real -> ('a -> 'b Seq.seq) -> 'a -> 'b Seq.seq
    val defer: thm -> thm Seq.seq
    val flatten_trm: term -> term list
    val get_1st_subg: thm -> term option
    val get_abs_name_in_1st_subg: thm -> string list
    val get_abs_names_in_thm: thm -> string list
    val get_abs_names_in_trm: term -> string list
    val get_all_var_names_in_1st_subg: thm -> string list
    val get_const_names_in_1st_subg: thm -> string list
    val get_const_names_in_thm: thm -> string list
    val get_free_var_names_in_1st_subg: thm -> string list
    val get_free_var_names_in_thm: thm -> string list
    val get_free_var_names_in_trms: term list -> string list
    val get_trms_in_thm: thm -> term list
    val get_typ_names_in_1st_subg: thm -> string list
    val get_typ_names_in_thm: thm -> string list
    val get_typ_names_in_trm: term -> string list
    val mk_proof_obligation: Proof.context -> string -> thm
    val proof_state_to_thm: Proof.state -> thm
    val same_except_for_fst_prem: thm -> thm -> bool
  end
structure Isabelle_Utils: ISABELLE_UTILS
signature FIND_THEOREMS2 =
  sig
    type context
    datatype 'a criterion
    =
         Dest
       | Elim
       | Intro
       | Name of string
       | Pattern of 'a
       | Simp of 'a
       | Solves
    val find_theorems:
       Proof.context ->
         thm option ->
           int option ->
             bool ->
               (bool * term criterion) list ->
                 int option * (Facts.ref * thm) list
    val find_theorems_cmd:
       Proof.context ->
         thm option ->
           int option ->
             bool ->
               (bool * string criterion) list ->
                 int option * (Facts.ref * thm) list
    val get_coinduction_rule_names: get_rule_names
    val get_coinduction_rules: get_rules
    val get_criterion: string -> string -> (bool * 'a criterion) list
    val get_dest_rule_names: get_rule_names
    val get_dest_rules: get_rules
    val get_elim_rule_names: get_rule_names
    val get_elim_rules: get_rules
    val get_fact_names_mesh: Proof.state -> string list
    val get_induct_rule_names: get_rule_names
    val get_induct_rules: get_rules
    val get_intro_rule_names: get_rule_names
    val get_intro_rules: get_rules
    val get_rule_names: get_rules -> context -> thm -> xstring list
    type get_rule_names = context -> thm -> string list
    type get_rules = context -> thm -> (ref * thm) list
    val get_simp_rule_names: get_rule_names
    val get_simp_rules: get_rules
    val get_split_rule_names: get_rule_names
    val get_split_rules: get_rules
    val name_to_rules:
       context -> thm -> string -> string -> (ref * thm) list
    val names_to_rules:
       context -> thm -> string -> string list -> (ref * thm) list
    val pretty_theorems:
       Proof.state ->
         int option -> bool -> (bool * string criterion) list -> Pretty.T
    val pretty_thm: Proof.context -> Facts.ref * thm -> Pretty.T
    val proof_state: Toplevel.state -> Proof.state
    type 'a query =
       {criteria: (bool * 'a criterion) list,
        goal: thm option, limit: int option, rem_dups: bool}
    val query_parser: (bool * string criterion) list parser
    val read_query: Position.T -> string -> (bool * string criterion) list
    type ref
  end
structure Find_Theorems2: FIND_THEOREMS2
signature DYNAMIC_UTILS =
  sig
    val check_src: context -> src -> src
    val checked_src_to_meth: context -> src -> Method.method
    type context
    val get_meth_nm: string -> string list -> string
    val get_tokens: string -> Token.T list -> src
    type log
    val log_n_nontac_to_stttac: log * 'a nontac -> 'a stttac
    type 'a logtac = 'a -> (log * 'a) seq
    val logtac_to_stttac: 'a logtac -> 'a stttac
    val mk_apply_script: log -> string
    datatype node
    =
         Apply of {back: int, methN: string, using: string list}
       | Defer
       | Done
       | Subgoal
    type 'a nontac = 'a -> 'a seq
    val nontac_to_logtac: node -> 'a nontac -> 'a logtac
    val reform: log * 'a nontac -> 'a logtac
    type 'a seq
    type src
    type 'a st_monad = log -> (log * 'a) seq
    type state
    val str_to_tokens: context -> string -> Token.T list
    val string_to_nontac_on_pstate: string -> state nontac
    val string_to_stttac_on_pstate: string -> state stttac
    type 'a stttac = 'a -> 'a st_monad
    val writer_to_state: (log * 'a) seq -> 'a st_monad
  end
structure Dynamic_Utils: DYNAMIC_UTILS
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
structure Eisbach_Rule_Insts: sig end
signature SUBTOOL =
  sig val state_stttac: Proof.state Dynamic_Utils.stttac end
signature SUBTOOLS =
  sig
    val defer: Proof.state Dynamic_Utils.stttac
    val hammer: Proof.state Dynamic_Utils.stttac
    val is_solved: Proof.state Dynamic_Utils.stttac
    val nitpick: Proof.state Dynamic_Utils.stttac
    val quickcheck: Proof.state Dynamic_Utils.stttac
    val subgoal: Proof.state Dynamic_Utils.stttac
  end
structure Subtools:
  sig
    structure Nitpick_Tactic: SUBTOOL
    structure Quickcheck_Tactic: SUBTOOL
    structure Sledgehammer_Tacctic: SUBTOOL
    val defer: Proof.state Dynamic_Utils.stttac
    val hammer: Proof.state Dynamic_Utils.stttac
    val is_solved: Proof.state Dynamic_Utils.stttac
    val is_solved_nontac: Proof.state -> Proof.state Seq.seq
    val nitpick: Proof.state Dynamic_Utils.stttac
    val quickcheck: Proof.state Dynamic_Utils.stttac
    val subgoal: Proof.state Dynamic_Utils.stttac
    val subgoal_nontac: Proof.state -> Proof.state Seq.seq
    val to_stttac:
       Dynamic_Utils.log * 'a Dynamic_Utils.nontac ->
         'a Dynamic_Utils.stttac
  end
Found termination order: "size_list size <*mlex*> {}"
signature DYNAMIC_TACTIC_GENERATOR_SEED =
  sig
    val get_all_modifiers: Proof.state -> modifiers
    type modifier
    type modifiers = modifier list
    val mods_to_string: modifiers -> string
    val reordered_mods: modifiers -> modifiers list
  end
signature DYNAMIC_TACTIC_GENERATOR =
  sig
    val get_all_modifiers: Proof.state -> modifiers
    val meth_name_n_modifiers_to_logtac_on_state:
       string -> modifiers -> Proof.state Dynamic_Utils.logtac
    val meth_name_n_modifiers_to_nontac_on_state:
       string -> modifiers -> Proof.state Dynamic_Utils.nontac
    val meth_name_n_modifiers_to_stttac_on_state:
       string -> modifiers -> Proof.state Dynamic_Utils.stttac
    type modifier
    type modifiers = modifier list
    val mods_to_string: modifiers -> string
    val reordered_mods: modifiers -> modifiers list
  end
functor mk_Dynamic_Tactic_Generator (Seed: DYNAMIC_TACTIC_GENERATOR_SEED): 
  DYNAMIC_TACTIC_GENERATOR
signature DYNAMIC_TACTIC =
  sig
    val get_state_stttacs:
       Proof.state -> Proof.state Dynamic_Utils.stttac Seq.seq
  end
signature DYNAMIC_TACTIC_GENERATION =
  sig
    val auto: get_stttacs
    val blast: get_stttacs
    val case_tac: get_stttacs
    val cases: get_stttacs
    val clarsimp: get_stttacs
    val coinduction: get_stttacs
    val erule: get_stttacs
    val fastforce: get_stttacs
    type get_stttacs =
       Proof.state -> Proof.state Dynamic_Utils.stttac Seq.seq
    val induct: get_stttacs
    val induct_tac: get_stttacs
    val rule: get_stttacs
    val simp: get_stttacs
  end
structure Dynamic_Tactic_Generation:
  sig
    structure Classical_Seed: DYNAMIC_TACTIC_GENERATOR_SEED
    structure Dynamic_Auto: DYNAMIC_TACTIC
    structure Dynamic_Blast: DYNAMIC_TACTIC
    structure Dynamic_Case_Tac: DYNAMIC_TACTIC
    structure Dynamic_Cases: DYNAMIC_TACTIC
    structure Dynamic_Clarsimp: DYNAMIC_TACTIC
    structure Dynamic_Coinduction: DYNAMIC_TACTIC
    structure Dynamic_Erule: DYNAMIC_TACTIC
    structure Dynamic_Fastforce: DYNAMIC_TACTIC
    structure Dynamic_Induct: DYNAMIC_TACTIC
    structure Dynamic_Induct_Tac: DYNAMIC_TACTIC
    structure Dynamic_Rule: DYNAMIC_TACTIC
    structure Dynamic_Simp: DYNAMIC_TACTIC
    structure Rule_Seed_Base:
      sig
        val get_name: modifier -> string
        val get_names: modifier list -> string list
        datatype modifier = Rule of string
        type modifiers = modifier list
        val mods_to_string: modifiers -> string
        val order: modifiers -> modifiers
        val reordered_mods: modifiers -> modifiers list
      end
    val auto: Proof.state -> Proof.state Dynamic_Utils.stttac Seq.seq
    val blast: Proof.state -> Proof.state Dynamic_Utils.stttac Seq.seq
    val case_tac: Proof.state -> Proof.state Dynamic_Utils.stttac Seq.seq
    val cases: Proof.state -> Proof.state Dynamic_Utils.stttac Seq.seq
    val clarsimp: Proof.state -> Proof.state Dynamic_Utils.stttac Seq.seq
    val coinduction: Proof.state -> Proof.state Dynamic_Utils.stttac Seq.seq
    val erule: Proof.state -> Proof.state Dynamic_Utils.stttac Seq.seq
    val fastforce: Proof.state -> Proof.state Dynamic_Utils.stttac Seq.seq
    type get_stttacs =
       Proof.state -> Proof.state Dynamic_Utils.stttac Seq.seq
    val induct: Proof.state -> Proof.state Dynamic_Utils.stttac Seq.seq
    val induct_tac: Proof.state -> Proof.state Dynamic_Utils.stttac Seq.seq
    val rule: Proof.state -> Proof.state Dynamic_Utils.stttac Seq.seq
    val simp: Proof.state -> Proof.state Dynamic_Utils.stttac Seq.seq
  end
### theory "HOL-Library.Set_Algebras"
### 0.211s elapsed time, 0.828s cpu time, 0.061s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ExampleMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.341s elapsed time, 1.333s cpu time, 0.099s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ExampleMoreTemplates" via "Draft.ExtrEqs")
signature TYP = sig type typ end
signature MONOID_MIN =
  sig
    val mappend: monoid_min -> monoid_min -> monoid_min
    val mempty: monoid_min
    type monoid_min
  end
signature MONOID =
  sig
    val mappend: monoid_min -> monoid_min -> monoid_min
    val mconcad: monoid list -> monoid
    val mempty: monoid_min
    type monoid
    type monoid_min
    type typ
  end
functor mk_Monoid (Min: MONOID_MIN): MONOID
signature FUNCTOR_MIN =
  sig val fmap: ('a -> 'b) -> 'a functo -> 'b functo type 'a functo end
signature FUNCTOR =
  sig
    val <$ : 'a * 'b functo -> 'a functo
    val <$> : ('a -> 'b) * 'a functo -> 'b functo
    val fmap: ('a -> 'b) -> 'a functo -> 'b functo
    type 'a functo
    val void: 'a functo -> unit functo
  end
functor mk_Functor (Min: FUNCTOR_MIN): FUNCTOR
signature APPLICATIVE_MIN =
  sig
    val <*> : ('a -> 'b) applicative * 'a applicative -> 'b applicative
    type 'a applicative
    val pure: 'a -> 'a applicative
  end
functor applicative_Min_to_Functor_Min (Min: APPLICATIVE_MIN): FUNCTOR_MIN
signature APPLICATIVE =
  sig
    val *> : 'a applicative * 'b applicative -> 'b applicative
    val <$ : 'a * 'b functo -> 'a functo
    val <$> : ('a -> 'b) * 'a functo -> 'b functo
    val <* : 'a applicative * 'b applicative -> 'a applicative
    val <**> : 'a applicative * ('a -> 'b) applicative -> 'b applicative
    val <*> : ('a -> 'b) applicative * 'a applicative -> 'b applicative
    type 'a applicative
    val fmap: ('a -> 'b) -> 'a functo -> 'b functo
    type 'a functo
    val liftA: ('a -> 'b) -> 'a applicative -> 'b applicative
    val liftA2:
       ('a -> 'b -> 'c) ->
         'a applicative -> 'b applicative -> 'c applicative
    val liftA3:
       ('a -> 'b -> 'c -> 'd) ->
         'a applicative ->
           'b applicative -> 'c applicative -> 'd applicative
    val pure: 'a -> 'a applicative
    val void: 'a functo -> unit functo
  end
functor mk_Applicative (Min: APPLICATIVE_MIN): APPLICATIVE
signature MONAD_MIN =
  sig
    val bind: 'a monad -> ('a -> 'b monad) -> 'b monad
    type 'a monad
    val return: 'a -> 'a monad
  end
functor monad_Min_to_Applicative_Min (Min: MONAD_MIN): APPLICATIVE_MIN
signature MONAD =
  sig
    val *> : 'a applicative * 'b applicative -> 'b applicative
    val <$ : 'a * 'b functo -> 'a functo
    val <$> : ('a -> 'b) * 'a functo -> 'b functo
    val <* : 'a applicative * 'b applicative -> 'a applicative
    val <**> : 'a applicative * ('a -> 'b) applicative -> 'b applicative
    val <*> : ('a -> 'b) applicative * 'a applicative -> 'b applicative
    val <=< : ('a -> 'b monad) * ('c -> 'a monad) -> 'c -> 'b monad
    val =<< : ('a -> 'b monad) * 'a monad -> 'b monad
    val >=> : ('a -> 'b monad) * ('b -> 'c monad) -> 'a -> 'c monad
    val >> : 'a monad * 'b monad -> 'b monad
    val >>= : 'a monad * ('a -> 'b monad) -> 'b monad
    type 'a applicative
    val bind: 'a monad -> ('a -> 'b monad) -> 'b monad
    val comp: ('a -> 'b monad) -> ('b -> 'c monad) -> 'a -> 'c monad
    val fail: string -> 'a monad
    val filterM: ('a -> bool monad) -> 'a list -> 'a list monad
    val fmap: ('a -> 'b) -> 'a functo -> 'b functo
    val forever: 'a monad -> 'b monad
    type 'a functo
    val join: 'a monad monad -> 'a monad
    val liftA: ('a -> 'b) -> 'a applicative -> 'b applicative
    val liftA2:
       ('a -> 'b -> 'c) ->
         'a applicative -> 'b applicative -> 'c applicative
    val liftA3:
       ('a -> 'b -> 'c -> 'd) ->
         'a applicative ->
           'b applicative -> 'c applicative -> 'd applicative
    val liftM: ('a -> 'b) -> 'a monad -> 'b monad
    type 'a monad
    val pure: 'a -> 'a applicative
    val return: 'a -> 'a monad
    val void: 'a functo -> unit functo
  end
functor mk_Monad (Min: MONAD_MIN): MONAD
signature ALTERNATIVE_MIN =
  sig
    val <|> : 'a alternative * 'a alternative -> 'a alternative
    val alt_pure: 'a -> 'a alternative
    val alt_seq: ('a -> 'b) alternative * 'a alternative -> 'b alternative
    type 'a alternative
    val empty: 'a alternative
  end
functor alternative_Min_to_Applictive_Min (
  Alternative_Min: ALTERNATIVE_MIN): 
  APPLICATIVE_MIN
signature ALTERNATIVE =
  sig
    val *> : 'a applicative * 'b applicative -> 'b applicative
    val <$ : 'a * 'b functo -> 'a functo
    val <$> : ('a -> 'b) * 'a functo -> 'b functo
    val <* : 'a applicative * 'b applicative -> 'a applicative
    val <**> : 'a applicative * ('a -> 'b) applicative -> 'b applicative
    val <*> : ('a -> 'b) applicative * 'a applicative -> 'b applicative
    val <|> : 'a alternative * 'a alternative -> 'a alternative
    val alt_pure: 'a -> 'a alternative
    val alt_seq: ('a -> 'b) alternative * 'a alternative -> 'b alternative
    type 'a alternative
    type 'a applicative
    val empty: 'a alternative
    val fmap: ('a -> 'b) -> 'a functo -> 'b functo
    type 'a functo
    val liftA: ('a -> 'b) -> 'a applicative -> 'b applicative
    val liftA2:
       ('a -> 'b -> 'c) ->
         'a applicative -> 'b applicative -> 'c applicative
    val liftA3:
       ('a -> 'b -> 'c -> 'd) ->
         'a applicative ->
           'b applicative -> 'c applicative -> 'd applicative
    val many: 'a alternative -> 'a list alternative
    val optional: 'a alternative -> 'a option alternative
    val pure: 'a -> 'a applicative
    val some: 'a alternative -> 'a list alternative
    val void: 'a functo -> unit functo
  end
functor mk_Alternative (Alternative_Core: ALTERNATIVE_MIN): ALTERNATIVE
signature MONAD_0PLUS_MIN =
  sig
    val bind: 'a monad -> ('a -> 'b monad) -> 'b monad
    type 'a monad
    val mplus: 'a monad * 'a monad -> 'a monad
    val mzero: 'a monad
    val return: 'a -> 'a monad
  end
functor monad0plus_Min_to_Alternative_min (M0p_Min: MONAD_0PLUS_MIN): 
  ALTERNATIVE_MIN
signature MONAD_0PLUS =
  sig
    val *> : 'a applicative * 'b applicative -> 'b applicative
    val <$ : 'a * 'b functo -> 'a functo
    val <$> : ('a -> 'b) * 'a functo -> 'b functo
    val <* : 'a applicative * 'b applicative -> 'a applicative
    val <**> : 'a applicative * ('a -> 'b) applicative -> 'b applicative
    val <*> : ('a -> 'b) applicative * 'a applicative -> 'b applicative
    val <=< : ('a -> 'b monad) * ('c -> 'a monad) -> 'c -> 'b monad
    val <|> : 'a alternative * 'a alternative -> 'a alternative
    val =<< : ('a -> 'b monad) * 'a monad -> 'b monad
    val >=> : ('a -> 'b monad) * ('b -> 'c monad) -> 'a -> 'c monad
    val >> : 'a monad * 'b monad -> 'b monad
    val >>= : 'a monad * ('a -> 'b monad) -> 'b monad
    val alt_pure: 'a -> 'a alternative
    val alt_seq: ('a -> 'b) alternative * 'a alternative -> 'b alternative
    type 'a alternative
    type 'a applicative
    val bind: 'a monad -> ('a -> 'b monad) -> 'b monad
    val comp: ('a -> 'b monad) -> ('b -> 'c monad) -> 'a -> 'c monad
    val empty: 'a alternative
    val fail: string -> 'a monad
    val filterM: ('a -> bool monad) -> 'a list -> 'a list monad
    val fmap: ('a -> 'b) -> 'a functo -> 'b functo
    val forever: 'a monad -> 'b monad
    type 'a functo
    val guard: bool -> unit monad
    val join: 'a monad monad -> 'a monad
    val liftA: ('a -> 'b) -> 'a applicative -> 'b applicative
    val liftA2:
       ('a -> 'b -> 'c) ->
         'a applicative -> 'b applicative -> 'c applicative
    val liftA3:
       ('a -> 'b -> 'c -> 'd) ->
         'a applicative ->
           'b applicative -> 'c applicative -> 'd applicative
    val liftM: ('a -> 'b) -> 'a monad -> 'b monad
    val many: 'a alternative -> 'a list alternative
    type 'a monad
    val mplus: 'a monad * 'a monad -> 'a monad
    val msum: 'a monad Seq.seq -> 'a monad
    val mzero: 'a monad
    val optional: 'a alternative -> 'a option alternative
    val pure: 'a -> 'a applicative
    val return: 'a -> 'a monad
    val some: 'a alternative -> 'a list alternative
    val void: 'a functo -> unit functo
  end
functor mk_Monad_0Plus (Min: MONAD_0PLUS_MIN): MONAD_0PLUS
signature TMONAD_MIN =
  sig
    structure Base: MONAD_MIN
    val bind: 'a monad -> ('a -> 'b monad) -> 'b monad
    val lift: 'a Base.monad -> 'a monad
    type 'a monad
    val return: 'a -> 'a monad
  end
signature TMONAD =
  sig
    val *> : 'a applicative * 'b applicative -> 'b applicative
    val <$ : 'a * 'b functo -> 'a functo
    val <$> : ('a -> 'b) * 'a functo -> 'b functo
    val <* : 'a applicative * 'b applicative -> 'a applicative
    val <**> : 'a applicative * ('a -> 'b) applicative -> 'b applicative
    val <*> : ('a -> 'b) applicative * 'a applicative -> 'b applicative
    val <=< : ('a -> 'b monad) * ('c -> 'a monad) -> 'c -> 'b monad
    val =<< : ('a -> 'b monad) * 'a monad -> 'b monad
    val >=> : ('a -> 'b monad) * ('b -> 'c monad) -> 'a -> 'c monad
    val >> : 'a monad * 'b monad -> 'b monad
    val >>= : 'a monad * ('a -> 'b monad) -> 'b monad
    structure Base: MONAD
    type 'a applicative
    val bind: 'a monad -> ('a -> 'b monad) -> 'b monad
    val comp: ('a -> 'b monad) -> ('b -> 'c monad) -> 'a -> 'c monad
    val fail: string -> 'a monad
    val filterM: ('a -> bool monad) -> 'a list -> 'a list monad
    val fmap: ('a -> 'b) -> 'a functo -> 'b functo
    val forever: 'a monad -> 'b monad
    type 'a functo
    val join: 'a monad monad -> 'a monad
    val lift: 'a Base.monad -> 'a monad
    val liftA: ('a -> 'b) -> 'a applicative -> 'b applicative
    val liftA2:
       ('a -> 'b -> 'c) ->
         'a applicative -> 'b applicative -> 'c applicative
    val liftA3:
       ('a -> 'b -> 'c -> 'd) ->
         'a applicative ->
           'b applicative -> 'c applicative -> 'd applicative
    val liftM: ('a -> 'b) -> 'a monad -> 'b monad
    type 'a monad
    val pure: 'a -> 'a applicative
    val return: 'a -> 'a monad
    val void: 'a functo -> unit functo
  end
functor mk_TMonad (Min: TMONAD_MIN): TMONAD
signature TMONAD_0PLUS_MIN =
  sig
    structure Base: MONAD_0PLUS_MIN
    val bind: 'a monad -> ('a -> 'b monad) -> 'b monad
    val lift: 'a Base.monad -> 'a monad
    type 'a monad
    val mplus: 'a monad * 'a monad -> 'a monad
    val mzero: 'a monad
    val return: 'a -> 'a monad
  end
signature TMONAD_0PLUS =
  sig
    val *> : 'a applicative * 'b applicative -> 'b applicative
    val <$ : 'a * 'b functo -> 'a functo
    val <$> : ('a -> 'b) * 'a functo -> 'b functo
    val <* : 'a applicative * 'b applicative -> 'a applicative
    val <**> : 'a applicative * ('a -> 'b) applicative -> 'b applicative
    val <*> : ('a -> 'b) applicative * 'a applicative -> 'b applicative
    val <=< : ('a -> 'b monad) * ('c -> 'a monad) -> 'c -> 'b monad
    val <|> : 'a alternative * 'a alternative -> 'a alternative
    val =<< : ('a -> 'b monad) * 'a monad -> 'b monad
    val >=> : ('a -> 'b monad) * ('b -> 'c monad) -> 'a -> 'c monad
    val >> : 'a monad * 'b monad -> 'b monad
    val >>= : 'a monad * ('a -> 'b monad) -> 'b monad
    structure Base: MONAD_0PLUS
    val alt_pure: 'a -> 'a alternative
    val alt_seq: ('a -> 'b) alternative * 'a alternative -> 'b alternative
    type 'a alternative
    type 'a applicative
    val bind: 'a monad -> ('a -> 'b monad) -> 'b monad
    val comp: ('a -> 'b monad) -> ('b -> 'c monad) -> 'a -> 'c monad
    val empty: 'a alternative
    val fail: string -> 'a monad
    val filterM: ('a -> bool monad) -> 'a list -> 'a list monad
    val fmap: ('a -> 'b) -> 'a functo -> 'b functo
    val forever: 'a monad -> 'b monad
    type 'a functo
    val guard: bool -> unit monad
    val join: 'a monad monad -> 'a monad
    val lift: 'a Base.monad -> 'a monad
    val liftA: ('a -> 'b) -> 'a applicative -> 'b applicative
    val liftA2:
       ('a -> 'b -> 'c) ->
         'a applicative -> 'b applicative -> 'c applicative
    val liftA3:
       ('a -> 'b -> 'c -> 'd) ->
         'a applicative ->
           'b applicative -> 'c applicative -> 'd applicative
    val liftM: ('a -> 'b) -> 'a monad -> 'b monad
    val many: 'a alternative -> 'a list alternative
    type 'a monad
    val mplus: 'a monad * 'a monad -> 'a monad
    val msum: 'a monad Seq.seq -> 'a monad
    val mzero: 'a monad
    val optional: 'a alternative -> 'a option alternative
    val pure: 'a -> 'a applicative
    val return: 'a -> 'a monad
    val some: 'a alternative -> 'a list alternative
    val void: 'a functo -> unit functo
  end
functor mk_TMonad_0Plus (Min: TMONAD_0PLUS_MIN): TMONAD_0PLUS
### ML warning (line 170 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 187 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 309 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
signature MATCH_METHOD =
  sig
    val focus_params: Proof.context -> term list
    val focus_schematics: Proof.context -> Envir.tenv
  end
structure Match_Method: MATCH_METHOD
structure Seq_M0P_Min: MONAD_0PLUS_MIN
structure Seq_M0P: MONAD_0PLUS
structure List_M0P_Min: MONAD_0PLUS_MIN
structure ListCC: MONAD_0PLUS
structure Option_M0P_Min: MONAD_0PLUS_MIN
structure Option_M0P: MONAD_0PLUS
structure Strings_Min: MONOID_MIN
structure Strings: MONOID
signature CONS_PROD =
  sig
    type 'a cons_prod = 'a left_cons * 'a right_cons
    type 'a left_cons
    type 'a right_cons
  end
functor mk_ConsProdMonadMin (
  sig structure Left: MONAD_MIN structure Right: MONAD_MIN end): 
  MONAD_MIN
structure ListOptionConsProdMonadMin: MONAD_MIN
structure ListOptionConsProdMonad: MONAD
val it = (["foo"], SOME "foo"): string ListOptionConsProdMonadMin.monad
functor mk_stateMT_M0P_Min (
  sig structure Base: MONAD_0PLUS_MIN structure State: TYP end): 
  TMONAD_0PLUS_MIN
functor mk_state_M0PT (
  sig structure Base: MONAD_0PLUS_MIN structure Log: TYP end): 
  TMONAD_0PLUS
functor mk_StateM_Min (State: TYP): MONAD_MIN
functor mk_StateM (State: TYP): MONAD
signature TSTATE_MONAD_0PLUS_MIN =
  sig
    val *> : 'a applicative * 'b applicative -> 'b applicative
    val <$ : 'a * 'b functo -> 'a functo
    val <$> : ('a -> 'b) * 'a functo -> 'b functo
    val <* : 'a applicative * 'b applicative -> 'a applicative
    val <**> : 'a applicative * ('a -> 'b) applicative -> 'b applicative
    val <*> : ('a -> 'b) applicative * 'a applicative -> 'b applicative
    val <=< : ('a -> 'b monad) * ('c -> 'a monad) -> 'c -> 'b monad
    val <|> : 'a alternative * 'a alternative -> 'a alternative
    val =<< : ('a -> 'b monad) * 'a monad -> 'b monad
    val >=> : ('a -> 'b monad) * ('b -> 'c monad) -> 'a -> 'c monad
    val >> : 'a monad * 'b monad -> 'b monad
    val >>= : 'a monad * ('a -> 'b monad) -> 'b monad
    structure Base: MONAD_0PLUS
    val alt_pure: 'a -> 'a alternative
    val alt_seq: ('a -> 'b) alternative * 'a alternative -> 'b alternative
    type 'a alternative
    type 'a applicative
    val bind: 'a monad -> ('a -> 'b monad) -> 'b monad
    val comp: ('a -> 'b monad) -> ('b -> 'c monad) -> 'a -> 'c monad
    val empty: 'a alternative
    val fail: string -> 'a monad
    val filterM: ('a -> bool monad) -> 'a list -> 'a list monad
    val fmap: ('a -> 'b) -> 'a functo -> 'b functo
    val forever: 'a monad -> 'b monad
    type 'a functo
    val guard: bool -> unit monad
    val join: 'a monad monad -> 'a monad
    val lift: 'a Base.monad -> 'a monad
    val liftA: ('a -> 'b) -> 'a applicative -> 'b applicative
    val liftA2:
       ('a -> 'b -> 'c) ->
         'a applicative -> 'b applicative -> 'c applicative
    val liftA3:
       ('a -> 'b -> 'c -> 'd) ->
         'a applicative ->
           'b applicative -> 'c applicative -> 'd applicative
    val liftM: ('a -> 'b) -> 'a monad -> 'b monad
    val many: 'a alternative -> 'a list alternative
    type 'a monad
    val mplus: 'a monad * 'a monad -> 'a monad
    val msum: 'a monad Seq.seq -> 'a monad
    val mzero: 'a monad
    val optional: 'a alternative -> 'a option alternative
    val pure: 'a -> 'a applicative
    val return: 'a -> 'a monad
    val some: 'a alternative -> 'a list alternative
    val update: ('a -> 'a) -> 'a -> ('a * 'a) Base.monad
    val void: 'a functo -> unit functo
  end
signature TSTATE_MONAD_0PLUS =
  sig
    val *> : 'a applicative * 'b applicative -> 'b applicative
    val <$ : 'a * 'b functo -> 'a functo
    val <$> : ('a -> 'b) * 'a functo -> 'b functo
    val <* : 'a applicative * 'b applicative -> 'a applicative
    val <**> : 'a applicative * ('a -> 'b) applicative -> 'b applicative
    val <*> : ('a -> 'b) applicative * 'a applicative -> 'b applicative
    val <=< : ('a -> 'b monad) * ('c -> 'a monad) -> 'c -> 'b monad
    val <|> : 'a alternative * 'a alternative -> 'a alternative
    val =<< : ('a -> 'b monad) * 'a monad -> 'b monad
    val >=> : ('a -> 'b monad) * ('b -> 'c monad) -> 'a -> 'c monad
    val >> : 'a monad * 'b monad -> 'b monad
    val >>= : 'a monad * ('a -> 'b monad) -> 'b monad
    structure Base: MONAD_0PLUS
    val alt_pure: 'a -> 'a alternative
    val alt_seq: ('a -> 'b) alternative * 'a alternative -> 'b alternative
    type 'a alternative
    type 'a applicative
    val bind: 'a monad -> ('a -> 'b monad) -> 'b monad
    val comp: ('a -> 'b monad) -> ('b -> 'c monad) -> 'a -> 'c monad
    val empty: 'a alternative
    val fail: string -> 'a monad
    val fetch: 'a -> ('a * 'a) Base.monad
    val filterM: ('a -> bool monad) -> 'a list -> 'a list monad
    val fmap: ('a -> 'b) -> 'a functo -> 'b functo
    val forever: 'a monad -> 'b monad
    type 'a functo
    val guard: bool -> unit monad
    val join: 'a monad monad -> 'a monad
    val lift: 'a Base.monad -> 'a monad
    val liftA: ('a -> 'b) -> 'a applicative -> 'b applicative
    val liftA2:
       ('a -> 'b -> 'c) ->
         'a applicative -> 'b applicative -> 'c applicative
    val liftA3:
       ('a -> 'b -> 'c -> 'd) ->
         'a applicative ->
           'b applicative -> 'c applicative -> 'd applicative
    val liftM: ('a -> 'b) -> 'a monad -> 'b monad
    val many: 'a alternative -> 'a list alternative
    type 'a monad
    val mplus: 'a monad * 'a monad -> 'a monad
    val msum: 'a monad Seq.seq -> 'a monad
    val mzero: 'a monad
    val optional: 'a alternative -> 'a option alternative
    val pure: 'a -> 'a applicative
    val return: 'a -> 'a monad
    val set: 'a -> 'a -> ('a * 'a) Base.monad
    val some: 'a alternative -> 'a list alternative
    val update: ('a -> 'a) -> 'a -> ('a * 'a) Base.monad
    val void: 'a functo -> unit functo
  end
functor mk_TState_Monad_0Plus_Min (
  sig structure Base: MONAD_0PLUS_MIN structure State: TYP end): 
  TSTATE_MONAD_0PLUS_MIN
functor mk_TState_Monad_0Plus (
  sig structure Base: MONAD_0PLUS_MIN structure State: TYP end): 
  TSTATE_MONAD_0PLUS
val method_evaluate = fn: Method.text -> Proof.context -> thm list -> tactic
### theory "HOL-Eisbach.Eisbach"
### 0.456s elapsed time, 1.768s cpu time, 0.159s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ExampleMoreTemplates" via "Draft.ExtrEqs")
signature MONADIC_INTERPRETER_CORE =
  sig
    val *> : 'a applicative * 'b applicative -> 'b applicative
    val <$ : 'a * 'b functo -> 'a functo
    val <$> : ('a -> 'b) * 'a functo -> 'b functo
    val <* : 'a applicative * 'b applicative -> 'a applicative
    val <**> : 'a applicative * ('a -> 'b) applicative -> 'b applicative
    val <*> : ('a -> 'b) applicative * 'a applicative -> 'b applicative
    val <=< : ('a -> 'b monad) * ('c -> 'a monad) -> 'c -> 'b monad
    val <|> : 'a alternative * 'a alternative -> 'a alternative
    val =<< : ('a -> 'b monad) * 'a monad -> 'b monad
    val >=> : ('a -> 'b monad) * ('b -> 'c monad) -> 'a -> 'c monad
    val >> : 'a monad * 'b monad -> 'b monad
    val >>= : 'a monad * ('a -> 'b monad) -> 'b monad
    structure Base: MONAD_0PLUS
    val alt_pure: 'a -> 'a alternative
    val alt_seq: ('a -> 'b) alternative * 'a alternative -> 'b alternative
    type 'a alternative
    type 'a applicative
    val bind: 'a monad -> ('a -> 'b monad) -> 'b monad
    datatype catom_str = CDyn of cprim_str | CSttc of cstatic
    val comp: ('a -> 'b monad) -> ('b -> 'c monad) -> 'a -> 'c monad
    datatype core_str
    =
         CAlt of core_str * core_str
       | CAtom of catom_str
       | CFail
       | CFails of core_str
       | COr of core_str * core_str
       | CRepBT of core_str
       | CRepNB of core_str
       | CSeq of core_str * core_str
       | CSkip
       | CStrategic of cstrategic * core_str list
    datatype cprim_str
    =
         CAuto
       | CBlast
       | CCaseTac
       | CCases
       | CClarsimp
       | CCoinduction
       | CErule
       | CFastforce
       | CInduct
       | CInductTac
       | CRule
       | CSimp
    datatype cspecial
    =
         CDefer
       | CIntroClasses
       | CIsSolved
       | CNormalization
       | CSubgoal
       | CTransfer
    datatype cstatic
    =
         CPrim of cprim_str
       | CSpec of cspecial
       | CSubt of csubtool
       | CUser of string
    datatype cstrategic
    = CCut of int | CPAlt | CPOr | CPSeq | CPSeq1 | CRepeatN | CSolve1
    datatype csubtool = CHammer | CNitpick | CQuickcheck
    val empty: 'a alternative
    val fail: string -> 'a monad
    val filterM: ('a -> bool monad) -> 'a list -> 'a list monad
    val fmap: ('a -> 'b) -> 'a functo -> 'b functo
    val forever: 'a monad -> 'b monad
    type 'a functo
    val guard: bool -> unit monad
    val interpret: 'a interpret
    type 'a interpret = 'a params -> core_str -> 'a stttac
    val join: 'a monad monad -> 'a monad
    val lift: 'a Base.monad -> 'a monad
    val liftA: ('a -> 'b) -> 'a applicative -> 'b applicative
    val liftA2:
       ('a -> 'b -> 'c) ->
         'a applicative -> 'b applicative -> 'c applicative
    val liftA3:
       ('a -> 'b -> 'c -> 'd) ->
         'a applicative ->
           'b applicative -> 'c applicative -> 'd applicative
    val liftM: ('a -> 'b) -> 'a monad -> 'b monad
    val many: 'a alternative -> 'a list alternative
    type 'a monad
    val mplus: 'a monad * 'a monad -> 'a monad
    val msum: 'a monad Seq.seq -> 'a monad
    val mzero: 'a monad
    val optional: 'a alternative -> 'a option alternative
    type 'a params
    val pure: 'a -> 'a applicative
    val return: 'a -> 'a monad
    val some: 'a alternative -> 'a list alternative
    type 'a stttac
    val void: 'a functo -> unit functo
  end
functor mk_Monadic_Interpreter_Core (Mt0p: TMONAD_0PLUS): 
  MONADIC_INTERPRETER_CORE
functor mk_Monadic_Interpreter_Core_from_Monad_0plus_Min (
  sig structure Log: MONOID structure M0P_Min: MONAD_0PLUS_MIN end): 
  MONADIC_INTERPRETER_CORE
structure Log_Min: MONOID_MIN
structure Log: MONOID
structure Monadic_Interpreter_Core: MONADIC_INTERPRETER_CORE
signature MONADIC_INTERPRETER =
  sig
    val desugar: str -> Monadic_Interpreter_Core.core_str
    datatype str
    =
         Alt of str Seq.seq
       | Auto
       | Blast
       | CaseTac
       | Cases
       | Clarsimp
       | Coinduction
       | Cut of int * str
       | Defer
       | Erule
       | Fail
       | Fails of str
       | Fastforce
       | Hammer
       | Induct
       | InductTac
       | IntroClasses
       | IsSolved
       | Nitpick
       | ...
  end
structure Monadic_Interpreter: MONADIC_INTERPRETER
signature MONADIC_INTERPRETER_PARAMS =
  sig
    val eval_para: eval_para
    type eval_para
    val eval_prim: eval_prim
    type eval_prim
    val eval_strategic: eval_strategic
    type eval_strategic
    val iddfc: iddfc
    type iddfc
    val m_equal: m_equal
    type m_equal
  end
structure Monadic_Interpreter_Params: MONADIC_INTERPRETER_PARAMS
signature MONADIC_PROVER =
  sig
    val *> : 'a applicative * 'b applicative -> 'b applicative
    val <$ : 'a * 'b functo -> 'a functo
    val <$> : ('a -> 'b) * 'a functo -> 'b functo
    val <* : 'a applicative * 'b applicative -> 'a applicative
    val <**> : 'a applicative * ('a -> 'b) applicative -> 'b applicative
    val <*> : ('a -> 'b) applicative * 'a applicative -> 'b applicative
    val <=< : ('a -> 'b monad) * ('c -> 'a monad) -> 'c -> 'b monad
    val <|> : 'a alternative * 'a alternative -> 'a alternative
    val =<< : ('a -> 'b monad) * 'a monad -> 'b monad
    val >=> : ('a -> 'b monad) * ('b -> 'c monad) -> 'a -> 'c monad
    val >> : 'a monad * 'b monad -> 'b monad
    val >>= : 'a monad * ('a -> 'b monad) -> 'b monad
    structure Base: MONAD_0PLUS
    val alt_pure: 'a -> 'a alternative
    val alt_seq: ('a -> 'b) alternative * 'a alternative -> 'b alternative
    type 'a alternative
    type 'a applicative
    val bind: 'a monad -> ('a -> 'b monad) -> 'b monad
    datatype catom_str = CDyn of cprim_str | CSttc of cstatic
    val comp: ('a -> 'b monad) -> ('b -> 'c monad) -> 'a -> 'c monad
    datatype core_str
    =
         CAlt of core_str * core_str
       | CAtom of catom_str
       | CFail
       | CFails of core_str
       | COr of core_str * core_str
       | CRepBT of core_str
       | CRepNB of core_str
       | CSeq of core_str * core_str
       | CSkip
       | CStrategic of cstrategic * core_str list
    datatype cprim_str
    =
         CAuto
       | CBlast
       | CCaseTac
       | CCases
       | CClarsimp
       | CCoinduction
       | CErule
       | CFastforce
       | CInduct
       | CInductTac
       | CRule
       | CSimp
    datatype cspecial
    =
         CDefer
       | CIntroClasses
       | CIsSolved
       | CNormalization
       | CSubgoal
       | CTransfer
    datatype cstatic
    =
         CPrim of cprim_str
       | CSpec of cspecial
       | CSubt of csubtool
       | CUser of string
    datatype cstrategic
    = CCut of int | CPAlt | CPOr | CPSeq | CPSeq1 | CRepeatN | CSolve1
    datatype csubtool = CHammer | CNitpick | CQuickcheck
    val desugar: str -> Monadic_Interpreter_Core.core_str
    val empty: 'a alternative
    val eval_para: eval_para
    type eval_para
    val eval_prim: eval_prim
    type eval_prim
    val eval_strategic: eval_strategic
    type eval_strategic
    val fail: string -> 'a monad
    val filterM: ('a -> bool monad) -> 'a list -> 'a list monad
    val fmap: ('a -> 'b) -> 'a functo -> 'b functo
    val forever: 'a monad -> 'b monad
    type 'a functo
    val guard: bool -> unit monad
    val iddfc: iddfc
    type iddfc
    val interpret: 'a interpret
    type 'a interpret = 'a params -> core_str -> 'a stttac
    val join: 'a monad monad -> 'a monad
    val lift: 'a Base.monad -> 'a monad
    val liftA: ('a -> 'b) -> 'a applicative -> 'b applicative
    val liftA2:
       ('a -> 'b -> 'c) ->
         'a applicative -> 'b applicative -> 'c applicative
    val liftA3:
       ('a -> 'b -> 'c -> 'd) ->
         'a applicative ->
           'b applicative -> 'c applicative -> 'd applicative
    val liftM: ('a -> 'b) -> 'a monad -> 'b monad
    val m_equal: m_equal
    type m_equal
    val many: 'a alternative -> 'a list alternative
    type 'a monad
    val mplus: 'a monad * 'a monad -> 'a monad
    val msum: 'a monad Seq.seq -> 'a monad
    val mzero: 'a monad
    val optional: 'a alternative -> 'a option alternative
    type 'a params
    val pure: 'a -> 'a applicative
    val return: 'a -> 'a monad
    val some: 'a alternative -> 'a list alternative
    datatype str
    =
         Alt of str Seq.seq
       | Auto
       | Blast
       | CaseTac
       | Cases
       | Clarsimp
       | Coinduction
       | Cut of int * str
       | Defer
       | Erule
       | Fail
       | Fails of str
       | Fastforce
       | Hammer
       | Induct
       | InductTac
       | IntroClasses
       | IsSolved
       | Nitpick
       | ...
    type 'a stttac
    val void: 'a functo -> unit functo
  end
structure Monadic_Prover: MONADIC_PROVER
signature PARSER_COMBINATOR =
  sig
    val +++ : 'a parser * 'a parser -> 'a parser
    val >>= : 'a parser * ('a -> 'b parser) -> 'b parser
    val alphanum: string parser
    val bind: 'a parser -> ('a -> 'b parser) -> 'b parser
    val bracket: 'a parser -> 'b parser -> 'c parser -> 'b parser
    val comment: unit parser
    val digit: string parser
    val first: 'a parser -> 'a parser
    val ident: string parser
    val int: int parser
    val ints: int Seq.seq parser
    val item: string parser
    val junk: unit parser
    val letter: string parser
    val lower: string parser
    val many: 'a parser -> 'a Seq.seq parser
    val many1: 'a parser -> 'a Seq.seq parser
    val nat: int parser
    val parse: 'a parser -> 'a parser
    type 'a parser = symbols -> ('a * symbols) Seq.seq
    val plus: 'a parser * 'a parser -> 'a parser
    val result: 'a -> 'a parser
    val sat: (string -> bool) -> string parser
    val sepby: 'a parser * 'b parser -> 'a Seq.seq parser
    val sepby1: 'a parser * 'b parser -> 'a Seq.seq parser
    val spaces: unit parser
    val string: string -> string parser
    val symbol: string -> string parser
    type symbols = string list
    val token: 'a parser -> 'a parser
    val upper: string parser
    val word: string parser
    val zero: 'a parser
  end
structure Parser_Combinator: PARSER_COMBINATOR
signature PSL_PARSER =
  sig
    val invocation_parser: string Parser_Combinator.parser
    val strategy_parser:
       Proof.context ->
         (string * Monadic_Interpreter.str) Parser_Combinator.parser
  end
signature LOOKUP =
  sig val get_str: Proof.context -> string -> Monadic_Prover.str end
functor mk_PSL_Parser (Lookup: LOOKUP): PSL_PARSER
signature PSL_INTERFACE =
  sig
    val activate_isar_interface: unit -> unit
    type strategy
    val try_hard_strategy: Proof.context -> strategy option
    val try_parallel_strategy: Proof.context -> strategy option
  end
structure PSL_Interface: PSL_INTERFACE
val it = (): unit
### theory "Draft.Try_Hard"
### 0.750s elapsed time, 2.963s cpu time, 0.284s GC time
Loading theory "Draft.PSL" (required by "Draft.ExampleMoreTemplates" via "Draft.Example")
### theory "Draft.PSL"
### 0.027s elapsed time, 0.112s cpu time, 0.000s GC time
Loading theory "Draft.Example" (required by "Draft.ExampleMoreTemplates")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Proofs for inductive predicate(s) "foo"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### theory "Draft.Example"
### 0.210s elapsed time, 0.835s cpu time, 0.048s GC time
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.071s elapsed time, 3.891s cpu time, 0.872s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.008s elapsed time, 3.563s cpu time, 0.813s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.890s elapsed time, 4.890s cpu time, 0.967s GC time
Loading theory "Draft.Templates" (required by "Draft.ExampleMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.049s elapsed time, 0.065s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ExampleMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.461s elapsed time, 0.493s cpu time, 0.040s GC time
Loading theory "Draft.ExampleMoreTemplates"
val templateLemmas =
   [("Example.state_safety", "safe_state ?x ?y = True",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_hole 0))]:
   (string * thm * template) list
### theory "Draft.ExampleMoreTemplates"
### 0.285s elapsed time, 0.425s cpu time, 0.064s GC time
val it = (): unit
