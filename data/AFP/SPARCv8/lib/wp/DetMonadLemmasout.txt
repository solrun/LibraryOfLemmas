Loading theory "Draft.Lib" (required by "Draft.DetMonadLemmasMoreTemplates" via "Draft.DetMonadLemmas" via "Draft.DetMonad")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.DetMonadLemmasMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.DetMonadLemmasMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.DetMonadLemmasMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  delete :: "'a => 'a list => 'a list"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  find :: "('a => bool) => 'a list => 'a option"
consts
  theRight :: "'a + 'b => 'b"
consts
  theLeft :: "'a + 'b => 'a"
### theory "HOL-Library.Function_Algebras"
### 0.128s elapsed time, 0.535s cpu time, 0.039s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.DetMonadLemmasMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Draft.Lib"
### 0.160s elapsed time, 0.662s cpu time, 0.039s GC time
Loading theory "Draft.DetMonad" (required by "Draft.DetMonadLemmasMoreTemplates" via "Draft.DetMonadLemmas")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.218s elapsed time, 0.896s cpu time, 0.039s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.DetMonadLemmasMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.329s elapsed time, 1.322s cpu time, 0.134s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.DetMonadLemmasMoreTemplates" via "Draft.ExtrEqs")
consts
  filterM ::
    "('a => 's => (bool * 's) * bool)
     => 'a list => 's => ('a list * 's) * bool"
### theory "Draft.DetMonad"
### 0.468s elapsed time, 1.849s cpu time, 0.189s GC time
Loading theory "Draft.DetMonadLemmas" (required by "Draft.DetMonadLemmasMoreTemplates")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "Draft.DetMonadLemmas"
### 0.190s elapsed time, 0.746s cpu time, 0.148s GC time
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.987s elapsed time, 3.537s cpu time, 0.879s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.044s elapsed time, 3.469s cpu time, 0.824s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.883s elapsed time, 4.962s cpu time, 0.975s GC time
Loading theory "Draft.Templates" (required by "Draft.DetMonadLemmasMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.060s elapsed time, 0.106s cpu time, 0.042s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.DetMonadLemmasMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.447s elapsed time, 0.453s cpu time, 0.000s GC time
Loading theory "Draft.DetMonadLemmasMoreTemplates"
val templateLemmas =
   [("DetMonadLemmas.unless_False", "unless False ?X = ?X",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("DetMonadLemmas.when_True", "when1 True ?X = ?X",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("DetMonadLemmas.gets_to_return", "gets (%s. ?v) = return ?v",
     template_equation
      (template_app (template_hole 1, t_empty),
       template_app (template_hole 0, template_var 0))),
    ("DetMonadLemmas.unless_True", "unless True ?X = return ()",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2), template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("DetMonadLemmas.when_False", "when1 False ?X = return ()",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2), template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("DetMonadLemmas.unlessE_whenE", "unlessE ?P = whenE (~ ?P)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("DetMonadLemmas.unless_when", "unless ?P = when1 (~ ?P)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("DetMonadLemmas.assert_True", "assert True >>= ?f = ?f ()",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 1)),
         template_var 0),
       template_app (template_var 0, template_hole 0))),
    ("DetMonadLemmas.condition_false_triv", "condition (%_. False)
         ?A
         ?B =
       ?B",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, t_empty), template_var 1),
         template_var 0),
       template_var 0)),
    ("DetMonadLemmas.condition_true_triv", "condition (%_. True)
        ?A
        ?B =
      ?A",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, t_empty), template_var 1),
         template_var 0),
       template_var 1)),
    ("DetMonadLemmas.liftE_handleE", "(liftE ?a <handle> ?b) = liftE ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("DetMonadLemmas.liftE_handleE'", "(liftE ?a <handle2> ?b) = liftE ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("DetMonadLemmas.whenE_False_bind", "whenE False ?g >>=E ?f = ?f ()",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1)),
         template_var 0),
       template_app (template_var 0, template_hole 0))),
    ("DetMonadLemmas.when_True_bind", "when1 True ?g >>= ?f = ?g >>= ?f",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("DetMonadLemmas.whenE_True_bind", "whenE True ?g >>=E ?f = ?g >>=E ?f",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("DetMonadLemmas.exec_gets", "(gets ?f >>= ?m) ?s = ?m (?f ?s) ?s",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_var 1, template_app (template_var 2, template_var 0)),
         template_var 0))),
    ("DetMonadLemmas.condition_true", "?P ?s ==> condition ?P
             ?A
             ?B
            ?s =
           ?A ?s",
     template_implication
      ([template_predicate (template_app (template_var 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0),
           template_var 2),
         template_app (template_var 1, template_var 2)))),
    ("DetMonadLemmas.condition_false",
     "~ ?P ?s ==> condition ?P
                    ?A
                    ?B
                   ?s =
                  ?B ?s",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_var 3, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0),
           template_var 2),
         template_app (template_var 0, template_var 2)))),
    ("DetMonadLemmas.K_bind_apply_cong",
     "?f ?st = ?f' ?st' ==> K_bind ?f ?arg ?st = K_bind ?f' ?arg' ?st'",
     template_implication
      ([template_equation
         (template_app (template_var 5, template_var 4),
          template_app (template_var 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 5),
             template_var 1),
           template_var 4),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_var 2)))),
    ("DetMonadLemmas.nested_bind",
     "do y \<leftarrow> ?f;
         return (?g y)
      od >>=
      ?h =
      do y \<leftarrow> ?f;
         ?h (?g y)
      od",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2), t_empty)),
         t_empty),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("DetMonadLemmas.in_gets",
     "((?r, ?s') = fst (gets ?f ?s)) = (?r = ?f ?s & ?s' = ?s)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 3), template_var 2),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_app (template_var 1, template_var 0))),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("DetMonadLemmas.validNF_conjD1",
     "\<lbrace>?P\<rbrace> ?f 
      \<lbrace>%rv s. ?Q rv s & ?Q' rv s\<rbrace>! ==>
      \<lbrace>?P\<rbrace> ?f \<lbrace>?Q\<rbrace>!",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("DetMonadLemmas.validNF_conjD2",
     "\<lbrace>?P\<rbrace> ?f 
      \<lbrace>%rv s. ?Q rv s & ?Q' rv s\<rbrace>! ==>
      \<lbrace>?P\<rbrace> ?f \<lbrace>?Q'\<rbrace>!",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("DetMonadLemmas.condition_split",
     "?P (condition ?C
            ?a
            ?b
           ?s) =
      ((?C ?s --> ?P (?a ?s)) & (~ ?C ?s --> ?P (?b ?s)))",
     template_equation
      (template_app
        (template_var 4,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_var 3, template_var 0)),
             template_app
              (template_var 4,
               template_app (template_var 2, template_var 0)))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app (template_var 3, template_var 0))),
           template_app
            (template_var 4,
             template_app (template_var 1, template_var 0)))))),
    ("DetMonadLemmas.condition_split_asm",
     "?P (condition ?C
            ?a
            ?b
           ?s) =
      (~ (?C ?s & ~ ?P (?a ?s) | ~ ?C ?s & ~ ?P (?b ?s)))",
     template_equation
      (template_app
        (template_var 4,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_var 3, template_var 0)),
               template_app
                (template_hole 2,
                 template_app
                  (template_var 4,
                   template_app (template_var 2, template_var 0))))),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 2,
                 template_app (template_var 3, template_var 0))),
             template_app
              (template_hole 2,
               template_app
                (template_var 4,
                 template_app (template_var 1, template_var 0)))))))),
    ("DetMonadLemmas.when_apply_cong",
     "[| ?C = ?C'; ?s = ?s'; ?C' ==> ?m ?s' = ?m' ?s' |]
      ==> whenE ?C ?m ?s = whenE ?C' ?m' ?s'",
     template_implication
      ([template_equation (template_var 5, template_var 4),
        template_equation (template_var 3, template_var 2),
        template_implication
         ([template_predicate (template_var 4)],
          template_equation
           (template_app (template_var 1, template_var 2),
            template_app (template_var 0, template_var 2)))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 5),
             template_var 1),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 0),
           template_var 2)))),
    ("DetMonadLemmas.unless_apply_cong",
     "[| ?C = ?C'; ?s = ?s'; ~ ?C' ==> ?m ?s' = ?m' ?s' |]
      ==> unlessE ?C ?m ?s = unlessE ?C' ?m' ?s'",
     template_implication
      ([template_equation (template_var 5, template_var 4),
        template_equation (template_var 3, template_var 2),
        template_implication
         ([template_negation (template_predicate (template_var 4))],
          template_equation
           (template_app (template_var 1, template_var 2),
            template_app (template_var 0, template_var 2)))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 5),
             template_var 1),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 0),
           template_var 2)))),
    ("DetMonadLemmas.bind_cong",
     "[| ?f = ?f'; !!v s s'. (v, s') = fst (?f' s) ==> ?g v s' = ?g' v s' |]
      ==> ?f >>= ?g = ?f' >>= ?g'",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("DetMonadLemmas.bindE_cong",
     "[| ?M = ?M';
         !!v s s'. (Inr v, s') = fst (?M' s) ==> ?N v s' = ?N' v s' |]
      ==> ?M >>=E ?N = ?M' >>=E ?N'",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("DetMonadLemmas.valid_make_schematic_post",
     "ALL s0. \<lbrace>?P s0\<rbrace> ?f \<lbrace>?Q s0\<rbrace> ==>
      \<lbrace>%s. EX s0.
                      ?P s0 s &
                      (ALL rv s'. ?Q s0 rv s' --> ?Q' rv s')\<rbrace>
      ?f \<lbrace>?Q'\<rbrace>",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty), template_var 2),
             template_var 0)
           ))),
    ("DetMonadLemmas.validNF_make_schematic_post",
     "ALL s0. \<lbrace>?P s0\<rbrace> ?f \<lbrace>?Q s0\<rbrace>! ==>
      \<lbrace>%s. EX s0.
                      ?P s0 s &
                      (ALL rv s'. ?Q s0 rv s' --> ?Q' rv s')\<rbrace>
      ?f \<lbrace>?Q'\<rbrace>!",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty), template_var 2),
             template_var 0)
           ))),
    ("DetMonadLemmas.bind_apply_cong",
     "[| ?f ?s = ?f' ?s';
         !!rv st. (rv, st) = fst (?f' ?s') ==> ?g rv st = ?g' rv st |]
      ==> (?f >>= ?g) ?s = (?f' >>= ?g') ?s'",
     template_implication
      ([template_equation
         (template_app (template_var 5, template_var 4),
          template_app (template_var 3, template_var 2)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 5),
             template_var 1),
           template_var 4),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_var 2)))),
    ("DetMonadLemmas.bindE_apply_cong",
     "[| ?f ?s = ?f' ?s';
         !!rv st. (Inr rv, st) = fst (?f' ?s') ==> ?g rv st = ?g' rv st |]
      ==> (?f >>=E ?g) ?s = (?f' >>=E ?g') ?s'",
     template_implication
      ([template_equation
         (template_app (template_var 5, template_var 4),
          template_app (template_var 3, template_var 2)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 5),
             template_var 1),
           template_var 4),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_var 2)))),
    ("DetMonadLemmas.validE_make_schematic_post",
     "ALL s0. \<lbrace>?P s0\<rbrace> ?f 
         \<lbrace>?Q s0\<rbrace>, \<lbrace>?E s0\<rbrace> ==>
      \<lbrace>%s. EX s0.
                      ?P s0 s &
                      (ALL rv s'. ?Q s0 rv s' --> ?Q' rv s') &
                      (ALL rv s'. ?E s0 rv s' --> ?E' rv s')\<rbrace>
      ?f \<lbrace>?Q'\<rbrace>, \<lbrace>?E'\<rbrace>",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 6, t_empty), template_var 4),
               template_var 1),
             template_var 0)
           ))),
    ("DetMonadLemmas.validE_NF_make_schematic_post",
     "ALL s0. \<lbrace>?P s0\<rbrace> ?f 
         \<lbrace>?Q s0\<rbrace>, \<lbrace>?E s0\<rbrace>! ==>
      \<lbrace>%s. EX s0.
                      ?P s0 s &
                      (ALL rv s'. ?Q s0 rv s' --> ?Q' rv s') &
                      (ALL rv s'. ?E s0 rv s' --> ?E' rv s')\<rbrace>
      ?f \<lbrace>?Q'\<rbrace>, \<lbrace>?E'\<rbrace>!",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 6, t_empty), template_var 4),
               template_var 1),
             template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.DetMonadLemmasMoreTemplates"
### 0.319s elapsed time, 0.428s cpu time, 0.049s GC time
val it = (): unit
