   [("DetMonadLemmas.unless_False", "unless False ?X = ?X",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("DetMonadLemmas.when_True", "when1 True ?X = ?X",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("DetMonadLemmas.gets_to_return", "gets (%s. ?v) = return ?v",
     template_equation
      (template_app (template_hole 1, t_empty),
       template_app (template_hole 0, template_var 0))),
    ("DetMonadLemmas.unless_True", "unless True ?X = return ()",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2), template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("DetMonadLemmas.when_False", "when1 False ?X = return ()",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2), template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("DetMonadLemmas.unlessE_whenE", "unlessE ?P = whenE (~ ?P)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("DetMonadLemmas.unless_when", "unless ?P = when1 (~ ?P)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("DetMonadLemmas.assert_True", "assert True >>= ?f = ?f ()",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 1)),
         template_var 0),
       template_app (template_var 0, template_hole 0))),
    ("DetMonadLemmas.condition_false_triv", "condition (%_. False)
         ?A
         ?B =
       ?B",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, t_empty), template_var 1),
         template_var 0),
       template_var 0)),
    ("DetMonadLemmas.condition_true_triv", "condition (%_. True)
        ?A
        ?B =
      ?A",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, t_empty), template_var 1),
         template_var 0),
       template_var 1)),
    ("DetMonadLemmas.liftE_handleE", "(liftE ?a <handle> ?b) = liftE ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("DetMonadLemmas.liftE_handleE'", "(liftE ?a <handle2> ?b) = liftE ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("DetMonadLemmas.whenE_False_bind", "whenE False ?g >>=E ?f = ?f ()",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1)),
         template_var 0),
       template_app (template_var 0, template_hole 0))),
    ("DetMonadLemmas.when_True_bind", "when1 True ?g >>= ?f = ?g >>= ?f",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("DetMonadLemmas.whenE_True_bind", "whenE True ?g >>=E ?f = ?g >>=E ?f",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("DetMonadLemmas.exec_gets", "(gets ?f >>= ?m) ?s = ?m (?f ?s) ?s",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_var 1, template_app (template_var 2, template_var 0)),
         template_var 0))),
    ("DetMonadLemmas.condition_true", "?P ?s ==> condition ?P
             ?A
             ?B
            ?s =
           ?A ?s",
     template_implication
      ([template_predicate (template_app (template_var 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0),
           template_var 2),
         template_app (template_var 1, template_var 2)))),
    ("DetMonadLemmas.condition_false",
     "~ ?P ?s ==> condition ?P
                    ?A
                    ?B
                   ?s =
                  ?B ?s",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_var 3, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0),
           template_var 2),
         template_app (template_var 0, template_var 2)))),
    ("DetMonadLemmas.K_bind_apply_cong",
     "?f ?st = ?f' ?st' ==> K_bind ?f ?arg ?st = K_bind ?f' ?arg' ?st'",
     template_implication
      ([template_equation
         (template_app (template_var 5, template_var 4),
          template_app (template_var 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 5),
             template_var 1),
           template_var 4),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_var 2)))),
    ("DetMonadLemmas.nested_bind",
     "do y \<leftarrow> ?f;
         return (?g y)
      od >>=
      ?h =
      do y \<leftarrow> ?f;
         ?h (?g y)
      od",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2), t_empty)),
         t_empty),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("DetMonadLemmas.in_gets",
     "((?r, ?s') = fst (gets ?f ?s)) = (?r = ?f ?s & ?s' = ?s)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 3), template_var 2),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_app (template_var 1, template_var 0))),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("DetMonadLemmas.validNF_conjD1",
     "\<lbrace>?P\<rbrace> ?f 
      \<lbrace>%rv s. ?Q rv s & ?Q' rv s\<rbrace>! ==>
      \<lbrace>?P\<rbrace> ?f \<lbrace>?Q\<rbrace>!",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("DetMonadLemmas.validNF_conjD2",
     "\<lbrace>?P\<rbrace> ?f 
      \<lbrace>%rv s. ?Q rv s & ?Q' rv s\<rbrace>! ==>
      \<lbrace>?P\<rbrace> ?f \<lbrace>?Q'\<rbrace>!",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("DetMonadLemmas.condition_split",
     "?P (condition ?C
            ?a
            ?b
           ?s) =
      ((?C ?s --> ?P (?a ?s)) & (~ ?C ?s --> ?P (?b ?s)))",
     template_equation
      (template_app
        (template_var 4,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_var 3, template_var 0)),
             template_app
              (template_var 4,
               template_app (template_var 2, template_var 0)))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app (template_var 3, template_var 0))),
           template_app
            (template_var 4,
             template_app (template_var 1, template_var 0)))))),
    ("DetMonadLemmas.condition_split_asm",
     "?P (condition ?C
            ?a
            ?b
           ?s) =
      (~ (?C ?s & ~ ?P (?a ?s) | ~ ?C ?s & ~ ?P (?b ?s)))",
     template_equation
      (template_app
        (template_var 4,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_var 3, template_var 0)),
               template_app
                (template_hole 2,
                 template_app
                  (template_var 4,
                   template_app (template_var 2, template_var 0))))),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 2,
                 template_app (template_var 3, template_var 0))),
             template_app
              (template_hole 2,
               template_app
                (template_var 4,
                 template_app (template_var 1, template_var 0)))))))),
    ("DetMonadLemmas.when_apply_cong",
     "[| ?C = ?C'; ?s = ?s'; ?C' ==> ?m ?s' = ?m' ?s' |]
      ==> whenE ?C ?m ?s = whenE ?C' ?m' ?s'",
     template_implication
      ([template_equation (template_var 5, template_var 4),
        template_equation (template_var 3, template_var 2),
        template_implication
         ([template_predicate (template_var 4)],
          template_equation
           (template_app (template_var 1, template_var 2),
            template_app (template_var 0, template_var 2)))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 5),
             template_var 1),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 0),
           template_var 2)))),
    ("DetMonadLemmas.unless_apply_cong",
     "[| ?C = ?C'; ?s = ?s'; ~ ?C' ==> ?m ?s' = ?m' ?s' |]
      ==> unlessE ?C ?m ?s = unlessE ?C' ?m' ?s'",
     template_implication
      ([template_equation (template_var 5, template_var 4),
        template_equation (template_var 3, template_var 2),
        template_implication
         ([template_negation (template_predicate (template_var 4))],
          template_equation
           (template_app (template_var 1, template_var 2),
            template_app (template_var 0, template_var 2)))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 5),
             template_var 1),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 0),
           template_var 2)))),
    ("DetMonadLemmas.bind_cong",
     "[| ?f = ?f'; !!v s s'. (v, s') = fst (?f' s) ==> ?g v s' = ?g' v s' |]
      ==> ?f >>= ?g = ?f' >>= ?g'",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("DetMonadLemmas.bindE_cong",
     "[| ?M = ?M';
         !!v s s'. (Inr v, s') = fst (?M' s) ==> ?N v s' = ?N' v s' |]
      ==> ?M >>=E ?N = ?M' >>=E ?N'",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("DetMonadLemmas.valid_make_schematic_post",
     "ALL s0. \<lbrace>?P s0\<rbrace> ?f \<lbrace>?Q s0\<rbrace> ==>
      \<lbrace>%s. EX s0.
                      ?P s0 s &
                      (ALL rv s'. ?Q s0 rv s' --> ?Q' rv s')\<rbrace>
      ?f \<lbrace>?Q'\<rbrace>",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty), template_var 2),
             template_var 0)
           ))),
    ("DetMonadLemmas.validNF_make_schematic_post",
     "ALL s0. \<lbrace>?P s0\<rbrace> ?f \<lbrace>?Q s0\<rbrace>! ==>
      \<lbrace>%s. EX s0.
                      ?P s0 s &
                      (ALL rv s'. ?Q s0 rv s' --> ?Q' rv s')\<rbrace>
      ?f \<lbrace>?Q'\<rbrace>!",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty), template_var 2),
             template_var 0)
           ))),
    ("DetMonadLemmas.bind_apply_cong",
     "[| ?f ?s = ?f' ?s';
         !!rv st. (rv, st) = fst (?f' ?s') ==> ?g rv st = ?g' rv st |]
      ==> (?f >>= ?g) ?s = (?f' >>= ?g') ?s'",
     template_implication
      ([template_equation
         (template_app (template_var 5, template_var 4),
          template_app (template_var 3, template_var 2)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 5),
             template_var 1),
           template_var 4),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_var 2)))),
    ("DetMonadLemmas.bindE_apply_cong",
     "[| ?f ?s = ?f' ?s';
         !!rv st. (Inr rv, st) = fst (?f' ?s') ==> ?g rv st = ?g' rv st |]
      ==> (?f >>=E ?g) ?s = (?f' >>=E ?g') ?s'",
     template_implication
      ([template_equation
         (template_app (template_var 5, template_var 4),
          template_app (template_var 3, template_var 2)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 5),
             template_var 1),
           template_var 4),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_var 2)))),
    ("DetMonadLemmas.validE_make_schematic_post",
     "ALL s0. \<lbrace>?P s0\<rbrace> ?f 
         \<lbrace>?Q s0\<rbrace>, \<lbrace>?E s0\<rbrace> ==>
      \<lbrace>%s. EX s0.
                      ?P s0 s &
                      (ALL rv s'. ?Q s0 rv s' --> ?Q' rv s') &
                      (ALL rv s'. ?E s0 rv s' --> ?E' rv s')\<rbrace>
      ?f \<lbrace>?Q'\<rbrace>, \<lbrace>?E'\<rbrace>",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 6, t_empty), template_var 4),
               template_var 1),
             template_var 0)
           ))),
    ("DetMonadLemmas.validE_NF_make_schematic_post",
     "ALL s0. \<lbrace>?P s0\<rbrace> ?f 
         \<lbrace>?Q s0\<rbrace>, \<lbrace>?E s0\<rbrace>! ==>
      \<lbrace>%s. EX s0.
                      ?P s0 s &
                      (ALL rv s'. ?Q s0 rv s' --> ?Q' rv s') &
                      (ALL rv s'. ?E s0 rv s' --> ?E' rv s')\<rbrace>
      ?f \<lbrace>?Q'\<rbrace>, \<lbrace>?E'\<rbrace>!",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 6, t_empty), template_var 4),
               template_var 1),
             template_var 0)
           )))]
