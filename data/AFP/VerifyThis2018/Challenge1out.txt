Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Challenge1Templates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Challenge1Templates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Challenge1Templates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.Challenge1Templates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.131s elapsed time, 0.520s cpu time, 0.049s GC time
Loading theory "Draft.Synth_Definition" (required by "Draft.Challenge1Templates" via "Draft.Challenge1" via "Draft.VTcomp")
### theory "HOL-Library.Set_Algebras"
### 0.225s elapsed time, 0.892s cpu time, 0.049s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Challenge1Templates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
structure Synth_Definition:
  sig
    val prep_term: term -> term
    val sd_cmd:
       ((binding * Token.src list) * Token.src list) * string ->
         Proof.context -> Proof.state
    val sd_parser:
       Token.T list ->
         (((binding * Token.src list) * Token.src list) * string) *
         Token.T list
  end
### theory "Draft.Synth_Definition"
### 0.536s elapsed time, 2.075s cpu time, 0.258s GC time
Loading theory "Draft.Dynamic_Array" (required by "Draft.Challenge1Templates" via "Draft.Challenge1" via "Draft.VTcomp" via "Draft.Array_Map_Default")
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
op_list_grow ::\<^sub>i TYPE(?'a list => nat => ?'a => ?'a list)
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
mop_list_grow ::\<^sub>i TYPE(?'a list => nat => ?'a => ?'a list nres)
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.905s elapsed time, 3.527s cpu time, 0.393s GC time
Loading theory "Draft.DRAT_Misc" (required by "Draft.Challenge1Templates" via "Draft.Challenge1" via "Draft.VTcomp" via "Draft.Array_Map_Default")
### Ambiguous input (line 61 of "$AFP/VerifyThis2018/lib/Dynamic_Array.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Orderings.ord_class.less" ("_position" i)
###         ("_applC" ("_position" length) ("_position" l)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" nff_\<alpha>)
###         ("_cargs" ("_position" dflt)
###           ("_applC" ("_position" l)
###             ("_list"
###               ("\<^const>Ref.update" ("_position" i) ("_position" v))))))
###       ("_Update"
###         ("_applC" ("_position" nff_\<alpha>)
###           ("_cargs" ("_position" dflt) ("_position" l)))
###         ("_updbind" ("_position" i) ("_position" v))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Orderings.ord_class.less" ("_position" i)
###         ("_applC" ("_position" length) ("_position" l)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" nff_\<alpha>)
###         ("_cargs" ("_position" dflt)
###           ("_LUpdate" ("_position" l)
###             ("_lupdbind" ("_position" i) ("_position" v)))))
###       ("_Update"
###         ("_applC" ("_position" nff_\<alpha>)
###           ("_cargs" ("_position" dflt) ("_position" l)))
###         ("_updbind" ("_position" i) ("_position" v))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Orderings.ord_class.less" ("_position" i)
###         ("_applC" ("_position" length) ("_position" l)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" nff_\<alpha>)
###         ("_cargs" ("_position" dflt)
###           ("_applC" ("_position" l)
###             ("_list"
###               ("\<^const>Ref.update" ("_position" i) ("_position" v))))))
###       ("_applC"
###         ("_applC" ("_position" nff_\<alpha>)
###           ("_cargs" ("_position" dflt) ("_position" l)))
###         ("\<^const>Ref.update" ("_position" i) ("_position" v))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Orderings.ord_class.less" ("_position" i)
###         ("_applC" ("_position" length) ("_position" l)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" nff_\<alpha>)
###         ("_cargs" ("_position" dflt)
###           ("_LUpdate" ("_position" l)
###             ("_lupdbind" ("_position" i) ("_position" v)))))
###       ("_applC"
###         ("_applC" ("_position" nff_\<alpha>)
###           ("_cargs" ("_position" dflt) ("_position" l)))
###         ("\<^const>Ref.update" ("_position" i) ("_position" v))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### theory "Draft.DRAT_Misc"
### 0.208s elapsed time, 0.723s cpu time, 0.501s GC time
Loading theory "Draft.Exc_Nres_Monad" (required by "Draft.Challenge1Templates" via "Draft.Challenge1" via "Draft.VTcomp")
### Ambiguous input (line 67 of "$AFP/VerifyThis2018/lib/Dynamic_Array.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Hoare_Triple.hoare_triple'"
###     ("_applC" ("_position" is_nff)
###       ("_cargs" ("_position" dflt)
###         ("_cargs" ("_position" f) ("_position" a))))
###     ("_applC" ("_position" array_set_dyn)
###       ("_cargs" ("_position" dflt)
###         ("_cargs" ("_position" a)
###           ("_cargs" ("_position" i) ("_position" v)))))
###     ("_lambda" ("_position" r)
###       ("_applC" ("_position" is_nff)
###         ("_cargs" ("_position" dflt)
###           ("_cargs"
###             ("_applC" ("_position" f)
###               ("\<^const>Ref.update" ("_position" i) ("_position" v)))
###             ("_position" r)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Hoare_Triple.hoare_triple'"
###     ("_applC" ("_position" is_nff)
###       ("_cargs" ("_position" dflt)
###         ("_cargs" ("_position" f) ("_position" a))))
###     ("_applC" ("_position" array_set_dyn)
###       ("_cargs" ("_position" dflt)
###         ("_cargs" ("_position" a)
###           ("_cargs" ("_position" i) ("_position" v)))))
###     ("_lambda" ("_position" r)
###       ("_applC" ("_position" is_nff)
###         ("_cargs" ("_position" dflt)
###           ("_cargs"
###             ("_Update" ("_position" f)
###               ("_updbind" ("_position" i) ("_position" v)))
###             ("_position" r)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Dynamic_Array"
### 0.460s elapsed time, 1.707s cpu time, 0.586s GC time
Loading theory "Draft.Array_Map_Default" (required by "Draft.Challenge1Templates" via "Draft.Challenge1" via "Draft.VTcomp")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.967s elapsed time, 3.638s cpu time, 0.899s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
(?\<Phi> ==> ?mi <= \<Down>\<^sub>E ?E ?R ?m) ==>
?mi <= \<Down>\<^sub>E ?E ?R (ebind (EASSERT ?\<Phi>) (%_. ?m))
(?\<Phi> ==> ?mi <= \<Down>\<^sub>E ?E ?R ?m) ==>
ebind (EASSUME ?\<Phi>) (%_. ?mi) <= \<Down>\<^sub>E ?E ?R ?m
[| ?\<Phi>; ?mi <= \<Down>\<^sub>E ?E ?R ?m |]
==> ?mi <= \<Down>\<^sub>E ?E ?R (ebind (EASSUME ?\<Phi>) (%_. ?m))
[| ?\<Phi>; ?mi <= \<Down>\<^sub>E ?E ?R ?m |]
==> ebind (EASSERT ?\<Phi>) (%_. ?mi) <= \<Down>\<^sub>E ?E ?R ?m
[| ?mi <= \<Down>\<^sub>E ?E ?R' ?m;
   !!xi x. (xi, x) : ?R' ==> ?fi xi <= \<Down>\<^sub>E ?E ?R (?f x) |]
==> ebind ?mi ?fi <= \<Down>\<^sub>E ?E ?R (ebind ?m ?f)
(?xi, ?x) : ?R ==> ERETURN ?xi <= \<Down>\<^sub>E ?E ?R (ERETURN ?x)
[| (?li, ?l) : \<langle>?S\<rangle>list_rel; (?si, ?s) : ?R;
   !!si s. (si, s) : ?R ==> ?ci si <= \<Down> bool_rel (?c s);
   !!xi x si s.
      [| (xi, x) : ?S; x : set ?l; (si, s) : ?R; inres (?c s) True |]
      ==> ?fi xi si <= \<Down> ?R (?f x s) |]
==> monadic_nfoldli ?li ?ci ?fi ?si
    <= \<Down> ?R (monadic_nfoldli ?l ?c ?f ?s)
[| (?s', ?s) : ?R; !!s' s. (s', s) : ?R ==> ?b' s' <= SPEC (%r. r = ?b s);
   !!s' s. [| (s', s) : ?R; ?b s |] ==> ?f' s' <= \<Down> ?R (?f s) |]
==> monadic_WHILEIT (%_. True) ?b' ?f' ?s'
    <= \<Down> ?R (WHILE\<^sub>T ?b ?f ?s)
[| (?s', ?s) : ?R; !!s' s. [| (s', s) : ?R; ?I s |] ==> ?I' s';
   !!s' s.
      [| (s', s) : ?R; ?I s; ?I' s' |] ==> ?b' s' <= SPEC (%r. r = ?b s);
   !!s' s.
      [| (s', s) : ?R; ?I s; ?I' s'; ?b s |]
      ==> ?f' s' <= \<Down> ?R (?f s) |]
==> monadic_WHILEIT ?I' ?b' ?f' ?s'
    <= \<Down> ?R (WHILE\<^sub>T\<^bsup>?I\<^esup> ?b ?f ?s)
[| (?s', ?s) : ?R; !!s' s. [| (s', s) : ?R; ?I s |] ==> ?I' s';
   !!s' s.
      [| (s', s) : ?R; ?I s; ?I' s' |]
      ==> ?b' s' <= \<Down> bool_rel (?b s);
   !!s' s.
      [| (s', s) : ?R; ?I s; ?I' s'; nofail (?b s); inres (?b s) True |]
      ==> ?f' s' <= \<Down> ?R (?f s) |]
==> monadic_WHILEIT ?I' ?b' ?f' ?s'
    <= \<Down> ?R (monadic_WHILEIT ?I ?b ?f ?s)
### Ambiguous input (line 34 of "$AFP/VerifyThis2018/lib/Array_Map_Default.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("_applC" ("_position" uncurry2)
###         ("_lambda"
###           ("_pttrns" ("_position" k)
###             ("_pttrns" ("_position" v) ("_position" f)))
###           ("_Update" ("_position" f)
###             ("_updbind" ("_position" k) ("_position" v)))))
###       ("_tuple_arg"
###         ("_applC" ("_position" uncurry2) ("_position" op_map_update))))
###     ("\<^const>Sepref_Rules.fref"
###       ("_lambda"
###         ("_pattern" ("_pattern" ("_position" k) ("_position" v))
###           ("_position" m))
###         ("\<^const>HOL.not_equal" ("_position" v) ("_position" dflt)))
###       ("\<^const>Relators.prod_rel_syn"
###         ("\<^const>Relators.prod_rel_syn" ("_position" Id) ("_position" Id))
###         ("\<^const>Relators.fun_rel_syn" ("_position" Id)
###           ("_applC" ("_position" dflt_option_rel_aux) ("_position" dflt))))
###       ("\<^const>Relators.fun_rel_syn" ("_position" Id)
###         ("_applC" ("_position" dflt_option_rel_aux) ("_position" dflt))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("_applC" ("_position" uncurry2)
###         ("_lambda"
###           ("_pttrns" ("_position" k)
###             ("_pttrns" ("_position" v) ("_position" f)))
###           ("_applC" ("_position" f)
###             ("\<^const>Ref.update" ("_position" k) ("_position" v)))))
###       ("_tuple_arg"
###         ("_applC" ("_position" uncurry2) ("_position" op_map_update))))
###     ("\<^const>Sepref_Rules.fref"
###       ("_lambda"
###         ("_pattern" ("_pattern" ("_position" k) ("_position" v))
###           ("_position" m))
###         ("\<^const>HOL.not_equal" ("_position" v) ("_position" dflt)))
###       ("\<^const>Relators.prod_rel_syn"
###         ("\<^const>Relators.prod_rel_syn" ("_position" Id) ("_position" Id))
###         ("\<^const>Relators.fun_rel_syn" ("_position" Id)
###           ("_applC" ("_position" dflt_option_rel_aux) ("_position" dflt))))
###       ("\<^const>Relators.fun_rel_syn" ("_position" Id)
###         ("_applC" ("_position" dflt_option_rel_aux) ("_position" dflt))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
[| ?I' ?x' ==> (?x, ?x') : ?R; !!x x'. [| (x, x') : ?R; ?I' x' |] ==> ?I x;
   !!x x'. [| (x, x') : ?R; ?I x; ?I' x' |] ==> ?b x = ?b' x';
   !!x x'.
      [| (x, x') : ?R; ?b x; ?b' x'; ?I x; ?I' x' |]
      ==> ?f x <= \<Down> ?R (?f' x') |]
==> WHILE\<^sub>T\<^bsup>?I\<^esup> ?b ?f ?x
    <= \<Down> ?R (WHILE\<^sub>T\<^bsup>?I'\<^esup> ?b' ?f' ?x')
### Ambiguous input (line 105 of "$AFP/VerifyThis2018/lib/Array_Map_Default.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("_applC" ("_position" uncurry2)
###         ("_applC" ("_position" amd_update) ("_position" dflt)))
###       ("_tuple_arg"
###         ("_applC" ("_position" uncurry2)
###           ("\<^const>Misc.comp3" ("_position" RETURN)
###             ("_lambda"
###               ("_pttrns" ("_position" k)
###                 ("_pttrns" ("_position" v) ("_position" f)))
###               ("_applC" ("_position" f)
###                 ("\<^const>Ref.update" ("_position" k)
###                   ("_position" v))))))))
###     ("\<^const>Sepref_Rules.hfreft"
###       ("\<^const>Sepref_Rules.hfprod"
###         ("\<^const>Sepref_Rules.hfprod"
###           ("\<^const>Sepref_Rules.hfkeep" ("_position" id_assn))
###           ("\<^const>Sepref_Rules.hfkeep" ("_position" id_assn)))
###         ("\<^const>Sepref_Rules.hfdrop"
###           ("_applC" ("_position" is_nff) ("_position" dflt))))
###       ("_applC" ("_position" is_nff) ("_position" dflt)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("_applC" ("_position" uncurry2)
###         ("_applC" ("_position" amd_update) ("_position" dflt)))
###       ("_tuple_arg"
###         ("_applC" ("_position" uncurry2)
###           ("\<^const>Misc.comp3" ("_position" RETURN)
###             ("_lambda"
###               ("_pttrns" ("_position" k)
###                 ("_pttrns" ("_position" v) ("_position" f)))
###               ("_Update" ("_position" f)
###                 ("_updbind" ("_position" k) ("_position" v))))))))
###     ("\<^const>Sepref_Rules.hfreft"
###       ("\<^const>Sepref_Rules.hfprod"
###         ("\<^const>Sepref_Rules.hfprod"
###           ("\<^const>Sepref_Rules.hfkeep" ("_position" id_assn))
###           ("\<^const>Sepref_Rules.hfkeep" ("_position" id_assn)))
###         ("\<^const>Sepref_Rules.hfdrop"
###           ("_applC" ("_position" is_nff) ("_position" dflt))))
###       ("_applC" ("_position" is_nff) ("_position" dflt)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Cannot skip proof of schematic goal statement
(uncurry0 (amd_empty dflt), uncurry0 (RETURN op_map_empty))
: unit_assn\<^sup>k \<rightarrow>\<^sub>a amd_assn dflt ?K ?V
(uncurry0 (amd_empty dflt), uncurry0 mop_map_empty)
: unit_assn\<^sup>k \<rightarrow>\<^sub>a amd_assn dflt ?K ?V
### Cannot skip proof of schematic goal statement
CONSTRAINT is_pure ?K ==>
(uncurry (amd_lookup dflt), uncurry (RETURN \<circ>\<circ> op_map_lookup))
: ?K\<^sup>k *\<^sub>a
  (amd_assn dflt ?K
    ?V)\<^sup>k \<rightarrow>\<^sub>a dflt_option_assn dflt ?V
Found termination order: "size <*mlex*> {}"
CONSTRAINT is_pure ?K ==>
(uncurry (amd_lookup dflt), uncurry mop_map_lookup)
: ?K\<^sup>k *\<^sub>a
  (amd_assn dflt ?K
    ?V)\<^sup>k \<rightarrow>\<^sub>a dflt_option_assn dflt ?V
### Cannot skip proof of schematic goal statement
[| CONSTRAINT (IS_PURE single_valued) ?K;
   CONSTRAINT (IS_PURE IS_LEFT_UNIQUE) ?K |]
==> (uncurry (amd_delete dflt),
     uncurry (RETURN \<circ>\<circ> op_map_delete))
    : ?K\<^sup>k *\<^sub>a
      (amd_assn dflt ?K
        ?V)\<^sup>d \<rightarrow>\<^sub>a amd_assn dflt ?K ?V
[| CONSTRAINT (IS_PURE single_valued) ?K;
   CONSTRAINT (IS_PURE IS_LEFT_UNIQUE) ?K |]
==> (uncurry (amd_delete dflt), uncurry mop_map_delete)
    : ?K\<^sup>k *\<^sub>a
      (amd_assn dflt ?K
        ?V)\<^sup>d \<rightarrow>\<^sub>a amd_assn dflt ?K ?V
### Cannot skip proof of schematic goal statement
### theory "HOL-Library.Tree"
### 2.101s elapsed time, 7.294s cpu time, 1.191s GC time
Loading theory "Draft.Templates" (required by "Draft.Challenge1Templates" via "Draft.ExtrEqs")
[| CONSTRAINT (IS_PURE single_valued) ?K;
   CONSTRAINT (IS_PURE IS_LEFT_UNIQUE) ?K; CONSTRAINT is_pure ?V;
   CONSTRAINT (is_unused_elem dflt) ?V |]
==> (uncurry2 (amd_update dflt),
     uncurry2 (RETURN \<circ>\<circ>\<circ> op_map_update))
    : ?K\<^sup>k *\<^sub>a ?V\<^sup>k *\<^sub>a
      (amd_assn dflt ?K
        ?V)\<^sup>d \<rightarrow>\<^sub>a amd_assn dflt ?K ?V
[| CONSTRAINT (IS_PURE single_valued) ?K;
   CONSTRAINT (IS_PURE IS_LEFT_UNIQUE) ?K; CONSTRAINT is_pure ?V;
   CONSTRAINT (is_unused_elem dflt) ?V |]
==> (uncurry2 (amd_update dflt), uncurry2 mop_map_update)
    : ?K\<^sup>k *\<^sub>a ?V\<^sup>k *\<^sub>a
      (amd_assn dflt ?K
        ?V)\<^sup>d \<rightarrow>\<^sub>a amd_assn dflt ?K ?V
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.075s elapsed time, 0.243s cpu time, 0.051s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Challenge1Templates")
dflt_None ::\<^sub>i TYPE(?'a option)
dflt_Some ::\<^sub>i TYPE(?'a => ?'a option)
### theory "Draft.Exc_Nres_Monad"
### 1.089s elapsed time, 3.358s cpu time, 0.348s GC time
locale dflt_option
  fixes A :: "'a => 'c => assn"
    and dflt :: "'c"
    and eq :: "'c => 'c => bool Heap"
  assumes "dflt_option A dflt eq"
### theory "Draft.Array_Map_Default"
### 1.151s elapsed time, 3.479s cpu time, 0.348s GC time
Loading theory "Draft.VTcomp" (required by "Draft.Challenge1Templates" via "Draft.Challenge1")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.498s elapsed time, 1.055s cpu time, 0.044s GC time
op_list_blit ::\<^sub>i
TYPE(?'a list => nat => ?'a list => nat => nat => ?'a list)
mop_list_blit ::\<^sub>i
TYPE(?'a list => nat => ?'a list => nat => nat => ?'a list nres)
### Cannot skip proof of schematic goal statement
(uncurry2
  (uncurry2
    (%src si dst di len. blit src si dst di len >>= (%_. return dst))),
 uncurry2 (uncurry2 mop_list_blit))
: (array_assn ?A)\<^sup>k *\<^sub>a nat_assn\<^sup>k *\<^sub>a
  (array_assn ?A)\<^sup>d *\<^sub>a
  nat_assn\<^sup>k *\<^sub>a
  nat_assn\<^sup>k \<rightarrow>\<^sub>a array_assn ?A
(uncurry2
  (uncurry2
    (%src si dst di len. blit src si dst di len >>= (%_. return dst))),
 uncurry2
  (uncurry2 (%x1 x2. RETURN \<circ>\<circ>\<circ> op_list_blit x1 x2)))
: [pre_list_blit]\<^sub>a (array_assn ?A)\<^sup>k *\<^sub>a
                          nat_assn\<^sup>k *\<^sub>a
                          (array_assn ?A)\<^sup>d *\<^sub>a
                          nat_assn\<^sup>k *\<^sub>a
                          nat_assn\<^sup>k \<rightarrow> array_assn ?A
### theory "Draft.VTcomp"
### 1.328s elapsed time, 2.273s cpu time, 0.784s GC time
Loading theory "Draft.Challenge1" (required by "Draft.Challenge1Templates")
consts
  get_text :: "'a textbuffer => 'a list"
consts
  get_pos :: "'a textbuffer => nat"
consts
  move_left :: "'a textbuffer => 'a textbuffer"
consts
  move_right :: "'a textbuffer => 'a textbuffer"
consts
  insert :: "'a => 'a textbuffer => 'a textbuffer"
consts
  delete :: "'a textbuffer => 'a textbuffer"
Challenge1.empty ::\<^sub>i TYPE(?'a textbuffer)
mop_empty ::\<^sub>i TYPE(?'a textbuffer nres)
get_text ::\<^sub>i TYPE(?'a textbuffer => ?'a list)
mop_get_text ::\<^sub>i TYPE(?'a textbuffer => ?'a list nres)
get_pos ::\<^sub>i TYPE(?'a textbuffer => nat)
mop_get_pos ::\<^sub>i TYPE(?'a textbuffer => nat nres)
move_left ::\<^sub>i TYPE(?'a textbuffer => ?'a textbuffer)
mop_move_left ::\<^sub>i TYPE(?'a textbuffer => ?'a textbuffer nres)
move_right ::\<^sub>i TYPE(?'a textbuffer => ?'a textbuffer)
mop_move_right ::\<^sub>i TYPE(?'a textbuffer => ?'a textbuffer nres)
Challenge1.insert ::\<^sub>i TYPE(?'a => ?'a textbuffer => ?'a textbuffer)
mop_insert ::\<^sub>i TYPE(?'a => ?'a textbuffer => ?'a textbuffer nres)
delete ::\<^sub>i TYPE(?'a textbuffer => ?'a textbuffer)
mop_delete ::\<^sub>i TYPE(?'a textbuffer => ?'a textbuffer nres)
### Cannot skip proof of schematic goal statement
empty_impl == heap_array_empty >>= (%x. return (0, 0, x))
(uncurry0 empty_impl, uncurry0 empty1)
: unit_assn\<^sup>k \<rightarrow>\<^sub>a gap_impl_assn
### Cannot skip proof of schematic goal statement
(uncurry0 local.empty_impl, uncurry0 (RETURN Challenge1.empty))
: unit_assn\<^sup>k \<rightarrow>\<^sub>a gap_assn ?A
(uncurry0 local.empty_impl, uncurry0 mop_empty)
: unit_assn\<^sup>k \<rightarrow>\<^sub>a gap_assn ?A
### Cannot skip proof of schematic goal statement
move_left_impl ==
%xi. case xi of
     (a1, a1a, a2a) =>
       if a1 ~= 0
       then Array.nth a2a (a1 - 1) >>=
            (%x. heap_array_set a2a (a1a - 1) x >>=
                 (%x. return (a1 - 1, a1a - 1, x)))
       else return (a1, a1a, a2a)
(move_left_impl, move_left1)
: gap_impl_assn\<^sup>d \<rightarrow>\<^sub>a gap_impl_assn
### Cannot skip proof of schematic goal statement
(move_left_impl, RETURN o move_left)
: (gap_assn ?A)\<^sup>d \<rightarrow>\<^sub>a gap_assn ?A
(move_left_impl, mop_move_left)
: (gap_assn ?A)\<^sup>d \<rightarrow>\<^sub>a gap_assn ?A
### Cannot skip proof of schematic goal statement
move_right_impl ==
%xi. case xi of
     (a1, a1a, a2a) =>
       Array.len a2a >>=
       (%x. if a1a < x
            then Array.nth a2a a1a >>=
                 (%x. heap_array_set a2a a1 x >>=
                      (%x. return (a1 + 1, a1a + 1, x)))
            else return (a1, a1a, a2a))
(move_right_impl, move_right1)
: gap_impl_assn\<^sup>d \<rightarrow>\<^sub>a gap_impl_assn
### Cannot skip proof of schematic goal statement
(move_right_impl, RETURN o move_right)
: (gap_assn ?A)\<^sup>d \<rightarrow>\<^sub>a gap_assn ?A
(move_right_impl, mop_move_right)
: (gap_assn ?A)\<^sup>d \<rightarrow>\<^sub>a gap_assn ?A
### Cannot skip proof of schematic goal statement
insert_impl ==
%ai bi.
   case bi of
   (a1, a1a, a2a) =>
     (if a1 = a1a
      then Array.len a2a >>=
           (%x. Array.len a2a >>=
                (%xa. Array.new (x + (xa + 1)) default >>=
                      (%x'a. blit a2a 0 x'a 0 a1 >>=
                             (%x. Array.len a2a >>=
                                  (%x.
Array.len a2a >>=
(%xa. blit a2a a1a x'a (a1a + (x + 1)) (xa - a1a) >>=
      (%x. Array.len a2a >>= (%x. return (a1, a1a + (x + 1), x'a)))))))))
      else return (a1, a1a, a2a)) >>=
     (%(a1b, a1c, a2c).
         heap_array_set a2c a1b ai >>= (%x. return (a1b + 1, a1c, x)))
(uncurry insert_impl, uncurry insert1)
: id_assn\<^sup>k *\<^sub>a
  gap_impl_assn\<^sup>d \<rightarrow>\<^sub>a gap_impl_assn
### Cannot skip proof of schematic goal statement
CONSTRAINT is_pure ?A ==>
(uncurry local.insert_impl,
 uncurry (RETURN \<circ>\<circ> Challenge1.insert))
: ?A\<^sup>k *\<^sub>a
  (gap_assn ?A)\<^sup>d \<rightarrow>\<^sub>a gap_assn ?A
CONSTRAINT is_pure ?A ==>
(uncurry local.insert_impl, uncurry mop_insert)
: ?A\<^sup>k *\<^sub>a
  (gap_assn ?A)\<^sup>d \<rightarrow>\<^sub>a gap_assn ?A
### Cannot skip proof of schematic goal statement
delete_impl ==
%xi. return
      (case xi of
       (a1, a1a, a2a) =>
         if 0 < a1 then (a1 - 1, a1a, a2a) else (a1, a1a, a2a))
(delete_impl, delete1)
: gap_impl_assn\<^sup>d \<rightarrow>\<^sub>a gap_impl_assn
### Cannot skip proof of schematic goal statement
(delete_impl, RETURN o delete)
: (gap_assn ?A)\<^sup>d \<rightarrow>\<^sub>a gap_assn ?A
(delete_impl, mop_delete)
: (gap_assn ?A)\<^sup>d \<rightarrow>\<^sub>a gap_assn ?A
See theory exports
See theory exports
See theory exports
See theory exports
### Cannot skip proof of schematic goal statement
client_impl ==
Challenge1.empty_impl >>=
(%x. Challenge1.insert_impl 1 x >>=
     (%x. Challenge1.insert_impl 2 x >>=
          (%x. Challenge1.insert_impl 3 x >>=
               (%x. Challenge1.insert_impl 5 x >>=
                    (%x. move_left_impl x >>=
                         (%x. Challenge1.insert_impl 4 x >>=
                              (%x. move_right_impl x >>=
                                   (%x.
 Challenge1.insert_impl 6 x >>= delete_impl))))))))
(uncurry0 client_impl, uncurry0 client)
: unit_assn\<^sup>k \<rightarrow>\<^sub>a gap_assn int_assn
### theory "Draft.Challenge1"
### 2.803s elapsed time, 2.904s cpu time, 0.166s GC time
Loading theory "Draft.Challenge1Templates"
val it =
   (Nat 5,
    (Nat 7,
     fromList[Int_of_integer 1, Int_of_integer 2, Int_of_integer 3,
        Int_of_integer 4, Int_of_integer 5, Int_of_integer 6,
        Int_of_integer 5])):
   Isabelle10857854.Generated_Code.nat *
   (Isabelle10857854.Generated_Code.nat *
    Isabelle10857854.Generated_Code.inta array)
val templateLemmas =
   [("Challenge1.move_left_text", "get_text (move_left ?b) = get_text ?b",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Challenge1.move_right_text", "get_text (move_right ?b) = get_text ?b",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Challenge1.delete_pos", "get_pos (delete ?b) = get_pos ?b - 1",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 0)),
         template_hole 0))),
    ("Challenge1.move_left_pos", "get_pos (move_left ?b) = get_pos ?b - 1",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 0)),
         template_hole 0))),
    ("Challenge1.insert_pos",
     "get_pos (Challenge1.insert ?x ?b) = get_pos ?b + 1",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 0)),
         template_hole 0))),
    ("Challenge1.move_right_pos",
     "get_pos (move_right ?b) =
      min (get_pos ?b + 1) (length (get_text ?b))",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 6, template_var 0)),
             template_hole 2)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Challenge1.delete_text0",
     "get_pos ?b = 0 ==> get_text (delete ?b) = get_text ?b",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 0), template_hole 3)],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Challenge1.delete_impl_hnr_mop",
     "(delete_impl, mop_delete)
      : (gap_assn ?A)\<^sup>d \<rightarrow>\<^sub>a gap_assn ?A",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_hole 5)),
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)),
                 template_hole 0)),
             template_app (template_hole 1, template_var 0)))
         )),
    ("Challenge1.move_left_impl_hnr_mop",
     "(move_left_impl, mop_move_left)
      : (gap_assn ?A)\<^sup>d \<rightarrow>\<^sub>a gap_assn ?A",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_hole 5)),
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)),
                 template_hole 0)),
             template_app (template_hole 1, template_var 0)))
         )),
    ("Challenge1.move_right_impl_hnr_mop",
     "(move_right_impl, mop_move_right)
      : (gap_assn ?A)\<^sup>d \<rightarrow>\<^sub>a gap_assn ?A",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_hole 5)),
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)),
                 template_hole 0)),
             template_app (template_hole 1, template_var 0)))
         )),
    ("Challenge1.delete_impl_hnr",
     "(delete_impl, RETURN o delete)
      : (gap_assn ?A)\<^sup>d \<rightarrow>\<^sub>a gap_assn ?A",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_hole 8),
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_hole 5))),
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)),
                 template_hole 0)),
             template_app (template_hole 1, template_var 0)))
         )),
    ("Challenge1.move_left_impl_hnr",
     "(move_left_impl, RETURN o move_left)
      : (gap_assn ?A)\<^sup>d \<rightarrow>\<^sub>a gap_assn ?A",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_hole 8),
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_hole 5))),
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)),
                 template_hole 0)),
             template_app (template_hole 1, template_var 0)))
         )),
    ("Challenge1.move_right_impl_hnr",
     "(move_right_impl, RETURN o move_right)
      : (gap_assn ?A)\<^sup>d \<rightarrow>\<^sub>a gap_assn ?A",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_hole 8),
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_hole 5))),
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)),
                 template_hole 0)),
             template_app (template_hole 1, template_var 0)))
         )),
    ("Challenge1.empty_impl_hnr_mop",
     "(uncurry0 Challenge1.empty_impl, uncurry0 mop_empty)
      : unit_assn\<^sup>k \<rightarrow>\<^sub>a gap_assn ?A",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 9, template_hole 8)),
               template_app (template_hole 7, template_hole 6))),
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1)),
                 template_hole 4)),
             template_app (template_hole 0, template_var 0)))
         )),
    ("Challenge1.empty_impl_hnr",
     "(uncurry0 Challenge1.empty_impl, uncurry0 (RETURN Challenge1.empty))
      : unit_assn\<^sup>k \<rightarrow>\<^sub>a gap_assn ?A",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app
                (template_hole 11,
                 template_app (template_hole 10, template_hole 9)),
               template_app
                (template_hole 8,
                 template_app (template_hole 7, template_hole 6)))),
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1)),
                 template_hole 4)),
             template_app (template_hole 0, template_var 0)))
         )),
    ("Challenge1.delete_text",
     "get_text (delete ?b) =
      take (get_pos ?b - 1) (get_text ?b) @
      drop (get_pos ?b) (get_text ?b)",
     template_equation
      (template_app
        (template_hole 7, template_app (template_hole 6, template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_hole 1)),
             template_app (template_hole 7, template_var 0))),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)),
           template_app (template_hole 7, template_var 0))))),
    ("Challenge1.insert_text",
     "get_text (Challenge1.insert ?x ?b) =
      take (get_pos ?b) (get_text ?b) @
      ?x # drop (get_pos ?b) (get_text ?b)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app (template_hole 6, template_var 0))),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 0)),
             template_app (template_hole 6, template_var 0)))))),
    ("Challenge1.insert_impl_hnr_mop",
     "CONSTRAINT is_pure ?A ==>
      (uncurry Challenge1.insert_impl, uncurry mop_insert)
      : ?A\<^sup>k *\<^sub>a
        (gap_assn ?A)\<^sup>d \<rightarrow>\<^sub>a gap_assn ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_hole 13),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app (template_hole 10, template_hole 9)),
                 template_app (template_hole 8, template_hole 7))),
             template_app
              (template_app
                (template_app (template_hole 6, t_empty),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_hole 5)),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 0)),
                     template_hole 0))),
               template_app (template_hole 1, template_var 0)))
           ))),
    ("Challenge1.insert_impl_hnr",
     "CONSTRAINT is_pure ?A ==>
      (uncurry Challenge1.insert_impl,
       uncurry (RETURN \<circ>\<circ> Challenge1.insert))
      : ?A\<^sup>k *\<^sub>a
        (gap_assn ?A)\<^sup>d \<rightarrow>\<^sub>a gap_assn ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_hole 15),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app
                  (template_hole 13,
                   template_app (template_hole 12, template_hole 11)),
                 template_app (template_hole 10, t_empty))),
             template_app
              (template_app
                (template_app (template_hole 6, t_empty),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_hole 5)),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 0)),
                     template_hole 0))),
               template_app (template_hole 1, template_var 0)))
           ))),
    ("Challenge1.grow1_correct",
     "[| gap_invar ?gb1;
         SPEC
          (%gb'. gap_invar gb' &
                 gap_\<alpha> gb' = gap_\<alpha> ?gb1 &
                 (0 < ?K1 --> can_insert gb'))
         <= SPEC ?Postcond |]
      ==> grow1 ?K1 ?gb1 <= SPEC ?Postcond",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 9, template_app (template_hole 8, t_empty)),
          template_app
           (template_hole 9,
            template_app (template_hole 8, template_var 0)))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_hole 9,
           template_app (template_hole 8, template_var 0)))))]:
   (string * thm * template) list
### theory "Draft.Challenge1Templates"
### 1.301s elapsed time, 2.476s cpu time, 1.003s GC time
val it = (): unit
