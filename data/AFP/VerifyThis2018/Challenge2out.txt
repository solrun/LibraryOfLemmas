Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Challenge2Templates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Challenge2Templates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.Challenge2Templates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Tree" (required by "Draft.Challenge2Templates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.121s elapsed time, 0.487s cpu time, 0.038s GC time
Loading theory "Draft.Synth_Definition" (required by "Draft.Challenge2Templates" via "Draft.Challenge2" via "Draft.VTcomp")
### theory "HOL-Library.Set_Algebras"
### 0.250s elapsed time, 0.974s cpu time, 0.164s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Challenge2Templates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
structure Synth_Definition:
  sig
    val prep_term: term -> term
    val sd_cmd:
       ((binding * Token.src list) * Token.src list) * string ->
         Proof.context -> Proof.state
    val sd_parser:
       Token.T list ->
         (((binding * Token.src list) * Token.src list) * string) *
         Token.T list
  end
### theory "Draft.Synth_Definition"
### 0.523s elapsed time, 2.017s cpu time, 0.267s GC time
Loading theory "Draft.Dynamic_Array" (required by "Draft.Challenge2Templates" via "Draft.Challenge2" via "Draft.VTcomp" via "Draft.Array_Map_Default")
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
op_list_grow ::\<^sub>i TYPE(?'a list => nat => ?'a => ?'a list)
mop_list_grow ::\<^sub>i TYPE(?'a list => nat => ?'a => ?'a list nres)
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.878s elapsed time, 3.419s cpu time, 0.386s GC time
Loading theory "Draft.DRAT_Misc" (required by "Draft.Challenge2Templates" via "Draft.Challenge2" via "Draft.VTcomp" via "Draft.Array_Map_Default")
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 61 of "$AFP/VerifyThis2018/lib/Dynamic_Array.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Orderings.ord_class.less" ("_position" i)
###         ("_applC" ("_position" length) ("_position" l)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" nff_\<alpha>)
###         ("_cargs" ("_position" dflt)
###           ("_applC" ("_position" l)
###             ("_list"
###               ("\<^const>Ref.update" ("_position" i) ("_position" v))))))
###       ("_Update"
###         ("_applC" ("_position" nff_\<alpha>)
###           ("_cargs" ("_position" dflt) ("_position" l)))
###         ("_updbind" ("_position" i) ("_position" v))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Orderings.ord_class.less" ("_position" i)
###         ("_applC" ("_position" length) ("_position" l)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" nff_\<alpha>)
###         ("_cargs" ("_position" dflt)
###           ("_LUpdate" ("_position" l)
###             ("_lupdbind" ("_position" i) ("_position" v)))))
###       ("_Update"
###         ("_applC" ("_position" nff_\<alpha>)
###           ("_cargs" ("_position" dflt) ("_position" l)))
###         ("_updbind" ("_position" i) ("_position" v))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Orderings.ord_class.less" ("_position" i)
###         ("_applC" ("_position" length) ("_position" l)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" nff_\<alpha>)
###         ("_cargs" ("_position" dflt)
###           ("_applC" ("_position" l)
###             ("_list"
###               ("\<^const>Ref.update" ("_position" i) ("_position" v))))))
###       ("_applC"
###         ("_applC" ("_position" nff_\<alpha>)
###           ("_cargs" ("_position" dflt) ("_position" l)))
###         ("\<^const>Ref.update" ("_position" i) ("_position" v))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Orderings.ord_class.less" ("_position" i)
###         ("_applC" ("_position" length) ("_position" l)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" nff_\<alpha>)
###         ("_cargs" ("_position" dflt)
###           ("_LUpdate" ("_position" l)
###             ("_lupdbind" ("_position" i) ("_position" v)))))
###       ("_applC"
###         ("_applC" ("_position" nff_\<alpha>)
###           ("_cargs" ("_position" dflt) ("_position" l)))
###         ("\<^const>Ref.update" ("_position" i) ("_position" v))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.DRAT_Misc"
### 0.198s elapsed time, 0.690s cpu time, 0.481s GC time
Loading theory "Draft.Exc_Nres_Monad" (required by "Draft.Challenge2Templates" via "Draft.Challenge2" via "Draft.VTcomp")
### Ambiguous input (line 67 of "$AFP/VerifyThis2018/lib/Dynamic_Array.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Hoare_Triple.hoare_triple'"
###     ("_applC" ("_position" is_nff)
###       ("_cargs" ("_position" dflt)
###         ("_cargs" ("_position" f) ("_position" a))))
###     ("_applC" ("_position" array_set_dyn)
###       ("_cargs" ("_position" dflt)
###         ("_cargs" ("_position" a)
###           ("_cargs" ("_position" i) ("_position" v)))))
###     ("_lambda" ("_position" r)
###       ("_applC" ("_position" is_nff)
###         ("_cargs" ("_position" dflt)
###           ("_cargs"
###             ("_applC" ("_position" f)
###               ("\<^const>Ref.update" ("_position" i) ("_position" v)))
###             ("_position" r)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Hoare_Triple.hoare_triple'"
###     ("_applC" ("_position" is_nff)
###       ("_cargs" ("_position" dflt)
###         ("_cargs" ("_position" f) ("_position" a))))
###     ("_applC" ("_position" array_set_dyn)
###       ("_cargs" ("_position" dflt)
###         ("_cargs" ("_position" a)
###           ("_cargs" ("_position" i) ("_position" v)))))
###     ("_lambda" ("_position" r)
###       ("_applC" ("_position" is_nff)
###         ("_cargs" ("_position" dflt)
###           ("_cargs"
###             ("_Update" ("_position" f)
###               ("_updbind" ("_position" i) ("_position" v)))
###             ("_position" r)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Dynamic_Array"
### 0.452s elapsed time, 1.682s cpu time, 0.561s GC time
Loading theory "Draft.Array_Map_Default" (required by "Draft.Challenge2Templates" via "Draft.Challenge2" via "Draft.VTcomp")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.909s elapsed time, 3.449s cpu time, 0.749s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
(?\<Phi> ==> ?mi <= \<Down>\<^sub>E ?E ?R ?m) ==>
?mi <= \<Down>\<^sub>E ?E ?R (ebind (EASSERT ?\<Phi>) (%_. ?m))
(?\<Phi> ==> ?mi <= \<Down>\<^sub>E ?E ?R ?m) ==>
ebind (EASSUME ?\<Phi>) (%_. ?mi) <= \<Down>\<^sub>E ?E ?R ?m
[| ?\<Phi>; ?mi <= \<Down>\<^sub>E ?E ?R ?m |]
==> ?mi <= \<Down>\<^sub>E ?E ?R (ebind (EASSUME ?\<Phi>) (%_. ?m))
[| ?\<Phi>; ?mi <= \<Down>\<^sub>E ?E ?R ?m |]
==> ebind (EASSERT ?\<Phi>) (%_. ?mi) <= \<Down>\<^sub>E ?E ?R ?m
[| ?mi <= \<Down>\<^sub>E ?E ?R' ?m;
   !!xi x. (xi, x) : ?R' ==> ?fi xi <= \<Down>\<^sub>E ?E ?R (?f x) |]
==> ebind ?mi ?fi <= \<Down>\<^sub>E ?E ?R (ebind ?m ?f)
(?xi, ?x) : ?R ==> ERETURN ?xi <= \<Down>\<^sub>E ?E ?R (ERETURN ?x)
[| (?li, ?l) : \<langle>?S\<rangle>list_rel; (?si, ?s) : ?R;
   !!si s. (si, s) : ?R ==> ?ci si <= \<Down> bool_rel (?c s);
   !!xi x si s.
      [| (xi, x) : ?S; x : set ?l; (si, s) : ?R; inres (?c s) True |]
      ==> ?fi xi si <= \<Down> ?R (?f x s) |]
==> monadic_nfoldli ?li ?ci ?fi ?si
    <= \<Down> ?R (monadic_nfoldli ?l ?c ?f ?s)
[| (?s', ?s) : ?R; !!s' s. (s', s) : ?R ==> ?b' s' <= SPEC (%r. r = ?b s);
   !!s' s. [| (s', s) : ?R; ?b s |] ==> ?f' s' <= \<Down> ?R (?f s) |]
==> monadic_WHILEIT (%_. True) ?b' ?f' ?s'
    <= \<Down> ?R (WHILE\<^sub>T ?b ?f ?s)
[| (?s', ?s) : ?R; !!s' s. [| (s', s) : ?R; ?I s |] ==> ?I' s';
   !!s' s.
      [| (s', s) : ?R; ?I s; ?I' s' |] ==> ?b' s' <= SPEC (%r. r = ?b s);
   !!s' s.
      [| (s', s) : ?R; ?I s; ?I' s'; ?b s |]
      ==> ?f' s' <= \<Down> ?R (?f s) |]
==> monadic_WHILEIT ?I' ?b' ?f' ?s'
    <= \<Down> ?R (WHILE\<^sub>T\<^bsup>?I\<^esup> ?b ?f ?s)
[| (?s', ?s) : ?R; !!s' s. [| (s', s) : ?R; ?I s |] ==> ?I' s';
   !!s' s.
      [| (s', s) : ?R; ?I s; ?I' s' |]
      ==> ?b' s' <= \<Down> bool_rel (?b s);
   !!s' s.
      [| (s', s) : ?R; ?I s; ?I' s'; nofail (?b s); inres (?b s) True |]
      ==> ?f' s' <= \<Down> ?R (?f s) |]
==> monadic_WHILEIT ?I' ?b' ?f' ?s'
    <= \<Down> ?R (monadic_WHILEIT ?I ?b ?f ?s)
### Ambiguous input (line 34 of "$AFP/VerifyThis2018/lib/Array_Map_Default.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("_applC" ("_position" uncurry2)
###         ("_lambda"
###           ("_pttrns" ("_position" k)
###             ("_pttrns" ("_position" v) ("_position" f)))
###           ("_Update" ("_position" f)
###             ("_updbind" ("_position" k) ("_position" v)))))
###       ("_tuple_arg"
###         ("_applC" ("_position" uncurry2) ("_position" op_map_update))))
###     ("\<^const>Sepref_Rules.fref"
###       ("_lambda"
###         ("_pattern" ("_pattern" ("_position" k) ("_position" v))
###           ("_position" m))
###         ("\<^const>HOL.not_equal" ("_position" v) ("_position" dflt)))
###       ("\<^const>Relators.prod_rel_syn"
###         ("\<^const>Relators.prod_rel_syn" ("_position" Id) ("_position" Id))
###         ("\<^const>Relators.fun_rel_syn" ("_position" Id)
###           ("_applC" ("_position" dflt_option_rel_aux) ("_position" dflt))))
###       ("\<^const>Relators.fun_rel_syn" ("_position" Id)
###         ("_applC" ("_position" dflt_option_rel_aux) ("_position" dflt))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("_applC" ("_position" uncurry2)
###         ("_lambda"
###           ("_pttrns" ("_position" k)
###             ("_pttrns" ("_position" v) ("_position" f)))
###           ("_applC" ("_position" f)
###             ("\<^const>Ref.update" ("_position" k) ("_position" v)))))
###       ("_tuple_arg"
###         ("_applC" ("_position" uncurry2) ("_position" op_map_update))))
###     ("\<^const>Sepref_Rules.fref"
###       ("_lambda"
###         ("_pattern" ("_pattern" ("_position" k) ("_position" v))
###           ("_position" m))
###         ("\<^const>HOL.not_equal" ("_position" v) ("_position" dflt)))
###       ("\<^const>Relators.prod_rel_syn"
###         ("\<^const>Relators.prod_rel_syn" ("_position" Id) ("_position" Id))
###         ("\<^const>Relators.fun_rel_syn" ("_position" Id)
###           ("_applC" ("_position" dflt_option_rel_aux) ("_position" dflt))))
###       ("\<^const>Relators.fun_rel_syn" ("_position" Id)
###         ("_applC" ("_position" dflt_option_rel_aux) ("_position" dflt))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
[| ?I' ?x' ==> (?x, ?x') : ?R; !!x x'. [| (x, x') : ?R; ?I' x' |] ==> ?I x;
   !!x x'. [| (x, x') : ?R; ?I x; ?I' x' |] ==> ?b x = ?b' x';
   !!x x'.
      [| (x, x') : ?R; ?b x; ?b' x'; ?I x; ?I' x' |]
      ==> ?f x <= \<Down> ?R (?f' x') |]
==> WHILE\<^sub>T\<^bsup>?I\<^esup> ?b ?f ?x
    <= \<Down> ?R (WHILE\<^sub>T\<^bsup>?I'\<^esup> ?b' ?f' ?x')
### Ambiguous input (line 105 of "$AFP/VerifyThis2018/lib/Array_Map_Default.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("_applC" ("_position" uncurry2)
###         ("_applC" ("_position" amd_update) ("_position" dflt)))
###       ("_tuple_arg"
###         ("_applC" ("_position" uncurry2)
###           ("\<^const>Misc.comp3" ("_position" RETURN)
###             ("_lambda"
###               ("_pttrns" ("_position" k)
###                 ("_pttrns" ("_position" v) ("_position" f)))
###               ("_applC" ("_position" f)
###                 ("\<^const>Ref.update" ("_position" k)
###                   ("_position" v))))))))
###     ("\<^const>Sepref_Rules.hfreft"
###       ("\<^const>Sepref_Rules.hfprod"
###         ("\<^const>Sepref_Rules.hfprod"
###           ("\<^const>Sepref_Rules.hfkeep" ("_position" id_assn))
###           ("\<^const>Sepref_Rules.hfkeep" ("_position" id_assn)))
###         ("\<^const>Sepref_Rules.hfdrop"
###           ("_applC" ("_position" is_nff) ("_position" dflt))))
###       ("_applC" ("_position" is_nff) ("_position" dflt)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("_applC" ("_position" uncurry2)
###         ("_applC" ("_position" amd_update) ("_position" dflt)))
###       ("_tuple_arg"
###         ("_applC" ("_position" uncurry2)
###           ("\<^const>Misc.comp3" ("_position" RETURN)
###             ("_lambda"
###               ("_pttrns" ("_position" k)
###                 ("_pttrns" ("_position" v) ("_position" f)))
###               ("_Update" ("_position" f)
###                 ("_updbind" ("_position" k) ("_position" v))))))))
###     ("\<^const>Sepref_Rules.hfreft"
###       ("\<^const>Sepref_Rules.hfprod"
###         ("\<^const>Sepref_Rules.hfprod"
###           ("\<^const>Sepref_Rules.hfkeep" ("_position" id_assn))
###           ("\<^const>Sepref_Rules.hfkeep" ("_position" id_assn)))
###         ("\<^const>Sepref_Rules.hfdrop"
###           ("_applC" ("_position" is_nff) ("_position" dflt))))
###       ("_applC" ("_position" is_nff) ("_position" dflt)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Cannot skip proof of schematic goal statement
(uncurry0 (amd_empty dflt), uncurry0 (RETURN op_map_empty))
: unit_assn\<^sup>k \<rightarrow>\<^sub>a amd_assn dflt ?K ?V
(uncurry0 (amd_empty dflt), uncurry0 mop_map_empty)
: unit_assn\<^sup>k \<rightarrow>\<^sub>a amd_assn dflt ?K ?V
### Cannot skip proof of schematic goal statement
Found termination order: "size <*mlex*> {}"
CONSTRAINT is_pure ?K ==>
(uncurry (amd_lookup dflt), uncurry (RETURN \<circ>\<circ> op_map_lookup))
: ?K\<^sup>k *\<^sub>a
  (amd_assn dflt ?K
    ?V)\<^sup>k \<rightarrow>\<^sub>a dflt_option_assn dflt ?V
CONSTRAINT is_pure ?K ==>
(uncurry (amd_lookup dflt), uncurry mop_map_lookup)
: ?K\<^sup>k *\<^sub>a
  (amd_assn dflt ?K
    ?V)\<^sup>k \<rightarrow>\<^sub>a dflt_option_assn dflt ?V
### Cannot skip proof of schematic goal statement
[| CONSTRAINT (IS_PURE single_valued) ?K;
   CONSTRAINT (IS_PURE IS_LEFT_UNIQUE) ?K |]
==> (uncurry (amd_delete dflt),
     uncurry (RETURN \<circ>\<circ> op_map_delete))
    : ?K\<^sup>k *\<^sub>a
      (amd_assn dflt ?K
        ?V)\<^sup>d \<rightarrow>\<^sub>a amd_assn dflt ?K ?V
[| CONSTRAINT (IS_PURE single_valued) ?K;
   CONSTRAINT (IS_PURE IS_LEFT_UNIQUE) ?K |]
==> (uncurry (amd_delete dflt), uncurry mop_map_delete)
    : ?K\<^sup>k *\<^sub>a
      (amd_assn dflt ?K
        ?V)\<^sup>d \<rightarrow>\<^sub>a amd_assn dflt ?K ?V
### Cannot skip proof of schematic goal statement
### theory "HOL-Library.Tree"
### 2.080s elapsed time, 7.222s cpu time, 1.237s GC time
Loading theory "Draft.Templates" (required by "Draft.Challenge2Templates" via "Draft.ExtrEqs")
[| CONSTRAINT (IS_PURE single_valued) ?K;
   CONSTRAINT (IS_PURE IS_LEFT_UNIQUE) ?K; CONSTRAINT is_pure ?V;
   CONSTRAINT (is_unused_elem dflt) ?V |]
==> (uncurry2 (amd_update dflt),
     uncurry2 (RETURN \<circ>\<circ>\<circ> op_map_update))
    : ?K\<^sup>k *\<^sub>a ?V\<^sup>k *\<^sub>a
      (amd_assn dflt ?K
        ?V)\<^sup>d \<rightarrow>\<^sub>a amd_assn dflt ?K ?V
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.056s elapsed time, 0.185s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Challenge2Templates")
[| CONSTRAINT (IS_PURE single_valued) ?K;
   CONSTRAINT (IS_PURE IS_LEFT_UNIQUE) ?K; CONSTRAINT is_pure ?V;
   CONSTRAINT (is_unused_elem dflt) ?V |]
==> (uncurry2 (amd_update dflt), uncurry2 mop_map_update)
    : ?K\<^sup>k *\<^sub>a ?V\<^sup>k *\<^sub>a
      (amd_assn dflt ?K
        ?V)\<^sup>d \<rightarrow>\<^sub>a amd_assn dflt ?K ?V
dflt_None ::\<^sub>i TYPE(?'a option)
dflt_Some ::\<^sub>i TYPE(?'a => ?'a option)
### theory "Draft.Exc_Nres_Monad"
### 1.100s elapsed time, 3.396s cpu time, 0.371s GC time
locale dflt_option
  fixes A :: "'a => 'c => assn"
    and dflt :: "'c"
    and eq :: "'c => 'c => bool Heap"
  assumes "dflt_option A dflt eq"
### theory "Draft.Array_Map_Default"
### 1.169s elapsed time, 3.533s cpu time, 0.413s GC time
Loading theory "Draft.VTcomp" (required by "Draft.Challenge2Templates" via "Draft.Challenge2")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.533s elapsed time, 1.158s cpu time, 0.101s GC time
op_list_blit ::\<^sub>i
TYPE(?'a list => nat => ?'a list => nat => nat => ?'a list)
mop_list_blit ::\<^sub>i
TYPE(?'a list => nat => ?'a list => nat => nat => ?'a list nres)
### Cannot skip proof of schematic goal statement
(uncurry2
  (uncurry2
    (%src si dst di len. blit src si dst di len >>= (%_. return dst))),
 uncurry2 (uncurry2 mop_list_blit))
: (array_assn ?A)\<^sup>k *\<^sub>a nat_assn\<^sup>k *\<^sub>a
  (array_assn ?A)\<^sup>d *\<^sub>a
  nat_assn\<^sup>k *\<^sub>a
  nat_assn\<^sup>k \<rightarrow>\<^sub>a array_assn ?A
(uncurry2
  (uncurry2
    (%src si dst di len. blit src si dst di len >>= (%_. return dst))),
 uncurry2
  (uncurry2 (%x1 x2. RETURN \<circ>\<circ>\<circ> op_list_blit x1 x2)))
: [pre_list_blit]\<^sub>a (array_assn ?A)\<^sup>k *\<^sub>a
                          nat_assn\<^sup>k *\<^sub>a
                          (array_assn ?A)\<^sup>d *\<^sub>a
                          nat_assn\<^sup>k *\<^sub>a
                          nat_assn\<^sup>k \<rightarrow> array_assn ?A
### theory "Draft.VTcomp"
### 1.159s elapsed time, 1.646s cpu time, 0.141s GC time
Loading theory "Draft.Challenge2" (required by "Draft.Challenge2Templates")
Proofs for inductive predicate(s) "valid"
  Proving monotonicity ...
Proofs for inductive predicate(s) "valid'"
  Proving monotonicity ...
[| ?lb <= ?ub; ?I ?lb ?\<sigma>0.0;
   !!i \<sigma>.
      [| ?lb <= i; i < ?ub; ?I i \<sigma>; ?c \<sigma> |]
      ==> ?f i \<sigma> <= SPEC (?I (i + 1));
   !!i \<sigma>.
      [| ?lb <= i; i <= ?ub; ?I i \<sigma>; ~ ?c \<sigma> |]
      ==> ?P \<sigma>;
   !!\<sigma>. [| ?I ?ub \<sigma>; ?c \<sigma> |] ==> ?P \<sigma> |]
==> nfoldli [?lb..<?ub] ?c ?f ?\<sigma>0.0 <= SPEC ?P
### Cannot skip proof of schematic goal statement
icount_impl ==
%xi. Array.new (xi + 1) 0 >>=
     (%x'. heap_array_set x' 0 1 >>=
           (%x. heap_array_set x 1 1 >>=
                (%x. heap_array_set x 2 1 >>=
                     (%x. heap_array_set x 3 2 >>=
                          (%x'b. imp_for' 4 (xi + 1)
                                  (%xf \<sigma>.
imp_for' 3 xf
 (%xj \<sigma>'''.
     Array.nth \<sigma> (xf - xj - 1) >>=
     (%x'i. return (\<sigma>''' + x'i)))
 0 >>=
(%x'f. Array.nth \<sigma> (xf - 1) >>=
       (%x. heap_array_set \<sigma> xf (x + 1 + x'f))))
                                  x'b >>=
                                 (%x'd. Array.nth x'd xi))))))
(icount_impl, icount) : nat_assn\<^sup>k \<rightarrow>\<^sub>a nat_assn
See theory exports
See theory exports
See theory exports
See theory exports
Proofs for inductive predicate(s) "valid_point"
  Proving monotonicity ...
### theory "Draft.Challenge2"
### 3.518s elapsed time, 4.088s cpu time, 0.831s GC time
Loading theory "Draft.Challenge2Templates"
val templateLemmas =
   [("Challenge2.valid_line_just_B", "valid (replicate ?n B)",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("Challenge2.valid_valid_line", "valid ?l = valid_line ?l",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Challenge2.valid_eq_valid'", "valid' ?l = valid ?l",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Challenge2.valid_valid'", "valid ?l ==> valid' ?l",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Challenge2.valid'_valid", "valid' ?l ==> valid ?l",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Challenge2.valid_prepend_B_iff", "valid (B # ?xs) = valid ?xs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("Challenge2.valid_line_prepend_B_iff",
     "valid_line (B # ?xs) = valid_line ?xs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("Challenge2.valid_line_prepend_B",
     "valid_line ?xs ==> valid_line (B # ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Challenge2.valid_line_drop_B",
     "valid_line (B # ?xs) ==> valid_line ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_hole 0),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 2, template_var 0)))),
    ("Challenge2.finite_valid_length",
     "finite {l. length l = ?n & valid l}",
     template_predicate
      (
         template_app
          (template_hole 5, template_app (template_hole 4, t_empty))
         )),
    ("Challenge2.valid_red", "3 <= ?n ==> valid (replicate ?n R)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 5,
            template_app (template_hole 4, template_hole 3)),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Challenge2.valid_line_aux", "{l. length l = ?n & valid l} ~= {}",
     template_negation
      (
         template_equation
          (template_app (template_hole 5, t_empty), template_hole 0)
         )),
    ("Challenge2.valid_lineI",
     "(!!i. i < length ?l ==> valid_point ?l i) ==> valid_line ?l",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Challenge2.icount_correct",
     "2 < ?M ==> icount ?M <= SPEC (%r. r = lcount ?M)",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 8,
            template_app (template_hole 7, template_hole 6)),
          template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 4, template_var 0),
         template_app
          (template_hole 3, template_app (template_hole 2, t_empty))))),
    ("Challenge2.valid_drop_B",
     "[| valid_point (B # ?xs) ?i; 0 < ?i |] ==> valid_point ?xs (?i - 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_var 1)),
              template_var 0)
            ),
        template_inequation (less_than, template_hole 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Challenge2.valid_B_first",
     "[| valid_point ?xs ?i; ?i < length ?xs |]
      ==> valid_point (B # ?xs) (?i + 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            ),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 4, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Challenge2.icount_impl_correct",
     "2 < ?M ==> <emp> icount_impl ?M <%r. \<up> (r = lcount ?M)>\<^sub>t",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 10,
            template_app (template_hole 9, template_hole 8)),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, template_hole 6),
               template_app (template_hole 5, template_var 0)),
             t_empty)
           ))),
    ("Challenge2.replicate_iff",
     "(ALL i<length ?l. ?l ! i = R) = (EX n. ?l = replicate n R)",
     template_equation
      (template_app (template_hole 9, t_empty),
       template_app (template_hole 2, t_empty))),
    ("Challenge2.replicate_unequal_aux",
     "?x < ?y ==> replicate ?x R @ B # ?l ~= replicate ?y R @ B # ?l'",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2)],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_hole 2)),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_hole 2)),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0)))
           ))),
    ("Challenge2.replicate_Cons_eq",
     "(replicate ?n ?x = ?y # ?ys) =
      (EX n'. ?n = Suc n' & ?x = ?y & replicate n' ?x = ?ys)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("Challenge2.replicate_iff2",
     "?n < length ?l ==>
      (ALL i<?n. ?l ! i = R) = (EX l'. ?l = replicate ?n R @ l')",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 10, template_var 0))],
       template_equation
        (template_app (template_hole 8, t_empty),
         template_app (template_hole 3, t_empty)))),
    ("Challenge2.lcrec",
     "3 < ?n ==>
      lcount ?n =
      lcount (?n - 1) + 1 + (SUM i = 3..<?n. lcount (?n - i - 1))",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 9,
            template_app (template_hole 8, template_hole 7)),
          template_var 0)],
       template_equation
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 2))),
               template_hole 2)),
           template_app
            (template_app (template_hole 1, t_empty),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_hole 9,
                   template_app (template_hole 8, template_hole 7))),
               template_var 0)))))),
    ("Challenge2.sum_spec",
     "[| ?l1 <= ?u1; !!i. [| ?l1 <= i; i < ?u1 |] ==> ?\<Phi>1 i;
         SPEC (%r. r = sum ?f1 {?l1..<?u1}) <= SPEC ?Postcond |]
      ==> sum_prog ?\<Phi>1 ?l1 ?u1 ?f1 <= SPEC ?Postcond",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 5, template_app (template_hole 4, t_empty)),
          template_app
           (template_hole 5,
            template_app (template_hole 4, template_var 0)))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 4),
             template_var 3),
           template_var 1),
         template_app
          (template_hole 5,
           template_app (template_hole 4, template_var 0))))),
    ("Challenge2.valid_split",
     "valid ?l =
      (?l = [] |
       ?l ! 0 = B & valid (tl ?l) |
       3 <= length ?l & (ALL i<length ?l. ?l ! i = R) |
       (EX j<length ?l.
           3 <= j &
           (ALL i<j. ?l ! i = R) & ?l ! j = B & valid (drop (j + 1) ?l)))",
     template_implication
      ([template_predicate
         (template_app (template_hole 22, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 21,
               template_app
                (template_app (template_hole 20, template_var 0),
                 template_hole 19)),
             template_app
              (template_app
                (template_hole 21,
                 template_app
                  (template_app
                    (template_hole 18,
                     template_app
                      (template_app
                        (template_hole 17,
                         template_app
                          (template_app (template_hole 16, template_var 0),
                           template_hole 15)),
                       template_hole 14)),
                   template_app
                    (template_hole 22,
                     template_app (template_hole 13, template_var 0)))),
               template_app
                (template_app
                  (template_hole 21,
                   template_app
                    (template_app
                      (template_hole 18,
                       template_app
                        (template_app
                          (template_hole 12,
                           template_app
                            (template_hole 11,
                             template_app
                              (template_hole 10, template_hole 9))),
                         template_app (template_hole 8, template_var 0))),
                     template_app (template_hole 7, t_empty))),
                 template_app (template_hole 3, t_empty))))
           ))),
    ("Challenge2.valid_line_split",
     "valid_line ?l =
      (?l = [] |
       ?l ! 0 = B & valid_line (tl ?l) |
       3 <= length ?l & (ALL i<length ?l. ?l ! i = R) |
       (EX j<length ?l.
           3 <= j &
           (ALL i<j. ?l ! i = R) &
           ?l ! j = B & valid_line (drop (j + 1) ?l)))",
     template_implication
      ([template_predicate
         (template_app (template_hole 22, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 21,
               template_app
                (template_app (template_hole 20, template_var 0),
                 template_hole 19)),
             template_app
              (template_app
                (template_hole 21,
                 template_app
                  (template_app
                    (template_hole 18,
                     template_app
                      (template_app
                        (template_hole 17,
                         template_app
                          (template_app (template_hole 16, template_var 0),
                           template_hole 15)),
                       template_hole 14)),
                   template_app
                    (template_hole 22,
                     template_app (template_hole 13, template_var 0)))),
               template_app
                (template_app
                  (template_hole 21,
                   template_app
                    (template_app
                      (template_hole 18,
                       template_app
                        (template_app
                          (template_hole 12,
                           template_app
                            (template_hole 11,
                             template_app
                              (template_hole 10, template_hole 9))),
                         template_app (template_hole 8, template_var 0))),
                     template_app (template_hole 7, t_empty))),
                 template_app (template_hole 3, t_empty))))
           ))),
    ("Challenge2.valid_line_cases",
     "valid_line ?l ==>
      ?l = [] |
      ?l ! 0 = B & valid_line (tl ?l) |
      3 <= length ?l & (ALL i<length ?l. ?l ! i = R) |
      (EX j<length ?l.
          3 <= j &
          (ALL i<j. ?l ! i = R) &
          ?l ! j = B & valid_line (drop (j + 1) ?l))",
     template_implication
      ([template_predicate
         (template_app (template_hole 22, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 21,
               template_app
                (template_app (template_hole 20, template_var 0),
                 template_hole 19)),
             template_app
              (template_app
                (template_hole 21,
                 template_app
                  (template_app
                    (template_hole 18,
                     template_app
                      (template_app
                        (template_hole 17,
                         template_app
                          (template_app (template_hole 16, template_var 0),
                           template_hole 15)),
                       template_hole 14)),
                   template_app
                    (template_hole 22,
                     template_app (template_hole 13, template_var 0)))),
               template_app
                (template_app
                  (template_hole 21,
                   template_app
                    (template_app
                      (template_hole 18,
                       template_app
                        (template_app
                          (template_hole 12,
                           template_app
                            (template_hole 11,
                             template_app
                              (template_hole 10, template_hole 9))),
                         template_app (template_hole 8, template_var 0))),
                     template_app (template_hole 7, t_empty))),
                 template_app (template_hole 3, t_empty))))
           ))),
    ("Challenge2.cases_valid_line",
     "?l = [] |
      ?l ! 0 = B & valid_line (tl ?l) |
      3 <= length ?l & (ALL i<length ?l. ?l ! i = R) |
      (EX j<length ?l.
          3 <= j &
          (ALL i<j. ?l ! i = R) &
          ?l ! j = B & valid_line (drop (j + 1) ?l)) ==>
      valid_line ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 22,
                template_app
                 (template_app (template_hole 21, template_var 0),
                  template_hole 20)),
              template_app
               (template_app
                 (template_hole 22,
                  template_app
                   (template_app
                     (template_hole 19,
                      template_app
                       (template_app
                         (template_hole 18,
                          template_app
                           (template_app (template_hole 17, template_var 0),
                            template_hole 16)),
                        template_hole 15)),
                    template_app
                     (template_hole 14,
                      template_app (template_hole 13, template_var 0)))),
                template_app
                 (template_app
                   (template_hole 22,
                    template_app
                     (template_app
                       (template_hole 19,
                        template_app
                         (template_app
                           (template_hole 12,
                            template_app
                             (template_hole 11,
                              template_app
                               (template_hole 10, template_hole 9))),
                          template_app (template_hole 8, template_var 0))),
                      template_app (template_hole 7, t_empty))),
                  template_app (template_hole 3, t_empty))))
            )],
       template_predicate
        (template_app (template_hole 14, template_var 0))))]:
   (string * thm * template) list
### theory "Draft.Challenge2Templates"
### 1.236s elapsed time, 2.098s cpu time, 0.974s GC time
val it = (): unit
