Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Dynamic_ArrayTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Dynamic_ArrayTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.Dynamic_ArrayTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Tree" (required by "Draft.Dynamic_ArrayTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.138s elapsed time, 0.561s cpu time, 0.057s GC time
Loading theory "Draft.Dynamic_Array" (required by "Draft.Dynamic_ArrayTemplates")
### theory "HOL-Library.Set_Algebras"
### 0.220s elapsed time, 0.889s cpu time, 0.057s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Dynamic_ArrayTemplates" via "Draft.ExtrEqs")
op_list_grow ::\<^sub>i TYPE(?'a list => nat => ?'a => ?'a list)
mop_list_grow ::\<^sub>i TYPE(?'a list => nat => ?'a => ?'a list nres)
consts
  shift :: "'a list => 'a stream => 'a stream"
### Ambiguous input (line 61 of "$AFP/VerifyThis2018/lib/Dynamic_Array.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Orderings.ord_class.less" ("_position" i)
###         ("_applC" ("_position" length) ("_position" l)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" nff_\<alpha>)
###         ("_cargs" ("_position" dflt)
###           ("_applC" ("_position" l)
###             ("_list"
###               ("\<^const>Ref.update" ("_position" i) ("_position" v))))))
###       ("_Update"
###         ("_applC" ("_position" nff_\<alpha>)
###           ("_cargs" ("_position" dflt) ("_position" l)))
###         ("_updbind" ("_position" i) ("_position" v))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Orderings.ord_class.less" ("_position" i)
###         ("_applC" ("_position" length) ("_position" l)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" nff_\<alpha>)
###         ("_cargs" ("_position" dflt)
###           ("_LUpdate" ("_position" l)
###             ("_lupdbind" ("_position" i) ("_position" v)))))
###       ("_Update"
###         ("_applC" ("_position" nff_\<alpha>)
###           ("_cargs" ("_position" dflt) ("_position" l)))
###         ("_updbind" ("_position" i) ("_position" v))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Orderings.ord_class.less" ("_position" i)
###         ("_applC" ("_position" length) ("_position" l)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" nff_\<alpha>)
###         ("_cargs" ("_position" dflt)
###           ("_applC" ("_position" l)
###             ("_list"
###               ("\<^const>Ref.update" ("_position" i) ("_position" v))))))
###       ("_applC"
###         ("_applC" ("_position" nff_\<alpha>)
###           ("_cargs" ("_position" dflt) ("_position" l)))
###         ("\<^const>Ref.update" ("_position" i) ("_position" v))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Orderings.ord_class.less" ("_position" i)
###         ("_applC" ("_position" length) ("_position" l)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" nff_\<alpha>)
###         ("_cargs" ("_position" dflt)
###           ("_LUpdate" ("_position" l)
###             ("_lupdbind" ("_position" i) ("_position" v)))))
###       ("_applC"
###         ("_applC" ("_position" nff_\<alpha>)
###           ("_cargs" ("_position" dflt) ("_position" l)))
###         ("\<^const>Ref.update" ("_position" i) ("_position" v))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### Ambiguous input (line 67 of "$AFP/VerifyThis2018/lib/Dynamic_Array.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Hoare_Triple.hoare_triple'"
###     ("_applC" ("_position" is_nff)
###       ("_cargs" ("_position" dflt)
###         ("_cargs" ("_position" f) ("_position" a))))
###     ("_applC" ("_position" array_set_dyn)
###       ("_cargs" ("_position" dflt)
###         ("_cargs" ("_position" a)
###           ("_cargs" ("_position" i) ("_position" v)))))
###     ("_lambda" ("_position" r)
###       ("_applC" ("_position" is_nff)
###         ("_cargs" ("_position" dflt)
###           ("_cargs"
###             ("_applC" ("_position" f)
###               ("\<^const>Ref.update" ("_position" i) ("_position" v)))
###             ("_position" r)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Hoare_Triple.hoare_triple'"
###     ("_applC" ("_position" is_nff)
###       ("_cargs" ("_position" dflt)
###         ("_cargs" ("_position" f) ("_position" a))))
###     ("_applC" ("_position" array_set_dyn)
###       ("_cargs" ("_position" dflt)
###         ("_cargs" ("_position" a)
###           ("_cargs" ("_position" i) ("_position" v)))))
###     ("_lambda" ("_position" r)
###       ("_applC" ("_position" is_nff)
###         ("_cargs" ("_position" dflt)
###           ("_cargs"
###             ("_Update" ("_position" f)
###               ("_updbind" ("_position" i) ("_position" v)))
###             ("_position" r)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Dynamic_Array"
### 0.315s elapsed time, 1.236s cpu time, 0.109s GC time
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.889s elapsed time, 3.107s cpu time, 0.402s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.766s elapsed time, 2.417s cpu time, 0.345s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.890s elapsed time, 4.650s cpu time, 0.984s GC time
Loading theory "Draft.Templates" (required by "Draft.Dynamic_ArrayTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.048s elapsed time, 0.064s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Dynamic_ArrayTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.463s elapsed time, 0.514s cpu time, 0.065s GC time
Loading theory "Draft.Dynamic_ArrayTemplates"
val templateLemmas =
   [("Dynamic_Array.dyn_array_new_sz_rl",
     "<emp> dyn_array_new_sz ?dflt ?n <is_nff ?dflt (%_. ?dflt)>",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           t_empty)
         )),
    ("Dynamic_Array.array_grow'_rule",
     "<?a \<mapsto>\<^sub>a
       ?la> array_grow' ?a ?n
             ?x <%r. r \<mapsto>\<^sub>a (?la @ replicate ?n ?x)>\<^sub>t",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_var 2)),
             template_app
              (template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 1),
               template_var 0)),
           t_empty)
         )),
    ("Dynamic_Array.nff_\<alpha>_upd",
     "?i < length ?l ==>
      nff_\<alpha> ?dflt (?l[?i := ?v]) = (nff_\<alpha> ?dflt ?l)
      (?i := ?v)",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 3),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 2)),
             template_var 3),
           template_var 0)))),
    ("Dynamic_Array.array_get_dyn_rule",
     "<is_nff ?dflt ?f ?a> array_get_dyn ?dflt ?a ?i
      <%r. is_nff ?dflt ?f ?a * \<up> (r = ?f ?i)>",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app (template_hole 4, template_var 3),
                   template_var 2),
                 template_var 1)),
             template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 1),
               template_var 0)),
           t_empty)
         )),
    ("Dynamic_Array.array_set_dyn_rule",
     "<is_nff ?dflt ?f
        ?a> array_set_dyn ?dflt ?a ?i
             ?v <is_nff ?dflt (?f(?i := ?v))>\<^sub>t",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app (template_hole 4, template_var 4),
                   template_var 3),
                 template_var 2)),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 4),
                   template_var 2),
                 template_var 1),
               template_var 0)),
           t_empty)
         ))]:
   (string * thm * template) list
### theory "Draft.Dynamic_ArrayTemplates"
### 0.563s elapsed time, 0.749s cpu time, 0.084s GC time
val it = (): unit
