Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Array_Map_DefaultTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.Array_Map_DefaultTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Tree" (required by "Draft.Array_Map_DefaultTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Array_Map_DefaultTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.147s elapsed time, 0.582s cpu time, 0.067s GC time
Loading theory "Draft.Dynamic_Array" (required by "Draft.Array_Map_DefaultTemplates" via "Draft.Array_Map_Default")
### theory "HOL-Library.Set_Algebras"
### 0.296s elapsed time, 1.177s cpu time, 0.067s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Array_Map_DefaultTemplates" via "Draft.ExtrEqs")
op_list_grow ::\<^sub>i TYPE(?'a list => nat => ?'a => ?'a list)
mop_list_grow ::\<^sub>i TYPE(?'a list => nat => ?'a => ?'a list nres)
consts
  shift :: "'a list => 'a stream => 'a stream"
### Ambiguous input (line 61 of "$AFP/VerifyThis2018/lib/Dynamic_Array.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Orderings.ord_class.less" ("_position" i)
###         ("_applC" ("_position" length) ("_position" l)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" nff_\<alpha>)
###         ("_cargs" ("_position" dflt)
###           ("_applC" ("_position" l)
###             ("_list"
###               ("\<^const>Ref.update" ("_position" i) ("_position" v))))))
###       ("_Update"
###         ("_applC" ("_position" nff_\<alpha>)
###           ("_cargs" ("_position" dflt) ("_position" l)))
###         ("_updbind" ("_position" i) ("_position" v))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Orderings.ord_class.less" ("_position" i)
###         ("_applC" ("_position" length) ("_position" l)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" nff_\<alpha>)
###         ("_cargs" ("_position" dflt)
###           ("_LUpdate" ("_position" l)
###             ("_lupdbind" ("_position" i) ("_position" v)))))
###       ("_Update"
###         ("_applC" ("_position" nff_\<alpha>)
###           ("_cargs" ("_position" dflt) ("_position" l)))
###         ("_updbind" ("_position" i) ("_position" v))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Orderings.ord_class.less" ("_position" i)
###         ("_applC" ("_position" length) ("_position" l)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" nff_\<alpha>)
###         ("_cargs" ("_position" dflt)
###           ("_applC" ("_position" l)
###             ("_list"
###               ("\<^const>Ref.update" ("_position" i) ("_position" v))))))
###       ("_applC"
###         ("_applC" ("_position" nff_\<alpha>)
###           ("_cargs" ("_position" dflt) ("_position" l)))
###         ("\<^const>Ref.update" ("_position" i) ("_position" v))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Orderings.ord_class.less" ("_position" i)
###         ("_applC" ("_position" length) ("_position" l)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" nff_\<alpha>)
###         ("_cargs" ("_position" dflt)
###           ("_LUpdate" ("_position" l)
###             ("_lupdbind" ("_position" i) ("_position" v)))))
###       ("_applC"
###         ("_applC" ("_position" nff_\<alpha>)
###           ("_cargs" ("_position" dflt) ("_position" l)))
###         ("\<^const>Ref.update" ("_position" i) ("_position" v))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 67 of "$AFP/VerifyThis2018/lib/Dynamic_Array.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Hoare_Triple.hoare_triple'"
###     ("_applC" ("_position" is_nff)
###       ("_cargs" ("_position" dflt)
###         ("_cargs" ("_position" f) ("_position" a))))
###     ("_applC" ("_position" array_set_dyn)
###       ("_cargs" ("_position" dflt)
###         ("_cargs" ("_position" a)
###           ("_cargs" ("_position" i) ("_position" v)))))
###     ("_lambda" ("_position" r)
###       ("_applC" ("_position" is_nff)
###         ("_cargs" ("_position" dflt)
###           ("_cargs"
###             ("_applC" ("_position" f)
###               ("\<^const>Ref.update" ("_position" i) ("_position" v)))
###             ("_position" r)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Hoare_Triple.hoare_triple'"
###     ("_applC" ("_position" is_nff)
###       ("_cargs" ("_position" dflt)
###         ("_cargs" ("_position" f) ("_position" a))))
###     ("_applC" ("_position" array_set_dyn)
###       ("_cargs" ("_position" dflt)
###         ("_cargs" ("_position" a)
###           ("_cargs" ("_position" i) ("_position" v)))))
###     ("_lambda" ("_position" r)
###       ("_applC" ("_position" is_nff)
###         ("_cargs" ("_position" dflt)
###           ("_cargs"
###             ("_Update" ("_position" f)
###               ("_updbind" ("_position" i) ("_position" v)))
###             ("_position" r)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for coinductive predicate(s) "streamsp"
### theory "Draft.Dynamic_Array"
### 0.312s elapsed time, 1.223s cpu time, 0.089s GC time
Loading theory "Draft.DRAT_Misc" (required by "Draft.Array_Map_DefaultTemplates" via "Draft.Array_Map_Default")
  Proving monotonicity ...
### theory "Draft.DRAT_Misc"
### 0.066s elapsed time, 0.249s cpu time, 0.049s GC time
Loading theory "Draft.Array_Map_Default" (required by "Draft.Array_Map_DefaultTemplates")
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.898s elapsed time, 3.482s cpu time, 0.351s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.953s elapsed time, 3.414s cpu time, 0.833s GC time
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 34 of "$AFP/VerifyThis2018/lib/Array_Map_Default.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("_applC" ("_position" uncurry2)
###         ("_lambda"
###           ("_pttrns" ("_position" k)
###             ("_pttrns" ("_position" v) ("_position" f)))
###           ("_Update" ("_position" f)
###             ("_updbind" ("_position" k) ("_position" v)))))
###       ("_tuple_arg"
###         ("_applC" ("_position" uncurry2) ("_position" op_map_update))))
###     ("\<^const>Sepref_Rules.fref"
###       ("_lambda"
###         ("_pattern" ("_pattern" ("_position" k) ("_position" v))
###           ("_position" m))
###         ("\<^const>HOL.not_equal" ("_position" v) ("_position" dflt)))
###       ("\<^const>Relators.prod_rel_syn"
###         ("\<^const>Relators.prod_rel_syn" ("_position" Id) ("_position" Id))
###         ("\<^const>Relators.fun_rel_syn" ("_position" Id)
###           ("_applC" ("_position" dflt_option_rel_aux) ("_position" dflt))))
###       ("\<^const>Relators.fun_rel_syn" ("_position" Id)
###         ("_applC" ("_position" dflt_option_rel_aux) ("_position" dflt))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("_applC" ("_position" uncurry2)
###         ("_lambda"
###           ("_pttrns" ("_position" k)
###             ("_pttrns" ("_position" v) ("_position" f)))
###           ("_applC" ("_position" f)
###             ("\<^const>Ref.update" ("_position" k) ("_position" v)))))
###       ("_tuple_arg"
###         ("_applC" ("_position" uncurry2) ("_position" op_map_update))))
###     ("\<^const>Sepref_Rules.fref"
###       ("_lambda"
###         ("_pattern" ("_pattern" ("_position" k) ("_position" v))
###           ("_position" m))
###         ("\<^const>HOL.not_equal" ("_position" v) ("_position" dflt)))
###       ("\<^const>Relators.prod_rel_syn"
###         ("\<^const>Relators.prod_rel_syn" ("_position" Id) ("_position" Id))
###         ("\<^const>Relators.fun_rel_syn" ("_position" Id)
###           ("_applC" ("_position" dflt_option_rel_aux) ("_position" dflt))))
###       ("\<^const>Relators.fun_rel_syn" ("_position" Id)
###         ("_applC" ("_position" dflt_option_rel_aux) ("_position" dflt))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 105 of "$AFP/VerifyThis2018/lib/Array_Map_Default.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("_applC" ("_position" uncurry2)
###         ("_applC" ("_position" amd_update) ("_position" dflt)))
###       ("_tuple_arg"
###         ("_applC" ("_position" uncurry2)
###           ("\<^const>Misc.comp3" ("_position" RETURN)
###             ("_lambda"
###               ("_pttrns" ("_position" k)
###                 ("_pttrns" ("_position" v) ("_position" f)))
###               ("_applC" ("_position" f)
###                 ("\<^const>Ref.update" ("_position" k)
###                   ("_position" v))))))))
###     ("\<^const>Sepref_Rules.hfreft"
###       ("\<^const>Sepref_Rules.hfprod"
###         ("\<^const>Sepref_Rules.hfprod"
###           ("\<^const>Sepref_Rules.hfkeep" ("_position" id_assn))
###           ("\<^const>Sepref_Rules.hfkeep" ("_position" id_assn)))
###         ("\<^const>Sepref_Rules.hfdrop"
###           ("_applC" ("_position" is_nff) ("_position" dflt))))
###       ("_applC" ("_position" is_nff) ("_position" dflt)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("_applC" ("_position" uncurry2)
###         ("_applC" ("_position" amd_update) ("_position" dflt)))
###       ("_tuple_arg"
###         ("_applC" ("_position" uncurry2)
###           ("\<^const>Misc.comp3" ("_position" RETURN)
###             ("_lambda"
###               ("_pttrns" ("_position" k)
###                 ("_pttrns" ("_position" v) ("_position" f)))
###               ("_Update" ("_position" f)
###                 ("_updbind" ("_position" k) ("_position" v))))))))
###     ("\<^const>Sepref_Rules.hfreft"
###       ("\<^const>Sepref_Rules.hfprod"
###         ("\<^const>Sepref_Rules.hfprod"
###           ("\<^const>Sepref_Rules.hfkeep" ("_position" id_assn))
###           ("\<^const>Sepref_Rules.hfkeep" ("_position" id_assn)))
###         ("\<^const>Sepref_Rules.hfdrop"
###           ("_applC" ("_position" is_nff) ("_position" dflt))))
###       ("_applC" ("_position" is_nff) ("_position" dflt)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Cannot skip proof of schematic goal statement
(uncurry0 (amd_empty dflt), uncurry0 (RETURN op_map_empty))
: unit_assn\<^sup>k \<rightarrow>\<^sub>a amd_assn dflt ?K ?V
(uncurry0 (amd_empty dflt), uncurry0 mop_map_empty)
: unit_assn\<^sup>k \<rightarrow>\<^sub>a amd_assn dflt ?K ?V
Found termination order: "size <*mlex*> {}"
### Cannot skip proof of schematic goal statement
CONSTRAINT is_pure ?K ==>
(uncurry (amd_lookup dflt), uncurry (RETURN \<circ>\<circ> op_map_lookup))
: ?K\<^sup>k *\<^sub>a
  (amd_assn dflt ?K
    ?V)\<^sup>k \<rightarrow>\<^sub>a dflt_option_assn dflt ?V
CONSTRAINT is_pure ?K ==>
(uncurry (amd_lookup dflt), uncurry mop_map_lookup)
: ?K\<^sup>k *\<^sub>a
  (amd_assn dflt ?K
    ?V)\<^sup>k \<rightarrow>\<^sub>a dflt_option_assn dflt ?V
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Cannot skip proof of schematic goal statement
[| CONSTRAINT (IS_PURE single_valued) ?K;
   CONSTRAINT (IS_PURE IS_LEFT_UNIQUE) ?K |]
==> (uncurry (amd_delete dflt),
     uncurry (RETURN \<circ>\<circ> op_map_delete))
    : ?K\<^sup>k *\<^sub>a
      (amd_assn dflt ?K
        ?V)\<^sup>d \<rightarrow>\<^sub>a amd_assn dflt ?K ?V
Found termination order: "size <*mlex*> {}"
[| CONSTRAINT (IS_PURE single_valued) ?K;
   CONSTRAINT (IS_PURE IS_LEFT_UNIQUE) ?K |]
==> (uncurry (amd_delete dflt), uncurry mop_map_delete)
    : ?K\<^sup>k *\<^sub>a
      (amd_assn dflt ?K
        ?V)\<^sup>d \<rightarrow>\<^sub>a amd_assn dflt ?K ?V
### Cannot skip proof of schematic goal statement
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
[| CONSTRAINT (IS_PURE single_valued) ?K;
   CONSTRAINT (IS_PURE IS_LEFT_UNIQUE) ?K; CONSTRAINT is_pure ?V;
   CONSTRAINT (is_unused_elem dflt) ?V |]
==> (uncurry2 (amd_update dflt),
     uncurry2 (RETURN \<circ>\<circ>\<circ> op_map_update))
    : ?K\<^sup>k *\<^sub>a ?V\<^sup>k *\<^sub>a
      (amd_assn dflt ?K
        ?V)\<^sup>d \<rightarrow>\<^sub>a amd_assn dflt ?K ?V
[| CONSTRAINT (IS_PURE single_valued) ?K;
   CONSTRAINT (IS_PURE IS_LEFT_UNIQUE) ?K; CONSTRAINT is_pure ?V;
   CONSTRAINT (is_unused_elem dflt) ?V |]
==> (uncurry2 (amd_update dflt), uncurry2 mop_map_update)
    : ?K\<^sup>k *\<^sub>a ?V\<^sup>k *\<^sub>a
      (amd_assn dflt ?K
        ?V)\<^sup>d \<rightarrow>\<^sub>a amd_assn dflt ?K ?V
dflt_None ::\<^sub>i TYPE(?'a option)
dflt_Some ::\<^sub>i TYPE(?'a => ?'a option)
locale dflt_option
  fixes A :: "'a => 'c => assn"
    and dflt :: "'c"
    and eq :: "'c => 'c => bool Heap"
  assumes "dflt_option A dflt eq"
### theory "Draft.Array_Map_Default"
### 1.357s elapsed time, 3.878s cpu time, 0.839s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.096s elapsed time, 6.138s cpu time, 1.044s GC time
Loading theory "Draft.Templates" (required by "Draft.Array_Map_DefaultTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.068s elapsed time, 0.123s cpu time, 0.050s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Array_Map_DefaultTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.470s elapsed time, 0.477s cpu time, 0.000s GC time
Loading theory "Draft.Array_Map_DefaultTemplates"
val templateLemmas =
   [("Array_Map_Default.is_unused_elem_pure",
     "is_unused_elem ?dflt (pure ?R) = (?dflt ~: Domain ?R)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Array_Map_Default.cnv_option_case_2_if",
     "(case ?x of None => ?fn | Some v => ?fv v) =
      (if is_None ?x then ?fn else ?fv (the ?x))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), t_empty),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 2),
         template_app
          (template_var 1,
           template_app (template_hole 0, template_var 0))))),
    ("Array_Map_Default.amd1_empty_refine",
     "(uncurry0 (%_. ?dflt), uncurry0 op_map_empty)
      : unit_rel \<rightarrow>\<^sub>f Id \<rightarrow>
 dflt_option_rel_aux ?dflt",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app
                (template_hole 11,
                 template_app (template_hole 10, t_empty)),
               template_app (template_hole 9, template_hole 8))),
           template_app
            (template_app
              (template_app (template_hole 7, t_empty), template_hole 5),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_hole 1)),
               template_app (template_hole 0, template_var 0))))
         )),
    ("Array_Map_Default.doa_None_hnr",
     "(uncurry0 (return ?dflt), uncurry0 (RETURN dflt_None))
      : unit_assn\<^sup>k \<rightarrow>\<^sub>a dflt_option_assn ?dflt ?A",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_hole 10,
                   template_app (template_hole 9, template_var 1))),
               template_app
                (template_hole 8,
                 template_app (template_hole 7, template_hole 6)))),
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1)),
                 template_hole 4)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))
         )),
    ("Array_Map_Default.amd_empty_hnr_mop",
     "(uncurry0 (amd_empty ?dflt), uncurry0 mop_map_empty)
      : unit_assn\<^sup>k \<rightarrow>\<^sub>a amd_assn ?dflt ?K ?V",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_hole 9,
                   template_app (template_hole 8, template_var 2))),
               template_app (template_hole 7, template_hole 6))),
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1)),
                 template_hole 4)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0)))
         )),
    ("Array_Map_Default.amd2_empty_refine",
     "(uncurry0 (amd_empty ?dflt), uncurry0 (RETURN (%_. ?dflt)))
      : unit_assn\<^sup>k \<rightarrow>\<^sub>a is_nff ?dflt",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_hole 9,
                   template_app (template_hole 8, template_var 0))),
               template_app
                (template_hole 7,
                 template_app (template_hole 6, t_empty)))),
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1)),
                 template_hole 4)),
             template_app (template_hole 0, template_var 0)))
         )),
    ("Array_Map_Default.doa_is_None_hnr",
     "((return \<circ>\<circ> (=)) ?dflt, RETURN o is_None)
      : (dflt_option_assn ?dflt
          ?A)\<^sup>k \<rightarrow>\<^sub>a bool_assn",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app (template_hole 11, template_hole 10),
                   template_app (template_hole 9, template_var 1))),
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_hole 6))),
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0)),
                 template_hole 4)),
             template_app (template_hole 1, template_hole 0)))
         )),
    ("Array_Map_Default.amd_empty_hnr",
     "(uncurry0 (amd_empty ?dflt), uncurry0 (RETURN op_map_empty))
      : unit_assn\<^sup>k \<rightarrow>\<^sub>a amd_assn ?dflt ?K ?V",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_hole 10,
                   template_app (template_hole 9, template_var 2))),
               template_app
                (template_hole 8,
                 template_app (template_hole 7, template_hole 6)))),
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1)),
                 template_hole 4)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0)))
         )),
    ("Array_Map_Default.amd_assn_fold2",
     "hr_comp
       (hr_comp (is_nff ?dflt)
         (nat_rel \<rightarrow> dflt_option_rel_aux ?dflt))
       (\<langle>the_pure ?K, the_pure ?V\<rangle>map_rel) =
      amd_assn ?dflt ?K ?V",
     template_equation
      (template_app
        (template_app
          (template_hole 13,
           template_app
            (template_app
              (template_hole 12,
               template_app (template_hole 11, template_var 2)),
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app (template_hole 9, template_hole 8),
                   template_hole 7)),
               template_app (template_hole 6, template_var 2)))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app (template_hole 2, template_var 1))),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Array_Map_Default.amd1_lookup_refine",
     "(%x f. f x, op_map_lookup)
      : Id \<rightarrow>
        (Id \<rightarrow> dflt_option_rel_aux ?dflt) \<rightarrow>
        dflt_option_rel_aux ?dflt",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app (template_hole 12, t_empty), template_hole 11)),
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 9, template_hole 8),
                 template_hole 7)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_hole 1),
                         template_hole 7)),
                     template_app (template_hole 0, template_var 0)))),
               template_app (template_hole 0, template_var 0))))
         )),
    ("Array_Map_Default.amd1_delete_refine",
     "(uncurry (amd1_delete ?dflt), uncurry op_map_delete)
      : Id \<times>\<^sub>r
        (Id \<rightarrow>
         dflt_option_rel_aux
          ?dflt) \<rightarrow>\<^sub>f Id \<rightarrow>
 dflt_option_rel_aux ?dflt",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 15,
             template_app
              (template_app
                (template_hole 14,
                 template_app
                  (template_hole 13,
                   template_app (template_hole 12, template_var 0))),
               template_app (template_hole 11, template_hole 10))),
           template_app
            (template_app
              (template_app (template_hole 9, t_empty),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_hole 4)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_hole 1),
                       template_hole 4)),
                   template_app (template_hole 0, template_var 0)))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_hole 4)),
               template_app (template_hole 0, template_var 0))))
         )),
    ("Array_Map_Default.amd2_lookup_refine",
     "(uncurry (amd_lookup ?dflt), uncurry (%x. RETURN o (%f. f x)))
      : nat_assn\<^sup>k *\<^sub>a
        (is_nff ?dflt)\<^sup>k \<rightarrow>\<^sub>a id_assn",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 16,
             template_app
              (template_app
                (template_hole 15,
                 template_app
                  (template_hole 14,
                   template_app (template_hole 13, template_var 0))),
               template_app (template_hole 12, t_empty))),
           template_app
            (template_app
              (template_app (template_hole 9, t_empty),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app (template_hole 5, template_hole 4)),
                     template_hole 8)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_hole 8))),
             template_app (template_hole 1, template_hole 0)))
         )),
    ("Array_Map_Default.amd2_delete_refine",
     "(uncurry (amd_delete ?dflt),
       uncurry ((RETURN \<circ>\<circ>\<circ> amd1_delete) ?dflt))
      : nat_assn\<^sup>k *\<^sub>a
        (is_nff ?dflt)\<^sup>d \<rightarrow>\<^sub>a is_nff ?dflt",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 16,
             template_app
              (template_app
                (template_hole 15,
                 template_app
                  (template_hole 14,
                   template_app (template_hole 13, template_var 0))),
               template_app (template_hole 12, t_empty))),
           template_app
            (template_app
              (template_app (template_hole 8, t_empty),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app (template_hole 4, template_hole 3)),
                     template_hole 7)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 0)),
                   template_hole 0))),
             template_app (template_hole 1, template_var 0)))
         )),
    ("Array_Map_Default.doa_the_hnr",
     "CONSTRAINT is_pure ?A ==>
      (return o (%x. x), RETURN o the)
      : [%x. x ~=
             None]\<^sub>a (dflt_option_assn ?dflt
                             ?A)\<^sup>k \<rightarrow> ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_hole 14),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app (template_hole 11, template_hole 10),
                     t_empty)),
                 template_app
                  (template_app (template_hole 9, template_hole 8),
                   template_hole 7))),
             template_app
              (template_app
                (template_app (template_hole 6, t_empty),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_var 1)),
                   template_hole 0)),
               template_var 1))
           ))),
    ("Array_Map_Default.doa_Some_hnr",
     "[| CONSTRAINT (is_unused_elem ?dflt) ?A; CONSTRAINT is_pure ?A |]
      ==> (return o (%x. x), RETURN o dflt_Some)
          : ?A\<^sup>k \<rightarrow>\<^sub>a dflt_option_assn ?dflt ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_hole 11),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, template_hole 7),
                     t_empty)),
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_hole 4))),
             template_app
              (template_app
                (template_app (template_hole 3, t_empty),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 2)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Array_Map_Default.amd2_update_refine",
     "(uncurry2 (amd_update ?dflt),
       uncurry2 (%x xa. RETURN o (%f. f(x := xa))))
      : nat_assn\<^sup>k *\<^sub>a id_assn\<^sup>k *\<^sub>a
        (is_nff ?dflt)\<^sup>d \<rightarrow>\<^sub>a is_nff ?dflt",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 22,
             template_app
              (template_app
                (template_hole 21,
                 template_app
                  (template_hole 20,
                   template_app
                    (template_hole 19,
                     template_app (template_hole 18, template_var 0)))),
               template_app
                (template_hole 17,
                 template_app (template_hole 16, t_empty)))),
           template_app
            (template_app
              (template_app (template_hole 12, t_empty),
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app
                        (template_app
                          (template_hole 8,
                           template_app (template_hole 7, template_hole 6)),
                         template_hole 11)),
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app (template_hole 4, template_hole 3)),
                       template_hole 11))),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 0)),
                   template_hole 0))),
             template_app (template_hole 1, template_var 0)))
         )),
    ("Array_Map_Default.amd1_update_refine",
     "(uncurry2 (%k v f. f(k := v)), uncurry2 op_map_update)
      : [%((k, v), m).
            v ~=
            ?dflt]\<^sub>f (Id \<times>\<^sub>r Id) \<times>\<^sub>r
                           (Id \<rightarrow>
                            dflt_option_rel_aux
                             ?dflt) \<rightarrow> Id \<rightarrow>
            dflt_option_rel_aux ?dflt",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 24,
             template_app
              (template_app
                (template_hole 23,
                 template_app
                  (template_hole 22,
                   template_app (template_hole 21, t_empty))),
               template_app
                (template_hole 19,
                 template_app (template_hole 18, template_hole 17)))),
           template_app
            (template_app
              (template_app
                (template_hole 16,
                 template_app
                  (template_hole 15,
                   template_app (template_hole 14, t_empty))),
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app (template_hole 10, template_hole 9),
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app
                          (template_app (template_hole 7, template_hole 6),
                           template_hole 5)),
                       template_hole 4))),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_hole 1),
                       template_hole 5)),
                   template_app (template_hole 0, template_var 0)))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_hole 5)),
               template_app (template_hole 0, template_var 0))))
         )),
    ("Array_Map_Default.amd2_update_hnr_aux",
     "[| CONSTRAINT (IS_PURE single_valued) ?K;
         CONSTRAINT (IS_PURE IS_LEFT_UNIQUE) ?K; CONSTRAINT is_pure ?V;
         CONSTRAINT (is_unused_elem ?dflt) ?V |]
      ==> (uncurry2 (amd_update ?dflt),
           uncurry2 (RETURN \<circ>\<circ>\<circ> op_map_update))
          : ?K\<^sup>k *\<^sub>a ?V\<^sup>k *\<^sub>a
            (amd_assn ?dflt ?K
              ?V)\<^sup>d \<rightarrow>\<^sub>a amd_assn ?dflt ?K ?V",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 25,
                template_app (template_hole 24, template_hole 23)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 25,
                template_app (template_hole 24, template_hole 22)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 21, template_hole 20),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 21,
                template_app (template_hole 19, template_var 0)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 18,
               template_app
                (template_app
                  (template_hole 17,
                   template_app
                    (template_hole 16,
                     template_app
                      (template_hole 15,
                       template_app (template_hole 14, template_var 0)))),
                 template_app
                  (template_hole 13,
                   template_app (template_hole 12, t_empty)))),
             template_app
              (template_app
                (template_app (template_hole 8, t_empty),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_app (template_hole 4, template_var 2),
                           template_hole 7)),
                       template_app
                        (template_app (template_hole 3, template_var 1),
                         template_hole 7))),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app
                          (template_app (template_hole 1, template_var 0),
                           template_var 2),
                         template_var 1)),
                     template_hole 0))),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 2),
                 template_var 1)))
           )))]:
   (string * thm * template) list
### theory "Draft.Array_Map_DefaultTemplates"
### 0.983s elapsed time, 1.226s cpu time, 0.143s GC time
val it = (): unit
