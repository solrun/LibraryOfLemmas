   [("Challenge1.move_left_text", "get_text (move_left ?b) = get_text ?b",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Challenge1.move_right_text", "get_text (move_right ?b) = get_text ?b",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Challenge1.delete_pos", "get_pos (delete ?b) = get_pos ?b - 1",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 0)),
         template_hole 0))),
    ("Challenge1.move_left_pos", "get_pos (move_left ?b) = get_pos ?b - 1",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 0)),
         template_hole 0))),
    ("Challenge1.insert_pos",
     "get_pos (Challenge1.insert ?x ?b) = get_pos ?b + 1",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 0)),
         template_hole 0))),
    ("Challenge1.move_right_pos",
     "get_pos (move_right ?b) =
      min (get_pos ?b + 1) (length (get_text ?b))",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 6, template_var 0)),
             template_hole 2)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Challenge1.delete_text0",
     "get_pos ?b = 0 ==> get_text (delete ?b) = get_text ?b",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 0), template_hole 3)],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Challenge1.delete_impl_hnr_mop",
     "(delete_impl, mop_delete)
      : (gap_assn ?A)\<^sup>d \<rightarrow>\<^sub>a gap_assn ?A",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_hole 5)),
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)),
                 template_hole 0)),
             template_app (template_hole 1, template_var 0)))
         )),
    ("Challenge1.move_left_impl_hnr_mop",
     "(move_left_impl, mop_move_left)
      : (gap_assn ?A)\<^sup>d \<rightarrow>\<^sub>a gap_assn ?A",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_hole 5)),
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)),
                 template_hole 0)),
             template_app (template_hole 1, template_var 0)))
         )),
    ("Challenge1.move_right_impl_hnr_mop",
     "(move_right_impl, mop_move_right)
      : (gap_assn ?A)\<^sup>d \<rightarrow>\<^sub>a gap_assn ?A",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_hole 5)),
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)),
                 template_hole 0)),
             template_app (template_hole 1, template_var 0)))
         )),
    ("Challenge1.delete_impl_hnr",
     "(delete_impl, RETURN o delete)
      : (gap_assn ?A)\<^sup>d \<rightarrow>\<^sub>a gap_assn ?A",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_hole 8),
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_hole 5))),
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)),
                 template_hole 0)),
             template_app (template_hole 1, template_var 0)))
         )),
    ("Challenge1.move_left_impl_hnr",
     "(move_left_impl, RETURN o move_left)
      : (gap_assn ?A)\<^sup>d \<rightarrow>\<^sub>a gap_assn ?A",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_hole 8),
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_hole 5))),
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)),
                 template_hole 0)),
             template_app (template_hole 1, template_var 0)))
         )),
    ("Challenge1.move_right_impl_hnr",
     "(move_right_impl, RETURN o move_right)
      : (gap_assn ?A)\<^sup>d \<rightarrow>\<^sub>a gap_assn ?A",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_hole 8),
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_hole 5))),
           template_app
            (template_app
              (template_app (template_hole 4, t_empty),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)),
                 template_hole 0)),
             template_app (template_hole 1, template_var 0)))
         )),
    ("Challenge1.empty_impl_hnr_mop",
     "(uncurry0 Challenge1.empty_impl, uncurry0 mop_empty)
      : unit_assn\<^sup>k \<rightarrow>\<^sub>a gap_assn ?A",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 9, template_hole 8)),
               template_app (template_hole 7, template_hole 6))),
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1)),
                 template_hole 4)),
             template_app (template_hole 0, template_var 0)))
         )),
    ("Challenge1.empty_impl_hnr",
     "(uncurry0 Challenge1.empty_impl, uncurry0 (RETURN Challenge1.empty))
      : unit_assn\<^sup>k \<rightarrow>\<^sub>a gap_assn ?A",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app
                (template_hole 11,
                 template_app (template_hole 10, template_hole 9)),
               template_app
                (template_hole 8,
                 template_app (template_hole 7, template_hole 6)))),
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1)),
                 template_hole 4)),
             template_app (template_hole 0, template_var 0)))
         )),
    ("Challenge1.delete_text",
     "get_text (delete ?b) =
      take (get_pos ?b - 1) (get_text ?b) @
      drop (get_pos ?b) (get_text ?b)",
     template_equation
      (template_app
        (template_hole 7, template_app (template_hole 6, template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_hole 1)),
             template_app (template_hole 7, template_var 0))),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)),
           template_app (template_hole 7, template_var 0))))),
    ("Challenge1.insert_text",
     "get_text (Challenge1.insert ?x ?b) =
      take (get_pos ?b) (get_text ?b) @
      ?x # drop (get_pos ?b) (get_text ?b)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app (template_hole 6, template_var 0))),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 0)),
             template_app (template_hole 6, template_var 0)))))),
    ("Challenge1.insert_impl_hnr_mop",
     "CONSTRAINT is_pure ?A ==>
      (uncurry Challenge1.insert_impl, uncurry mop_insert)
      : ?A\<^sup>k *\<^sub>a
        (gap_assn ?A)\<^sup>d \<rightarrow>\<^sub>a gap_assn ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_hole 13),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app (template_hole 10, template_hole 9)),
                 template_app (template_hole 8, template_hole 7))),
             template_app
              (template_app
                (template_app (template_hole 6, t_empty),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_hole 5)),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 0)),
                     template_hole 0))),
               template_app (template_hole 1, template_var 0)))
           ))),
    ("Challenge1.insert_impl_hnr",
     "CONSTRAINT is_pure ?A ==>
      (uncurry Challenge1.insert_impl,
       uncurry (RETURN \<circ>\<circ> Challenge1.insert))
      : ?A\<^sup>k *\<^sub>a
        (gap_assn ?A)\<^sup>d \<rightarrow>\<^sub>a gap_assn ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_hole 15),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app
                  (template_hole 13,
                   template_app (template_hole 12, template_hole 11)),
                 template_app (template_hole 10, t_empty))),
             template_app
              (template_app
                (template_app (template_hole 6, t_empty),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_hole 5)),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 0)),
                     template_hole 0))),
               template_app (template_hole 1, template_var 0)))
           ))),
    ("Challenge1.grow1_correct",
     "[| gap_invar ?gb1;
         SPEC
          (%gb'. gap_invar gb' &
                 gap_\<alpha> gb' = gap_\<alpha> ?gb1 &
                 (0 < ?K1 --> can_insert gb'))
         <= SPEC ?Postcond |]
      ==> grow1 ?K1 ?gb1 <= SPEC ?Postcond",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 9, template_app (template_hole 8, t_empty)),
          template_app
           (template_hole 9,
            template_app (template_hole 8, template_var 0)))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_hole 9,
           template_app (template_hole 8, template_var 0)))))]
