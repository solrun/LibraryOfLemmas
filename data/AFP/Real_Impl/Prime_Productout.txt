Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Prime_ProductTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Prime_ProductTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Prime_ProductTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Real_Impl_Auxiliary" (required by "Draft.Prime_ProductTemplates" via "Draft.Prime_Product")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
### theory "Draft.Real_Impl_Auxiliary"
### 0.038s elapsed time, 0.183s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Prime_ProductTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.120s elapsed time, 0.501s cpu time, 0.033s GC time
Loading theory "Draft.Prime_Product" (required by "Draft.Prime_ProductTemplates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.212s elapsed time, 0.870s cpu time, 0.033s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Prime_ProductTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.321s elapsed time, 1.280s cpu time, 0.120s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Prime_ProductTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### theory "Draft.Prime_Product"
### 0.638s elapsed time, 2.506s cpu time, 0.228s GC time
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.954s elapsed time, 3.418s cpu time, 0.827s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.027s elapsed time, 3.383s cpu time, 0.783s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.921s elapsed time, 5.156s cpu time, 0.961s GC time
Loading theory "Draft.Templates" (required by "Draft.Prime_ProductTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.050s elapsed time, 0.065s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Prime_ProductTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.476s elapsed time, 0.507s cpu time, 0.038s GC time
Loading theory "Draft.Prime_ProductTemplates"
val templateLemmas =
   [("Prime_Product.prime_product_factor",
     "prime_product_factor ?n = (?sq, ?p) ==>
      ?n = ?sq * ?sq * ?p & prime_product ?p",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 2),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_var 1)),
                   template_var 0))),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Prime_Product.prime_product_factor_main",
     "[| \<nexists>s. s * s = ?n; ?limit = nat (root_nat_floor 3 ?n);
         ?m = ?factor_sq * ?factor_sq * ?factor_pr * ?n;
         prime_product_factor_main ?factor_sq ?factor_pr ?limit ?n ?i =
         (?sq, ?p);
         2 <= ?i; !!j. [| 2 <= j; j < ?i |] ==> ~ j dvd ?n;
         !!j. [| prime j; j < ?i |] ==> multiplicity j ?factor_pr <= 1;
         !!j. [| prime j; ?i <= j |] ==> multiplicity j ?factor_pr = 0;
         0 < ?factor_pr |]
      ==> ?m = ?sq * ?sq * ?p & prime_product ?p",
     template_implication
      ([template_negation
         (template_predicate (template_app (template_hole 21, t_empty))),
        template_equation
         (template_var 6,
          template_app
           (template_hole 18,
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_hole 16,
                  template_app (template_hole 15, template_hole 14))),
              template_var 7))),
        template_equation
         (template_var 5,
          template_app
           (template_app
             (template_hole 19,
              template_app
               (template_app
                 (template_hole 19,
                  template_app
                   (template_app (template_hole 19, template_var 4),
                    template_var 4)),
                template_var 3)),
            template_var 7)),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 12, template_var 4),
                  template_var 3),
                template_var 6),
              template_var 7),
            template_var 2),
          template_app
           (template_app (template_hole 11, template_var 1),
            template_var 0)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 16,
            template_app (template_hole 9, template_hole 14)),
          template_var 2),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_inequation (less_than, template_hole 2, template_var 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 20, template_var 5),
                 template_app
                  (template_app
                    (template_hole 19,
                     template_app
                      (template_app (template_hole 19, template_var 1),
                       template_var 1)),
                   template_var 0))),
             template_app (template_hole 0, template_var 0))
           )))]:
   (string * thm * template) list
### theory "Draft.Prime_ProductTemplates"
### 0.402s elapsed time, 0.532s cpu time, 0.067s GC time
val it = (): unit
