Loading theory "Draft.Least_Enum" (required by "Draft.Kruskal_ExamplesTemplates" via "Draft.Kruskal_Examples" via "Draft.Kruskal" via "Draft.Well_Quasi_Orders" via "Draft.Almost_Full_Relations" via "Draft.Minimal_Bad_Sequences" via "Draft.Almost_Full")
Loading theory "Draft.Infinite_Sequences" (required by "Draft.Kruskal_ExamplesTemplates" via "Draft.Kruskal_Examples" via "Draft.Kruskal" via "Draft.Well_Quasi_Orders" via "Draft.Almost_Full_Relations" via "Draft.Minimal_Bad_Sequences" via "Draft.Almost_Full")
Loading theory "Draft.Templates" (required by "Draft.Kruskal_ExamplesTemplates" via "Draft.ExtrEqs")
locale infinitely_many1
  fixes P :: "'a => bool"
  assumes "infinitely_many1 P"
### Additional type variable(s) in specification of "enum_rel": 'a
### Additional type variable(s) in specification of "enum_dom": 'a
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.067s elapsed time, 0.235s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Kruskal_ExamplesTemplates")
Found termination order: "size <*mlex*> {}"
locale infinitely_many2
  fixes P :: "'a => 'a => bool"
    and N :: "'a"
  assumes "infinitely_many2 P N"
### theory "Draft.Infinite_Sequences"
### 0.092s elapsed time, 0.308s cpu time, 0.000s GC time
Loading theory "Draft.Minimal_Elements" (required by "Draft.Kruskal_ExamplesTemplates" via "Draft.Kruskal_Examples" via "Draft.Kruskal" via "Draft.Well_Quasi_Orders" via "Draft.Almost_Full_Relations" via "Draft.Minimal_Bad_Sequences")
### Additional type variable(s) in specification of "enumchain_rel": 'a
### Additional type variable(s) in specification of "enumchain_dom": 'a
Found termination order: "size <*mlex*> {}"
### theory "Draft.Least_Enum"
### 0.155s elapsed time, 0.483s cpu time, 0.029s GC time
Loading theory "Draft.Almost_Full" (required by "Draft.Kruskal_ExamplesTemplates" via "Draft.Kruskal_Examples" via "Draft.Kruskal" via "Draft.Well_Quasi_Orders" via "Draft.Almost_Full_Relations" via "Draft.Minimal_Bad_Sequences")
locale minimal_element
  fixes P :: "'a => 'a => bool"
    and A :: "'a set"
  assumes "minimal_element P A"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Minimal_Elements"
### 0.202s elapsed time, 0.611s cpu time, 0.029s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.544s elapsed time, 1.344s cpu time, 0.105s GC time
Proofs for inductive predicate(s) "af"
  Proving monotonicity ...
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
### theory "Draft.Almost_Full"
### 0.797s elapsed time, 1.474s cpu time, 0.144s GC time
Loading theory "Draft.Minimal_Bad_Sequences" (required by "Draft.Kruskal_ExamplesTemplates" via "Draft.Kruskal_Examples" via "Draft.Kruskal" via "Draft.Well_Quasi_Orders" via "Draft.Almost_Full_Relations")
locale mbs
  fixes A :: "'a set"
### Cannot skip proof of schematic goal statement
### theory "Draft.Minimal_Bad_Sequences"
### 0.190s elapsed time, 0.190s cpu time, 0.000s GC time
Loading theory "Draft.Almost_Full_Relations" (required by "Draft.Kruskal_ExamplesTemplates" via "Draft.Kruskal_Examples" via "Draft.Kruskal" via "Draft.Well_Quasi_Orders")
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Almost_Full_Relations"
### 0.266s elapsed time, 0.319s cpu time, 0.065s GC time
Loading theory "Draft.Well_Quasi_Orders" (required by "Draft.Kruskal_ExamplesTemplates" via "Draft.Kruskal_Examples" via "Draft.Kruskal")
class wqo = preorder +
  assumes "good": "!!f. good (<=) f"
### theory "Draft.Well_Quasi_Orders"
### 0.175s elapsed time, 0.176s cpu time, 0.000s GC time
Loading theory "Draft.Kruskal" (required by "Draft.Kruskal_ExamplesTemplates" via "Draft.Kruskal_Examples")
locale kruskal_tree
  fixes F :: "('b * nat) set"
    and mk :: "'b => 'a list => 'a"
    and root :: "'a => 'b * nat"
    and args :: "'a => 'a list"
    and trees :: "'a set"
  assumes "kruskal_tree F mk root args trees"
Proofs for inductive predicate(s) "emb"
  Proving monotonicity ...
### theory "Draft.Kruskal"
### 0.097s elapsed time, 0.097s cpu time, 0.000s GC time
Loading theory "Draft.Kruskal_Examples" (required by "Draft.Kruskal_ExamplesTemplates")
Found termination order: "{}"
Found termination order: "{}"
Proofs for inductive predicate(s) "treesp"
  Proving monotonicity ...
wqo_on ?P (?A \<times> UNIV) ==>
wqo_on (kruskal_tree_tree.emb ?A ?P) (trees ?A)
almost_full_on ?P (?A \<times> UNIV) ==>
almost_full_on (kruskal_tree_tree.emb ?A ?P) (trees ?A)
instantiation
  tree :: (wqo) wqo
  less_eq_tree == less_eq :: 'a tree => 'a tree => bool
  less_tree == less :: 'a tree => 'a tree => bool
### Missing patterns in function definition:
### !!v. root (Var v) = undefined
Found termination order: "{}"
### Missing patterns in function definition:
### !!v. args (Var v) = undefined
Found termination order: "{}"
Proofs for inductive predicate(s) "gtermsp"
  Proving monotonicity ...
almost_full_on ?P ?F ==> almost_full_on (kruskal_term.emb ?F ?P) (gterms ?F)
Proofs for inductive predicate(s) "termsp"
  Proving monotonicity ...
almost_full_on ?P UNIV ==> almost_full_on (kruskal_variadic.emb ?P) terms
### Missing patterns in function definition:
### !!v va vb. mk (c v) (va # vb) = undefined
### mk p [] = undefined
### !!v. mk p [v] = undefined
### (5 more)
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Proofs for inductive predicate(s) "expsp"
  Proving monotonicity ...
almost_full_on ?P
 ({(v x, 0) |x. True} Un {(c n, 0) |n. True} Un {(p, 2)}) ==>
almost_full_on (kruskal_exp.emb ?P) exps
### theory "Draft.Kruskal_Examples"
### 2.207s elapsed time, 2.717s cpu time, 0.696s GC time
Loading theory "Draft.Kruskal_ExamplesTemplates"
val templateLemmas =
   [("Kruskal_Examples.treesp_trees_eq",
     "treesp (%x. x : ?A) = (%x. x : trees ?A)",
     template_equation (template_app (template_hole 3, t_empty), t_empty)),
    ("Kruskal_Examples.wqo_on_trees",
     "wqo_on ?P ?A ==> wqo_on (Kruskal_Examples.tree_emb ?A ?P) (trees ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Kruskal_Examples.gtermsp_gterms_eq",
     "gtermsp (%x xa. (x, xa) : ?F) = (%x. x : gterms ?F)",
     template_equation (template_app (template_hole 4, t_empty), t_empty))]:
   (string * thm * template) list
### theory "Draft.Kruskal_ExamplesTemplates"
### 0.390s elapsed time, 0.566s cpu time, 0.062s GC time
val it = (): unit
