Loading theory "Draft.Infinite_Sequences" (required by "Draft.Well_Quasi_OrdersTemplates" via "Draft.Well_Quasi_Orders" via "Draft.Almost_Full_Relations" via "Draft.Minimal_Bad_Sequences" via "Draft.Almost_Full")
Loading theory "Draft.Least_Enum" (required by "Draft.Well_Quasi_OrdersTemplates" via "Draft.Well_Quasi_Orders" via "Draft.Almost_Full_Relations" via "Draft.Minimal_Bad_Sequences" via "Draft.Almost_Full")
Loading theory "Draft.Templates" (required by "Draft.Well_Quasi_OrdersTemplates" via "Draft.ExtrEqs")
locale infinitely_many1
  fixes P :: "'a => bool"
  assumes "infinitely_many1 P"
### Additional type variable(s) in specification of "enum_rel": 'a
### Additional type variable(s) in specification of "enum_dom": 'a
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.074s elapsed time, 0.256s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Well_Quasi_OrdersTemplates")
Found termination order: "size <*mlex*> {}"
locale infinitely_many2
  fixes P :: "'a => 'a => bool"
    and N :: "'a"
  assumes "infinitely_many2 P N"
### theory "Draft.Infinite_Sequences"
### 0.093s elapsed time, 0.315s cpu time, 0.000s GC time
Loading theory "Draft.Minimal_Elements" (required by "Draft.Well_Quasi_OrdersTemplates" via "Draft.Well_Quasi_Orders" via "Draft.Almost_Full_Relations" via "Draft.Minimal_Bad_Sequences")
### Additional type variable(s) in specification of "enumchain_rel": 'a
### Additional type variable(s) in specification of "enumchain_dom": 'a
Found termination order: "size <*mlex*> {}"
### theory "Draft.Least_Enum"
### 0.156s elapsed time, 0.497s cpu time, 0.025s GC time
Loading theory "Draft.Almost_Full" (required by "Draft.Well_Quasi_OrdersTemplates" via "Draft.Well_Quasi_Orders" via "Draft.Almost_Full_Relations" via "Draft.Minimal_Bad_Sequences")
locale minimal_element
  fixes P :: "'a => 'a => bool"
    and A :: "'a set"
  assumes "minimal_element P A"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Minimal_Elements"
### 0.200s elapsed time, 0.601s cpu time, 0.025s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.538s elapsed time, 1.320s cpu time, 0.091s GC time
Proofs for inductive predicate(s) "af"
  Proving monotonicity ...
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
### theory "Draft.Almost_Full"
### 0.806s elapsed time, 1.464s cpu time, 0.122s GC time
Loading theory "Draft.Minimal_Bad_Sequences" (required by "Draft.Well_Quasi_OrdersTemplates" via "Draft.Well_Quasi_Orders" via "Draft.Almost_Full_Relations")
locale mbs
  fixes A :: "'a set"
### Cannot skip proof of schematic goal statement
### theory "Draft.Minimal_Bad_Sequences"
### 0.197s elapsed time, 0.197s cpu time, 0.000s GC time
Loading theory "Draft.Almost_Full_Relations" (required by "Draft.Well_Quasi_OrdersTemplates" via "Draft.Well_Quasi_Orders")
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Almost_Full_Relations"
### 0.265s elapsed time, 0.312s cpu time, 0.057s GC time
Loading theory "Draft.Well_Quasi_Orders" (required by "Draft.Well_Quasi_OrdersTemplates")
class wqo = preorder +
  assumes "good": "!!f. good (<=) f"
### theory "Draft.Well_Quasi_Orders"
### 0.176s elapsed time, 0.176s cpu time, 0.000s GC time
Loading theory "Draft.Well_Quasi_OrdersTemplates"
val templateLemmas =
   [("Well_Quasi_Orders.finite_eq_wqo_on", "finite ?A ==> wqo_on (=) ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)
           ))),
    ("Well_Quasi_Orders.wqo_on_imp_almost_full_on",
     "wqo_on ?P ?A ==> almost_full_on ?P ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Well_Quasi_Orders.wqo_on_imp_qo_on", "wqo_on ?P ?A ==> qo_on ?P ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Well_Quasi_Orders.wqo_on_imp_reflp_on",
     "wqo_on ?P ?A ==> reflp_on ?P ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Well_Quasi_Orders.wqo_on_imp_transp_on",
     "wqo_on ?P ?A ==> transp_on ?P ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Well_Quasi_Orders.wqo_on_list_UNIV",
     "wqo_on ?P UNIV ==> wqo_on (list_emb ?P) UNIV",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("Well_Quasi_Orders.wqo_on_option_UNIV",
     "wqo_on ?P UNIV ==> wqo_on (option_le ?P) UNIV",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("Well_Quasi_Orders.transp_on_list_emb",
     "transp_on ?P ?A ==> transp_on (list_emb ?P) (lists ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Well_Quasi_Orders.higman",
     "wqo_on ?P ?A ==> wqo_on (list_emb ?P) (lists ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Well_Quasi_Orders.wqo_on_with_bot",
     "wqo_on ?P ?A ==> wqo_on (option_le ?P) ?A\<^sub>\<bottom>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Well_Quasi_Orders.wqo_af_conv",
     "qo_on ?P ?A ==> wqo_on ?P ?A = almost_full_on ?P ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Well_Quasi_Orders.wqo_on_subset",
     "[| ?A <= ?B; wqo_on ?P ?B |] ==> wqo_on ?P ?A",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 2)
           ))),
    ("Well_Quasi_Orders.wqo_onI",
     "[| transp_on ?P ?A; almost_full_on ?P ?A |] ==> wqo_on ?P ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Well_Quasi_Orders.wqo_on_sum_UNIV",
     "[| wqo_on ?P UNIV; wqo_on ?Q UNIV |] ==> wqo_on (sum_le ?P ?Q) UNIV",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_hole 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Well_Quasi_Orders.wqo_on_prod_UNIV",
     "[| wqo_on ?P UNIV; wqo_on ?Q UNIV |] ==> wqo_on (prod_le ?P ?Q) UNIV",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_hole 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0)
           ))),
    ("Well_Quasi_Orders.wqo_on_UNIV_conv",
     "wqo_on ?P UNIV = class.wqo ?P (strict ?P)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 0), template_hole 3),
       template_app
        (template_app (template_hole 2, template_var 0), t_empty))),
    ("Well_Quasi_Orders.wqo_on_imp_good",
     "[| wqo_on ?P ?A; ALL i. ?f i : ?A |] ==> good ?P ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Well_Quasi_Orders.wqo_on_imp_wfp_on",
     "wqo_on ?P ?A ==> wfp_on (strict ?P) ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty), template_var 0)
           ))),
    ("Well_Quasi_Orders.wqo_on_UNIV_class_wqo",
     "wqo_on ?P UNIV ==> class.wqo ?P (strict ?P)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0), t_empty)
           ))),
    ("Well_Quasi_Orders.wqo_on_Plus",
     "[| wqo_on ?P ?A; wqo_on ?Q ?B |]
      ==> wqo_on (sum_le ?P ?Q) (?A <+> ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Well_Quasi_Orders.finite_wqo_on",
     "[| finite ?A; reflp_on ?P ?A; transp_on ?P ?A |] ==> wqo_on ?P ?A",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Well_Quasi_Orders.dickson",
     "[| wqo_on ?P1.0 ?A1.0; wqo_on ?P2.0 ?A2.0 |]
      ==> wqo_on (prod_le ?P1.0 ?P2.0) (?A1.0 \<times> ?A2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2), t_empty))
           ))),
    ("Well_Quasi_Orders.wqo_on_map",
     "[| wqo_on ?P ?A; wqo_on ?Q ?B; ?h ` ?A <= ?B |]
      ==> wqo_on (%x y. ?P x y & ?Q (?h x) (?h y)) ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 1, template_var 0), template_var 3),
          template_var 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, t_empty), template_var 3)
           ))),
    ("Well_Quasi_Orders.wqo_on_mon",
     "[| ALL x:?A. ALL y:?A. ?P x y = ?Q (?h x) (?h y); bij_betw ?h ?A ?B;
         wqo_on ?Q ?B |]
      ==> wqo_on ?P ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_var 4),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 3), template_var 4)
           ))),
    ("Well_Quasi_Orders.wqo_on_hom",
     "[| transp_on ?Q (?h ` ?A);
         ALL x:?A. ALL y:?A. ?P x y --> ?Q (?h x) (?h y); wqo_on ?P ?A |]
      ==> wqo_on ?Q (?h ` ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 3),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1))
           ))),
    ("Well_Quasi_Orders.wqo_extensions_wf_conv",
     "qo_on ?P ?A ==>
      wqo_on ?P ?A =
      (ALL Q.
          (ALL x:?A. ALL y:?A. ?P x y --> Q x y) & qo_on Q ?A -->
          wfp_on (strict Q) ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 1), template_var 0),
         template_app (template_hole 5, t_empty)))),
    ("Well_Quasi_Orders.wqo_wf_and_no_antichain_conv",
     "qo_on ?P ?A ==>
      wqo_on ?P ?A =
      (wfp_on (strict ?P) ?A & (\<nexists>f. antichain_on ?P f ?A))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 8, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, t_empty), template_var 0)),
           template_app
            (template_hole 5, template_app (template_hole 4, t_empty))))))]:
   (string * thm * template) list
### theory "Draft.Well_Quasi_OrdersTemplates"
### 0.361s elapsed time, 0.510s cpu time, 0.072s GC time
val it = (): unit
