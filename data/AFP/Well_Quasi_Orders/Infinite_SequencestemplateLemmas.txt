   [("Infinite_Sequences.eq_upto_0", "eq_upto ?B ?f 0 = ?B",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_var 1)),
    ("Infinite_Sequences.SEQ_iff", "(?f : SEQ ?A) = (ALL i. ?f i : ?A)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app (template_hole 1, t_empty))),
    ("Infinite_Sequences.ith_conv",
     "(?x : ith ?B ?i) = (EX f:?B. ?x = f ?i)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), t_empty))),
    ("Infinite_Sequences.ithI",
     "[| ?f : ?B; ?f ?i = ?x |] ==> ?x : ith ?B ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app (template_var 3, template_var 1), template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           ))),
    ("Infinite_Sequences.eq_upto_Suc",
     "[| ?g : eq_upto ?B ?f ?i; ?g ?i = ?f ?i |]
      ==> ?g : eq_upto ?B ?f (Suc ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1),
                template_var 0))
            ),
        template_equation
         (template_app (template_var 3, template_var 0),
          template_app (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Infinite_Sequences.ithE",
     "[| ?x : ith ?B ?i; !!f. [| f : ?B; f ?i = ?x |] ==> ?Q |] ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Infinite_Sequences.eq_uptoI",
     "[| ?g : ?B; !!j. j < ?i ==> ?f j = ?g j |] ==> ?g : eq_upto ?B ?f ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0),
               template_var 1))
           ))),
    ("Infinite_Sequences.eq_upto_cong",
     "[| !!j. j < ?i ==> ?f j = ?g j; ?B = ?C |]
      ==> eq_upto ?B ?f ?i = eq_upto ?C ?g ?i",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_equation (template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3),
           template_var 4),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2),
           template_var 4)))),
    ("Infinite_Sequences.eq_uptoE",
     "[| ?g : eq_upto ?B ?f ?i;
         [| ?g : ?B; !!j. j < ?i ==> ?f j = ?g j |] ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 4, template_var 4),
                 template_var 3)
               )],
          template_implication
           ([template_predicate (template_app (template_hole 2, t_empty))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Infinite_Sequences.LEX_cases",
     "[| LEX ?P ?f ?g; ?f = ?g ==> ?thesis;
         !!k. [| ALL i<k. ?f i = ?g i; ?P (?f k) (?g k) |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 2, template_var 1)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Infinite_Sequences.LEX_imp_not_LEX",
     "[| LEX ?P ?f ?g; !!x y z. [| ?P x y; ?P y z |] ==> ?P x z;
         !!x. ~ ?P x x |]
      ==> ~ LEX ?P ?g ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 1, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 0),
                 template_var 1)
               )
           ))),
    ("Infinite_Sequences.LEX_imp_less",
     "[| ALL x:?A. ~ ?P x x; ?f : SEQ ?A | ?g : SEQ ?A; LEX ?P ?f ?g;
         ALL i<?k. ?f i = ?g i; ?f ?k ~= ?g ?k |]
      ==> ?P (?f ?k) (?g ?k)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 4), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_app (template_hole 5, template_var 4))),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_app (template_hole 5, template_var 4)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_negation
         (
            template_equation
             (template_app (template_var 2, template_var 0),
              template_app (template_var 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_var 3,
               template_app (template_var 2, template_var 0)),
             template_app (template_var 1, template_var 0))
           )))]
