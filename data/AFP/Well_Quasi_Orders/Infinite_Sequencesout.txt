Loading theory "Draft.Infinite_Sequences" (required by "Draft.Infinite_SequencesTemplates")
Loading theory "Draft.Templates" (required by "Draft.Infinite_SequencesTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.063s elapsed time, 0.152s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Infinite_SequencesTemplates")
### theory "Draft.Infinite_Sequences"
### 0.089s elapsed time, 0.205s cpu time, 0.000s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.500s elapsed time, 0.549s cpu time, 0.028s GC time
Loading theory "Draft.Infinite_SequencesTemplates"
val templateLemmas =
   [("Infinite_Sequences.eq_upto_0", "eq_upto ?B ?f 0 = ?B",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_var 1)),
    ("Infinite_Sequences.SEQ_iff", "(?f : SEQ ?A) = (ALL i. ?f i : ?A)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app (template_hole 1, t_empty))),
    ("Infinite_Sequences.ith_conv",
     "(?x : ith ?B ?i) = (EX f:?B. ?x = f ?i)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), t_empty))),
    ("Infinite_Sequences.ithI",
     "[| ?f : ?B; ?f ?i = ?x |] ==> ?x : ith ?B ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app (template_var 3, template_var 1), template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           ))),
    ("Infinite_Sequences.eq_upto_Suc",
     "[| ?g : eq_upto ?B ?f ?i; ?g ?i = ?f ?i |]
      ==> ?g : eq_upto ?B ?f (Suc ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1),
                template_var 0))
            ),
        template_equation
         (template_app (template_var 3, template_var 0),
          template_app (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Infinite_Sequences.ithE",
     "[| ?x : ith ?B ?i; !!f. [| f : ?B; f ?i = ?x |] ==> ?Q |] ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Infinite_Sequences.eq_uptoI",
     "[| ?g : ?B; !!j. j < ?i ==> ?f j = ?g j |] ==> ?g : eq_upto ?B ?f ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0),
               template_var 1))
           ))),
    ("Infinite_Sequences.eq_upto_cong",
     "[| !!j. j < ?i ==> ?f j = ?g j; ?B = ?C |]
      ==> eq_upto ?B ?f ?i = eq_upto ?C ?g ?i",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_equation (template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3),
           template_var 4),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2),
           template_var 4)))),
    ("Infinite_Sequences.eq_uptoE",
     "[| ?g : eq_upto ?B ?f ?i;
         [| ?g : ?B; !!j. j < ?i ==> ?f j = ?g j |] ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 4, template_var 4),
                 template_var 3)
               )],
          template_implication
           ([template_predicate (template_app (template_hole 2, t_empty))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Infinite_Sequences.LEX_cases",
     "[| LEX ?P ?f ?g; ?f = ?g ==> ?thesis;
         !!k. [| ALL i<k. ?f i = ?g i; ?P (?f k) (?g k) |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 2, template_var 1)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Infinite_Sequences.LEX_imp_not_LEX",
     "[| LEX ?P ?f ?g; !!x y z. [| ?P x y; ?P y z |] ==> ?P x z;
         !!x. ~ ?P x x |]
      ==> ~ LEX ?P ?g ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 1, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 0),
                 template_var 1)
               )
           ))),
    ("Infinite_Sequences.LEX_imp_less",
     "[| ALL x:?A. ~ ?P x x; ?f : SEQ ?A | ?g : SEQ ?A; LEX ?P ?f ?g;
         ALL i<?k. ?f i = ?g i; ?f ?k ~= ?g ?k |]
      ==> ?P (?f ?k) (?g ?k)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 4), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_app (template_hole 5, template_var 4))),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_app (template_hole 5, template_var 4)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_negation
         (
            template_equation
             (template_app (template_var 2, template_var 0),
              template_app (template_var 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_var 3,
               template_app (template_var 2, template_var 0)),
             template_app (template_var 1, template_var 0))
           )))]:
   (string * thm * template) list
### theory "Draft.Infinite_SequencesTemplates"
### 0.297s elapsed time, 0.412s cpu time, 0.000s GC time
val it = (): unit
