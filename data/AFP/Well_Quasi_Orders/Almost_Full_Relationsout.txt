Loading theory "Draft.Infinite_Sequences" (required by "Draft.Almost_Full_RelationsTemplates" via "Draft.Almost_Full_Relations" via "Draft.Minimal_Bad_Sequences" via "Draft.Almost_Full")
Loading theory "Draft.Least_Enum" (required by "Draft.Almost_Full_RelationsTemplates" via "Draft.Almost_Full_Relations" via "Draft.Minimal_Bad_Sequences" via "Draft.Almost_Full")
Loading theory "Draft.Templates" (required by "Draft.Almost_Full_RelationsTemplates" via "Draft.ExtrEqs")
locale infinitely_many1
  fixes P :: "'a => bool"
  assumes "infinitely_many1 P"
### Additional type variable(s) in specification of "enum_rel": 'a
### Additional type variable(s) in specification of "enum_dom": 'a
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.085s elapsed time, 0.283s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Almost_Full_RelationsTemplates")
Found termination order: "size <*mlex*> {}"
### theory "Draft.Infinite_Sequences"
### 0.095s elapsed time, 0.308s cpu time, 0.000s GC time
Loading theory "Draft.Minimal_Elements" (required by "Draft.Almost_Full_RelationsTemplates" via "Draft.Almost_Full_Relations" via "Draft.Minimal_Bad_Sequences")
locale infinitely_many2
  fixes P :: "'a => 'a => bool"
    and N :: "'a"
  assumes "infinitely_many2 P N"
### Additional type variable(s) in specification of "enumchain_rel": 'a
### Additional type variable(s) in specification of "enumchain_dom": 'a
Found termination order: "size <*mlex*> {}"
### theory "Draft.Least_Enum"
### 0.171s elapsed time, 0.525s cpu time, 0.025s GC time
Loading theory "Draft.Almost_Full" (required by "Draft.Almost_Full_RelationsTemplates" via "Draft.Almost_Full_Relations" via "Draft.Minimal_Bad_Sequences")
locale minimal_element
  fixes P :: "'a => 'a => bool"
    and A :: "'a set"
  assumes "minimal_element P A"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Minimal_Elements"
### 0.231s elapsed time, 0.698s cpu time, 0.025s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.575s elapsed time, 1.417s cpu time, 0.093s GC time
Proofs for inductive predicate(s) "af"
  Proving monotonicity ...
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
### theory "Draft.Almost_Full"
### 0.834s elapsed time, 1.549s cpu time, 0.126s GC time
Loading theory "Draft.Minimal_Bad_Sequences" (required by "Draft.Almost_Full_RelationsTemplates" via "Draft.Almost_Full_Relations")
locale mbs
  fixes A :: "'a set"
### Cannot skip proof of schematic goal statement
### theory "Draft.Minimal_Bad_Sequences"
### 0.205s elapsed time, 0.206s cpu time, 0.000s GC time
Loading theory "Draft.Almost_Full_Relations" (required by "Draft.Almost_Full_RelationsTemplates")
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Almost_Full_Relations"
### 0.286s elapsed time, 0.336s cpu time, 0.060s GC time
Loading theory "Draft.Almost_Full_RelationsTemplates"
val templateLemmas =
   [("Almost_Full_Relations.NoneI", "None : ?A\<^sub>\<bottom>",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Almost_Full_Relations.with_bot_iff",
     "(Some ?x : ?A\<^sub>\<bottom>) = (?x : ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Almost_Full_Relations.with_bot_empty_conv",
     "(?A\<^sub>\<bottom> = {None}) = (?A = {})",
     template_bimplication
      (template_equation
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_hole 2)),
       template_equation (template_var 0, template_hole 0))),
    ("Almost_Full_Relations.almost_full_on_lists",
     "almost_full_on ?P ?A ==> almost_full_on (list_emb ?P) (lists ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Almost_Full_Relations.almost_full_on_with_bot",
     "almost_full_on ?P ?A ==>
      almost_full_on (option_le ?P) ?A\<^sub>\<bottom>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Almost_Full_Relations.None_imp_good_option_le",
     "?f ?i = None ==> good (option_le ?P) ?f",
     template_implication
      ([template_equation
         (template_app (template_var 2, template_var 1), template_hole 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 2)
           ))),
    ("Almost_Full_Relations.prod_le_True",
     "prod_le ?P (%_ _. True) ?a ?b = ?P (fst ?a) (fst ?b)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 2), t_empty),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_var 2, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Almost_Full_Relations.not_None_the_mem",
     "?x ~= None ==> (the ?x : ?A) = (?x : ?A\<^sub>\<bottom>)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Almost_Full_Relations.almost_full_on_Plus",
     "[| almost_full_on ?P ?A; almost_full_on ?Q ?B |]
      ==> almost_full_on (sum_le ?P ?Q) (?A <+> ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Almost_Full_Relations.almost_full_on_Sigma",
     "[| almost_full_on ?P1.0 ?A1.0; almost_full_on ?P2.0 ?A2.0 |]
      ==> almost_full_on (prod_le ?P1.0 ?P2.0) (?A1.0 \<times> ?A2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2), t_empty))
           ))),
    ("Almost_Full_Relations.with_bot_cases",
     "[| ?u : ?A\<^sub>\<bottom>; !!x. [| x : ?A; ?u = Some x |] ==> ?P;
         ?u = None ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_implication
         ([template_equation (template_var 2, template_hole 0)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Almost_Full_Relations.not_sum_le_cases",
     "[| ~ sum_le ?P ?Q ?a ?b;
         !!x y. [| ?a = Inl x; ?b = Inl y; ~ ?P x y |] ==> ?thesis;
         !!x y. [| ?a = Inr x; ?b = Inr y; ~ ?Q x y |] ==> ?thesis;
         !!x y. [| ?a = Inl x; ?b = Inr y |] ==> ?thesis;
         !!x y. [| ?a = Inr x; ?b = Inl y |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 5, template_var 4),
                      template_var 3),
                    template_var 2),
                  template_var 1)
                )
            ),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Almost_Full_RelationsTemplates"
### 0.341s elapsed time, 0.439s cpu time, 0.000s GC time
val it = (): unit
