Loading theory "Draft.Least_Enum" (required by "Draft.Higman_OITemplates" via "Draft.Higman_OI" via "Draft.Almost_Full")
Loading theory "Draft.Infinite_Sequences" (required by "Draft.Higman_OITemplates" via "Draft.Higman_OI" via "Draft.Minimal_Elements")
Loading theory "Draft.Templates" (required by "Draft.Higman_OITemplates" via "Draft.ExtrEqs")
locale infinitely_many1
  fixes P :: "'a => bool"
  assumes "infinitely_many1 P"
### Additional type variable(s) in specification of "enum_rel": 'a
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.068s elapsed time, 0.236s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Higman_OITemplates")
### Additional type variable(s) in specification of "enum_dom": 'a
Found termination order: "size <*mlex*> {}"
locale infinitely_many2
  fixes P :: "'a => 'a => bool"
    and N :: "'a"
  assumes "infinitely_many2 P N"
### theory "Draft.Infinite_Sequences"
### 0.129s elapsed time, 0.413s cpu time, 0.028s GC time
Loading theory "Draft.Minimal_Elements" (required by "Draft.Higman_OITemplates" via "Draft.Higman_OI")
### Additional type variable(s) in specification of "enumchain_rel": 'a
### Additional type variable(s) in specification of "enumchain_dom": 'a
Found termination order: "size <*mlex*> {}"
### theory "Draft.Least_Enum"
### 0.191s elapsed time, 0.594s cpu time, 0.028s GC time
Loading theory "Draft.Almost_Full" (required by "Draft.Higman_OITemplates" via "Draft.Higman_OI")
locale minimal_element
  fixes P :: "'a => 'a => bool"
    and A :: "'a set"
  assumes "minimal_element P A"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Minimal_Elements"
### 0.204s elapsed time, 0.626s cpu time, 0.000s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.544s elapsed time, 1.380s cpu time, 0.090s GC time
Proofs for inductive predicate(s) "af"
  Proving monotonicity ...
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
### theory "Draft.Almost_Full"
### 0.786s elapsed time, 1.423s cpu time, 0.117s GC time
Loading theory "Draft.Higman_OI" (required by "Draft.Higman_OITemplates")
locale minimal_element
  fixes P :: "'a => 'a => bool"
    and A :: "'a set"
  assumes "minimal_element P A"
locale minimal_element
  fixes P :: "'a => 'a => bool"
    and A :: "'a set"
  assumes "minimal_element P A"
### theory "Draft.Higman_OI"
### 0.275s elapsed time, 0.275s cpu time, 0.000s GC time
Loading theory "Draft.Higman_OITemplates"
val templateLemmas =
   [("Higman_OI.po_on_strict_suffix", "po_on strict_suffix ?A",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Higman_OI.wfp_on_strict_suffix", "wfp_on strict_suffix ?A",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Higman_OI.pt_open_on_good", "pt_open_on (good ?Q) (SEQ ?A)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0))
         )),
    ("Higman_OI.higman",
     "almost_full_on ?P ?A ==> almost_full_on (list_emb ?P) (lists ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Higman_OI.qo_on_LEXEQ",
     "transp_on ?P ?A ==> qo_on (LEXEQ ?P) (SEQ ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 1)),
                 template_hole 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Higman_OI.open_on_LEXEQ_imp_pt_open_on_counterexample",
     "?a ~= ?b ==> minimal_element (%x y. False) {?a, ?b}",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, t_empty),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)))
           ))),
    ("Higman_OI.antisymp_on_LEX",
     "[| irreflp_on ?P ?A; antisymp_on ?P ?A |]
      ==> antisymp_on (LEX ?P) (SEQ ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Higman_OI.open_on_LEXEQ_imp_pt_open_on_counterexample",
     "?a ~= ?b ==> ~ pt_open_on (%f. ALL i. f i = ?b) (SEQ {?a, ?b})",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 4, t_empty),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_hole 0))))
               )
           ))),
    ("Higman_OI.open_on_LEXEQ_imp_pt_open_on_counterexample",
     "?a ~= ?b ==>
      open_on (LEXEQ (%x y. False)) (%f. ALL i. f i = ?b) (SEQ {?a, ?b})",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 1),
                     template_app
                      (template_app (template_hole 6, template_var 0),
                       template_hole 5)))),
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, t_empty)),
                 template_hole 1)),
             t_empty)
           ))),
    ("Higman_OI.pt_open_onD",
     "[| pt_open_on ?Q ?A; ?Q ?f; ?f : ?A |]
      ==> EX n. ALL g:?A. (ALL i<n. g i = ?f i) --> ?Q g",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_var 2, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Higman_OI.LEX_trans",
     "[| transp_on ?P ?A; ?f : SEQ ?A; ?g : SEQ ?A; ?h : SEQ ?A;
         LEX ?P ?f ?g; LEX ?P ?g ?h |]
      ==> LEX ?P ?f ?h",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 4),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 4),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 2),
             template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.Higman_OITemplates"
### 0.360s elapsed time, 0.551s cpu time, 0.085s GC time
val it = (): unit
