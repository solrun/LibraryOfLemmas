Loading theory "Draft.AxiomaticCategoryTheory" (required by "Draft.AxiomaticCategoryTheoryMoreTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.AxiomaticCategoryTheoryMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.AxiomaticCategoryTheoryMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.AxiomaticCategoryTheoryMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
Default parameters for Nitpick:
assms = true
batch_size = smart
binary_ints = smart
bisim_depth = 9
bits = 1-10
box = smart
card = 1-10
datatype_sym_break = 5
debug = false
destroy_constrs = true
expect = genuine
falsify = true
finitize = smart
format = 2
iter = 0,1,2,4,8,12,16,20,24,28
kodkod_sym_break = 15
max_genuine = 1
max_potential = 1
max_threads = 0
merge_type_vars = false
mono = smart
overlord = false
peephole_optim = true
sat_solver = smart
show_consts = 
show_skolems = 
show_types = 
specialize = true
spy = false
star_linear_preds = true
tac_timeout = 0.5
timeout = 30
total_consts = smart
user_axioms = 
verbose = false
wf = smart
Default parameters for Sledgehammer:
compress = smart
debug = false
fact_filter = smart
fact_thresholds = 0.45 0.85
induction_rules = smart
isar_proofs = smart
lam_trans = smart
learn = true
max_facts = smart
max_mono_iters = smart
max_new_mono_instances = smart
minimize = true
overlord
preplay_timeout = 1
provers = cvc4 vampire verit e
slice = true
smt_proofs = true
spy = false
strict = false
timeout = 30
try0 = true
type_enc = smart
uncurried_aliases = smart
verbose = false
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale AxiomsSet1
  assumes "AxiomsSet1"
### theory "HOL-Library.Function_Algebras"
### 0.140s elapsed time, 0.579s cpu time, 0.049s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.AxiomaticCategoryTheoryMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
locale AxiomsSet2
  assumes "AxiomsSet2"
locale AxiomsSet2
  assumes "AxiomsSet2"
### theory "HOL-Library.Set_Algebras"
### 0.214s elapsed time, 0.867s cpu time, 0.049s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.AxiomaticCategoryTheoryMoreTemplates" via "Draft.ExtrEqs")
locale AxiomsSet3
  assumes "AxiomsSet3"
locale AxiomsSet3
  assumes "AxiomsSet3"
locale AxiomsSet2
  assumes "AxiomsSet2"
Found termination order: "size_list size <*mlex*> {}"
locale AxiomsSet4
  assumes "AxiomsSet4"
locale AxiomsSet4
  assumes "AxiomsSet4"
locale AxiomsSet3
  assumes "AxiomsSet3"
locale AxiomsSet5
  assumes "AxiomsSet5"
locale AxiomsSet5
  assumes "AxiomsSet5"
locale AxiomsSet4
  assumes "AxiomsSet4"
locale AxiomsSet6
  assumes "AxiomsSet6"
locale AxiomsSet6
  assumes "AxiomsSet6"
locale AxiomsSet5
  assumes "AxiomsSet5"
### theory "HOL-Library.Nat_Bijection"
### 0.387s elapsed time, 1.542s cpu time, 0.143s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.AxiomaticCategoryTheoryMoreTemplates" via "Draft.ExtrEqs")
locale AxiomsSet7
  assumes "AxiomsSet7"
locale AxiomsSet7orig
  fixes source :: "i => i"  (\<open>\<box>_\<close> [108] 109)
    and target :: "i => i"  (\<open>_\<box>\<close> [110] 111)
    and
    compositionF :: "i => i => i"
      (infix \<open>\<^bold>\<cdot>\<close> 110)
  assumes "AxiomsSet7orig source target (\<^bold>\<cdot>)"
locale AxiomsSet8
  assumes "AxiomsSet8"
locale AxiomsSet8
  assumes "AxiomsSet8"
locale AxiomsSet8Strict
  assumes "AxiomsSet8Strict"
locale AxiomsSet8Strict
  assumes "AxiomsSet8Strict"
locale AxiomsSet5
  assumes "AxiomsSet5"
locale AxiomsSet8Strict
  assumes "AxiomsSet8Strict"
locale AxiomsSetMcL
  assumes "AxiomsSetMcL"
locale AxiomsSetMcL
  assumes "AxiomsSetMcL"
locale AxiomsSet1
  assumes "AxiomsSet1"
locale SkolemizedAxiomsSetMcL
  assumes "SkolemizedAxiomsSetMcL"
locale SkolemizedAxiomsSetMcL
  assumes "SkolemizedAxiomsSetMcL"
### theory "Draft.AxiomaticCategoryTheory"
### 0.649s elapsed time, 2.592s cpu time, 0.236s GC time
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.BigO"
### 0.834s elapsed time, 2.940s cpu time, 0.344s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.081s elapsed time, 3.306s cpu time, 0.836s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.961s elapsed time, 4.987s cpu time, 0.996s GC time
Loading theory "Draft.Templates" (required by "Draft.AxiomaticCategoryTheoryMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.046s elapsed time, 0.061s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.AxiomaticCategoryTheoryMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.445s elapsed time, 0.481s cpu time, 0.041s GC time
Loading theory "Draft.AxiomaticCategoryTheoryMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.AxiomaticCategoryTheoryMoreTemplates"
### 0.316s elapsed time, 0.453s cpu time, 0.071s GC time
val it = (): unit
