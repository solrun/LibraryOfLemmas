Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ResultsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ResultsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.ResultsTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Tree" (required by "Draft.ResultsTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.136s elapsed time, 0.566s cpu time, 0.047s GC time
Loading theory "Draft.Nominal2_Lemmas" (required by "Draft.ResultsTemplates" via "Draft.Results" via "Draft.Agreement" via "Draft.Semantics" via "Draft.FMap_Lemmas")
### theory "Draft.Nominal2_Lemmas"
### 0.043s elapsed time, 0.173s cpu time, 0.000s GC time
Loading theory "Draft.FMap_Lemmas" (required by "Draft.ResultsTemplates" via "Draft.Results" via "Draft.Agreement" via "Draft.Semantics")
### theory "HOL-Library.Set_Algebras"
### 0.208s elapsed time, 0.853s cpu time, 0.047s GC time
Loading theory "Draft.Syntax" (required by "Draft.ResultsTemplates" via "Draft.Results" via "Draft.Agreement" via "Draft.Semantics")
instantiation
  hash :: pure
  permute_hash == permute :: perm => hash => hash
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
instantiation
  fmap :: (pt, pt) pt
  permute_fmap == permute :: perm => ('a, 'b) fmap => ('a, 'b) fmap
consts
  left :: "'a tree => 'a tree"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  right :: "'a tree => 'a tree"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### theory "Draft.FMap_Lemmas"
### 0.454s elapsed time, 1.779s cpu time, 0.210s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ResultsTemplates" via "Draft.ExtrEqs")
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.864s elapsed time, 3.421s cpu time, 0.329s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.960s elapsed time, 3.140s cpu time, 0.728s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.043s elapsed time, 6.658s cpu time, 1.184s GC time
Loading theory "Draft.Templates" (required by "Draft.ResultsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.135s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ResultsTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.548s elapsed time, 1.126s cpu time, 0.069s GC time
Proofs for inductive predicate(s) "value"
  Proving monotonicity ...
### theory "Draft.Syntax"
### 10.706s elapsed time, 15.532s cpu time, 1.537s GC time
Loading theory "Draft.Semantics" (required by "Draft.ResultsTemplates" via "Draft.Results" via "Draft.Agreement")
Proofs for inductive predicate(s) "judge_weak"
  Proving monotonicity ...
Proofs for inductive predicate(s) "judge"
  Proving monotonicity ...
instantiation
  mode :: pure
  permute_mode == permute :: perm => mode => mode
Proofs for inductive predicate(s) "smallstep"
  Proving monotonicity ...
Proofs for inductive predicate(s) "smallsteps"
  Proving monotonicity ...
### theory "Draft.Semantics"
### 8.875s elapsed time, 9.344s cpu time, 0.503s GC time
Loading theory "Draft.Agreement" (required by "Draft.ResultsTemplates" via "Draft.Results")
Proofs for inductive predicate(s) "agree"
  Proving monotonicity ...
### theory "Draft.Agreement"
### 3.041s elapsed time, 3.227s cpu time, 0.124s GC time
Loading theory "Draft.Results" (required by "Draft.ResultsTemplates")
### theory "Draft.Results"
### 0.188s elapsed time, 0.237s cpu time, 0.070s GC time
Loading theory "Draft.ResultsTemplates"
val templateLemmas =
   [("Results.judge_imp_agree",
     "?\<Gamma> \<turnstile> ?e : ?\<tau> ==>
      ?\<Gamma> \<turnstile> ?e, ?e, ?e : ?\<tau>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 1),
               template_var 1),
             template_var 0)
           ))),
    ("Results.lemma2_1",
     "?\<Gamma> \<turnstile> ?e, ?eP, ?eV : ?\<tau> ==>
      \<lparr>?eP\<rparr> = ?eV",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 2), template_var 1))),
    ("Results.lemma2_3",
     "?\<Gamma> \<turnstile> ?e, ?eP, ?eV : ?\<tau> ==>
      erase_env ?\<Gamma> \<turnstile>\<^sub>W ?e : erase ?\<tau>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 4)),
               template_var 3),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Results.smallstep_ideal_deterministic",
     "[| \<lless>[], ?t\<ggreater> I\<rightarrow> \<lless>[], ?u\<ggreater>;
         \<lless>[], ?t\<ggreater> I\<rightarrow> \<lless>[], ?u'\<ggreater> |]
      ==> ?u = ?u'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_hole 2),
                    template_var 2),
                  template_hole 1),
                template_hole 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_hole 2),
                    template_var 2),
                  template_hole 1),
                template_hole 2),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Results.smallsteps_ideal_deterministic",
     "[| \<lless>[], ?t\<ggreater> I\<rightarrow>?i \<lless>[], ?u\<ggreater>;
         \<lless>[], ?t\<ggreater> I\<rightarrow>?i \<lless>[], ?u'\<ggreater> |]
      ==> ?u = ?u'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_hole 2),
                      template_var 3),
                    template_hole 1),
                  template_var 2),
                template_hole 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_hole 2),
                      template_var 3),
                    template_hole 1),
                  template_var 2),
                template_hole 2),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Results.lemma2_4",
     "?\<Gamma> \<turnstile> ?e, ?eP, ?eV : ?\<tau> ==>
      Syntax.value ?e & Syntax.value ?eP & Syntax.value ?eV |
      ~ Syntax.value ?e & ~ Syntax.value ?eP & ~ Syntax.value ?eV",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 3)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 2)),
                   template_app (template_hole 1, template_var 1)))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 0,
                   template_app (template_hole 1, template_var 3))),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_hole 0,
                     template_app (template_hole 1, template_var 2))),
                 template_app
                  (template_hole 0,
                   template_app (template_hole 1, template_var 1)))))
           ))),
    ("Results.lemma4",
     "[| ?\<Gamma>(?x $$:= ?\<tau>') \<turnstile> ?e, ?eP, ?eV : ?\<tau>;
         {$$} \<turnstile> ?v, ?vP, ?vV : ?\<tau>'; Syntax.value ?v;
         Syntax.value ?vP; Syntax.value ?vV |]
      ==> ?\<Gamma> \<turnstile> ?e[?v / ?x], ?eP[?vP / ?x], ?eV[?vV / ?x] : ?\<tau>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 4,
                      template_app
                       (template_app
                         (template_app (template_hole 3, template_var 9),
                          template_var 8),
                        template_var 7)),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_hole 2),
                    template_var 2),
                  template_var 1),
                template_var 0),
              template_var 8)
            ),
        template_predicate (template_app (template_hole 1, template_var 2)),
        template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_var 7),
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 6),
                       template_var 2),
                     template_var 9)),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 1),
                   template_var 9)),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 0),
                 template_var 9)),
             template_var 3)
           ))),
    ("Results.remark1_single",
     "[| {$$} \<turnstile> ?e, ?eP, ?eV : ?\<tau>;
         \<lless>?\<pi>P, ?eP\<ggreater> P\<rightarrow> \<lless>?\<pi>P @
                          ?\<pi>, ?eP'\<ggreater>;
         !!e' eV'.
            {$$} \<turnstile> e', ?eP', eV' : ?\<tau> &
            \<lless>[], ?e\<ggreater> I\<rightarrow> \<lless>[], e'\<ggreater> &
            \<lless>?\<pi>, ?eV\<ggreater> V\<rightarrow> \<lless>[], eV'\<ggreater> ==>
            ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 9, template_hole 8),
                    template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 7, template_var 3),
                    template_var 6),
                  template_hole 6),
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Results.theorem1_correctness",
     "[| {$$} \<turnstile> ?e, ?eP, ?eV : ?\<tau>;
         \<lless>[], ?e\<ggreater> I\<rightarrow>?i \<lless>[], ?e'\<ggreater>;
         !!eP' eV' \<pi>.
            [| \<lless>[], ?eP\<ggreater> P\<rightarrow>?i \<lless>\<pi>, eP'\<ggreater>;
               \<lless>\<pi>, ?eV\<ggreater> V\<rightarrow>?i \<lless>[], eV'\<ggreater>;
               {$$} \<turnstile> ?e', eP', eV' : ?\<tau> |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 8, template_hole 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 6, template_hole 5),
                      template_var 6),
                    template_hole 4),
                  template_var 2),
                template_hole 5),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Results.remark1",
     "[| {$$} \<turnstile> ?e, ?eP, ?eV : ?\<tau>;
         \<lless>?\<pi>\<^sub>P, ?eP\<ggreater> P\<rightarrow>?i \<lless>?\<pi>\<^sub>P @
                                   ?\<pi>, ?eP'\<ggreater>;
         !!e' eV'.
            [| {$$} \<turnstile> e', ?eP', eV' : ?\<tau>;
               \<lless>[], ?e\<ggreater> I\<rightarrow>?i \<lless>[], e'\<ggreater>;
               \<lless>?\<pi>, ?eV\<ggreater> V\<rightarrow>?i \<lless>[], eV'\<ggreater> |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 8, template_hole 7),
                    template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 6, template_var 4),
                      template_var 7),
                    template_hole 5),
                  template_var 3),
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Results.lemma5",
     "[| {$$} \<turnstile> ?e, ?eP, ?eV : ?\<tau>;
         \<lless>[], ?e\<ggreater> I\<rightarrow> \<lless>[], ?e'\<ggreater>;
         !!eP' eV' \<pi>.
            [| {$$} \<turnstile> ?e', eP', eV' : ?\<tau>;
               ALL \<pi>\<^sub>P.
                  \<lless>\<pi>\<^sub>P, ?eP\<ggreater> P\<rightarrow> \<lless>\<pi>\<^sub>P @
   \<pi>, eP'\<ggreater>;
               ALL \<pi>'.
                  \<lless>\<pi> @
                          \<pi>', ?eV\<ggreater> V\<rightarrow> \<lless>\<pi>', eV'\<ggreater> |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 10, template_hole 9),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 8, template_hole 7),
                    template_var 5),
                  template_hole 6),
                template_hole 7),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Results.lemma3",
     "[| ?\<Gamma> \<turnstile> ?e : ?\<tau>; fmdom ?vs = fmdom ?\<Gamma>;
         fmdom ?vPs = fmdom ?\<Gamma>; fmdom ?vVs = fmdom ?\<Gamma>;
         ALL x.
            x |\<in>| fmdom ?\<Gamma> -->
            (EX \<tau>'.
                ?\<Gamma> $$ x = Some (AuthT \<tau>') &
                (EX v. ?vs $$ x = Some v &
                       (EX vP h.
                           ?vPs $$ x = Some (Hashed h vP) &
                           ?vVs $$ x = Some (Hash h) &
                           {$$} \<turnstile> v, Hashed h
           vP, Hash h : AuthT \<tau>'))) |]
      ==> {$$} \<turnstile> psubst_term ?e
                             ?vs, psubst_term ?e
                                   ?vPs, psubst_term ?e ?vVs : ?\<tau>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 22, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_equation
         (template_app (template_hole 20, template_var 2),
          template_app (template_hole 19, template_var 5)),
        template_equation
         (template_app (template_hole 20, template_var 1),
          template_app (template_hole 19, template_var 5)),
        template_equation
         (template_app (template_hole 20, template_var 0),
          template_app (template_hole 19, template_var 5)),
        template_predicate (template_app (template_hole 18, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 0)),
             template_var 3)
           ))),
    ("Results.lemma3_general",
     "[| ?\<Gamma> \<turnstile> ?e : ?\<tau>;
         ?A |\<subseteq>| fmdom ?\<Gamma>; fmdom ?vs = ?A; fmdom ?vPs = ?A;
         fmdom ?vVs = ?A;
         ALL x.
            x |\<in>| ?A -->
            (EX \<tau>' v vP h.
                ?\<Gamma> $$ x = Some (AuthT \<tau>') &
                ?vs $$ x = Some v &
                ?vPs $$ x = Some (Hashed h vP) &
                ?vVs $$ x = Some (Hash h) &
                {$$} \<turnstile> v, Hashed h vP, Hash h : AuthT \<tau>') |]
      ==> fmdrop_fset ?A
           ?\<Gamma> \<turnstile> psubst_term ?e
                                   ?vs, psubst_term ?e
   ?vPs, psubst_term ?e ?vVs : ?\<tau>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 24, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_inequation
         (less_equals, template_var 3,
          template_app (template_hole 22, template_var 6)),
        template_equation
         (template_app (template_hole 20, template_var 2), template_var 3),
        template_equation
         (template_app (template_hole 20, template_var 1), template_var 3),
        template_equation
         (template_app (template_hole 20, template_var 0), template_var 3),
        template_predicate (template_app (template_hole 19, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 1, template_var 3),
                       template_var 6)),
                   template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 0)),
             template_var 4)
           ))),
    ("Results.lemma6",
     "[| {$$} \<turnstile> ?e, ?eP, ?eV : ?\<tau>;
         \<lless>?\<pi>\<^sub>A, ?eV\<ggreater> V\<rightarrow> \<lless>?\<pi>', ?eV'\<ggreater>;
         !!e' eP' \<pi>.
            [| \<lless>[], ?e\<ggreater> I\<rightarrow> \<lless>[], e'\<ggreater>;
               ALL \<pi>\<^sub>P.
                  \<lless>\<pi>\<^sub>P, ?eP\<ggreater> P\<rightarrow> \<lless>\<pi>\<^sub>P @
   \<pi>, eP'\<ggreater>;
               {$$} \<turnstile> e', eP', ?eV' : ?\<tau> &
               ?\<pi>\<^sub>A = \<pi> @ ?\<pi>' |
               (EX s s'.
                   Syntax.closed s &
                   Syntax.closed s' &
                   \<pi> = [s] &
                   ?\<pi>\<^sub>A = [s'] @ ?\<pi>' &
                   s ~= s' & hash s = hash s') |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 22, template_hole 21),
                    template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 20, template_var 3),
                    template_var 5),
                  template_hole 19),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 18, t_empty))],
       template_predicate (template_var 0))),
    ("Results.theorem1_security",
     "[| {$$} \<turnstile> ?e, ?eP, ?eV : ?\<tau>;
         \<lless>?\<pi>\<^sub>A, ?eV\<ggreater> V\<rightarrow>?i \<lless>?\<pi>', ?eV'\<ggreater> |]
      ==> (EX e' eP' \<pi>.
              \<lless>[], ?e\<ggreater> I\<rightarrow>?i \<lless>[], e'\<ggreater> &
              \<lless>[], ?eP\<ggreater> P\<rightarrow>?i \<lless>\<pi>, eP'\<ggreater> &
              ?\<pi>\<^sub>A = \<pi> @ ?\<pi>' &
              {$$} \<turnstile> e', eP', ?eV' : ?\<tau>) |
          (EX eP' j \<pi>\<^sub>0 \<pi>\<^sub>0' s s'.
              j <= ?i &
              \<lless>[], ?eP\<ggreater> P\<rightarrow>j \<lless>\<pi>\<^sub>0 @
                           [s], eP'\<ggreater> &
              ?\<pi>\<^sub>A =
              \<pi>\<^sub>0 @ [s'] @ \<pi>\<^sub>0' @ ?\<pi>' &
              s ~= s' &
              hash s = hash s' & Syntax.closed s & Syntax.closed s')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 22, template_hole 21),
                    template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 20, template_var 3),
                      template_var 5),
                    template_hole 19),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 18, template_app (template_hole 17, t_empty)),
             template_app (template_hole 17, t_empty))
           )))]:
   (string * thm * template) list
### theory "Draft.ResultsTemplates"
### 0.887s elapsed time, 1.827s cpu time, 1.095s GC time
val it = (): unit
