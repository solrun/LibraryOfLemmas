Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SyntaxTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SyntaxTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.SyntaxTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "HOL-Library.Stream" (required by "Draft.SyntaxTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.140s elapsed time, 0.566s cpu time, 0.049s GC time
Loading theory "Draft.Nominal2_Lemmas" (required by "Draft.SyntaxTemplates" via "Draft.Syntax")
### theory "Draft.Nominal2_Lemmas"
### 0.037s elapsed time, 0.156s cpu time, 0.000s GC time
Loading theory "Draft.Syntax" (required by "Draft.SyntaxTemplates")
instantiation
  hash :: pure
  permute_hash == permute :: perm => hash => hash
### theory "HOL-Library.Set_Algebras"
### 0.233s elapsed time, 0.940s cpu time, 0.049s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SyntaxTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.829s elapsed time, 3.265s cpu time, 0.323s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.873s elapsed time, 3.192s cpu time, 0.707s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.819s elapsed time, 5.637s cpu time, 0.913s GC time
Loading theory "Draft.Templates" (required by "Draft.SyntaxTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.134s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SyntaxTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.512s elapsed time, 1.056s cpu time, 0.089s GC time
Proofs for inductive predicate(s) "value"
  Proving monotonicity ...
### theory "Draft.Syntax"
### 9.841s elapsed time, 13.923s cpu time, 1.242s GC time
Loading theory "Draft.SyntaxTemplates"
val templateLemmas =
   [("Syntax.value_inv", "~ Syntax.value (Auth ?v)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("Syntax.value_inv", "~ Syntax.value (Prj1 ?v)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("Syntax.value_inv", "~ Syntax.value (Prj2 ?v)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("Syntax.value_inv", "~ Syntax.value (Unauth ?v)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("Syntax.value_inv", "~ Syntax.value (Unroll ?v)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("Syntax.no_vars_in_ty", "atom ?x \<sharp> ?\<tau>",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)
         )),
    ("Syntax.no_tvars_in_term", "atom ?x \<sharp> ?t",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)
         )),
    ("Syntax.value_inv", "~ Syntax.value (App ?v ?v')",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))
             )
         )),
    ("Syntax.value_inv", "~ Syntax.value (Case ?v ?v\<^sub>1 ?v\<^sub>2)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0))
             )
         )),
    ("Syntax.value_inv",
     "~ Syntax.value (Syntax.Let ?e\<^sub>1 ?x ?e\<^sub>2)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0))
             )
         )),
    ("Syntax.value_Inj1_inv",
     "[| Syntax.value (Inj1 ?e); Syntax.value ?e ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app (template_hole 0, template_var 1))
            ),
        template_implication
         ([template_predicate
            (template_app (template_hole 1, template_var 1))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Syntax.value_Inj2_inv",
     "[| Syntax.value (Inj2 ?e); Syntax.value ?e ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app (template_hole 0, template_var 1))
            ),
        template_implication
         ([template_predicate
            (template_app (template_hole 1, template_var 1))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Syntax.value_Roll_inv",
     "[| Syntax.value (Roll ?e); Syntax.value ?e ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app (template_hole 0, template_var 1))
            ),
        template_implication
         ([template_predicate
            (template_app (template_hole 1, template_var 1))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Syntax.value_Hashed_inv",
     "[| Syntax.value (Hashed ?h ?e); Syntax.value ?e ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (template_app (template_hole 1, template_var 1))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Syntax.value_Pair_inv",
     "[| Syntax.value (Syntax.Pair ?e\<^sub>1 ?e\<^sub>2);
         [| Syntax.value ?e\<^sub>1; Syntax.value ?e\<^sub>2 |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (template_app (template_hole 1, template_var 2))],
          template_implication
           ([template_predicate
              (template_app (template_hole 1, template_var 1))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Syntax.atom_var_sort", "sort_of (atom ?a) = Sort ''Syntax.var'' []",
     template_equation
      (template_app
        (template_hole 8, template_app (template_hole 7, template_var 0)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_hole 4, template_hole 3),
                             template_hole 3),
                           template_hole 2),
                         template_hole 2),
                       template_hole 3),
                     template_hole 2),
                   template_hole 3),
                 template_hole 2)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 4, template_hole 3),
                               template_hole 2),
                             template_hole 2),
                           template_hole 3),
                         template_hole 3),
                       template_hole 3),
                     template_hole 3),
                   template_hole 2)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 4, template_hole 2),
                                 template_hole 3),
                               template_hole 3),
                             template_hole 3),
                           template_hole 2),
                         template_hole 3),
                       template_hole 3),
                     template_hole 2)),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_hole 4, template_hole 2),
                                   template_hole 2),
                                 template_hole 3),
                               template_hole 2),
                             template_hole 3),
                           template_hole 3),
                         template_hole 3),
                       template_hole 2)),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_hole 4, template_hole 3),
                                     template_hole 2),
                                   template_hole 2),
                                 template_hole 2),
                               template_hole 2),
                             template_hole 3),
                           template_hole 3),
                         template_hole 2)),
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app (template_hole 4, template_hole 2), template_hole 2),
                                     template_hole 2),
                                   template_hole 3),
                                 template_hole 3),
                               template_hole 3),
                             template_hole 3),
                           template_hole 2)),
                       template_app
                        (template_app
                          (template_hole 5,
                           template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app (template_hole 4, template_hole 2), template_hole 3),
 template_hole 3),
                                     template_hole 3),
                                   template_hole 2),
                                 template_hole 3),
                               template_hole 2),
                             template_hole 2)),
                         template_app
                          (template_app
                            (template_hole 5,
                             template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app (template_hole 4, template_hole 2), template_hole 3),
   template_hole 3),
 template_hole 2),
                                     template_hole 3),
                                   template_hole 3),
                                 template_hole 3),
                               template_hole 2)),
                           template_app
                            (template_app
                              (template_hole 5,
                               template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app (template_hole 4, template_hole 3), template_hole 2),
     template_hole 2),
   template_hole 2),
 template_hole 2),
                                     template_hole 3),
                                   template_hole 3),
                                 template_hole 2)),
                             template_app
                              (template_app
                                (template_hole 5,
                                 template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app (template_hole 4, template_hole 2), template_hole 3),
       template_hole 2),
     template_hole 2),
   template_hole 3),
 template_hole 3),
                                     template_hole 3),
                                   template_hole 2)),
                               template_hole 1))))))))))),
         template_hole 0))),
    ("Syntax.atom_tvar_sort", "sort_of (atom ?a) = Sort ''Syntax.tvar'' []",
     template_equation
      (template_app
        (template_hole 8, template_app (template_hole 7, template_var 0)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_hole 4, template_hole 3),
                             template_hole 3),
                           template_hole 2),
                         template_hole 2),
                       template_hole 3),
                     template_hole 2),
                   template_hole 3),
                 template_hole 2)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 4, template_hole 3),
                               template_hole 2),
                             template_hole 2),
                           template_hole 3),
                         template_hole 3),
                       template_hole 3),
                     template_hole 3),
                   template_hole 2)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 4, template_hole 2),
                                 template_hole 3),
                               template_hole 3),
                             template_hole 3),
                           template_hole 2),
                         template_hole 3),
                       template_hole 3),
                     template_hole 2)),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_hole 4, template_hole 2),
                                   template_hole 2),
                                 template_hole 3),
                               template_hole 2),
                             template_hole 3),
                           template_hole 3),
                         template_hole 3),
                       template_hole 2)),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_hole 4, template_hole 3),
                                     template_hole 2),
                                   template_hole 2),
                                 template_hole 2),
                               template_hole 2),
                             template_hole 3),
                           template_hole 3),
                         template_hole 2)),
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app (template_hole 4, template_hole 2), template_hole 2),
                                     template_hole 2),
                                   template_hole 3),
                                 template_hole 3),
                               template_hole 3),
                             template_hole 3),
                           template_hole 2)),
                       template_app
                        (template_app
                          (template_hole 5,
                           template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app (template_hole 4, template_hole 2), template_hole 3),
 template_hole 3),
                                     template_hole 3),
                                   template_hole 2),
                                 template_hole 3),
                               template_hole 2),
                             template_hole 2)),
                         template_app
                          (template_app
                            (template_hole 5,
                             template_app
                              (template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app (template_hole 4, template_hole 2), template_hole 2),
   template_hole 3),
 template_hole 2),
                                     template_hole 3),
                                   template_hole 3),
                                 template_hole 3),
                               template_hole 2)),
                           template_app
                            (template_app
                              (template_hole 5,
                               template_app
                                (template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app (template_hole 4, template_hole 2), template_hole 3),
     template_hole 3),
   template_hole 2),
 template_hole 3),
                                     template_hole 3),
                                   template_hole 3),
                                 template_hole 2)),
                             template_app
                              (template_app
                                (template_hole 5,
                                 template_app
                                  (template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app (template_hole 4, template_hole 3), template_hole 2),
       template_hole 2),
     template_hole 2),
   template_hole 2),
 template_hole 3),
                                     template_hole 3),
                                   template_hole 2)),
                               template_app
                                (template_app
                                  (template_hole 5,
                                   template_app
                                    (template_app
(template_app
  (template_app
    (template_app
      (template_app
        (template_app
          (template_app (template_hole 4, template_hole 2),
           template_hole 3),
         template_hole 2),
       template_hole 2),
     template_hole 3),
   template_hole 3),
 template_hole 3),
                                     template_hole 2)),
                                 template_hole 1)))))))))))),
         template_hole 0)))]:
   (string * thm * template) list
### theory "Draft.SyntaxTemplates"
### 0.529s elapsed time, 0.859s cpu time, 0.051s GC time
val it = (): unit
