Loading theory "HOL-Library.Function_Algebras" (required by "Draft.AgreementTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.AgreementTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.AgreementTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.AgreementTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.147s elapsed time, 0.610s cpu time, 0.047s GC time
Loading theory "Draft.Nominal2_Lemmas" (required by "Draft.AgreementTemplates" via "Draft.Agreement" via "Draft.Semantics" via "Draft.FMap_Lemmas")
### theory "Draft.Nominal2_Lemmas"
### 0.039s elapsed time, 0.160s cpu time, 0.000s GC time
Loading theory "Draft.FMap_Lemmas" (required by "Draft.AgreementTemplates" via "Draft.Agreement" via "Draft.Semantics")
### theory "HOL-Library.Set_Algebras"
### 0.206s elapsed time, 0.843s cpu time, 0.047s GC time
Loading theory "Draft.Syntax" (required by "Draft.AgreementTemplates" via "Draft.Agreement" via "Draft.Semantics")
instantiation
  hash :: pure
  permute_hash == permute :: perm => hash => hash
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
consts
  right :: "'a tree => 'a tree"
instantiation
  fmap :: (pt, pt) pt
  permute_fmap == permute :: perm => ('a, 'b) fmap => ('a, 'b) fmap
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.FMap_Lemmas"
### 0.476s elapsed time, 1.862s cpu time, 0.215s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.AgreementTemplates" via "Draft.ExtrEqs")
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.861s elapsed time, 3.411s cpu time, 0.328s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.863s elapsed time, 2.819s cpu time, 0.698s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.873s elapsed time, 6.189s cpu time, 1.008s GC time
Loading theory "Draft.Templates" (required by "Draft.AgreementTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.069s elapsed time, 0.180s cpu time, 0.047s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.AgreementTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.515s elapsed time, 1.055s cpu time, 0.060s GC time
Proofs for inductive predicate(s) "value"
  Proving monotonicity ...
### theory "Draft.Syntax"
### 10.601s elapsed time, 15.113s cpu time, 1.375s GC time
Loading theory "Draft.Semantics" (required by "Draft.AgreementTemplates" via "Draft.Agreement")
Proofs for inductive predicate(s) "judge_weak"
  Proving monotonicity ...
Proofs for inductive predicate(s) "judge"
  Proving monotonicity ...
instantiation
  mode :: pure
  permute_mode == permute :: perm => mode => mode
Proofs for inductive predicate(s) "smallstep"
  Proving monotonicity ...
Proofs for inductive predicate(s) "smallsteps"
  Proving monotonicity ...
### theory "Draft.Semantics"
### 8.894s elapsed time, 9.333s cpu time, 0.492s GC time
Loading theory "Draft.Agreement" (required by "Draft.AgreementTemplates")
Proofs for inductive predicate(s) "agree"
  Proving monotonicity ...
### theory "Draft.Agreement"
### 3.170s elapsed time, 4.110s cpu time, 1.163s GC time
Loading theory "Draft.AgreementTemplates"
val templateLemmas =
   [("Agreement.agree_weakening_env",
     "{$$} \<turnstile> ?e, ?eP, ?eV : ?\<tau> ==>
      ?\<Gamma> \<turnstile> ?e, ?eP, ?eV : ?\<tau>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_hole 0),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("Agreement.agree_empty_fresh",
     "{$$} \<turnstile> ?e, ?eP, ?eV : ?\<tau> ==>
      {atom ?a} \<sharp>* {?e, ?eP, ?eV}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 7, template_hole 6),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)),
                 template_hole 2)),
             template_app
              (template_app (template_hole 1, template_var 4),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_hole 0))))
           ))),
    ("Agreement.agree_fresh_env_fresh_term",
     "[| ?\<Gamma> \<turnstile> ?e, ?eP, ?eV : ?\<tau>;
         atom ?a \<sharp> ?\<Gamma> |]
      ==> atom ?a \<sharp> (?e, ?eP, ?eV)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)),
              template_var 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 3, template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 4),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)))
           ))),
    ("Agreement.agree_weakening_2",
     "[| ?\<Gamma> \<turnstile> ?e, ?eP, ?eV : ?\<tau>;
         atom ?y \<sharp> ?\<Gamma> |]
      ==> ?\<Gamma>(?y $$:= ?\<tau>') \<turnstile> ?e, ?eP, ?eV : ?\<tau>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)),
              template_var 6)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 1),
                         template_var 0),
                       template_var 6)),
                   template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2)
           ))),
    ("Agreement.agree_weakening_1",
     "[| ?\<Gamma> \<turnstile> ?e, ?eP, ?eV : ?\<tau>; atom ?y \<sharp> ?e;
         atom ?y \<sharp> ?eP; atom ?y \<sharp> ?eV |]
      ==> ?\<Gamma>(?y $$:= ?\<tau>') \<turnstile> ?e, ?eP, ?eV : ?\<tau>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 1),
                         template_var 0),
                       template_var 6)),
                   template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2)
           ))),
    ("Agreement.a_HashI_inv",
     "[| ?\<Gamma> \<turnstile> ?v, Hashed (hash \<lparr>?vP\<rparr>)
                                     ?vP, Hash
     (hash \<lparr>?vP\<rparr>) : AuthT ?\<tau>;
         [| {$$} \<turnstile> ?v, ?vP, \<lparr>?vP\<rparr> : ?\<tau>;
            Syntax.value ?v; Syntax.value ?vP |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 7, template_var 4),
                    template_var 3),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_hole 5,
                        template_app (template_hole 4, template_var 2))),
                    template_var 2)),
                template_app
                 (template_hole 3,
                  template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 2)))),
              template_app (template_hole 2, template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 7, template_hole 1),
                       template_var 3),
                     template_var 2),
                   template_app (template_hole 4, template_var 2)),
                 template_var 1)
               )],
          template_implication
           ([template_predicate
              (template_app (template_hole 0, template_var 3))],
            template_implication
             ([template_predicate
                (template_app (template_hole 0, template_var 2))],
              template_predicate (template_var 0))))],
       template_predicate (template_var 0))),
    ("Agreement.a_Inj1_inv_V",
     "[| ?\<Gamma> \<turnstile> ?e, ?eP, Inj1
    ?eV : Syntax.Sum ?\<tau>\<^sub>1 ?\<tau>\<^sub>2;
         !!e eP.
            [| ?e = Inj1 e; ?eP = Inj1 eP;
               ?\<Gamma> \<turnstile> e, eP, ?eV : ?\<tau>\<^sub>1 |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 6),
                    template_var 5),
                  template_var 4),
                template_app (template_hole 3, template_var 3)),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Agreement.a_Inj2_inv_V",
     "[| ?\<Gamma> \<turnstile> ?e, ?eP, Inj2
    ?eV : Syntax.Sum ?\<tau>\<^sub>1 ?\<tau>\<^sub>2;
         !!e eP.
            [| ?e = Inj2 e; ?eP = Inj2 eP;
               ?\<Gamma> \<turnstile> e, eP, ?eV : ?\<tau>\<^sub>2 |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 6),
                    template_var 5),
                  template_var 4),
                template_app (template_hole 3, template_var 3)),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Agreement.a_Inj1_inv_P",
     "[| ?\<Gamma> \<turnstile> ?e, Inj1
                                     ?eP, ?eV : Syntax.Sum ?\<tau>\<^sub>1
           ?\<tau>\<^sub>2;
         !!e eV.
            [| ?e = Inj1 e; ?eV = Inj1 eV;
               ?\<Gamma> \<turnstile> e, ?eP, eV : ?\<tau>\<^sub>1 |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 6),
                    template_var 5),
                  template_app (template_hole 3, template_var 4)),
                template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Agreement.a_Inj2_inv_P",
     "[| ?\<Gamma> \<turnstile> ?e, Inj2
                                     ?eP, ?eV : Syntax.Sum ?\<tau>\<^sub>1
           ?\<tau>\<^sub>2;
         !!e eV.
            [| ?e = Inj2 e; ?eV = Inj2 eV;
               ?\<Gamma> \<turnstile> e, ?eP, eV : ?\<tau>\<^sub>2 |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 6),
                    template_var 5),
                  template_app (template_hole 3, template_var 4)),
                template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Agreement.a_Inj1_inv_I",
     "[| ?\<Gamma> \<turnstile> Inj1
                                 ?e, ?eP, ?eV : Syntax.Sum ?\<tau>\<^sub>1
           ?\<tau>\<^sub>2;
         !!eP eV.
            [| ?eP = Inj1 eP; ?eV = Inj1 eV;
               ?\<Gamma> \<turnstile> ?e, eP, eV : ?\<tau>\<^sub>1 |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 6),
                    template_app (template_hole 3, template_var 5)),
                  template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Agreement.a_Inj2_inv_I",
     "[| ?\<Gamma> \<turnstile> Inj2
                                 ?e, ?eP, ?eV : Syntax.Sum ?\<tau>\<^sub>1
           ?\<tau>\<^sub>2;
         !!eP eV.
            [| ?eP = Inj2 eP; ?eV = Inj2 eV;
               ?\<Gamma> \<turnstile> ?e, eP, eV : ?\<tau>\<^sub>2 |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 6),
                    template_app (template_hole 3, template_var 5)),
                  template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Agreement.a_Roll_inv_V",
     "[| ?\<Gamma> \<turnstile> ?e, ?eP, Roll ?eV' : Mu ?\<alpha> ?\<tau>;
         !!e' eP'.
            [| ?e = Roll e'; ?eP = Roll eP';
               ?\<Gamma> \<turnstile> e', eP', ?eV' : subst_type ?\<tau>
                 (Mu ?\<alpha> ?\<tau>) ?\<alpha> |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 6),
                    template_var 5),
                  template_var 4),
                template_app (template_hole 4, template_var 3)),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Agreement.a_Roll_inv_P",
     "[| ?\<Gamma> \<turnstile> ?e, Roll ?eP', ?eV : Mu ?\<alpha> ?\<tau>;
         !!e' eV'.
            [| ?e = Roll e'; ?eV = Roll eV';
               ?\<Gamma> \<turnstile> e', ?eP', eV' : subst_type ?\<tau>
                 (Mu ?\<alpha> ?\<tau>) ?\<alpha> |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 6),
                    template_var 5),
                  template_app (template_hole 4, template_var 4)),
                template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Agreement.a_Roll_inv_I",
     "[| ?\<Gamma> \<turnstile> Roll ?e', ?eP, ?eV : Mu ?\<alpha> ?\<tau>;
         !!eP' eV'.
            [| ?eP = Roll eP'; ?eV = Roll eV';
               ?\<Gamma> \<turnstile> ?e', eP', eV' : subst_type ?\<tau>
                 (Mu ?\<alpha> ?\<tau>) ?\<alpha> |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 6),
                    template_app (template_hole 4, template_var 5)),
                  template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Agreement.a_Lam_inv_V",
     "[| {$$} \<turnstile> ?v, ?vP, Lam ?x
                                     ?vV' : Fun ?\<tau>\<^sub>1
       ?\<tau>\<^sub>2;
         !!v' vP'.
            [| ?v = Lam ?x v'; ?vP = Lam ?x vP';
               {$$}(?x $$:= ?\<tau>\<^sub>1) \<turnstile> v', vP', ?vV' : ?\<tau>\<^sub>2 |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_hole 5),
                    template_var 6),
                  template_var 5),
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Agreement.a_Lam_inv_P",
     "[| {$$} \<turnstile> ?v, Lam ?x
                                ?vP', ?vV : Fun ?\<tau>\<^sub>1
       ?\<tau>\<^sub>2;
         !!v' vV'.
            [| ?v = Lam ?x v'; ?vV = Lam ?x vV';
               {$$}(?x $$:= ?\<tau>\<^sub>1) \<turnstile> v', ?vP', vV' : ?\<tau>\<^sub>2 |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_hole 5),
                    template_var 6),
                  template_app
                   (template_app (template_hole 4, template_var 5),
                    template_var 4)),
                template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Agreement.a_AuthT_value_inv",
     "[| {$$} \<turnstile> ?v, ?vP, ?vV : AuthT ?\<tau>; Syntax.value ?v;
         Syntax.value ?vP; Syntax.value ?vV;
         !!vP'.
            [| ?vP = Hashed (hash \<lparr>vP'\<rparr>) vP';
               ?vV = Hash (hash \<lparr>vP'\<rparr>); Syntax.value vP' |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 9, template_hole 8),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_app (template_hole 7, template_var 1))
            ),
        template_predicate (template_app (template_hole 6, template_var 4)),
        template_predicate (template_app (template_hole 6, template_var 3)),
        template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Agreement.a_Lam_inv_I",
     "[| ?\<Gamma> \<turnstile> Lam ?x
                                 ?e', ?eP, ?eV : Fun ?\<tau>\<^sub>1
            ?\<tau>\<^sub>2;
         atom ?x \<sharp> ?\<Gamma>;
         !!eP' eV'.
            [| ?eP = Lam ?x eP'; ?eV = Lam ?x eV';
               ?\<Gamma>(?x $$:= ?\<tau>\<^sub>1) \<turnstile> ?e', eP', eV' : ?\<tau>\<^sub>2 |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 7, template_var 7),
                    template_app
                     (template_app (template_hole 6, template_var 6),
                      template_var 5)),
                  template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 6)),
              template_var 7)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Agreement.a_Pair_inv_P",
     "[| ?\<Gamma> \<turnstile> ?e, Syntax.Pair ?eP\<^sub>1
                                     ?eP\<^sub>2, ?eV : Syntax.Prod
                   ?\<tau>\<^sub>1 ?\<tau>\<^sub>2;
         !!e\<^sub>1 eV\<^sub>1 e\<^sub>2 eV\<^sub>2.
            [| ?e = Syntax.Pair e\<^sub>1 e\<^sub>2;
               ?eV = Syntax.Pair eV\<^sub>1 eV\<^sub>2;
               ?\<Gamma> \<turnstile> e\<^sub>1, ?eP\<^sub>1, eV\<^sub>1 : ?\<tau>\<^sub>1;
               ?\<Gamma> \<turnstile> e\<^sub>2, ?eP\<^sub>2, eV\<^sub>2 : ?\<tau>\<^sub>2 |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 7),
                    template_var 6),
                  template_app
                   (template_app (template_hole 3, template_var 5),
                    template_var 4)),
                template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Agreement.a_Pair_inv_I",
     "[| ?\<Gamma> \<turnstile> Syntax.Pair ?e\<^sub>1
                                 ?e\<^sub>2, ?eP, ?eV : Syntax.Prod
                   ?\<tau>\<^sub>1 ?\<tau>\<^sub>2;
         !!eP\<^sub>1 eV\<^sub>1 eP\<^sub>2 eV\<^sub>2.
            [| ?eP = Syntax.Pair eP\<^sub>1 eP\<^sub>2;
               ?eV = Syntax.Pair eV\<^sub>1 eV\<^sub>2;
               ?\<Gamma> \<turnstile> ?e\<^sub>1, eP\<^sub>1, eV\<^sub>1 : ?\<tau>\<^sub>1;
               ?\<Gamma> \<turnstile> ?e\<^sub>2, eP\<^sub>2, eV\<^sub>2 : ?\<tau>\<^sub>2 |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 7),
                    template_app
                     (template_app (template_hole 3, template_var 6),
                      template_var 5)),
                  template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Agreement.Abs_lst_eq_3tuple",
     "[| [[atom ?x]]lst. ?e = [[atom ?x']]lst. ?e';
         [[atom ?x]]lst. ?eP = [[atom ?x']]lst. ?eP';
         [[atom ?x]]lst. ?eV = [[atom ?x']]lst. ?eV' |]
      ==> [[atom ?x]]lst. (?e, ?eP, ?eV) =
          [[atom ?x']]lst. (?e', ?eP', ?eV')",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_var 7)),
                template_hole 4)),
            template_var 6),
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_var 5)),
                template_hole 4)),
            template_var 4)),
        template_equation
         (template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_var 7)),
                template_hole 4)),
            template_var 3),
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_var 5)),
                template_hole 4)),
            template_var 2)),
        template_equation
         (template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_var 7)),
                template_hole 4)),
            template_var 1),
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_var 5)),
                template_hole 4)),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 5, template_var 7)),
               template_hole 4)),
           template_app
            (template_app (template_hole 1, template_var 6),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 5, template_var 5)),
               template_hole 4)),
           template_app
            (template_app (template_hole 1, template_var 4),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)))))),
    ("Agreement.a_Rec_inv_V",
     "[| ?\<Gamma> \<turnstile> ?e, ?eP, Rec ?x
    ?eV : Fun ?\<tau>\<^sub>1 ?\<tau>\<^sub>2;
         atom ?x \<sharp> ?\<Gamma>;
         !!y e' eP' eV'.
            [| ?e = Rec ?x (Lam y e'); ?eP = Rec ?x (Lam y eP');
               ?eV = Lam y eV'; atom y \<sharp> (?\<Gamma>, ?x);
               ?\<Gamma>(?x $$:= Fun ?\<tau>\<^sub>1
                                  ?\<tau>\<^sub>2) \<turnstile> Lam y
                           e', Lam y
                                eP', Lam y
eV' : Fun ?\<tau>\<^sub>1 ?\<tau>\<^sub>2 |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 11, template_var 7),
                    template_var 6),
                  template_var 5),
                template_app
                 (template_app (template_hole 10, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 9, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 4)),
              template_var 7)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("Agreement.a_Rec_inv_P",
     "[| ?\<Gamma> \<turnstile> ?e, Rec ?x
                                     ?eP, ?eV : Fun ?\<tau>\<^sub>1
           ?\<tau>\<^sub>2;
         atom ?x \<sharp> ?\<Gamma>;
         !!y e' eP' eV'.
            [| ?e = Rec ?x (Lam y e'); ?eP = Lam y eP';
               ?eV = Rec ?x (Lam y eV'); atom y \<sharp> (?\<Gamma>, ?x);
               ?\<Gamma>(?x $$:= Fun ?\<tau>\<^sub>1
                                  ?\<tau>\<^sub>2) \<turnstile> Lam y
                           e', Lam y
                                eP', Lam y
eV' : Fun ?\<tau>\<^sub>1 ?\<tau>\<^sub>2 |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 11, template_var 7),
                    template_var 6),
                  template_app
                   (template_app (template_hole 10, template_var 5),
                    template_var 4)),
                template_var 3),
              template_app
               (template_app (template_hole 9, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 5)),
              template_var 7)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("Agreement.a_Rec_inv_I",
     "[| ?\<Gamma> \<turnstile> Rec ?x
                                 ?e, ?eP, ?eV : Fun ?\<tau>\<^sub>1
           ?\<tau>\<^sub>2;
         atom ?x \<sharp> ?\<Gamma>;
         !!y e' eP' eV'.
            [| ?e = Lam y e'; ?eP = Rec ?x (Lam y eP');
               ?eV = Rec ?x (Lam y eV'); atom y \<sharp> (?\<Gamma>, ?x);
               ?\<Gamma>(?x $$:= Fun ?\<tau>\<^sub>1
                                  ?\<tau>\<^sub>2) \<turnstile> Lam y
                           e', Lam y
                                eP', Lam y
eV' : Fun ?\<tau>\<^sub>1 ?\<tau>\<^sub>2 |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 11, template_var 7),
                    template_app
                     (template_app (template_hole 10, template_var 6),
                      template_var 5)),
                  template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 9, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 6)),
              template_var 7)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("Agreement.a_Prod_inv",
     "[| ?\<Gamma> \<turnstile> ?e, ?eP, ?eV : Syntax.Prod ?\<tau>\<^sub>1
          ?\<tau>\<^sub>2;
         !!x. [| ?e = Var x; ?eP = Var x; ?eV = Var x;
                 ?\<Gamma> $$ x =
                 Some (Syntax.Prod ?\<tau>\<^sub>1 ?\<tau>\<^sub>2) |]
              ==> ?P;
         !!e\<^sub>1 eP\<^sub>1 eV\<^sub>1 \<tau>\<^sub>1 e\<^sub>2
            eP\<^sub>2 eV\<^sub>2.
            [| ?e = App e\<^sub>1 e\<^sub>2;
               ?eP = App eP\<^sub>1 eP\<^sub>2;
               ?eV = App eV\<^sub>1 eV\<^sub>2;
               ?\<Gamma> \<turnstile> e\<^sub>1, eP\<^sub>1, eV\<^sub>1 : Fun
                                     \<tau>\<^sub>1
                                     (Syntax.Prod ?\<tau>\<^sub>1
 ?\<tau>\<^sub>2);
               ?\<Gamma> \<turnstile> e\<^sub>2, eP\<^sub>2, eV\<^sub>2 : \<tau>\<^sub>1 |]
            ==> ?P;
         !!x e\<^sub>1 eP\<^sub>1 eV\<^sub>1 \<tau>\<^sub>1 e\<^sub>2
            eP\<^sub>2 eV\<^sub>2.
            [| ?e = Syntax.Let e\<^sub>1 x e\<^sub>2;
               ?eP = Syntax.Let eP\<^sub>1 x eP\<^sub>2;
               ?eV = Syntax.Let eV\<^sub>1 x eV\<^sub>2;
               atom
                x \<sharp> (?\<Gamma>, e\<^sub>1, eP\<^sub>1, eV\<^sub>1);
               ?\<Gamma> \<turnstile> e\<^sub>1, eP\<^sub>1, eV\<^sub>1 : \<tau>\<^sub>1;
               ?\<Gamma>(x $$:= \<tau>\<^sub>1) \<turnstile> e\<^sub>2, eP\<^sub>2, eV\<^sub>2 : Syntax.Prod
                      ?\<tau>\<^sub>1 ?\<tau>\<^sub>2 |]
            ==> ?P;
         !!e eP eV \<tau>\<^sub>1 \<tau>\<^sub>2 e\<^sub>1 eP\<^sub>1
            eV\<^sub>1 e\<^sub>2 eP\<^sub>2 eV\<^sub>2.
            [| ?e = Case e e\<^sub>1 e\<^sub>2;
               ?eP = Case eP eP\<^sub>1 eP\<^sub>2;
               ?eV = Case eV eV\<^sub>1 eV\<^sub>2;
               ?\<Gamma> \<turnstile> e, eP, eV : Syntax.Sum \<tau>\<^sub>1
             \<tau>\<^sub>2;
               ?\<Gamma> \<turnstile> e\<^sub>1, eP\<^sub>1, eV\<^sub>1 : Fun
                                     \<tau>\<^sub>1
                                     (Syntax.Prod ?\<tau>\<^sub>1
 ?\<tau>\<^sub>2);
               ?\<Gamma> \<turnstile> e\<^sub>2, eP\<^sub>2, eV\<^sub>2 : Fun
                                     \<tau>\<^sub>2
                                     (Syntax.Prod ?\<tau>\<^sub>1
 ?\<tau>\<^sub>2) |]
            ==> ?P;
         !!e\<^sub>1 eP\<^sub>1 eV\<^sub>1 e\<^sub>2 eP\<^sub>2 eV\<^sub>2.
            [| ?e = Syntax.Pair e\<^sub>1 e\<^sub>2;
               ?eP = Syntax.Pair eP\<^sub>1 eP\<^sub>2;
               ?eV = Syntax.Pair eV\<^sub>1 eV\<^sub>2;
               ?\<Gamma> \<turnstile> e\<^sub>1, eP\<^sub>1, eV\<^sub>1 : ?\<tau>\<^sub>1;
               ?\<Gamma> \<turnstile> e\<^sub>2, eP\<^sub>2, eV\<^sub>2 : ?\<tau>\<^sub>2 |]
            ==> ?P;
         !!e eP eV \<tau>\<^sub>2.
            [| ?e = Prj1 e; ?eP = Prj1 eP; ?eV = Prj1 eV;
               ?\<Gamma> \<turnstile> e, eP, eV : Syntax.Prod
             (Syntax.Prod ?\<tau>\<^sub>1 ?\<tau>\<^sub>2) \<tau>\<^sub>2 |]
            ==> ?P;
         !!e eP eV \<tau>\<^sub>1.
            [| ?e = Prj2 e; ?eP = Prj2 eP; ?eV = Prj2 eV;
               ?\<Gamma> \<turnstile> e, eP, eV : Syntax.Prod \<tau>\<^sub>1
             (Syntax.Prod ?\<tau>\<^sub>1 ?\<tau>\<^sub>2) |]
            ==> ?P;
         !!\<alpha> e eP eV \<tau>.
            [| ?e = Unroll e; ?eP = Unroll eP; ?eV = Unroll eV;
               Syntax.Prod ?\<tau>\<^sub>1 ?\<tau>\<^sub>2 =
               subst_type \<tau> (Mu \<alpha> \<tau>) \<alpha>;
               atom \<alpha> \<sharp> ?\<Gamma>;
               ?\<Gamma> \<turnstile> e, eP, eV : Mu \<alpha> \<tau> |]
            ==> ?P;
         !!e eP eV.
            [| ?e = Unauth e; ?eP = Unauth eP; ?eV = Unauth eV;
               ?\<Gamma> \<turnstile> e, eP, eV : AuthT
             (Syntax.Prod ?\<tau>\<^sub>1 ?\<tau>\<^sub>2) |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 32, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 31, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 30, t_empty)),
        template_predicate (template_app (template_hole 24, t_empty)),
        template_predicate (template_app (template_hole 30, t_empty)),
        template_predicate (template_app (template_hole 24, t_empty)),
        template_predicate (template_app (template_hole 24, t_empty)),
        template_predicate (template_app (template_hole 24, t_empty)),
        template_predicate (template_app (template_hole 24, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 24, t_empty))],
       template_predicate (template_var 0))),
    ("Agreement.a_Mu_inv",
     "[| ?\<Gamma> \<turnstile> ?e, ?eP, ?eV : Mu ?\<alpha> ?\<tau>;
         !!x. [| ?e = Var x; ?eP = Var x; ?eV = Var x;
                 ?\<Gamma> $$ x = Some (Mu ?\<alpha> ?\<tau>) |]
              ==> ?P;
         !!e\<^sub>1 eP\<^sub>1 eV\<^sub>1 \<tau>\<^sub>1 e\<^sub>2
            eP\<^sub>2 eV\<^sub>2.
            [| ?e = App e\<^sub>1 e\<^sub>2;
               ?eP = App eP\<^sub>1 eP\<^sub>2;
               ?eV = App eV\<^sub>1 eV\<^sub>2;
               ?\<Gamma> \<turnstile> e\<^sub>1, eP\<^sub>1, eV\<^sub>1 : Fun
                                     \<tau>\<^sub>1 (Mu ?\<alpha> ?\<tau>);
               ?\<Gamma> \<turnstile> e\<^sub>2, eP\<^sub>2, eV\<^sub>2 : \<tau>\<^sub>1 |]
            ==> ?P;
         !!x e\<^sub>1 eP\<^sub>1 eV\<^sub>1 \<tau>\<^sub>1 e\<^sub>2
            eP\<^sub>2 eV\<^sub>2.
            [| ?e = Syntax.Let e\<^sub>1 x e\<^sub>2;
               ?eP = Syntax.Let eP\<^sub>1 x eP\<^sub>2;
               ?eV = Syntax.Let eV\<^sub>1 x eV\<^sub>2;
               atom
                x \<sharp> (?\<Gamma>, e\<^sub>1, eP\<^sub>1, eV\<^sub>1);
               ?\<Gamma> \<turnstile> e\<^sub>1, eP\<^sub>1, eV\<^sub>1 : \<tau>\<^sub>1;
               ?\<Gamma>(x $$:= \<tau>\<^sub>1) \<turnstile> e\<^sub>2, eP\<^sub>2, eV\<^sub>2 : Mu
                      ?\<alpha> ?\<tau> |]
            ==> ?P;
         !!e eP eV \<tau>\<^sub>1 \<tau>\<^sub>2 e\<^sub>1 eP\<^sub>1
            eV\<^sub>1 e\<^sub>2 eP\<^sub>2 eV\<^sub>2.
            [| ?e = Case e e\<^sub>1 e\<^sub>2;
               ?eP = Case eP eP\<^sub>1 eP\<^sub>2;
               ?eV = Case eV eV\<^sub>1 eV\<^sub>2;
               ?\<Gamma> \<turnstile> e, eP, eV : Syntax.Sum \<tau>\<^sub>1
             \<tau>\<^sub>2;
               ?\<Gamma> \<turnstile> e\<^sub>1, eP\<^sub>1, eV\<^sub>1 : Fun
                                     \<tau>\<^sub>1 (Mu ?\<alpha> ?\<tau>);
               ?\<Gamma> \<turnstile> e\<^sub>2, eP\<^sub>2, eV\<^sub>2 : Fun
                                     \<tau>\<^sub>2
                                     (Mu ?\<alpha> ?\<tau>) |]
            ==> ?P;
         !!e eP eV \<tau>\<^sub>2.
            [| ?e = Prj1 e; ?eP = Prj1 eP; ?eV = Prj1 eV;
               ?\<Gamma> \<turnstile> e, eP, eV : Syntax.Prod
             (Mu ?\<alpha> ?\<tau>) \<tau>\<^sub>2 |]
            ==> ?P;
         !!e eP eV \<tau>\<^sub>1.
            [| ?e = Prj2 e; ?eP = Prj2 eP; ?eV = Prj2 eV;
               ?\<Gamma> \<turnstile> e, eP, eV : Syntax.Prod \<tau>\<^sub>1
             (Mu ?\<alpha> ?\<tau>) |]
            ==> ?P;
         !!\<alpha> e eP eV \<tau>.
            [| ?e = Roll e; ?eP = Roll eP; ?eV = Roll eV;
               [[atom ?\<alpha>]]lst. ?\<tau> =
               [[atom \<alpha>]]lst. \<tau>;
               atom \<alpha> \<sharp> ?\<Gamma>;
               ?\<Gamma> \<turnstile> e, eP, eV : subst_type \<tau>
             (Mu \<alpha> \<tau>) \<alpha> |]
            ==> ?P;
         !!\<alpha> e eP eV \<tau>.
            [| ?e = Unroll e; ?eP = Unroll eP; ?eV = Unroll eV;
               Mu ?\<alpha> ?\<tau> =
               subst_type \<tau> (Mu \<alpha> \<tau>) \<alpha>;
               atom \<alpha> \<sharp> ?\<Gamma>;
               ?\<Gamma> \<turnstile> e, eP, eV : Mu \<alpha> \<tau> |]
            ==> ?P;
         !!e eP eV.
            [| ?e = Unauth e; ?eP = Unauth eP; ?eV = Unauth eV;
               ?\<Gamma> \<turnstile> e, eP, eV : AuthT
             (Mu ?\<alpha> ?\<tau>) |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 36, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 35, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 34, t_empty)),
        template_predicate (template_app (template_hole 28, t_empty)),
        template_predicate (template_app (template_hole 34, t_empty)),
        template_predicate (template_app (template_hole 28, t_empty)),
        template_predicate (template_app (template_hole 28, t_empty)),
        template_predicate (template_app (template_hole 28, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 28, t_empty))],
       template_predicate (template_var 0))),
    ("Agreement.a_Sum_inv",
     "[| ?\<Gamma> \<turnstile> ?e, ?eP, ?eV : Syntax.Sum ?\<tau>\<^sub>1
          ?\<tau>\<^sub>2;
         !!x. [| ?e = Var x; ?eP = Var x; ?eV = Var x;
                 ?\<Gamma> $$ x =
                 Some (Syntax.Sum ?\<tau>\<^sub>1 ?\<tau>\<^sub>2) |]
              ==> ?P;
         !!e\<^sub>1 eP\<^sub>1 eV\<^sub>1 \<tau>\<^sub>1 e\<^sub>2
            eP\<^sub>2 eV\<^sub>2.
            [| ?e = App e\<^sub>1 e\<^sub>2;
               ?eP = App eP\<^sub>1 eP\<^sub>2;
               ?eV = App eV\<^sub>1 eV\<^sub>2;
               ?\<Gamma> \<turnstile> e\<^sub>1, eP\<^sub>1, eV\<^sub>1 : Fun
                                     \<tau>\<^sub>1
                                     (Syntax.Sum ?\<tau>\<^sub>1
 ?\<tau>\<^sub>2);
               ?\<Gamma> \<turnstile> e\<^sub>2, eP\<^sub>2, eV\<^sub>2 : \<tau>\<^sub>1 |]
            ==> ?P;
         !!x e\<^sub>1 eP\<^sub>1 eV\<^sub>1 \<tau>\<^sub>1 e\<^sub>2
            eP\<^sub>2 eV\<^sub>2.
            [| ?e = Syntax.Let e\<^sub>1 x e\<^sub>2;
               ?eP = Syntax.Let eP\<^sub>1 x eP\<^sub>2;
               ?eV = Syntax.Let eV\<^sub>1 x eV\<^sub>2;
               atom
                x \<sharp> (?\<Gamma>, e\<^sub>1, eP\<^sub>1, eV\<^sub>1);
               ?\<Gamma> \<turnstile> e\<^sub>1, eP\<^sub>1, eV\<^sub>1 : \<tau>\<^sub>1;
               ?\<Gamma>(x $$:= \<tau>\<^sub>1) \<turnstile> e\<^sub>2, eP\<^sub>2, eV\<^sub>2 : Syntax.Sum
                      ?\<tau>\<^sub>1 ?\<tau>\<^sub>2 |]
            ==> ?P;
         !!e eP eV.
            [| ?e = Inj1 e; ?eP = Inj1 eP; ?eV = Inj1 eV;
               ?\<Gamma> \<turnstile> e, eP, eV : ?\<tau>\<^sub>1 |]
            ==> ?P;
         !!e eP eV.
            [| ?e = Inj2 e; ?eP = Inj2 eP; ?eV = Inj2 eV;
               ?\<Gamma> \<turnstile> e, eP, eV : ?\<tau>\<^sub>2 |]
            ==> ?P;
         !!e eP eV \<tau>\<^sub>1 \<tau>\<^sub>2 e\<^sub>1 eP\<^sub>1
            eV\<^sub>1 e\<^sub>2 eP\<^sub>2 eV\<^sub>2.
            [| ?e = Case e e\<^sub>1 e\<^sub>2;
               ?eP = Case eP eP\<^sub>1 eP\<^sub>2;
               ?eV = Case eV eV\<^sub>1 eV\<^sub>2;
               ?\<Gamma> \<turnstile> e, eP, eV : Syntax.Sum \<tau>\<^sub>1
             \<tau>\<^sub>2;
               ?\<Gamma> \<turnstile> e\<^sub>1, eP\<^sub>1, eV\<^sub>1 : Fun
                                     \<tau>\<^sub>1
                                     (Syntax.Sum ?\<tau>\<^sub>1
 ?\<tau>\<^sub>2);
               ?\<Gamma> \<turnstile> e\<^sub>2, eP\<^sub>2, eV\<^sub>2 : Fun
                                     \<tau>\<^sub>2
                                     (Syntax.Sum ?\<tau>\<^sub>1
 ?\<tau>\<^sub>2) |]
            ==> ?P;
         !!e eP eV \<tau>\<^sub>2.
            [| ?e = Prj1 e; ?eP = Prj1 eP; ?eV = Prj1 eV;
               ?\<Gamma> \<turnstile> e, eP, eV : Syntax.Prod
             (Syntax.Sum ?\<tau>\<^sub>1 ?\<tau>\<^sub>2) \<tau>\<^sub>2 |]
            ==> ?P;
         !!e eP eV \<tau>\<^sub>1.
            [| ?e = Prj2 e; ?eP = Prj2 eP; ?eV = Prj2 eV;
               ?\<Gamma> \<turnstile> e, eP, eV : Syntax.Prod \<tau>\<^sub>1
             (Syntax.Sum ?\<tau>\<^sub>1 ?\<tau>\<^sub>2) |]
            ==> ?P;
         !!\<alpha> e eP eV \<tau>.
            [| ?e = Unroll e; ?eP = Unroll eP; ?eV = Unroll eV;
               Syntax.Sum ?\<tau>\<^sub>1 ?\<tau>\<^sub>2 =
               subst_type \<tau> (Mu \<alpha> \<tau>) \<alpha>;
               atom \<alpha> \<sharp> ?\<Gamma>;
               ?\<Gamma> \<turnstile> e, eP, eV : Mu \<alpha> \<tau> |]
            ==> ?P;
         !!e eP eV.
            [| ?e = Unauth e; ?eP = Unauth eP; ?eV = Unauth eV;
               ?\<Gamma> \<turnstile> e, eP, eV : AuthT
             (Syntax.Sum ?\<tau>\<^sub>1 ?\<tau>\<^sub>2) |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 33, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 32, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 31, t_empty)),
        template_predicate (template_app (template_hole 25, t_empty)),
        template_predicate (template_app (template_hole 31, t_empty)),
        template_predicate (template_app (template_hole 25, t_empty)),
        template_predicate (template_app (template_hole 25, t_empty)),
        template_predicate (template_app (template_hole 25, t_empty)),
        template_predicate (template_app (template_hole 25, t_empty)),
        template_predicate (template_app (template_hole 25, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 25, t_empty))],
       template_predicate (template_var 0))),
    ("Agreement.a_Fun_inv",
     "[| ?\<Gamma> \<turnstile> ?e, ?eP, ?eV : Fun ?\<tau>\<^sub>1
          ?\<tau>\<^sub>2;
         !!x. [| ?e = Var x; ?eP = Var x; ?eV = Var x;
                 ?\<Gamma> $$ x =
                 Some (Fun ?\<tau>\<^sub>1 ?\<tau>\<^sub>2) |]
              ==> ?P;
         !!x e eP eV.
            [| ?e = Lam x e; ?eP = Lam x eP; ?eV = Lam x eV;
               atom x \<sharp> ?\<Gamma>;
               ?\<Gamma>(x $$:= ?\<tau>\<^sub>1) \<turnstile> e, eP, eV : ?\<tau>\<^sub>2 |]
            ==> ?P;
         !!e\<^sub>1 eP\<^sub>1 eV\<^sub>1 \<tau>\<^sub>1 e\<^sub>2
            eP\<^sub>2 eV\<^sub>2.
            [| ?e = App e\<^sub>1 e\<^sub>2;
               ?eP = App eP\<^sub>1 eP\<^sub>2;
               ?eV = App eV\<^sub>1 eV\<^sub>2;
               ?\<Gamma> \<turnstile> e\<^sub>1, eP\<^sub>1, eV\<^sub>1 : Fun
                                     \<tau>\<^sub>1
                                     (Fun ?\<tau>\<^sub>1 ?\<tau>\<^sub>2);
               ?\<Gamma> \<turnstile> e\<^sub>2, eP\<^sub>2, eV\<^sub>2 : \<tau>\<^sub>1 |]
            ==> ?P;
         !!x e\<^sub>1 eP\<^sub>1 eV\<^sub>1 \<tau>\<^sub>1 e\<^sub>2
            eP\<^sub>2 eV\<^sub>2.
            [| ?e = Syntax.Let e\<^sub>1 x e\<^sub>2;
               ?eP = Syntax.Let eP\<^sub>1 x eP\<^sub>2;
               ?eV = Syntax.Let eV\<^sub>1 x eV\<^sub>2;
               atom
                x \<sharp> (?\<Gamma>, e\<^sub>1, eP\<^sub>1, eV\<^sub>1);
               ?\<Gamma> \<turnstile> e\<^sub>1, eP\<^sub>1, eV\<^sub>1 : \<tau>\<^sub>1;
               ?\<Gamma>(x $$:= \<tau>\<^sub>1) \<turnstile> e\<^sub>2, eP\<^sub>2, eV\<^sub>2 : Fun
                      ?\<tau>\<^sub>1 ?\<tau>\<^sub>2 |]
            ==> ?P;
         !!x y e eP eV.
            [| ?e = Rec x (Lam y e); ?eP = Rec x (Lam y eP);
               ?eV = Rec x (Lam y eV); atom x \<sharp> ?\<Gamma>;
               atom y \<sharp> (?\<Gamma>, x);
               ?\<Gamma>(x $$:= Fun ?\<tau>\<^sub>1
                                 ?\<tau>\<^sub>2) \<turnstile> Lam y
                          e, Lam y
                              eP, Lam y
                                   eV : Fun ?\<tau>\<^sub>1
   ?\<tau>\<^sub>2 |]
            ==> ?P;
         !!e eP eV \<tau>\<^sub>1 \<tau>\<^sub>2 e\<^sub>1 eP\<^sub>1
            eV\<^sub>1 e\<^sub>2 eP\<^sub>2 eV\<^sub>2.
            [| ?e = Case e e\<^sub>1 e\<^sub>2;
               ?eP = Case eP eP\<^sub>1 eP\<^sub>2;
               ?eV = Case eV eV\<^sub>1 eV\<^sub>2;
               ?\<Gamma> \<turnstile> e, eP, eV : Syntax.Sum \<tau>\<^sub>1
             \<tau>\<^sub>2;
               ?\<Gamma> \<turnstile> e\<^sub>1, eP\<^sub>1, eV\<^sub>1 : Fun
                                     \<tau>\<^sub>1
                                     (Fun ?\<tau>\<^sub>1 ?\<tau>\<^sub>2);
               ?\<Gamma> \<turnstile> e\<^sub>2, eP\<^sub>2, eV\<^sub>2 : Fun
                                     \<tau>\<^sub>2
                                     (Fun ?\<tau>\<^sub>1
 ?\<tau>\<^sub>2) |]
            ==> ?P;
         !!e eP eV \<tau>\<^sub>2.
            [| ?e = Prj1 e; ?eP = Prj1 eP; ?eV = Prj1 eV;
               ?\<Gamma> \<turnstile> e, eP, eV : Syntax.Prod
             (Fun ?\<tau>\<^sub>1 ?\<tau>\<^sub>2) \<tau>\<^sub>2 |]
            ==> ?P;
         !!e eP eV \<tau>\<^sub>1.
            [| ?e = Prj2 e; ?eP = Prj2 eP; ?eV = Prj2 eV;
               ?\<Gamma> \<turnstile> e, eP, eV : Syntax.Prod \<tau>\<^sub>1
             (Fun ?\<tau>\<^sub>1 ?\<tau>\<^sub>2) |]
            ==> ?P;
         !!\<alpha> e eP eV \<tau>.
            [| ?e = Unroll e; ?eP = Unroll eP; ?eV = Unroll eV;
               Fun ?\<tau>\<^sub>1 ?\<tau>\<^sub>2 =
               subst_type \<tau> (Mu \<alpha> \<tau>) \<alpha>;
               atom \<alpha> \<sharp> ?\<Gamma>;
               ?\<Gamma> \<turnstile> e, eP, eV : Mu \<alpha> \<tau> |]
            ==> ?P;
         !!e eP eV.
            [| ?e = Unauth e; ?eP = Unauth eP; ?eV = Unauth eV;
               ?\<Gamma> \<turnstile> e, eP, eV : AuthT
             (Fun ?\<tau>\<^sub>1 ?\<tau>\<^sub>2) |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 35, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 34, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 33, t_empty)),
        template_predicate (template_app (template_hole 33, t_empty)),
        template_predicate (template_app (template_hole 27, t_empty)),
        template_predicate (template_app (template_hole 33, t_empty)),
        template_predicate (template_app (template_hole 33, t_empty)),
        template_predicate (template_app (template_hole 27, t_empty)),
        template_predicate (template_app (template_hole 27, t_empty)),
        template_predicate (template_app (template_hole 27, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 27, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.AgreementTemplates"
### 0.601s elapsed time, 0.787s cpu time, 0.067s GC time
val it = (): unit
