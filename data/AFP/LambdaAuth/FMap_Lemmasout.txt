Loading theory "HOL-Library.Function_Algebras" (required by "Draft.FMap_LemmasTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.FMap_LemmasTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.FMap_LemmasTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Tree" (required by "Draft.FMap_LemmasTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.163s elapsed time, 0.659s cpu time, 0.050s GC time
Loading theory "Draft.Nominal2_Lemmas" (required by "Draft.FMap_LemmasTemplates" via "Draft.FMap_Lemmas")
### theory "HOL-Library.Set_Algebras"
### 0.217s elapsed time, 0.875s cpu time, 0.050s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.FMap_LemmasTemplates" via "Draft.ExtrEqs")
### theory "Draft.Nominal2_Lemmas"
### 0.066s elapsed time, 0.268s cpu time, 0.000s GC time
Loading theory "Draft.FMap_Lemmas" (required by "Draft.FMap_LemmasTemplates")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
instantiation
  fmap :: (pt, pt) pt
  permute_fmap == permute :: perm => ('a, 'b) fmap => ('a, 'b) fmap
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "Draft.FMap_Lemmas"
### 0.455s elapsed time, 1.782s cpu time, 0.194s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.845s elapsed time, 3.199s cpu time, 0.312s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.721s elapsed time, 2.501s cpu time, 0.262s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.864s elapsed time, 4.671s cpu time, 0.782s GC time
Loading theory "Draft.Templates" (required by "Draft.FMap_LemmasTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.073s elapsed time, 0.133s cpu time, 0.048s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.FMap_LemmasTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.475s elapsed time, 0.483s cpu time, 0.000s GC time
Loading theory "Draft.FMap_LemmasTemplates"
val templateLemmas =
   [("FMap_Lemmas.fresh_fmempty", "?a \<sharp> {$$}",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("FMap_Lemmas.fmempty_eqvt", "?p \<bullet> {$$} = {$$}",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("FMap_Lemmas.map_drop_fun_upd", "map_drop ?x ?F = ?F(?x := None)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("FMap_Lemmas.supp_fun_upd", "supp (?f(?x := ?y)) <= supp (?f, ?x, ?y)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("FMap_Lemmas.supp_fmap_update",
     "supp ?f(?x $$:= ?y) <= supp (?f, ?x, ?y)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("FMap_Lemmas.fmap_apply_eqvt",
     "?p \<bullet> ?f $$ ?b = (?p \<bullet> ?f) $$ (?p \<bullet> ?b)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("FMap_Lemmas.fmmap_eqvt",
     "?p \<bullet> fmmap ?f ?F = fmmap (?p \<bullet> ?f) (?p \<bullet> ?F)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("FMap_Lemmas.fmdrop_eqvt",
     "?p \<bullet> fmdrop ?x ?F =
      fmdrop (?p \<bullet> ?x) (?p \<bullet> ?F)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("FMap_Lemmas.fmfilter_eqvt",
     "?p \<bullet> fmfilter ?Q ?F =
      fmfilter (?p \<bullet> ?Q) (?p \<bullet> ?F)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("FMap_Lemmas.fresh_fset_fminus",
     "atom ?x \<sharp> ?A ==> ?A |-| {|?x|} = ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_var 0))),
    ("FMap_Lemmas.fresh_fmdrop_fset",
     "[| ?x \<sharp> ?A; ?x \<sharp> ?B |]
      ==> ?x \<sharp> fmdrop_fset ?A ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("FMap_Lemmas.fresh_fmdrop",
     "[| ?x \<sharp> ?B; ?x \<sharp> ?y |] ==> ?x \<sharp> fmdrop ?y ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("FMap_Lemmas.fmdrop_fset_fmupd",
     "(fmdrop_fset ?A ?f)(?x $$:= ?y) =
      fmdrop_fset (?A |-| {|?x|}) ?f(?x $$:= ?y)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_hole 0))),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2),
           template_var 0)))),
    ("FMap_Lemmas.fmap_update_eqvt",
     "?p \<bullet> ?f(?a $$:= ?b) =
      (?p \<bullet> ?f)(?p \<bullet> ?a $$:= ?p \<bullet> ?b)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 3),
           template_var 0)))),
    ("FMap_Lemmas.fresh_fun_upd",
     "[| ?a \<sharp> ?f; ?a \<sharp> ?x; ?a \<sharp> ?y |]
      ==> ?a \<sharp> ?f(?x := ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("FMap_Lemmas.fresh_fmap_update",
     "[| ?a \<sharp> ?f; ?a \<sharp> ?x; ?a \<sharp> ?y |]
      ==> ?a \<sharp> ?f(?x $$:= ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("FMap_Lemmas.fresh_fmdrop_in_fmdom",
     "[| ?x : fmdom' ?B; ?y \<sharp> ?B; ?y \<sharp> ?x |]
      ==> ?y \<sharp> fmdrop ?x ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           ))),
    ("FMap_Lemmas.fmdrop_eq_iff",
     "(fmdrop ?x ?B = fmdrop ?y ?B) =
      (?x = ?y | ?x ~: fmdom' ?B & ?y ~: fmdom' ?B)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 6, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 6, template_var 0), template_var 1)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_app (template_hole 0, template_var 1)))),
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_app (template_hole 0, template_var 1)))))
           ))),
    ("FMap_Lemmas.fresh_fun_app",
     "[| atom ?x \<sharp> ?F; ?x ~= ?y; ?F ?y = Some ?a |]
      ==> atom ?x \<sharp> ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 3)),
              template_var 2)
            ),
        template_negation
         (template_equation (template_var 3, template_var 1)),
        template_equation
         (template_app (template_var 2, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 5, template_var 3)),
             template_var 0)
           ))),
    ("FMap_Lemmas.fresh_fmap_fresh_Some",
     "[| atom ?x \<sharp> ?F; ?x ~= ?y; ?F $$ ?y = Some ?a |]
      ==> atom ?x \<sharp> ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 3)),
              template_var 2)
            ),
        template_negation
         (template_equation (template_var 3, template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 6, template_var 3)),
             template_var 0)
           ))),
    ("FMap_Lemmas.fmap_freshness_lemma",
     "EX a. atom a \<sharp> (?h, ?h $$ a) ==>
      EX x. ALL a. atom a \<sharp> ?h --> ?h $$ a = x",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("FMap_Lemmas.fmap_freshness_lemma_unique",
     "EX a. atom a \<sharp> (?h, ?h $$ a) ==>
      EX! x. ALL a. atom a \<sharp> ?h --> ?h $$ a = x",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_app (template_hole 4, t_empty))))]:
   (string * thm * template) list
### theory "Draft.FMap_LemmasTemplates"
### 0.490s elapsed time, 0.644s cpu time, 0.057s GC time
val it = (): unit
