Loading theory "Draft.Arithmetic_Record_Based" (required by "Draft.Square_Free_Factorization_IntTemplates" via "Draft.Square_Free_Factorization_Int" via "Draft.Suitable_Prime" via "Draft.Finite_Field_Record_Based")
Loading theory "Draft.Code_Abort_Gcd" (required by "Draft.Square_Free_Factorization_IntTemplates" via "Draft.Square_Free_Factorization_Int")
Loading theory "Draft.Karatsuba_Multiplication" (required by "Draft.Square_Free_Factorization_IntTemplates" via "Draft.Square_Free_Factorization_Int" via "Draft.Suitable_Prime" via "Draft.Poly_Mod_Finite_Field_Record_Based" via "Draft.Polynomial_Record_Based")
Loading theory "Draft.Templates" (required by "Draft.Square_Free_Factorization_IntTemplates" via "Draft.ExtrEqs")
### Code generator: dropping subsumed code equation
### Gcd (set ?xs) == fold gcd ?xs 0
### Code generator: dropping subsumed code equation
### Lcm (set ?xs) == fold lcm ?xs 1
### Code generator: dropping subsumed code equation
### Gcd (set ?xs) == fold gcd ?xs 0
### Code generator: dropping subsumed code equation
### Lcm (set ?xs) == fold lcm ?xs 1
### Code generator: dropping subsumed code equation
### Gcd (set ?xs) == fold gcd ?xs 0
### Code generator: dropping subsumed code equation
### Lcm (set ?xs) == fold lcm ?xs 1
### theory "Draft.Code_Abort_Gcd"
### 0.078s elapsed time, 0.363s cpu time, 0.000s GC time
Loading theory "Draft.More_Missing_Multiset" (required by "Draft.Square_Free_Factorization_IntTemplates" via "Draft.Square_Free_Factorization_Int" via "Draft.Suitable_Prime" via "Draft.Poly_Mod" via "Draft.Unique_Factorization_Poly" via "Draft.Unique_Factorization")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.079s elapsed time, 0.367s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Square_Free_Factorization_IntTemplates")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Draft.More_Missing_Multiset"
### 0.243s elapsed time, 0.901s cpu time, 0.041s GC time
Loading theory "Draft.Unique_Factorization" (required by "Draft.Square_Free_Factorization_IntTemplates" via "Draft.Square_Free_Factorization_Int" via "Draft.Suitable_Prime" via "Draft.Poly_Mod" via "Draft.Unique_Factorization_Poly")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.713s elapsed time, 2.581s cpu time, 0.322s GC time
Loading theory "Draft.Finite_Field" (required by "Draft.Square_Free_Factorization_IntTemplates" via "Draft.Square_Free_Factorization_Int" via "Draft.Square_Free_Int_To_Square_Free_GFp")
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale arith_ops
  fixes ops :: "'i arith_ops_record"  (structure)
locale comm_monoid_mult_isom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_isom hom"
locale ring_ops
  fixes ops :: "'i arith_ops_record"
    and R :: "'i => 'a => bool"
  assumes "ring_ops ops R"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
locale idom_ops
  fixes ops :: "'i arith_ops_record"
    and R :: "'i => 'a => bool"
  assumes "idom_ops ops R"
locale idom_divide_ops
  fixes ops :: "'i arith_ops_record"
    and R :: "'i => 'a => bool"
  assumes "idom_divide_ops ops R"
instantiation
  mod_ring :: (finite) equal
  equal_mod_ring == equal_class.equal :: 'a mod_ring => 'a mod_ring => bool
instantiation
  mod_ring :: (finite) comm_ring
  uminus_mod_ring == uminus :: 'a mod_ring => 'a mod_ring
  times_mod_ring == times :: 'a mod_ring => 'a mod_ring => 'a mod_ring
  zero_mod_ring == zero_class.zero :: 'a mod_ring
  minus_mod_ring == minus :: 'a mod_ring => 'a mod_ring => 'a mod_ring
  plus_mod_ring == plus :: 'a mod_ring => 'a mod_ring => 'a mod_ring
locale euclidean_semiring_ops
  fixes ops :: "'i arith_ops_record"
    and R :: "'i => 'a => bool"
  assumes "euclidean_semiring_ops ops R"
locale euclidean_ring_ops
  fixes ops :: "'i arith_ops_record"
    and R :: "'i => 'a => bool"
  assumes "euclidean_ring_ops ops R"
locale field_ops
  fixes ops :: "'i arith_ops_record"
    and R :: "'i => 'a => bool"
  assumes "field_ops ops R"
### theory "Draft.Arithmetic_Record_Based"
### 2.074s elapsed time, 7.547s cpu time, 1.059s GC time
### Additional type variable(s) in locale specification "nontriv": 'a
class nontriv = type +
  assumes "nontriv": "1 < CARD('a)"
instantiation
  mod_ring :: (nontriv) comm_ring_1
  one_mod_ring == one_class.one :: 'a mod_ring
### Additional type variable(s) in locale specification "prime_card": 'a
class prime_card = type +
  assumes "prime_card": "prime CARD('a)"
Found termination order:
  "(%p. size (snd (snd (snd p)))) <*mlex*>
   (%p. size (fst (snd p))) <*mlex*> {}"
### theory "Draft.Karatsuba_Multiplication"
### 2.984s elapsed time, 10.200s cpu time, 1.650s GC time
Loading theory "Draft.Polynomial_Record_Based" (required by "Draft.Square_Free_Factorization_IntTemplates" via "Draft.Square_Free_Factorization_Int" via "Draft.Suitable_Prime" via "Draft.Poly_Mod_Finite_Field_Record_Based")
instantiation
  mod_ring :: (prime_card) field
  inverse_mod_ring == inverse :: 'a mod_ring => 'a mod_ring
  divide_mod_ring == divide :: 'a mod_ring => 'a mod_ring => 'a mod_ring
instantiation
  mod_ring :: (prime_card) {normalization_euclidean_semiring,euclidean_ring}
  normalize_mod_ring == normalize :: 'a mod_ring => 'a mod_ring
  unit_factor_mod_ring == unit_factor :: 'a mod_ring => 'a mod_ring
  euclidean_size_mod_ring == euclidean_size :: 'a mod_ring => nat
  modulo_mod_ring == modulo :: 'a mod_ring => 'a mod_ring => 'a mod_ring
instantiation
  mod_ring :: (prime_card) euclidean_ring_gcd
  Gcd_mod_ring == Gcd :: 'a mod_ring set => 'a mod_ring
  Lcm_mod_ring == Lcm :: 'a mod_ring set => 'a mod_ring
  gcd_mod_ring == gcd :: 'a mod_ring => 'a mod_ring => 'a mod_ring
  lcm_mod_ring == lcm :: 'a mod_ring => 'a mod_ring => 'a mod_ring
class ufd = idom +
  assumes
    "mset_factors_exist":
      "!!x. [| x ~= (0::'a); ~ x dvd (1::'a) |] ==> EX F. mset_factors F x"
    and
    "mset_factors_unique":
      "!!x F G.
          [| mset_factors F x; mset_factors G x |] ==> rel_mset (ddvd) F G"
instantiation
  mod_ring :: (prime_card) unique_euclidean_ring
  division_segment_mod_ring == division_segment ::
    'a mod_ring => 'a mod_ring
### theory "Draft.Finite_Field"
### 2.419s elapsed time, 7.904s cpu time, 1.405s GC time
Loading theory "Draft.Square_Free_Int_To_Square_Free_GFp" (required by "Draft.Square_Free_Factorization_IntTemplates" via "Draft.Square_Free_Factorization_Int")
Loading theory "Draft.Finite_Field_Record_Based" (required by "Draft.Square_Free_Factorization_IntTemplates" via "Draft.Square_Free_Factorization_Int" via "Draft.Suitable_Prime")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
class ufd = idom +
  assumes
    "mset_factors_exist":
      "!!x. [| x ~= (0::'a); ~ x dvd (1::'a) |] ==> EX F. mset_factors F x"
    and
    "mset_factors_unique":
      "!!x F G.
          [| mset_factors F x; mset_factors G x |] ==> rel_mset (ddvd) F G"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale comm_semiring_1_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_1_hom hom"
locale irreducibility_hom
  fixes hom :: "'a => 'b"
  assumes "irreducibility_hom hom"
locale unit_preserving_hom
  fixes hom :: "'a => 'b"
  assumes "unit_preserving_hom hom"
locale factor_preserving_hom
  fixes hom :: "'a => 'b"
  assumes "factor_preserving_hom hom"
locale comm_semiring_isom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_isom hom"
### theory "Draft.Square_Free_Int_To_Square_Free_GFp"
### 1.717s elapsed time, 6.226s cpu time, 1.250s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class comm_monoid_gcd = gcd + comm_semiring_1 +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
locale mod_ring_locale
  fixes p :: "int"
    and ty :: "'a itself"
  assumes "mod_ring_locale TYPE('a) p"
locale prime_field
  fixes p :: "int"
    and ty :: "'a itself"
  assumes "prime_field TYPE('a) p"
locale mod_ring_locale
  fixes p :: "int"
    and ty :: "'a itself"
  assumes "mod_ring_locale TYPE('a) p"
locale prime_field
  fixes p :: "int"
    and ty :: "'a itself"
  assumes "prime_field TYPE('a) p"
locale mod_ring_locale
  fixes p :: "int"
    and ty :: "'a itself"
  assumes "mod_ring_locale TYPE('a) p"
class comm_monoid_gcd = gcd + comm_semiring_1 +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
locale prime_field
  fixes p :: "int"
    and ty :: "'a itself"
  assumes "prime_field TYPE('a) p"
locale mod_ring_locale
  fixes p :: "int"
    and ty :: "'a itself"
  assumes "mod_ring_locale TYPE('a) p"
Found termination order:
  "(%p. size (snd (snd (snd p)))) <*mlex*>
   (%p. size (fst (snd p))) <*mlex*> {}"
locale prime_field
  fixes p :: "int"
    and ty :: "'a itself"
  assumes "prime_field TYPE('a) p"
locale prime_field
  fixes p :: "int"
    and ty :: "'a itself"
  assumes "prime_field TYPE('a) p"
[| p = int_of_uint64 ?pp; p <= 4294967295 |]
==> field_ops (finite_field_ops64 ?pp) mod_ring_rel64
[| p = int_of_uint32 ?pp; p <= 65535 |]
==> field_ops (finite_field_ops32 ?pp) mod_ring_rel32
p = int_of_integer ?pp ==>
field_ops (finite_field_ops_integer ?pp) mod_ring_rel_integer
field_ops (finite_field_ops_int p) mod_ring_rel
locale mod_ring_locale
  fixes p :: "int"
    and ty :: "'a itself"
  assumes "mod_ring_locale TYPE('a) p"
[| p = int_of_uint64 ?pp; p <= 4294967295 |]
==> ring_ops (finite_field_ops64 ?pp) mod_ring_rel64
[| p = int_of_uint32 ?pp; p <= 65535 |]
==> ring_ops (finite_field_ops32 ?pp) mod_ring_rel32
p = int_of_integer ?pp ==>
ring_ops (finite_field_ops_integer ?pp) mod_ring_rel_integer
ring_ops (finite_field_ops_int p) mod_ring_rel
### theory "Draft.Finite_Field_Record_Based"
### 3.629s elapsed time, 11.636s cpu time, 1.872s GC time
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale ring_ops
  fixes ops :: "'i arith_ops_record"
    and R :: "'i => 'a => bool"
  assumes "ring_ops ops R"
locale idom_ops
  fixes ops :: "'i arith_ops_record"
    and R :: "'i => 'a => bool"
  assumes "idom_ops ops R"
locale idom_divide_ops
  fixes ops :: "'i arith_ops_record"
    and R :: "'i => 'a => bool"
  assumes "idom_divide_ops ops R"
locale field_ops
  fixes ops :: "'i arith_ops_record"
    and R :: "'i => 'a => bool"
  assumes "field_ops ops R"
locale ring_ops
  fixes ops :: "'i arith_ops_record"
    and R :: "'i => 'a => bool"
  assumes "ring_ops ops R"
### theory "Draft.Polynomial_Record_Based"
### 4.751s elapsed time, 14.133s cpu time, 2.107s GC time
locale gcd_condition
  fixes ty :: "'a itself"
  assumes "gcd_condition TYPE('a)"
### Cannot skip proof of schematic goal statement
### theory "Draft.Unique_Factorization"
### 8.244s elapsed time, 23.849s cpu time, 3.666s GC time
Loading theory "Draft.Unique_Factorization_Poly" (required by "Draft.Square_Free_Factorization_IntTemplates" via "Draft.Square_Free_Factorization_Int" via "Draft.Suitable_Prime" via "Draft.Poly_Mod")
instantiation
  fract :: (idom) {normalization_euclidean_semiring,euclidean_ring}
  normalize_fract == normalize :: 'a fract => 'a fract
  unit_factor_fract == unit_factor :: 'a fract => 'a fract
  euclidean_size_fract == euclidean_size :: 'a fract => nat
  modulo_fract == modulo :: 'a fract => 'a fract => 'a fract
instantiation
  fract :: (idom) euclidean_ring_gcd
  Gcd_fract == Gcd :: 'a fract set => 'a fract
  Lcm_fract == Lcm :: 'a fract set => 'a fract
  gcd_fract == gcd :: 'a fract => 'a fract => 'a fract
  lcm_fract == lcm :: 'a fract => 'a fract => 'a fract
instantiation
  fract :: (idom) unique_euclidean_ring
  division_segment_fract == division_segment :: 'a fract => 'a fract
### theory "Draft.Unique_Factorization_Poly"
### 1.145s elapsed time, 1.240s cpu time, 0.105s GC time
Loading theory "Draft.Poly_Mod" (required by "Draft.Square_Free_Factorization_IntTemplates" via "Draft.Square_Free_Factorization_Int" via "Draft.Suitable_Prime")
locale poly_mod
  fixes m :: "int"
locale poly_mod
  fixes m :: "int"
locale poly_mod_2
  fixes m :: "int"
  assumes "poly_mod_2 m"
locale poly_mod
  fixes m :: "int"
locale poly_mod_2
  fixes m :: "int"
  assumes "poly_mod_2 m"
locale poly_mod
  fixes m :: "int"
locale poly_mod_2
  fixes m :: "int"
  assumes "poly_mod_2 m"
locale poly_mod_prime
  fixes p :: "int"
  assumes "poly_mod_prime p"
locale poly_mod
  fixes m :: "int"
locale poly_mod_2
  fixes m :: "int"
  assumes "poly_mod_2 m"
### theory "Draft.Poly_Mod"
### 1.371s elapsed time, 1.523s cpu time, 0.221s GC time
Loading theory "Draft.Poly_Mod_Finite_Field" (required by "Draft.Square_Free_Factorization_IntTemplates" via "Draft.Square_Free_Factorization_Int" via "Draft.Suitable_Prime" via "Draft.Poly_Mod_Finite_Field_Record_Based")
locale poly_mod_type
  fixes m :: "int"
    and ty :: "'a itself"
  assumes "poly_mod_type TYPE('a) m"
locale poly_mod_2
  fixes m :: "int"
  assumes "poly_mod_2 m"
locale poly_mod_prime_type
  fixes m :: "int"
    and ty :: "'a itself"
  assumes "poly_mod_prime_type TYPE('a) m"
locale poly_mod_prime
  fixes p :: "int"
  assumes "poly_mod_prime p"
### theory "Draft.Poly_Mod_Finite_Field"
### 1.612s elapsed time, 2.637s cpu time, 1.431s GC time
Loading theory "Draft.Poly_Mod_Finite_Field_Record_Based" (required by "Draft.Square_Free_Factorization_IntTemplates" via "Draft.Square_Free_Factorization_Int" via "Draft.Suitable_Prime")
locale arith_ops_record
  fixes ops :: "'i arith_ops_record"
    and m :: "int"
locale mod_ring_gen
  fixes ff_ops :: "'i arith_ops_record"
    and R :: "'i => 'a mod_ring => bool"
    and p :: "int"
  assumes "mod_ring_gen ff_ops R p"
locale prime_field_gen
  fixes ff_ops :: "'i arith_ops_record"
    and R :: "'i => 'a mod_ring => bool"
    and p :: "int"
  assumes "prime_field_gen ff_ops R p"
locale prime_field
  fixes p :: "int"
    and ty :: "'a itself"
  assumes "prime_field TYPE('a) p"
locale mod_ring_locale
  fixes p :: "int"
    and ty :: "'a itself"
  assumes "mod_ring_locale TYPE('a) p"
### theory "Draft.Poly_Mod_Finite_Field_Record_Based"
### 1.441s elapsed time, 1.504s cpu time, 0.097s GC time
Loading theory "Draft.Suitable_Prime" (required by "Draft.Square_Free_Factorization_IntTemplates" via "Draft.Square_Free_Factorization_Int")
locale poly_mod_prime
  fixes p :: "int"
  assumes "poly_mod_prime p"
### theory "Draft.Suitable_Prime"
### 0.887s elapsed time, 0.971s cpu time, 0.130s GC time
Loading theory "Draft.Gcd_Finite_Field_Impl" (required by "Draft.Square_Free_Factorization_IntTemplates" via "Draft.Square_Free_Factorization_Int")
locale poly_mod_prime
  fixes p :: "int"
  assumes "poly_mod_prime p"
### theory "Draft.Gcd_Finite_Field_Impl"
### 0.436s elapsed time, 0.436s cpu time, 0.000s GC time
Loading theory "Draft.Square_Free_Factorization_Int" (required by "Draft.Square_Free_Factorization_IntTemplates")
### theory "Draft.Square_Free_Factorization_Int"
### 0.224s elapsed time, 0.224s cpu time, 0.000s GC time
Loading theory "Draft.Square_Free_Factorization_IntTemplates"
val templateLemmas =
   [("Square_Free_Factorization_Int.yun_relD",
     "yun_rel ?F ?c ?f ==> ?F ~= 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_negation
        (template_equation (template_var 2, template_hole 0)))),
    ("Square_Free_Factorization_Int.yun_relD",
     "yun_rel ?F ?c ?f ==> content ?F = 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 1, template_var 2), template_hole 0))),
    ("Square_Free_Factorization_Int.yun_relD",
     "yun_rel ?F ?c ?f ==> yun_wrel ?F ?c ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Square_Free_Factorization_Int.yun_relD",
     "yun_rel ?F ?c ?f ==> degree ?F = degree ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 1, template_var 2),
         template_app (template_hole 0, template_var 0)))),
    ("Square_Free_Factorization_Int.yun_erel_1_eq",
     "yun_erel ?F ?f ==> (?F = 1) = (?f = 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_bimplication
        (template_equation (template_var 1, template_hole 2),
         template_equation (template_var 0, template_hole 0)))),
    ("Square_Free_Factorization_Int.yun_erel_pow",
     "yun_erel ?F ?f ==> yun_erel (?F ^ ?n) (?f ^ ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Square_Free_Factorization_Int.yun_relD",
     "yun_rel ?F ?c ?f ==> monic ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Square_Free_Factorization_Int.yun_relD",
     "yun_rel ?F ?c ?f ==> 0 < lead_coeff ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_than, template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app (template_hole 0, template_var 2))))),
    ("Square_Free_Factorization_Int.yun_wrel_pderiv",
     "yun_wrel ?F ?c ?f ==> yun_wrel (pderiv ?F) ?c (pderiv ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 2)),
               template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Square_Free_Factorization_Int.square_free_factorization_int'",
     "square_free_factorization_int' ?f = (?d, ?fs) ==>
      distinct (map snd ?fs)",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 2),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Square_Free_Factorization_Int.yun_relD",
     "yun_rel ?F ?c ?f ==> (?f = 1) = (?F = 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_bimplication
        (template_equation (template_var 0, template_hole 2),
         template_equation (template_var 2, template_hole 0)))),
    ("Square_Free_Factorization_Int.yun_relD",
     "yun_rel ?F ?c ?f ==> of_int_poly ?F = Polynomial.smult ?c ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Square_Free_Factorization_Int.yun_wrelD",
     "yun_wrel ?F ?c ?f ==> of_int_poly ?F = Polynomial.smult ?c ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Square_Free_Factorization_Int.square_free_factorization_int",
     "square_free_factorization_int ?f = (?d, ?fs) ==>
      square_free_factorization ?f (?d, ?fs)",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 2),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))
           ))),
    ("Square_Free_Factorization_Int.square_free_factorization_int'",
     "square_free_factorization_int' ?f = (?d, ?fs) ==>
      square_free_factorization ?f (?d, ?fs)",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 2),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))
           ))),
    ("Square_Free_Factorization_Int.x_split",
     "x_split ?f = (?n, ?g) ==> ?f = Polynomial.monom (1::?'a) ?n * ?g",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 2),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0))],
       template_equation
        (template_var 2,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_var 0)))),
    ("Square_Free_Factorization_Int.yun_rel_same_right",
     "[| yun_rel ?f ?c ?G; yun_rel ?g ?d ?G |] ==> ?f = ?g",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0),
              template_var 2)
            )],
       template_equation (template_var 4, template_var 1))),
    ("Square_Free_Factorization_Int.yun_rel_pow",
     "yun_rel ?F ?c ?f ==> yun_rel (?F ^ ?n) (?c ^ ?n) (?f ^ ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 0)),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Square_Free_Factorization_Int.yun_erel_mult",
     "[| yun_erel ?F ?f; yun_erel ?G ?g |]
      ==> yun_erel (?F * ?G) (?f * ?g)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Square_Free_Factorization_Int.yun_wrel_minus",
     "[| yun_wrel ?F ?c ?f; yun_wrel ?G ?c ?g |]
      ==> yun_wrel (?F - ?G) ?c (?f - ?g)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 1)),
               template_var 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Square_Free_Factorization_Int.yun_rel_mult",
     "[| yun_rel ?F ?c ?f; yun_rel ?G ?d ?g |]
      ==> yun_rel (?F * ?G) (?c * ?d) (?f * ?g)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0))
           ))),
    ("Square_Free_Factorization_Int.square_free_factorization_int",
     "[| square_free_factorization_int ?f = (?d, ?fs);
         (?fi, ?i) : set ?fs |]
      ==> primitive ?fi & 0 < lead_coeff ?fi",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 4),
          template_app
           (template_app (template_hole 9, template_var 3),
            template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_var 0)),
              template_app (template_hole 6, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 1)),
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app (template_hole 0, template_var 1))))
           ))),
    ("Square_Free_Factorization_Int.x_split",
     "[| x_split ?f = (?n, ?g); ?n ~= 0 | ?f ~= 0 |]
      ==> ~ Polynomial.monom (1::?'a) 1 dvd ?g",
     template_implication
      ([template_equation
         (template_app (template_hole 11, template_var 2),
          template_app
           (template_app (template_hole 10, template_var 1),
            template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_var 1),
                    template_hole 6))),
              template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_hole 4)))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_hole 0)),
                 template_var 0)
               )
           ))),
    ("Square_Free_Factorization_Int.yun_monic_factorization_int_yun_rel",
     "[| yun_gcd.yun_monic_factorization gcd ?f = ?res;
         yun_gcd.yun_monic_factorization gcd ?F = ?Res; yun_rel ?F ?c ?f |]
      ==> list_all2 (rel_prod yun_erel (=)) ?Res ?res",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 9, template_hole 8),
            template_var 4),
          template_var 3),
        template_equation
         (template_app
           (template_app (template_hole 6, template_hole 5),
            template_var 2),
          template_var 1),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 0),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_hole 0)),
               template_var 1),
             template_var 3)
           ))),
    ("Square_Free_Factorization_Int.square_free_factorization_int'",
     "[| square_free_factorization_int' ?f = (?d, ?fs);
         (?fi, ?i) : set ?fs |]
      ==> content ?fi = 1 & 0 < lead_coeff ?fi",
     template_implication
      ([template_equation
         (template_app (template_hole 12, template_var 4),
          template_app
           (template_app (template_hole 11, template_var 3),
            template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 1),
                  template_var 0)),
              template_app (template_hole 8, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 1)),
                 template_hole 4)),
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app (template_hole 0, template_var 1))))
           ))),
    ("Square_Free_Factorization_Int.yun_rel_div",
     "[| yun_rel ?F ?c ?f; yun_rel ?G ?d ?g; ?G dvd ?F; ?g dvd ?f |]
      ==> yun_rel (?F div ?G) (?c / ?d) (?f div ?g)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0))
           ))),
    ("Square_Free_Factorization_Int.yun_wrel_div",
     "[| yun_wrel ?F ?c ?f; yun_wrel ?G ?d ?g; ?G dvd ?F; ?g dvd ?f;
         ?G ~= 0 |]
      ==> yun_wrel (?F div ?G) (?c / ?d) (?f div ?g)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_var 3)
            ),
        template_negation
         (template_equation (template_var 2, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0))
           ))),
    ("Square_Free_Factorization_Int.yun_rel_gcd",
     "[| yun_rel ?F ?c ?f; yun_wrel ?G ?c' ?g; ?c' ~= 0;
         ?d = rat_of_int (lead_coeff (gcd ?F ?G)) |]
      ==> yun_rel (gcd ?F ?G) ?d (gcd ?f ?g)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 2, template_hole 5)),
        template_equation
         (template_var 0,
          template_app
           (template_hole 4,
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 6),
                  template_var 3)),
              template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 2, template_var 6),
                  template_var 3)))))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 2, template_var 6),
                   template_var 3)),
               template_var 0),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1))
           ))),
    ("Square_Free_Factorization_Int.yun_wrel_gcd",
     "[| yun_wrel ?F ?c' ?f; yun_wrel ?G ?c ?g; ?c' ~= 0; ?c ~= 0;
         ?d = rat_of_int (lead_coeff (gcd ?F ?G)); ?d ~= 0 |]
      ==> yun_wrel (gcd ?F ?G) ?d (gcd ?f ?g)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 5, template_hole 5)),
        template_negation
         (template_equation (template_var 2, template_hole 5)),
        template_equation
         (template_var 0,
          template_app
           (template_hole 4,
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 6),
                  template_var 3)),
              template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 2, template_var 6),
                  template_var 3))))),
        template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 2, template_var 6),
                   template_var 3)),
               template_var 0),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1))
           ))),
    ("Square_Free_Factorization_Int.square_free_factorization_int_main",
     "[| square_free_factorization_int_main ?f = ?fs; content ?f = 1;
         0 < lead_coeff ?f; degree ?f ~= 0 |]
      ==> square_free_factorization ?f (1, ?fs) &
          (ALL fi i.
              (fi, i) : set ?fs --> content fi = 1 & 0 < lead_coeff fi) &
          distinct (map snd ?fs)",
     template_implication
      ([template_equation
         (template_app (template_hole 22, template_var 1), template_var 0),
        template_equation
         (template_app (template_hole 20, template_var 1),
          template_hole 19),
        template_inequation
         (less_than, template_hole 17,
          template_app
           (template_app (template_hole 16, template_var 1),
            template_app (template_hole 15, template_var 1))),
        template_negation
         (
            template_equation
             (template_app (template_hole 15, template_var 1),
              template_hole 12)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app (template_hole 10, template_var 1),
                 template_app
                  (template_app (template_hole 9, template_hole 19),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 11, template_app (template_hole 8, t_empty)),
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 0))))
           ))),
    ("Square_Free_Factorization_Int.yun_factorization_main_int",
     "[| ?f = ?p div gcd ?p (pderiv ?p);
         ?g = pderiv ?p div gcd ?p (pderiv ?p); monic ?p;
         yun_gcd.yun_factorization_main gcd ?f ?g ?i ?hs = ?res;
         yun_gcd.yun_factorization_main gcd ?F ?G ?i ?Hs = ?Res;
         yun_rel ?F ?c ?f; yun_wrel ?G ?c ?g;
         list_all2 (rel_prod yun_erel (=)) ?Hs ?hs |]
      ==> list_all2 (rel_prod yun_erel (=)) ?Res ?res",
     template_implication
      ([template_equation
         (template_var 10,
          template_app
           (template_app (template_hole 17, template_var 9),
            template_app
             (template_app (template_hole 16, template_var 9),
              template_app (template_hole 15, template_var 9)))),
        template_equation
         (template_var 8,
          template_app
           (template_app
             (template_hole 17,
              template_app (template_hole 15, template_var 9)),
            template_app
             (template_app (template_hole 16, template_var 9),
              template_app (template_hole 15, template_var 9)))),
        template_equation
         (template_app
           (template_app (template_hole 13, template_var 9),
            template_app (template_hole 12, template_var 9)),
          template_hole 11),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_hole 16),
                  template_var 10),
                template_var 8),
              template_var 7),
            template_var 6),
          template_var 5),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_var 4),
                template_var 3),
              template_var 7),
            template_var 2),
          template_var 1),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_var 0),
              template_var 10)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 0),
              template_var 8)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_hole 1),
                    template_hole 0)),
                template_var 2),
              template_var 6)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_hole 0)),
               template_var 1),
             template_var 5)
           )))]:
   (string * thm * template) list
### theory "Draft.Square_Free_Factorization_IntTemplates"
### 1.841s elapsed time, 2.237s cpu time, 0.375s GC time
val it = (): unit
