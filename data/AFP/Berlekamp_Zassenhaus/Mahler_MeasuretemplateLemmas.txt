   [("Mahler_Measure.mahler_measure_monic_ge_1",
     "1 <= mahler_measure_monic ?p",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Mahler_Measure.mahler_measure_ge_0", "0 <= mahler_measure ?h",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Mahler_Measure.mahler_measure_monic_ge_0",
     "0 <= mahler_measure_monic ?p",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Mahler_Measure.complex_roots",
     "length (complex_roots_complex ?p) = degree ?p",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Mahler_Measure.complex_roots_int",
     "length (complex_roots_int ?p) = degree ?p",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Mahler_Measure.complex_roots_c", "complex_roots_complex [:?c:] = []",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_hole 0)),
    ("Mahler_Measure.linear_term_irreducible\<^sub>d",
     "irreducible\<^sub>d [:?a, 1::?'a:]",
     template_predicate
      (
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0)))
         )),
    ("Mahler_Measure.mahler_measure_constant",
     "mahler_measure_poly [:?c:] = cmod ?c",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("Mahler_Measure.filter_distr_rev",
     "filter ?f (rev ?lst) = rev (filter ?f ?lst)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Mahler_Measure.drop_half_map",
     "drop_half (map ?f ?xs) = map ?f (drop_half ?xs)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Mahler_Measure.reconstruct_is_original_poly",
     "reconstruct_poly (lead_coeff ?p) (complex_roots_complex ?p) = ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app (template_hole 1, template_var 0))),
         template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Mahler_Measure.measure_eq_prod",
     "mahler_measure_poly (?f * ?g) =
      mahler_measure_poly ?f * mahler_measure_poly ?g",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Mahler_Measure.mahler_measure_factor",
     "mahler_measure_poly (pCons (- ?a) 1) = max 1 (cmod ?a)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0)),
           template_hole 3)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("Mahler_Measure.poly_square_subst",
     "poly_square_subst (?f \<circ>\<^sub>p Polynomial.monom (1::?'a) 2) =
      ?f",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 0),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))))),
       template_var 0)),
    ("Mahler_Measure.smult_inj",
     "?a ~= (0::?'a) ==> inj (Polynomial.smult ?a)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("Mahler_Measure.mahler_measure_poly_ge_1",
     "?h ~= 0 ==> 1 <= mahler_measure ?h",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_inequation
        (less_equals, template_hole 1,
         template_app (template_hole 0, template_var 0)))),
    ("Mahler_Measure.coeffs_cong_1",
     "(cCons ?a ?v = cCons ?b ?v) = (?a = ?b)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0), template_var 1)),
       template_equation (template_var 2, template_var 0))),
    ("Mahler_Measure.mahler_measure_poly_via_monic",
     "mahler_measure_poly ?p =
      cmod (lead_coeff ?p) * mahler_measure_monic ?p",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app (template_hole 1, template_var 0)))),
         template_app (template_hole 0, template_var 0)))),
    ("Mahler_Measure.mahler_approximation",
     "\<lfloor>real ?d * mahler_measure ?f\<rfloor>
      <= mahler_approximation ?bnd ?d ?f",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)),
           template_app (template_hole 1, template_var 1))),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_var 1))),
    ("Mahler_Measure.poly_square_subst_coeff",
     "poly.coeff (poly_square_subst ?f) ?i = poly.coeff ?f (2 * ?i)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("Mahler_Measure.graeffe_poly_impl_mahler",
     "mahler_measure (graeffe_poly_impl ?f ?m) =
      mahler_measure ?f ^ 2 ^ ?m",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 6, template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("Mahler_Measure.Landau_inequality_mahler_measure",
     "mahler_measure ?f <= sqrt (real_of_int (SUM a<-coeffs ?f. a * a))",
     template_inequation
      (less_equals, template_app (template_hole 6, template_var 0),
       template_app
        (template_hole 5,
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty),
               template_app (template_hole 0, template_var 0))))))),
    ("Mahler_Measure.prod_list_ge1",
     "ALL a:set ?x. 1 <= a ==> 1 <= prod_list ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)),
              t_empty)
            )],
       template_inequation
        (less_equals, template_hole 1,
         template_app (template_hole 0, template_var 0)))),
    ("Mahler_Measure.strip_while_singleton",
     "strip_while ((=) (0::?'a)) [?v * ?a] = cCons (?v * ?a) []",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app (template_hole 5, template_hole 4)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_hole 1)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1))),
    ("Mahler_Measure.ineq_about_squares",
     "?x <= ?y ==> ?x <= ?c\<^sup>2 + ?y",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0)))),
           template_var 1)))),
    ("Mahler_Measure.complex_split",
     "(Complex ?a ?b = ?c) = (?a = Re ?c & ?b = Im ?c)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_var 0),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Mahler_Measure.prod_cmod",
     "cmod (prod_list (map ?f ?lst)) = (PROD a<-?lst. cmod (?f a))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Mahler_Measure.reconstruct_prod",
     "reconstruct_poly ?a ?as * reconstruct_poly ?b ?bs =
      reconstruct_poly (?a * ?b) (?as @ ?bs)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Mahler_Measure.Landau_inequality",
     "mahler_measure_poly ?f <= l2norm_complex ?f",
     template_inequation
      (less_equals, template_app (template_hole 9, template_var 0),
       template_app
        (template_hole 8,
         template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, t_empty),
             template_app (template_hole 0, template_var 0)))))),
    ("Mahler_Measure.mahler_measure_dvd",
     "[| ?f ~= 0; ?h dvd ?f |] ==> mahler_measure ?h <= mahler_measure ?f",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Mahler_Measure.strip_while_filter",
     "filter ((~=) (0::?'a)) (strip_while ((=) (0::?'a)) ?lst) =
      filter ((~=) (0::?'a)) ?lst",
     template_equation
      (template_app
        (template_app (template_hole 4, t_empty),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_hole 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 4, t_empty), template_var 0))),
    ("Mahler_Measure.complex_roots",
     "Polynomial.smult (lead_coeff ?p)
       (PROD a<-complex_roots_complex ?p. [:- a, 1:]) =
      ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 0),
             template_app (template_hole 7, template_var 0))),
         template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, t_empty),
             template_app (template_hole 0, template_var 0)))),
       template_var 0)),
    ("Mahler_Measure.mset_mult_add",
     "mset ?a = mset ?b + mset ?c ==>
      prod_list ?a = prod_list ?b * prod_list ?c",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 2),
          template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 4, template_var 1)),
            template_app (template_hole 4, template_var 0)))],
       template_equation
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0))))),
    ("Mahler_Measure.poly_even_odd_coeff",
     "poly_even_odd ?f = (?ev, ?od) ==>
      poly.coeff ?ev ?i = poly.coeff ?f (2 * ?i)",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 3),
          template_app
           (template_app (template_hole 6, template_var 2),
            template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 4, template_var 3),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 0))))),
    ("Mahler_Measure.map_zip_is_bisum",
     "bisum ?f ?l1.0 =
      sum_list (map2 ?f ((0::?'b) # ?l1.0) (?l1.0 @ [0::?'b]))",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1), template_var 0),
       template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 6, template_app (template_hole 5, t_empty)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_hole 0))))))),
    ("Mahler_Measure.complex_roots_int",
     "Polynomial.smult (complex_of_int (lead_coeff ?p))
       (PROD a<-complex_roots_int ?p. [:- a, 1:]) =
      of_int_poly ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_var 0),
               template_app (template_hole 8, template_var 0)))),
         template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, t_empty),
             template_app (template_hole 1, template_var 0)))),
       template_app
        (template_app (template_hole 0, template_hole 10),
         template_var 0))),
    ("Mahler_Measure.first_coeff_le_tail",
     "(cmod (lead_coeff ?g))\<^sup>2 <= norm2 ?g",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_var 0),
               template_app (template_hole 6, template_var 0)))),
         template_app
          (template_hole 5,
           template_app (template_hole 4, template_hole 3))),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 0, template_var 0))))),
    ("Mahler_Measure.poly_even_odd_coeff",
     "poly_even_odd ?f = (?ev, ?od) ==>
      poly.coeff ?od ?i = poly.coeff ?f (2 * ?i + 1)",
     template_implication
      ([template_equation
         (template_app (template_hole 9, template_var 3),
          template_app
           (template_app (template_hole 8, template_var 2),
            template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 6, template_var 3),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1))),
                 template_var 0)),
             template_hole 0))))),
    ("Mahler_Measure.square_prod_cmod",
     "(cmod (?a * ?b))\<^sup>2 = (cmod ?a)\<^sup>2 * (cmod ?b)\<^sup>2",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0))),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 1))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 1)),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1)))),
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 0)),
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1)))))),
    ("Mahler_Measure.graeffe_one_step_code",
     "graeffe_one_step ?c ?f =
      (case poly_even_odd ?f of
       (g, h) =>
         Polynomial.smult ?c
          (g * g - Polynomial.monom (1::?'a) 1 * h * h))",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 7, t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("Mahler_Measure.sum_stripwhile",
     "?f (0::?'b) = (0::?'a) ==>
      sum_list (map ?f (strip_while ((=) (0::?'b)) ?lst)) =
      sum_list (map ?f ?lst)",
     template_implication
      ([template_equation
         (template_app (template_var 1, template_hole 5), template_hole 4)],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_hole 5)),
               template_var 0))),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 0))))),
    ("Mahler_Measure.graeffe_0",
     "?f = Polynomial.smult ?c (PROD a<-?as. [:- a, 1::?'a:]) ==>
      graeffe_poly ?c ?as 0 = ?f",
     template_implication
      ([template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 8, template_var 1),
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, t_empty),
                template_var 0))))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0),
         template_var 2))),
    ("Mahler_Measure.measure_mono_eq_prod",
     "[| ?f ~= 0; ?g ~= 0 |]
      ==> mahler_measure_monic (?f * ?g) =
          mahler_measure_monic ?f * mahler_measure_monic ?g",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Mahler_Measure.bisum_is_map_zip",
     "sum_list (map ?f (zip ((0::?'b) # ?l1.0) (?l1.0 @ [0::?'b]))) =
      bisum (%x y. ?f (x, y)) ?l1.0",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, t_empty),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_var 0)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_hole 2))))),
       template_app
        (template_app (template_hole 1, t_empty), template_var 0))),
    ("Mahler_Measure.reconstruct_with_type_conversion",
     "Polynomial.smult (lead_coeff (of_int_poly ?f))
       (PROD a<-complex_roots_int ?f. [:- a, 1:]) =
      of_int_poly ?f",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 9, template_hole 8),
                 template_var 0)),
             template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 9, template_hole 8),
                 template_var 0)))),
         template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, t_empty),
             template_app (template_hole 0, template_var 0)))),
       template_app
        (template_app (template_hole 9, template_hole 8), template_var 0))),
    ("Mahler_Measure.mset_mult_add_2",
     "mset ?a = mset ?b + mset ?c ==>
      prod_list (map ?i ?a) =
      prod_list (map ?i ?b) * prod_list (map ?i ?c)",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 3),
          template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 5, template_var 2)),
            template_app (template_hole 5, template_var 1)))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 3)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2))),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)))))),
    ("Mahler_Measure.graeffe_poly_impl",
     "?f = Polynomial.smult ?c (PROD a<-?as. [:- a, 1::?'a:]) ==>
      graeffe_poly_impl ?f ?m = graeffe_poly ?c ?as ?m",
     template_implication
      ([template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 8, template_var 2),
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, t_empty),
                template_var 1))))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Mahler_Measure.lead_coeff_of_prod",
     "lead_coeff (prod_list (map ?f ?lst)) =
      (PROD a<-?lst. lead_coeff (?f a))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, t_empty), template_var 0))),
         template_app
          (template_hole 2,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, t_empty), template_var 0)))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Mahler_Measure.bisumTail_is_map_zip",
     "sum_list (map ?f (zip (?v # ?l1.0) (?l1.0 @ [0::?'b]))) =
      bisumTail (%x y. ?f (x, y)) (?v # ?l1.0)",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, t_empty),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_app (template_hole 5, template_hole 3),
                 template_hole 2))))),
       template_app
        (template_app (template_hole 1, t_empty),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_var 0)))),
    ("Mahler_Measure.mahler_measure_poly_explicit",
     "mahler_measure_poly (Polynomial.smult ?c (PROD a<-?as. [:- a, 1:])) =
      cmod ?c * (PROD a<-?as. max 1 (cmod a))",
     template_equation
      (template_app
        (template_hole 13,
         template_app
          (template_app (template_hole 12, template_var 1),
           template_app
            (template_hole 11,
             template_app
              (template_app (template_hole 10, t_empty), template_var 0)))),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 0))))),
    ("Mahler_Measure.complex_roots_complex_prod",
     "[| ?f ~= 0; ?g ~= 0 |]
      ==> mset (complex_roots_complex (?f * ?g)) =
          mset (complex_roots_complex ?f) +
          mset (complex_roots_complex ?g)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5)),
        template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1))),
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)))))),
    ("Mahler_Measure.mahler_landau_graeffe_approximation_core",
     "?g = graeffe_poly_impl ?f ?k ==>
      mahler_measure ?f
      <= root (2 ^ Suc ?k) (real_of_int (SUM a<-coeffs ?g. a * a))",
     template_implication
      ([template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 13, template_var 1),
            template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 11, template_var 1),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_hole 6))),
               template_app (template_hole 5, template_var 0))),
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, t_empty),
                 template_app (template_hole 0, template_var 2)))))))),
    ("Mahler_Measure.poly_even_odd",
     "poly_even_odd ?f = (?g, ?h) ==>
      ?f =
      ?g \<circ>\<^sub>p Polynomial.monom (1::?'a) 2 +
      Polynomial.monom (1::?'a) 1 *
      ?h \<circ>\<^sub>p Polynomial.monom (1::?'a) 2",
     template_implication
      ([template_equation
         (template_app (template_hole 11, template_var 2),
          template_app
           (template_app (template_hole 10, template_var 1),
            template_var 0))],
       template_equation
        (template_var 2,
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_var 1),
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2))))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_hole 0)),
             template_app
              (template_app (template_hole 7, template_var 0),
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2))))))))),
    ("Mahler_Measure.graeffe_poly_impl_main",
     "?f = Polynomial.smult ?c (PROD a<-?as. [:- a, 1::?'a:]) ==>
      graeffe_poly_impl_main ((- (1::?'a)) ^ degree ?f) ?f ?m =
      graeffe_poly ?c ?as ?m",
     template_implication
      ([template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 10, template_var 2),
            template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, t_empty),
                template_var 1))))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 6, template_hole 5)),
                 template_app (template_hole 1, template_var 3))),
             template_var 3),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Mahler_Measure.norm_times_const",
     "(SUM y<-?lst. (cmod (?a * y))\<^sup>2) =
      (cmod ?a)\<^sup>2 * (SUM y<-?lst. (cmod y)\<^sup>2)",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, t_empty), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 1)),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1)))),
         template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, t_empty), template_var 0))))),
    ("Mahler_Measure.mahler_graeffe",
     "?f = Polynomial.smult ?c (PROD a<-?as. [:- a, 1:]) ==>
      mahler_measure_poly (graeffe_poly ?c ?as ?m) =
      mahler_measure_poly ?f ^ 2 ^ ?m",
     template_implication
      ([template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 14, template_var 2),
            template_app
             (template_hole 13,
              template_app
               (template_app (template_hole 12, t_empty),
                template_var 1))))],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 6, template_var 3)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 0))))),
    ("Mahler_Measure.graeffe_recursion",
     "graeffe_poly ?c ?as ?m = ?f ==>
      graeffe_poly ?c ?as (Suc ?m) =
      Polynomial.smult ((- (1::?'a)) ^ degree ?f)
       (poly_square_subst
         (?f * ?f \<circ>\<^sub>p [:0::?'a, - (1::?'a):]))",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 12, template_var 3),
              template_var 2),
            template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 12, template_var 3),
             template_var 2),
           template_app (template_hole 11, template_var 1)),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 9,
                 template_app (template_hole 8, template_hole 7)),
               template_app (template_hole 6, template_var 0))),
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 8, template_hole 7)),
                     template_hole 0))))))))),
    ("Mahler_Measure.sum_coeffs_smult_cmod",
     "norm2 (Polynomial.smult ?v ?p) = (cmod ?v)\<^sup>2 * norm2 ?p",
     template_equation
      (template_app
        (template_hole 9,
         template_app
          (template_app (template_hole 8, t_empty),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 6, template_var 1)),
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3)))),
         template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, t_empty),
             template_app (template_hole 2, template_var 0)))))),
    ("Mahler_Measure.prod_induct_gen",
     "(!!a r. ?f (?h a * r) = ?f (?g a * r)) ==>
      ?f (prod_list (map ?h ?lst)) = ?f (prod_list (map ?g ?lst))",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_var 3,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, t_empty), template_var 0))),
         template_app
          (template_var 3,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, t_empty),
               template_var 0)))))),
    ("Mahler_Measure.bisum_outside",
     "bisum (%x y. ?f1.0 x - ?f2.0 x y + ?f3.0 y) ?lst =
      sum_list (map ?f1.0 ?lst) + ?f1.0 (0::?'b) - bisum ?f2.0 ?lst +
      sum_list (map ?f3.0 ?lst) +
      ?f3.0 (0::?'b)",
     template_equation
      (template_app
        (template_app (template_hole 5, t_empty), template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_app (template_hole 1, template_var 3),
                           template_var 0))),
                     template_app (template_var 3, template_hole 0))),
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_var 0))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)))),
         template_app (template_var 1, template_hole 0)))),
    ("Mahler_Measure.coeffs_times_linterm",
     "coeffs
       (pCons (0::?'a) (Polynomial.smult ?a ?p) + Polynomial.smult ?b ?p) =
      strip_while ((=) (0::?'a))
       (map2 (%c d. ?b * d + c * ?a) ((0::?'a) # coeffs ?p)
         (coeffs ?p @ [0::?'a]))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 14,
              template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_app (template_hole 12, template_hole 11),
                    template_app
                     (template_app (template_hole 10, template_var 2),
                      template_var 1))),
                template_app
                 (template_app (template_hole 10, template_var 0),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app (template_hole 8, template_hole 11)),
             template_app
              (template_app
                (template_hole 7, template_app (template_hole 6, t_empty)),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_hole 11),
                     template_app (template_hole 14, template_var 1))),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 14, template_var 1)),
                   template_app
                    (template_app (template_hole 2, template_hole 11),
                     template_hole 0)))))
           ))),
    ("Mahler_Measure.mahler_landau_graeffe_approximation",
     "[| ?g = graeffe_poly_impl ?f ?k; ?dd = ?d ^ 2 ^ Suc ?k;
         ?kk = 2 ^ Suc ?k |]
      ==> \<lfloor>real ?d * mahler_measure ?f\<rfloor>
          <= mahler_landau_graeffe_approximation ?kk ?dd ?g",
     template_implication
      ([template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 12, template_var 4),
            template_var 3)),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 10, template_var 1),
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_hole 9,
                  template_app (template_hole 8, template_hole 7))),
              template_app (template_hole 6, template_var 3)))),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_hole 10,
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_hole 7))),
            template_app (template_hole 6, template_var 3)))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app (template_hole 1, template_var 4))),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2),
           template_var 5)))),
    ("Mahler_Measure.Landau_lemma",
     "norm2 (PROD a<-?lst. [:- a, 1:]) =
      norm2
       (PROD a<-?lst. if 1 < cmod a then [:- 1, cnj a:] else [:- a, 1:])",
     template_equation
      (template_app
        (template_hole 17,
         template_app
          (template_app (template_hole 16, t_empty),
           template_app
            (template_hole 10,
             template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, t_empty),
                 template_var 0))))),
       template_app
        (template_hole 17,
         template_app
          (template_app (template_hole 16, t_empty),
           template_app
            (template_hole 10,
             template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, t_empty),
                 template_var 0))))))),
    ("Mahler_Measure.mahler_approximation_main",
     "[| ?k ~= 0 ==> \<lfloor>real ?d * mahler_measure ?f\<rfloor> <= ?mm;
         ?c = (- 1) ^ degree ?f; ?g = graeffe_poly_impl_main ?c ?f ?k;
         ?dd = ?d ^ 2 ^ Suc ?k; ?kk = 2 ^ Suc ?k |]
      ==> \<lfloor>real ?d * mahler_measure ?f\<rfloor>
          <= mahler_approximation_main ?bnd ?dd ?c ?g ?mm ?k ?kk",
     template_implication
      ([template_implication
         ([template_negation
            (template_equation (template_var 8, template_hole 18))],
          template_inequation
           (less_equals,
            template_app
             (template_hole 16,
              template_app
               (template_app
                 (template_hole 15,
                  template_app (template_hole 14, template_var 7)),
                template_app (template_hole 13, template_var 6))),
            template_var 5)),
        template_equation
         (template_var 4,
          template_app
           (template_app
             (template_hole 11,
              template_app (template_hole 10, template_hole 9)),
            template_app (template_hole 8, template_var 6))),
        template_equation
         (template_var 3,
          template_app
           (template_app
             (template_app (template_hole 6, template_var 4),
              template_var 6),
            template_var 8)),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 5, template_var 7),
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_hole 2))),
              template_app (template_hole 1, template_var 8)))),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_hole 2))),
            template_app (template_hole 1, template_var 8)))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 16,
           template_app
            (template_app
              (template_hole 15,
               template_app (template_hole 14, template_var 7)),
             template_app (template_hole 13, template_var 6))),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 2),
                   template_var 4),
                 template_var 3),
               template_var 5),
             template_var 8),
           template_var 1))))]
