Loading theory "Draft.Karatsuba_Multiplication" (required by "Draft.Karatsuba_MultiplicationTemplates")
Loading theory "Draft.Templates" (required by "Draft.Karatsuba_MultiplicationTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.065s elapsed time, 0.164s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Karatsuba_MultiplicationTemplates")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.572s elapsed time, 1.152s cpu time, 0.130s GC time
Found termination order:
  "(%p. size (snd (snd (snd p)))) <*mlex*>
   (%p. size (fst (snd p))) <*mlex*> {}"
### theory "Draft.Karatsuba_Multiplication"
### 1.889s elapsed time, 2.579s cpu time, 0.201s GC time
Loading theory "Draft.Karatsuba_MultiplicationTemplates"
val templateLemmas =
   [("Karatsuba_Multiplication.karatsuba_mult_poly",
     "karatsuba_mult_poly ?f ?g = ?f * ?g",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Karatsuba_Multiplication.split_at_code", "split_at ?n [] = ([], [])",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app
        (template_app (template_hole 0, template_hole 1),
         template_hole 1))),
    ("Karatsuba_Multiplication.karatsuba_monom_mult_code_unfold",
     "karatsuba_mult_poly ?f (monom (1::?'a) ?n) = monom_mult ?n ?f",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Karatsuba_Multiplication.karatsuba_monom_mult_code_unfold",
     "karatsuba_mult_poly (monom (1::?'a) ?n) ?f = monom_mult ?n ?f",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Karatsuba_Multiplication.coeffs_minus",
     "poly_of_list (coeffs_minus ?f1.0 ?f0.0) =
      poly_of_list ?f1.0 - poly_of_list ?f0.0",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Karatsuba_Multiplication.karatsuba_main",
     "karatsuba_main ?f ?n ?g ?m = poly_of_list ?f * poly_of_list ?g",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 3)),
         template_app (template_hole 0, template_var 1)))),
    ("Karatsuba_Multiplication.poly_of_list_split_at",
     "split_at ?n ?f = (?f0.0, ?f1.0) ==>
      poly_of_list ?f =
      monom_mult ?n (poly_of_list ?f1.0) + poly_of_list ?f0.0",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0))],
       template_equation
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_app (template_hole 2, template_var 0))),
           template_app (template_hole 2, template_var 1))))),
    ("Karatsuba_Multiplication.karatsuba_single_sided",
     "?f = monom_mult ?n ?f1.0 + ?f0.0 ==>
      monom_mult ?n (?f1.0 * ?g) + ?f0.0 * ?g = ?f * ?g",
     template_implication
      ([template_equation
         (template_var 4,
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2)),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0))),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 4),
           template_var 0)))),
    ("Karatsuba_Multiplication.split_at_code",
     "split_at ?n (?x # ?xs) =
      (if ?n = 0 then ([], ?x # ?xs)
       else case split_at (?n - 1) ?xs of (bef, aft) => (?x # bef, aft))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_hole 5)),
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app
                  (template_app (template_hole 8, template_var 1),
                   template_var 0))),
             template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_hole 0)),
                 template_var 0)))
           ))),
    ("Karatsuba_Multiplication.karatsuba_main_step",
     "[| ?f = monom_mult ?n ?f1.0 + ?f0.0;
         ?g = monom_mult ?n ?g1.0 + ?g0.0 |]
      ==> monom_mult (?n + ?n) (?f1.0 * ?g1.0) +
          (monom_mult ?n
            (?f1.0 * ?g1.0 - (?f1.0 - ?f0.0) * (?g1.0 - ?g0.0) +
             ?f0.0 * ?g0.0) +
           ?f0.0 * ?g0.0) =
          ?f * ?g",
     template_implication
      ([template_equation
         (template_var 6,
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 5),
                template_var 4)),
            template_var 3)),
        template_equation
         (template_var 2,
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 5),
                template_var 1)),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 5)),
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 5),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 0,
                         template_app
                          (template_app (template_hole 1, template_var 4),
                           template_var 1)),
                       template_app
                        (template_app
                          (template_hole 1,
                           template_app
                            (template_app (template_hole 0, template_var 4),
                             template_var 3)),
                         template_app
                          (template_app (template_hole 0, template_var 1),
                           template_var 0)))),
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 0)))),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0))),
         template_app
          (template_app (template_hole 1, template_var 6),
           template_var 2))))]:
   (string * thm * template) list
### theory "Draft.Karatsuba_MultiplicationTemplates"
### 0.460s elapsed time, 0.602s cpu time, 0.087s GC time
val it = (): unit
