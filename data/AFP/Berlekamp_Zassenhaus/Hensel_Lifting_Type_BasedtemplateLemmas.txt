   [("Hensel_Lifting_Type_Based.rebase_self", "@?x = ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Hensel_Lifting_Type_Based.rebase_poly_self", "#?p = ?p",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_var 0)),
    ("Hensel_Lifting_Type_Based.degree_rebase_poly_le",
     "degree (#?p) <= degree ?p",
     template_inequation
      (less_equals,
       template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0))),
       template_app (template_hole 0, template_var 0))),
    ("Hensel_Lifting_Type_Based.of_nat_zero",
     "CARD(?'a) dvd ?n ==> of_nat ?n = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3)),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Hensel_Lifting_Type_Based.mod_mod_nat",
     "?a mod ?b mod (?b * ?c) = ?a mod ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2), template_var 1))),
    ("Hensel_Lifting_Type_Based.map_poly_rebase",
     "map_poly rebase ?p = #?p",
     template_equation
      (template_app
        (template_app (template_hole 4, t_empty), template_var 0),
       template_app
        (template_app (template_hole 1, template_hole 3),
         template_app
          (template_app (template_hole 0, template_hole 2),
           template_var 0)))),
    ("Hensel_Lifting_Type_Based.rebase_poly_eq_0_iff",
     "(#?p = 0) = (ALL i. @poly.coeff ?p i = 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_hole 7),
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_var 0))),
         template_hole 4),
       template_app (template_hole 3, t_empty))),
    ("Hensel_Lifting_Type_Based.rebase_poly_pCons",
     "#pCons ?a ?p = pCons (@?a) (#?p)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 4,
             template_app (template_hole 2, template_var 1))),
         template_app
          (template_app (template_hole 5, template_hole 4),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0))))),
    ("Hensel_Lifting_Type_Based.degree_smult_eq_iff",
     "(degree (Polynomial.smult ?a ?p) = degree ?p) =
      (degree ?p = 0 | ?a * lead_coeff ?p ~= (0::?'a))",
     template_bimplication
      (template_equation
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 1),
             template_var 0)),
         template_app (template_hole 8, template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 9,
                   template_app (template_hole 8, template_var 0)),
                 template_hole 5)),
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_app (template_hole 8, template_var 0)))),
                 template_hole 0)))
           ))),
    ("Hensel_Lifting_Type_Based.degree_mult_eq2",
     "lead_coeff ?p * lead_coeff ?q ~= (0::?'a) ==>
      degree (?p * ?q) = degree ?p + degree ?q",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 1),
                    template_app (template_hole 4, template_var 1))),
                template_app
                 (template_app (template_hole 5, template_var 0),
                  template_app (template_hole 4, template_var 0))),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 4, template_var 1)),
           template_app (template_hole 4, template_var 0))))),
    ("Hensel_Lifting_Type_Based.degree_mult_eq_left_unit",
     "[| lead_coeff ?p dvd (1::?'a); ?q ~= 0 |]
      ==> degree (?p * ?q) = degree ?p + degree ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 1),
                  template_app (template_hole 7, template_var 1))),
              template_hole 6)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 7, template_var 1)),
           template_app (template_hole 7, template_var 0))))),
    ("Hensel_Lifting_Type_Based.mod_mod_le",
     "[| ?a <= ?b; 0 < ?a; 0 <= ?c |] ==> ?c mod ?a mod ?b = ?c mod ?a",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_than, template_hole 2, template_var 2),
        template_inequation (less_equals, template_hole 2, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Hensel_Lifting_Type_Based.degree_smult_eqI",
     "(degree ?p ~= 0 ==> ?a * lead_coeff ?p ~= (0::?'a)) ==>
      degree (Polynomial.smult ?a ?p) = degree ?p",
     template_implication
      ([template_implication
         ([template_negation
            (
               template_equation
                (template_app (template_hole 6, template_var 1),
                 template_hole 5)
               )],
          template_negation
           (
              template_equation
               (template_app
                 (template_app (template_hole 3, template_var 0),
                  template_app
                   (template_app (template_hole 2, template_var 1),
                    template_app (template_hole 6, template_var 1))),
                template_hole 1)
              ))],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app (template_hole 6, template_var 1)))),
    ("Hensel_Lifting_Type_Based.dupe_monic",
     "[| ?D * ?S + ?H * ?T = 1; monic ?D;
         Hensel_Lifting_Type_Based.dupe_monic ?D ?H ?S ?T ?U = (?A, ?B) |]
      ==> ?B = 0 | degree ?B < degree ?D",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 12,
              template_app
               (template_app (template_hole 11, template_var 6),
                template_var 5)),
            template_app
             (template_app (template_hole 11, template_var 4),
              template_var 3)),
          template_hole 10),
        template_equation
         (template_app
           (template_app (template_hole 8, template_var 6),
            template_app (template_hole 7, template_var 6)),
          template_hole 6),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 6),
                  template_var 4),
                template_var 5),
              template_var 3),
            template_var 2),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 13, template_var 0),
                 template_hole 1)),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 7, template_var 0)),
               template_app (template_hole 7, template_var 6)))
           ))),
    ("Hensel_Lifting_Type_Based.dupe_monic",
     "[| ?D * ?S + ?H * ?T = 1; monic ?D;
         Hensel_Lifting_Type_Based.dupe_monic ?D ?H ?S ?T ?U = (?A, ?B) |]
      ==> ?A * ?D + ?B * ?H = ?U",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_var 6),
                template_var 5)),
            template_app
             (template_app (template_hole 8, template_var 4),
              template_var 3)),
          template_hole 7),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 6),
            template_app (template_hole 4, template_var 6)),
          template_hole 3),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 6),
                  template_var 4),
                template_var 5),
              template_var 3),
            template_var 2),
          template_app
           (template_app (template_hole 0, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_var 1),
               template_var 6)),
           template_app
            (template_app (template_hole 8, template_var 0),
             template_var 4)),
         template_var 2))),
    ("Hensel_Lifting_Type_Based.dupe_monic",
     "[| ?D * ?S + ?H * ?T = 1; monic ?D;
         Hensel_Lifting_Type_Based.dupe_monic ?D ?H ?S ?T ?U = (?A, ?B);
         comm_monoid_mult_class.coprime ?D ?H; ?A' * ?D + ?B' * ?H = ?U;
         ?B' = 0 | degree ?B' < degree ?D |]
      ==> ?A' = ?A & ?B' = ?B",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 14,
              template_app
               (template_app (template_hole 13, template_var 8),
                template_var 7)),
            template_app
             (template_app (template_hole 13, template_var 6),
              template_var 5)),
          template_hole 12),
        template_equation
         (template_app
           (template_app (template_hole 10, template_var 8),
            template_app (template_hole 9, template_var 8)),
          template_hole 8),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 8),
                  template_var 6),
                template_var 7),
              template_var 5),
            template_var 4),
          template_app
           (template_app (template_hole 5, template_var 3),
            template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 8),
              template_var 6)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 14,
              template_app
               (template_app (template_hole 13, template_var 1),
                template_var 8)),
            template_app
             (template_app (template_hole 13, template_var 0),
              template_var 6)),
          template_var 4),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 15, template_var 0),
                  template_hole 2)),
              template_app
               (template_app
                 (template_hole 1,
                  template_app (template_hole 9, template_var 0)),
                template_app (template_hole 9, template_var 8)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 15, template_var 1),
                 template_var 3)),
             template_app
              (template_app (template_hole 15, template_var 0),
               template_var 2))
           ))),
    ("Hensel_Lifting_Type_Based.hensel_1",
     "[| CARD(?'pq) = CARD(?'p) * CARD(?'q); CARD(?'p) dvd CARD(?'q);
         #?u = ?v * ?w; degree ?u = degree ?v + degree ?w; monic ?v;
         comm_monoid_mult_class.coprime (#?v) (#?w);
         hensel_1 TYPE(?'p) ?u ?v ?w = (?V', ?W') |]
      ==> ?u = ?V' * ?W' &
          ?v = #?V' &
          ?w = #?W' &
          degree ?V' = degree ?v &
          degree ?W' = degree ?w &
          monic ?V' & comm_monoid_mult_class.coprime (#?V') (#?W')",
     template_implication
      ([template_equation
         (template_app (template_hole 34, template_hole 33),
          template_app
           (template_app
             (template_hole 32,
              template_app (template_hole 31, template_hole 30)),
            template_app (template_hole 29, template_hole 28))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 27,
                template_app (template_hole 31, template_hole 30)),
              template_app (template_hole 29, template_hole 28))
            ),
        template_equation
         (template_app
           (template_app (template_hole 25, template_hole 24),
            template_app
             (template_app (template_hole 23, template_hole 22),
              template_var 4)),
          template_app
           (template_app (template_hole 21, template_var 3),
            template_var 2)),
        template_equation
         (template_app (template_hole 20, template_var 4),
          template_app
           (template_app
             (template_hole 19,
              template_app (template_hole 18, template_var 3)),
            template_app (template_hole 18, template_var 2))),
        template_equation
         (template_app
           (template_app (template_hole 16, template_var 3),
            template_app (template_hole 18, template_var 3)),
          template_hole 15),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_hole 12),
                  template_app
                   (template_app (template_hole 11, template_hole 10),
                    template_var 3))),
              template_app
               (template_app (template_hole 13, template_hole 12),
                template_app
                 (template_app (template_hole 11, template_hole 10),
                  template_var 2)))
            ),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 8, template_hole 7),
                template_var 4),
              template_var 3),
            template_var 2),
          template_app
           (template_app (template_hole 6, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 4),
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 26, template_var 3),
                   template_app
                    (template_app (template_hole 25, template_hole 24),
                     template_app
                      (template_app (template_hole 23, template_hole 22),
                       template_var 1)))),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 26, template_var 2),
                     template_app
                      (template_app (template_hole 25, template_hole 24),
                       template_app
                        (template_app (template_hole 23, template_hole 22),
                         template_var 0)))),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_hole 35,
                         template_app (template_hole 20, template_var 1)),
                       template_app (template_hole 18, template_var 3))),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app
                          (template_hole 35,
                           template_app (template_hole 20, template_var 0)),
                         template_app (template_hole 18, template_var 2))),
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_app
                            (template_hole 2,
                             template_app
                              (template_app
                                (template_hole 1, template_var 1),
                               template_app
                                (template_hole 20, template_var 1))),
                           template_hole 0)),
                       template_app
                        (template_app
                          (template_hole 14,
                           template_app
                            (template_app
                              (template_hole 13, template_hole 12),
                             template_app
                              (template_app
                                (template_hole 23, template_hole 22),
                               template_var 1))),
                         template_app
                          (template_app
                            (template_hole 13, template_hole 12),
                           template_app
                            (template_app
                              (template_hole 23, template_hole 22),
                             template_var 0)))))))))
           ))),
    ("Hensel_Lifting_Type_Based.hensel_1",
     "[| CARD(?'pq) = CARD(?'p) * CARD(?'q); CARD(?'p) dvd CARD(?'q);
         #?u = ?v * ?w; degree ?u = degree ?v + degree ?w; monic ?v;
         comm_monoid_mult_class.coprime (#?v) (#?w);
         hensel_1 TYPE(?'p) ?u ?v ?w = (?V', ?W') |]
      ==> ALL V'' W''.
             ?u = V'' * W'' -->
             ?v = #V'' -->
             ?w = #W'' -->
             degree V'' = degree ?v -->
             degree W'' = degree ?w -->
             lead_coeff V'' = @lead_coeff ?v --> V'' = ?V' & W'' = ?W'",
     template_implication
      ([template_equation
         (template_app (template_hole 36, template_hole 35),
          template_app
           (template_app
             (template_hole 34,
              template_app (template_hole 33, template_hole 32)),
            template_app (template_hole 31, template_hole 30))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 29,
                template_app (template_hole 33, template_hole 32)),
              template_app (template_hole 31, template_hole 30))
            ),
        template_equation
         (template_app
           (template_app (template_hole 27, template_hole 26),
            template_app
             (template_app (template_hole 25, template_hole 24),
              template_var 4)),
          template_app
           (template_app (template_hole 23, template_var 3),
            template_var 2)),
        template_equation
         (template_app (template_hole 22, template_var 4),
          template_app
           (template_app
             (template_hole 21,
              template_app (template_hole 20, template_var 3)),
            template_app (template_hole 20, template_var 2))),
        template_equation
         (template_app
           (template_app (template_hole 18, template_var 3),
            template_app (template_hole 20, template_var 3)),
          template_hole 17),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app (template_hole 15, template_hole 14),
                  template_app
                   (template_app (template_hole 13, template_hole 12),
                    template_var 3))),
              template_app
               (template_app (template_hole 15, template_hole 14),
                template_app
                 (template_app (template_hole 13, template_hole 12),
                  template_var 2)))
            ),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 10, template_hole 9),
                template_var 4),
              template_var 3),
            template_var 2),
          template_app
           (template_app (template_hole 8, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 7, t_empty))))]
