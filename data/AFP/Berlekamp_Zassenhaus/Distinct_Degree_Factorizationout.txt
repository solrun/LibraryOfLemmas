Loading theory "Draft.Chinese_Remainder_Poly" (required by "Draft.Distinct_Degree_FactorizationTemplates" via "Draft.Distinct_Degree_Factorization" via "Draft.Berlekamp_Type_Based")
Loading theory "Draft.Finite_Field" (required by "Draft.Distinct_Degree_FactorizationTemplates" via "Draft.Distinct_Degree_Factorization")
Loading theory "Draft.More_Missing_Multiset" (required by "Draft.Distinct_Degree_FactorizationTemplates" via "Draft.Distinct_Degree_Factorization" via "Draft.Berlekamp_Type_Based" via "Draft.Poly_Mod_Finite_Field")
Loading theory "Draft.Templates" (required by "Draft.Distinct_Degree_FactorizationTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.081s elapsed time, 0.372s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Distinct_Degree_FactorizationTemplates")
### theory "Draft.More_Missing_Multiset"
### 0.229s elapsed time, 0.907s cpu time, 0.042s GC time
Loading theory "Draft.Unique_Factorization" (required by "Draft.Distinct_Degree_FactorizationTemplates" via "Draft.Distinct_Degree_Factorization" via "Draft.Berlekamp_Type_Based" via "Draft.Poly_Mod_Finite_Field" via "Draft.Poly_Mod" via "Draft.Unique_Factorization_Poly")
### theory "Draft.Chinese_Remainder_Poly"
### 0.520s elapsed time, 1.996s cpu time, 0.134s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.622s elapsed time, 2.144s cpu time, 0.197s GC time
instantiation
  mod_ring :: (finite) equal
  equal_mod_ring == equal_class.equal :: 'a mod_ring => 'a mod_ring => bool
instantiation
  mod_ring :: (finite) comm_ring
  uminus_mod_ring == uminus :: 'a mod_ring => 'a mod_ring
  times_mod_ring == times :: 'a mod_ring => 'a mod_ring => 'a mod_ring
  zero_mod_ring == zero_class.zero :: 'a mod_ring
  minus_mod_ring == minus :: 'a mod_ring => 'a mod_ring => 'a mod_ring
  plus_mod_ring == plus :: 'a mod_ring => 'a mod_ring => 'a mod_ring
### Additional type variable(s) in locale specification "nontriv": 'a
class nontriv = type +
  assumes "nontriv": "1 < CARD('a)"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
locale comm_monoid_mult_isom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_isom hom"
instantiation
  mod_ring :: (nontriv) comm_ring_1
  one_mod_ring == one_class.one :: 'a mod_ring
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
### Additional type variable(s) in locale specification "prime_card": 'a
class prime_card = type +
  assumes "prime_card": "prime CARD('a)"
instantiation
  mod_ring :: (prime_card) field
  inverse_mod_ring == inverse :: 'a mod_ring => 'a mod_ring
  divide_mod_ring == divide :: 'a mod_ring => 'a mod_ring => 'a mod_ring
instantiation
  mod_ring :: (prime_card) {normalization_euclidean_semiring,euclidean_ring}
  normalize_mod_ring == normalize :: 'a mod_ring => 'a mod_ring
  unit_factor_mod_ring == unit_factor :: 'a mod_ring => 'a mod_ring
  euclidean_size_mod_ring == euclidean_size :: 'a mod_ring => nat
  modulo_mod_ring == modulo :: 'a mod_ring => 'a mod_ring => 'a mod_ring
instantiation
  mod_ring :: (prime_card) euclidean_ring_gcd
  Gcd_mod_ring == Gcd :: 'a mod_ring set => 'a mod_ring
  Lcm_mod_ring == Lcm :: 'a mod_ring set => 'a mod_ring
  gcd_mod_ring == gcd :: 'a mod_ring => 'a mod_ring => 'a mod_ring
  lcm_mod_ring == lcm :: 'a mod_ring => 'a mod_ring => 'a mod_ring
instantiation
  mod_ring :: (prime_card) unique_euclidean_ring
  division_segment_mod_ring == division_segment ::
    'a mod_ring => 'a mod_ring
### theory "Draft.Finite_Field"
### 2.118s elapsed time, 5.469s cpu time, 0.791s GC time
class ufd = idom +
  assumes
    "mset_factors_exist":
      "!!x. [| x ~= (0::'a); ~ x dvd (1::'a) |] ==> EX F. mset_factors F x"
    and
    "mset_factors_unique":
      "!!x F G.
          [| mset_factors F x; mset_factors G x |] ==> rel_mset (ddvd) F G"
class ufd = idom +
  assumes
    "mset_factors_exist":
      "!!x. [| x ~= (0::'a); ~ x dvd (1::'a) |] ==> EX F. mset_factors F x"
    and
    "mset_factors_unique":
      "!!x F G.
          [| mset_factors F x; mset_factors G x |] ==> rel_mset (ddvd) F G"
locale comm_semiring_1_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_1_hom hom"
locale irreducibility_hom
  fixes hom :: "'a => 'b"
  assumes "irreducibility_hom hom"
locale unit_preserving_hom
  fixes hom :: "'a => 'b"
  assumes "unit_preserving_hom hom"
locale factor_preserving_hom
  fixes hom :: "'a => 'b"
  assumes "factor_preserving_hom hom"
locale comm_semiring_isom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_isom hom"
class comm_monoid_gcd = gcd + comm_semiring_1 +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
class comm_monoid_gcd = gcd + comm_semiring_1 +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
locale gcd_condition
  fixes ty :: "'a itself"
  assumes "gcd_condition TYPE('a)"
### Cannot skip proof of schematic goal statement
### theory "Draft.Unique_Factorization"
### 6.548s elapsed time, 9.632s cpu time, 1.566s GC time
Loading theory "Draft.Unique_Factorization_Poly" (required by "Draft.Distinct_Degree_FactorizationTemplates" via "Draft.Distinct_Degree_Factorization" via "Draft.Berlekamp_Type_Based" via "Draft.Poly_Mod_Finite_Field" via "Draft.Poly_Mod")
instantiation
  fract :: (idom) {normalization_euclidean_semiring,euclidean_ring}
  normalize_fract == normalize :: 'a fract => 'a fract
  unit_factor_fract == unit_factor :: 'a fract => 'a fract
  euclidean_size_fract == euclidean_size :: 'a fract => nat
  modulo_fract == modulo :: 'a fract => 'a fract => 'a fract
instantiation
  fract :: (idom) euclidean_ring_gcd
  Gcd_fract == Gcd :: 'a fract set => 'a fract
  Lcm_fract == Lcm :: 'a fract set => 'a fract
  gcd_fract == gcd :: 'a fract => 'a fract => 'a fract
  lcm_fract == lcm :: 'a fract => 'a fract => 'a fract
instantiation
  fract :: (idom) unique_euclidean_ring
  division_segment_fract == division_segment :: 'a fract => 'a fract
### theory "Draft.Unique_Factorization_Poly"
### 1.148s elapsed time, 1.240s cpu time, 0.122s GC time
Loading theory "Draft.Poly_Mod" (required by "Draft.Distinct_Degree_FactorizationTemplates" via "Draft.Distinct_Degree_Factorization" via "Draft.Berlekamp_Type_Based" via "Draft.Poly_Mod_Finite_Field")
locale poly_mod
  fixes m :: "int"
locale poly_mod
  fixes m :: "int"
locale poly_mod_2
  fixes m :: "int"
  assumes "poly_mod_2 m"
locale poly_mod
  fixes m :: "int"
locale poly_mod_2
  fixes m :: "int"
  assumes "poly_mod_2 m"
locale poly_mod
  fixes m :: "int"
locale poly_mod_2
  fixes m :: "int"
  assumes "poly_mod_2 m"
locale poly_mod_prime
  fixes p :: "int"
  assumes "poly_mod_prime p"
locale poly_mod
  fixes m :: "int"
locale poly_mod_2
  fixes m :: "int"
  assumes "poly_mod_2 m"
### theory "Draft.Poly_Mod"
### 1.572s elapsed time, 2.214s cpu time, 0.945s GC time
Loading theory "Draft.Poly_Mod_Finite_Field" (required by "Draft.Distinct_Degree_FactorizationTemplates" via "Draft.Distinct_Degree_Factorization" via "Draft.Berlekamp_Type_Based")
locale poly_mod_type
  fixes m :: "int"
    and ty :: "'a itself"
  assumes "poly_mod_type TYPE('a) m"
locale poly_mod_2
  fixes m :: "int"
  assumes "poly_mod_2 m"
locale poly_mod_prime_type
  fixes m :: "int"
    and ty :: "'a itself"
  assumes "poly_mod_prime_type TYPE('a) m"
locale poly_mod_prime
  fixes p :: "int"
  assumes "poly_mod_prime p"
### theory "Draft.Poly_Mod_Finite_Field"
### 1.278s elapsed time, 1.367s cpu time, 0.159s GC time
Loading theory "Draft.Berlekamp_Type_Based" (required by "Draft.Distinct_Degree_FactorizationTemplates" via "Draft.Distinct_Degree_Factorization")
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
consts
  berlekamp_factorization_main ::
    "nat
     => 'a mod_ring poly list
        => 'a mod_ring poly list => nat => 'a mod_ring poly list"
### Cannot skip proof of schematic goal statement
### theory "Draft.Berlekamp_Type_Based"
### 3.599s elapsed time, 3.875s cpu time, 0.505s GC time
Loading theory "Draft.Distinct_Degree_Factorization" (required by "Draft.Distinct_Degree_FactorizationTemplates")
locale poly_mod_type_irr
  fixes m :: "int"
    and f :: "'a mod_ring poly"
  assumes "poly_mod_type_irr m f"
### theory "Draft.Distinct_Degree_Factorization"
### 0.883s elapsed time, 0.946s cpu time, 0.125s GC time
Loading theory "Draft.Distinct_Degree_FactorizationTemplates"
val templateLemmas =
   [("Distinct_Degree_Factorization.degree_monom0'",
     "degree (monom (0::?'a) ?b) = 0",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_hole 0)),
    ("Distinct_Degree_Factorization.degree_monom0",
     "degree (monom ?a 0) = 0",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_hole 0)),
    ("Distinct_Degree_Factorization.fermat_theorem_mod_ring2",
     "?a ^ CARD(?'a) ^ ?n = ?a",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 0)),
       template_var 1)),
    ("Distinct_Degree_Factorization.factors_of_same_degreeD",
     "factors_of_same_degree ?i ?f ==> ?i ~= 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_negation
        (template_equation (template_var 1, template_hole 0)))),
    ("Distinct_Degree_Factorization.factors_of_same_degreeD",
     "factors_of_same_degree ?i ?f ==> degree ?f ~= 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Distinct_Degree_Factorization.degree_prod_monom",
     "degree (PROD i = 0..<?n. monom (1::?'a) 1) = ?n",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, t_empty),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))),
       template_var 0)),
    ("Distinct_Degree_Factorization.factors_of_same_degreeD",
     "factors_of_same_degree ?i ?f ==> monic ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Distinct_Degree_Factorization.fermat_theorem_power_poly",
     "[:?a:] ^ CARD(?'a) ^ ?n = [:?a:]",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_hole 3)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 0)),
       template_app
        (template_app (template_hole 4, template_var 1), template_hole 3))),
    ("Distinct_Degree_Factorization.factors_of_same_degreeD",
     "[| factors_of_same_degree ?i ?f; ?g dvd ?f |]
      ==> irreducible ?g = (degree ?g = ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 1)
            )],
       template_implication
        ([template_predicate
           (template_app (template_hole 2, template_var 0))],
         template_equation
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Distinct_Degree_Factorization.add_power_prime_poly_mod_ring",
     "(?x + ?y) ^ CARD(?'a) ^ ?n =
      ?x ^ CARD(?'a) ^ ?n + ?y ^ CARD(?'a) ^ ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0)),
               template_var 0))),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)),
             template_var 0))))),
    ("Distinct_Degree_Factorization.degree_divisor1",
     "[| irreducible ?f; degree ?f = ?d |]
      ==> ?f dvd monom 1 1 ^ CARD(?'a) ^ ?d - monom 1 1",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_equation
         (template_app (template_hole 9, template_var 1), template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 8, template_var 1),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_hole 4),
                       template_hole 3)),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_hole 0)),
                     template_var 0))),
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_hole 3)))
           ))),
    ("Distinct_Degree_Factorization.sum_monom_mod",
     "?b < degree ?f ==>
      (SUM i<=?b. monom (?g i) i) mod ?f = (SUM i<=?b. monom (?g i) i)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty),
               template_app (template_hole 0, template_var 2))),
           template_var 1),
         template_app
          (template_app (template_hole 2, t_empty),
           template_app (template_hole 0, template_var 2))))),
    ("Distinct_Degree_Factorization.dvd_power_minus_1_conv",
     "[| 1 < ?x; 0 < ?a; 0 < ?b |]
      ==> (?a dvd ?b) = (?x ^ ?a - 1 dvd ?x ^ ?b - 1)",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2),
        template_inequation (less_than, template_hole 4, template_var 1),
        template_inequation (less_than, template_hole 4, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_hole 5)),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_hole 5))))),
    ("Distinct_Degree_Factorization.dvd_power_minus_1_conv2",
     "[| 1 < ?x; 0 < ?a; ?a dvd ?b; 0 < ?b |]
      ==> ?x ^ ?a - 1 dvd ?x ^ ?b - 1",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2),
        template_inequation (less_than, template_hole 3, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_inequation (less_than, template_hole 3, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 1)),
                 template_hole 4)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0)),
               template_hole 4))
           ))),
    ("Distinct_Degree_Factorization.dvd_power_minus_1_conv1",
     "[| 1 < ?x; 0 < ?a; ?x ^ ?a - 1 dvd ?x ^ ?b - 1; 0 < ?b |]
      ==> ?a dvd ?b",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2),
        template_inequation (less_than, template_hole 3, template_var 1),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_hole 1,
                    template_app
                     (template_app (template_hole 0, template_var 2),
                      template_var 1)),
                  template_hole 4)),
              template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 2),
                    template_var 0)),
                template_hole 4))
            ),
        template_inequation (less_than, template_hole 3, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1), template_var 0)
           ))),
    ("Distinct_Degree_Factorization.degree_divisor2",
     "[| irreducible ?f; degree ?f = ?d; 1 <= ?c; ?c < ?d |]
      ==> ~ ?f dvd monom 1 1 ^ CARD(?'a) ^ ?c - monom 1 1",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 2)),
        template_equation
         (template_app (template_hole 12, template_var 2), template_var 1),
        template_inequation (less_equals, template_hole 10, template_var 0),
        template_inequation (less_than, template_var 0, template_var 1)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 7, template_var 2),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_app (template_hole 4, template_hole 3),
                           template_hole 10)),
                       template_app
                        (template_app
                          (template_hole 2,
                           template_app (template_hole 1, template_hole 0)),
                         template_var 0))),
                   template_app
                    (template_app (template_hole 4, template_hole 3),
                     template_hole 10)))
               )
           ))),
    ("Distinct_Degree_Factorization.x_power_aq_minus_1_rw",
     "[| 1 < ?x; 0 < ?a; (0::?'a) < ?b |]
      ==> ?x ^ (?a * ?q) - 1 = (?x ^ ?a - 1) * sum ((^) (?x ^ ?a)) {..<?q}",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 3),
        template_inequation (less_than, template_hole 8, template_var 2),
        template_inequation (less_than, template_hole 6, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 3),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 0))),
           template_hole 9),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_var 2)),
               template_hole 9)),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_var 2))),
             template_app (template_hole 0, template_var 0)))))),
    ("Distinct_Degree_Factorization.distinct_degree_factorization",
     "[| distinct_degree_factorization ?f = ?facts; square_free ?f;
         monic ?f |]
      ==> ?f = prod_list (map snd ?facts) &
          (ALL i f. (i, f) : set ?facts --> factors_of_same_degree i f)",
     template_implication
      ([template_equation
         (template_app (template_hole 17, template_var 1), template_var 0),
        template_predicate
         (template_app (template_hole 16, template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 14, template_var 1),
            template_app (template_hole 13, template_var 1)),
          template_hole 12)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app (template_hole 10, template_var 1),
                 template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, template_hole 7),
                     template_var 0)))),
             template_app (template_hole 6, t_empty))
           ))),
    ("Distinct_Degree_Factorization.dist_degree_factorize_main",
     "[| dist_degree_factorize_main ?v ?w ?d ?res = ?facts;
         ?w = monom 1 1 ^ CARD(?'a) ^ ?d mod ?v; square_free ?u; monic ?u;
         ?u = ?v * prod_list (map snd ?res);
         !!f. [| irreducible f; f dvd ?v |] ==> ?d < degree f;
         !!i f.
            (i, f) : set ?res ==>
            i ~= 0 &
            degree f ~= 0 &
            monic f & (ALL g. irreducible g --> g dvd f --> degree g = i) |]
      ==> ?u = prod_list (map snd ?facts) &
          (ALL i f. (i, f) : set ?facts --> factors_of_same_degree i f)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 33, template_var 5),
                template_var 4),
              template_var 3),
            template_var 2),
          template_var 1),
        template_equation
         (template_var 4,
          template_app
           (template_app
             (template_hole 31,
              template_app
               (template_app
                 (template_hole 30,
                  template_app
                   (template_app (template_hole 29, template_hole 28),
                    template_hole 27)),
                template_app
                 (template_app
                   (template_hole 26,
                    template_app (template_hole 25, template_hole 24)),
                  template_var 3))),
            template_var 5)),
        template_predicate
         (template_app (template_hole 23, template_var 0)),
        template_equation
         (template_app
           (template_app (template_hole 21, template_var 0),
            template_app (template_hole 20, template_var 0)),
          template_hole 28),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 19, template_var 5),
            template_app
             (template_hole 18,
              template_app
               (template_app (template_hole 17, template_hole 16),
                template_var 2)))),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 32, template_var 0),
                 template_app
                  (template_hole 18,
                   template_app
                    (template_app (template_hole 17, template_hole 16),
                     template_var 1)))),
             template_app (template_hole 1, t_empty))
           )))]:
   (string * thm * template) list
### theory "Draft.Distinct_Degree_FactorizationTemplates"
### 0.926s elapsed time, 1.169s cpu time, 0.206s GC time
val it = (): unit
