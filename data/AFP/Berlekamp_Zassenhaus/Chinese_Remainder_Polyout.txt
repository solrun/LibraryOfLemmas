Loading theory "Draft.Chinese_Remainder_Poly" (required by "Draft.Chinese_Remainder_PolyTemplates")
Loading theory "Draft.Templates" (required by "Draft.Chinese_Remainder_PolyTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.089s elapsed time, 0.214s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Chinese_Remainder_PolyTemplates")
### theory "Draft.Chinese_Remainder_Poly"
### 0.482s elapsed time, 1.001s cpu time, 0.046s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.536s elapsed time, 0.931s cpu time, 0.046s GC time
Loading theory "Draft.Chinese_Remainder_PolyTemplates"
val templateLemmas =
   [("Chinese_Remainder_Poly.cong_1_poly", "[?a = ?b] (mod 1)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("Chinese_Remainder_Poly.cong_mult_self_poly", "[?a * ?m = 0] (mod ?m)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0),
           template_var 0)
         )),
    ("Chinese_Remainder_Poly.cong_sym_poly",
     "[?a = ?b] (mod ?m) ==> [?b = ?a] (mod ?m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 0)
           ))),
    ("Chinese_Remainder_Poly.cong_mod_poly",
     "?n ~= 0 ==> [?a mod ?n = ?a] (mod ?n)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1)),
               template_var 0),
             template_var 1)
           ))),
    ("Chinese_Remainder_Poly.cong_solve_coprime_poly",
     "coprime ?a ?n ==> EX x. [?a * x = 1] (mod ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Chinese_Remainder_Poly.cong_iff_lin_poly",
     "[?a = ?b] (mod ?m) = (EX k. ?b = ?a + ?m * k)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_var 0),
       template_app (template_hole 3, t_empty))),
    ("Chinese_Remainder_Poly.cong_scalar2_poly",
     "[?a = ?b] (mod ?m) ==> [?k * ?a = ?k * ?b] (mod ?m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3)),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_var 1)
           ))),
    ("Chinese_Remainder_Poly.cong_dvd_modulus_poly",
     "[| [?x = ?y] (mod ?m); ?n dvd ?m |] ==> [?x = ?y] (mod ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Chinese_Remainder_Poly.cong_solve_poly",
     "?a ~= 0 ==> EX x. [?a * x = gcd ?a ?n] (mod ?n)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Chinese_Remainder_Poly.cong_trans_poly",
     "[| [?a = ?b] (mod ?m); [?b = ?c] (mod ?m) |] ==> [?a = ?c] (mod ?m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0),
             template_var 1)
           ))),
    ("Chinese_Remainder_Poly.cong_add_poly",
     "[| [?a = ?b] (mod ?m); [?c = ?d] (mod ?m) |]
      ==> [?a + ?c = ?b + ?d] (mod ?m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)),
             template_var 2)
           ))),
    ("Chinese_Remainder_Poly.cong_mult_poly",
     "[| [?a = ?b] (mod ?m); [?c = ?d] (mod ?m) |]
      ==> [?a * ?c = ?b * ?d] (mod ?m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)),
             template_var 2)
           ))),
    ("Chinese_Remainder_Poly.coprime_cong_mult_poly",
     "[| [?a = ?b] (mod ?m); [?a = ?b] (mod ?n); coprime ?m ?n |]
      ==> [?a = ?b] (mod ?m * ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Chinese_Remainder_Poly.cong_less_modulus_unique_poly",
     "[| [?x = ?y] (mod ?m); degree ?x < degree ?m; degree ?y < degree ?m |]
      ==> ?x = ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_inequation
         (less_than, template_app (template_hole 1, template_var 2),
          template_app (template_hole 1, template_var 0)),
        template_inequation
         (less_than, template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 2, template_var 1))),
    ("Chinese_Remainder_Poly.cong_sum_poly",
     "(!!x. x : ?A ==> [?f x = ?g x] (mod ?m)) ==>
      [sum ?f ?A = sum ?g ?A] (mod ?m)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, t_empty),
                   template_var 3)),
               template_app
                (template_app (template_hole 0, t_empty), template_var 3)),
             template_var 0)
           ))),
    ("Chinese_Remainder_Poly.chinese_remainder_poly",
     "[| finite ?A; ALL i:?A. ALL j:?A. i ~= j --> coprime (?m i) (?m j) |]
      ==> EX x. ALL i:?A. [x = ?u i] (mod ?m i)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2), t_empty)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Chinese_Remainder_Poly.coprime_cong_prod_poly",
     "[| ALL i:?A. ALL j:?A. i ~= j --> coprime (?m i) (?m j);
         ALL i:?A. [?x = ?y] (mod ?m i) |]
      ==> [?x = ?y] (mod prod ?m ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_app
              (template_app (template_hole 0, t_empty), template_var 3))
           ))),
    ("Chinese_Remainder_Poly.chinese_remainder_aux_poly",
     "[| finite ?A; ALL i:?A. ALL j:?A. i ~= j --> coprime (?m i) (?m j) |]
      ==> EX b. ALL i:?A.
                   [b i = 1] (mod ?m i) &
                   [b i = 0] (mod prod ?m (?A - {i}))",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1), t_empty)
            )],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("Chinese_Remainder_Poly.chinese_remainder_unique_poly",
     "[| ALL i:?A. ?m i ~= 0;
         ALL i:?A. ALL j:?A. i ~= j --> coprime (?m i) (?m j);
         0 < degree (prod ?m ?A) |]
      ==> EX! x.
             degree x < (SUM i:?A. degree (?m i)) &
             (ALL i:?A. [x = ?u i] (mod ?m i))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 2), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 2), t_empty)
            ),
        template_inequation
         (less_than, template_hole 6,
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 2)))],
       template_predicate (template_app (template_hole 3, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Chinese_Remainder_PolyTemplates"
### 0.618s elapsed time, 0.824s cpu time, 0.166s GC time
val it = (): unit
