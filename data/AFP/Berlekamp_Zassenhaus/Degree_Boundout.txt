Loading theory "Draft.Degree_Bound" (required by "Draft.Degree_BoundTemplates")
Loading theory "Draft.Templates" (required by "Draft.Degree_BoundTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.070s elapsed time, 0.182s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Degree_BoundTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.542s elapsed time, 1.085s cpu time, 0.048s GC time
### theory "Draft.Degree_Bound"
### 0.729s elapsed time, 1.419s cpu time, 0.118s GC time
Loading theory "Draft.Degree_BoundTemplates"
val templateLemmas =
   [("Degree_Bound.sum_list_insort",
     "sum_list (insort ?d ?xs) = ?d + sum_list ?xs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, t_empty), template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Degree_Bound.max_factor_degree_mono",
     "max_factor_degree (map degree (fold remove1 ?ws ?vs))
      <= max_factor_degree (map degree ?vs)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1),
             template_var 0))),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)))),
    ("Degree_Bound.insort_middle",
     "sort (?xs @ ?x # ?ys) = insort ?x (sort (?xs @ ?ys))",
     template_equation
      (template_app
        (template_app (template_hole 3, t_empty),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_app (template_hole 0, t_empty), template_var 1),
         template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0))))),
    ("Degree_Bound.degree_bound",
     "[| mset ?ws <=# mset ?vs; length ?ws + length ?ws <= length ?vs |]
      ==> degree (prod_list ?ws) <= degree_bound ?vs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              template_app (template_hole 6, template_var 0))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 1)),
            template_app (template_hole 3, template_var 1)),
          template_app (template_hole 3, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Degree_Bound.max_factor_degree",
     "[| mset ?ws <=# mset ?vs; length ?ws + length ?ws <= length ?vs |]
      ==> degree (prod_list ?ws) <= max_factor_degree (map degree ?vs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 1)),
              template_app (template_hole 7, template_var 0))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 1)),
            template_app (template_hole 4, template_var 1)),
          template_app (template_hole 4, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_hole 3),
             template_var 0))))),
    ("Degree_Bound.half_largest_elements_mono",
     "sum_list (drop (length ?ds div 2) (sort ?ds))
      <= sum_list (drop (Suc (length ?ds) div 2) (insort ?d (sort ?ds)))",
     template_inequation
      (less_equals,
       template_app
        (template_hole 9,
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app (template_hole 6, template_var 1)),
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_hole 3)))),
           template_app
            (template_app (template_hole 2, t_empty), template_var 1))),
       template_app
        (template_hole 9,
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 6, template_var 1))),
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_hole 3)))),
           template_app
            (template_app
              (template_app (template_hole 0, t_empty), template_var 0),
             template_app
              (template_app (template_hole 2, t_empty),
               template_var 1)))))),
    ("Degree_Bound.max_factor_degree_aux",
     "[| mset ?ds <=# mset ?es; length ?ds + length ?ds <= length ?es;
         sorted ?es |]
      ==> sum_list ?ds <= sum_list (drop (length ?es div 2) ?es)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 1)),
              template_app (template_hole 10, template_var 0))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 1)),
            template_app (template_hole 7, template_var 1)),
          template_app (template_hole 7, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 9),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 5, template_var 1),
         template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 7, template_var 0)),
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_hole 0)))),
             template_var 0))))),
    ("Degree_Bound.mset_sub_decompose",
     "[| mset ?ds <=# mset ?bs + ?as; length ?ds < length ?bs |]
      ==> EX b1 b b2.
             ?bs = b1 @ b # b2 & mset ?ds <=# mset (b1 @ b2) + ?as",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 2)),
              template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 9, template_var 1)),
                template_var 0))
            ),
        template_inequation
         (less_than, template_app (template_hole 6, template_var 2),
          template_app (template_hole 6, template_var 1))],
       template_predicate (template_app (template_hole 5, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Degree_BoundTemplates"
### 0.700s elapsed time, 0.884s cpu time, 0.117s GC time
val it = (): unit
