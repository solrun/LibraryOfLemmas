   [("Berlekamp_Type_Based.list_of_vec_vec_of_list",
     "list_of_vec (vec_of_list ?a) = ?a",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Berlekamp_Type_Based.vec_of_list_list_of_vec",
     "vec_of_list (list_of_vec ?a) = ?a",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Berlekamp_Type_Based.berlekamp_mat_closed",
     "dim_col (berlekamp_mat ?u) = degree ?u",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Berlekamp_Type_Based.berlekamp_resulting_mat_closed",
     "dim_col (berlekamp_resulting_mat ?u) = degree ?u",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Berlekamp_Type_Based.berlekamp_mat_closed",
     "dim_row (berlekamp_mat ?u) = degree ?u",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Berlekamp_Type_Based.berlekamp_resulting_mat_closed",
     "dim_row (berlekamp_resulting_mat ?u) = degree ?u",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Berlekamp_Type_Based.dim_vec_of_list",
     "dim_vec (vec_of_list ?x) = length ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Berlekamp_Type_Based.length_list_of_vec",
     "length (list_of_vec ?A) = dim_vec ?A",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Berlekamp_Type_Based.mat_of_rows_list_dim",
     "dim_col (mat_of_rows_list ?n ?vs) = ?n"  [.],
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("Berlekamp_Type_Based.fermat_theorem_mod_ring", "?a ^ CARD(?'a) = ?a",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)),
       template_var 0)),
    ("Berlekamp_Type_Based.mat_of_rows_list_dim",
     "dim_row (mat_of_rows_list ?n ?vs) = length ?vs"  [.],
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Berlekamp_Type_Based.coprime_id_is_unit",
     "comm_monoid_mult_class.coprime ?a ?a = is_unit ?a",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Berlekamp_Type_Based.card_carrier_vec",
     "card (carrier_vec ?n) = CARD(?'b) ^ ?n",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0)),
         template_var 0))),
    ("Berlekamp_Type_Based.card_set_berlekamp_basis",
     "card (set (berlekamp_basis ?u)) = length (berlekamp_basis ?u)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 0, template_app (template_hole 1, template_var 0)))),
    ("Berlekamp_Type_Based.length_power_polys",
     "length (power_polys ?mult_p ?u ?curr_p ?n) = ?n"  [.],
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_var 0)),
    ("Berlekamp_Type_Based.prod_list_normalize",
     "normalize (prod_list ?P) = prod_list (map normalize ?P)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_hole 2),
           template_var 0)))),
    ("Berlekamp_Type_Based.list_of_vec_rw_map",
     "list_of_vec ?m = map (($) ?m) [0..<dim_vec ?m]",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))))),
    ("Berlekamp_Type_Based.mod_eq_dvd_iff_poly",
     "(?x mod ?n = ?y mod ?n) = (?n dvd ?x - ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0), template_var 1)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Berlekamp_Type_Based.berlekamp_basis_code",
     "berlekamp_basis ?u =
      map (poly_of_list o list_of_vec)
       (find_base_vectors (berlekamp_resulting_mat ?u))",
     template_equation
      (template_app (template_hole 9, template_var 0),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_hole 6),
             template_hole 5)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_hole 2),
             template_hole 1),
           template_app (template_hole 0, template_var 0))))),
    ("Berlekamp_Type_Based.set_berlekamp_basis_eq",
     "set (berlekamp_basis ?u) =
      (Poly o list_of_vec) `
      set (find_base_vectors (berlekamp_resulting_mat ?u))",
     template_equation
      (template_app
        (template_hole 11, template_app (template_hole 10, template_var 0)),
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_hole 7),
             template_hole 6)),
         template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_hole 3),
                 template_hole 2),
               template_hole 1),
             template_app (template_hole 0, template_var 0)))))),
    ("Berlekamp_Type_Based.poly_identity_mod_p",
     "?v ^ CARD(?'a) - ?v = (PROD x:UNIV. ?v - [:x:])",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 0),
             template_app (template_hole 5, template_hole 4))),
         template_var 0),
       template_app
        (template_app (template_hole 3, t_empty), template_hole 0))),
    ("Berlekamp_Type_Based.add_power_poly_mod_ring",
     "(?x + ?y) ^ CARD(?'a) = ?x ^ CARD(?'a) + ?y ^ CARD(?'a)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_hole 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app (template_hole 1, template_hole 0))),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app (template_hole 1, template_hole 0))))),
    ("Berlekamp_Type_Based.poly_power_card_as_sum_of_monoms",
     "?h ^ CARD(?'a) =
      (SUM i<=degree ?h. monom (coeff ?h i) (CARD(?'a) * i))",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 0),
         template_app (template_hole 7, template_hole 6)),
       template_app
        (template_app (template_hole 5, t_empty),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Berlekamp_Type_Based.prod_list_map_filter",
     "prod_list (map ?g (filter ?f ?xs)) *
      prod_list (map ?g (filter (%x. ~ ?f x) ?xs)) =
      prod_list (map ?g ?xs)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)))),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 1, t_empty), template_var 0)))),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Berlekamp_Type_Based.power_poly_f_mod_binary",
     "power_poly_f_mod ?m ?a ?n =
      (if ?n = 0 then 1 mod ?m
       else let (d, r) = divmod_nat ?n 2;
                rec = power_poly_f_mod ?m (?a * ?a mod ?m) d
            in if r = 0 then rec else rec * ?a mod ?m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_dunno)),
    ("Berlekamp_Type_Based.W_eq_berlekamp_mat",
     "{v. [v ^ CARD(?'a) = v] (mod ?u) & degree v < degree ?u} =
      {h. let H = vec_of_list
                   (coeffs h @ replicate (degree ?u - length (coeffs h)) 0)
          in (berlekamp_mat ?u)\<^sup>T *\<^sub>v H = H &
             degree h < degree ?u}",
     template_equation
      (template_app (template_hole 19, t_empty),
       template_app (template_hole 19, t_empty)))]
