Loading theory "Draft.More_Missing_Multiset" (required by "Draft.Unique_Factorization_PolyTemplates" via "Draft.Unique_Factorization_Poly" via "Draft.Unique_Factorization")
Loading theory "Draft.Templates" (required by "Draft.Unique_Factorization_PolyTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.075s elapsed time, 0.196s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Unique_Factorization_PolyTemplates")
### theory "Draft.More_Missing_Multiset"
### 0.213s elapsed time, 0.465s cpu time, 0.049s GC time
Loading theory "Draft.Unique_Factorization" (required by "Draft.Unique_Factorization_PolyTemplates" via "Draft.Unique_Factorization_Poly")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.626s elapsed time, 1.256s cpu time, 0.123s GC time
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
locale comm_monoid_mult_isom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_isom hom"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
class ufd = idom +
  assumes
    "mset_factors_exist":
      "!!x. [| x ~= (0::'a); ~ x dvd (1::'a) |] ==> EX F. mset_factors F x"
    and
    "mset_factors_unique":
      "!!x F G.
          [| mset_factors F x; mset_factors G x |] ==> rel_mset (ddvd) F G"
class ufd = idom +
  assumes
    "mset_factors_exist":
      "!!x. [| x ~= (0::'a); ~ x dvd (1::'a) |] ==> EX F. mset_factors F x"
    and
    "mset_factors_unique":
      "!!x F G.
          [| mset_factors F x; mset_factors G x |] ==> rel_mset (ddvd) F G"
locale comm_semiring_1_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_1_hom hom"
locale irreducibility_hom
  fixes hom :: "'a => 'b"
  assumes "irreducibility_hom hom"
locale unit_preserving_hom
  fixes hom :: "'a => 'b"
  assumes "unit_preserving_hom hom"
locale factor_preserving_hom
  fixes hom :: "'a => 'b"
  assumes "factor_preserving_hom hom"
locale comm_semiring_isom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_isom hom"
class comm_monoid_gcd = gcd + comm_semiring_1 +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
class comm_monoid_gcd = gcd + comm_semiring_1 +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
locale gcd_condition
  fixes ty :: "'a itself"
  assumes "gcd_condition TYPE('a)"
### Cannot skip proof of schematic goal statement
### theory "Draft.Unique_Factorization"
### 6.335s elapsed time, 7.535s cpu time, 1.376s GC time
Loading theory "Draft.Unique_Factorization_Poly" (required by "Draft.Unique_Factorization_PolyTemplates")
instantiation
  fract :: (idom) {normalization_euclidean_semiring,euclidean_ring}
  normalize_fract == normalize :: 'a fract => 'a fract
  unit_factor_fract == unit_factor :: 'a fract => 'a fract
  euclidean_size_fract == euclidean_size :: 'a fract => nat
  modulo_fract == modulo :: 'a fract => 'a fract => 'a fract
instantiation
  fract :: (idom) euclidean_ring_gcd
  Gcd_fract == Gcd :: 'a fract set => 'a fract
  Lcm_fract == Lcm :: 'a fract set => 'a fract
  gcd_fract == gcd :: 'a fract => 'a fract => 'a fract
  lcm_fract == lcm :: 'a fract => 'a fract => 'a fract
instantiation
  fract :: (idom) unique_euclidean_ring
  division_segment_fract == division_segment :: 'a fract => 'a fract
### theory "Draft.Unique_Factorization_Poly"
### 1.159s elapsed time, 1.293s cpu time, 0.177s GC time
Loading theory "Draft.Unique_Factorization_PolyTemplates"
val templateLemmas =
   [("Unique_Factorization_Poly.divides_ff_refl", "divides_ff ?x ?x",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Unique_Factorization_Poly.eq_dff_refl", "?x =dff ?x",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Unique_Factorization_Poly.some_gcd_ff_list",
     "gcd_ff_list ?xs (some_gcd_ff_list ?xs)",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 0))
         )),
    ("Unique_Factorization_Poly.gcd_ff_list_exists",
     "EX g. gcd_ff_list ?X g",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Unique_Factorization_Poly.inv_embed", "inv_embed (to_fract ?x) = ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Unique_Factorization_Poly.smult_normalize_content_ff",
     "smult (content_ff ?p) (normalize_content_ff ?p) = ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Unique_Factorization_Poly.content_ff_0_iff",
     "(content_ff ?p = 0) = (?p = 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Unique_Factorization_Poly.content_ff_map_poly_to_fract",
     "content_ff (map_poly to_fract ?p) : range to_fract",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 0))),
           template_app
            (template_app (template_hole 1, template_hole 2),
             template_hole 0))
         )),
    ("Unique_Factorization_Poly.irreducible_degree_field",
     "irreducible ?p ==> 0 < degree ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_inequation
        (less_than, template_hole 1,
         template_app (template_hole 0, template_var 0)))),
    ("Unique_Factorization_Poly.eq_dff_sym", "?x =dff ?y ==> ?y =dff ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Unique_Factorization_Poly.divides_ff_to_fract",
     "divides_ff (to_fract ?x) (to_fract ?y) = (?x dvd ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Unique_Factorization_Poly.content_ff_smult",
     "content_ff (smult ?a ?p) =dff ?a * content_ff ?p",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0))),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app (template_hole 2, template_var 0)))
         )),
    ("Unique_Factorization_Poly.primitive_iff_some_content_dvd_1",
     "primitive ?f = (some_gcd.listgcd (coeffs ?f) dvd (1::?'a))",
     template_equation
      (template_app (template_hole 6, template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_hole 2),
             template_app (template_hole 1, template_var 0))),
         template_hole 0))),
    ("Unique_Factorization_Poly.gauss_lemma",
     "content_ff (?p * ?q) =dff content_ff ?p * content_ff ?q",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 1)),
             template_app (template_hole 2, template_var 0)))
         )),
    ("Unique_Factorization_Poly.some_gcd_ff_list_divides",
     "?x : set ?xs ==> divides_ff (some_gcd_ff_list ?xs) ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Unique_Factorization_Poly.content_ff_normalize_content_ff_1",
     "?p ~= 0 ==> content_ff (normalize_content_ff ?p) =dff 1",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0))),
             template_hole 0)
           ))),
    ("Unique_Factorization_Poly.content_ff_divides_ff",
     "?x : set (coeffs ?p) ==> divides_ff (content_ff ?p) ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Unique_Factorization_Poly.primitive_irreducible_imp_degree",
     "[| primitive ?p; irreducible ?p |] ==> 0 < degree ?p",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 0)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_inequation
        (less_than, template_hole 1,
         template_app (template_hole 0, template_var 0)))),
    ("Unique_Factorization_Poly.content_ff_iff",
     "divides_ff ?x (content_ff ?p) =
      (ALL c:set (coeffs ?p). divides_ff ?x c)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))),
         t_empty))),
    ("Unique_Factorization_Poly.content_ff_1_coeffs_to_fract",
     "content_ff ?p =dff 1 ==> set (coeffs ?p) <= range to_fract",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 0)),
              template_hole 6)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0)))),
    ("Unique_Factorization_Poly.some_gcd_ff_list_greatest",
     "ALL x:set ?xs. divides_ff ?d x ==>
      divides_ff ?d (some_gcd_ff_list ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Unique_Factorization_Poly.divides_ff_trans",
     "[| divides_ff ?x ?y; divides_ff ?y ?z |] ==> divides_ff ?x ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Unique_Factorization_Poly.eq_dffI",
     "[| divides_ff ?x ?y; divides_ff ?y ?x |] ==> ?x =dff ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Unique_Factorization_Poly.eq_dff_trans",
     "[| ?x =dff ?y; ?y =dff ?z |] ==> ?x =dff ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Unique_Factorization_Poly.irreducible_M_PM",
     "[| degree ?p = 0; irreducible (coeff ?p 0) |] ==> irreducible ?p",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 0), template_hole 3),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 0),
                template_hole 3))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Unique_Factorization_Poly.divides_ff_mult_cancel_right",
     "divides_ff (?x * ?z) (?y * ?z) = (?z = 0 | divides_ff ?x ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_app
               (template_app (template_hole 3, template_var 0),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0)),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 0))
           ))),
    ("Unique_Factorization_Poly.divides_ff_mult_cancel_left",
     "divides_ff (?z * ?x) (?z * ?y) = (?z = 0 | divides_ff ?x ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 0)),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0))
           ))),
    ("Unique_Factorization_Poly.eq_dff_cancel_right",
     "(?x * ?y =dff ?x * ?z) = (?x = 0 | ?y =dff ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 0)),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0))
           ))),
    ("Unique_Factorization_Poly.content_ff_to_fract_coeffs_to_fract",
     "content_ff ?p : range to_fract ==> set (coeffs ?p) <= range to_fract",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 0)),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_hole 3))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app
          (template_app (template_hole 5, template_hole 4),
           template_hole 3)))),
    ("Unique_Factorization_Poly.content_ff_to_fract",
     "set (coeffs ?p) <= range to_fract ==> content_ff ?p : range to_fract",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_var 0)),
          template_app
           (template_app (template_hole 4, template_hole 3),
            template_hole 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_hole 2))
           ))),
    ("Unique_Factorization_Poly.some_gcd_ff_list_smult",
     "?a ~= 0 ==>
      some_gcd_ff_list (map ((*) ?a) ?xs) =dff ?a * some_gcd_ff_list ?xs",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 1)),
                   template_var 0))),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_app (template_hole 2, template_var 0)))
           ))),
    ("Unique_Factorization_Poly.range_to_fract_embed_poly",
     "set (coeffs ?p) <= range to_fract ==>
      ?p = map_poly to_fract (map_poly inv_embed ?p)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 8,
            template_app (template_hole 7, template_var 0)),
          template_app
           (template_app (template_hole 6, template_hole 5),
            template_hole 4))],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 2, template_hole 5),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))))),
    ("Unique_Factorization_Poly.irreducible_PFM_PM",
     "[| irreducible (map_poly to_fract ?p);
         content_ff (map_poly to_fract ?p) =dff 1 |]
      ==> irreducible ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 5, template_hole 4),
                    template_var 0))),
              template_hole 1)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Unique_Factorization_Poly.content_ff_eq_dff_nonzero",
     "[| content_ff ?p =dff ?x; ?x ~= 0 |] ==> ?p ~= 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_negation
        (template_equation (template_var 1, template_hole 0)))),
    ("Unique_Factorization_Poly.range_coeffs_to_fract",
     "set (coeffs ?p) <= range to_fract ==> EX m. coeff ?p ?i = to_fract m",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_var 1)),
          template_app
           (template_app (template_hole 5, template_hole 4),
            template_hole 3))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Unique_Factorization_Poly.eq_dff_mult_right_trans",
     "[| ?x =dff ?y * ?z; ?z =dff ?u |] ==> ?x =dff ?y * ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Unique_Factorization_Poly.divides_ff_mult_right",
     "[| ?a ~= 0; divides_ff (?x * inverse ?a) ?y |]
      ==> divides_ff ?x (?a * ?y)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_app (template_hole 0, template_var 2))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0))
           ))),
    ("Unique_Factorization_Poly.ff_list_pairs",
     "EX xs.
         ?X = map (%(x, y). Fraction_Field.Fract x y) xs &
         (0::?'a) ~: snd ` set xs",
     template_predicate (template_app (template_hole 11, t_empty))),
    ("Unique_Factorization_Poly.dvd_PM_iff",
     "(?p dvd ?q) =
      (divides_ff (content_ff (map_poly to_fract ?p))
        (content_ff (map_poly to_fract ?q)) &
       map_poly to_fract ?p dvd map_poly to_fract ?q)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 1))),
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 0)))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1)),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0))))),
    ("Unique_Factorization_Poly.divides_ff_coeff",
     "[| set (coeffs ?p) <= range to_fract;
         divides_ff (to_fract ?n) (coeff ?p ?i) |]
      ==> EX m. coeff ?p ?i = to_fract ?n * to_fract m",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 9,
            template_app (template_hole 8, template_var 2)),
          template_app
           (template_app (template_hole 7, template_hole 6),
            template_hole 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 6, template_var 1)),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Unique_Factorization_Poly.irreducible_cases",
     "irreducible ?p =
      (degree ?p = 0 & irreducible (coeff ?p 0) |
       degree ?p ~= 0 &
       irreducible (map_poly to_fract ?p) &
       content_ff (map_poly to_fract ?p) =dff 1)",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app
                      (template_hole 11,
                       template_app (template_hole 10, template_var 0)),
                     template_hole 9)),
                 template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 0),
                     template_hole 9)))),
             template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 11,
                       template_app (template_hole 10, template_var 0)),
                     template_hole 9))),
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_hole 3),
                       template_var 0))),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 4, template_hole 3),
                         template_var 0))),
                   template_hole 0))))
           ))),
    ("Unique_Factorization_Poly.irreducible_PM_M_PFM",
     "irreducible ?p ==>
      degree ?p = 0 & irreducible (coeff ?p 0) |
      degree ?p ~= 0 &
      irreducible (map_poly to_fract ?p) &
      content_ff (map_poly to_fract ?p) =dff 1",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app
                      (template_hole 11,
                       template_app (template_hole 10, template_var 0)),
                     template_hole 9)),
                 template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 0),
                     template_hole 9)))),
             template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 11,
                       template_app (template_hole 10, template_var 0)),
                     template_hole 9))),
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_hole 3),
                       template_var 0))),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 4, template_hole 3),
                         template_var 0))),
                   template_hole 0))))
           ))),
    ("Unique_Factorization_Poly.factorization_to_fract",
     "[| ?q ~= 0; map_poly to_fract ?p = ?q * ?r |]
      ==> EX q' r' c.
             c ~= 0 &
             ?q = smult c (map_poly to_fract q') &
             ?r = smult (inverse c) (map_poly to_fract r') &
             content_ff (map_poly to_fract q') =dff 1 & ?p = q' * r'",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 15)),
        template_equation
         (template_app
           (template_app (template_hole 14, template_hole 13),
            template_var 1),
          template_app
           (template_app (template_hole 12, template_var 2),
            template_var 0))],
       template_predicate (template_app (template_hole 11, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Unique_Factorization_PolyTemplates"
### 0.777s elapsed time, 0.958s cpu time, 0.110s GC time
val it = (): unit
