Loading theory "Draft.Arithmetic_Record_Based" (required by "Draft.ReconstructionTemplates" via "Draft.Reconstruction" via "Draft.Berlekamp_Hensel" via "Draft.Finite_Field_Factorization_Record_Based" via "Draft.Matrix_Record_Based")
Loading theory "Draft.Degree_Bound" (required by "Draft.ReconstructionTemplates" via "Draft.Reconstruction")
Loading theory "Draft.Karatsuba_Multiplication" (required by "Draft.ReconstructionTemplates" via "Draft.Reconstruction" via "Draft.Berlekamp_Hensel" via "Draft.Finite_Field_Factorization_Record_Based" via "Draft.Poly_Mod_Finite_Field_Record_Based" via "Draft.Polynomial_Record_Based")
Loading theory "Draft.Templates" (required by "Draft.ReconstructionTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.124s elapsed time, 0.451s cpu time, 0.049s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ReconstructionTemplates")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.616s elapsed time, 2.313s cpu time, 0.191s GC time
Loading theory "Draft.Chinese_Remainder_Poly" (required by "Draft.ReconstructionTemplates" via "Draft.Reconstruction" via "Draft.Berlekamp_Hensel" via "Draft.Finite_Field_Factorization_Record_Based" via "Draft.Finite_Field_Factorization" via "Draft.Berlekamp_Type_Based")
### theory "Draft.Degree_Bound"
### 0.864s elapsed time, 3.190s cpu time, 0.303s GC time
Loading theory "Draft.More_Missing_Multiset" (required by "Draft.ReconstructionTemplates" via "Draft.Reconstruction" via "Draft.Berlekamp_Hensel" via "Draft.Finite_Field_Factorization_Record_Based" via "Draft.Finite_Field_Factorization" via "Draft.Berlekamp_Type_Based" via "Draft.Poly_Mod_Finite_Field")
### theory "Draft.More_Missing_Multiset"
### 0.228s elapsed time, 0.839s cpu time, 0.077s GC time
Loading theory "Draft.Sublist_Iteration" (required by "Draft.ReconstructionTemplates" via "Draft.Reconstruction")
### theory "Draft.Chinese_Remainder_Poly"
### 0.766s elapsed time, 2.681s cpu time, 0.692s GC time
Loading theory "Draft.Unique_Factorization" (required by "Draft.ReconstructionTemplates" via "Draft.Reconstruction" via "Draft.Berlekamp_Hensel" via "Draft.Finite_Field_Factorization_Record_Based" via "Draft.Finite_Field_Factorization" via "Draft.Berlekamp_Type_Based" via "Draft.Poly_Mod_Finite_Field" via "Draft.Poly_Mod" via "Draft.Unique_Factorization_Poly")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale arith_ops
  fixes ops :: "'i arith_ops_record"  (structure)
locale ring_ops
  fixes ops :: "'i arith_ops_record"
    and R :: "'i => 'a => bool"
  assumes "ring_ops ops R"
locale idom_ops
  fixes ops :: "'i arith_ops_record"
    and R :: "'i => 'a => bool"
  assumes "idom_ops ops R"
locale idom_divide_ops
  fixes ops :: "'i arith_ops_record"
    and R :: "'i => 'a => bool"
  assumes "idom_divide_ops ops R"
locale euclidean_semiring_ops
  fixes ops :: "'i arith_ops_record"
    and R :: "'i => 'a => bool"
  assumes "euclidean_semiring_ops ops R"
locale euclidean_ring_ops
  fixes ops :: "'i arith_ops_record"
    and R :: "'i => 'a => bool"
  assumes "euclidean_ring_ops ops R"
locale field_ops
  fixes ops :: "'i arith_ops_record"
    and R :: "'i => 'a => bool"
  assumes "field_ops ops R"
### theory "Draft.Arithmetic_Record_Based"
### 2.261s elapsed time, 8.123s cpu time, 1.247s GC time
Loading theory "Draft.Matrix_Record_Based" (required by "Draft.ReconstructionTemplates" via "Draft.Reconstruction" via "Draft.Berlekamp_Hensel" via "Draft.Finite_Field_Factorization_Record_Based")
locale subseqs_impl
  fixes f :: "'a => 'b => 'b"
    and sl_impl :: "('a, 'b, 'state) subseqs_impl"
locale correct_subseqs_impl
  fixes f :: "'a => 'b => 'b"
    and sl_impl :: "('a, 'b, 'state) subseqs_impl"
    and invariant :: "'b => 'a list => nat => 'state => bool"
  assumes "correct_subseqs_impl f sl_impl invariant"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
Found termination order:
  "(%p. size (snd (snd (snd p)))) <*mlex*>
   (%p. size (fst (snd p))) <*mlex*> {}"
Found termination order:
  "(%p. size (fst (snd (snd (snd p))))) <*mlex*>
   (%p. length (fst (snd (snd p)))) <*mlex*> {}"
### theory "Draft.Karatsuba_Multiplication"
### 3.353s elapsed time, 11.941s cpu time, 2.266s GC time
Loading theory "Draft.Polynomial_Record_Based" (required by "Draft.ReconstructionTemplates" via "Draft.Reconstruction" via "Draft.Berlekamp_Hensel" via "Draft.Finite_Field_Factorization_Record_Based" via "Draft.Poly_Mod_Finite_Field_Record_Based")
locale field_ops
  fixes ops :: "'i arith_ops_record"
    and R :: "'i => 'a => bool"
  assumes "field_ops ops R"
locale comm_monoid_mult_isom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_isom hom"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
### theory "Draft.Matrix_Record_Based"
### 1.300s elapsed time, 4.569s cpu time, 1.127s GC time
Loading theory "Draft.Finite_Field" (required by "Draft.ReconstructionTemplates" via "Draft.Reconstruction" via "Draft.Berlekamp_Hensel" via "Draft.Finite_Field_Factorization_Record_Based" via "Draft.Finite_Field_Factorization" via "Draft.Berlekamp_Type_Based")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale subseqs_foldr_impl
  fixes f :: "'a => 'b => 'b"
    and impl :: "('a, 'b, 'state) subseqs_foldr_impl"
locale correct_subseqs_foldr_impl
  fixes f :: "'a => 'b => 'b"
    and impl :: "('a, 'b, 'state) subseqs_foldr_impl"
    and invariant :: "'b => 'a list => nat => 'state => bool"
  assumes "correct_subseqs_foldr_impl f impl invariant"
locale my_subseqs
  fixes f :: "'a => 'b => 'b"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
class ufd = idom +
  assumes
    "mset_factors_exist":
      "!!x. [| x ~= (0::'a); ~ x dvd (1::'a) |] ==> EX F. mset_factors F x"
    and
    "mset_factors_unique":
      "!!x F G.
          [| mset_factors F x; mset_factors G x |] ==> rel_mset (ddvd) F G"
instantiation
  mod_ring :: (finite) equal
  equal_mod_ring == equal_class.equal :: 'a mod_ring => 'a mod_ring => bool
instantiation
  mod_ring :: (finite) comm_ring
  uminus_mod_ring == uminus :: 'a mod_ring => 'a mod_ring
  times_mod_ring == times :: 'a mod_ring => 'a mod_ring => 'a mod_ring
  zero_mod_ring == zero_class.zero :: 'a mod_ring
  minus_mod_ring == minus :: 'a mod_ring => 'a mod_ring => 'a mod_ring
  plus_mod_ring == plus :: 'a mod_ring => 'a mod_ring => 'a mod_ring
### Additional type variable(s) in locale specification "nontriv": 'a
class nontriv = type +
  assumes "nontriv": "1 < CARD('a)"
instantiation
  mod_ring :: (nontriv) comm_ring_1
  one_mod_ring == one_class.one :: 'a mod_ring
### Additional type variable(s) in locale specification "prime_card": 'a
class ufd = idom +
  assumes
    "mset_factors_exist":
      "!!x. [| x ~= (0::'a); ~ x dvd (1::'a) |] ==> EX F. mset_factors F x"
    and
    "mset_factors_unique":
      "!!x F G.
          [| mset_factors F x; mset_factors G x |] ==> rel_mset (ddvd) F G"
class prime_card = type +
  assumes "prime_card": "prime CARD('a)"
Found termination order:
  "case_sum (%p. size_list (%p. size (fst p)) (snd (snd p)))
    (%p. size_list (%p. size (fst p)) (fst (snd (snd p)))) <*mlex*>
   case_sum (%x. 0) (%x. Suc 0) <*mlex*>
   case_sum (%p. size_list (%p. size (fst p)) (snd (snd p)))
    (%p. size_list size (snd (snd (snd (snd p))))) <*mlex*>
   {}"
locale comm_semiring_1_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_1_hom hom"
locale irreducibility_hom
  fixes hom :: "'a => 'b"
  assumes "irreducibility_hom hom"
locale unit_preserving_hom
  fixes hom :: "'a => 'b"
  assumes "unit_preserving_hom hom"
locale factor_preserving_hom
  fixes hom :: "'a => 'b"
  assumes "factor_preserving_hom hom"
Found termination order: "{}"
locale comm_semiring_isom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_isom hom"
instantiation
  mod_ring :: (prime_card) field
  inverse_mod_ring == inverse :: 'a mod_ring => 'a mod_ring
  divide_mod_ring == divide :: 'a mod_ring => 'a mod_ring => 'a mod_ring
instantiation
  mod_ring :: (prime_card) {normalization_euclidean_semiring,euclidean_ring}
  normalize_mod_ring == normalize :: 'a mod_ring => 'a mod_ring
  unit_factor_mod_ring == unit_factor :: 'a mod_ring => 'a mod_ring
  euclidean_size_mod_ring == euclidean_size :: 'a mod_ring => nat
  modulo_mod_ring == modulo :: 'a mod_ring => 'a mod_ring => 'a mod_ring
Found termination order: "{}"
instantiation
  mod_ring :: (prime_card) euclidean_ring_gcd
  Gcd_mod_ring == Gcd :: 'a mod_ring set => 'a mod_ring
  Lcm_mod_ring == Lcm :: 'a mod_ring set => 'a mod_ring
  gcd_mod_ring == gcd :: 'a mod_ring => 'a mod_ring => 'a mod_ring
  lcm_mod_ring == lcm :: 'a mod_ring => 'a mod_ring => 'a mod_ring
instantiation
  mod_ring :: (prime_card) unique_euclidean_ring
  division_segment_mod_ring == division_segment ::
    'a mod_ring => 'a mod_ring
### theory "Draft.Finite_Field"
### 2.844s elapsed time, 10.270s cpu time, 1.729s GC time
Loading theory "Draft.Finite_Field_Record_Based" (required by "Draft.ReconstructionTemplates" via "Draft.Reconstruction" via "Draft.Berlekamp_Hensel" via "Draft.Finite_Field_Factorization_Record_Based" via "Draft.Poly_Mod_Finite_Field_Record_Based")
Found termination order: "{}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Sublist_Iteration"
### 5.680s elapsed time, 20.224s cpu time, 3.874s GC time
Found termination order:
  "(%p. size (snd (snd (snd p)))) <*mlex*>
   (%p. size (fst (snd p))) <*mlex*> {}"
class comm_monoid_gcd = gcd + comm_semiring_1 +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
class comm_monoid_gcd = gcd + comm_semiring_1 +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
locale ring_ops
  fixes ops :: "'i arith_ops_record"
    and R :: "'i => 'a => bool"
  assumes "ring_ops ops R"
locale idom_ops
  fixes ops :: "'i arith_ops_record"
    and R :: "'i => 'a => bool"
  assumes "idom_ops ops R"
locale idom_divide_ops
  fixes ops :: "'i arith_ops_record"
    and R :: "'i => 'a => bool"
  assumes "idom_divide_ops ops R"
locale field_ops
  fixes ops :: "'i arith_ops_record"
    and R :: "'i => 'a => bool"
  assumes "field_ops ops R"
locale ring_ops
  fixes ops :: "'i arith_ops_record"
    and R :: "'i => 'a => bool"
  assumes "ring_ops ops R"
### theory "Draft.Polynomial_Record_Based"
### 5.125s elapsed time, 17.277s cpu time, 2.469s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale mod_ring_locale
  fixes p :: "int"
    and ty :: "'a itself"
  assumes "mod_ring_locale TYPE('a) p"
locale prime_field
  fixes p :: "int"
    and ty :: "'a itself"
  assumes "prime_field TYPE('a) p"
locale mod_ring_locale
  fixes p :: "int"
    and ty :: "'a itself"
  assumes "mod_ring_locale TYPE('a) p"
locale prime_field
  fixes p :: "int"
    and ty :: "'a itself"
  assumes "prime_field TYPE('a) p"
locale mod_ring_locale
  fixes p :: "int"
    and ty :: "'a itself"
  assumes "mod_ring_locale TYPE('a) p"
locale prime_field
  fixes p :: "int"
    and ty :: "'a itself"
  assumes "prime_field TYPE('a) p"
locale mod_ring_locale
  fixes p :: "int"
    and ty :: "'a itself"
  assumes "mod_ring_locale TYPE('a) p"
locale prime_field
  fixes p :: "int"
    and ty :: "'a itself"
  assumes "prime_field TYPE('a) p"
locale prime_field
  fixes p :: "int"
    and ty :: "'a itself"
  assumes "prime_field TYPE('a) p"
[| p = int_of_uint64 ?pp; p <= 4294967295 |]
==> field_ops (finite_field_ops64 ?pp) mod_ring_rel64
[| p = int_of_uint32 ?pp; p <= 65535 |]
==> field_ops (finite_field_ops32 ?pp) mod_ring_rel32
p = int_of_integer ?pp ==>
field_ops (finite_field_ops_integer ?pp) mod_ring_rel_integer
field_ops (finite_field_ops_int p) mod_ring_rel
locale mod_ring_locale
  fixes p :: "int"
    and ty :: "'a itself"
  assumes "mod_ring_locale TYPE('a) p"
[| p = int_of_uint64 ?pp; p <= 4294967295 |]
==> ring_ops (finite_field_ops64 ?pp) mod_ring_rel64
[| p = int_of_uint32 ?pp; p <= 65535 |]
==> ring_ops (finite_field_ops32 ?pp) mod_ring_rel32
p = int_of_integer ?pp ==>
ring_ops (finite_field_ops_integer ?pp) mod_ring_rel_integer
ring_ops (finite_field_ops_int p) mod_ring_rel
### theory "Draft.Finite_Field_Record_Based"
### 3.070s elapsed time, 8.232s cpu time, 0.764s GC time
locale gcd_condition
  fixes ty :: "'a itself"
  assumes "gcd_condition TYPE('a)"
### Cannot skip proof of schematic goal statement
### theory "Draft.Unique_Factorization"
### 8.759s elapsed time, 26.627s cpu time, 4.007s GC time
Loading theory "Draft.Unique_Factorization_Poly" (required by "Draft.ReconstructionTemplates" via "Draft.Reconstruction" via "Draft.Berlekamp_Hensel" via "Draft.Finite_Field_Factorization_Record_Based" via "Draft.Finite_Field_Factorization" via "Draft.Berlekamp_Type_Based" via "Draft.Poly_Mod_Finite_Field" via "Draft.Poly_Mod")
instantiation
  fract :: (idom) {normalization_euclidean_semiring,euclidean_ring}
  normalize_fract == normalize :: 'a fract => 'a fract
  unit_factor_fract == unit_factor :: 'a fract => 'a fract
  euclidean_size_fract == euclidean_size :: 'a fract => nat
  modulo_fract == modulo :: 'a fract => 'a fract => 'a fract
instantiation
  fract :: (idom) euclidean_ring_gcd
  Gcd_fract == Gcd :: 'a fract set => 'a fract
  Lcm_fract == Lcm :: 'a fract set => 'a fract
  gcd_fract == gcd :: 'a fract => 'a fract => 'a fract
  lcm_fract == lcm :: 'a fract => 'a fract => 'a fract
instantiation
  fract :: (idom) unique_euclidean_ring
  division_segment_fract == division_segment :: 'a fract => 'a fract
### theory "Draft.Unique_Factorization_Poly"
### 1.141s elapsed time, 1.219s cpu time, 0.084s GC time
Loading theory "Draft.Poly_Mod" (required by "Draft.ReconstructionTemplates" via "Draft.Reconstruction" via "Draft.Berlekamp_Hensel" via "Draft.Finite_Field_Factorization_Record_Based" via "Draft.Finite_Field_Factorization" via "Draft.Berlekamp_Type_Based" via "Draft.Poly_Mod_Finite_Field")
locale poly_mod
  fixes m :: "int"
locale poly_mod
  fixes m :: "int"
locale poly_mod_2
  fixes m :: "int"
  assumes "poly_mod_2 m"
locale poly_mod
  fixes m :: "int"
locale poly_mod_2
  fixes m :: "int"
  assumes "poly_mod_2 m"
locale poly_mod
  fixes m :: "int"
locale poly_mod_2
  fixes m :: "int"
  assumes "poly_mod_2 m"
locale poly_mod_prime
  fixes p :: "int"
  assumes "poly_mod_prime p"
locale poly_mod
  fixes m :: "int"
locale poly_mod_2
  fixes m :: "int"
  assumes "poly_mod_2 m"
### theory "Draft.Poly_Mod"
### 1.366s elapsed time, 1.499s cpu time, 0.196s GC time
Loading theory "Draft.Poly_Mod_Finite_Field" (required by "Draft.ReconstructionTemplates" via "Draft.Reconstruction" via "Draft.Berlekamp_Hensel" via "Draft.Finite_Field_Factorization_Record_Based" via "Draft.Finite_Field_Factorization" via "Draft.Berlekamp_Type_Based")
locale poly_mod_type
  fixes m :: "int"
    and ty :: "'a itself"
  assumes "poly_mod_type TYPE('a) m"
locale poly_mod_2
  fixes m :: "int"
  assumes "poly_mod_2 m"
locale poly_mod_prime_type
  fixes m :: "int"
    and ty :: "'a itself"
  assumes "poly_mod_prime_type TYPE('a) m"
locale poly_mod_prime
  fixes p :: "int"
  assumes "poly_mod_prime p"
### theory "Draft.Poly_Mod_Finite_Field"
### 1.146s elapsed time, 1.214s cpu time, 0.109s GC time
Loading theory "Draft.Berlekamp_Type_Based" (required by "Draft.ReconstructionTemplates" via "Draft.Reconstruction" via "Draft.Berlekamp_Hensel" via "Draft.Finite_Field_Factorization_Record_Based" via "Draft.Finite_Field_Factorization")
Loading theory "Draft.Poly_Mod_Finite_Field_Record_Based" (required by "Draft.ReconstructionTemplates" via "Draft.Reconstruction" via "Draft.Berlekamp_Hensel" via "Draft.Finite_Field_Factorization_Record_Based")
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
consts
  berlekamp_factorization_main ::
    "nat
     => 'a mod_ring poly list
        => 'a mod_ring poly list => nat => 'a mod_ring poly list"
locale arith_ops_record
  fixes ops :: "'i arith_ops_record"
    and m :: "int"
locale mod_ring_gen
  fixes ff_ops :: "'i arith_ops_record"
    and R :: "'i => 'a mod_ring => bool"
    and p :: "int"
  assumes "mod_ring_gen ff_ops R p"
### Cannot skip proof of schematic goal statement
locale prime_field_gen
  fixes ff_ops :: "'i arith_ops_record"
    and R :: "'i => 'a mod_ring => bool"
    and p :: "int"
  assumes "prime_field_gen ff_ops R p"
locale prime_field
  fixes p :: "int"
    and ty :: "'a itself"
  assumes "prime_field TYPE('a) p"
locale mod_ring_locale
  fixes p :: "int"
    and ty :: "'a itself"
  assumes "mod_ring_locale TYPE('a) p"
### theory "Draft.Poly_Mod_Finite_Field_Record_Based"
### 1.472s elapsed time, 3.018s cpu time, 0.275s GC time
Loading theory "Draft.Hensel_Lifting" (required by "Draft.ReconstructionTemplates" via "Draft.Reconstruction" via "Draft.Berlekamp_Hensel")
Loading theory "Draft.Mahler_Measure" (required by "Draft.ReconstructionTemplates" via "Draft.Reconstruction" via "Draft.Factor_Bound")
locale ring_ops
  fixes ops :: "'i arith_ops_record"
    and R :: "'i => 'a => bool"
  assumes "ring_ops ops R"
locale mod_ring_gen
  fixes ff_ops :: "'i arith_ops_record"
    and R :: "'i => 'a mod_ring => bool"
    and p :: "int"
  assumes "mod_ring_gen ff_ops R p"
locale poly_mod_2
  fixes m :: "int"
  assumes "poly_mod_2 m"
locale poly_mod
  fixes m :: "int"
locale prime_field_gen
  fixes ff_ops :: "'i arith_ops_record"
    and R :: "'i => 'a mod_ring => bool"
    and p :: "int"
  assumes "prime_field_gen ff_ops R p"
locale poly_mod_prime
  fixes p :: "int"
  assumes "poly_mod_prime p"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale comm_monoid_list
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_list (\<^bold>*) \<^bold>1"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "length <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
locale inj_idom_hom
  fixes hom :: "'a => 'b"
  assumes "inj_idom_hom hom"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Mahler_Measure"
### 2.432s elapsed time, 7.127s cpu time, 0.745s GC time
Loading theory "Draft.Factor_Bound" (required by "Draft.ReconstructionTemplates" via "Draft.Reconstruction")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
### theory "Draft.Berlekamp_Type_Based"
### 4.294s elapsed time, 11.323s cpu time, 1.107s GC time
Loading theory "Draft.Distinct_Degree_Factorization" (required by "Draft.ReconstructionTemplates" via "Draft.Reconstruction" via "Draft.Berlekamp_Hensel" via "Draft.Finite_Field_Factorization_Record_Based" via "Draft.Finite_Field_Factorization")
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd p)) <*mlex*> {}"
locale poly_mod_type_irr
  fixes m :: "int"
    and f :: "'a mod_ring poly"
  assumes "poly_mod_type_irr m f"
Found termination order: "length <*mlex*> {}"
### theory "Draft.Factor_Bound"
### 0.695s elapsed time, 2.035s cpu time, 0.156s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale poly_mod_prime
  fixes p :: "int"
  assumes "poly_mod_prime p"
### theory "Draft.Hensel_Lifting"
### 3.411s elapsed time, 9.746s cpu time, 1.021s GC time
### theory "Draft.Distinct_Degree_Factorization"
### 0.992s elapsed time, 1.889s cpu time, 0.258s GC time
Loading theory "Draft.Finite_Field_Factorization" (required by "Draft.ReconstructionTemplates" via "Draft.Reconstruction" via "Draft.Berlekamp_Hensel" via "Draft.Finite_Field_Factorization_Record_Based")
overloading
  use_distinct_degree_factorization \<equiv>
    use_distinct_degree_factorization :: bool
### theory "Draft.Finite_Field_Factorization"
### 0.075s elapsed time, 0.075s cpu time, 0.000s GC time
Loading theory "Draft.Finite_Field_Factorization_Record_Based" (required by "Draft.ReconstructionTemplates" via "Draft.Reconstruction" via "Draft.Berlekamp_Hensel")
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
consts
  berlekamp_factorization_main_i ::
    "'i => 'i => nat => 'i list list => 'i list list => nat => 'i list list"
locale prime_field_gen
  fixes ff_ops :: "'i arith_ops_record"
    and R :: "'i => 'a mod_ring => bool"
    and p :: "int"
  assumes "prime_field_gen ff_ops R p"
locale poly_mod_prime
  fixes p :: "int"
  assumes "poly_mod_prime p"
### theory "Draft.Finite_Field_Factorization_Record_Based"
### 2.132s elapsed time, 2.236s cpu time, 0.174s GC time
Loading theory "Draft.Berlekamp_Hensel" (required by "Draft.ReconstructionTemplates" via "Draft.Reconstruction")
locale poly_mod_prime
  fixes p :: "int"
  assumes "poly_mod_prime p"
locale poly_mod_2
  fixes m :: "int"
  assumes "poly_mod_2 m"
locale poly_mod_prime
  fixes p :: "int"
  assumes "poly_mod_prime p"
### theory "Draft.Berlekamp_Hensel"
### 0.510s elapsed time, 0.511s cpu time, 0.000s GC time
Loading theory "Draft.Reconstruction" (required by "Draft.ReconstructionTemplates")
locale poly_mod
  fixes m :: "int"
Found termination order: "length <*mlex*> {}"
locale poly_mod_2
  fixes m :: "int"
  assumes "poly_mod_2 m"
### theory "Draft.Reconstruction"
### 2.102s elapsed time, 2.208s cpu time, 0.175s GC time
Loading theory "Draft.ReconstructionTemplates"
val templateLemmas =
   [("Reconstruction.foldr_of_Cons", "foldr (#) ?xs ?ys = ?xs @ ?ys",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Reconstruction.coeff_mult_0",
     "coeff (?f * ?g) 0 = coeff ?f 0 * coeff ?g 0",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 1)),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 1)))),
    ("Reconstruction.foldr_map_prod",
     "foldr (%x. map_prod (?f x) (?g x)) ?xs ?base =
      (foldr ?f ?xs (fst ?base), foldr ?g ?xs (snd ?base))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, t_empty), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 1),
             template_app (template_hole 2, template_var 0))),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Reconstruction.mset_subseqs_size",
     "mset ` {ys: set (subseqs ?xs). length ys = ?n} =
      {ws. ws <=# mset ?xs & size ws = ?n}",
     template_equation
      (template_app
        (template_app (template_hole 11, template_hole 10),
         template_app (template_hole 9, t_empty)),
       template_app (template_hole 2, t_empty))),
    ("Reconstruction.lead_coeff_factor",
     "?u = ?v * ?w ==>
      lead_coeff (Polynomial.smult (lead_coeff ?v) ?w) = lead_coeff ?u",
     template_implication
      ([template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app (template_hole 0, template_var 1))),
               template_var 0)),
           template_app
            (template_hole 0,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app (template_hole 0, template_var 1))),
               template_var 0))),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app (template_hole 0, template_var 2))))),
    ("Reconstruction.lead_coeff_factor",
     "?u = ?v * ?w ==>
      lead_coeff (Polynomial.smult (lead_coeff ?w) ?v) = lead_coeff ?u",
     template_implication
      ([template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_app (template_hole 0, template_var 0))),
               template_var 1)),
           template_app
            (template_hole 0,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_app (template_hole 0, template_var 0))),
               template_var 1))),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app (template_hole 0, template_var 2))))),
    ("Reconstruction.lead_coeff_factor",
     "?u = ?v * ?w ==>
      Polynomial.smult (lead_coeff ?u) ?u =
      Polynomial.smult (lead_coeff ?w) ?v *
      Polynomial.smult (lead_coeff ?v) ?w",
     template_implication
      ([template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, template_var 2))),
           template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_app (template_hole 0, template_var 0))),
               template_var 1)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app (template_hole 0, template_var 1))),
             template_var 0))))),
    ("Reconstruction.n",
     "[| prime ?p; comm_monoid_mult_class.coprime (lead_coeff ?f) ?p;
         poly_mod.square_free_m ?p ?f; 0 < degree ?f;
         berlekamp_hensel ?p ?n ?f = ?hs;
         2 * \<bar>lead_coeff ?f\<bar> * factor_bound ?f (degree_bound ?hs)
         < ?p ^ ?n |]
      ==> ?n ~= 0",
     template_implication
      ([template_predicate
         (template_app (template_hole 19, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_app (template_hole 17, template_var 2),
                  template_app (template_hole 16, template_var 2))),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_than, template_hole 13,
          template_app (template_hole 16, template_var 2)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 11, template_var 3),
              template_var 1),
            template_var 2),
          template_var 0),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 9,
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_hole 8,
                    template_app (template_hole 7, template_hole 6))),
                template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 17, template_var 2),
                    template_app (template_hole 16, template_var 2))))),
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 0))),
          template_app
           (template_app (template_hole 2, template_var 3),
            template_var 1))],
       template_negation
        (template_equation (template_var 1, template_hole 13)))),
    ("Reconstruction.not_irreducible\<^sub>d_lead_coeff_factors",
     "[| ~ irreducible\<^sub>d ?u; degree ?u ~= 0 |]
      ==> EX f g.
             Polynomial.smult (lead_coeff ?u) ?u = f * g &
             lead_coeff f = lead_coeff ?u &
             lead_coeff g = lead_coeff ?u &
             degree f < degree ?u & degree g < degree ?u",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 11, template_var 0))
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 9, template_var 0),
              template_hole 8)
            )],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Reconstruction.zassenhaus_reconstruction_irreducible\<^sub>d",
     "[| prime ?p; comm_monoid_mult_class.coprime (lead_coeff ?f) ?p;
         poly_mod.square_free_m ?p ?f; 0 < degree ?f;
         berlekamp_hensel ?p ?n ?f = ?hs;
         2 * \<bar>lead_coeff ?f\<bar> * factor_bound ?f (degree_bound ?hs)
         < ?p ^ ?n;
         zassenhaus_reconstruction ?hs ?p ?n ?f = ?fs |]
      ==> ?f = prod_list ?fs & (ALL fi:set ?fs. irreducible\<^sub>d fi)",
     template_implication
      ([template_predicate
         (template_app (template_hole 24, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 23,
                template_app
                 (template_app (template_hole 22, template_var 3),
                  template_app (template_hole 21, template_var 3))),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 20, template_var 4),
              template_var 3)
            ),
        template_inequation
         (less_than, template_hole 18,
          template_app (template_hole 21, template_var 3)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 16, template_var 4),
              template_var 2),
            template_var 3),
          template_var 1),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 14,
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_hole 13,
                    template_app (template_hole 12, template_hole 11))),
                template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 22, template_var 3),
                    template_app (template_hole 21, template_var 3))))),
            template_app
             (template_app (template_hole 9, template_var 3),
              template_app (template_hole 8, template_var 1))),
          template_app
           (template_app (template_hole 7, template_var 4),
            template_var 2)),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 6, template_var 1),
                template_var 4),
              template_var 2),
            template_var 3),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_app (template_hole 3, template_var 0))),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               t_empty))
           ))),
    ("Reconstruction.zassenhaus_reconstruction",
     "[| prime ?p; comm_monoid_mult_class.coprime (lead_coeff ?f) ?p;
         poly_mod.square_free_m ?p ?f; 0 < degree ?f;
         berlekamp_hensel ?p ?n ?f = ?hs;
         2 * \<bar>lead_coeff ?f\<bar> * factor_bound ?f (degree_bound ?hs)
         < ?p ^ ?n;
         primitive ?f; zassenhaus_reconstruction ?hs ?p ?n ?f = ?fs |]
      ==> ?f = prod_list ?fs & (ALL fi:set ?fs. irreducible fi)",
     template_implication
      ([template_predicate
         (template_app (template_hole 25, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 24,
                template_app
                 (template_app (template_hole 23, template_var 3),
                  template_app (template_hole 22, template_var 3))),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 21, template_var 4),
              template_var 3)
            ),
        template_inequation
         (less_than, template_hole 19,
          template_app (template_hole 22, template_var 3)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 17, template_var 4),
              template_var 2),
            template_var 3),
          template_var 1),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 15,
              template_app
               (template_app
                 (template_hole 15,
                  template_app
                   (template_hole 14,
                    template_app (template_hole 13, template_hole 12))),
                template_app
                 (template_hole 11,
                  template_app
                   (template_app (template_hole 23, template_var 3),
                    template_app (template_hole 22, template_var 3))))),
            template_app
             (template_app (template_hole 10, template_var 3),
              template_app (template_hole 9, template_var 1))),
          template_app
           (template_app (template_hole 8, template_var 4),
            template_var 2)),
        template_predicate (template_app (template_hole 7, template_var 3)),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 6, template_var 1),
                template_var 4),
              template_var 2),
            template_var 3),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_app (template_hole 3, template_var 0))),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               t_empty))
           ))),
    ("Reconstruction.zassenhaus_reconstruction_generic",
     "[| prime ?p; comm_monoid_mult_class.coprime (lead_coeff ?f) ?p;
         poly_mod.square_free_m ?p ?f; 0 < degree ?f;
         berlekamp_hensel ?p ?n ?f = ?hs;
         2 * \<bar>lead_coeff ?f\<bar> * factor_bound ?f (degree_bound ?hs)
         < ?p ^ ?n;
         correct_subseqs_foldr_impl
          (%v. map_prod (poly_mod.mul_const (?p ^ ?n) v) ((#) v)) ?sl_impl
          ?sli;
         zassenhaus_reconstruction_generic ?sl_impl ?hs ?p ?n ?f = ?fs |]
      ==> ?f = prod_list ?fs & (ALL fi:set ?fs. irreducible\<^sub>d fi)",
     template_implication
      ([template_predicate
         (template_app (template_hole 28, template_var 6)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 27,
                template_app
                 (template_app (template_hole 26, template_var 5),
                  template_app (template_hole 25, template_var 5))),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 24, template_var 6),
              template_var 5)
            ),
        template_inequation
         (less_than, template_hole 22,
          template_app (template_hole 25, template_var 5)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 20, template_var 6),
              template_var 4),
            template_var 5),
          template_var 3),
        template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 18,
              template_app
               (template_app
                 (template_hole 18,
                  template_app
                   (template_hole 17,
                    template_app (template_hole 16, template_hole 15))),
                template_app
                 (template_hole 14,
                  template_app
                   (template_app (template_hole 26, template_var 5),
                    template_app (template_hole 25, template_var 5))))),
            template_app
             (template_app (template_hole 13, template_var 5),
              template_app (template_hole 12, template_var 3))),
          template_app
           (template_app (template_hole 11, template_var 6),
            template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, t_empty), template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 3),
                template_var 6),
              template_var 4),
            template_var 5),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 5),
                 template_app (template_hole 3, template_var 0))),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               t_empty))
           )))]:
   (string * thm * template) list
### theory "Draft.ReconstructionTemplates"
### 2.583s elapsed time, 4.722s cpu time, 2.661s GC time
val it = (): unit
