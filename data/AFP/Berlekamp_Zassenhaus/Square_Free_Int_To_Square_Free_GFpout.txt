Loading theory "Draft.Finite_Field" (required by "Draft.Square_Free_Int_To_Square_Free_GFpTemplates" via "Draft.Square_Free_Int_To_Square_Free_GFp")
Loading theory "Draft.Templates" (required by "Draft.Square_Free_Int_To_Square_Free_GFpTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.065s elapsed time, 0.188s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Square_Free_Int_To_Square_Free_GFpTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.525s elapsed time, 1.047s cpu time, 0.045s GC time
instantiation
  mod_ring :: (finite) equal
  equal_mod_ring == equal_class.equal :: 'a mod_ring => 'a mod_ring => bool
instantiation
  mod_ring :: (finite) comm_ring
  uminus_mod_ring == uminus :: 'a mod_ring => 'a mod_ring
  times_mod_ring == times :: 'a mod_ring => 'a mod_ring => 'a mod_ring
  zero_mod_ring == zero_class.zero :: 'a mod_ring
  minus_mod_ring == minus :: 'a mod_ring => 'a mod_ring => 'a mod_ring
  plus_mod_ring == plus :: 'a mod_ring => 'a mod_ring => 'a mod_ring
### Additional type variable(s) in locale specification "nontriv": 'a
class nontriv = type +
  assumes "nontriv": "1 < CARD('a)"
instantiation
  mod_ring :: (nontriv) comm_ring_1
  one_mod_ring == one_class.one :: 'a mod_ring
### Additional type variable(s) in locale specification "prime_card": 'a
class prime_card = type +
  assumes "prime_card": "prime CARD('a)"
instantiation
  mod_ring :: (prime_card) field
  inverse_mod_ring == inverse :: 'a mod_ring => 'a mod_ring
  divide_mod_ring == divide :: 'a mod_ring => 'a mod_ring => 'a mod_ring
instantiation
  mod_ring :: (prime_card) {normalization_euclidean_semiring,euclidean_ring}
  normalize_mod_ring == normalize :: 'a mod_ring => 'a mod_ring
  unit_factor_mod_ring == unit_factor :: 'a mod_ring => 'a mod_ring
  euclidean_size_mod_ring == euclidean_size :: 'a mod_ring => nat
  modulo_mod_ring == modulo :: 'a mod_ring => 'a mod_ring => 'a mod_ring
instantiation
  mod_ring :: (prime_card) euclidean_ring_gcd
  Gcd_mod_ring == Gcd :: 'a mod_ring set => 'a mod_ring
  Lcm_mod_ring == Lcm :: 'a mod_ring set => 'a mod_ring
  gcd_mod_ring == gcd :: 'a mod_ring => 'a mod_ring => 'a mod_ring
  lcm_mod_ring == lcm :: 'a mod_ring => 'a mod_ring => 'a mod_ring
instantiation
  mod_ring :: (prime_card) unique_euclidean_ring
  division_segment_mod_ring == division_segment ::
    'a mod_ring => 'a mod_ring
### theory "Draft.Finite_Field"
### 1.623s elapsed time, 2.305s cpu time, 0.111s GC time
Loading theory "Draft.Square_Free_Int_To_Square_Free_GFp" (required by "Draft.Square_Free_Int_To_Square_Free_GFpTemplates")
### theory "Draft.Square_Free_Int_To_Square_Free_GFp"
### 0.976s elapsed time, 1.056s cpu time, 0.145s GC time
Loading theory "Draft.Square_Free_Int_To_Square_Free_GFpTemplates"
val templateLemmas =
   [("Square_Free_Int_To_Square_Free_GFp.square_free_int_rat",
     "square_free ?f ==> square_free (of_int_poly ?f)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Square_Free_Int_To_Square_Free_GFp.square_free_imp_resultant_non_zero",
     "square_free ?f ==> resultant ?f (pderiv ?f) ~= 0",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("Square_Free_Int_To_Square_Free_GFp.content_free_unit",
     "content ?p = (1::?'a) ==> (?p dvd 1) = (degree ?p = 0)",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 0), template_hole 6)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 4, template_var 0),
                template_hole 3)
              )],
         template_equation
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Square_Free_Int_To_Square_Free_GFp.square_free_int_imp_separable_mod_ring",
     "[| square_free ?f; separable_bound ?f < int CARD(?'a) |]
      ==> separable (of_int_poly ?f)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 0)),
        template_inequation
         (less_than, template_app (template_hole 6, template_var 0),
          template_app
           (template_hole 5,
            template_app (template_hole 4, template_hole 3)))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Square_Free_Int_To_Square_Free_GFp.square_free_int_imp_square_free_mod_ring",
     "[| square_free ?f; separable_bound ?f < int CARD(?'a) |]
      ==> square_free (of_int_poly ?f)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 0)),
        template_inequation
         (less_than, template_app (template_hole 6, template_var 0),
          template_app
           (template_hole 5,
            template_app (template_hole 4, template_hole 3)))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Square_Free_Int_To_Square_Free_GFp.large_mod_0",
     "[| 1 < ?n; \<bar>?k\<bar> < ?n; ?k mod ?n = 0 |] ==> ?k = 0",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 1),
        template_inequation
         (less_than, template_app (template_hole 3, template_var 0),
          template_var 1),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 0), template_var 1),
          template_hole 0)],
       template_equation (template_var 0, template_hole 0))),
    ("Square_Free_Int_To_Square_Free_GFp.square_free_int_imp_resultant_non_zero_mod_ring",
     "[| square_free ?f; separable_bound ?f < int CARD(?'a) |]
      ==> resultant (of_int_poly ?f) (pderiv (of_int_poly ?f)) ~= 0 &
          of_int_poly ?f ~= 0",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 0)),
        template_inequation
         (less_than, template_app (template_hole 13, template_var 0),
          template_app
           (template_hole 12,
            template_app (template_hole 11, template_hole 10)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app
                          (template_app (template_hole 5, template_hole 4),
                           template_var 0)),
                       template_app
                        (template_hole 3,
                         template_app
                          (template_app (template_hole 5, template_hole 4),
                           template_var 0)))),
                   template_hole 2))),
             template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_var 0)),
                 template_hole 0)))
           )))]:
   (string * thm * template) list
### theory "Draft.Square_Free_Int_To_Square_Free_GFpTemplates"
### 1.268s elapsed time, 1.849s cpu time, 0.642s GC time
val it = (): unit
