   [("Suitable_Prime.square_free_iff_separable_GFp",
     "degree ?f < CARD(?'a) ==> square_free ?f = separable ?f",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 5, template_var 0),
          template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Suitable_Prime.suitable_prime_bz",
     "[| square_free ?f; ?p = suitable_prime_bz ?f |] ==> prime ?p",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_equation
         (template_var 0, template_app (template_hole 1, template_var 1))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Suitable_Prime.suitable_prime_bz",
     "[| square_free ?f; ?p = suitable_prime_bz ?f |]
      ==> poly_mod.square_free_m ?p ?f",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_equation
         (template_var 0, template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Suitable_Prime.square_free_separable_GFp",
     "[| degree ?f < CARD(?'a); square_free ?f |] ==> separable ?f",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 4, template_var 0),
          template_app (template_hole 3, template_hole 2)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Suitable_Prime.next_primes",
     "[| next_primes ?n = (?m, ?ps); candidate_invariant ?n |]
      ==> distinct ?ps",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 2),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Suitable_Prime.next_primes",
     "[| next_primes ?n = (?m, ?ps); candidate_invariant ?n |]
      ==> candidate_invariant ?m",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 2),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0)),
        template_predicate
         (template_app (template_hole 0, template_var 2))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Suitable_Prime.find_Some_D",
     "find ?f ?xs = Some ?y ==> ?y : set ?xs & ?f ?y",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 1))),
             template_app (template_var 2, template_var 0))
           ))),
    ("Suitable_Prime.next_primes",
     "[| next_primes ?n = (?m, ?ps); candidate_invariant ?n |]
      ==> sorted ?ps",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 2),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0)),
        template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)
           ))),
    ("Suitable_Prime.next_primes",
     "[| next_primes ?n = (?m, ?ps); candidate_invariant ?n |] ==> ?n < ?m",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 2),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_inequation (less_than, template_var 2, template_var 1))),
    ("Suitable_Prime.find_prime",
     "EX n. prime n & ?f n ==> prime (find_prime ?f) & ?f (find_prime ?f)",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0))),
             template_app
              (template_var 0,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Suitable_Prime.suitable_prime_bz",
     "[| square_free ?f; ?p = suitable_prime_bz ?f |]
      ==> comm_monoid_mult_class.coprime (lead_coeff ?f) ?p",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_equation
         (template_var 0, template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("Suitable_Prime.prime_for_berlekamp_zassenhaus_exists",
     "square_free ?f ==>
      EX p. prime p &
            comm_monoid_mult_class.coprime (lead_coeff ?f) p &
            separable_impl p ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Suitable_Prime.square_free_mod_imp_square_free",
     "[| prime ?p; poly_mod.square_free_m ?p ?f;
         comm_monoid_mult_class.coprime (lead_coeff ?f) ?p |]
      ==> square_free ?f",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_app (template_hole 1, template_var 0))),
              template_var 1)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Suitable_Prime.square_free_heuristic",
     "square_free_heuristic ?f = Some ?p ==>
      comm_monoid_mult_class.coprime (lead_coeff ?f) ?p &
      separable_impl ?p ?f & prime ?p",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 1),
          template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_app (template_hole 2, template_var 1))),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 1)),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Suitable_Prime.coprime_lead_coeff_large_prime",
     "[| prime ?p; \<bar>lead_coeff ?f\<bar> < ?p; ?f ~= 0 |]
      ==> comm_monoid_mult_class.coprime (lead_coeff ?f) ?p",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_inequation
         (less_than,
          template_app
           (template_hole 6,
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 0))),
          template_var 1),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_app (template_hole 4, template_var 0))),
             template_var 1)
           ))),
    ("Suitable_Prime.next_primes",
     "[| next_primes ?n = (?m, ?ps); candidate_invariant ?n |]
      ==> set ?ps = {i. prime i & ?n <= i & i < ?m}",
     template_implication
      ([template_equation
         (template_app (template_hole 9, template_var 2),
          template_app
           (template_app (template_hole 8, template_var 1),
            template_var 0)),
        template_predicate
         (template_app (template_hole 7, template_var 2))],
       template_equation
        (template_app (template_hole 5, template_var 0),
         template_app (template_hole 4, t_empty))))]
