   [("Poly_Mod.exactly_one_factorization",
     "?f ~= 0 ==> EX! cfs. factorization Irr_Mon ?f cfs",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Poly_Mod.mod_ident_iff",
     "0 < ?m ==> (?x mod ?m = ?x) = (?x : {0..<?m})",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_hole 5),
             template_var 1))))),
    ("Poly_Mod.irreducible_dvd_prod_mset",
     "[| irreducible ?p; ?p dvd \<Prod>\<^sub># ?as |]
      ==> \<exists>a:#?as. ?p dvd a",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             t_empty)
           ))),
    ("Poly_Mod.irreducible_multD",
     "irreducible (?a * ?b) ==>
      ?a dvd (1::?'a) & irreducible ?b | ?b dvd (1::?'a) & irreducible ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_hole 0)),
                 template_app (template_hole 5, template_var 0))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0)),
               template_app (template_hole 5, template_var 1)))
           ))),
    ("Poly_Mod.inverse_mod",
     "[| comm_monoid_mult_class.coprime ?x ?m; 1 < ?m |]
      ==> inverse_mod ?x ?m * ?x mod ?m = 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            ),
        template_inequation (less_than, template_hole 4, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_var 1)),
           template_var 0),
         template_hole 4))),
    ("Poly_Mod.M_M_pow_is_M",
     "[| ?n ~= 0; 1 < ?p |]
      ==> poly_mod.M ?p (poly_mod.M (?p ^ ?n) ?f) = poly_mod.M ?p ?f",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 5)),
        template_inequation (less_than, template_hole 3, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Poly_Mod.Mp_Mp_pow_is_Mp",
     "[| ?n ~= 0; 1 < ?p |]
      ==> poly_mod.Mp ?p (poly_mod.Mp (?p ^ ?n) ?f) = poly_mod.Mp ?p ?f",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 5)),
        template_inequation (less_than, template_hole 3, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Poly_Mod.monic_prod_mset",
     "(!!a. a :# ?as ==> monic a) ==> monic (\<Prod>\<^sub># ?as)",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 0, template_var 0)),
           template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 0))),
         template_hole 1))),
    ("Poly_Mod.exactly_one_monic_factorization",
     "monic ?f ==>
      EX! fs.
         ?f = \<Prod>\<^sub># fs &
         set_mset fs <= {q. irreducible q & monic q}",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 10, template_var 0),
            template_app (template_hole 9, template_var 0)),
          template_hole 8)],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Poly_Mod.inverse_mod_pow",
     "[| comm_monoid_mult_class.coprime ?x ?p; 1 < ?p; ?n ~= 0 |]
      ==> inverse_mod ?x (?p ^ ?n) * ?x mod ?p ^ ?n = 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_var 1)
            ),
        template_inequation (less_than, template_hole 8, template_var 1),
        template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0))),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_hole 8))),
    ("Poly_Mod.monic_smult_add_small",
     "[| ?f = 0 | degree ?f < degree ?g; monic ?g |]
      ==> monic (?g + smult ?q ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 2),
                  template_hole 7)),
              template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_var 2)),
                template_app (template_hole 5, template_var 1)))
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 1),
            template_app (template_hole 5, template_var 1)),
          template_hole 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2))),
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)))),
         template_hole 2))),
    ("Poly_Mod.monic_factorization_unique_mset",
     "[| \<Prod>\<^sub># ?P = \<Prod>\<^sub># ?Q;
         set_mset ?P <= {q. irreducible q & monic q};
         set_mset ?Q <= {q. irreducible q & monic q} |]
      ==> ?P = ?Q",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 1),
          template_app (template_hole 10, template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 8, template_var 1),
          template_app (template_hole 7, t_empty)),
        template_inequation
         (less_equals, template_app (template_hole 8, template_var 0),
          template_app (template_hole 7, t_empty))],
       template_equation (template_var 1, template_var 0)))]
