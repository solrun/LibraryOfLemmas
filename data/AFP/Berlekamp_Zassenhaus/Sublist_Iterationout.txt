Loading theory "Draft.Sublist_Iteration" (required by "Draft.Sublist_IterationTemplates")
Loading theory "Draft.Templates" (required by "Draft.Sublist_IterationTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.074s elapsed time, 0.176s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Sublist_IterationTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.574s elapsed time, 1.171s cpu time, 0.172s GC time
locale subseqs_impl
  fixes f :: "'a => 'b => 'b"
    and sl_impl :: "('a, 'b, 'state) subseqs_impl"
locale correct_subseqs_impl
  fixes f :: "'a => 'b => 'b"
    and sl_impl :: "('a, 'b, 'state) subseqs_impl"
    and invariant :: "'b => 'a list => nat => 'state => bool"
  assumes "correct_subseqs_impl f sl_impl invariant"
Found termination order:
  "(%p. size (fst (snd (snd (snd p))))) <*mlex*>
   (%p. length (fst (snd (snd p)))) <*mlex*> {}"
locale subseqs_foldr_impl
  fixes f :: "'a => 'b => 'b"
    and impl :: "('a, 'b, 'state) subseqs_foldr_impl"
locale correct_subseqs_foldr_impl
  fixes f :: "'a => 'b => 'b"
    and impl :: "('a, 'b, 'state) subseqs_foldr_impl"
    and invariant :: "'b => 'a list => nat => 'state => bool"
  assumes "correct_subseqs_foldr_impl f impl invariant"
locale my_subseqs
  fixes f :: "'a => 'b => 'b"
Found termination order:
  "case_sum (%p. size_list (%p. size (fst p)) (snd (snd p)))
    (%p. size_list (%p. size (fst p)) (fst (snd (snd p)))) <*mlex*>
   case_sum (%x. 0) (%x. Suc 0) <*mlex*>
   case_sum (%p. size_list (%p. size (fst p)) (snd (snd p)))
    (%p. size_list size (snd (snd (snd (snd p))))) <*mlex*>
   {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Sublist_Iteration"
### 3.413s elapsed time, 4.535s cpu time, 0.879s GC time
Loading theory "Draft.Sublist_IterationTemplates"
val templateLemmas =
   [("Sublist_Iteration.IArray_sub", "(!!) ?as = (!) (IArray.list_of ?as)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Sublist_Iteration.subseq_of_length0",
     "subseq_of_length 0 ?xs ?ys = (?ys = [])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_hole 2),
                template_var 1),
              template_var 0)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("Sublist_Iteration.subseqs_map",
     "subseqs (map ?f ?xs) = map (map ?f) (subseqs ?xs)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Sublist_Iteration.subseq_of_lengthD",
     "subseq_of_length ?n ?xs ?ys ==> length ?ys = ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 2))),
    ("Sublist_Iteration.subseq_of_lengthD",
     "subseq_of_length ?n ?xs ?ys ==> ?ys : set (subseqs ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)))
           ))),
    ("Sublist_Iteration.subseq_of_length_Nil",
     "subseq_of_length ?n [] ?ys = (?n = 0 & ?ys = [])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_hole 4),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_hole 4))
           ))),
    ("Sublist_Iteration.singleton_mem_set_subseqs",
     "([?x] : set (subseqs ?xs)) = (?x : set ?xs)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_hole 4)),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Sublist_Iteration.subseqs_of_indices",
     "map (map ((!) ?xs)) (subseqs [0..<length ?xs]) = subseqs ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 0))),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app (template_hole 1, template_var 0)))),
       template_app (template_hole 0, template_var 0))),
    ("Sublist_Iteration.subseqs_subset",
     "?ys : set (subseqs ?xs) ==> set ?ys <= set ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Sublist_Iteration.mem_snd_map",
     "(EX x. (x, ?y) : ?S) = (?y : snd ` ?S)",
     template_equation
      (template_app (template_hole 5, t_empty),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Sublist_Iteration.subseqs_Cons",
     "subseqs (?x # ?xs) = map ((#) ?x) (subseqs ?xs) @ subseqs ?xs",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 1)),
             template_app (template_hole 3, template_var 0))),
         template_app (template_hole 3, template_var 0)))),
    ("Sublist_Iteration.Cons_mem_set_subseqsD",
     "?y # ?ys : set (subseqs ?xs) ==> ?y : set ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Sublist_Iteration.mem_set_subseqs_append",
     "?xs : set (subseqs ?ys) ==> ?xs : set (subseqs (?zs @ ?ys))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1))))
           ))),
    ("Sublist_Iteration.subseqs_of_subseq",
     "?ys : set (subseqs ?xs) ==> set (subseqs ?ys) <= set (subseqs ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))))),
    ("Sublist_Iteration.sorted_subseqs_sorted",
     "[| sorted ?xs; ?ys : set (subseqs ?xs) |] ==> sorted ?ys",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 0)
           ))),
    ("Sublist_Iteration.subseq_of_lengthI",
     "[| ?ys : set (subseqs ?xs); length ?ys = ?n |]
      ==> subseq_of_length ?n ?xs ?ys",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)))
            ),
        template_equation
         (template_app (template_hole 1, template_var 2), template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1),
             template_var 2)
           ))),
    ("Sublist_Iteration.filter_upt",
     "[| ?l <= ?m; ?m < ?n |] ==> filter ((<=) ?m) [?l..<?n] = [?m..<?n]",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 4, template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Sublist_Iteration.upt_append",
     "[| ?i < ?j; ?j < ?k |] ==> [?i..<?j] @ [?j..<?k] = [?i..<?k]",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Sublist_Iteration.Cons_mem_set_subseqs_append",
     "[| ?x : set ?ys; ?xs : set (subseqs ?zs) |]
      ==> ?x # ?xs : set (subseqs (?ys @ ?zs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0))))
           ))),
    ("Sublist_Iteration.subseqs_of_length_of_indices",
     "{ys. subseq_of_length ?n ?xs ys} =
      {map ((!) ?xs) is |is. subseq_of_length ?n [0..<length ?xs] is}",
     template_equation
      (template_app (template_hole 10, t_empty),
       template_app (template_hole 10, t_empty))),
    ("Sublist_Iteration.Cons_mem_set_subseqs_sorted",
     "[| sorted ?xs; ?y # ?ys : set (subseqs ?xs) |]
      ==> ?y # ?ys : set (subseqs (filter ((<=) ?y) ?xs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0)),
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, t_empty),
                   template_var 2))))
           ))),
    ("Sublist_Iteration.subseqs_of_length_Suc_Cons",
     "{ys. subseq_of_length (Suc ?n) (?x # ?xs) ys} =
      (#) ?x ` {ys. subseq_of_length ?n ?xs ys} Un
      {ys. subseq_of_length (Suc ?n) ?xs ys}",
     template_equation
      (template_app (template_hole 5, t_empty),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 1)),
             template_app (template_hole 5, t_empty))),
         template_app (template_hole 5, t_empty)))),
    ("Sublist_Iteration.Cons_mem_set_subseqs_Cons",
     "(?y # ?ys : set (subseqs (?x # ?xs))) =
      (?y = ?x & ?ys : set (subseqs ?xs) | ?y # ?ys : set (subseqs ?xs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_app
               (template_hole 4,
                template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 5, template_var 1),
                    template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 0))))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 3),
                   template_var 2)),
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 0))))
           ))),
    ("Sublist_Iteration.basic_subseqs_impl",
     "(!!x y z. ?f x (?f y z) = ?f y (?f x z)) ==>
      correct_subseqs_impl ?f (basic_subseqs_impl ?f)
       (%a xs n. (=) (a, xs, n))",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 0),
               template_app (template_hole 3, template_var 0)),
             t_empty)
           ))),
    ("Sublist_Iteration.subseq_of_length_Suc_upt",
     "subseq_of_length (Suc ?n) [0..<?m] ?xs =
      (if ?n = 0 then length ?xs = Suc 0 & hd ?xs < ?m
       else hd ?xs < hd (tl ?xs) & subseq_of_length ?n [0..<?m] (tl ?xs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_var 2)),
                template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_hole 7)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app (template_hole 3, template_var 0)),
                     template_app (template_hole 9, template_hole 7))),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 0)),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 0)),
                   template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 0)))),
               template_app
                (template_app
                  (template_app (template_hole 10, template_var 2),
                   template_app
                    (template_app (template_hole 8, template_hole 7),
                     template_var 1)),
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("Sublist_Iteration.subseqs_length",
     "(!!x y z. ?f x (?f y z) = ?f y (?f x z)) ==>
      set (subseqs_length ?f ?a ?n ?xs) =
      {(foldr ?f ys ?a, ys) |ys. ys : set (subseqs ?xs) & length ys = ?n}",
     template_implication
      ([template_predicate (template_app (template_hole 17, t_empty))],
       template_equation
        (template_app
          (template_hole 12,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 11, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_app (template_hole 10, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Sublist_IterationTemplates"
### 0.418s elapsed time, 0.593s cpu time, 0.084s GC time
val it = (): unit
