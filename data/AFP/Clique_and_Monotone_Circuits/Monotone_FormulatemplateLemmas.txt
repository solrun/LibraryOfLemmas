   [("Monotone_Formula.finite_SUB", "finite (SUB ?\<phi>)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Monotone_Formula.cs_to_tf_formula",
     "cs (to_tf_formula ?\<phi>) <= cs ?\<phi>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Monotone_Formula.vars_to_tf_formula",
     "vars (to_tf_formula ?\<phi>) <= vars ?\<phi>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Monotone_Formula.eval_to_tf_formula",
     "eval ?\<theta> (to_tf_formula ?\<phi>) = eval ?\<theta> ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Monotone_Formula.SUB_to_tf_formula",
     "SUB (to_tf_formula ?\<phi>) <= to_tf_formula ` SUB ?\<phi>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_hole 1),
         template_app (template_hole 2, template_var 0)))),
    ("Monotone_Formula.to_tf_formula",
     "to_tf_formula ?\<phi> ~= TRUE ==>
      to_tf_formula ?\<phi> : tf_mformula",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 3, template_var 0)),
             template_hole 0)
           ))),
    ("Monotone_Formula.eval_vars",
     "(!!x. x : vars ?\<phi> ==> ?\<theta>1.0 x = ?\<theta>2.0 x) ==>
      eval ?\<theta>1.0 ?\<phi> = eval ?\<theta>2.0 ?\<phi>",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Monotone_Formula.to_tf_mformula",
     "~ eval ?\<theta> ?\<phi> ==>
      EX \<psi>:tf_mformula.
         (ALL \<theta>. eval \<theta> ?\<phi> = eval \<theta> \<psi>) &
         vars \<psi> <= vars ?\<phi> & cs \<psi> <= cs ?\<phi>",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 9, template_var 1),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 8, template_hole 7), t_empty)
           )))]
