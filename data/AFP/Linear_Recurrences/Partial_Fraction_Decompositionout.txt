Loading theory "HOL-Library.Stream" (required by "Draft.Partial_Fraction_DecompositionTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Partial_Fraction_DecompositionTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Partial_Fraction_DecompositionTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "Draft.Linear_Recurrences_Misc" (required by "Draft.Partial_Fraction_DecompositionTemplates" via "Draft.Partial_Fraction_Decomposition")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.133s elapsed time, 0.533s cpu time, 0.053s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Partial_Fraction_DecompositionTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
### theory "Draft.Linear_Recurrences_Misc"
### 0.281s elapsed time, 1.125s cpu time, 0.053s GC time
Loading theory "Draft.Partial_Fraction_Decomposition" (required by "Draft.Partial_Fraction_DecompositionTemplates")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.858s elapsed time, 3.333s cpu time, 0.362s GC time
### theory "HOL-Library.BigO"
### 0.749s elapsed time, 2.893s cpu time, 0.309s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  decompose_aux :: "'a => 'a list => 'a list"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale pfd_homomorphism
  fixes lift :: "'a => 'b"
  assumes "pfd_homomorphism lift"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Partial_Fraction_Decomposition"
### 1.323s elapsed time, 3.987s cpu time, 0.934s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.895s elapsed time, 5.456s cpu time, 1.043s GC time
Loading theory "Draft.Templates" (required by "Draft.Partial_Fraction_DecompositionTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.050s elapsed time, 0.066s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Partial_Fraction_DecompositionTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.470s elapsed time, 0.481s cpu time, 0.000s GC time
Loading theory "Draft.Partial_Fraction_DecompositionTemplates"
val templateLemmas =
   [("Partial_Fraction_Decomposition.length_decompose",
     "length (decompose ?x ?ys) = length ?ys",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Partial_Fraction_Decomposition.length_pfd1",
     "length (snd (partial_fraction_decomposition ?x ?ys)) = length ?ys",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app (template_hole 0, template_var 0))),
    ("Partial_Fraction_Decomposition.length_normalise_decomp",
     "length (snd (normalise_decomp ?x ?y ?n)) = ?n",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))),
       template_var 0)),
    ("Partial_Fraction_Decomposition.normalise_decomp_poly_code",
     "normalise_decomp_poly ?x ?y 0 = (?x, [])",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 1), template_hole 0))),
    ("Partial_Fraction_Decomposition.decompose_code",
     "decompose ?x ?ys =
      decompose' ?x ?ys (tl (rev (decompose_aux (1::?'a) (rev ?ys))))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app (template_hole 4, template_var 1), template_var 0),
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_app (template_hole 2, template_var 0))))))),
    ("Partial_Fraction_Decomposition.const_polyI",
     "degree ?p = 0 ==> [:coeff ?p 0:] = ?p",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 0), template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 4)),
           template_hole 0),
         template_var 0))),
    ("Partial_Fraction_Decomposition.length_pfd2",
     "?i < length ?ys ==>
      length (snd (partial_fraction_decomposition ?x ?ys) ! ?i) =
      snd (?ys ! ?i) + 1",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 9, template_var 1))],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_var 1))),
             template_var 2)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2))),
           template_hole 0)))),
    ("Partial_Fraction_Decomposition.fst_poly_pfd_simple",
     "fst (poly_pfd_simple ?x ?cs) =
      fst (partial_fraction_decomposition ?x
            (map (%(c, n). ([:1::?'a, - c:], n)) ?cs))",
     template_equation
      (template_app
        (template_hole 10,
         template_app
          (template_app (template_hole 9, template_var 1), template_var 0)),
       template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, template_var 1),
           template_app
            (template_app
              (template_hole 6, template_app (template_hole 5, t_empty)),
             template_var 0))))),
    ("Partial_Fraction_Decomposition.size_normalise_decomp",
     "[| ?a : set (snd (normalise_decomp ?x ?y ?n)); ?y ~= (0::?'a) |]
      ==> euclidean_size ?a < euclidean_size ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app
               (template_hole 7,
                template_app
                 (template_hole 6,
                  template_app
                   (template_app
                     (template_app (template_hole 5, template_var 2),
                      template_var 1),
                    template_var 0))))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 3),
         template_app (template_hole 0, template_var 1)))),
    ("Partial_Fraction_Decomposition.normalise_decomp_poly_code",
     "normalise_decomp_poly ?x ?y (Suc ?n) =
      (let (x', r) = divmod_field_poly ?x ?y;
           (z, rs) = normalise_decomp_poly x' ?y ?n
       in (z, r # rs))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 8, template_var 2), template_var 1),
         template_app (template_hole 7, template_var 0)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_app (template_hole 4, t_empty)))),
    ("Partial_Fraction_Decomposition.snd_poly_pfd_simple",
     "map (map (%c. [:c:])) (snd (poly_pfd_simple ?x ?cs)) =
      snd (partial_fraction_decomposition ?x
            (map (%(c, n). ([:1::?'a, - c:], n)) ?cs))",
     template_equation
      (template_app
        (template_app
          (template_hole 12, template_app (template_hole 11, t_empty)),
         template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 1),
             template_var 0))),
       template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app
              (template_hole 4, template_app (template_hole 3, t_empty)),
             template_var 0))))),
    ("Partial_Fraction_Decomposition.decompose_rec",
     "?ys ~= [] ==>
      decompose ?x (?y # ?ys) =
      (case bezout_coefficients ?y (prod_list ?ys) of
       (a, b) => b * ?x # decompose (a * ?x) ?ys)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 6))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 2)))))),
    ("Partial_Fraction_Decomposition.poly_pfd_simple",
     "partial_fraction_decomposition ?x
       (map (%(c, n). ([:1::?'a, - c:], n)) ?cs) =
      (fst (poly_pfd_simple ?x ?cs),
       map (map (%c. [:c:])) (snd (poly_pfd_simple ?x ?cs)))",
     template_equation
      (template_app
        (template_app (template_hole 13, template_var 1),
         template_app
          (template_app
            (template_hole 12, template_app (template_hole 11, t_empty)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 2, template_app (template_hole 1, t_empty)),
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)))))),
    ("Partial_Fraction_Decomposition.size_partial_fraction_decomposition",
     "[| ?i < length ?xs; fst (?xs ! ?i) ~= (0::?'a);
         ?x : set (snd (partial_fraction_decomposition ?y ?xs) ! ?i) |]
      ==> euclidean_size ?x < euclidean_size (fst (?xs ! ?i))",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 11, template_var 2)),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 3)),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_app (template_hole 1, template_var 0),
                        template_var 2))),
                  template_var 3)))
            )],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 1),
         template_app
          (template_hole 0,
           template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_var 2),
               template_var 3)))))),
    ("Partial_Fraction_Decomposition.divmod_field_poly_code",
     "divmod_field_poly ?p ?q =
      (let cg = coeffs ?q
       in if cg = [] then (0, ?p)
          else let cf = coeffs ?p; ilc = inverse (last cg);
                   ch = map ((*) ilc) cg;
                   (q, r) =
                     divmod_poly_one_main_list [] (rev cf) (rev ch)
                      (1 + length cf - length cg)
               in (poly_of_list (map ((*) ilc) q), poly_of_list (rev r)))",
     template_equation
      (template_app
        (template_app (template_hole 21, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 20,
           template_app (template_hole 19, template_var 0)),
         t_empty))),
    ("Partial_Fraction_Decomposition.poly_pfd_simple_code",
     "poly_pfd_simple ?x ?cs =
      (if ?cs = [] then (?x, [])
       else let zs = zip_with
                      (%(c, n) decomp.
                          normalise_decomp_poly decomp [:1::?'a, - c:]
                           (n + 1))
                      ?cs
                      (decompose ?x
                        (map (%(c, n). [:1::?'a, - c:] ^ Suc n) ?cs))
            in (sum_list (map fst zs),
                map (map (%p. coeff p 0) o snd) zs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 29, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 28,
                 template_app
                  (template_app (template_hole 27, template_var 0),
                   template_hole 26)),
               template_app
                (template_app (template_hole 25, template_var 1),
                 template_hole 24)),
             template_app
              (template_app
                (template_hole 23,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 22,
                       template_app (template_hole 21, t_empty)),
                     template_var 0),
                   template_app
                    (template_app (template_hole 13, template_var 1),
                     template_app
                      (template_app
                        (template_hole 12,
                         template_app (template_hole 11, t_empty)),
                       template_var 0)))),
               t_empty))
           )))]:
   (string * thm * template) list
### theory "Draft.Partial_Fraction_DecompositionTemplates"
### 0.565s elapsed time, 0.703s cpu time, 0.064s GC time
val it = (): unit
