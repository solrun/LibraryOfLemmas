Loading theory "HOL-Library.Stream" (required by "Draft.Linear_Recurrences_MiscTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Linear_Recurrences_Misc" (required by "Draft.Linear_Recurrences_MiscTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Linear_Recurrences_MiscTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Linear_Recurrences_MiscTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.151s elapsed time, 0.616s cpu time, 0.050s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Linear_Recurrences_MiscTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
### theory "Draft.Linear_Recurrences_Misc"
### 0.343s elapsed time, 1.351s cpu time, 0.146s GC time
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.817s elapsed time, 2.779s cpu time, 0.292s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.735s elapsed time, 2.307s cpu time, 0.242s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.764s elapsed time, 4.244s cpu time, 0.895s GC time
Loading theory "Draft.Templates" (required by "Draft.Linear_Recurrences_MiscTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.050s elapsed time, 0.070s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Linear_Recurrences_MiscTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.512s elapsed time, 0.574s cpu time, 0.074s GC time
Loading theory "Draft.Linear_Recurrences_MiscTemplates"
val templateLemmas =
   [("Linear_Recurrences_Misc.unit_factor_field", "unit_factor ?x = ?x",
     template_equation
      (template_app (template_hole 0, template_var 0), template_var 0)),
    ("Linear_Recurrences_Misc.zip_with_Pair",
     "zip_with Pair ?xs ?ys = zip ?xs ?ys",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Linear_Recurrences_Misc.normalize_field",
     "normalize ?x = (if ?x = (0::?'a) then 0::?'a else (1::?'a))",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_hole 1)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Linear_Recurrences_Misc.length_zip_with",
     "length (zip_with ?f ?xs ?ys) = min (length ?xs) (length ?ys)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Linear_Recurrences_Misc.zip_with_swap",
     "zip_with (%x y. ?f y x) ?xs ?ys = zip_with ?f ?ys ?xs",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, t_empty), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("Linear_Recurrences_Misc.zip_with_altdef",
     "zip_with ?f ?xs ?ys = map2 ?f ?xs ?ys",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Linear_Recurrences_Misc.drop_zip_with",
     "drop ?n (zip_with ?f ?xs ?ys) =
      zip_with ?f (drop ?n ?xs) (drop ?n ?ys)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 0)))),
    ("Linear_Recurrences_Misc.take_zip_with",
     "take ?n (zip_with ?f ?xs ?ys) =
      zip_with ?f (take ?n ?xs) (take ?n ?ys)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 0)))),
    ("Linear_Recurrences_Misc.zip_with_map_right",
     "zip_with ?f ?xs (map ?g ?ys) = zip_with (%x y. ?f x (?g y)) ?xs ?ys",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, t_empty), template_var 2),
         template_var 0))),
    ("Linear_Recurrences_Misc.zip_with_map_left",
     "zip_with ?f (map ?g ?xs) ?ys = zip_with (%x. ?f (?g x)) ?xs ?ys",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, t_empty), template_var 1),
         template_var 0))),
    ("Linear_Recurrences_Misc.map_zip_with",
     "map ?f (zip_with ?g ?xs ?ys) = zip_with (%x y. ?f (?g x y)) ?xs ?ys",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, t_empty), template_var 1),
         template_var 0))),
    ("Linear_Recurrences_Misc.set_zip_with",
     "set (zip_with ?f ?xs ?ys) = (%(x, y). ?f x y) ` set (zip ?xs ?ys)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, t_empty)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Linear_Recurrences_Misc.coprime_linear_poly",
     "?c ~= ?c' ==> coprime [:?c, 1::?'a:] [:?c', 1::?'a:]",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_hole 0))),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_hole 0)))
           ))),
    ("Linear_Recurrences_Misc.card_poly_roots_bound",
     "?p ~= 0 ==> card {x. poly ?p x = (0::?'a)} <= degree ?p",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 5, template_app (template_hole 4, t_empty)),
         template_app (template_hole 0, template_var 0)))),
    ("Linear_Recurrences_Misc.zip_with_map",
     "zip_with ?f (map ?g ?xs) (map ?h ?ys) =
      zip_with (%x y. ?f (?g x) (?h y)) ?xs ?ys",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, t_empty), template_var 2),
         template_var 0))),
    ("Linear_Recurrences_Misc.zip_altdef",
     "zip ?xs ?ys =
      map (%i. (?xs ! i, ?ys ! i)) [0..<min (length ?xs) (length ?ys)]",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 8, t_empty),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0)))))),
    ("Linear_Recurrences_Misc.zip_with_altdef'",
     "zip_with ?f ?xs ?ys =
      map (%i. ?f (?xs ! i) (?ys ! i)) [0..<min (length ?xs) (length ?ys)]",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 8, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 7, t_empty),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0)))))),
    ("Linear_Recurrences_Misc.complex_poly_decompose",
     "smult (lead_coeff ?p)
       (PROD z:{z. poly ?p z = 0}. [:- z, 1:] ^ order z ?p) =
      ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 13,
           template_app
            (template_app (template_hole 12, template_var 0),
             template_app (template_hole 11, template_var 0))),
         template_app
          (template_app (template_hole 10, t_empty),
           template_app (template_hole 3, t_empty))),
       template_var 0)),
    ("Linear_Recurrences_Misc.zip_with_nth",
     "[| ?n < length ?xs; ?n < length ?ys |]
      ==> zip_with ?f ?xs ?ys ! ?n = ?f (?xs ! ?n) (?ys ! ?n)",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 6, template_var 2)),
        template_inequation
         (less_than, template_var 3,
          template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 2),
               template_var 1)),
           template_var 3),
         template_app
          (template_app
            (template_var 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 3)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3))))),
    ("Linear_Recurrences_Misc.coprime_linear_poly'",
     "[| ?c ~= ?c'; ?c ~= (0::?'a); ?c' ~= (0::?'a) |]
      ==> coprime [:1::?'a, ?c:] [:1::?'a, ?c':]",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0)),
        template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 0))),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 0)))
           ))),
    ("Linear_Recurrences_Misc.poly_eqI_degree",
     "[| !!x. x : ?A ==> poly ?p x = poly ?q x; degree ?p < card ?A;
         degree ?q < card ?A |]
      ==> ?p = ?q",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_inequation
         (less_than, template_app (template_hole 2, template_var 1),
          template_app (template_hole 1, template_var 2)),
        template_inequation
         (less_than, template_app (template_hole 2, template_var 0),
          template_app (template_hole 1, template_var 2))],
       template_equation (template_var 1, template_var 0))),
    ("Linear_Recurrences_Misc.poly_root_order_induct",
     "[| ?P 0; !!p. (!!x. poly p x ~= (0::?'a)) ==> ?P p;
         !!p x n.
            [| 0 < n; poly p x ~= (0::?'a); ?P p |]
            ==> ?P ([:- x, 1::?'a:] ^ n * p) |]
      ==> ?P ?p",
     template_implication
      ([template_predicate
         (template_app (template_var 1, template_hole 14)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate
        (template_app (template_var 1, template_var 0))))]:
   (string * thm * template) list
### theory "Draft.Linear_Recurrences_MiscTemplates"
### 0.515s elapsed time, 0.647s cpu time, 0.076s GC time
val it = (): unit
