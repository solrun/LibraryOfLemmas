   [("Linear_Inhomogenous_Recurrences.polyexp_fps",
     "Abs_fps (eval_polyexp ?xs) = polyexp_fps ?xs",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Linear_Inhomogenous_Recurrences.polyexp_ratfps",
     "fps_of_ratfps (polyexp_ratfps ?xs) = polyexp_fps ?xs",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Linear_Inhomogenous_Recurrences.lir_fps_correct",
     "linear_inhomogenous_recurrence ?f (eval_polyexp ?g) ?cs ?fs ==>
      map_option fps_of_ratfps (lir_fps ?cs ?fs ?g) = Some (Abs_fps ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 3),
                  template_app (template_hole 6, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0),
             template_var 2)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 3))))),
    ("Linear_Inhomogenous_Recurrences.eval_polyexp_Cons",
     "eval_polyexp (?x # ?xs) =
      (%n. (case ?x of (a, k, b) => a * of_nat n ^ k * b ^ n) +
           eval_polyexp ?xs n)",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       t_empty)),
    ("Linear_Inhomogenous_Recurrences.polyexp_fps_Cons",
     "polyexp_fps (?x # ?xs) =
      (case ?x of
       (a, k, b) =>
         fps_of_poly (smult a (fps_monom_poly b k)) /
         (1 - fps_const b * fps_X) ^ (k + 1)) +
      polyexp_fps ?xs",
     template_equation
      (template_app
        (template_hole 16,
         template_app
          (template_app (template_hole 15, template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 14,
           template_app
            (template_app (template_hole 13, t_empty), template_var 1)),
         template_app (template_hole 16, template_var 0)))),
    ("Linear_Inhomogenous_Recurrences.polyexp_ratfps_Cons",
     "polyexp_ratfps (?x # ?xs) =
      (case ?x of
       (a, k, b) =>
         ratfps_of_poly (smult a (fps_monom_poly b k)) /
         ratfps_of_poly ([:1::?'a, - b:] ^ (k + 1))) +
      polyexp_ratfps ?xs",
     template_equation
      (template_app
        (template_hole 15,
         template_app
          (template_app (template_hole 14, template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 13,
           template_app
            (template_app (template_hole 12, t_empty), template_var 1)),
         template_app (template_hole 15, template_var 0)))),
    ("Linear_Inhomogenous_Recurrences.lir_fps_numerator_code",
     "coeffs (lir_fps_numerator ?m ?cs ?f ?g) =
      (let N = length ?cs - 1
       in strip_while ((=) (0::?'a))
           (map (%k. (SUM i<=min N k. ?cs ! (N - i) * ?f (k - i)) - ?g k)
             [0..<N + ?m]))",
     template_equation
      (template_app
        (template_hole 18,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 17, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 16,
           template_app
            (template_app
              (template_hole 15,
               template_app (template_hole 14, template_var 2)),
             template_hole 13)),
         t_empty))),
    ("Linear_Inhomogenous_Recurrences.lir_fps",
     "[| ?cs ~= [];
         !!n. ?m <= n ==>
              (SUM k<=length ?cs - 1. ?cs ! k * ?f (n + k)) =
              ?g (n + (length ?cs - 1));
         last ?cs ~= (0::?'a) |]
      ==> Abs_fps ?f =
          (fps_of_poly (lir_fps_numerator ?m ?cs ?f ?g) + Abs_fps ?g) /
          fps_of_poly (lr_fps_denominator ?cs)",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 20)),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_negation
         (
            template_equation
             (template_app (template_hole 8, template_var 3),
              template_hole 7)
            )],
       template_equation
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 1, template_var 2),
                         template_var 3),
                       template_var 1),
                     template_var 0))),
               template_app (template_hole 5, template_var 0))),
           template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 3)))))),
    ("Linear_Inhomogenous_Recurrences.lir_fps_aux",
     "[| !!n. ?m <= n ==> (SUM k<=?N. ?c k * ?f (n + k)) = ?g (n + ?N);
         ?c ?N ~= (0::?'a) |]
      ==> Abs_fps ?f =
          (fps_of_poly
            (Poly
              (map (%k. (SUM i<=min ?N k. ?c (?N - i) * ?f (k - i)) - ?g k)
                [0..<?N + ?m])) +
           Abs_fps ?g) /
          fps_of_poly (Poly (map (%k. ?c (?N - k)) [0..<Suc ?N]))",
     template_implication
      ([template_predicate (template_app (template_hole 22, t_empty)),
        template_negation
         (
            template_equation
             (template_app (template_var 3, template_var 1),
              template_hole 13)
            )],
       template_equation
        (template_app (template_hole 11, template_var 2),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_hole 8,
                   template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 6, t_empty),
                       template_app
                        (template_app (template_hole 2, template_hole 1),
                         template_app
                          (template_app (template_hole 16, template_var 1),
                           template_var 4)))))),
               template_app (template_hole 11, template_var 0))),
           template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, t_empty),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_app (template_hole 0, template_var 1)))))))))]
