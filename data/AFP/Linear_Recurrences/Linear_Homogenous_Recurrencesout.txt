Loading theory "HOL-Library.Stream" (required by "Draft.Linear_Homogenous_RecurrencesTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Pochhammer_Polynomials" (required by "Draft.Linear_Homogenous_RecurrencesTemplates" via "Draft.Linear_Homogenous_Recurrences" via "Draft.Rational_FPS_Solver")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Linear_Homogenous_RecurrencesTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Linear_Homogenous_RecurrencesTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.124s elapsed time, 0.507s cpu time, 0.055s GC time
Loading theory "Draft.Linear_Recurrences_Common" (required by "Draft.Linear_Homogenous_RecurrencesTemplates" via "Draft.Linear_Homogenous_Recurrences")
### theory "Draft.Linear_Recurrences_Common"
### 0.054s elapsed time, 0.223s cpu time, 0.000s GC time
Loading theory "Draft.Linear_Recurrences_Misc" (required by "Draft.Linear_Homogenous_RecurrencesTemplates" via "Draft.Linear_Homogenous_Recurrences" via "Draft.Rational_FPS_Solver" via "Draft.Partial_Fraction_Decomposition")
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
### theory "Draft.Linear_Recurrences_Misc"
### 0.267s elapsed time, 1.033s cpu time, 0.089s GC time
Loading theory "Draft.Factorizations" (required by "Draft.Linear_Homogenous_RecurrencesTemplates" via "Draft.Linear_Homogenous_Recurrences" via "Draft.Rational_FPS_Solver")
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### theory "Draft.Pochhammer_Polynomials"
### 0.474s elapsed time, 1.882s cpu time, 0.144s GC time
Loading theory "Draft.Partial_Fraction_Decomposition" (required by "Draft.Linear_Homogenous_RecurrencesTemplates" via "Draft.Linear_Homogenous_Recurrences" via "Draft.Rational_FPS_Solver")
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  left :: "'a tree => 'a tree"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  right :: "'a tree => 'a tree"
### theory "Draft.Factorizations"
### 0.173s elapsed time, 0.664s cpu time, 0.079s GC time
Loading theory "Draft.RatFPS" (required by "Draft.Linear_Homogenous_RecurrencesTemplates" via "Draft.Linear_Homogenous_Recurrences")
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### Generation of a parametrized correspondence relation failed.
### Reason:  No relator for the type "Polynomial.poly" found.
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
instantiation
  ratfps :: (field_gcd) idom
  uminus_ratfps == uminus :: 'a ratfps => 'a ratfps
  one_ratfps == one_class.one :: 'a ratfps
  times_ratfps == times :: 'a ratfps => 'a ratfps => 'a ratfps
  zero_ratfps == zero_class.zero :: 'a ratfps
  minus_ratfps == minus :: 'a ratfps => 'a ratfps => 'a ratfps
  plus_ratfps == plus :: 'a ratfps => 'a ratfps => 'a ratfps
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.962s elapsed time, 3.743s cpu time, 0.388s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Linear_Homogenous_RecurrencesTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  ratfps :: (field_gcd) inverse
  inverse_ratfps == inverse :: 'a ratfps => 'a ratfps
  divide_ratfps == divide :: 'a ratfps => 'a ratfps => 'a ratfps
Found termination order: "size <*mlex*> {}"
instantiation
  ratfps :: (equal) equal
  equal_ratfps == equal_class.equal :: 'a ratfps => 'a ratfps => bool
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  fps :: (equal) equal
  equal_fps == equal_class.equal :: 'a fps => 'a fps => bool
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
consts
  decompose_aux :: "'a => 'a list => 'a list"
instantiation
  ratfps :: (field_gcd) normalization_semidom
  normalize_ratfps == normalize :: 'a ratfps => 'a ratfps
  unit_factor_ratfps == unit_factor :: 'a ratfps => 'a ratfps
instantiation
  ratfps :: (field_gcd) semidom_modulo
  modulo_ratfps == modulo :: 'a ratfps => 'a ratfps => 'a ratfps
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
instantiation
  ratfps :: (field_gcd) euclidean_ring
  euclidean_size_ratfps == euclidean_size :: 'a ratfps => nat
instantiation
  ratfps :: (field_gcd) euclidean_ring_cancel
instantiation
  ratfps :: (field_gcd) euclidean_ring_gcd
  Gcd_ratfps == Gcd :: 'a ratfps set => 'a ratfps
  Lcm_ratfps == Lcm :: 'a ratfps set => 'a ratfps
  gcd_ratfps == gcd :: 'a ratfps => 'a ratfps => 'a ratfps
  lcm_ratfps == lcm :: 'a ratfps => 'a ratfps => 'a ratfps
locale pfd_homomorphism
  fixes lift :: "'a => 'b"
  assumes "pfd_homomorphism lift"
### theory "HOL-Library.BigO"
### 1.082s elapsed time, 4.039s cpu time, 0.876s GC time
### theory "Draft.Partial_Fraction_Decomposition"
### 1.651s elapsed time, 6.180s cpu time, 1.120s GC time
Loading theory "Draft.Rational_FPS_Solver" (required by "Draft.Linear_Homogenous_RecurrencesTemplates" via "Draft.Linear_Homogenous_Recurrences")
Found termination order: "size <*mlex*> {}"
instantiation
  ratfps :: ({field_gcd,random}) random
  random_ratfps == random_class.random ::
    natural
    => natural * natural => ('a ratfps * (unit => term)) * natural * natural
instantiation
  ratfps :: ({factorial_ring_gcd,field,exhaustive}) exhaustive
  exhaustive_ratfps == exhaustive_class.exhaustive ::
    ('a ratfps => (bool * term list) option)
    => natural => (bool * term list) option
instantiation
  ratfps :: ({field_gcd,full_exhaustive}) full_exhaustive
  full_exhaustive_ratfps == full_exhaustive_class.full_exhaustive ::
    ('a ratfps * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
### theory "HOL-Library.Tree"
### 2.582s elapsed time, 9.541s cpu time, 2.117s GC time
Loading theory "Draft.Templates" (required by "Draft.Linear_Homogenous_RecurrencesTemplates" via "Draft.ExtrEqs")
### theory "Draft.RatFPS"
### 1.978s elapsed time, 7.159s cpu time, 1.894s GC time
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.066s elapsed time, 0.184s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Linear_Homogenous_RecurrencesTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.587s elapsed time, 1.224s cpu time, 0.117s GC time
### theory "Draft.Rational_FPS_Solver"
### 1.246s elapsed time, 3.021s cpu time, 0.970s GC time
Loading theory "Draft.Linear_Homogenous_Recurrences" (required by "Draft.Linear_Homogenous_RecurrencesTemplates")
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
locale linear_homogenous_recurrence
  fixes f :: "nat => 'a"
    and cs :: "'a list"
    and fs :: "'a list"
  assumes "linear_homogenous_recurrence f cs fs"
### theory "Draft.Linear_Homogenous_Recurrences"
### 0.606s elapsed time, 0.661s cpu time, 0.078s GC time
Loading theory "Draft.Linear_Homogenous_RecurrencesTemplates"
val templateLemmas =
   [("Linear_Homogenous_Recurrences.lhr_fps_correct",
     "linear_homogenous_recurrence ?f ?cs ?fs ==>
      fps_of_ratfps (lhr_fps ?cs ?fs) = Abs_fps ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app (template_hole 0, template_var 2)))),
    ("Linear_Homogenous_Recurrences.solve_lhr_aux",
     "[| linear_homogenous_recurrence ?f ?cs ?fs;
         is_factorization_of ?fctrs (lr_fps_denominator' ?cs) |]
      ==> ?f =
          interp_ratfps_solution
           (solve_factored_ratfps'
             (lhr_fps_numerator (length ?fs + 1 - length ?cs) ?cs ((!) ?fs))
             ?fctrs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_app (template_hole 9, template_var 2))
            )],
       template_equation
        (template_var 3,
         template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app
                            (template_hole 3,
                             template_app
                              (template_hole 2, template_var 1)),
                           template_hole 1)),
                       template_app (template_hole 2, template_var 2))),
                   template_var 2),
                 template_app (template_hole 0, template_var 1))),
             template_var 0))))),
    ("Linear_Homogenous_Recurrences.lhr_fps_numerator_code",
     "coeffs (lhr_fps_numerator ?m ?cs ?f) =
      (let N = length ?cs - 1
       in strip_while ((=) (0::?'a))
           (map (%k. SUM i<=min N k. ?cs ! (N - i) * ?f (k - i))
             [0..<N + ?m]))",
     template_equation
      (template_app
        (template_hole 17,
         template_app
          (template_app
            (template_app (template_hole 16, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 15,
           template_app
            (template_app
              (template_hole 14,
               template_app (template_hole 13, template_var 1)),
             template_hole 12)),
         t_empty))),
    ("Linear_Homogenous_Recurrences.lhr_rec",
     "[| ?cs ~= []; last ?cs ~= (0::?'a); length ?cs - 1 <= length ?fs;
         length ?fs <= ?n |]
      ==> (SUM k<length ?cs.
           ?cs ! k * lhr ?cs ?fs (?n + 1 - length ?cs + k)) =
          (0::?'a)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 13)),
        template_negation
         (
            template_equation
             (template_app (template_hole 11, template_var 2),
              template_hole 10)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 2)),
            template_hole 6),
          template_app (template_hole 7, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 7, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 5, t_empty),
           template_app
            (template_hole 0,
             template_app (template_hole 7, template_var 2))),
         template_hole 10))),
    ("Linear_Homogenous_Recurrences.lhr_fps",
     "[| ?cs ~= [];
         !!n. ?m <= n ==>
              (SUM k<=length ?cs - 1. ?cs ! k * ?f (n + k)) = (0::?'a);
         last ?cs ~= (0::?'a) |]
      ==> Abs_fps ?f =
          fps_of_poly (lhr_fps_numerator ?m ?cs ?f) /
          fps_of_poly (lr_fps_denominator ?cs)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 19)),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_negation
         (
            template_equation
             (template_app (template_hole 6, template_var 2),
              template_hole 7)
            )],
       template_equation
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 2),
                 template_var 0))),
           template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 2)))))),
    ("Linear_Homogenous_Recurrences.lhr_fps_aux",
     "[| !!n. ?m <= n ==> (SUM k<=?N. ?c k * ?f (n + k)) = (0::?'a);
         ?c ?N ~= (0::?'a) |]
      ==> Abs_fps ?f =
          fps_of_poly
           (Poly
             (map (%k. SUM i<=min ?N k. ?c (?N - i) * ?f (k - i))
               [0..<?N + ?m])) /
          fps_of_poly (Poly (map (%k. ?c (?N - k)) [0..<Suc ?N]))",
     template_implication
      ([template_predicate (template_app (template_hole 20, t_empty)),
        template_negation
         (
            template_equation
             (template_app (template_var 2, template_var 0),
              template_hole 12)
            )],
       template_equation
        (template_app (template_hole 9, template_var 1),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, t_empty),
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_app
                      (template_app (template_hole 14, template_var 0),
                       template_var 3)))))),
           template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, t_empty),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_app (template_hole 0, template_var 0))))))))),
    ("Linear_Homogenous_Recurrences.lhrI",
     "[| ?cs ~= []; last ?cs ~= (0::?'a); length ?cs - 1 <= length ?fs;
         !!n. n < length ?fs ==> ?f n = ?fs ! n;
         !!n. length ?fs <= n ==>
              (SUM k<length ?cs. ?cs ! k * ?f (n + 1 - length ?cs + k)) =
              (0::?'a) |]
      ==> ?f ?n = lhr ?cs ?fs ?n",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 15)),
        template_negation
         (
            template_equation
             (template_app (template_hole 13, template_var 3),
              template_hole 12)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 3)),
            template_hole 8),
          template_app (template_hole 9, template_var 2)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app (template_var 1, template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 0))))]:
   (string * thm * template) list
### theory "Draft.Linear_Homogenous_RecurrencesTemplates"
### 0.637s elapsed time, 0.825s cpu time, 0.092s GC time
val it = (): unit
