   [("Partial_Fraction_Decomposition.length_decompose",
     "length (decompose ?x ?ys) = length ?ys",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Partial_Fraction_Decomposition.length_pfd1",
     "length (snd (partial_fraction_decomposition ?x ?ys)) = length ?ys",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app (template_hole 0, template_var 0))),
    ("Partial_Fraction_Decomposition.length_normalise_decomp",
     "length (snd (normalise_decomp ?x ?y ?n)) = ?n",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))),
       template_var 0)),
    ("Partial_Fraction_Decomposition.normalise_decomp_poly_code",
     "normalise_decomp_poly ?x ?y 0 = (?x, [])",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 1), template_hole 0))),
    ("Partial_Fraction_Decomposition.decompose_code",
     "decompose ?x ?ys =
      decompose' ?x ?ys (tl (rev (decompose_aux (1::?'a) (rev ?ys))))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app (template_hole 4, template_var 1), template_var 0),
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_app (template_hole 2, template_var 0))))))),
    ("Partial_Fraction_Decomposition.fst_poly_pfd_simple",
     "fst (poly_pfd_simple ?x ?cs) =
      fst (partial_fraction_decomposition ?x
            (map (%(c, n). ([:1::?'a, - c:], n)) ?cs))",
     template_equation
      (template_app
        (template_hole 10,
         template_app
          (template_app (template_hole 9, template_var 1), template_var 0)),
       template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, template_var 1),
           template_app
            (template_app
              (template_hole 6, template_app (template_hole 5, t_empty)),
             template_var 0))))),
    ("Partial_Fraction_Decomposition.normalise_decomp_poly_code",
     "normalise_decomp_poly ?x ?y (Suc ?n) =
      (let (x', r) = divmod_field_poly ?x ?y;
           (z, rs) = normalise_decomp_poly x' ?y ?n
       in (z, r # rs))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 8, template_var 2), template_var 1),
         template_app (template_hole 7, template_var 0)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_app (template_hole 4, t_empty)))),
    ("Partial_Fraction_Decomposition.snd_poly_pfd_simple",
     "map (map (%c. [:c:])) (snd (poly_pfd_simple ?x ?cs)) =
      snd (partial_fraction_decomposition ?x
            (map (%(c, n). ([:1::?'a, - c:], n)) ?cs))",
     template_equation
      (template_app
        (template_app
          (template_hole 12, template_app (template_hole 11, t_empty)),
         template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 1),
             template_var 0))),
       template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app
              (template_hole 4, template_app (template_hole 3, t_empty)),
             template_var 0))))),
    ("Partial_Fraction_Decomposition.poly_pfd_simple",
     "partial_fraction_decomposition ?x
       (map (%(c, n). ([:1::?'a, - c:], n)) ?cs) =
      (fst (poly_pfd_simple ?x ?cs),
       map (map (%c. [:c:])) (snd (poly_pfd_simple ?x ?cs)))",
     template_equation
      (template_app
        (template_app (template_hole 13, template_var 1),
         template_app
          (template_app
            (template_hole 12, template_app (template_hole 11, t_empty)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 2, template_app (template_hole 1, t_empty)),
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)))))),
    ("Partial_Fraction_Decomposition.divmod_field_poly_code",
     "divmod_field_poly ?p ?q =
      (let cg = coeffs ?q
       in if cg = [] then (0, ?p)
          else let cf = coeffs ?p; ilc = inverse (last cg);
                   ch = map ((*) ilc) cg;
                   (q, r) =
                     divmod_poly_one_main_list [] (rev cf) (rev ch)
                      (1 + length cf - length cg)
               in (poly_of_list (map ((*) ilc) q), poly_of_list (rev r)))",
     template_equation
      (template_app
        (template_app (template_hole 21, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 20,
           template_app (template_hole 19, template_var 0)),
         t_empty))),
    ("Partial_Fraction_Decomposition.poly_pfd_simple_code",
     "poly_pfd_simple ?x ?cs =
      (if ?cs = [] then (?x, [])
       else let zs = zip_with
                      (%(c, n) decomp.
                          normalise_decomp_poly decomp [:1::?'a, - c:]
                           (n + 1))
                      ?cs
                      (decompose ?x
                        (map (%(c, n). [:1::?'a, - c:] ^ Suc n) ?cs))
            in (sum_list (map fst zs),
                map (map (%p. coeff p 0) o snd) zs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 29, template_var 1),
              template_var 0)
            )],
       template_dunno))]
