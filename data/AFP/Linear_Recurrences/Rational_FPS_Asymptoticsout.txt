Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Rational_FPS_AsymptoticsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.Rational_FPS_AsymptoticsTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Tree" (required by "Draft.Rational_FPS_AsymptoticsTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "Draft.Pochhammer_Polynomials" (required by "Draft.Rational_FPS_AsymptoticsTemplates" via "Draft.Rational_FPS_Asymptotics" via "Draft.Linear_Homogenous_Recurrences" via "Draft.Rational_FPS_Solver")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.129s elapsed time, 0.522s cpu time, 0.063s GC time
Loading theory "Draft.Eulerian_Polynomials" (required by "Draft.Rational_FPS_AsymptoticsTemplates" via "Draft.Rational_FPS_Asymptotics" via "Draft.Linear_Inhomogenous_Recurrences")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### theory "Draft.Pochhammer_Polynomials"
### 0.548s elapsed time, 2.160s cpu time, 0.258s GC time
Loading theory "Draft.Linear_Recurrences_Common" (required by "Draft.Rational_FPS_AsymptoticsTemplates" via "Draft.Rational_FPS_Asymptotics" via "Draft.Linear_Homogenous_Recurrences")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### theory "Draft.Linear_Recurrences_Common"
### 0.064s elapsed time, 0.256s cpu time, 0.000s GC time
Loading theory "Draft.Linear_Recurrences_Misc" (required by "Draft.Rational_FPS_AsymptoticsTemplates" via "Draft.Rational_FPS_Asymptotics" via "Draft.Linear_Homogenous_Recurrences" via "Draft.Rational_FPS_Solver" via "Draft.Partial_Fraction_Decomposition")
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  eulerian_poly :: "nat => 'a poly"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  fps_monom_poly_aux :: "'a => nat => 'a poly"
### theory "Draft.Eulerian_Polynomials"
### 0.682s elapsed time, 2.666s cpu time, 0.305s GC time
Loading theory "Draft.RatFPS" (required by "Draft.Rational_FPS_AsymptoticsTemplates" via "Draft.Rational_FPS_Asymptotics" via "Draft.Linear_Homogenous_Recurrences")
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### theory "Draft.Linear_Recurrences_Misc"
### 0.285s elapsed time, 1.099s cpu time, 0.217s GC time
Loading theory "Draft.Factorizations" (required by "Draft.Rational_FPS_AsymptoticsTemplates" via "Draft.Rational_FPS_Asymptotics" via "Draft.Linear_Homogenous_Recurrences" via "Draft.Rational_FPS_Solver")
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.928s elapsed time, 3.626s cpu time, 0.475s GC time
Loading theory "Draft.Partial_Fraction_Decomposition" (required by "Draft.Rational_FPS_AsymptoticsTemplates" via "Draft.Rational_FPS_Asymptotics" via "Draft.Linear_Homogenous_Recurrences" via "Draft.Rational_FPS_Solver")
### Generation of a parametrized correspondence relation failed.
### Reason:  No relator for the type "Polynomial.poly" found.
instantiation
  ratfps :: (field_gcd) idom
  uminus_ratfps == uminus :: 'a ratfps => 'a ratfps
  one_ratfps == one_class.one :: 'a ratfps
  times_ratfps == times :: 'a ratfps => 'a ratfps => 'a ratfps
  zero_ratfps == zero_class.zero :: 'a ratfps
  minus_ratfps == minus :: 'a ratfps => 'a ratfps => 'a ratfps
  plus_ratfps == plus :: 'a ratfps => 'a ratfps => 'a ratfps
Found termination order: "size <*mlex*> {}"
### theory "Draft.Factorizations"
### 0.304s elapsed time, 1.099s cpu time, 0.547s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Rational_FPS_AsymptoticsTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  ratfps :: (field_gcd) inverse
  inverse_ratfps == inverse :: 'a ratfps => 'a ratfps
  divide_ratfps == divide :: 'a ratfps => 'a ratfps => 'a ratfps
instantiation
  ratfps :: (equal) equal
  equal_ratfps == equal_class.equal :: 'a ratfps => 'a ratfps => bool
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  fps :: (equal) equal
  equal_fps == equal_class.equal :: 'a fps => 'a fps => bool
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
instantiation
  ratfps :: (field_gcd) normalization_semidom
  normalize_ratfps == normalize :: 'a ratfps => 'a ratfps
  unit_factor_ratfps == unit_factor :: 'a ratfps => 'a ratfps
instantiation
  ratfps :: (field_gcd) semidom_modulo
  modulo_ratfps == modulo :: 'a ratfps => 'a ratfps => 'a ratfps
Found termination order: "size <*mlex*> {}"
instantiation
  ratfps :: (field_gcd) euclidean_ring
  euclidean_size_ratfps == euclidean_size :: 'a ratfps => nat
instantiation
  ratfps :: (field_gcd) euclidean_ring_cancel
instantiation
  ratfps :: (field_gcd) euclidean_ring_gcd
  Gcd_ratfps == Gcd :: 'a ratfps set => 'a ratfps
  Lcm_ratfps == Lcm :: 'a ratfps set => 'a ratfps
  gcd_ratfps == gcd :: 'a ratfps => 'a ratfps => 'a ratfps
  lcm_ratfps == lcm :: 'a ratfps => 'a ratfps => 'a ratfps
### theory "HOL-Library.BigO"
### 0.766s elapsed time, 2.945s cpu time, 0.347s GC time
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
consts
  decompose_aux :: "'a => 'a list => 'a list"
### theory "HOL-Library.Tree"
### 2.069s elapsed time, 7.874s cpu time, 1.370s GC time
Loading theory "Draft.Templates" (required by "Draft.Rational_FPS_AsymptoticsTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.085s elapsed time, 0.290s cpu time, 0.083s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Rational_FPS_AsymptoticsTemplates")
instantiation
  ratfps :: ({field_gcd,random}) random
  random_ratfps == random_class.random ::
    natural
    => natural * natural => ('a ratfps * (unit => term)) * natural * natural
locale pfd_homomorphism
  fixes lift :: "'a => 'b"
  assumes "pfd_homomorphism lift"
instantiation
  ratfps :: ({factorial_ring_gcd,field,exhaustive}) exhaustive
  exhaustive_ratfps == exhaustive_class.exhaustive ::
    ('a ratfps => (bool * term list) option)
    => natural => (bool * term list) option
instantiation
  ratfps :: ({field_gcd,full_exhaustive}) full_exhaustive
  full_exhaustive_ratfps == full_exhaustive_class.full_exhaustive ::
    ('a ratfps * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
### theory "Draft.Partial_Fraction_Decomposition"
### 1.563s elapsed time, 5.652s cpu time, 1.710s GC time
Loading theory "Draft.Rational_FPS_Solver" (required by "Draft.Rational_FPS_AsymptoticsTemplates" via "Draft.Rational_FPS_Asymptotics" via "Draft.Linear_Homogenous_Recurrences")
### theory "Draft.RatFPS"
### 1.722s elapsed time, 6.226s cpu time, 1.817s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.758s elapsed time, 2.031s cpu time, 0.774s GC time
### theory "Draft.Rational_FPS_Solver"
### 0.894s elapsed time, 1.392s cpu time, 0.100s GC time
Loading theory "Draft.Linear_Homogenous_Recurrences" (required by "Draft.Rational_FPS_AsymptoticsTemplates" via "Draft.Rational_FPS_Asymptotics")
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
locale linear_homogenous_recurrence
  fixes f :: "nat => 'a"
    and cs :: "'a list"
    and fs :: "'a list"
  assumes "linear_homogenous_recurrence f cs fs"
### theory "Draft.Linear_Homogenous_Recurrences"
### 0.610s elapsed time, 0.664s cpu time, 0.077s GC time
Loading theory "Draft.Linear_Inhomogenous_Recurrences" (required by "Draft.Rational_FPS_AsymptoticsTemplates" via "Draft.Rational_FPS_Asymptotics")
locale linear_inhomogenous_recurrence
  fixes f :: "nat => 'a"
    and g :: "nat => 'a"
    and cs :: "'a list"
    and fs :: "'a list"
  assumes "linear_inhomogenous_recurrence f g cs fs"
### theory "Draft.Linear_Inhomogenous_Recurrences"
### 0.331s elapsed time, 0.332s cpu time, 0.000s GC time
Loading theory "Draft.Rational_FPS_Asymptotics" (required by "Draft.Rational_FPS_AsymptoticsTemplates")
"proots_sphere_card"
  :: "complex poly => complex => real => nat"
"proots_ball_card"
  :: "complex poly => complex => real => nat"
find_consts
  name: "Count_Complex"
found nothing
### theory "Draft.Rational_FPS_Asymptotics"
### 2.254s elapsed time, 3.187s cpu time, 1.244s GC time
Loading theory "Draft.Rational_FPS_AsymptoticsTemplates"
val templateLemmas =
   [("Rational_FPS_Asymptotics.smult_altdef", "smult ?c ?p = [:?c:] * ?p",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_var 0))),
    ("Rational_FPS_Asymptotics.reflect_poly_dvdI",
     "?p dvd ?q ==> reflect_poly ?p dvd reflect_poly ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Rational_FPS_Asymptotics.smult_power",
     "smult (?c ^ ?n) (?p ^ ?n) = smult ?c ?p ^ ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Rational_FPS_Asymptotics.order_power",
     "?p ~= 0 ==> order ?c (?p ^ ?n) = ?n * order ?c ?p",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 2))))),
    ("Rational_FPS_Asymptotics.same_root_imp_not_coprime",
     "[| poly ?p ?x = (0::?'a); poly ?q ?x = (0::?'a) |]
      ==> ~ coprime ?p ?q",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_hole 2),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 0), template_var 1),
          template_hole 2)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)
               )
           ))),
    ("Rational_FPS_Asymptotics.poly_bigo",
     "[| ?F <= at_infinity; degree ?p <= ?k |]
      ==> poly ?p : O[?F](%x. x ^ ?k)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_hole 6),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 2), t_empty))
           ))),
    ("Rational_FPS_Asymptotics.poly_bigtheta",
     "[| ?p ~= 0; ?F <= at_infinity |]
      ==> poly ?p : \<Theta>[?F](%x. x ^ degree ?p)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 7)),
        template_inequation (less_equals, template_var 0, template_hole 5)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1)),
             template_app
              (template_app (template_hole 2, template_var 0), t_empty))
           ))),
    ("Rational_FPS_Asymptotics.proots_within_card_zero_iff",
     "?p ~= 0 ==>
      (card (proots_within ?p ?A) = 0) = (ALL x:?A. poly ?p x ~= (0::?'a))",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 9))],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 0))),
           template_hole 4),
         template_app
          (template_app (template_hole 3, template_var 0), t_empty)))),
    ("Rational_FPS_Asymptotics.order_reflect_poly_ge",
     "[| ?c ~= (0::?'a); ?p ~= 0 |]
      ==> order ((1::?'a) / ?c) ?p <= order ?c (reflect_poly ?p)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 7)),
        template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Rational_FPS_Asymptotics.poly_reflect_eq_0_iff",
     "(poly (reflect_poly ?p) ?x = (0::?'a)) =
      (?p = 0 | ?x ~= (0::?'a) & poly ?p ((1::?'a) / ?x) = (0::?'a))",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app (template_hole 8, template_var 1)),
           template_var 0),
         template_hole 7),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_hole 4)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 10, template_var 0),
                     template_hole 7))),
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app (template_hole 9, template_var 1),
                     template_app
                      (template_app (template_hole 1, template_hole 0),
                       template_var 0))),
                 template_hole 7)))
           ))),
    ("Rational_FPS_Asymptotics.order_reflect_poly",
     "[| ?c ~= (0::?'a); constant_term ?p ~= (0::?'a) |]
      ==> order ?c (reflect_poly ?p) = order ((1::?'a) / ?c) ?p",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 7)),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 6, template_var 0),
                template_hole 5),
              template_hole 7)
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_var 0)))),
    ("Rational_FPS_Asymptotics.ratfps_has_asymptotics_correct",
     "ratfps_has_asymptotics ?q ?k ?R ==>
      ($) (fps_of_poly ?p / fps_of_poly ?q)
      : O(%n. of_nat n ^ ?k * complex_of_real ?R ^ n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_var 0)),
                   template_app (template_hole 6, template_var 3)))),
             template_app
              (template_app (template_hole 5, template_hole 4), t_empty))
           ))),
    ("Rational_FPS_Asymptotics.poly_asymp_equiv",
     "[| ?p ~= 0; ?F <= at_infinity |]
      ==> poly ?p \<sim>[?F] (%x. lead_coeff ?p * x ^ degree ?p)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 8)),
        template_inequation (less_equals, template_var 0, template_hole 6)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 1)),
               template_var 0),
             t_empty)
           ))),
    ("Rational_FPS_Asymptotics.ratfps_nth_bigo",
     "[| 0 < ?R; !!z. z : ball 0 (1 / ?R) ==> poly ?q z ~= 0;
         !!z. [| z : sphere 0 (1 / ?R); poly ?q z = 0 |]
              ==> order z ?q <= Suc ?k |]
      ==> ($) (fps_of_poly ?p / fps_of_poly ?q)
          : O(%n. of_nat n ^ ?k * complex_of_real ?R ^ n)",
     template_implication
      ([template_inequation (less_than, template_hole 23, template_var 3),
        template_predicate (template_app (template_hole 22, t_empty)),
        template_predicate (template_app (template_hole 22, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_var 0)),
                   template_app (template_hole 6, template_var 2)))),
             template_app
              (template_app (template_hole 5, template_hole 4), t_empty))
           ))),
    ("Rational_FPS_Asymptotics.ratfps_nth_bigo_square_free_factorization'",
     "[| square_free_factorization ?q (?b, ?cs); ?q ~= 0; 0 < ?R;
         list_all (%cl. proots_ball_card (fst cl) 0 (1 / ?R) = 0) ?cs;
         list_all (%cl. proots_sphere_card (fst cl) 0 (1 / ?R) = 0)
          (filter (%cl. ?k < snd cl) ?cs) |]
      ==> ($) (fps_of_poly ?p / fps_of_poly ?q)
          : O(%n. of_nat n ^ ?k * complex_of_real ?R ^ n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 28, template_var 5),
              template_app
               (template_app (template_hole 27, template_var 4),
                template_var 3))
            ),
        template_negation
         (template_equation (template_var 5, template_hole 24)),
        template_inequation (less_than, template_hole 22, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 21, t_empty), template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 21, t_empty),
              template_app
               (template_app (template_hole 12, t_empty), template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_var 0)),
                   template_app (template_hole 6, template_var 5)))),
             template_app
              (template_app (template_hole 5, template_hole 4), t_empty))
           ))),
    ("Rational_FPS_Asymptotics.ratfps_nth_bigo_square_free_factorization",
     "[| square_free_factorization ?q (?b, ?cs); ?q ~= 0; 0 < ?R;
         !!c l. (c, l) : set ?cs ==> ALL x:ball 0 (1 / ?R). poly c x ~= 0;
         !!c l.
            [| (c, l) : set ?cs; ?k < l |]
            ==> ALL x:sphere 0 (1 / ?R). poly c x ~= 0 |]
      ==> ($) (fps_of_poly ?p / fps_of_poly ?q)
          : O(%n. of_nat n ^ ?k * complex_of_real ?R ^ n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 30, template_var 5),
              template_app
               (template_app (template_hole 29, template_var 4),
                template_var 3))
            ),
        template_negation
         (template_equation (template_var 5, template_hole 26)),
        template_inequation (less_than, template_hole 24, template_var 2),
        template_predicate (template_app (template_hole 23, t_empty)),
        template_predicate (template_app (template_hole 23, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_var 0)),
                   template_app (template_hole 6, template_var 5)))),
             template_app
              (template_app (template_hole 5, template_hole 4), t_empty))
           )))]:
   (string * thm * template) list
### theory "Draft.Rational_FPS_AsymptoticsTemplates"
### 1.995s elapsed time, 4.237s cpu time, 0.319s GC time
"[0, 1, 1, 2, 3]"
  :: "real list"
val it = (): unit
